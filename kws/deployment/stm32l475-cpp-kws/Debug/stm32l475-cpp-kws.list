
stm32l475-cpp-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018bec  08010590  08010590  00020590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802917c  0802917c  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  0802917c  0802917c  0003917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029184  08029184  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029184  08029184  00039184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029188  08029188  00039188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0802918c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000080  0802920c  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0802920c  00040458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006183a  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000087cd  00000000  00000000  000a18ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  000aa0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  000abcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031287  00000000  00000000  000ad5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b0e7  00000000  00000000  000de87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00166952  00000000  00000000  00109966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  002702b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e0c  00000000  00000000  00270380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000033a6  00000000  00000000  0027818c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010578 	.word	0x08010578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08010578 	.word	0x08010578

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f4e:	f00c fbab 	bl	800d6a8 <roundf>
 8000f52:	eef0 7a40 	vmov.f32	s15, s0
 8000f56:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 8000f6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f6e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f9c <_ZN4MFCC8MelScaleEf+0x3c>
 8000f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f82:	f00c fcaf 	bl	800d8e4 <logf>
 8000f86:	eef0 7a40 	vmov.f32	s15, s0
 8000f8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fa0 <_ZN4MFCC8MelScaleEf+0x40>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	442f0000 	.word	0x442f0000
 8000fa0:	448ce000 	.word	0x448ce000

08000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fab9 	bl	8000524 <__aeabi_i2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	ec43 2b10 	vmov	d0, r2, r3
 8000fba:	f00c fb9d 	bl	800d6f8 <log>
 8000fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc2:	eef0 7a60 	vmov.f32	s15, s1
 8000fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fca:	eef0 0a67 	vmov.f32	s1, s15
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff fa9f 	bl	8000524 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	ed97 1b00 	vldr	d1, [r7]
 8000fee:	ec43 2b10 	vmov	d0, r2, r3
 8000ff2:	f00c fbc9 	bl	800d788 <pow>
 8000ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8000ffa:	eef0 7a60 	vmov.f32	s15, s1
    }
 8000ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8001002:	eef0 0a67 	vmov.f32	s1, s15
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0000      	movs	r0, r0
	...

08001010 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffb7 	bl	8000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001036:	ec55 4b10 	vmov	r4, r5, d0
 800103a:	2002      	movs	r0, #2
 800103c:	f7ff ffb2 	bl	8000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001040:	ec53 2b10 	vmov	r2, r3, d0
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff fc00 	bl	800084c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	ec43 2b17 	vmov	d7, r2, r3
 8001054:	eeb0 0a47 	vmov.f32	s0, s14
 8001058:	eef0 0a67 	vmov.f32	s1, s15
 800105c:	f00c fa50 	bl	800d500 <ceil>
 8001060:	eeb0 7a40 	vmov.f32	s14, s0
 8001064:	eef0 7a60 	vmov.f32	s15, s1
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ffaf 	bl	8000fd4 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001076:	ec53 2b10 	vmov	r2, r3, d0
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd6b 	bl	8000b58 <__aeabi_d2iz>
 8001082:	4602      	mov	r2, r0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001090:	4293      	cmp	r3, r2
 8001092:	d201      	bcs.n	8001098 <_ZN4MFCCC1Eiii+0x88>
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	e001      	b.n	800109c <_ZN4MFCCC1Eiii+0x8c>
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	f00c fa0e 	bl	800d4be <_Znaj>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d201      	bcs.n	80010ba <_ZN4MFCCC1Eiii+0xaa>
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	e001      	b.n	80010be <_ZN4MFCCC1Eiii+0xae>
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c f9fd 	bl	800d4be <_Znaj>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 80010cc:	20a0      	movs	r0, #160	; 0xa0
 80010ce:	f00c f9f6 	bl	800d4be <_Znaj>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d201      	bcs.n	80010e8 <_ZN4MFCCC1Eiii+0xd8>
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	e001      	b.n	80010ec <_ZN4MFCCC1Eiii+0xdc>
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00c f9e6 	bl	800d4be <_Znaj>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	da3b      	bge.n	800117e <_ZN4MFCCC1Eiii+0x16e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001110:	ee17 0a90 	vmov	r0, s15
 8001114:	f7ff fa18 	bl	8000548 <__aeabi_f2d>
 8001118:	a332      	add	r3, pc, #200	; (adr r3, 80011e4 <_ZN4MFCCC1Eiii+0x1d4>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4614      	mov	r4, r2
 8001128:	461d      	mov	r5, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff f9fa 	bl	8000524 <__aeabi_i2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff fb88 	bl	800084c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <_ZN4MFCCC1Eiii+0x1d0>)
 800114a:	f7ff fa55 	bl	80005f8 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4922      	ldr	r1, [pc, #136]	; (80011e0 <_ZN4MFCCC1Eiii+0x1d0>)
 8001158:	f7ff f896 	bl	8000288 <__aeabi_dsub>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	18d4      	adds	r4, r2, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < frame_len; i++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e7bf      	b.n	80010fe <_ZN4MFCCC1Eiii+0xee>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 800117e:	20a0      	movs	r0, #160	; 0xa0
 8001180:	f00c f99d 	bl	800d4be <_Znaj>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 800118c:	20a0      	movs	r0, #160	; 0xa0
 800118e:	f00c f996 	bl	800d4be <_Znaj>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f942 	bl	8001424 <_ZN4MFCC16create_mel_fbankEv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	2128      	movs	r1, #40	; 0x28
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 f88c 	bl	80012c8 <_ZN4MFCC17create_dct_matrixEll>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80011b6:	2018      	movs	r0, #24
 80011b8:	f00c f970 	bl	800d49c <_Znwj>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f00b f9dd 	bl	800c590 <arm_rfft_fast_init_f32>

}
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	3fe00000 	.word	0x3fe00000
 80011e4:	54442d18 	.word	0x54442d18
 80011e8:	401921fb 	.word	0x401921fb

080011ec <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  delete []frame;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <_ZN4MFCCD1Ev+0x1a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	4618      	mov	r0, r3
 8001202:	f00c f949 	bl	800d498 <_ZdaPv>
  delete [] buffer;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <_ZN4MFCCD1Ev+0x2c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4618      	mov	r0, r3
 8001214:	f00c f940 	bl	800d498 <_ZdaPv>
  delete []mel_energies;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <_ZN4MFCCD1Ev+0x3e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4618      	mov	r0, r3
 8001226:	f00c f937 	bl	800d498 <_ZdaPv>
  delete []window_func;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <_ZN4MFCCD1Ev+0x50>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4618      	mov	r0, r3
 8001238:	f00c f92e 	bl	800d498 <_ZdaPv>
  delete []fbank_filter_first;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <_ZN4MFCCD1Ev+0x62>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4618      	mov	r0, r3
 800124a:	f00c f925 	bl	800d498 <_ZdaPv>
  delete []fbank_filter_last;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <_ZN4MFCCD1Ev+0x74>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	4618      	mov	r0, r3
 800125c:	f00c f91c 	bl	800d498 <_ZdaPv>
  delete []dct_matrix;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <_ZN4MFCCD1Ev+0x86>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	4618      	mov	r0, r3
 800126e:	f00c f913 	bl	800d498 <_ZdaPv>
  delete rfft;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <_ZN4MFCCD1Ev+0x96>
 800127a:	2118      	movs	r1, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f00c f909 	bl	800d494 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b27      	cmp	r3, #39	; 0x27
 800128a:	dc0f      	bgt.n	80012ac <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <_ZN4MFCCD1Ev+0xb8>
 800129c:	2104      	movs	r1, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f00c f8f8 	bl	800d494 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e7ec      	b.n	8001286 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <_ZN4MFCCD1Ev+0xd0>
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00c f8ec 	bl	800d494 <_ZdlPvj>
}
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80012c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012cc:	b08a      	sub	sp, #40	; 0x28
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d201      	bcs.n	80012ea <_ZN4MFCC17create_dct_matrixEll+0x22>
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	e001      	b.n	80012ee <_ZN4MFCC17create_dct_matrixEll+0x26>
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00c f8e5 	bl	800d4be <_Znaj>
 80012f4:	4603      	mov	r3, r0
 80012f6:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130a:	edc7 7a06 	vstr	s15, [r7, #24]
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001314:	edd7 7a06 	vldr	s15, [r7, #24]
 8001318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	db09      	blt.n	8001336 <_ZN4MFCC17create_dct_matrixEll+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001322:	ed97 0a06 	vldr	s0, [r7, #24]
 8001326:	f00c fb13 	bl	800d950 <sqrtf>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001334:	e004      	b.n	8001340 <_ZN4MFCC17create_dct_matrixEll+0x78>
    }
    else
    {
      *pOut = 0.0f;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800133e:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	da5d      	bge.n	8001408 <_ZN4MFCC17create_dct_matrixEll+0x140>
    for (n = 0; n < input_length; n++) {
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	429a      	cmp	r2, r3
 8001356:	da53      	bge.n	8001400 <_ZN4MFCC17create_dct_matrixEll+0x138>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8f4 	bl	8000548 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff f8dd 	bl	8000524 <__aeabi_i2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	a12b      	add	r1, pc, #172	; (adr r1, 800141c <_ZN4MFCC17create_dct_matrixEll+0x154>)
 8001370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001374:	f7ff fa6a 	bl	800084c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4690      	mov	r8, r2
 800137e:	4699      	mov	r9, r3
 8001380:	6a38      	ldr	r0, [r7, #32]
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_i2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <_ZN4MFCC17create_dct_matrixEll+0x150>)
 800138c:	f7fe ff7e 	bl	800028c <__adddf3>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4640      	mov	r0, r8
 8001396:	4649      	mov	r1, r9
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4640      	mov	r0, r8
 80013b0:	4649      	mov	r1, r9
 80013b2:	f7ff f921 	bl	80005f8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	ec43 2b17 	vmov	d7, r2, r3
 80013be:	eeb0 0a47 	vmov.f32	s0, s14
 80013c2:	eef0 0a67 	vmov.f32	s1, s15
 80013c6:	f00c f91f 	bl	800d608 <cos>
 80013ca:	ec53 2b10 	vmov	r2, r3, d0
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	18d4      	adds	r4, r2, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	6023      	str	r3, [r4, #0]
    for (n = 0; n < input_length; n++) {
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	3301      	adds	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	e7a7      	b.n	8001350 <_ZN4MFCC17create_dct_matrixEll+0x88>
  for (k = 0; k < coefficient_count; k++) {
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	3301      	adds	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	e79d      	b.n	8001344 <_ZN4MFCC17create_dct_matrixEll+0x7c>
    }
  }
  return M;
 8001408:	69fb      	ldr	r3, [r7, #28]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	3fe00000 	.word	0x3fe00000
 800141c:	54442d18 	.word	0x54442d18
 8001420:	400921fb 	.word	0x400921fb

08001424 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b095      	sub	sp, #84	; 0x54
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	0fda      	lsrs	r2, r3, #31
 8001432:	4413      	add	r3, r2
 8001434:	105b      	asrs	r3, r3, #1
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001444:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001690 <_ZN4MFCC16create_mel_fbankEv+0x26c>
 8001448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8001450:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001454:	f7ff fd84 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001458:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 800145c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001694 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8001460:	f7ff fd7e 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001464:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8001468:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800146c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001474:	eddf 6a88 	vldr	s13, [pc, #544]	; 8001698 <_ZN4MFCC16create_mel_fbankEv+0x274>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8001480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001482:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001486:	4293      	cmp	r3, r2
 8001488:	d201      	bcs.n	800148e <_ZN4MFCC16create_mel_fbankEv+0x6a>
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	e001      	b.n	8001492 <_ZN4MFCC16create_mel_fbankEv+0x6e>
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	4618      	mov	r0, r3
 8001494:	f00c f813 	bl	800d4be <_Znaj>
 8001498:	4603      	mov	r3, r0
 800149a:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 800149c:	20a0      	movs	r0, #160	; 0xa0
 800149e:	f00c f80e 	bl	800d4be <_Znaj>
 80014a2:	4603      	mov	r3, r0
 80014a4:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ac:	2b27      	cmp	r3, #39	; 0x27
 80014ae:	f300 80e4 	bgt.w	800167a <_ZN4MFCC16create_mel_fbankEv+0x256>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 80014b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 80014d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d2:	3301      	adds	r3, #1
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 80014f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f2:	3302      	adds	r3, #2
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	429a      	cmp	r2, r3
 8001526:	da65      	bge.n	80015f4 <_ZN4MFCC16create_mel_fbankEv+0x1d0>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8001528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 800153e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001542:	f7ff fd0d 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001546:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 800154a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	4413      	add	r3, r2
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8001558:	ed97 7a02 	vldr	s14, [r7, #8]
 800155c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	dd40      	ble.n	80015ec <_ZN4MFCC16create_mel_fbankEv+0x1c8>
 800156a:	ed97 7a02 	vldr	s14, [r7, #8]
 800156e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d537      	bpl.n	80015ec <_ZN4MFCC16create_mel_fbankEv+0x1c8>
        float weight;
        if (mel <= center_mel) {
 800157c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001580:	edd7 7a05 	vldr	s15, [r7, #20]
 8001584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d810      	bhi.n	80015b0 <_ZN4MFCC16create_mel_fbankEv+0x18c>
          weight = (mel - left_mel) / (center_mel - left_mel);
 800158e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001592:	edd7 7a06 	vldr	s15, [r7, #24]
 8001596:	ee77 6a67 	vsub.f32	s13, s14, s15
 800159a:	ed97 7a05 	vldr	s14, [r7, #20]
 800159e:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80015ae:	e00f      	b.n	80015d0 <_ZN4MFCC16create_mel_fbankEv+0x1ac>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 80015b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80015c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 80015d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	4413      	add	r3, r2
 80015d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015da:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e2:	d101      	bne.n	80015e8 <_ZN4MFCC16create_mel_fbankEv+0x1c4>
          first_index = i;
 80015e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 80015e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 80015ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ee:	3301      	adds	r3, #1
 80015f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80015f2:	e795      	b.n	8001520 <_ZN4MFCC16create_mel_fbankEv+0xfc>
      }
    }

    fbank_filter_first[bin] = first_index;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001600:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800160e:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8001610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800161c:	4293      	cmp	r3, r2
 800161e:	d201      	bcs.n	8001624 <_ZN4MFCC16create_mel_fbankEv+0x200>
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	e001      	b.n	8001628 <_ZN4MFCC16create_mel_fbankEv+0x204>
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	69f9      	ldr	r1, [r7, #28]
 800162e:	188c      	adds	r4, r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f00b ff44 	bl	800d4be <_Znaj>
 8001636:	4603      	mov	r3, r0
 8001638:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 800163e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001640:	64bb      	str	r3, [r7, #72]	; 0x48
 8001642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001646:	429a      	cmp	r2, r3
 8001648:	dc13      	bgt.n	8001672 <_ZN4MFCC16create_mel_fbankEv+0x24e>
      mel_fbank[bin][j++] = this_bin[i];
 800164a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	441a      	add	r2, r3
 8001652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	69f9      	ldr	r1, [r7, #28]
 8001658:	440b      	add	r3, r1
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165e:	1c58      	adds	r0, r3, #1
 8001660:	63b8      	str	r0, [r7, #56]	; 0x38
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 800166a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800166c:	3301      	adds	r3, #1
 800166e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001670:	e7e7      	b.n	8001642 <_ZN4MFCC16create_mel_fbankEv+0x21e>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8001672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001674:	3301      	adds	r3, #1
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001678:	e717      	b.n	80014aa <_ZN4MFCC16create_mel_fbankEv+0x86>
    }
  }
  delete []this_bin;
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <_ZN4MFCC16create_mel_fbankEv+0x262>
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f00b ff09 	bl	800d498 <_ZdaPv>
  return mel_fbank;
 8001686:	69fb      	ldr	r3, [r7, #28]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3754      	adds	r7, #84	; 0x54
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	467a0000 	.word	0x467a0000
 8001694:	457a0000 	.word	0x457a0000
 8001698:	42240000 	.word	0x42240000

0800169c <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b095      	sub	sp, #84	; 0x54
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016b2:	429a      	cmp	r2, r3
 80016b4:	da18      	bge.n	80016e8 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	eddf 6aac 	vldr	s13, [pc, #688]	; 8001988 <_ZN4MFCC12mfcc_computeEPKsPa+0x2ec>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 80016e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e2:	3301      	adds	r3, #1
 80016e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e6:	e7e1      	b.n	80016ac <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	18d0      	adds	r0, r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	461a      	mov	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f00e face 	bl	800fca4 <memset>

  for (i = 0; i < frame_len; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001712:	429a      	cmp	r2, r3
 8001714:	da1a      	bge.n	800174c <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8001744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001746:	3301      	adds	r3, #1
 8001748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174a:	e7df      	b.n	800170c <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6919      	ldr	r1, [r3, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	2300      	movs	r3, #0
 800175a:	f00a fffd 	bl	800c758 <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0fda      	lsrs	r2, r3, #31
 8001764:	4413      	add	r3, r2
 8001766:	105b      	asrs	r3, r3, #1
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	3304      	adds	r3, #4
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	3304      	adds	r3, #4
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 800179e:	2301      	movs	r3, #1
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	429a      	cmp	r2, r3
 80017a8:	da23      	bge.n	80017f2 <_ZN4MFCC12mfcc_computeEPKsPa+0x156>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	3304      	adds	r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 80017c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e6:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 80017ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ec:	3301      	adds	r3, #1
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017f0:	e7d7      	b.n	80017a2 <_ZN4MFCC12mfcc_computeEPKsPa+0x106>
  }
  buffer[0] = first_energy;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f8:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001806:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800180e:	2b27      	cmp	r3, #39	; 0x27
 8001810:	dc6d      	bgt.n	80018ee <_ZN4MFCC12mfcc_computeEPKsPa+0x252>
    j = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800183c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	dc3a      	bgt.n	80018ba <_ZN4MFCC12mfcc_computeEPKsPa+0x21e>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8001858:	edd7 7a07 	vldr	s15, [r7, #28]
 800185c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	db09      	blt.n	800187a <_ZN4MFCC12mfcc_computeEPKsPa+0x1de>
      *pOut = sqrtf(in);
 8001866:	ed97 0a07 	vldr	s0, [r7, #28]
 800186a:	f00c f871 	bl	800d950 <sqrtf>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001878:	e004      	b.n	8001884 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e8>
      *pOut = 0.0f;
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001882:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001892:	1c59      	adds	r1, r3, #1
 8001894:	64b9      	str	r1, [r7, #72]	; 0x48
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 80018b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b4:	3301      	adds	r3, #1
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b8:	e7c0      	b.n	800183c <_ZN4MFCC12mfcc_computeEPKsPa+0x1a0>
    }
    mel_energies[bin] = mel_energy;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018c6:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 80018c8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d107      	bne.n	80018e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x24a>
      mel_energies[bin] = FLT_MIN;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018e4:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80018e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e8:	3301      	adds	r3, #1
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
 80018ec:	e78e      	b.n	800180c <_ZN4MFCC12mfcc_computeEPKsPa+0x170>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
 80018f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f4:	2b27      	cmp	r3, #39	; 0x27
 80018f6:	dc17      	bgt.n	8001928 <_ZN4MFCC12mfcc_computeEPKsPa+0x28c>
    mel_energies[bin] = logf(mel_energies[bin]);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18d4      	adds	r4, r2, r3
 8001910:	eeb0 0a67 	vmov.f32	s0, s15
 8001914:	f00b ffe6 	bl	800d8e4 <logf>
 8001918:	eef0 7a40 	vmov.f32	s15, s0
 800191c:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8001920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001922:	3301      	adds	r3, #1
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
 8001926:	e7e4      	b.n	80018f2 <_ZN4MFCC12mfcc_computeEPKsPa+0x256>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001928:	2300      	movs	r3, #0
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001932:	429a      	cmp	r2, r3
 8001934:	da71      	bge.n	8001a1a <_ZN4MFCC12mfcc_computeEPKsPa+0x37e>
    float sum = 0.0;
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800193c:	2300      	movs	r3, #0
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001942:	2b27      	cmp	r3, #39	; 0x27
 8001944:	dc26      	bgt.n	8001994 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	461a      	mov	r2, r3
 8001956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	ed93 7a00 	vldr	s14, [r3]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001974:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001982:	3301      	adds	r3, #1
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
 8001986:	e7db      	b.n	8001940 <_ZN4MFCC12mfcc_computeEPKsPa+0x2a4>
 8001988:	47000000 	.word	0x47000000
 800198c:	42fe0000 	.word	0x42fe0000
 8001990:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80019aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 80019b2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80019b6:	f7ff fac3 	bl	8000f40 <_ZSt5roundf>
 80019ba:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80019be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019c2:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800198c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	db05      	blt.n	80019dc <_ZN4MFCC12mfcc_computeEPKsPa+0x340>
      mfcc_out[i] = 127;
 80019d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	227f      	movs	r2, #127	; 0x7f
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e01a      	b.n	8001a12 <_ZN4MFCC12mfcc_computeEPKsPa+0x376>
    else if(sum <= -128)
 80019dc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019e0:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8001990 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80019e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d805      	bhi.n	80019fa <_ZN4MFCC12mfcc_computeEPKsPa+0x35e>
      mfcc_out[i] = -128;
 80019ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e00b      	b.n	8001a12 <_ZN4MFCC12mfcc_computeEPKsPa+0x376>
    else
      mfcc_out[i] = sum; 
 80019fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	edc7 7a00 	vstr	s15, [r7]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b252      	sxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 8001a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a14:	3301      	adds	r3, #1
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a18:	e788      	b.n	800192c <_ZN4MFCC12mfcc_computeEPKsPa+0x290>
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3754      	adds	r7, #84	; 0x54
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop

08001a24 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <_ZN2NNC1Ev+0x1c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	08015ef4 	.word	0x08015ef4

08001a44 <_ZN6DS_CNNC1Ev>:
const q7_t DS_CNN::conv5_pw_wt[CONV5_OUT_CH*CONV4_OUT_CH]=CONV5_PW_WT;
const q7_t DS_CNN::conv5_pw_bias[CONV5_OUT_CH]=CONV5_PW_BIAS;
const q7_t DS_CNN::final_fc_wt[CONV5_OUT_CH*OUT_DIM]=FINAL_FC_WT;
const q7_t DS_CNN::final_fc_bias[OUT_DIM]=FINAL_FC_BIAS;

DS_CNN::DS_CNN()
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ffe8 	bl	8001a24 <_ZN2NNC1Ev>
 8001a54:	4a19      	ldr	r2, [pc, #100]	; (8001abc <_ZN6DS_CNNC1Ev+0x78>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8001a5a:	f44f 408f 	mov.w	r0, #18304	; 0x4780
 8001a5e:	f00b fd2e 	bl	800d4be <_Znaj>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	61da      	str	r2, [r3, #28]
  buffer1 = scratch_pad;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  buffer2 = buffer1 + (CONV1_OUT_CH*CONV1_OUT_X*CONV1_OUT_Y);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  col_buffer = buffer2 + (CONV2_OUT_CH*CONV2_OUT_X*CONV2_OUT_Y);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	621a      	str	r2, [r3, #32]
  frame_len = FRAME_LEN;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001a90:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a98:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2231      	movs	r2, #49	; 0x31
 8001aa4:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	220c      	movs	r2, #12
 8001aaa:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08015ee0 	.word	0x08015ee0

08001ac0 <_ZN6DS_CNND1Ev>:

DS_CNN::~DS_CNN()
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <_ZN6DS_CNND1Ev+0x30>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <_ZN6DS_CNND1Ev+0x1e>
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00b fcdb 	bl	800d494 <_ZdlPvj>
DS_CNN::~DS_CNN()
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fa29 	bl	8001f38 <_ZN2NND1Ev>
}
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	08015ee0 	.word	0x08015ee0

08001af4 <_ZN6DS_CNND0Ev>:
DS_CNN::~DS_CNN()
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
}
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffdf 	bl	8001ac0 <_ZN6DS_CNND1Ev>
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f00b fcc5 	bl	800d494 <_ZdlPvj>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN6DS_CNN6run_nnEPaS0_>:

void DS_CNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	; 0x50
 8001b18:	af10      	add	r7, sp, #64	; 0x40
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  //CONV1 : regular convolution
  arm_convolve_HWC_q7_basic_nonsquare(in_data, CONV1_IN_X, CONV1_IN_Y, 1, conv1_wt, CONV1_OUT_CH, CONV1_KX, CONV1_KY, CONV1_PX, CONV1_PY, CONV1_SX, CONV1_SY, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_X, CONV1_OUT_Y, (q15_t*)col_buffer, NULL);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	6a12      	ldr	r2, [r2, #32]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	910f      	str	r1, [sp, #60]	; 0x3c
 8001b2c:	920e      	str	r2, [sp, #56]	; 0x38
 8001b2e:	2219      	movs	r2, #25
 8001b30:	920d      	str	r2, [sp, #52]	; 0x34
 8001b32:	2205      	movs	r2, #5
 8001b34:	920c      	str	r2, [sp, #48]	; 0x30
 8001b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b38:	2306      	movs	r3, #6
 8001b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b40:	4ba4      	ldr	r3, [pc, #656]	; (8001dd4 <_ZN6DS_CNN6run_nnEPaS0_+0x2c0>)
 8001b42:	9308      	str	r3, [sp, #32]
 8001b44:	2302      	movs	r3, #2
 8001b46:	9307      	str	r3, [sp, #28]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9306      	str	r3, [sp, #24]
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	9305      	str	r3, [sp, #20]
 8001b50:	2301      	movs	r3, #1
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	230a      	movs	r3, #10
 8001b56:	9303      	str	r3, [sp, #12]
 8001b58:	2304      	movs	r3, #4
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2340      	movs	r3, #64	; 0x40
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	4b9d      	ldr	r3, [pc, #628]	; (8001dd8 <_ZN6DS_CNN6run_nnEPaS0_+0x2c4>)
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	2231      	movs	r2, #49	; 0x31
 8001b68:	210a      	movs	r1, #10
 8001b6a:	68b8      	ldr	r0, [r7, #8]
 8001b6c:	f002 fe3d 	bl	80047ea <arm_convolve_HWC_q7_basic_nonsquare>
  arm_relu_q7(buffer1,CONV1_OUT_X*CONV1_OUT_Y*CONV1_OUT_CH);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 fbfc 	bl	8004376 <arm_relu_q7>

  //CONV2 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV2_IN_X,CONV2_IN_Y,CONV1_OUT_CH,conv2_ds_wt,CONV1_OUT_CH,CONV2_DS_KX,CONV2_DS_KY,CONV2_DS_PX,CONV2_DS_PY,CONV2_DS_SX,CONV2_DS_SY,conv2_ds_bias,CONV2_DS_BIAS_LSHIFT,CONV2_DS_OUT_RSHIFT,buffer2,CONV2_OUT_X,CONV2_OUT_Y,(q15_t*)col_buffer, NULL);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	6a12      	ldr	r2, [r2, #32]
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8001b8e:	920e      	str	r2, [sp, #56]	; 0x38
 8001b90:	2219      	movs	r2, #25
 8001b92:	920d      	str	r2, [sp, #52]	; 0x34
 8001b94:	2205      	movs	r2, #5
 8001b96:	920c      	str	r2, [sp, #48]	; 0x30
 8001b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ba2:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <_ZN6DS_CNN6run_nnEPaS0_+0x2c8>)
 8001ba4:	9308      	str	r3, [sp, #32]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	9307      	str	r3, [sp, #28]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9306      	str	r3, [sp, #24]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	9305      	str	r3, [sp, #20]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	9304      	str	r3, [sp, #16]
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	9303      	str	r3, [sp, #12]
 8001bba:	2303      	movs	r3, #3
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <_ZN6DS_CNN6run_nnEPaS0_+0x2cc>)
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2340      	movs	r3, #64	; 0x40
 8001bc8:	2219      	movs	r2, #25
 8001bca:	2105      	movs	r1, #5
 8001bcc:	f003 f823 	bl	8004c16 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fbcc 	bl	8004376 <arm_relu_q7>

  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV2_OUT_X, CONV2_OUT_Y, CONV1_OUT_CH, conv2_pw_wt, CONV2_OUT_CH, 1, 1, 0, 0, 1, 1, conv2_pw_bias, CONV2_PW_BIAS_LSHIFT, CONV2_PW_OUT_RSHIFT, buffer1, CONV2_OUT_X, CONV2_OUT_Y, (q15_t*)col_buffer, NULL);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	6a12      	ldr	r2, [r2, #32]
 8001bea:	2100      	movs	r1, #0
 8001bec:	910f      	str	r1, [sp, #60]	; 0x3c
 8001bee:	920e      	str	r2, [sp, #56]	; 0x38
 8001bf0:	2219      	movs	r2, #25
 8001bf2:	920d      	str	r2, [sp, #52]	; 0x34
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	920c      	str	r2, [sp, #48]	; 0x30
 8001bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8001bfe:	2304      	movs	r3, #4
 8001c00:	9309      	str	r3, [sp, #36]	; 0x24
 8001c02:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <_ZN6DS_CNN6run_nnEPaS0_+0x2d0>)
 8001c04:	9308      	str	r3, [sp, #32]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9307      	str	r3, [sp, #28]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	9306      	str	r3, [sp, #24]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9305      	str	r3, [sp, #20]
 8001c12:	2300      	movs	r3, #0
 8001c14:	9304      	str	r3, [sp, #16]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9303      	str	r3, [sp, #12]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	2340      	movs	r3, #64	; 0x40
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <_ZN6DS_CNN6run_nnEPaS0_+0x2d4>)
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2340      	movs	r3, #64	; 0x40
 8001c28:	2219      	movs	r2, #25
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	f002 fc1b 	bl	8004466 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fb9c 	bl	8004376 <arm_relu_q7>

  //CONV3 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV3_IN_X,CONV3_IN_Y,CONV2_OUT_CH,conv3_ds_wt,CONV2_OUT_CH,CONV3_DS_KX,CONV3_DS_KY,CONV3_DS_PX,CONV3_DS_PY,CONV3_DS_SX,CONV3_DS_SY,conv3_ds_bias,CONV3_DS_BIAS_LSHIFT,CONV3_DS_OUT_RSHIFT,buffer2,CONV3_OUT_X,CONV3_OUT_Y,(q15_t*)col_buffer, NULL);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	6a12      	ldr	r2, [r2, #32]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8001c4e:	920e      	str	r2, [sp, #56]	; 0x38
 8001c50:	2219      	movs	r2, #25
 8001c52:	920d      	str	r2, [sp, #52]	; 0x34
 8001c54:	2205      	movs	r2, #5
 8001c56:	920c      	str	r2, [sp, #48]	; 0x30
 8001c58:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9309      	str	r3, [sp, #36]	; 0x24
 8001c62:	4b62      	ldr	r3, [pc, #392]	; (8001dec <_ZN6DS_CNN6run_nnEPaS0_+0x2d8>)
 8001c64:	9308      	str	r3, [sp, #32]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9307      	str	r3, [sp, #28]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	9306      	str	r3, [sp, #24]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	9305      	str	r3, [sp, #20]
 8001c72:	2301      	movs	r3, #1
 8001c74:	9304      	str	r3, [sp, #16]
 8001c76:	2303      	movs	r3, #3
 8001c78:	9303      	str	r3, [sp, #12]
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	9302      	str	r3, [sp, #8]
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <_ZN6DS_CNN6run_nnEPaS0_+0x2dc>)
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2340      	movs	r3, #64	; 0x40
 8001c88:	2219      	movs	r2, #25
 8001c8a:	2105      	movs	r1, #5
 8001c8c:	f002 ffc3 	bl	8004c16 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fb6c 	bl	8004376 <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV3_OUT_X, CONV3_OUT_Y, CONV2_OUT_CH, conv3_pw_wt, CONV3_OUT_CH, 1, 1, 0, 0, 1, 1, conv3_pw_bias, CONV3_PW_BIAS_LSHIFT, CONV3_PW_OUT_RSHIFT, buffer1, CONV3_OUT_X, CONV3_OUT_Y, (q15_t*)col_buffer, NULL);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6a12      	ldr	r2, [r2, #32]
 8001caa:	2100      	movs	r1, #0
 8001cac:	910f      	str	r1, [sp, #60]	; 0x3c
 8001cae:	920e      	str	r2, [sp, #56]	; 0x38
 8001cb0:	2219      	movs	r2, #25
 8001cb2:	920d      	str	r2, [sp, #52]	; 0x34
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	920c      	str	r2, [sp, #48]	; 0x30
 8001cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001cba:	2308      	movs	r3, #8
 8001cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8001cc2:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <_ZN6DS_CNN6run_nnEPaS0_+0x2e0>)
 8001cc4:	9308      	str	r3, [sp, #32]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9307      	str	r3, [sp, #28]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	9306      	str	r3, [sp, #24]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9305      	str	r3, [sp, #20]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9304      	str	r3, [sp, #16]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	9303      	str	r3, [sp, #12]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	2340      	movs	r3, #64	; 0x40
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <_ZN6DS_CNN6run_nnEPaS0_+0x2e4>)
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2340      	movs	r3, #64	; 0x40
 8001ce8:	2219      	movs	r2, #25
 8001cea:	2105      	movs	r1, #5
 8001cec:	f002 fbbb 	bl	8004466 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fb3c 	bl	8004376 <arm_relu_q7>

  //CONV4 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV4_IN_X,CONV4_IN_Y,CONV3_OUT_CH,conv4_ds_wt,CONV3_OUT_CH,CONV4_DS_KX,CONV4_DS_KY,CONV4_DS_PX,CONV4_DS_PY,CONV4_DS_SX,CONV4_DS_SY,conv4_ds_bias,CONV4_DS_BIAS_LSHIFT,CONV4_DS_OUT_RSHIFT,buffer2,CONV4_OUT_X,CONV4_OUT_Y,(q15_t*)col_buffer, NULL);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	6a12      	ldr	r2, [r2, #32]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	910f      	str	r1, [sp, #60]	; 0x3c
 8001d0e:	920e      	str	r2, [sp, #56]	; 0x38
 8001d10:	2219      	movs	r2, #25
 8001d12:	920d      	str	r2, [sp, #52]	; 0x34
 8001d14:	2205      	movs	r2, #5
 8001d16:	920c      	str	r2, [sp, #48]	; 0x30
 8001d18:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d1a:	2305      	movs	r3, #5
 8001d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8001d1e:	2303      	movs	r3, #3
 8001d20:	9309      	str	r3, [sp, #36]	; 0x24
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <_ZN6DS_CNN6run_nnEPaS0_+0x2e8>)
 8001d24:	9308      	str	r3, [sp, #32]
 8001d26:	2301      	movs	r3, #1
 8001d28:	9307      	str	r3, [sp, #28]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9306      	str	r3, [sp, #24]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	9305      	str	r3, [sp, #20]
 8001d32:	2301      	movs	r3, #1
 8001d34:	9304      	str	r3, [sp, #16]
 8001d36:	2303      	movs	r3, #3
 8001d38:	9303      	str	r3, [sp, #12]
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <_ZN6DS_CNN6run_nnEPaS0_+0x2ec>)
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	2219      	movs	r2, #25
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	f002 ff63 	bl	8004c16 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fb0c 	bl	8004376 <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV4_OUT_X, CONV4_OUT_Y, CONV3_OUT_CH, conv4_pw_wt, CONV4_OUT_CH, 1, 1, 0, 0, 1, 1, conv4_pw_bias, CONV4_PW_BIAS_LSHIFT, CONV4_PW_OUT_RSHIFT, buffer1, CONV4_OUT_X, CONV4_OUT_Y, (q15_t*)col_buffer, NULL);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	6a12      	ldr	r2, [r2, #32]
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	910f      	str	r1, [sp, #60]	; 0x3c
 8001d6e:	920e      	str	r2, [sp, #56]	; 0x38
 8001d70:	2219      	movs	r2, #25
 8001d72:	920d      	str	r2, [sp, #52]	; 0x34
 8001d74:	2205      	movs	r2, #5
 8001d76:	920c      	str	r2, [sp, #48]	; 0x30
 8001d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8001d7e:	2305      	movs	r3, #5
 8001d80:	9309      	str	r3, [sp, #36]	; 0x24
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <_ZN6DS_CNN6run_nnEPaS0_+0x2f0>)
 8001d84:	9308      	str	r3, [sp, #32]
 8001d86:	2301      	movs	r3, #1
 8001d88:	9307      	str	r3, [sp, #28]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9306      	str	r3, [sp, #24]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9305      	str	r3, [sp, #20]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9304      	str	r3, [sp, #16]
 8001d96:	2301      	movs	r3, #1
 8001d98:	9303      	str	r3, [sp, #12]
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2340      	movs	r3, #64	; 0x40
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <_ZN6DS_CNN6run_nnEPaS0_+0x2f4>)
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2340      	movs	r3, #64	; 0x40
 8001da8:	2219      	movs	r2, #25
 8001daa:	2105      	movs	r1, #5
 8001dac:	f002 fb5b 	bl	8004466 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fadc 	bl	8004376 <arm_relu_q7>

  //CONV5 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV5_IN_X,CONV5_IN_Y,CONV4_OUT_CH,conv5_ds_wt,CONV4_OUT_CH,CONV5_DS_KX,CONV5_DS_KY,CONV5_DS_PX,CONV5_DS_PY,CONV5_DS_SX,CONV5_DS_SY,conv5_ds_bias,CONV5_DS_BIAS_LSHIFT,CONV5_DS_OUT_RSHIFT,buffer2,CONV5_OUT_X,CONV5_OUT_Y,(q15_t*)col_buffer, NULL);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	6a12      	ldr	r2, [r2, #32]
 8001dca:	2100      	movs	r1, #0
 8001dcc:	910f      	str	r1, [sp, #60]	; 0x3c
 8001dce:	920e      	str	r2, [sp, #56]	; 0x38
 8001dd0:	2219      	movs	r2, #25
 8001dd2:	e01b      	b.n	8001e0c <_ZN6DS_CNN6run_nnEPaS0_+0x2f8>
 8001dd4:	0801108c 	.word	0x0801108c
 8001dd8:	0801068c 	.word	0x0801068c
 8001ddc:	0801130c 	.word	0x0801130c
 8001de0:	080110cc 	.word	0x080110cc
 8001de4:	0801234c 	.word	0x0801234c
 8001de8:	0801134c 	.word	0x0801134c
 8001dec:	080125cc 	.word	0x080125cc
 8001df0:	0801238c 	.word	0x0801238c
 8001df4:	0801360c 	.word	0x0801360c
 8001df8:	0801260c 	.word	0x0801260c
 8001dfc:	0801388c 	.word	0x0801388c
 8001e00:	0801364c 	.word	0x0801364c
 8001e04:	080148cc 	.word	0x080148cc
 8001e08:	080138cc 	.word	0x080138cc
 8001e0c:	920d      	str	r2, [sp, #52]	; 0x34
 8001e0e:	2205      	movs	r2, #5
 8001e10:	920c      	str	r2, [sp, #48]	; 0x30
 8001e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e14:	2305      	movs	r3, #5
 8001e16:	930a      	str	r3, [sp, #40]	; 0x28
 8001e18:	2303      	movs	r3, #3
 8001e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <_ZN6DS_CNN6run_nnEPaS0_+0x40c>)
 8001e1e:	9308      	str	r3, [sp, #32]
 8001e20:	2301      	movs	r3, #1
 8001e22:	9307      	str	r3, [sp, #28]
 8001e24:	2301      	movs	r3, #1
 8001e26:	9306      	str	r3, [sp, #24]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9305      	str	r3, [sp, #20]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	9304      	str	r3, [sp, #16]
 8001e30:	2303      	movs	r3, #3
 8001e32:	9303      	str	r3, [sp, #12]
 8001e34:	2303      	movs	r3, #3
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	2340      	movs	r3, #64	; 0x40
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <_ZN6DS_CNN6run_nnEPaS0_+0x410>)
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2340      	movs	r3, #64	; 0x40
 8001e42:	2219      	movs	r2, #25
 8001e44:	2105      	movs	r1, #5
 8001e46:	f002 fee6 	bl	8004c16 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 fa8f 	bl	8004376 <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV5_OUT_X, CONV5_OUT_Y, CONV4_OUT_CH, conv5_pw_wt, CONV5_OUT_CH, 1, 1, 0, 0, 1, 1, conv5_pw_bias, CONV5_PW_BIAS_LSHIFT, CONV5_PW_OUT_RSHIFT, buffer1, CONV5_OUT_X, CONV5_OUT_Y, (q15_t*)col_buffer, NULL);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6a12      	ldr	r2, [r2, #32]
 8001e64:	2100      	movs	r1, #0
 8001e66:	910f      	str	r1, [sp, #60]	; 0x3c
 8001e68:	920e      	str	r2, [sp, #56]	; 0x38
 8001e6a:	2219      	movs	r2, #25
 8001e6c:	920d      	str	r2, [sp, #52]	; 0x34
 8001e6e:	2205      	movs	r2, #5
 8001e70:	920c      	str	r2, [sp, #48]	; 0x30
 8001e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e74:	2308      	movs	r3, #8
 8001e76:	930a      	str	r3, [sp, #40]	; 0x28
 8001e78:	2305      	movs	r3, #5
 8001e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <_ZN6DS_CNN6run_nnEPaS0_+0x414>)
 8001e7e:	9308      	str	r3, [sp, #32]
 8001e80:	2301      	movs	r3, #1
 8001e82:	9307      	str	r3, [sp, #28]
 8001e84:	2301      	movs	r3, #1
 8001e86:	9306      	str	r3, [sp, #24]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9305      	str	r3, [sp, #20]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9304      	str	r3, [sp, #16]
 8001e90:	2301      	movs	r3, #1
 8001e92:	9303      	str	r3, [sp, #12]
 8001e94:	2301      	movs	r3, #1
 8001e96:	9302      	str	r3, [sp, #8]
 8001e98:	2340      	movs	r3, #64	; 0x40
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <_ZN6DS_CNN6run_nnEPaS0_+0x418>)
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2340      	movs	r3, #64	; 0x40
 8001ea2:	2219      	movs	r2, #25
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	f002 fade 	bl	8004466 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 fa5f 	bl	8004376 <arm_relu_q7>

  //Average pool
  arm_avepool_q7_HWC_nonsquare (buffer1,CONV5_OUT_X,CONV5_OUT_Y,CONV5_OUT_CH,CONV5_OUT_X,CONV5_OUT_Y,0,0,1,1,1,1,NULL,buffer2, 2);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	920a      	str	r2, [sp, #40]	; 0x28
 8001ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9308      	str	r3, [sp, #32]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	9307      	str	r3, [sp, #28]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9306      	str	r3, [sp, #24]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9305      	str	r3, [sp, #20]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9304      	str	r3, [sp, #16]
 8001eda:	2300      	movs	r3, #0
 8001edc:	9303      	str	r3, [sp, #12]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2319      	movs	r3, #25
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2340      	movs	r3, #64	; 0x40
 8001eec:	2219      	movs	r2, #25
 8001eee:	2105      	movs	r1, #5
 8001ef0:	f000 f832 	bl	8001f58 <arm_avepool_q7_HWC_nonsquare>

  arm_fully_connected_q7(buffer2, final_fc_wt, CONV5_OUT_CH, OUT_DIM, FINAL_FC_BIAS_LSHIFT, FINAL_FC_OUT_RSHIFT, final_fc_bias, out_data, (q15_t*)col_buffer);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	9304      	str	r3, [sp, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	9303      	str	r3, [sp, #12]
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <_ZN6DS_CNN6run_nnEPaS0_+0x41c>)
 8001f04:	9302      	str	r3, [sp, #8]
 8001f06:	2307      	movs	r3, #7
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	230c      	movs	r3, #12
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <_ZN6DS_CNN6run_nnEPaS0_+0x420>)
 8001f14:	f004 fd19 	bl	800694a <arm_fully_connected_q7>

}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	08014b4c 	.word	0x08014b4c
 8001f24:	0801490c 	.word	0x0801490c
 8001f28:	08015b8c 	.word	0x08015b8c
 8001f2c:	08014b8c 	.word	0x08014b8c
 8001f30:	08015ecc 	.word	0x08015ecc
 8001f34:	08015bcc 	.word	0x08015bcc

08001f38 <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "ML-KWS-for-MCU/NN/nn.h"

NN::~NN() {
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <_ZN2NND1Ev+0x1c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	08015ef4 	.word	0x08015ef4

08001f58 <arm_avepool_q7_HWC_nonsquare>:
        const uint16_t dim_im_out_x,  // output image dimension
        const uint16_t dim_im_out_y,  // output image dimension
        q7_t * bufferA,               // a buffer for local storage
        q7_t * Im_out,                // output feature
        const uint16_t out_lshift)    // output left shift (scaling)
{
 8001f58:	b4b0      	push	{r4, r5, r7}
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  int16_t i_ch_in, i_x, i_y;
  int16_t k_x, k_y;
  
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f76:	e0b2      	b.n	80020de <arm_avepool_q7_HWC_nonsquare+0x186>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 8001f78:	2300      	movs	r3, #0
 8001f7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f7c:	e0a2      	b.n	80020c4 <arm_avepool_q7_HWC_nonsquare+0x16c>
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 8001f7e:	2300      	movs	r3, #0
 8001f80:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f82:	e092      	b.n	80020aa <arm_avepool_q7_HWC_nonsquare+0x152>
        int sum = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
        int count = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 8001f8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001f92:	fb12 f303 	smulbb	r3, r2, r3
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	83fb      	strh	r3, [r7, #30]
 8001fa2:	e052      	b.n	800204a <arm_avepool_q7_HWC_nonsquare+0xf2>
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fa6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001faa:	fb12 f303 	smulbb	r3, r2, r3
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	843b      	strh	r3, [r7, #32]
 8001fba:	e031      	b.n	8002020 <arm_avepool_q7_HWC_nonsquare+0xc8>
            if (k_y >= 0 && k_x >= 0 && k_y<dim_im_in_y && k_x<dim_im_in_x) {
 8001fbc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db27      	blt.n	8002014 <arm_avepool_q7_HWC_nonsquare+0xbc>
 8001fc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db23      	blt.n	8002014 <arm_avepool_q7_HWC_nonsquare+0xbc>
 8001fcc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001fd0:	893b      	ldrh	r3, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	da1e      	bge.n	8002014 <arm_avepool_q7_HWC_nonsquare+0xbc>
 8001fd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	da19      	bge.n	8002014 <arm_avepool_q7_HWC_nonsquare+0xbc>
              sum += Im_in[i_ch_in + ch_im_in*(k_x+k_y*dim_im_in_x)];
 8001fe0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001fea:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8001fee:	897c      	ldrh	r4, [r7, #10]
 8001ff0:	fb04 f101 	mul.w	r1, r4, r1
 8001ff4:	4401      	add	r1, r0
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	f993 3000 	ldrsb.w	r3, [r3]
 8002006:	461a      	mov	r2, r3
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4413      	add	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
              count++;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8002014:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002018:	b29b      	uxth	r3, r3
 800201a:	3301      	adds	r3, #1
 800201c:	b29b      	uxth	r3, r3
 800201e:	843b      	strh	r3, [r7, #32]
 8002020:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002024:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002028:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800202c:	fb01 f103 	mul.w	r1, r1, r3
 8002030:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002034:	1ac9      	subs	r1, r1, r3
 8002036:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002038:	440b      	add	r3, r1
 800203a:	429a      	cmp	r2, r3
 800203c:	dbbe      	blt.n	8001fbc <arm_avepool_q7_HWC_nonsquare+0x64>
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 800203e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002042:	b29b      	uxth	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	b29b      	uxth	r3, r3
 8002048:	83fb      	strh	r3, [r7, #30]
 800204a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800204e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002052:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8002056:	fb01 f103 	mul.w	r1, r1, r3
 800205a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800205e:	1ac9      	subs	r1, r1, r3
 8002060:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002062:	440b      	add	r3, r1
 8002064:	429a      	cmp	r2, r3
 8002066:	db9d      	blt.n	8001fa4 <arm_avepool_q7_HWC_nonsquare+0x4c>
            }
          }
        }
        Im_out[i_ch_in+ch_im_in*(i_x+i_y*dim_im_out_x)] = sum*(0x1<<out_lshift)/count;
 8002068:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	409a      	lsls	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fb92 f5f3 	sdiv	r5, r2, r3
 8002076:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 8002080:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8002084:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8002088:	fb04 f101 	mul.w	r1, r4, r1
 800208c:	4401      	add	r1, r0
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	461a      	mov	r2, r3
 8002096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002098:	4413      	add	r3, r2
 800209a:	b26a      	sxtb	r2, r5
 800209c:	701a      	strb	r2, [r3, #0]
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800209e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80020aa:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80020ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020b2:	429a      	cmp	r2, r3
 80020b4:	f6ff af66 	blt.w	8001f84 <arm_avepool_q7_HWC_nonsquare+0x2c>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 80020b8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80020c4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80020c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80020cc:	429a      	cmp	r2, r3
 80020ce:	f6ff af56 	blt.w	8001f7e <arm_avepool_q7_HWC_nonsquare+0x26>
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 80020d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80020de:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f6ff af47 	blt.w	8001f78 <arm_avepool_q7_HWC_nonsquare+0x20>
      }
    }
  }
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	372c      	adds	r7, #44	; 0x2c
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bcb0      	pop	{r4, r5, r7}
 80020f4:	4770      	bx	lr

080020f6 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>

// constructor
AudioPlayer::AudioPlayer(DAC_HandleTypeDef *hdac)
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
: hdac(hdac)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	611a      	str	r2, [r3, #16]
{
	dac_stop_flag = 1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	731a      	strb	r2, [r3, #12]
}
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
}
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	cur_data = data;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
	played_samples = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
	converted_samples = 0;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]

	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 800214c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002150:	f00b f9b5 	bl	800d4be <_Znaj>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]
	dac_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 800215c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002160:	f00b f9ad 	bl	800d4be <_Znaj>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]


	// initial full read
	update_dac_buffer(0, PLAY_BUFFER_LENGTH);
 800216c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002170:	2100      	movs	r1, #0
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f834 	bl	80021e0 <_ZN11AudioPlayer17update_dac_bufferEmm>

	// Start DAC in circular mode
	dac_stop_flag = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	731a      	strb	r2, [r3, #12]
	if (HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, PLAY_BUFFER_LENGTH, DAC_ALIGN_12B_R) == HAL_ERROR) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6918      	ldr	r0, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800218e:	2100      	movs	r1, #0
 8002190:	f005 fafa 	bl	8007788 <HAL_DAC_Start_DMA>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
		Error_Handler();
 80021a4:	f001 f870 	bl	8003288 <Error_Handler>
	}
	while(!dac_stop_flag);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7b1b      	ldrb	r3, [r3, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d100      	bne.n	80021b2 <_ZN11AudioPlayer10play_audioEP8WaveData+0x82>
 80021b0:	e7fa      	b.n	80021a8 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
	delete [] dac_buffer;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <_ZN11AudioPlayer10play_audioEP8WaveData+0x94>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f00b f96a 	bl	800d498 <_ZdaPv>
	delete [] conversion_buffer;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <_ZN11AudioPlayer10play_audioEP8WaveData+0xa6>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00b f961 	bl	800d498 <_ZdaPv>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <_ZN11AudioPlayer17update_dac_bufferEmm>:

// update buffer. Method called by dac callbacks functions.
void AudioPlayer::update_dac_buffer(uint32_t offset, uint32_t data_length) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 80021f4:	617b      	str	r3, [r7, #20]
	uint32_t read_length = data_length;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	61fb      	str	r3, [r7, #28]
	if (read_length >= remaining_samples) {
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d301      	bcc.n	8002206 <_ZN11AudioPlayer17update_dac_bufferEmm+0x26>
		read_length = remaining_samples;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	61fb      	str	r3, [r7, #28]
	}
	if (read_length > 0) {
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d046      	beq.n	800229a <_ZN11AudioPlayer17update_dac_bufferEmm+0xba>
		qspi_read((uint8_t*)conversion_buffer, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6858      	ldr	r0, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	18d1      	adds	r1, r2, r3
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	461a      	mov	r2, r3
 8002224:	f001 f83e 	bl	80032a4 <_Z9qspi_readPhmm>
		for (uint32_t i = 0; i < read_length; i++){
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	429a      	cmp	r2, r3
 8002232:	d220      	bcs.n	8002276 <_ZN11AudioPlayer17update_dac_bufferEmm+0x96>
			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_DAC_SCALE_FACTOR + WAVE_TO_DAC_BIAS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002248:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80022a4 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc4>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80022a8 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc8>
 8002254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002266:	ee17 2a90 	vmov	r2, s15
 800226a:	b292      	uxth	r2, r2
 800226c:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < read_length; i++){
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3301      	adds	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	e7da      	b.n	800222c <_ZN11AudioPlayer17update_dac_bufferEmm+0x4c>
		}
		converted_samples += read_length;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	441a      	add	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	619a      	str	r2, [r3, #24]
		memcpy(dac_buffer + offset, conversion_buffer, read_length * DAC_DATA_WIDTH);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	18d0      	adds	r0, r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	461a      	mov	r2, r3
 8002296:	f00d fcdd 	bl	800fc54 <memcpy>
	}
}
 800229a:	bf00      	nop
 800229c:	3720      	adds	r7, #32
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	3d7ff100 	.word	0x3d7ff100
 80022a8:	44fff100 	.word	0x44fff100

080022ac <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	731a      	strb	r2, [r3, #12]
}
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
}
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 8002316:	2008      	movs	r0, #8
 8002318:	f00b f8c0 	bl	800d49c <_Znwj>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff ffc2 	bl	80022ac <_ZN8WaveDataC1Em>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 800232c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002330:	f00b f8c5 	bl	800d4be <_Znaj>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 800233c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8002340:	f00b f8bd 	bl	800d4be <_Znaj>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6918      	ldr	r0, [r3, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800235e:	4619      	mov	r1, r3
 8002360:	f005 feb2 	bl	80080c8 <HAL_DFSDM_FilterRegularStart_DMA>
 8002364:	4603      	mov	r3, r0
 8002366:	2b01      	cmp	r3, #1
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 8002374:	f000 ff88 	bl	8003288 <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <_ZN13AudioRecorder12record_audioEm+0xb8>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 8002380:	f000 f94c 	bl	800261c <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 8002384:	f001 fef6 	bl	8004174 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7b1b      	ldrb	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d100      	bne.n	8002392 <_ZN13AudioRecorder12record_audioEm+0x86>
 8002390:	e7fa      	b.n	8002388 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <_ZN13AudioRecorder12record_audioEm+0x98>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f00b f87a 	bl	800d498 <_ZdaPv>
	delete [] wave_buffer;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <_ZN13AudioRecorder12record_audioEm+0xaa>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f00b f871 	bl	800d498 <_ZdaPv>
	return cur_data;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000004 	.word	0x20000004

080023c8 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 80023de:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d301      	bcc.n	80023f0 <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d213      	bcs.n	8002424 <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	440b      	add	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1419      	asrs	r1, r3, #16
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	b20a      	sxth	r2, r1
 800241a:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	3301      	adds	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	e7e7      	b.n	80023f4 <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6858      	ldr	r0, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	18d1      	adds	r1, r2, r3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	461a      	mov	r2, r3
 800243e:	f000 ff4a 	bl	80032d6 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	440a      	add	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <_Z13get_top_classPa>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(q7_t* nn_output) {
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8002468:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800246c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <_Z13get_top_classPa+0x58>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d214      	bcs.n	80024a6 <_Z13get_top_classPa+0x4a>
		if (nn_output[i] > max_value) {
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	f993 3000 	ldrsb.w	r3, [r3]
 8002486:	461a      	mov	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4293      	cmp	r3, r2
 800248c:	da07      	bge.n	800249e <_Z13get_top_classPa+0x42>
			max_index = i;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	f993 3000 	ldrsb.w	r3, [r3]
 800249c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e7e5      	b.n	8002472 <_Z13get_top_classPa+0x16>
		}
	}
	return max_index;
 80024a6:	697b      	ldr	r3, [r7, #20]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000000 	.word	0x20000000

080024b8 <_Z19average_predictionsPaS_mm>:

void average_predictions(q7_t *average_out, q7_t* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6178      	str	r0, [r7, #20]
 80024c0:	6139      	str	r1, [r7, #16]
 80024c2:	60fa      	str	r2, [r7, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
	q15_t *sum = new q15_t[num_output_classes];
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4a32      	ldr	r2, [pc, #200]	; (8002594 <_Z19average_predictionsPaS_mm+0xdc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d801      	bhi.n	80024d2 <_Z19average_predictionsPaS_mm+0x1a>
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	e001      	b.n	80024d6 <_Z19average_predictionsPaS_mm+0x1e>
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	4618      	mov	r0, r3
 80024d8:	f00a fff1 	bl	800d4be <_Znaj>
 80024dc:	4603      	mov	r3, r0
 80024de:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d248      	bcs.n	800257e <_Z19average_predictionsPaS_mm+0xc6>
		sum[i] = 0;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	2200      	movs	r2, #0
 80024f6:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	6a3a      	ldr	r2, [r7, #32]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d21d      	bcs.n	8002540 <_Z19average_predictionsPaS_mm+0x88>
			sum[i] += average_window_head[j * num_output_classes + i];
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002510:	b29a      	uxth	r2, r3
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	fb01 f103 	mul.w	r1, r1, r3
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	440b      	add	r3, r1
 800251e:	6939      	ldr	r1, [r7, #16]
 8002520:	440b      	add	r3, r1
 8002522:	f993 3000 	ldrsb.w	r3, [r3]
 8002526:	b29b      	uxth	r3, r3
 8002528:	4413      	add	r3, r2
 800252a:	b299      	uxth	r1, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	b20a      	sxth	r2, r1
 8002536:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	3301      	adds	r3, #1
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	e7dd      	b.n	80024fc <_Z19average_predictionsPaS_mm+0x44>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800255e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	4413      	add	r3, r2
 8002568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002570:	793a      	ldrb	r2, [r7, #4]
 8002572:	b252      	sxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	3301      	adds	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e7b2      	b.n	80024e4 <_Z19average_predictionsPaS_mm+0x2c>
	}
	delete [] sum;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <_Z19average_predictionsPaS_mm+0xd2>
 8002584:	69f8      	ldr	r0, [r7, #28]
 8002586:	f00a ff87 	bl	800d498 <_ZdaPv>
}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	3ffffffc 	.word	0x3ffffffc

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db12      	blt.n	800260c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	490a      	ldr	r1, [pc, #40]	; (8002618 <__NVIC_DisableIRQ+0x44>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	3320      	adds	r3, #32
 80025fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002600:	f3bf 8f4f 	dsb	sy
}
 8002604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002606:	f3bf 8f6f 	isb	sy
}
 800260a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100

0800261c <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8002620:	f001 fd96 	bl	8004150 <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8002624:	201c      	movs	r0, #28
 8002626:	f7ff ffd5 	bl	80025d4 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800262a:	201a      	movs	r0, #26
 800262c:	f7ff ffd2 	bl	80025d4 <__NVIC_DisableIRQ>
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002630:	2101      	movs	r1, #1
 8002632:	2000      	movs	r0, #0
 8002634:	f006 fc16 	bl	8008e64 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8002638:	201c      	movs	r0, #28
 800263a:	f7ff ffad 	bl	8002598 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800263e:	201a      	movs	r0, #26
 8002640:	f7ff ffaa 	bl	8002598 <__NVIC_EnableIRQ>
	HAL_ResumeTick();
 8002644:	f001 fd96 	bl	8004174 <HAL_ResumeTick>
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b0a7      	sub	sp, #156	; 0x9c
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002652:	f004 fe4f 	bl	80072f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002656:	f000 fa3f 	bl	8002ad8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800265a:	f000 fc57 	bl	8002f0c <_ZL12MX_GPIO_Initv>
  MX_QUADSPI_Init();
 800265e:	f000 fb75 	bl	8002d4c <_ZL15MX_QUADSPI_Initv>
  MX_DMA_Init();
 8002662:	f000 fc2d 	bl	8002ec0 <_ZL11MX_DMA_Initv>
  MX_DAC1_Init();
 8002666:	f000 fac1 	bl	8002bec <_ZL12MX_DAC1_Initv>
  MX_DFSDM1_Init();
 800266a:	f000 fafb 	bl	8002c64 <_ZL14MX_DFSDM1_Initv>
  MX_TIM2_Init();
 800266e:	f000 fb97 	bl	8002da0 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8002672:	f000 fbf1 	bl	8002e58 <_ZL19MX_USART1_UART_Initv>
  MX_CRC_Init();
 8002676:	f000 fa91 	bl	8002b9c <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */

  qspi_init();
 800267a:	f000 fe45 	bl	8003308 <_Z9qspi_initv>
  HAL_TIM_Base_Start_IT(&htim2);
 800267e:	48c4      	ldr	r0, [pc, #784]	; (8002990 <main+0x344>)
 8002680:	f008 fce2 	bl	800b048 <HAL_TIM_Base_Start_IT>
  main_state = SETUP;
 8002684:	4bc3      	ldr	r3, [pc, #780]	; (8002994 <main+0x348>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"Silence", "Unknown","yes","no","up","down","left","right","on","off","stop","go"};
 800268a:	4ac3      	ldr	r2, [pc, #780]	; (8002998 <main+0x34c>)
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4611      	mov	r1, r2
 8002690:	2260      	movs	r2, #96	; 0x60
 8002692:	4618      	mov	r0, r3
 8002694:	f00d fade 	bl	800fc54 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(main_state) {
 8002698:	4bbe      	ldr	r3, [pc, #760]	; (8002994 <main+0x348>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d8fa      	bhi.n	8002698 <main+0x4c>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <main+0x5c>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	08002aab 	.word	0x08002aab
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	08002701 	.word	0x08002701
 80026b4:	08002777 	.word	0x08002777
 80026b8:	08002a5d 	.word	0x08002a5d
	case SETUP:
	{
		ITM_Port32(31) = 1;
 80026bc:	4bb7      	ldr	r3, [pc, #732]	; (800299c <main+0x350>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026c8:	48b5      	ldr	r0, [pc, #724]	; (80029a0 <main+0x354>)
 80026ca:	f006 fb9b 	bl	8008e04 <HAL_GPIO_WritePin>

		// To indicate to user, don't do nothing when red light
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2108      	movs	r1, #8
 80026d2:	48b4      	ldr	r0, [pc, #720]	; (80029a4 <main+0x358>)
 80026d4:	f006 fb96 	bl	8008e04 <HAL_GPIO_WritePin>
		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 80026d8:	2106      	movs	r1, #6
 80026da:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 80026de:	f000 fe24 	bl	800332a <_Z17qspi_erase_blocksmm>

		ITM_Port32(31) = 2;
 80026e2:	4bae      	ldr	r3, [pc, #696]	; (800299c <main+0x350>)
 80026e4:	2202      	movs	r2, #2
 80026e6:	601a      	str	r2, [r3, #0]
		print("Press the blue button and say a keyword\r\n");
 80026e8:	48af      	ldr	r0, [pc, #700]	; (80029a8 <main+0x35c>)
 80026ea:	f000 fda1 	bl	8003230 <print>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	2108      	movs	r1, #8
 80026f2:	48ac      	ldr	r0, [pc, #688]	; (80029a4 <main+0x358>)
 80026f4:	f006 fb86 	bl	8008e04 <HAL_GPIO_WritePin>
	  	main_state = READY;
 80026f8:	4ba6      	ldr	r3, [pc, #664]	; (8002994 <main+0x348>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
		break;
 80026fe:	e1de      	b.n	8002abe <main+0x472>
	}
	case RECORDING:
	{
		ITM_Port32(31) = 3;
 8002700:	4ba6      	ldr	r3, [pc, #664]	; (800299c <main+0x350>)
 8002702:	2203      	movs	r2, #3
 8002704:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002706:	2201      	movs	r2, #1
 8002708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800270c:	48a4      	ldr	r0, [pc, #656]	; (80029a0 <main+0x354>)
 800270e:	f006 fb79 	bl	8008e04 <HAL_GPIO_WritePin>
		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 8002712:	2014      	movs	r0, #20
 8002714:	f00a fec2 	bl	800d49c <_Znwj>
 8002718:	4603      	mov	r3, r0
 800271a:	461c      	mov	r4, r3
 800271c:	49a3      	ldr	r1, [pc, #652]	; (80029ac <main+0x360>)
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff fdd6 	bl	80022d0 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8002724:	4ba2      	ldr	r3, [pc, #648]	; (80029b0 <main+0x364>)
 8002726:	601c      	str	r4, [r3, #0]
		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8002728:	4ba1      	ldr	r3, [pc, #644]	; (80029b0 <main+0x364>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fdeb 	bl	800230c <_ZN13AudioRecorder12record_audioEm>
 8002736:	4603      	mov	r3, r0
 8002738:	4a9e      	ldr	r2, [pc, #632]	; (80029b4 <main+0x368>)
 800273a:	6013      	str	r3, [r2, #0]

		ITM_Port32(31) = 4;
 800273c:	4b97      	ldr	r3, [pc, #604]	; (800299c <main+0x350>)
 800273e:	2204      	movs	r2, #4
 8002740:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002748:	4895      	ldr	r0, [pc, #596]	; (80029a0 <main+0x354>)
 800274a:	f006 fb5b 	bl	8008e04 <HAL_GPIO_WritePin>
//		main_state = NN;
		audio_recorder->~AudioRecorder();
 800274e:	4b98      	ldr	r3, [pc, #608]	; (80029b0 <main+0x364>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fdce 	bl	80022f4 <_ZN13AudioRecorderD1Ev>
		delete audio_recorder;
 8002758:	4b95      	ldr	r3, [pc, #596]	; (80029b0 <main+0x364>)
 800275a:	681c      	ldr	r4, [r3, #0]
 800275c:	2c00      	cmp	r4, #0
 800275e:	d006      	beq.n	800276e <main+0x122>
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff fdc7 	bl	80022f4 <_ZN13AudioRecorderD1Ev>
 8002766:	2114      	movs	r1, #20
 8002768:	4620      	mov	r0, r4
 800276a:	f00a fe93 	bl	800d494 <_ZdlPvj>
		main_state = AUDIO_TEST;
 800276e:	4b89      	ldr	r3, [pc, #548]	; (8002994 <main+0x348>)
 8002770:	2204      	movs	r2, #4
 8002772:	701a      	strb	r2, [r3, #0]
		break;
 8002774:	e1a3      	b.n	8002abe <main+0x472>
	}
	case NN:
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002776:	2200      	movs	r2, #0
 8002778:	2108      	movs	r1, #8
 800277a:	488a      	ldr	r0, [pc, #552]	; (80029a4 <main+0x358>)
 800277c:	f006 fb42 	bl	8008e04 <HAL_GPIO_WritePin>

		// input buffer
		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 8002780:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002784:	f00a fe9b 	bl	800d4be <_Znaj>
 8002788:	4603      	mov	r3, r0
 800278a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// mfcc coefficients
		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 800278e:	2101      	movs	r1, #1
 8002790:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8002794:	f00d fa1c 	bl	800fbd0 <calloc>
 8002798:	4603      	mov	r3, r0
 800279a:	67fb      	str	r3, [r7, #124]	; 0x7c

		// output buffer
		q7_t *predictions = (q7_t*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(q7_t));
 800279c:	2101      	movs	r1, #1
 800279e:	206c      	movs	r0, #108	; 0x6c
 80027a0:	f00d fa16 	bl	800fbd0 <calloc>
 80027a4:	4603      	mov	r3, r0
 80027a6:	67bb      	str	r3, [r7, #120]	; 0x78

		// average predictions
		q7_t *average = new q7_t[NUM_OUTPUT_CLASSES];
 80027a8:	200c      	movs	r0, #12
 80027aa:	f00a fe88 	bl	800d4be <_Znaj>
 80027ae:	4603      	mov	r3, r0
 80027b0:	677b      	str	r3, [r7, #116]	; 0x74

		uint32_t pred_index;

		q7_t *mfcc_head;
		DS_CNN *ds_cnn = new DS_CNN();
 80027b2:	202c      	movs	r0, #44	; 0x2c
 80027b4:	f00a fe72 	bl	800d49c <_Znwj>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461c      	mov	r4, r3
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff f941 	bl	8001a44 <_ZN6DS_CNNC1Ev>
 80027c2:	673c      	str	r4, [r7, #112]	; 0x70
		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 80027c4:	2034      	movs	r0, #52	; 0x34
 80027c6:	f00a fe69 	bl	800d49c <_Znwj>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461c      	mov	r4, r3
 80027ce:	2301      	movs	r3, #1
 80027d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80027d4:	210a      	movs	r1, #10
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7fe fc1a 	bl	8001010 <_ZN4MFCCC1Eiii>
 80027dc:	66fc      	str	r4, [r7, #108]	; 0x6c

		bool keyword_detected = false;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		q7_t *average_window_head = predictions;
 80027e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	f200 80ef 	bhi.w	80029d8 <main+0x38c>
				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 80027fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027fe:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 800280a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800280e:	4619      	mov	r1, r3
 8002810:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002814:	f000 fd46 	bl	80032a4 <_Z9qspi_readPhmm>
				// move old data to the left
				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8002818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8002820:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002822:	4618      	mov	r0, r3
 8002824:	f009 fd86 	bl	800c334 <arm_copy_q7>
				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8002828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800282a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800282e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800283c:	2b04      	cmp	r3, #4
 800283e:	d81a      	bhi.n	8002876 <main+0x22a>
					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8002840:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	01db      	lsls	r3, r3, #7
 800284c:	461a      	mov	r2, r3
 800284e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002852:	4413      	add	r3, r2
 8002854:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002858:	4619      	mov	r1, r3
 800285a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800285c:	f7fe ff1e 	bl	800169c <_ZN4MFCC12mfcc_computeEPKsPa>
					mfcc_head += NUM_MFCC_COEFFS;
 8002860:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002864:	330a      	adds	r3, #10
 8002866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 800286a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800286e:	3301      	adds	r3, #1
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002874:	e7e0      	b.n	8002838 <main+0x1ec>
				}
				q7_t* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8002876:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	461a      	mov	r2, r3
 8002884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002886:	4413      	add	r3, r2
 8002888:	66bb      	str	r3, [r7, #104]	; 0x68
				ds_cnn->run_nn(mfcc_out, nn_out);
 800288a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3308      	adds	r3, #8
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002896:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002898:	4798      	blx	r3
//				arm_softmax_q7(nn_out,NUM_OUTPUT_CLASSES,nn_out);

				// get prediction for each recording window
				if (DEBUG_MODE) {
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <main+0x36c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d014      	beq.n	80028cc <main+0x280>
					pred_index = get_top_class(nn_out);
 80028a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80028a4:	f7ff fdda 	bl	800245c <_Z13get_top_classPa>
 80028a8:	6678      	str	r0, [r7, #100]	; 0x64
					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], nn_out[pred_index]);
 80028aa:	1d3a      	adds	r2, r7, #4
 80028ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	18d1      	adds	r1, r2, r3
 80028b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b6:	4413      	add	r3, r2
 80028b8:	f993 3000 	ldrsb.w	r3, [r3]
 80028bc:	460a      	mov	r2, r1
 80028be:	493f      	ldr	r1, [pc, #252]	; (80029bc <main+0x370>)
 80028c0:	483f      	ldr	r0, [pc, #252]	; (80029c0 <main+0x374>)
 80028c2:	f00d fb05 	bl	800fed0 <siprintf>
					print(uart_buffer);
 80028c6:	483e      	ldr	r0, [pc, #248]	; (80029c0 <main+0x374>)
 80028c8:	f000 fcb2 	bl	8003230 <print>
				}

				// increment average window pointer
				if (i >= AVERAGE_WINDOW_LENGTH) {
 80028cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d904      	bls.n	80028de <main+0x292>
					average_window_head += NUM_OUTPUT_CLASSES;
 80028d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028d8:	330c      	adds	r3, #12
 80028da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 80028de:	230c      	movs	r3, #12
 80028e0:	2203      	movs	r2, #3
 80028e2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80028e6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80028e8:	f7ff fde6 	bl	80024b8 <_Z19average_predictionsPaS_mm>
				pred_index = get_top_class(average);
 80028ec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80028ee:	f7ff fdb5 	bl	800245c <_Z13get_top_classPa>
 80028f2:	6678      	str	r0, [r7, #100]	; 0x64

				if (DEBUG_MODE) {
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <main+0x36c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d010      	beq.n	800291e <main+0x2d2>
					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], average[pred_index]);
 80028fc:	1d3a      	adds	r2, r7, #4
 80028fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	18d1      	adds	r1, r2, r3
 8002904:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002908:	4413      	add	r3, r2
 800290a:	f993 3000 	ldrsb.w	r3, [r3]
 800290e:	460a      	mov	r2, r1
 8002910:	492c      	ldr	r1, [pc, #176]	; (80029c4 <main+0x378>)
 8002912:	482b      	ldr	r0, [pc, #172]	; (80029c0 <main+0x374>)
 8002914:	f00d fadc 	bl	800fed0 <siprintf>
					print(uart_buffer);
 8002918:	4829      	ldr	r0, [pc, #164]	; (80029c0 <main+0x374>)
 800291a:	f000 fc89 	bl	8003230 <print>
				}

				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 800291e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002922:	4413      	add	r3, r2
 8002924:	f993 3000 	ldrsb.w	r3, [r3]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fdfb 	bl	8000524 <__aeabi_i2d>
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <main+0x37c>)
 8002934:	f7fd ff8a 	bl	800084c <__aeabi_ddiv>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <main+0x380>)
 8002946:	f7fd fe57 	bl	80005f8 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <main+0x384>)
 8002958:	f7fe f8de 	bl	8000b18 <__aeabi_dcmpgt>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00f      	beq.n	8002982 <main+0x336>
					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	461a      	mov	r2, r3
 800296c:	4919      	ldr	r1, [pc, #100]	; (80029d4 <main+0x388>)
 800296e:	4814      	ldr	r0, [pc, #80]	; (80029c0 <main+0x374>)
 8002970:	f00d faae 	bl	800fed0 <siprintf>
					print(uart_buffer);
 8002974:	4812      	ldr	r0, [pc, #72]	; (80029c0 <main+0x374>)
 8002976:	f000 fc5b 	bl	8003230 <print>
					keyword_detected = true;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
					break;
 8002980:	e02a      	b.n	80029d8 <main+0x38c>
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8002982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002986:	3301      	adds	r3, #1
 8002988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800298c:	e730      	b.n	80027f0 <main+0x1a4>
 800298e:	bf00      	nop
 8002990:	20000234 	.word	0x20000234
 8002994:	20000304 	.word	0x20000304
 8002998:	0801062c 	.word	0x0801062c
 800299c:	e000007c 	.word	0xe000007c
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48001000 	.word	0x48001000
 80029a8:	08010590 	.word	0x08010590
 80029ac:	2000011c 	.word	0x2000011c
 80029b0:	2000036c 	.word	0x2000036c
 80029b4:	20000370 	.word	0x20000370
 80029b8:	20000005 	.word	0x20000005
 80029bc:	080105bc 	.word	0x080105bc
 80029c0:	20000308 	.word	0x20000308
 80029c4:	080105dc 	.word	0x080105dc
 80029c8:	40600000 	.word	0x40600000
 80029cc:	40590000 	.word	0x40590000
 80029d0:	40418000 	.word	0x40418000
 80029d4:	080105f8 	.word	0x080105f8
				}
		}

		if (!keyword_detected) {
 80029d8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <main+0x3a0>
			print("No keyword detected.");
 80029e6:	4836      	ldr	r0, [pc, #216]	; (8002ac0 <main+0x474>)
 80029e8:	f000 fc22 	bl	8003230 <print>
		}

		mfcc->~MFCC();
 80029ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80029ee:	f7fe fbfd 	bl	80011ec <_ZN4MFCCD1Ev>
		delete mfcc;
 80029f2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	d006      	beq.n	8002a06 <main+0x3ba>
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7fe fbf7 	bl	80011ec <_ZN4MFCCD1Ev>
 80029fe:	2134      	movs	r1, #52	; 0x34
 8002a00:	4620      	mov	r0, r4
 8002a02:	f00a fd47 	bl	800d494 <_ZdlPvj>
		ds_cnn->~DS_CNN();
 8002a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002a0e:	4798      	blx	r3
		delete ds_cnn;
 8002a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <main+0x3d4>
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	3204      	adds	r2, #4
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4790      	blx	r2
		delete [] mfcc_out;
 8002a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <main+0x3e0>
 8002a26:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002a28:	f00a fd36 	bl	800d498 <_ZdaPv>
		delete [] predictions;
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <main+0x3ec>
 8002a32:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a34:	f00a fd30 	bl	800d498 <_ZdaPv>
		delete [] average;
 8002a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <main+0x3f8>
 8002a3e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002a40:	f00a fd2a 	bl	800d498 <_ZdaPv>
		delete [] audio_buffer;
 8002a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <main+0x408>
 8002a4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002a50:	f00a fd22 	bl	800d498 <_ZdaPv>
		main_state = SETUP;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <main+0x478>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
		break;
 8002a5a:	e030      	b.n	8002abe <main+0x472>
	}
	case AUDIO_TEST:
	{
		audio_player = new AudioPlayer(&hdac1);
 8002a5c:	201c      	movs	r0, #28
 8002a5e:	f00a fd1d 	bl	800d49c <_Znwj>
 8002a62:	4603      	mov	r3, r0
 8002a64:	461c      	mov	r4, r3
 8002a66:	4918      	ldr	r1, [pc, #96]	; (8002ac8 <main+0x47c>)
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff fb44 	bl	80020f6 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <main+0x480>)
 8002a70:	601c      	str	r4, [r3, #0]
		audio_player->play_audio(wave_data);
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <main+0x480>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <main+0x484>)
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fb57 	bl	8002130 <_ZN11AudioPlayer10play_audioEP8WaveData>

//		audio_recorder->print_data(wave_data);
		main_state = NN;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <main+0x478>)
 8002a84:	2203      	movs	r2, #3
 8002a86:	701a      	strb	r2, [r3, #0]
//		main_state = SETUP;
		audio_player->~AudioPlayer();
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <main+0x480>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fb44 	bl	800211a <_ZN11AudioPlayerD1Ev>
		delete audio_player;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <main+0x480>)
 8002a94:	681c      	ldr	r4, [r3, #0]
 8002a96:	2c00      	cmp	r4, #0
 8002a98:	d00e      	beq.n	8002ab8 <main+0x46c>
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7ff fb3d 	bl	800211a <_ZN11AudioPlayerD1Ev>
 8002aa0:	211c      	movs	r1, #28
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f00a fcf6 	bl	800d494 <_ZdlPvj>

		break;
 8002aa8:	e006      	b.n	8002ab8 <main+0x46c>
	}
	case READY:
	{
		if (LOW_POWER_MODE)
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <main+0x488>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <main+0x470>
			enter_sleep_mode();
 8002ab2:	f7ff fdb3 	bl	800261c <_Z16enter_sleep_modev>
		break;
 8002ab6:	e001      	b.n	8002abc <main+0x470>
		break;
 8002ab8:	bf00      	nop
 8002aba:	e5ed      	b.n	8002698 <main+0x4c>
		break;
 8002abc:	bf00      	nop
	}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002abe:	e5eb      	b.n	8002698 <main+0x4c>
 8002ac0:	08010614 	.word	0x08010614
 8002ac4:	20000304 	.word	0x20000304
 8002ac8:	200000c0 	.word	0x200000c0
 8002acc:	20000374 	.word	0x20000374
 8002ad0:	20000370 	.word	0x20000370
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b096      	sub	sp, #88	; 0x58
 8002adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	2244      	movs	r2, #68	; 0x44
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00d f8dc 	bl	800fca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aec:	463b      	mov	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002afa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002afe:	f006 f9f3 	bl	8008ee8 <HAL_PWREx_ControlVoltageScaling>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002b12:	f000 fbb9 	bl	8003288 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b16:	2310      	movs	r3, #16
 8002b18:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002b22:	2360      	movs	r3, #96	; 0x60
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b26:	2302      	movs	r3, #2
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002b32:	2328      	movs	r3, #40	; 0x28
 8002b34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b36:	2307      	movs	r3, #7
 8002b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4618      	mov	r0, r3
 8002b48:	f006 ff4c 	bl	80099e4 <HAL_RCC_OscConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf14      	ite	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	2300      	moveq	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8002b5c:	f000 fb94 	bl	8003288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b60:	230f      	movs	r3, #15
 8002b62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b64:	2303      	movs	r3, #3
 8002b66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b74:	463b      	mov	r3, r7
 8002b76:	2104      	movs	r1, #4
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f007 fb19 	bl	800a1b0 <HAL_RCC_ClockConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8002b8e:	f000 fb7b 	bl	8003288 <Error_Handler>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3758      	adds	r7, #88	; 0x58
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_ZL11MX_CRC_Initv+0x48>)
 8002ba2:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <_ZL11MX_CRC_Initv+0x4c>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <_ZL11MX_CRC_Initv+0x48>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <_ZL11MX_CRC_Initv+0x48>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <_ZL11MX_CRC_Initv+0x48>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <_ZL11MX_CRC_Initv+0x48>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <_ZL11MX_CRC_Initv+0x48>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002bc4:	4807      	ldr	r0, [pc, #28]	; (8002be4 <_ZL11MX_CRC_Initv+0x48>)
 8002bc6:	f004 fcd3 	bl	8007570 <HAL_CRC_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8002bda:	f000 fb55 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000009c 	.word	0x2000009c
 8002be8:	40023000 	.word	0x40023000

08002bec <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2224      	movs	r2, #36	; 0x24
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f00d f853 	bl	800fca4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <_ZL12MX_DAC1_Initv+0x70>)
 8002c00:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <_ZL12MX_DAC1_Initv+0x74>)
 8002c02:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002c04:	4815      	ldr	r0, [pc, #84]	; (8002c5c <_ZL12MX_DAC1_Initv+0x70>)
 8002c06:	f004 fd9d 	bl	8007744 <HAL_DAC_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 8002c1a:	f000 fb35 	bl	8003288 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002c22:	2324      	movs	r3, #36	; 0x24
 8002c24:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	4619      	mov	r1, r3
 8002c38:	4808      	ldr	r0, [pc, #32]	; (8002c5c <_ZL12MX_DAC1_Initv+0x70>)
 8002c3a:	f004 fec0 	bl	80079be <HAL_DAC_ConfigChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8002c4e:	f000 fb1b 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200000c0 	.word	0x200000c0
 8002c60:	40007400 	.word	0x40007400

08002c64 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c6a:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <_ZL14MX_DFSDM1_Initv+0xd8>)
 8002c6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8002c6e:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c82:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002c86:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 200;
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c8a:	22c8      	movs	r2, #200	; 0xc8
 8002c8c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8002c94:	4828      	ldr	r0, [pc, #160]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002c96:	f005 f8f7 	bl	8007e88 <HAL_DFSDM_FilterInit>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_ZL14MX_DFSDM1_Initv+0x4a>
  {
    Error_Handler();
 8002caa:	f000 faed 	bl	8003288 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cb0:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <_ZL14MX_DFSDM1_Initv+0xe0>)
 8002cb2:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 25;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cc2:	2219      	movs	r2, #25
 8002cc4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002cfc:	4810      	ldr	r0, [pc, #64]	; (8002d40 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002cfe:	f005 f803 	bl	8007d08 <HAL_DFSDM_ChannelInit>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <_ZL14MX_DFSDM1_Initv+0xb2>
  {
    Error_Handler();
 8002d12:	f000 fab9 	bl	8003288 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8002d16:	2201      	movs	r2, #1
 8002d18:	490b      	ldr	r1, [pc, #44]	; (8002d48 <_ZL14MX_DFSDM1_Initv+0xe4>)
 8002d1a:	4807      	ldr	r0, [pc, #28]	; (8002d38 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002d1c:	f005 f98e 	bl	800803c <HAL_DFSDM_FilterConfigRegChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <_ZL14MX_DFSDM1_Initv+0xd0>
  {
    Error_Handler();
 8002d30:	f000 faaa 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	2000011c 	.word	0x2000011c
 8002d3c:	40016100 	.word	0x40016100
 8002d40:	20000170 	.word	0x20000170
 8002d44:	40016040 	.word	0x40016040
 8002d48:	00020004 	.word	0x00020004

08002d4c <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <_ZL15MX_QUADSPI_Initv+0x50>)
 8002d54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002d7a:	4807      	ldr	r0, [pc, #28]	; (8002d98 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002d7c:	f006 f952 	bl	8009024 <HAL_QSPI_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <_ZL15MX_QUADSPI_Initv+0x48>
  {
    Error_Handler();
 8002d90:	f000 fa7a 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200001f0 	.word	0x200001f0
 8002d9c:	a0001000 	.word	0xa0001000

08002da0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dbe:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dcc:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002de6:	481b      	ldr	r0, [pc, #108]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002de8:	f008 f8d6 	bl	800af98 <HAL_TIM_Base_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf14      	ite	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	2300      	moveq	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002dfc:	f000 fa44 	bl	8003288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4811      	ldr	r0, [pc, #68]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e0e:	f008 faaa 	bl	800b366 <HAL_TIM_ConfigClockSource>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8002e22:	f000 fa31 	bl	8003288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e26:	2320      	movs	r3, #32
 8002e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4808      	ldr	r0, [pc, #32]	; (8002e54 <_ZL12MX_TIM2_Initv+0xb4>)
 8002e34:	f008 fcbc 	bl	800b7b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002e48:	f000 fa1e 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000234 	.word	0x20000234

08002e58 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <_ZL19MX_USART1_UART_Initv+0x64>)
 8002e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e7e:	220c      	movs	r2, #12
 8002e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e9a:	4807      	ldr	r0, [pc, #28]	; (8002eb8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002e9c:	f008 fd2e 	bl	800b8fc <HAL_UART_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002eb0:	f000 f9ea 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000280 	.word	0x20000280
 8002ebc:	40013800 	.word	0x40013800

08002ec0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <_ZL11MX_DMA_Initv+0x48>)
 8002ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eca:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <_ZL11MX_DMA_Initv+0x48>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6493      	str	r3, [r2, #72]	; 0x48
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <_ZL11MX_DMA_Initv+0x48>)
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	200d      	movs	r0, #13
 8002ee4:	f004 fb1a 	bl	800751c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ee8:	200d      	movs	r0, #13
 8002eea:	f004 fb33 	bl	8007554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	200e      	movs	r0, #14
 8002ef4:	f004 fb12 	bl	800751c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002ef8:	200e      	movs	r0, #14
 8002efa:	f004 fb2b 	bl	8007554 <HAL_NVIC_EnableIRQ>

}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000

08002f0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f22:	4b39      	ldr	r3, [pc, #228]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	4a38      	ldr	r2, [pc, #224]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f28:	f043 0310 	orr.w	r3, r3, #16
 8002f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	4a32      	ldr	r2, [pc, #200]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	4a26      	ldr	r2, [pc, #152]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <_ZL12MX_GPIO_Initv+0xfc>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2108      	movs	r1, #8
 8002f86:	4821      	ldr	r0, [pc, #132]	; (800300c <_ZL12MX_GPIO_Initv+0x100>)
 8002f88:	f005 ff3c 	bl	8008e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f92:	481f      	ldr	r0, [pc, #124]	; (8003010 <_ZL12MX_GPIO_Initv+0x104>)
 8002f94:	f005 ff36 	bl	8008e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8002f98:	2308      	movs	r3, #8
 8002f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4619      	mov	r1, r3
 8002fae:	4817      	ldr	r0, [pc, #92]	; (800300c <_ZL12MX_GPIO_Initv+0x100>)
 8002fb0:	f005 fc8a 	bl	80088c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4812      	ldr	r0, [pc, #72]	; (8003014 <_ZL12MX_GPIO_Initv+0x108>)
 8002fcc:	f005 fc7c 	bl	80088c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8002fd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4809      	ldr	r0, [pc, #36]	; (8003010 <_ZL12MX_GPIO_Initv+0x104>)
 8002fea:	f005 fc6d 	bl	80088c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	2028      	movs	r0, #40	; 0x28
 8002ff4:	f004 fa92 	bl	800751c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ff8:	2028      	movs	r0, #40	; 0x28
 8002ffa:	f004 faab 	bl	8007554 <HAL_NVIC_EnableIRQ>

}
 8002ffe:	bf00      	nop
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	48001000 	.word	0x48001000
 8003010:	48000400 	.word	0x48000400
 8003014:	48000800 	.word	0x48000800

08003018 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// callback function of GPIO interrupts
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003028:	d11f      	bne.n	800306a <HAL_GPIO_EXTI_Callback+0x52>
	case BUTTON_Pin:
		switch(main_state) {
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <HAL_GPIO_EXTI_Callback+0x60>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b05      	cmp	r3, #5
 8003032:	d819      	bhi.n	8003068 <HAL_GPIO_EXTI_Callback+0x50>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_GPIO_EXTI_Callback+0x24>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	08003055 	.word	0x08003055
 8003040:	08003067 	.word	0x08003067
 8003044:	0800305d 	.word	0x0800305d
 8003048:	08003067 	.word	0x08003067
 800304c:	08003067 	.word	0x08003067
 8003050:	08003067 	.word	0x08003067
		case READY:
			main_state = RECORDING;
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_GPIO_EXTI_Callback+0x60>)
 8003056:	2202      	movs	r2, #2
 8003058:	701a      	strb	r2, [r3, #0]
			break;
 800305a:	e005      	b.n	8003068 <HAL_GPIO_EXTI_Callback+0x50>
		case RECORDING:
//			dfsdm_stop_flag = 1;
			audio_recorder->dfsdm_stop_flag = 1;
 800305c:	4b07      	ldr	r3, [pc, #28]	; (800307c <HAL_GPIO_EXTI_Callback+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	731a      	strb	r2, [r3, #12]
			break;
 8003064:	e000      	b.n	8003068 <HAL_GPIO_EXTI_Callback+0x50>
		case SETUP:
		case MFCC_TEST:
		case AUDIO_TEST:
		case NN:
			break;
 8003066:	bf00      	nop
		}
		break;
 8003068:	bf00      	nop
	}
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000304 	.word	0x20000304
 800307c:	2000036c 	.word	0x2000036c

08003080 <HAL_DAC_ConvHalfCpltCallbackCh1>:

// DAC Circular DMA callback functions
void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a17      	ldr	r2, [pc, #92]	; (80030ec <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d128      	bne.n	80030e4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 80030a0:	615a      	str	r2, [r3, #20]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80030ac:	d312      	bcc.n	80030d4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f004 fc35 	bl	8007920 <HAL_DAC_Stop_DMA>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_DAC_ConvHalfCpltCallbackCh1+0x4a>
				Error_Handler();
 80030c6:	f000 f8df 	bl	8003288 <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 80030d2:	e007      	b.n	80030e4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f87e 	bl	80021e0 <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40007400 	.word	0x40007400
 80030f0:	20000374 	.word	0x20000374

080030f4 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 800310a:	615a      	str	r2, [r3, #20]
	if (hdac->Instance == DAC1) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d121      	bne.n	800315a <HAL_DAC_ConvCpltCallbackCh1+0x66>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003120:	d312      	bcc.n	8003148 <HAL_DAC_ConvCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 8003122:	2100      	movs	r1, #0
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f004 fbfb 	bl	8007920 <HAL_DAC_Stop_DMA>
 800312a:	4603      	mov	r3, r0
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_DAC_ConvCpltCallbackCh1+0x4a>
				Error_Handler();
 800313a:	f000 f8a5 	bl	8003288 <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8003146:	e008      	b.n	800315a <HAL_DAC_ConvCpltCallbackCh1+0x66>
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003150:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff f843 	bl	80021e0 <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000374 	.word	0x20000374
 8003168:	40007400 	.word	0x40007400

0800316c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d11f      	bne.n	80031bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f91e 	bl	80023c8 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003198:	d310      	bcc.n	80031bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f005 f812 	bl	80081cc <HAL_DFSDM_FilterRegularStop_DMA>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 80031b8:	f000 f866 	bl	8003288 <Error_Handler>
			}
		}
	}
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000011c 	.word	0x2000011c
 80031c8:	2000036c 	.word	0x2000036c

080031cc <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a14      	ldr	r2, [pc, #80]	; (8003228 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d120      	bne.n	800321e <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80031e4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f8ed 	bl	80023c8 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80031fa:	d310      	bcc.n	800321e <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f004 ffe1 	bl	80081cc <HAL_DFSDM_FilterRegularStop_DMA>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 800321a:	f000 f835 	bl	8003288 <Error_Handler>
			}
		}

	}
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000011c 	.word	0x2000011c
 800322c:	2000036c 	.word	0x2000036c

08003230 <print>:

void print(const char* txt) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4808      	ldr	r0, [pc, #32]	; (800325c <print+0x2c>)
 800323c:	f00c fe68 	bl	800ff10 <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fc ffc5 	bl	80001d0 <strlen>
 8003246:	4603      	mov	r3, r0
 8003248:	b29a      	uxth	r2, r3
 800324a:	230a      	movs	r3, #10
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <print+0x2c>)
 800324e:	4804      	ldr	r0, [pc, #16]	; (8003260 <print+0x30>)
 8003250:	f008 fba2 	bl	800b998 <HAL_UART_Transmit>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000308 	.word	0x20000308
 8003260:	20000280 	.word	0x20000280

08003264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003276:	f004 f855 	bl	8007324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40014800 	.word	0x40014800

08003288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800328c:	2200      	movs	r2, #0
 800328e:	2108      	movs	r1, #8
 8003290:	4803      	ldr	r0, [pc, #12]	; (80032a0 <Error_Handler+0x18>)
 8003292:	f005 fdb7 	bl	8008e04 <HAL_GPIO_WritePin>
	__BKPT();
 8003296:	be00      	bkpt	0x0000
  __ASM volatile ("cpsid i" : : : "memory");
 8003298:	b672      	cpsid	i
}
 800329a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800329c:	e7fe      	b.n	800329c <Error_Handler+0x14>
 800329e:	bf00      	nop
 80032a0:	48001000 	.word	0x48001000

080032a4 <_Z9qspi_readPhmm>:
#include "stm32l4xx_hal.h"
#include "stm32l475e_iot01_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f8bf 	bl	8003438 <BSP_QSPI_Read>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 80032ca:	f7ff ffdd 	bl	8003288 <Error_Handler>
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f8ec 	bl	80034c4 <BSP_QSPI_Write>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 80032fc:	f7ff ffc4 	bl	8003288 <Error_Handler>
	}
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_Z9qspi_initv>:

void qspi_init() {
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 800330c:	f000 f828 	bl	8003360 <BSP_QSPI_Init>
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}

08003314 <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f94f 	bl	80035c0 <BSP_QSPI_Erase_Block>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d90b      	bls.n	8003358 <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25R6435F_BLOCK_SIZE);
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	041b      	lsls	r3, r3, #16
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ffe2 	bl	8003314 <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	3301      	adds	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	e7ef      	b.n	8003338 <_Z17qspi_erase_blocksmm+0xe>
	}
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8003366:	4b32      	ldr	r3, [pc, #200]	; (8003430 <BSP_QSPI_Init+0xd0>)
 8003368:	4a32      	ldr	r2, [pc, #200]	; (8003434 <BSP_QSPI_Init+0xd4>)
 800336a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800336c:	4830      	ldr	r0, [pc, #192]	; (8003430 <BSP_QSPI_Init+0xd0>)
 800336e:	f005 fecf 	bl	8009110 <HAL_QSPI_DeInit>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e054      	b.n	8003426 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800337c:	f000 f964 	bl	8003648 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8003380:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <BSP_QSPI_Init+0xd0>)
 8003382:	2202      	movs	r2, #2
 8003384:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8003386:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <BSP_QSPI_Init+0xd0>)
 8003388:	2204      	movs	r2, #4
 800338a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <BSP_QSPI_Init+0xd0>)
 800338e:	2210      	movs	r2, #16
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003396:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 80033b6:	3b01      	subs	r3, #1
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <BSP_QSPI_Init+0xd0>)
 80033bc:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <BSP_QSPI_Init+0xd0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <BSP_QSPI_Init+0xd0>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80033ca:	4819      	ldr	r0, [pc, #100]	; (8003430 <BSP_QSPI_Init+0xd0>)
 80033cc:	f005 fe2a 	bl	8009024 <HAL_QSPI_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e025      	b.n	8003426 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80033da:	4815      	ldr	r0, [pc, #84]	; (8003430 <BSP_QSPI_Init+0xd0>)
 80033dc:	f000 f974 	bl	80036c8 <QSPI_ResetMemory>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 80033e6:	2304      	movs	r3, #4
 80033e8:	e01d      	b.n	8003426 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80033ea:	2101      	movs	r1, #1
 80033ec:	4810      	ldr	r0, [pc, #64]	; (8003430 <BSP_QSPI_Init+0xd0>)
 80033ee:	f000 fa35 	bl	800385c <QSPI_QuadMode>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e014      	b.n	8003426 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80033fc:	2101      	movs	r1, #1
 80033fe:	480c      	ldr	r0, [pc, #48]	; (8003430 <BSP_QSPI_Init+0xd0>)
 8003400:	f000 fad4 	bl	80039ac <QSPI_HighPerfMode>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00b      	b.n	8003426 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <BSP_QSPI_Init+0xd0>)
 8003410:	2201      	movs	r2, #1
 8003412:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003414:	4806      	ldr	r0, [pc, #24]	; (8003430 <BSP_QSPI_Init+0xd0>)
 8003416:	f005 fe05 	bl	8009024 <HAL_QSPI_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200003b4 	.word	0x200003b4
 8003434:	a0001000 	.word	0xa0001000

08003438 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b092      	sub	sp, #72	; 0x48
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8003444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 800344a:	23eb      	movs	r3, #235	; 0xeb
 800344c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 800344e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8003454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003458:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 800345e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8003468:	23aa      	movs	r3, #170	; 0xaa
 800346a:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 800346c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8003472:	2304      	movs	r3, #4
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800347a:	2300      	movs	r3, #0
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800347e:	2300      	movs	r3, #0
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8003482:	2300      	movs	r3, #0
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003486:	f107 0310 	add.w	r3, r7, #16
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4619      	mov	r1, r3
 8003490:	480b      	ldr	r0, [pc, #44]	; (80034c0 <BSP_QSPI_Read+0x88>)
 8003492:	f005 fe61 	bl	8009158 <HAL_QSPI_Command>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e00b      	b.n	80034b8 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	68f9      	ldr	r1, [r7, #12]
 80034a6:	4806      	ldr	r0, [pc, #24]	; (80034c0 <BSP_QSPI_Read+0x88>)
 80034a8:	f005 ff4b 	bl	8009342 <HAL_QSPI_Receive>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3748      	adds	r7, #72	; 0x48
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200003b4 	.word	0x200003b4

080034c4 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b096      	sub	sp, #88	; 0x58
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80034d8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80034da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d901      	bls.n	80034e6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80034f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80034f8:	2338      	movs	r3, #56	; 0x38
 80034fa:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80034fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003506:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003508:	2300      	movs	r3, #0
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 800350c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003510:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003516:	2300      	movs	r3, #0
 8003518:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800351a:	2300      	movs	r3, #0
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800351e:	2300      	movs	r3, #0
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8003522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003524:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8003526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800352a:	4824      	ldr	r0, [pc, #144]	; (80035bc <BSP_QSPI_Write+0xf8>)
 800352c:	f000 f910 	bl	8003750 <QSPI_WriteEnable>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e03b      	b.n	80035b2 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4619      	mov	r1, r3
 8003544:	481d      	ldr	r0, [pc, #116]	; (80035bc <BSP_QSPI_Write+0xf8>)
 8003546:	f005 fe07 	bl	8009158 <HAL_QSPI_Command>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e02e      	b.n	80035b2 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	68f9      	ldr	r1, [r7, #12]
 800355a:	4818      	ldr	r0, [pc, #96]	; (80035bc <BSP_QSPI_Write+0xf8>)
 800355c:	f005 fe5a 	bl	8009214 <HAL_QSPI_Transmit>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800356a:	f241 3188 	movw	r1, #5000	; 0x1388
 800356e:	4813      	ldr	r0, [pc, #76]	; (80035bc <BSP_QSPI_Write+0xf8>)
 8003570:	f000 f93a 	bl	80037e8 <QSPI_AutoPollingMemReady>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e019      	b.n	80035b2 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800357e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003582:	4413      	add	r3, r2
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800358e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003590:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003596:	429a      	cmp	r2, r3
 8003598:	d203      	bcs.n	80035a2 <BSP_QSPI_Write+0xde>
 800359a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800359c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	e001      	b.n	80035a6 <BSP_QSPI_Write+0xe2>
 80035a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a6:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80035a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d3b8      	bcc.n	8003522 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3758      	adds	r7, #88	; 0x58
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200003b4 	.word	0x200003b4

080035c0 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b090      	sub	sp, #64	; 0x40
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035cc:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 80035ce:	23d8      	movs	r3, #216	; 0xd8
 80035d0:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 80035d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80035d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035dc:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035f2:	2300      	movs	r3, #0
 80035f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035f6:	2300      	movs	r3, #0
 80035f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80035fa:	4812      	ldr	r0, [pc, #72]	; (8003644 <BSP_QSPI_Erase_Block+0x84>)
 80035fc:	f000 f8a8 	bl	8003750 <QSPI_WriteEnable>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e017      	b.n	800363a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4619      	mov	r1, r3
 8003614:	480b      	ldr	r0, [pc, #44]	; (8003644 <BSP_QSPI_Erase_Block+0x84>)
 8003616:	f005 fd9f 	bl	8009158 <HAL_QSPI_Command>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e00a      	b.n	800363a <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8003624:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003628:	4806      	ldr	r0, [pc, #24]	; (8003644 <BSP_QSPI_Erase_Block+0x84>)
 800362a:	f000 f8dd 	bl	80037e8 <QSPI_AutoPollingMemReady>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3740      	adds	r7, #64	; 0x40
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200003b4 	.word	0x200003b4

08003648 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6513      	str	r3, [r2, #80]	; 0x50
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 800365c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 8003678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800367c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	4a0f      	ldr	r2, [pc, #60]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <BSP_QSPI_MspInit+0x78>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003696:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800369a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80036a8:	230a      	movs	r3, #10
 80036aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4619      	mov	r1, r3
 80036b2:	4804      	ldr	r0, [pc, #16]	; (80036c4 <BSP_QSPI_MspInit+0x7c>)
 80036b4:	f005 f908 	bl	80088c8 <HAL_GPIO_Init>
}
 80036b8:	bf00      	nop
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	48001000 	.word	0x48001000

080036c8 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b090      	sub	sp, #64	; 0x40
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d4:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 80036d6:	2366      	movs	r3, #102	; 0x66
 80036d8:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80036de:	2300      	movs	r3, #0
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80036ee:	2300      	movs	r3, #0
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80036f2:	2300      	movs	r3, #0
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4619      	mov	r1, r3
 8003700:	4812      	ldr	r0, [pc, #72]	; (800374c <QSPI_ResetMemory+0x84>)
 8003702:	f005 fd29 	bl	8009158 <HAL_QSPI_Command>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e019      	b.n	8003744 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8003710:	2399      	movs	r3, #153	; 0x99
 8003712:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003714:	f107 0308 	add.w	r3, r7, #8
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4619      	mov	r1, r3
 800371e:	480b      	ldr	r0, [pc, #44]	; (800374c <QSPI_ResetMemory+0x84>)
 8003720:	f005 fd1a 	bl	8009158 <HAL_QSPI_Command>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00a      	b.n	8003744 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800372e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003732:	4806      	ldr	r0, [pc, #24]	; (800374c <QSPI_ResetMemory+0x84>)
 8003734:	f000 f858 	bl	80037e8 <QSPI_AutoPollingMemReady>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3740      	adds	r7, #64	; 0x40
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200003b4 	.word	0x200003b4

08003750 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b096      	sub	sp, #88	; 0x58
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800375c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 800375e:	2306      	movs	r3, #6
 8003760:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003762:	2300      	movs	r3, #0
 8003764:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003766:	2300      	movs	r3, #0
 8003768:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800376a:	2300      	movs	r3, #0
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003772:	2300      	movs	r3, #0
 8003774:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003776:	2300      	movs	r3, #0
 8003778:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800377a:	2300      	movs	r3, #0
 800377c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800377e:	f107 0320 	add.w	r3, r7, #32
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4619      	mov	r1, r3
 8003788:	4816      	ldr	r0, [pc, #88]	; (80037e4 <QSPI_WriteEnable+0x94>)
 800378a:	f005 fce5 	bl	8009158 <HAL_QSPI_Command>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e020      	b.n	80037da <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8003798:	2302      	movs	r3, #2
 800379a:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 800379c:	2302      	movs	r3, #2
 800379e:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80037a8:	2310      	movs	r3, #16
 80037aa:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80037ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037b0:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 80037b2:	2305      	movs	r3, #5
 80037b4:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 80037b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037bc:	f107 0208 	add.w	r2, r7, #8
 80037c0:	f107 0120 	add.w	r1, r7, #32
 80037c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80037c8:	4806      	ldr	r0, [pc, #24]	; (80037e4 <QSPI_WriteEnable+0x94>)
 80037ca:	f005 fe5c 	bl	8009486 <HAL_QSPI_AutoPolling>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3758      	adds	r7, #88	; 0x58
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200003b4 	.word	0x200003b4

080037e8 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b096      	sub	sp, #88	; 0x58
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80037f8:	2305      	movs	r3, #5
 80037fa:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003808:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003812:	2300      	movs	r3, #0
 8003814:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003816:	2300      	movs	r3, #0
 8003818:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 800381e:	2301      	movs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003826:	2301      	movs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800382a:	2310      	movs	r3, #16
 800382c:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800382e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003832:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8003834:	f107 0208 	add.w	r2, r7, #8
 8003838:	f107 0120 	add.w	r1, r7, #32
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4806      	ldr	r0, [pc, #24]	; (8003858 <QSPI_AutoPollingMemReady+0x70>)
 8003840:	f005 fe21 	bl	8009486 <HAL_QSPI_AutoPolling>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3758      	adds	r7, #88	; 0x58
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200003b4 	.word	0x200003b4

0800385c <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b092      	sub	sp, #72	; 0x48
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800386e:	2305      	movs	r3, #5
 8003870:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003876:	2300      	movs	r3, #0
 8003878:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800387a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003884:	2301      	movs	r3, #1
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003888:	2300      	movs	r3, #0
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800388c:	2300      	movs	r3, #0
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003890:	2300      	movs	r3, #0
 8003892:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4619      	mov	r1, r3
 800389e:	4842      	ldr	r0, [pc, #264]	; (80039a8 <QSPI_QuadMode+0x14c>)
 80038a0:	f005 fc5a 	bl	8009158 <HAL_QSPI_Command>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e077      	b.n	800399e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038ae:	f107 030f 	add.w	r3, r7, #15
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4619      	mov	r1, r3
 80038b8:	483b      	ldr	r0, [pc, #236]	; (80039a8 <QSPI_QuadMode+0x14c>)
 80038ba:	f005 fd42 	bl	8009342 <HAL_QSPI_Receive>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e06a      	b.n	800399e <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80038c8:	4837      	ldr	r0, [pc, #220]	; (80039a8 <QSPI_QuadMode+0x14c>)
 80038ca:	f7ff ff41 	bl	8003750 <QSPI_WriteEnable>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e062      	b.n	800399e <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e004      	b.n	80038f4 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80038f4:	2301      	movs	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003900:	4619      	mov	r1, r3
 8003902:	4829      	ldr	r0, [pc, #164]	; (80039a8 <QSPI_QuadMode+0x14c>)
 8003904:	f005 fc28 	bl	8009158 <HAL_QSPI_Command>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e045      	b.n	800399e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003912:	f107 030f 	add.w	r3, r7, #15
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4619      	mov	r1, r3
 800391c:	4822      	ldr	r0, [pc, #136]	; (80039a8 <QSPI_QuadMode+0x14c>)
 800391e:	f005 fc79 	bl	8009214 <HAL_QSPI_Transmit>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e038      	b.n	800399e <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800392c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003930:	481d      	ldr	r0, [pc, #116]	; (80039a8 <QSPI_QuadMode+0x14c>)
 8003932:	f7ff ff59 	bl	80037e8 <QSPI_AutoPollingMemReady>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e02e      	b.n	800399e <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8003940:	2305      	movs	r3, #5
 8003942:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003944:	f107 0310 	add.w	r3, r7, #16
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4619      	mov	r1, r3
 800394e:	4816      	ldr	r0, [pc, #88]	; (80039a8 <QSPI_QuadMode+0x14c>)
 8003950:	f005 fc02 	bl	8009158 <HAL_QSPI_Command>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e01f      	b.n	800399e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800395e:	f107 030f 	add.w	r3, r7, #15
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4619      	mov	r1, r3
 8003968:	480f      	ldr	r0, [pc, #60]	; (80039a8 <QSPI_QuadMode+0x14c>)
 800396a:	f005 fcea 	bl	8009342 <HAL_QSPI_Receive>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e012      	b.n	800399e <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <QSPI_QuadMode+0x12c>
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d007      	beq.n	8003998 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3748      	adds	r7, #72	; 0x48
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200003b4 	.word	0x200003b4

080039ac <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b092      	sub	sp, #72	; 0x48
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80039b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80039be:	2305      	movs	r3, #5
 80039c0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80039ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 80039d4:	2301      	movs	r3, #1
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80039d8:	2300      	movs	r3, #0
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80039dc:	2300      	movs	r3, #0
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80039e0:	2300      	movs	r3, #0
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039e4:	f107 0310 	add.w	r3, r7, #16
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4619      	mov	r1, r3
 80039ee:	4853      	ldr	r0, [pc, #332]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 80039f0:	f005 fbb2 	bl	8009158 <HAL_QSPI_Command>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e09a      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80039fe:	f107 030c 	add.w	r3, r7, #12
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4619      	mov	r1, r3
 8003a08:	484c      	ldr	r0, [pc, #304]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003a0a:	f005 fc9a 	bl	8009342 <HAL_QSPI_Receive>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e08d      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003a18:	2315      	movs	r3, #21
 8003a1a:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a20:	f107 0310 	add.w	r3, r7, #16
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4844      	ldr	r0, [pc, #272]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003a2c:	f005 fb94 	bl	8009158 <HAL_QSPI_Command>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07c      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4619      	mov	r1, r3
 8003a46:	483d      	ldr	r0, [pc, #244]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003a48:	f005 fc7b 	bl	8009342 <HAL_QSPI_Receive>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06e      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003a56:	4839      	ldr	r0, [pc, #228]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003a58:	f7ff fe7a 	bl	8003750 <QSPI_WriteEnable>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e066      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003a6c:	7bbb      	ldrb	r3, [r7, #14]
 8003a6e:	f043 0302 	orr.w	r3, r3, #2
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	73bb      	strb	r3, [r7, #14]
 8003a76:	e004      	b.n	8003a82 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003a78:	7bbb      	ldrb	r3, [r7, #14]
 8003a7a:	f023 0302 	bic.w	r3, r3, #2
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003a82:	2301      	movs	r3, #1
 8003a84:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8003a86:	2303      	movs	r3, #3
 8003a88:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003a8a:	f107 0310 	add.w	r3, r7, #16
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4619      	mov	r1, r3
 8003a94:	4829      	ldr	r0, [pc, #164]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003a96:	f005 fb5f 	bl	8009158 <HAL_QSPI_Command>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e047      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aac:	4619      	mov	r1, r3
 8003aae:	4823      	ldr	r0, [pc, #140]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003ab0:	f005 fbb0 	bl	8009214 <HAL_QSPI_Transmit>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e03a      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003abe:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ac2:	481e      	ldr	r0, [pc, #120]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003ac4:	f7ff fe90 	bl	80037e8 <QSPI_AutoPollingMemReady>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e030      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003ad2:	2315      	movs	r3, #21
 8003ad4:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ada:	f107 0310 	add.w	r3, r7, #16
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4815      	ldr	r0, [pc, #84]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003ae6:	f005 fb37 	bl	8009158 <HAL_QSPI_Command>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e01f      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003af4:	f107 030c 	add.w	r3, r7, #12
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4619      	mov	r1, r3
 8003afe:	480f      	ldr	r0, [pc, #60]	; (8003b3c <QSPI_HighPerfMode+0x190>)
 8003b00:	f005 fc1f 	bl	8009342 <HAL_QSPI_Receive>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e012      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8003b0e:	7b7b      	ldrb	r3, [r7, #13]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <QSPI_HighPerfMode+0x172>
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d007      	beq.n	8003b2e <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8003b1e:	7b7b      	ldrb	r3, [r7, #13]
 8003b20:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3748      	adds	r7, #72	; 0x48
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200003b4 	.word	0x200003b4

08003b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_MspInit+0x44>)
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <HAL_MspInit+0x44>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6613      	str	r3, [r2, #96]	; 0x60
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <HAL_MspInit+0x44>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_MspInit+0x44>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <HAL_MspInit+0x44>)
 8003b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b68:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_MspInit+0x44>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <HAL_CRC_MspInit+0x38>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10b      	bne.n	8003bb2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_CRC_MspInit+0x3c>)
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_CRC_MspInit+0x3c>)
 8003ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ba4:	6493      	str	r3, [r2, #72]	; 0x48
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <HAL_CRC_MspInit+0x3c>)
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023000 	.word	0x40023000
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <HAL_DAC_MspInit+0xcc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d14f      	bne.n	8003c8a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003bea:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_DAC_MspInit+0xd0>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <HAL_DAC_MspInit+0xd0>)
 8003bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf6:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_DAC_MspInit+0xd0>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c02:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_DAC_MspInit+0xd0>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	4a24      	ldr	r2, [pc, #144]	; (8003c98 <HAL_DAC_MspInit+0xd0>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <HAL_DAC_MspInit+0xd0>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c30:	f004 fe4a 	bl	80088c8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_DAC_MspInit+0xd8>)
 8003c38:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c3c:	2206      	movs	r2, #6
 8003c3e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c42:	2210      	movs	r2, #16
 8003c44:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c58:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c60:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c64:	2220      	movs	r2, #32
 8003c66:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003c6e:	480b      	ldr	r0, [pc, #44]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c70:	f004 fbf4 	bl	800845c <HAL_DMA_Init>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003c7a:	f7ff fb05 	bl	8003288 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a06      	ldr	r2, [pc, #24]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <HAL_DAC_MspInit+0xd4>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003c8a:	bf00      	nop
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40007400 	.word	0x40007400
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	200000d4 	.word	0x200000d4
 8003ca0:	40020030 	.word	0x40020030

08003ca4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b0ac      	sub	sp, #176	; 0xb0
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	2288      	movs	r2, #136	; 0x88
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f00b ffed 	bl	800fca4 <memset>
  if(DFSDM1_Init == 0)
 8003cca:	4b45      	ldr	r3, [pc, #276]	; (8003de0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d14b      	bne.n	8003d6a <HAL_DFSDM_FilterMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f006 fc9c 	bl	800a620 <HAL_RCCEx_PeriphCLKConfig>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8003cee:	f7ff facb 	bl	8003288 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003cf2:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <HAL_DFSDM_FilterMspInit+0x140>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <HAL_DFSDM_FilterMspInit+0x140>)
 8003cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_DFSDM_FilterMspInit+0x140>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10b      	bne.n	8003d1c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003d04:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <HAL_DFSDM_FilterMspInit+0x144>)
 8003d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d08:	4a37      	ldr	r2, [pc, #220]	; (8003de8 <HAL_DFSDM_FilterMspInit+0x144>)
 8003d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_DFSDM_FilterMspInit+0x144>)
 8003d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d1c:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <HAL_DFSDM_FilterMspInit+0x144>)
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d20:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_DFSDM_FilterMspInit+0x144>)
 8003d22:	f043 0310 	orr.w	r3, r3, #16
 8003d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d28:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <HAL_DFSDM_FilterMspInit+0x144>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003d34:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003d4e:	2306      	movs	r3, #6
 8003d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4824      	ldr	r0, [pc, #144]	; (8003dec <HAL_DFSDM_FilterMspInit+0x148>)
 8003d5c:	f004 fdb4 	bl	80088c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8003d68:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a20      	ldr	r2, [pc, #128]	; (8003df0 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d130      	bne.n	8003dd6 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003d76:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <HAL_DFSDM_FilterMspInit+0x154>)
 8003d78:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d80:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d92:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d98:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003da4:	2220      	movs	r2, #32
 8003da6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003dae:	4811      	ldr	r0, [pc, #68]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003db0:	f004 fb54 	bl	800845c <HAL_DMA_Init>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8003dba:	f7ff fa65 	bl	8003288 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
 8003dd0:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_DFSDM_FilterMspInit+0x150>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8003dd6:	bf00      	nop
 8003dd8:	37b0      	adds	r7, #176	; 0xb0
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2000037c 	.word	0x2000037c
 8003de4:	20000378 	.word	0x20000378
 8003de8:	40021000 	.word	0x40021000
 8003dec:	48001000 	.word	0x48001000
 8003df0:	40016100 	.word	0x40016100
 8003df4:	200001a8 	.word	0x200001a8
 8003df8:	40020044 	.word	0x40020044

08003dfc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b0ac      	sub	sp, #176	; 0xb0
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	2288      	movs	r2, #136	; 0x88
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00b ff41 	bl	800fca4 <memset>
  if(DFSDM1_Init == 0)
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d14b      	bne.n	8003ec2 <HAL_DFSDM_ChannelMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f006 fbf0 	bl	800a620 <HAL_RCCEx_PeriphCLKConfig>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003e46:	f7ff fa1f 	bl	8003288 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003e4a:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003e52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d10b      	bne.n	8003e74 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	6613      	str	r3, [r2, #96]	; 0x60
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e74:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e78:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003e7a:	f043 0310 	orr.w	r3, r3, #16
 8003e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003e8c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	2302      	movs	r3, #2
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4809      	ldr	r0, [pc, #36]	; (8003ed8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8003eb4:	f004 fd08 	bl	80088c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003ec0:	6013      	str	r3, [r2, #0]
  }

}
 8003ec2:	bf00      	nop
 8003ec4:	37b0      	adds	r7, #176	; 0xb0
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000037c 	.word	0x2000037c
 8003ed0:	20000378 	.word	0x20000378
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	48001000 	.word	0x48001000

08003edc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a17      	ldr	r2, [pc, #92]	; (8003f58 <HAL_QSPI_MspInit+0x7c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d128      	bne.n	8003f50 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <HAL_QSPI_MspInit+0x80>)
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <HAL_QSPI_MspInit+0x80>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6513      	str	r3, [r2, #80]	; 0x50
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <HAL_QSPI_MspInit+0x80>)
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_QSPI_MspInit+0x80>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_QSPI_MspInit+0x80>)
 8003f1c:	f043 0310 	orr.w	r3, r3, #16
 8003f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <HAL_QSPI_MspInit+0x80>)
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003f2e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003f32:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	2302      	movs	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003f40:	230a      	movs	r3, #10
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4805      	ldr	r0, [pc, #20]	; (8003f60 <HAL_QSPI_MspInit+0x84>)
 8003f4c:	f004 fcbc 	bl	80088c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003f50:	bf00      	nop
 8003f52:	3728      	adds	r7, #40	; 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	a0001000 	.word	0xa0001000
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	48001000 	.word	0x48001000

08003f64 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <HAL_QSPI_MspDeInit+0x30>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10a      	bne.n	8003f8c <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_QSPI_MspDeInit+0x34>)
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_QSPI_MspDeInit+0x34>)
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003f82:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <HAL_QSPI_MspDeInit+0x38>)
 8003f88:	f004 fe48 	bl	8008c1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	a0001000 	.word	0xa0001000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	48001000 	.word	0x48001000

08003fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d113      	bne.n	8003fda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_TIM_Base_MspInit+0x44>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <HAL_TIM_Base_MspInit+0x44>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_TIM_Base_MspInit+0x44>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2100      	movs	r1, #0
 8003fce:	201c      	movs	r0, #28
 8003fd0:	f003 faa4 	bl	800751c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fd4:	201c      	movs	r0, #28
 8003fd6:	f003 fabd 	bl	8007554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b0ac      	sub	sp, #176	; 0xb0
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	2288      	movs	r2, #136	; 0x88
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f00b fe4b 	bl	800fca4 <memset>
  if(huart->Instance==USART1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a21      	ldr	r2, [pc, #132]	; (8004098 <HAL_UART_MspInit+0xb0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d13a      	bne.n	800408e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004018:	2301      	movs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800401c:	2300      	movs	r3, #0
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4618      	mov	r0, r3
 8004026:	f006 fafb 	bl	800a620 <HAL_RCCEx_PeriphCLKConfig>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004030:	f7ff f92a 	bl	8003288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_UART_MspInit+0xb4>)
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_UART_MspInit+0xb4>)
 800403a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800403e:	6613      	str	r3, [r2, #96]	; 0x60
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <HAL_UART_MspInit+0xb4>)
 8004042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <HAL_UART_MspInit+0xb4>)
 800404e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004050:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_UART_MspInit+0xb4>)
 8004052:	f043 0302 	orr.w	r3, r3, #2
 8004056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_UART_MspInit+0xb4>)
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004064:	23c0      	movs	r3, #192	; 0xc0
 8004066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406a:	2302      	movs	r3, #2
 800406c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004076:	2303      	movs	r3, #3
 8004078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800407c:	2307      	movs	r3, #7
 800407e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004082:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004086:	4619      	mov	r1, r3
 8004088:	4805      	ldr	r0, [pc, #20]	; (80040a0 <HAL_UART_MspInit+0xb8>)
 800408a:	f004 fc1d 	bl	80088c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800408e:	bf00      	nop
 8004090:	37b0      	adds	r7, #176	; 0xb0
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40013800 	.word	0x40013800
 800409c:	40021000 	.word	0x40021000
 80040a0:	48000400 	.word	0x48000400

080040a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	; 0x30
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80040b4:	2200      	movs	r2, #0
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	201a      	movs	r0, #26
 80040ba:	f003 fa2f 	bl	800751c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80040be:	201a      	movs	r0, #26
 80040c0:	f003 fa48 	bl	8007554 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80040c4:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_InitTick+0x9c>)
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_InitTick+0x9c>)
 80040ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ce:	6613      	str	r3, [r2, #96]	; 0x60
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_InitTick+0x9c>)
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040dc:	f107 0210 	add.w	r2, r7, #16
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 fa08 	bl	800a4fc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80040ec:	f006 f9f0 	bl	800a4d0 <HAL_RCC_GetPCLK2Freq>
 80040f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <HAL_InitTick+0xa0>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0c9b      	lsrs	r3, r3, #18
 80040fc:	3b01      	subs	r3, #1
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <HAL_InitTick+0xa4>)
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <HAL_InitTick+0xa8>)
 8004104:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <HAL_InitTick+0xa4>)
 8004108:	f240 32e7 	movw	r2, #999	; 0x3e7
 800410c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800410e:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_InitTick+0xa4>)
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_InitTick+0xa4>)
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_InitTick+0xa4>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8004120:	4809      	ldr	r0, [pc, #36]	; (8004148 <HAL_InitTick+0xa4>)
 8004122:	f006 ff39 	bl	800af98 <HAL_TIM_Base_Init>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800412c:	4806      	ldr	r0, [pc, #24]	; (8004148 <HAL_InitTick+0xa4>)
 800412e:	f006 ff8b 	bl	800b048 <HAL_TIM_Base_Start_IT>
 8004132:	4603      	mov	r3, r0
 8004134:	e000      	b.n	8004138 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
}
 8004138:	4618      	mov	r0, r3
 800413a:	3730      	adds	r7, #48	; 0x30
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	431bde83 	.word	0x431bde83
 8004148:	200003f8 	.word	0x200003f8
 800414c:	40014800 	.word	0x40014800

08004150 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* Disable TIM17 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_SuspendTick+0x20>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_SuspendTick+0x20>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	200003f8 	.word	0x200003f8

08004174 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* Enable TIM17 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_ResumeTick+0x20>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_ResumeTick+0x20>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	60da      	str	r2, [r3, #12]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	200003f8 	.word	0x200003f8

08004198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800419c:	e7fe      	b.n	800419c <NMI_Handler+0x4>

0800419e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041a2:	e7fe      	b.n	80041a2 <HardFault_Handler+0x4>

080041a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a8:	e7fe      	b.n	80041a8 <MemManage_Handler+0x4>

080041aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041ae:	e7fe      	b.n	80041ae <BusFault_Handler+0x4>

080041b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b4:	e7fe      	b.n	80041b4 <UsageFault_Handler+0x4>

080041b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80041f4:	4802      	ldr	r0, [pc, #8]	; (8004200 <DMA1_Channel3_IRQHandler+0x10>)
 80041f6:	f004 fa87 	bl	8008708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200000d4 	.word	0x200000d4

08004204 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <DMA1_Channel4_IRQHandler+0x10>)
 800420a:	f004 fa7d 	bl	8008708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200001a8 	.word	0x200001a8

08004218 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800421c:	4802      	ldr	r0, [pc, #8]	; (8004228 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800421e:	f006 ff83 	bl	800b128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200003f8 	.word	0x200003f8

0800422c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004230:	4802      	ldr	r0, [pc, #8]	; (800423c <TIM2_IRQHandler+0x10>)
 8004232:	f006 ff79 	bl	800b128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000234 	.word	0x20000234

08004240 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004244:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004248:	f004 fdf4 	bl	8008e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}

08004250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
	return 1;
 8004254:	2301      	movs	r3, #1
}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_kill>:

int _kill(int pid, int sig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800426a:	f00b fcb9 	bl	800fbe0 <__errno>
 800426e:	4603      	mov	r3, r0
 8004270:	2216      	movs	r2, #22
 8004272:	601a      	str	r2, [r3, #0]
	return -1;
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_exit>:

void _exit (int status)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ffe7 	bl	8004260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004292:	e7fe      	b.n	8004292 <_exit+0x12>

08004294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <_sbrk+0x5c>)
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <_sbrk+0x60>)
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <_sbrk+0x64>)
 80042b2:	4a12      	ldr	r2, [pc, #72]	; (80042fc <_sbrk+0x68>)
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <_sbrk+0x64>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d207      	bcs.n	80042d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c4:	f00b fc8c 	bl	800fbe0 <__errno>
 80042c8:	4603      	mov	r3, r0
 80042ca:	220c      	movs	r2, #12
 80042cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e009      	b.n	80042e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <_sbrk+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042da:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <_sbrk+0x64>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <_sbrk+0x64>)
 80042e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20018000 	.word	0x20018000
 80042f4:	00000400 	.word	0x00000400
 80042f8:	20000380 	.word	0x20000380
 80042fc:	20000458 	.word	0x20000458

08004300 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <SystemInit+0x20>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	4a05      	ldr	r2, [pc, #20]	; (8004320 <SystemInit+0x20>)
 800430c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800435c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004328:	f7ff ffea 	bl	8004300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800432c:	480c      	ldr	r0, [pc, #48]	; (8004360 <LoopForever+0x6>)
  ldr r1, =_edata
 800432e:	490d      	ldr	r1, [pc, #52]	; (8004364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004330:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <LoopForever+0xe>)
  movs r3, #0
 8004332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004334:	e002      	b.n	800433c <LoopCopyDataInit>

08004336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800433a:	3304      	adds	r3, #4

0800433c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800433c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800433e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004340:	d3f9      	bcc.n	8004336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004344:	4c0a      	ldr	r4, [pc, #40]	; (8004370 <LoopForever+0x16>)
  movs r3, #0
 8004346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004348:	e001      	b.n	800434e <LoopFillZerobss>

0800434a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800434a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800434c:	3204      	adds	r2, #4

0800434e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800434e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004350:	d3fb      	bcc.n	800434a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004352:	f00b fc4b 	bl	800fbec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004356:	f7fe f979 	bl	800264c <main>

0800435a <LoopForever>:

LoopForever:
    b LoopForever
 800435a:	e7fe      	b.n	800435a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800435c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004364:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004368:	0802918c 	.word	0x0802918c
  ldr r2, =_sbss
 800436c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004370:	20000458 	.word	0x20000458

08004374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <ADC1_2_IRQHandler>

08004376 <arm_relu_q7>:
 * Optimized relu with QSUB instructions.
 *
 */

void arm_relu_q7(q7_t *data, uint16_t size)
{
 8004376:	b480      	push	{r7}
 8004378:	b093      	sub	sp, #76	; 0x4c
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	807b      	strh	r3, [r7, #2]

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    /* Run the following code for M cores with DSP extension */

    uint16_t i = size >> 2;
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    q7_t *input = data;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	61bb      	str	r3, [r7, #24]
    q7_t *output = data;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	617b      	str	r3, [r7, #20]
    q31_t in;
    q31_t buf;
    q31_t mask;

    while (i)
 8004392:	e043      	b.n	800441c <arm_relu_q7+0xa6>
 8004394:	f107 0318 	add.w	r3, r7, #24
 8004398:	61fb      	str	r3, [r7, #28]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1d1a      	adds	r2, r3, #4
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	601a      	str	r2, [r3, #0]

    return (val);
 80043ac:	693b      	ldr	r3, [r7, #16]
    {
        in = arm_nn_read_q7x4_ia((const q7_t **)&input);
 80043ae:	643b      	str	r3, [r7, #64]	; 0x40

        /* extract the first bit */
        buf = (int32_t)__ROR((uint32_t)in & 0x80808080, 7);
 80043b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b2:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	2307      	movs	r3, #7
 80043ba:	623b      	str	r3, [r7, #32]
  op2 %= 32U;
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	623b      	str	r3, [r7, #32]
  if (op2 == 0U)
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <arm_relu_q7+0x58>
    return op1;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	e003      	b.n	80043d6 <arm_relu_q7+0x60>
  return (op1 >> op2) | (op1 << (32U - op2));
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	fa62 f303 	ror.w	r3, r2, r3
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 80043d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043da:	2200      	movs	r2, #0
 80043dc:	633a      	str	r2, [r7, #48]	; 0x30
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e4:	fac3 f312 	qsub8	r3, r3, r2
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38

        arm_nn_write_q7x4_ia(&output, in & (~mask));
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	43da      	mvns	r2, r3
 80043f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f4:	4013      	ands	r3, r2
 80043f6:	f107 0214 	add.w	r2, r7, #20
 80043fa:	637a      	str	r2, [r7, #52]	; 0x34
 80043fc:	60fb      	str	r3, [r7, #12]
  @param[in]     value    Four bytes to copy
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q7x4_ia(q7_t **in, q31_t value)
{
    memcpy(*in, &value, 4);
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	601a      	str	r2, [r3, #0]
    *in += 4;
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop

        i--;
 8004412:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004416:	3b01      	subs	r3, #1
 8004418:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while (i)
 800441c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1b7      	bne.n	8004394 <arm_relu_q7+0x1e>
    }

    i = size & 0x3;
 8004424:	887b      	ldrh	r3, [r7, #2]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while (i)
 800442e:	e00f      	b.n	8004450 <arm_relu_q7+0xda>
    {
        if (*input < 0)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	f993 3000 	ldrsb.w	r3, [r3]
 8004436:	2b00      	cmp	r3, #0
 8004438:	da02      	bge.n	8004440 <arm_relu_q7+0xca>
        {
            *input = 0;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
        }
        input++;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	3301      	adds	r3, #1
 8004444:	61bb      	str	r3, [r7, #24]
        i--;
 8004446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800444a:	3b01      	subs	r3, #1
 800444c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while (i)
 8004450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1eb      	bne.n	8004430 <arm_relu_q7+0xba>
        if (data[i] < 0)
            data[i] = 0;
    }

#endif
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	374c      	adds	r7, #76	; 0x4c
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t *Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y,
                                                  q15_t *bufferA,
                                                  q7_t *bufferB)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b0b0      	sub	sp, #192	; 0xc0
 800446a:	af04      	add	r7, sp, #16
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	4608      	mov	r0, r1
 8004470:	4611      	mov	r1, r2
 8004472:	461a      	mov	r2, r3
 8004474:	4603      	mov	r3, r0
 8004476:	817b      	strh	r3, [r7, #10]
 8004478:	460b      	mov	r3, r1
 800447a:	813b      	strh	r3, [r7, #8]
 800447c:	4613      	mov	r3, r2
 800447e:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t *pBuffer = bufferA;
 8004480:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    q7_t *pOut = Im_out;
 8004488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1 || padding_x != 0 ||
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d11e      	bne.n	80044da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 800449c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d117      	bne.n	80044da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80044aa:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d113      	bne.n	80044da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80044b2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10f      	bne.n	80044da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80044ba:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80044c2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        padding_y != 0 || stride_x != 1 || stride_y != 1)
 80044ca:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d103      	bne.n	80044da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80044d2:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d002      	beq.n	80044e0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 80044da:	f06f 0302 	mvn.w	r3, #2
 80044de:	e180      	b.n	80047e2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x37c>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80044e6:	e05f      	b.n	80045a8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x142>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80044ee:	e04e      	b.n	800458e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x128>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift(
                (q7_t *)Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer, ch_im_in);
 80044f0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80044f4:	897a      	ldrh	r2, [r7, #10]
 80044f6:	fb02 f203 	mul.w	r2, r2, r3
 80044fa:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80044fe:	4413      	add	r3, r2
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	461a      	mov	r2, r3
            arm_q7_to_q15_reordered_no_shift(
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004512:	4618      	mov	r0, r3
 8004514:	f002 fe74 	bl	8007200 <arm_q7_to_q15_reordered_no_shift>
            pBuffer += ch_im_in;
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004520:	4413      	add	r3, r2
 8004522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800453e:	4413      	add	r3, r2
 8004540:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004544:	429a      	cmp	r2, r3
 8004546:	d11b      	bne.n	8004580 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11a>
            {
                pOut = arm_nn_mat_mult_kernel_q7_q15_reordered(
 8004548:	88f9      	ldrh	r1, [r7, #6]
 800454a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800454e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004552:	9303      	str	r3, [sp, #12]
 8004554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004558:	9302      	str	r3, [sp, #8]
 800455a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	460b      	mov	r3, r1
 8004568:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800456c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004570:	f001 fe4c 	bl	800620c <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8004574:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                    wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8004578:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800457c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8004580:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8004584:	b29b      	uxth	r3, r3
 8004586:	3301      	adds	r3, #1
 8004588:	b29b      	uxth	r3, r3
 800458a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800458e:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 8004592:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8004596:	429a      	cmp	r2, r3
 8004598:	dbaa      	blt.n	80044f0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 800459a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3301      	adds	r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80045a8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 80045ac:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80045b0:	429a      	cmp	r2, r3
 80045b2:	db99      	blt.n	80044e8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 80045b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80045b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045bc:	429a      	cmp	r2, r3
 80045be:	f000 810f 	beq.w	80047e0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x37a>
    {
        const q7_t *pA = wt;
 80045c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80045d0:	e0ff      	b.n	80047d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x36c>
        {
            q31_t sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 80045d2:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80045d6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80045da:	4413      	add	r3, r2
 80045dc:	f993 3000 	ldrsb.w	r3, [r3]
 80045e0:	461a      	mov	r2, r3
 80045e2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80045e6:	409a      	lsls	r2, r3
 80045e8:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80045ec:	2101      	movs	r1, #1
 80045ee:	fa01 f303 	lsl.w	r3, r1, r3
 80045f2:	105b      	asrs	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            const q15_t *pB = bufferA;
 80045fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* basically each time it process 4 entries */
            uint16_t colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	109b      	asrs	r3, r3, #2
 8004614:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            while (colCnt)
 8004618:	e084      	b.n	8004724 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2be>
 800461a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800461e:	623b      	str	r3, [r7, #32]
 8004620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004624:	657b      	str	r3, [r7, #84]	; 0x54
 8004626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800462a:	653b      	str	r3, [r7, #80]	; 0x50
 800462c:	f107 0320 	add.w	r3, r7, #32
 8004630:	64fb      	str	r3, [r7, #76]	; 0x4c
    memcpy(&val, *in_q7, 4);
 8004632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61fb      	str	r3, [r7, #28]
    *in_q7 += 4;
 800463a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	1d1a      	adds	r2, r3, #4
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004642:	601a      	str	r2, [r3, #0]
    return (val);
 8004644:	69fb      	ldr	r3, [r7, #28]
 * @brief read and expand one q7 word into two q15 words with reordering
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8004646:	64bb      	str	r3, [r7, #72]	; 0x48
#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8004648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464a:	647b      	str	r3, [r7, #68]	; 0x44
 800464c:	2308      	movs	r3, #8
 800464e:	643b      	str	r3, [r7, #64]	; 0x40
  op2 %= 32U;
 8004650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	643b      	str	r3, [r7, #64]	; 0x40
  if (op2 == 0U)
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1fc>
    return op1;
 800465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004660:	e003      	b.n	800466a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x204>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004666:	fa62 f303 	ror.w	r3, r2, r3
 800466a:	63fb      	str	r3, [r7, #60]	; 0x3c

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	fa2f f383 	sxtb16	r3, r3
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	461a      	mov	r2, r3
 8004678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467a:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 800467c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	fa2f f383 	sxtb16	r3, r3
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	461a      	mov	r2, r3
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	601a      	str	r2, [r3, #0]
#else
    *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
    *out2 = __SXTB16(inA);
#endif

    return source;
 8004690:	6a3b      	ldr	r3, [r7, #32]
            {

                q31_t inA1, inA2;
                q31_t inB1, inB2;

                pA = read_and_pad_reordered(pA, &inA1, &inA2);
 8004692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800469a:	65bb      	str	r3, [r7, #88]	; 0x58
    memcpy(&val, *in_q15, 4);
 800469c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	61bb      	str	r3, [r7, #24]
    *in_q15 += 2;
 80046a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	1d1a      	adds	r2, r3, #4
 80046aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ac:	601a      	str	r2, [r3, #0]
    return (val);
 80046ae:	69bb      	ldr	r3, [r7, #24]

                inB1 = arm_nn_read_q15x2_ia(&pB);
 80046b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                sum = __SMLAD(inA1, inB1, sum);
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	4619      	mov	r1, r3
 80046b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80046bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c0:	66b9      	str	r1, [r7, #104]	; 0x68
 80046c2:	667a      	str	r2, [r7, #100]	; 0x64
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80046c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80046ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80046cc:	fb23 1302 	smlad	r3, r3, r2, r1
 80046d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80046d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    memcpy(&val, *in_q15, 4);
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	617b      	str	r3, [r7, #20]
    *in_q15 += 2;
 80046e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ee:	601a      	str	r2, [r3, #0]
    return (val);
 80046f0:	697b      	ldr	r3, [r7, #20]
                inB2 = arm_nn_read_q15x2_ia(&pB);
 80046f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                sum = __SMLAD(inA2, inB2, sum);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	4619      	mov	r1, r3
 80046fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004702:	67f9      	str	r1, [r7, #124]	; 0x7c
 8004704:	67ba      	str	r2, [r7, #120]	; 0x78
 8004706:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800470a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800470c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800470e:	fb23 1302 	smlad	r3, r3, r2, r1
 8004712:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8004714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

                colCnt--;
 800471a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800471e:	3b01      	subs	r3, #1
 8004720:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            while (colCnt)
 8004724:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004728:	2b00      	cmp	r3, #0
 800472a:	f47f af76 	bne.w	800461a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b4>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8004734:	fb12 f303 	smulbb	r3, r2, r3
 8004738:	b29b      	uxth	r3, r3
 800473a:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 800473e:	fb12 f303 	smulbb	r3, r2, r3
 8004742:	b29b      	uxth	r3, r3
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            while (colCnt)
 800474c:	e01d      	b.n	800478a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x324>
            {
                q7_t inA1 = *pA++;
 800474e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                q15_t inB1 = *pB++;
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	1c9a      	adds	r2, r3, #2
 8004762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                sum += inA1 * inB1;
 800476a:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 800476e:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800477a:	4413      	add	r3, r2
 800477c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                colCnt--;
 8004780:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004784:	3b01      	subs	r3, #1
 8004786:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            while (colCnt)
 800478a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1dd      	bne.n	800474e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2e8>
            }
            *pOut = (q7_t)__SSAT((sum >> out_shift), 8);
 8004792:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8004796:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800479a:	fa42 f303 	asr.w	r3, r2, r3
 800479e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047a6:	f303 0307 	ssat	r3, #8, r3
 80047aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b2:	b25a      	sxtb	r2, r3
 80047b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047b8:	701a      	strb	r2, [r3, #0]
            pOut++;
 80047ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047be:	3301      	adds	r3, #1
 80047c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80047c4:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80047d2:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 80047d6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80047da:	429a      	cmp	r2, r3
 80047dc:	f6ff aef9 	blt.w	80045d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16c>
    }

#endif /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	37b0      	adds	r7, #176	; 0xb0
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t *Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t *bufferA,
                                               q7_t *bufferB)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b0b2      	sub	sp, #200	; 0xc8
 80047ee:	af04      	add	r7, sp, #16
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	4608      	mov	r0, r1
 80047f4:	4611      	mov	r1, r2
 80047f6:	461a      	mov	r2, r3
 80047f8:	4603      	mov	r3, r0
 80047fa:	817b      	strh	r3, [r7, #10]
 80047fc:	460b      	mov	r3, r1
 80047fe:	813b      	strh	r3, [r7, #8]
 8004800:	4613      	mov	r3, r2
 8004802:	80fb      	strh	r3, [r7, #6]

    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t *pBuffer = bufferA;
 8004804:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    q7_t *pOut = Im_out;
 800480c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8004814:	2300      	movs	r3, #0
 8004816:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800481a:	e0cf      	b.n	80049bc <arm_convolve_HWC_q7_basic_nonsquare+0x1d2>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 800481c:	2300      	movs	r3, #0
 800481e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004822:	e0bd      	b.n	80049a0 <arm_convolve_HWC_q7_basic_nonsquare+0x1b6>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8004824:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004828:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800482c:	fb12 f303 	smulbb	r3, r2, r3
 8004830:	b29a      	uxth	r2, r3
 8004832:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	b29b      	uxth	r3, r3
 800483a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800483e:	e061      	b.n	8004904 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8004840:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004844:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8004848:	fb12 f303 	smulbb	r3, r2, r3
 800484c:	b29a      	uxth	r2, r3
 800484e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	b29b      	uxth	r3, r3
 8004856:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800485a:	e03c      	b.n	80048d6 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 800485c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8004860:	2b00      	cmp	r3, #0
 8004862:	db0d      	blt.n	8004880 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8004864:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	da08      	bge.n	8004880 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 800486e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8004872:	2b00      	cmp	r3, #0
 8004874:	db04      	blt.n	8004880 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8004876:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	; 0xb0
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	429a      	cmp	r2, r3
 800487e:	db08      	blt.n	8004892 <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t) * ch_im_in);
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	461a      	mov	r2, r3
 8004886:	2100      	movs	r1, #0
 8004888:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800488c:	f00b fa0a 	bl	800fca4 <memset>
 8004890:	e013      	b.n	80048ba <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    }
                    else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift(
                            (q7_t *)Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8004892:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8004896:	897a      	ldrh	r2, [r7, #10]
 8004898:	fb02 f203 	mul.w	r2, r2, r3
 800489c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80048a0:	4413      	add	r3, r2
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift(
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80048b4:	4618      	mov	r0, r3
 80048b6:	f002 fc18 	bl	80070ea <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048c2:	4413      	add	r3, r2
 80048c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                     i_ker_x++)
 80048c8:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 80048d6:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	; 0xb0
 80048da:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 80048de:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 80048e2:	fb01 f103 	mul.w	r1, r1, r3
 80048e6:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80048ea:	1ac9      	subs	r1, r1, r3
 80048ec:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80048f0:	440b      	add	r3, r1
 80048f2:	429a      	cmp	r2, r3
 80048f4:	dbb2      	blt.n	800485c <arm_convolve_HWC_q7_basic_nonsquare+0x72>
                 i_ker_y++)
 80048f6:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8004904:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 8004908:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800490c:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8004910:	fb01 f103 	mul.w	r1, r1, r3
 8004914:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004918:	1ac9      	subs	r1, r1, r3
 800491a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800491e:	440b      	add	r3, r1
 8004920:	429a      	cmp	r2, r3
 8004922:	db8d      	blt.n	8004840 <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800493c:	4413      	add	r3, r2
 800493e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004942:	429a      	cmp	r2, r3
 8004944:	d125      	bne.n	8004992 <arm_convolve_HWC_q7_basic_nonsquare+0x1a8>
            {
                pOut = arm_nn_mat_mult_kernel_q7_q15(
 8004946:	88fa      	ldrh	r2, [r7, #6]
 8004948:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800494c:	fb12 f303 	smulbb	r3, r2, r3
 8004950:	b29b      	uxth	r3, r3
 8004952:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004956:	fb12 f303 	smulbb	r3, r2, r3
 800495a:	b299      	uxth	r1, r3
 800495c:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8004960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004964:	9303      	str	r3, [sp, #12]
 8004966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496a:	9302      	str	r3, [sp, #8]
 800496c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	460b      	mov	r3, r1
 800497a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800497e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004982:	f000 fdff 	bl	8005584 <arm_nn_mat_mult_kernel_q7_q15>
 8004986:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                    wt, bufferA, ch_im_out, ch_im_in * dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 800498a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800498e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8004992:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8004996:	b29b      	uxth	r3, r3
 8004998:	3301      	adds	r3, #1
 800499a:	b29b      	uxth	r3, r3
 800499c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80049a0:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 80049a4:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f6ff af3b 	blt.w	8004824 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80049ae:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 80049bc:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 80049c0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80049c4:	429a      	cmp	r2, r3
 80049c6:	f6ff af29 	blt.w	800481c <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 80049ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049d2:	429a      	cmp	r2, r3
 80049d4:	f000 811a 	beq.w	8004c0c <arm_convolve_HWC_q7_basic_nonsquare+0x422>
    {
        const q7_t *pA = wt;
 80049d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        int i;

        for (i = 0; i < ch_im_out; i++)
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049e6:	e10a      	b.n	8004bfe <arm_convolve_HWC_q7_basic_nonsquare+0x414>
        {
            /* Load the accumulator with bias first */
            q31_t sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 80049e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ec:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049f0:	4413      	add	r3, r2
 80049f2:	f993 3000 	ldrsb.w	r3, [r3]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80049fc:	409a      	lsls	r2, r3
 80049fe:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8004a02:	2101      	movs	r1, #1
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	105b      	asrs	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

            /* Point to the beging of the im2col buffer */
            const q15_t *pB = bufferA;
 8004a10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Each time it process 4 entries */
            uint16_t colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 8004a1c:	fb02 f303 	mul.w	r3, r2, r3
 8004a20:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	109b      	asrs	r3, r3, #2
 8004a2a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

            while (colCnt)
 8004a2e:	e093      	b.n	8004b58 <arm_convolve_HWC_q7_basic_nonsquare+0x36e>
 8004a30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a3c:	f107 0320 	add.w	r3, r7, #32
 8004a40:	657b      	str	r3, [r7, #84]	; 0x54
 8004a42:	f107 031c 	add.w	r3, r7, #28
 8004a46:	653b      	str	r3, [r7, #80]	; 0x50
    memcpy(&val, *in_q7, 4);
 8004a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
    *in_q7 += 4;
 8004a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	1d1a      	adds	r2, r3, #4
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	601a      	str	r2, [r3, #0]
    return (val);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
        q31_t     inA = arm_nn_read_q7x4_ia(&source);
 8004a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a62:	2308      	movs	r3, #8
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
  op2 %= 32U;
 8004a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (op2 == 0U)
 8004a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <arm_convolve_HWC_q7_basic_nonsquare+0x28e>
    return op1;
 8004a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a76:	e003      	b.n	8004a80 <arm_convolve_HWC_q7_basic_nonsquare+0x296>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	fa62 f303 	ror.w	r3, r2, r3
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a84:	fa2f f383 	sxtb16	r3, r3
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	63bb      	str	r3, [r7, #56]	; 0x38
        q31_t     inAbuf2 = __SXTB16(inA);
 8004a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	fa2f f383 	sxtb16	r3, r3
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa6:	0c12      	lsrs	r2, r2, #16
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aae:	601a      	str	r2, [r3, #0]
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	461a      	mov	r2, r3
 8004abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004abe:	601a      	str	r2, [r3, #0]
        return source;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
            {
                q31_t inA1, inA2;
                q31_t inB1, inB2;

                pA = read_and_pad(pA, &inA1, &inA2);
 8004ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aca:	65fb      	str	r3, [r7, #92]	; 0x5c
    memcpy(&val, *in_q15, 4);
 8004acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	617b      	str	r3, [r7, #20]
    *in_q15 += 2;
 8004ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004adc:	601a      	str	r2, [r3, #0]
    return (val);
 8004ade:	697b      	ldr	r3, [r7, #20]

                inB1 = arm_nn_read_q15x2_ia(&pB);
 8004ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                sum = __SMLAD(inA1, inB1, sum);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004af0:	66f9      	str	r1, [r7, #108]	; 0x6c
 8004af2:	66ba      	str	r2, [r7, #104]	; 0x68
 8004af4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004afa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004afc:	fb23 1302 	smlad	r3, r3, r2, r1
 8004b00:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b0c:	673b      	str	r3, [r7, #112]	; 0x70
    memcpy(&val, *in_q15, 4);
 8004b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	613b      	str	r3, [r7, #16]
    *in_q15 += 2;
 8004b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	1d1a      	adds	r2, r3, #4
 8004b1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b1e:	601a      	str	r2, [r3, #0]
    return (val);
 8004b20:	693b      	ldr	r3, [r7, #16]
                inB2 = arm_nn_read_q15x2_ia(&pB);
 8004b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                sum = __SMLAD(inA2, inB2, sum);
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b32:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004b36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b38:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b3e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b40:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b42:	fb23 1302 	smlad	r3, r3, r2, r1
 8004b46:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8004b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

                colCnt--;
 8004b4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004b52:	3b01      	subs	r3, #1
 8004b54:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            while (colCnt)
 8004b58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f47f af67 	bne.w	8004a30 <arm_convolve_HWC_q7_basic_nonsquare+0x246>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8004b68:	fb12 f303 	smulbb	r3, r2, r3
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004b72:	fb12 f303 	smulbb	r3, r2, r3
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            while (colCnt)
 8004b80:	e01d      	b.n	8004bbe <arm_convolve_HWC_q7_basic_nonsquare+0x3d4>
            {
                q7_t inA1 = *pA++;
 8004b82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                q15_t inB1 = *pB++;
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	1c9a      	adds	r2, r3, #2
 8004b96:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                sum += inA1 * inB1;
 8004b9e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004ba2:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004bae:	4413      	add	r3, r2
 8004bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                colCnt--;
 8004bb4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            while (colCnt)
 8004bbe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1dd      	bne.n	8004b82 <arm_convolve_HWC_q7_basic_nonsquare+0x398>
            }
            *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 8004bc6:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8004bca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004bce:	fa42 f303 	asr.w	r3, r2, r3
 8004bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bda:	f303 0307 	ssat	r3, #8, r3
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004be2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bf0:	b24a      	sxtb	r2, r1
 8004bf2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8004bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bfe:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8004c02:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f6ff aeee 	blt.w	80049e8 <arm_convolve_HWC_q7_basic_nonsquare+0x1fe>
    }

#endif /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	37b8      	adds	r7, #184	; 0xb8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <arm_depthwise_separable_conv_HWC_q7_nonsquare>:
                                                         q7_t *Im_out,
                                                         const uint16_t dim_im_out_x,
                                                         const uint16_t dim_im_out_y,
                                                         q15_t *bufferA,
                                                         q7_t *bufferB)
{
 8004c16:	b590      	push	{r4, r7, lr}
 8004c18:	b0df      	sub	sp, #380	; 0x17c
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	f107 040c 	add.w	r4, r7, #12
 8004c20:	6020      	str	r0, [r4, #0]
 8004c22:	460c      	mov	r4, r1
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	f107 030a 	add.w	r3, r7, #10
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	4602      	mov	r2, r0
 8004c36:	801a      	strh	r2, [r3, #0]
 8004c38:	1dbb      	adds	r3, r7, #6
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	801a      	strh	r2, [r3, #0]
     *
     */

    int16_t i_out_y, i_out_x;
    int16_t i_ker_y, i_ker_x;
    q7_t *colBuffer = (q7_t *)bufferA;
 8004c3e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    q7_t *pBuffer = colBuffer;
 8004c46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c4a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    const q7_t *pBias = bias;
 8004c4e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    q7_t *pOut = Im_out;
 8004c56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004c5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    uint16_t rowCnt;
    uint16_t row_shift;

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8004c5e:	1dbb      	adds	r3, r7, #6
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d003      	beq.n	8004c72 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8004c6a:	f06f 0302 	mvn.w	r3, #2
 8004c6e:	f000 bc84 	b.w	800557a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x964>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
 8004c78:	f000 bc77 	b.w	800556a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x954>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
 8004c82:	f000 bc64 	b.w	800554e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x938>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8004c86:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 8004c8a:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8004c8e:	fb12 f303 	smulbb	r3, r2, r3
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
 8004ca0:	e06b      	b.n	8004d7a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x164>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8004ca2:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
 8004ca6:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 8004caa:	fb12 f303 	smulbb	r3, r2, r3
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	f8b7 3198 	ldrh.w	r3, [r7, #408]	; 0x198
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
 8004cbc:	e046      	b.n	8004d4c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x136>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8004cbe:	f9b7 3172 	ldrsh.w	r3, [r7, #370]	; 0x172
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db11      	blt.n	8004cea <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8004cc6:	f9b7 2172 	ldrsh.w	r2, [r7, #370]	; 0x172
 8004cca:	f107 0308 	add.w	r3, r7, #8
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	da0a      	bge.n	8004cea <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8004cd4:	f9b7 3170 	ldrsh.w	r3, [r7, #368]	; 0x170
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db06      	blt.n	8004cea <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8004cdc:	f9b7 2170 	ldrsh.w	r2, [r7, #368]	; 0x170
 8004ce0:	f107 030a 	add.w	r3, r7, #10
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	db08      	blt.n	8004cfc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xe6>
                    {
                        /* arm_fill_q7(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, ch_im_in);
 8004cea:	1dbb      	adds	r3, r7, #6
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8004cf6:	f00a ffd5 	bl	800fca4 <memset>
 8004cfa:	e019      	b.n	8004d30 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x11a>
                    }
                    else
                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer,
                         * ch_im_in); */
                        memcpy(pBuffer, (q7_t *)Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
 8004cfc:	f9b7 3172 	ldrsh.w	r3, [r7, #370]	; 0x172
 8004d00:	f107 020a 	add.w	r2, r7, #10
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	fb02 f203 	mul.w	r2, r2, r3
 8004d0a:	f9b7 3170 	ldrsh.w	r3, [r7, #368]	; 0x170
 8004d0e:	4413      	add	r3, r2
 8004d10:	1dba      	adds	r2, r7, #6
 8004d12:	8812      	ldrh	r2, [r2, #0]
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f107 030c 	add.w	r3, r7, #12
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	1899      	adds	r1, r3, r2
 8004d22:	1dbb      	adds	r3, r7, #6
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8004d2c:	f00a ff92 	bl	800fc54 <memcpy>
                    }
                    pBuffer += ch_im_in;
 8004d30:	1dbb      	adds	r3, r7, #6
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8004d38:	4413      	add	r3, r2
 8004d3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                     i_ker_x++)
 8004d3e:	f9b7 3170 	ldrsh.w	r3, [r7, #368]	; 0x170
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8004d4c:	f9b7 2170 	ldrsh.w	r2, [r7, #368]	; 0x170
 8004d50:	f9b7 3174 	ldrsh.w	r3, [r7, #372]	; 0x174
 8004d54:	f8b7 11a0 	ldrh.w	r1, [r7, #416]	; 0x1a0
 8004d58:	fb01 f103 	mul.w	r1, r1, r3
 8004d5c:	f8b7 3198 	ldrh.w	r3, [r7, #408]	; 0x198
 8004d60:	1ac9      	subs	r1, r1, r3
 8004d62:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8004d66:	440b      	add	r3, r1
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	dba8      	blt.n	8004cbe <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa8>
                 i_ker_y++)
 8004d6c:	f9b7 3172 	ldrsh.w	r3, [r7, #370]	; 0x172
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3301      	adds	r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8004d7a:	f9b7 2172 	ldrsh.w	r2, [r7, #370]	; 0x172
 8004d7e:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	; 0x176
 8004d82:	f8b7 11a4 	ldrh.w	r1, [r7, #420]	; 0x1a4
 8004d86:	fb01 f103 	mul.w	r1, r1, r3
 8004d8a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8004d8e:	1ac9      	subs	r1, r1, r3
 8004d90:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 8004d94:	440b      	add	r3, r1
 8004d96:	429a      	cmp	r2, r3
 8004d98:	db83      	blt.n	8004ca2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8c>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 8004d9a:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
            row_shift = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
            pBias = bias;
 8004daa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004dae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

            while (rowCnt)
 8004db2:	e339      	b.n	8005428 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x812>
            {
                q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8004db4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8004dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	105b      	asrs	r3, r3, #1
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8004ddc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8004de6:	f993 3000 	ldrsb.w	r3, [r3]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8004df0:	409a      	lsls	r2, r3
 8004df2:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	105b      	asrs	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
                q31_t sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8004e04:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8004e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8004e1e:	2101      	movs	r1, #1
 8004e20:	fa01 f303 	lsl.w	r3, r1, r3
 8004e24:	105b      	asrs	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                q31_t sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8004e2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8004e36:	f993 3000 	ldrsb.w	r3, [r3]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8004e40:	409a      	lsls	r2, r3
 8004e42:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8004e46:	2101      	movs	r1, #1
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	105b      	asrs	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
 8004e50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

                uint16_t colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
 8004e54:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8004e58:	f8b7 2194 	ldrh.w	r2, [r7, #404]	; 0x194
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	105b      	asrs	r3, r3, #1
 8004e62:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
                q7_t *pB = colBuffer + row_shift;
 8004e66:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8004e6a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004e6e:	4413      	add	r3, r2
 8004e70:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                const q7_t *pA = wt + row_shift;
 8004e74:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8004e78:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                row_shift += 4;
 8004e82:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8004e86:	3304      	adds	r3, #4
 8004e88:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 8004e8c:	e1dd      	b.n	800524a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x634>
 8004e8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8004ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ea6:	601a      	str	r2, [r3, #0]
    return (val);
 8004ea8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004eac:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = arm_nn_read_q7x4(pB);
 8004eae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                    pB += ch_im_in;
 8004eb2:	1dbb      	adds	r3, r7, #6
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004eba:	4413      	add	r3, r2
 8004ebc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ec4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8004ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ed8:	601a      	str	r2, [r3, #0]
    return (val);
 8004eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ede:	681b      	ldr	r3, [r3, #0]
                    opB = arm_nn_read_q7x4(pB);
 8004ee0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    pB += ch_im_in;
 8004ee4:	1dbb      	adds	r3, r7, #6
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004eec:	4413      	add	r3, r2
 8004eee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                    inB2 = __PKHTB(opB, inB1, 16);
 8004ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef6:	0c1b      	lsrs	r3, r3, #16
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004efe:	0c12      	lsrs	r2, r2, #16
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
                    inB1 = __PKHBT(inB1, opB, 16);
 8004f06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f1c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8004f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f30:	601a      	str	r2, [r3, #0]
    return (val);
 8004f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f36:	681b      	ldr	r3, [r3, #0]
                    inA1 = arm_nn_read_q7x4(pA);
 8004f38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    pA += ch_im_in;
 8004f3c:	1dbb      	adds	r3, r7, #6
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f44:	4413      	add	r3, r2
 8004f46:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8004f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f62:	601a      	str	r2, [r3, #0]
    return (val);
 8004f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f68:	681b      	ldr	r3, [r3, #0]
                    opB = arm_nn_read_q7x4(pA);
 8004f6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    pA += ch_im_in;
 8004f6e:	1dbb      	adds	r3, r7, #6
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f76:	4413      	add	r3, r2
 8004f78:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                    inA2 = __PKHTB(opB, inA1, 16);
 8004f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004f88:	0c12      	lsrs	r2, r2, #16
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                    inA1 = __PKHBT(inA1, opB, 16);
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    opA = __SXTB16(inA1);
 8004fa2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004fa6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004faa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004fac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	fa2f f283 	sxtb16	r2, r3
 8004fb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004fba:	601a      	str	r2, [r3, #0]
  return(result);
 8004fbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(inB1);
 8004fc6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004fd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	fa2f f283 	sxtb16	r2, r3
 8004fda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004fde:	601a      	str	r2, [r3, #0]
  return(result);
 8004fe0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    sum = __SMLAD(opA, opB, sum);
 8004fea:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004fee:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8004ff2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004ff6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ffa:	6018      	str	r0, [r3, #0]
 8004ffc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005000:	6019      	str	r1, [r3, #0]
 8005002:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005008:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005018:	6809      	ldr	r1, [r1, #0]
 800501a:	fb23 1202 	smlad	r2, r3, r2, r1
 800501e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005022:	601a      	str	r2, [r3, #0]
  return(result);
 8005024:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                    opA = __SXTB16(__ROR(inA1, 8));
 800502e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005032:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800503c:	2208      	movs	r2, #8
 800503e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8005040:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005044:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	f002 021f 	and.w	r2, r2, #31
 800504e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8005050:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x44c>
    return op1;
 800505a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	e007      	b.n	8005072 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x45c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005062:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005066:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	fa62 f303 	ror.w	r3, r2, r3
 8005072:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005076:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005078:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	fa2f f283 	sxtb16	r2, r3
 8005082:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005086:	601a      	str	r2, [r3, #0]
  return(result);
 8005088:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(__ROR(inB1, 8));
 8005092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800509a:	2308      	movs	r3, #8
 800509c:	67fb      	str	r3, [r7, #124]	; 0x7c
  op2 %= 32U;
 800509e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (op2 == 0U)
 80050a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x49c>
    return op1;
 80050ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050b0:	e004      	b.n	80050bc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x4a6>
  return (op1 >> op2) | (op1 << (32U - op2));
 80050b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b8:	fa62 f303 	ror.w	r3, r2, r3
 80050bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80050c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c4:	fa2f f383 	sxtb16	r3, r3
 80050c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80050cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    sum2 = __SMLAD(opA, opB, sum2);
 80050d4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80050d8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80050dc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80050e0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80050e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80050ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050f8:	fb23 1302 	smlad	r3, r3, r2, r1
 80050fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8005100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005104:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
                    opA = __SXTB16(inA2);
 8005108:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800510c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005114:	fa2f f383 	sxtb16	r3, r3
 8005118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 800511c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005120:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(inB2);
 8005124:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800512c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005130:	fa2f f383 	sxtb16	r3, r3
 8005134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8005138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800513c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    sum3 = __SMLAD(opA, opB, sum3);
 8005140:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005144:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005148:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800514c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005150:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800515c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005160:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005164:	fb23 1302 	smlad	r3, r3, r2, r1
 8005168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 800516c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005170:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                    opA = __SXTB16(__ROR(inA2, 8));
 8005174:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005178:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800517c:	2308      	movs	r3, #8
 800517e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  op2 %= 32U;
 8005182:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (op2 == 0U)
 800518e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x586>
    return op1;
 8005196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800519a:	e005      	b.n	80051a8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x592>
  return (op1 >> op2) | (op1 << (32U - op2));
 800519c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051a4:	fa62 f303 	ror.w	r3, r2, r3
 80051a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80051ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051b0:	fa2f f383 	sxtb16	r3, r3
 80051b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 80051b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                    opB = __SXTB16(__ROR(inB2, 8));
 80051c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c8:	2308      	movs	r3, #8
 80051ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  op2 %= 32U;
 80051ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (op2 == 0U)
 80051da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d2>
    return op1;
 80051e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051e6:	e005      	b.n	80051f4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5de>
  return (op1 >> op2) | (op1 << (32U - op2));
 80051e8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051f0:	fa62 f303 	ror.w	r3, r2, r3
 80051f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80051f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051fc:	fa2f f383 	sxtb16	r3, r3
 8005200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8005204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005208:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                    sum4 = __SMLAD(opA, opB, sum4);
 800520c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005210:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005214:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005218:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800521c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005224:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005228:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800522c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8005230:	fb23 1302 	smlad	r3, r3, r2, r1
 8005234:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 8005238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800523c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
                    colCnt--;
 8005240:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8005244:	3b01      	subs	r3, #1
 8005246:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
                while (colCnt)
 800524a:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 800524e:	2b00      	cmp	r3, #0
 8005250:	f47f ae1d 	bne.w	8004e8e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x278>
                             : "r0", "r1", "r2", "r3", "r4", "r5");
#endif /*ARM_MATH_BIG_ENDIAN */

#endif /* USE_INTRINSIC */

                colCnt = (dim_kernel_x * dim_kernel_y) & 0x1;
 8005254:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8005258:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 800525c:	fb12 f303 	smulbb	r3, r2, r3
 8005260:	b29b      	uxth	r3, r3
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
                while (colCnt)
 800526a:	e078      	b.n	800535e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x748>
 800526c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005270:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8005280:	f107 0318 	add.w	r3, r7, #24
 8005284:	601a      	str	r2, [r3, #0]
    return (val);
 8005286:	f107 0318 	add.w	r3, r7, #24
 800528a:	681a      	ldr	r2, [r3, #0]
                {
                    union arm_nnword inA, inB;
                    inA.word = arm_nn_read_q7x4(pA);
 800528c:	f107 0320 	add.w	r3, r7, #32
 8005290:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 8005292:	1dbb      	adds	r3, r7, #6
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800529a:	4413      	add	r3, r2
 800529c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80052a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	601a      	str	r2, [r3, #0]
    return (val);
 80052ba:	f107 0314 	add.w	r3, r7, #20
 80052be:	681a      	ldr	r2, [r3, #0]
                    inB.word = arm_nn_read_q7x4(pB);
 80052c0:	f107 031c 	add.w	r3, r7, #28
 80052c4:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 80052c6:	1dbb      	adds	r3, r7, #6
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80052ce:	4413      	add	r3, r2
 80052d0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                    sum += inA.bytes[0] * inB.bytes[0];
 80052d4:	f107 0320 	add.w	r3, r7, #32
 80052d8:	f993 3000 	ldrsb.w	r3, [r3]
 80052dc:	461a      	mov	r2, r3
 80052de:	f107 031c 	add.w	r3, r7, #28
 80052e2:	f993 3000 	ldrsb.w	r3, [r3]
 80052e6:	fb03 f302 	mul.w	r3, r3, r2
 80052ea:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80052ee:	4413      	add	r3, r2
 80052f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                    sum2 += inA.bytes[1] * inB.bytes[1];
 80052f4:	f107 0320 	add.w	r3, r7, #32
 80052f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80052fc:	461a      	mov	r2, r3
 80052fe:	f107 031c 	add.w	r3, r7, #28
 8005302:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005306:	fb03 f302 	mul.w	r3, r3, r2
 800530a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800530e:	4413      	add	r3, r2
 8005310:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
                    sum3 += inA.bytes[2] * inB.bytes[2];
 8005314:	f107 0320 	add.w	r3, r7, #32
 8005318:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800531c:	461a      	mov	r2, r3
 800531e:	f107 031c 	add.w	r3, r7, #28
 8005322:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005326:	fb03 f302 	mul.w	r3, r3, r2
 800532a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800532e:	4413      	add	r3, r2
 8005330:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
                    sum4 += inA.bytes[3] * inB.bytes[3];
 8005334:	f107 0320 	add.w	r3, r7, #32
 8005338:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800533c:	461a      	mov	r2, r3
 800533e:	f107 031c 	add.w	r3, r7, #28
 8005342:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8005346:	fb03 f302 	mul.w	r3, r3, r2
 800534a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800534e:	4413      	add	r3, r2
 8005350:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
                    colCnt--;
 8005354:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8005358:	3b01      	subs	r3, #1
 800535a:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
                while (colCnt)
 800535e:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8005362:	2b00      	cmp	r3, #0
 8005364:	d182      	bne.n	800526c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x656>
                }

                *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 8005366:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 800536a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800536e:	fa42 f303 	asr.w	r3, r2, r3
 8005372:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005376:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800537a:	f303 0307 	ssat	r3, #8, r3
 800537e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005382:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005386:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005390:	b24a      	sxtb	r2, r1
 8005392:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 8005394:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8005398:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800539c:	fa42 f303 	asr.w	r3, r2, r3
 80053a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80053a8:	f303 0307 	ssat	r3, #8, r3
 80053ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80053b0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80053b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80053be:	b24a      	sxtb	r2, r1
 80053c0:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t)__SSAT((sum3 >> out_shift), 8);
 80053c2:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80053c6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80053ca:	fa42 f303 	asr.w	r3, r2, r3
 80053ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80053d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053d6:	f303 0307 	ssat	r3, #8, r3
 80053da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053de:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80053e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80053ec:	b24a      	sxtb	r2, r1
 80053ee:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t)__SSAT((sum4 >> out_shift), 8);
 80053f0:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80053f4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80053f8:	fa42 f303 	asr.w	r3, r2, r3
 80053fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005400:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005404:	f303 0307 	ssat	r3, #8, r3
 8005408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800540c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8005410:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800541a:	b24a      	sxtb	r2, r1
 800541c:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 800541e:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 8005422:	3b01      	subs	r3, #1
 8005424:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
            while (rowCnt)
 8005428:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 800542c:	2b00      	cmp	r3, #0
 800542e:	f47f acc1 	bne.w	8004db4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x19e>
            }

            rowCnt = ch_im_out & 0x3;
 8005432:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
            while (rowCnt)
 800543e:	e077      	b.n	8005530 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x91a>
            {
                q7_t *pB = colBuffer + row_shift;
 8005440:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8005444:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005448:	4413      	add	r3, r2
 800544a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                const q7_t *pA = wt + row_shift;
 800544e:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8005452:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8005456:	4413      	add	r3, r2
 8005458:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800545c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8005466:	f993 3000 	ldrsb.w	r3, [r3]
 800546a:	461a      	mov	r2, r3
 800546c:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8005470:	409a      	lsls	r2, r3
 8005472:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	105b      	asrs	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                uint16_t colCnt = (dim_kernel_x * dim_kernel_y);
 8005484:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8005488:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 800548c:	fb12 f303 	smulbb	r3, r2, r3
 8005490:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136

                row_shift += 1;
 8005494:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8005498:	3301      	adds	r3, #1
 800549a:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160

                while (colCnt)
 800549e:	e027      	b.n	80054f0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8da>
                {
                    q7_t A1 = *pA;
 80054a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
                    q7_t B1 = *pB;
 80054aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
                    pA += ch_im_in;
 80054b4:	1dbb      	adds	r3, r7, #6
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80054bc:	4413      	add	r3, r2
 80054be:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                    pB += ch_im_in;
 80054c2:	1dbb      	adds	r3, r7, #6
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80054ca:	4413      	add	r3, r2
 80054cc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
                    sum += A1 * B1;
 80054d0:	f997 3127 	ldrsb.w	r3, [r7, #295]	; 0x127
 80054d4:	f997 2126 	ldrsb.w	r2, [r7, #294]	; 0x126
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
 80054dc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80054e0:	4413      	add	r3, r2
 80054e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

                    colCnt--;
 80054e6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 80054ea:	3b01      	subs	r3, #1
 80054ec:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
                while (colCnt)
 80054f0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1d3      	bne.n	80054a0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x88a>
                }
                *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 80054f8:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80054fc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005500:	fa42 f303 	asr.w	r3, r2, r3
 8005504:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550c:	f303 0307 	ssat	r3, #8, r3
 8005510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005514:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005518:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005522:	b24a      	sxtb	r2, r1
 8005524:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 8005526:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 800552a:	3b01      	subs	r3, #1
 800552c:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
            while (rowCnt)
 8005530:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 8005534:	2b00      	cmp	r3, #0
 8005536:	d183      	bne.n	8005440 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x82a>
            }

            // clear counter and pointers
            pBuffer = colBuffer;
 8005538:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800553c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8005540:	f9b7 3174 	ldrsh.w	r3, [r7, #372]	; 0x174
 8005544:	b29b      	uxth	r3, r3
 8005546:	3301      	adds	r3, #1
 8005548:	b29b      	uxth	r3, r3
 800554a:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
 800554e:	f9b7 2174 	ldrsh.w	r2, [r7, #372]	; 0x174
 8005552:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
 8005556:	429a      	cmp	r2, r3
 8005558:	f6ff ab95 	blt.w	8004c86 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x70>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 800555c:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	; 0x176
 8005560:	b29b      	uxth	r3, r3
 8005562:	3301      	adds	r3, #1
 8005564:	b29b      	uxth	r3, r3
 8005566:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
 800556a:	f9b7 2176 	ldrsh.w	r2, [r7, #374]	; 0x176
 800556e:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8005572:	429a      	cmp	r2, r3
 8005574:	f6ff ab82 	blt.w	8004c7c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x66>
    }

#endif /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8005580:	46bd      	mov	sp, r7
 8005582:	bd90      	pop	{r4, r7, pc}

08005584 <arm_nn_mat_mult_kernel_q7_q15>:
                                    const uint16_t numCol_A,
                                    const uint16_t bias_shift,
                                    const uint16_t out_shift,
                                    const q7_t *bias,
                                    q7_t *pOut)
{
 8005584:	b490      	push	{r4, r7}
 8005586:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800558a:	af00      	add	r7, sp, #0
 800558c:	f107 040c 	add.w	r4, r7, #12
 8005590:	6020      	str	r0, [r4, #0]
 8005592:	f107 0008 	add.w	r0, r7, #8
 8005596:	6001      	str	r1, [r0, #0]
 8005598:	4619      	mov	r1, r3
 800559a:	1dbb      	adds	r3, r7, #6
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	460a      	mov	r2, r1
 80055a2:	801a      	strh	r2, [r3, #0]
#if defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *pOut2 = pOut + ch_im_out;
 80055a4:	1dbb      	adds	r3, r7, #6
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80055ac:	4413      	add	r3, r2
 80055ae:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    const q7_t *pBias = bias;
 80055b2:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80055b6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

    uint16_t rowCnt = ch_im_out >> 1;
 80055ba:	1dbb      	adds	r3, r7, #6
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
    /* this loop over rows in A */
    while (rowCnt)
 80055c4:	e3b8      	b.n	8005d38 <arm_nn_mat_mult_kernel_q7_q15+0x7b4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80055c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80055ca:	f107 0208 	add.w	r2, r7, #8
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80055d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	441a      	add	r2, r3
 80055e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80055e4:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	f107 020c 	add.w	r2, r7, #12
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

        /* init the sum with bias */
        q31_t sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80055f6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80055fa:	f993 3000 	ldrsb.w	r3, [r3]
 80055fe:	461a      	mov	r2, r3
 8005600:	f8b7 3268 	ldrh.w	r3, [r7, #616]	; 0x268
 8005604:	409a      	lsls	r2, r3
 8005606:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 800560a:	2101      	movs	r1, #1
 800560c:	fa01 f303 	lsl.w	r3, r1, r3
 8005610:	105b      	asrs	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
        q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8005618:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	f8c7 2258 	str.w	r2, [r7, #600]	; 0x258
 8005622:	f993 3000 	ldrsb.w	r3, [r3]
 8005626:	461a      	mov	r2, r3
 8005628:	f8b7 3268 	ldrh.w	r3, [r7, #616]	; 0x268
 800562c:	409a      	lsls	r2, r3
 800562e:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005632:	2101      	movs	r1, #1
 8005634:	fa01 f303 	lsl.w	r3, r1, r3
 8005638:	105b      	asrs	r3, r3, #1
 800563a:	4413      	add	r3, r2
 800563c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
        q31_t sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8005640:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8005644:	f993 3000 	ldrsb.w	r3, [r3]
 8005648:	461a      	mov	r2, r3
 800564a:	f8b7 3268 	ldrh.w	r3, [r7, #616]	; 0x268
 800564e:	409a      	lsls	r2, r3
 8005650:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005654:	2101      	movs	r1, #1
 8005656:	fa01 f303 	lsl.w	r3, r1, r3
 800565a:	105b      	asrs	r3, r3, #1
 800565c:	4413      	add	r3, r2
 800565e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
        q31_t sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8005662:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	f8c7 2258 	str.w	r2, [r7, #600]	; 0x258
 800566c:	f993 3000 	ldrsb.w	r3, [r3]
 8005670:	461a      	mov	r2, r3
 8005672:	f8b7 3268 	ldrh.w	r3, [r7, #616]	; 0x268
 8005676:	409a      	lsls	r2, r3
 8005678:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 800567c:	2101      	movs	r1, #1
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	105b      	asrs	r3, r3, #1
 8005684:	4413      	add	r3, r2
 8005686:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

        uint16_t colCnt = numCol_A >> 2;
 800568a:	1d3b      	adds	r3, r7, #4
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
        /* accumulate over the vector */
        while (colCnt)
 8005694:	e27f      	b.n	8005b96 <arm_nn_mat_mult_kernel_q7_q15+0x612>
 8005696:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800569a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800569e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80056a0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056b0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80056b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	1d1a      	adds	r2, r3, #4
 80056bc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	601a      	str	r2, [r3, #0]
    return (val);
 80056c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056c8:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inA11, inA12, inA21, inA22;

            q31_t inB1 = arm_nn_read_q15x2_ia(&pB);
 80056ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80056ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80056d2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80056d6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80056d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056e8:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80056ea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	601a      	str	r2, [r3, #0]
    return (val);
 80056fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005700:	681b      	ldr	r3, [r3, #0]
            q31_t inB2 = arm_nn_read_q15x2_ia(&pB2);
 8005702:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005706:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800570a:	f107 020c 	add.w	r2, r7, #12
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005716:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005720:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800572a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800572e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8005730:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005740:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005742:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	601a      	str	r2, [r3, #0]
    return (val);
 8005754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005758:	681a      	ldr	r2, [r3, #0]
        q31_t     inA = arm_nn_read_q7x4_ia(&source);
 800575a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800575e:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8005760:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005770:	2208      	movs	r2, #8
 8005772:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8005774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005778:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	f002 021f 	and.w	r2, r2, #31
 8005782:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8005784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <arm_nn_mat_mult_kernel_q7_q15+0x212>
    return op1;
 800578e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	e007      	b.n	80057a6 <arm_nn_mat_mult_kernel_q7_q15+0x222>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005796:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800579a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	fa62 f303 	ror.w	r3, r2, r3
 80057a6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80057aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80057ac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	fa2f f283 	sxtb16	r2, r3
 80057b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ba:	601a      	str	r2, [r3, #0]
  return(result);
 80057bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80057c6:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80057c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80057d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80057d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	fa2f f283 	sxtb16	r2, r3
 80057de:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80057e2:	601a      	str	r2, [r3, #0]
  return(result);
 80057e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80057ee:	601a      	str	r2, [r3, #0]
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 80057f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	0c1b      	lsrs	r3, r3, #16
 80057f8:	041b      	lsls	r3, r3, #16
 80057fa:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	0c12      	lsrs	r2, r2, #16
 8005802:	4313      	orrs	r3, r2
 8005804:	461a      	mov	r2, r3
 8005806:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	601a      	str	r2, [r3, #0]
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800580e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	b29a      	uxth	r2, r3
 8005816:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	4313      	orrs	r3, r2
 8005820:	461a      	mov	r2, r3
 8005822:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	601a      	str	r2, [r3, #0]
        return source;
 800582a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800582e:	681a      	ldr	r2, [r3, #0]

            pA = read_and_pad(pA, &inA11, &inA12);
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800583a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8005844:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800584e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8005858:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800585c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800585e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800586e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005870:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	1d1a      	adds	r2, r3, #4
 800587a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	601a      	str	r2, [r3, #0]
    return (val);
 8005882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005886:	681a      	ldr	r2, [r3, #0]
        q31_t     inA = arm_nn_read_q7x4_ia(&source);
 8005888:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800588c:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 800588e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800589e:	2208      	movs	r2, #8
 80058a0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80058a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058a6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	f002 021f 	and.w	r2, r2, #31
 80058b0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80058b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <arm_nn_mat_mult_kernel_q7_q15+0x340>
    return op1;
 80058bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	e007      	b.n	80058d4 <arm_nn_mat_mult_kernel_q7_q15+0x350>
  return (op1 >> op2) | (op1 << (32U - op2));
 80058c4:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 80058c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	fa62 f303 	ror.w	r3, r2, r3
 80058d4:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80058d8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80058da:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	fa2f f283 	sxtb16	r2, r3
 80058e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058e8:	601a      	str	r2, [r3, #0]
  return(result);
 80058ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80058f4:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80058f6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	fa2f f283 	sxtb16	r2, r3
 800590c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8005910:	601a      	str	r2, [r3, #0]
  return(result);
 8005912:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800591c:	601a      	str	r2, [r3, #0]
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800591e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	0c12      	lsrs	r2, r2, #16
 8005930:	4313      	orrs	r3, r2
 8005932:	461a      	mov	r2, r3
 8005934:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	601a      	str	r2, [r3, #0]
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800593c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	b29a      	uxth	r2, r3
 8005944:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	4313      	orrs	r3, r2
 800594e:	461a      	mov	r2, r3
 8005950:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	601a      	str	r2, [r3, #0]
        return source;
 8005958:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800595c:	681b      	ldr	r3, [r3, #0]
            pA2 = read_and_pad(pA2, &inA21, &inA22);
 800595e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

            sum = __SMLAD(inA11, inB1, sum);
 8005962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 800596c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8005970:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005974:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8005978:	6019      	str	r1, [r3, #0]
 800597a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800597e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005980:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005984:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 800598e:	6809      	ldr	r1, [r1, #0]
 8005990:	fb23 1202 	smlad	r2, r3, r2, r1
 8005994:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005998:	601a      	str	r2, [r3, #0]
  return(result);
 800599a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
            sum2 = __SMLAD(inA11, inB2, sum2);
 80059a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80059b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80059b4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 80059b8:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 80059bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80059c0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80059c4:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80059c8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80059cc:	fb23 1302 	smlad	r3, r3, r2, r1
 80059d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80059d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80059d8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
            sum3 = __SMLAD(inA21, inB1, sum3);
 80059dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80059e8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80059ec:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 80059f0:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 80059f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80059f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80059fc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8005a00:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8005a04:	fb23 1302 	smlad	r3, r3, r2, r1
 8005a08:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8005a0c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8005a10:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
            sum4 = __SMLAD(inA21, inB2, sum4);
 8005a14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8005a20:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8005a24:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8005a28:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8005a2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005a30:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005a34:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8005a38:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8005a3c:	fb23 1302 	smlad	r3, r3, r2, r1
 8005a40:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  return(result);
 8005a44:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005a48:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8005a4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005a50:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    memcpy(&val, *in_q15, 4);
 8005a54:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a62:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005a64:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	1d1a      	adds	r2, r3, #4
 8005a6c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005a70:	601a      	str	r2, [r3, #0]
    return (val);
 8005a72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a76:	681b      	ldr	r3, [r3, #0]

            inB1 = arm_nn_read_q15x2_ia(&pB);
 8005a78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005a7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    memcpy(&val, *in_q15, 4);
 8005a84:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a92:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005a94:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	1d1a      	adds	r2, r3, #4
 8005a9c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005aa0:	601a      	str	r2, [r3, #0]
    return (val);
 8005aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005aa6:	681b      	ldr	r3, [r3, #0]
            inB2 = arm_nn_read_q15x2_ia(&pB2);
 8005aa8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

            sum = __SMLAD(inA12, inB1, sum);
 8005aac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8005ab8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005abc:	f8c7 11ac 	str.w	r1, [r7, #428]	; 0x1ac
 8005ac0:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8005ac4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005ac8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005acc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8005ad0:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8005ad4:	fb23 1302 	smlad	r3, r3, r2, r1
 8005ad8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  return(result);
 8005adc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005ae0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
            sum2 = __SMLAD(inA12, inB2, sum2);
 8005ae4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4619      	mov	r1, r3
 8005aec:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8005af0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005af4:	f8c7 11bc 	str.w	r1, [r7, #444]	; 0x1bc
 8005af8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005afc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005b00:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8005b04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005b08:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8005b0c:	fb23 1302 	smlad	r3, r3, r2, r1
 8005b10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8005b14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005b18:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
            sum3 = __SMLAD(inA22, inB1, sum3);
 8005b1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8005b28:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b2c:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8005b30:	f8c7 21c8 	str.w	r2, [r7, #456]	; 0x1c8
 8005b34:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005b38:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005b3c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8005b40:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8005b44:	fb23 1302 	smlad	r3, r3, r2, r1
 8005b48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  return(result);
 8005b4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005b50:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
            sum4 = __SMLAD(inA22, inB2, sum4);
 8005b54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8005b60:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8005b64:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 8005b68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005b6c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005b70:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8005b74:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005b78:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8005b7c:	fb23 1302 	smlad	r3, r3, r2, r1
 8005b80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8005b84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005b88:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

            colCnt--;
 8005b8c:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 8005b90:	3b01      	subs	r3, #1
 8005b92:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
        while (colCnt)
 8005b96:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f47f ad7b 	bne.w	8005696 <arm_nn_mat_mult_kernel_q7_q15+0x112>
        } /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
        while (colCnt)
 8005bac:	e056      	b.n	8005c5c <arm_nn_mat_mult_kernel_q7_q15+0x6d8>
        {
            q7_t inA1 = *pA++;
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f107 020c 	add.w	r2, r7, #12
 8005bb8:	1c59      	adds	r1, r3, #1
 8005bba:	6011      	str	r1, [r2, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
            q15_t inB1 = *pB++;
 8005bc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	1c99      	adds	r1, r3, #2
 8005bca:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005bce:	6011      	str	r1, [r2, #0]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
            q7_t inA2 = *pA2++;
 8005bd6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	f8c7 2250 	str.w	r2, [r7, #592]	; 0x250
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
            q15_t inB2 = *pB2++;
 8005be6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	1c99      	adds	r1, r3, #2
 8005bee:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005bf2:	6011      	str	r1, [r2, #0]
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	f8a7 31e8 	strh.w	r3, [r7, #488]	; 0x1e8

            sum += inA1 * inB1;
 8005bfa:	f997 31ef 	ldrsb.w	r3, [r7, #495]	; 0x1ef
 8005bfe:	f9b7 21ec 	ldrsh.w	r2, [r7, #492]	; 0x1ec
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
 8005c06:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
            sum2 += inA1 * inB2;
 8005c10:	f997 31ef 	ldrsb.w	r3, [r7, #495]	; 0x1ef
 8005c14:	f9b7 21e8 	ldrsh.w	r2, [r7, #488]	; 0x1e8
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005c20:	4413      	add	r3, r2
 8005c22:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
            sum3 += inA2 * inB1;
 8005c26:	f997 31eb 	ldrsb.w	r3, [r7, #491]	; 0x1eb
 8005c2a:	f9b7 21ec 	ldrsh.w	r2, [r7, #492]	; 0x1ec
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005c36:	4413      	add	r3, r2
 8005c38:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
            sum4 += inA2 * inB2;
 8005c3c:	f997 31eb 	ldrsb.w	r3, [r7, #491]	; 0x1eb
 8005c40:	f9b7 21e8 	ldrsh.w	r2, [r7, #488]	; 0x1e8
 8005c44:	fb02 f303 	mul.w	r3, r2, r3
 8005c48:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
            colCnt--;
 8005c52:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 8005c56:	3b01      	subs	r3, #1
 8005c58:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
        while (colCnt)
 8005c5c:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1a4      	bne.n	8005bae <arm_nn_mat_mult_kernel_q7_q15+0x62a>
        } /* while over colCnt */
        *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 8005c64:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005c68:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8005c6c:	fa42 f303 	asr.w	r3, r2, r3
 8005c70:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005c74:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005c78:	f303 0307 	ssat	r3, #8, r3
 8005c7c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8005c80:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8005c84:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 8005c8e:	b24a      	sxtb	r2, r1
 8005c90:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t)__SSAT((sum3 >> out_shift), 8);
 8005c92:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005c96:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005c9a:	fa42 f303 	asr.w	r3, r2, r3
 8005c9e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8005ca2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005ca6:	f303 0307 	ssat	r3, #8, r3
 8005caa:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8005cae:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8005cb2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 8005cbc:	b24a      	sxtb	r2, r1
 8005cbe:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 8005cc0:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005cc4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005cc8:	fa42 f303 	asr.w	r3, r2, r3
 8005ccc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8005cd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005cd4:	f303 0307 	ssat	r3, #8, r3
 8005cd8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8005cdc:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8005ce0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8005cea:	b24a      	sxtb	r2, r1
 8005cec:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum4 >> out_shift), 8);
 8005cee:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005cf2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8005cf6:	fa42 f303 	asr.w	r3, r2, r3
 8005cfa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8005cfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005d02:	f303 0307 	ssat	r3, #8, r3
 8005d06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8005d0a:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8005d0e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8005d18:	b24a      	sxtb	r2, r1
 8005d1a:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	f107 030c 	add.w	r3, r7, #12
 8005d24:	f107 010c 	add.w	r1, r7, #12
 8005d28:	6809      	ldr	r1, [r1, #0]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8005d2e:	f8b7 3256 	ldrh.w	r3, [r7, #598]	; 0x256
 8005d32:	3b01      	subs	r3, #1
 8005d34:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
    while (rowCnt)
 8005d38:	f8b7 3256 	ldrh.w	r3, [r7, #598]	; 0x256
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f47f ac42 	bne.w	80055c6 <arm_nn_mat_mult_kernel_q7_q15+0x42>
    } /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8005d42:	1dbb      	adds	r3, r7, #6
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 824f 	beq.w	80061ee <arm_nn_mat_mult_kernel_q7_q15+0xc6a>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8005d50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d54:	f107 0208 	add.w	r2, r7, #8
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8005d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	1d3b      	adds	r3, r7, #4
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	441a      	add	r2, r3
 8005d6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d6e:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8005d70:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8005d74:	f993 3000 	ldrsb.w	r3, [r3]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f8b7 3268 	ldrh.w	r3, [r7, #616]	; 0x268
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005d84:	2101      	movs	r1, #1
 8005d86:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8a:	105b      	asrs	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
        q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8005d92:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	f8c7 2258 	str.w	r2, [r7, #600]	; 0x258
 8005d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8b7 3268 	ldrh.w	r3, [r7, #616]	; 0x268
 8005da6:	409a      	lsls	r2, r3
 8005da8:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8005dac:	2101      	movs	r1, #1
 8005dae:	fa01 f303 	lsl.w	r3, r1, r3
 8005db2:	105b      	asrs	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

        uint16_t colCnt = numCol_A >> 2;
 8005dba:	1d3b      	adds	r3, r7, #4
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	089b      	lsrs	r3, r3, #2
 8005dc0:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        while (colCnt)
 8005dc4:	e19c      	b.n	8006100 <arm_nn_mat_mult_kernel_q7_q15+0xb7c>
 8005dc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005dca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005dce:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8005dd0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005de2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	601a      	str	r2, [r3, #0]
    return (val);
 8005df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df8:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inA11, inA12;

            q31_t inB1 = arm_nn_read_q15x2_ia(&pB);
 8005dfa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005dfe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005e06:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8005e08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f107 0320 	add.w	r3, r7, #32
 8005e18:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005e1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	601a      	str	r2, [r3, #0]
    return (val);
 8005e2c:	f107 0320 	add.w	r3, r7, #32
 8005e30:	681b      	ldr	r3, [r3, #0]
            q31_t inB2 = arm_nn_read_q15x2_ia(&pB2);
 8005e32:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005e36:	f107 031c 	add.w	r3, r7, #28
 8005e3a:	f107 020c 	add.w	r2, r7, #12
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005e50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e5a:	f107 021c 	add.w	r2, r7, #28
 8005e5e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8005e60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f107 0318 	add.w	r3, r7, #24
 8005e70:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005e72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1d1a      	adds	r2, r3, #4
 8005e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	601a      	str	r2, [r3, #0]
    return (val);
 8005e84:	f107 0318 	add.w	r3, r7, #24
 8005e88:	681a      	ldr	r2, [r3, #0]
        q31_t     inA = arm_nn_read_q7x4_ia(&source);
 8005e8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e8e:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8005e90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8005ea4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005ea8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	f002 021f 	and.w	r2, r2, #31
 8005eb2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8005eb4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d103      	bne.n	8005ec6 <arm_nn_mat_mult_kernel_q7_q15+0x942>
    return op1;
 8005ebe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	e007      	b.n	8005ed6 <arm_nn_mat_mult_kernel_q7_q15+0x952>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005ec6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8005eca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	fa62 f303 	ror.w	r3, r2, r3
 8005ed6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005eda:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005edc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	fa2f f283 	sxtb16	r2, r3
 8005ee6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005eea:	601a      	str	r2, [r3, #0]
  return(result);
 8005eec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005ef6:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8005ef8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005f04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	fa2f f283 	sxtb16	r2, r3
 8005f0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005f12:	601a      	str	r2, [r3, #0]
  return(result);
 8005f14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f1e:	601a      	str	r2, [r3, #0]
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 8005f20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	041b      	lsls	r3, r3, #16
 8005f2a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	0c12      	lsrs	r2, r2, #16
 8005f32:	4313      	orrs	r3, r2
 8005f34:	461a      	mov	r2, r3
 8005f36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	601a      	str	r2, [r3, #0]
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 8005f3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	601a      	str	r2, [r3, #0]
        return source;
 8005f5a:	f107 031c 	add.w	r3, r7, #28
 8005f5e:	681a      	ldr	r2, [r3, #0]

            pA = read_and_pad(pA, &inA11, &inA12);
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8005f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8005f72:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8005f76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f7a:	6018      	str	r0, [r3, #0]
 8005f7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f80:	6019      	str	r1, [r3, #0]
 8005f82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005f86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005f88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8005f98:	6809      	ldr	r1, [r1, #0]
 8005f9a:	fb23 1202 	smlad	r2, r3, r2, r1
 8005f9e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005fa2:	601a      	str	r2, [r3, #0]
  return(result);
 8005fa4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
            sum2 = __SMLAD(inA11, inB2, sum2);
 8005fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8005fba:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8005fbe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005fc2:	6018      	str	r0, [r3, #0]
 8005fc4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005fc8:	6019      	str	r1, [r3, #0]
 8005fca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005fce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005fd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8005fe0:	6809      	ldr	r1, [r1, #0]
 8005fe2:	fb23 1202 	smlad	r2, r3, r2, r1
 8005fe6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005fea:	601a      	str	r2, [r3, #0]
  return(result);
 8005fec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8005ff6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005ffa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005ffe:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8006000:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8006012:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	601a      	str	r2, [r3, #0]
    return (val);
 8006024:	f107 0314 	add.w	r3, r7, #20
 8006028:	681b      	ldr	r3, [r3, #0]

            inB1 = arm_nn_read_q15x2_ia(&pB);
 800602a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800602e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006032:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006036:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8006038:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f107 0310 	add.w	r3, r7, #16
 8006048:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800604a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	601a      	str	r2, [r3, #0]
    return (val);
 800605c:	f107 0310 	add.w	r3, r7, #16
 8006060:	681b      	ldr	r3, [r3, #0]
            inB2 = arm_nn_read_q15x2_ia(&pB2);
 8006062:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

            sum = __SMLAD(inA12, inB1, sum);
 8006066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8006072:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006076:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800607a:	6018      	str	r0, [r3, #0]
 800607c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006080:	6019      	str	r1, [r3, #0]
 8006082:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006086:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006088:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8006098:	6809      	ldr	r1, [r1, #0]
 800609a:	fb23 1202 	smlad	r2, r3, r2, r1
 800609e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80060a2:	601a      	str	r2, [r3, #0]
  return(result);
 80060a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
            sum2 = __SMLAD(inA12, inB2, sum2);
 80060ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80060ba:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80060be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80060c2:	6018      	str	r0, [r3, #0]
 80060c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80060c8:	6019      	str	r1, [r3, #0]
 80060ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80060ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80060d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80060e0:	6809      	ldr	r1, [r1, #0]
 80060e2:	fb23 1202 	smlad	r2, r3, r2, r1
 80060e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80060ea:	601a      	str	r2, [r3, #0]
  return(result);
 80060ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

            colCnt--;
 80060f6:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 80060fa:	3b01      	subs	r3, #1
 80060fc:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        while (colCnt)
 8006100:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 8006104:	2b00      	cmp	r3, #0
 8006106:	f47f ae5e 	bne.w	8005dc6 <arm_nn_mat_mult_kernel_q7_q15+0x842>
        }
        colCnt = numCol_A & 0x3;
 800610a:	1d3b      	adds	r3, r7, #4
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        while (colCnt)
 8006116:	e038      	b.n	800618a <arm_nn_mat_mult_kernel_q7_q15+0xc06>
        {
            q7_t inA1 = *pA++;
 8006118:	f107 030c 	add.w	r3, r7, #12
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f107 020c 	add.w	r2, r7, #12
 8006122:	1c59      	adds	r1, r3, #1
 8006124:	6011      	str	r1, [r2, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
            q15_t inB1 = *pB++;
 800612c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	1c99      	adds	r1, r3, #2
 8006134:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006138:	6011      	str	r1, [r2, #0]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
            q15_t inB2 = *pB2++;
 8006140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	1c99      	adds	r1, r3, #2
 8006148:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800614c:	6011      	str	r1, [r2, #0]
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a

            sum += inA1 * inB1;
 8006154:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 8006158:	f9b7 221c 	ldrsh.w	r2, [r7, #540]	; 0x21c
 800615c:	fb02 f303 	mul.w	r3, r2, r3
 8006160:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006164:	4413      	add	r3, r2
 8006166:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
            sum2 += inA1 * inB2;
 800616a:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 800616e:	f9b7 221a 	ldrsh.w	r2, [r7, #538]	; 0x21a
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800617a:	4413      	add	r3, r2
 800617c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
            colCnt--;
 8006180:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 8006184:	3b01      	subs	r3, #1
 8006186:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        while (colCnt)
 800618a:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1c2      	bne.n	8006118 <arm_nn_mat_mult_kernel_q7_q15+0xb94>
        }

        *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 8006192:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8006196:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800619a:	fa42 f303 	asr.w	r3, r2, r3
 800619e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80061a2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80061a6:	f303 0307 	ssat	r3, #8, r3
 80061aa:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80061ae:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 80061b2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 80061bc:	b24a      	sxtb	r2, r1
 80061be:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 80061c0:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 80061c4:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80061c8:	fa42 f303 	asr.w	r3, r2, r3
 80061cc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80061d0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80061d4:	f303 0307 	ssat	r3, #8, r3
 80061d8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80061dc:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80061e0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 80061ea:	b24a      	sxtb	r2, r1
 80061ec:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 80061ee:	1dbb      	adds	r3, r7, #6
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80061f6:	4413      	add	r3, r2
 80061f8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

    /* return the new output pointer with offset */
    return pOut;
 80061fc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
    (void)bias;
    (void)pOut;
    /* To be completed */
    return NULL;
#endif /* ARM_MATH_DSP */
}
 8006200:	4618      	mov	r0, r3
 8006202:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8006206:	46bd      	mov	sp, r7
 8006208:	bc90      	pop	{r4, r7}
 800620a:	4770      	bx	lr

0800620c <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                              const uint16_t numCol_A,
                                              const uint16_t bias_shift,
                                              const uint16_t out_shift,
                                              const q7_t *bias,
                                              q7_t *pOut)
{
 800620c:	b490      	push	{r4, r7}
 800620e:	b0de      	sub	sp, #376	; 0x178
 8006210:	af00      	add	r7, sp, #0
 8006212:	f107 040c 	add.w	r4, r7, #12
 8006216:	6020      	str	r0, [r4, #0]
 8006218:	f107 0008 	add.w	r0, r7, #8
 800621c:	6001      	str	r1, [r0, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	1dbb      	adds	r3, r7, #6
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	1d3b      	adds	r3, r7, #4
 8006226:	460a      	mov	r2, r1
 8006228:	801a      	strh	r2, [r3, #0]

#if defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *pOut2 = pOut + ch_im_out;
 800622a:	1dbb      	adds	r3, r7, #6
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8006232:	4413      	add	r3, r2
 8006234:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    int i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 8006238:	2300      	movs	r3, #0
 800623a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800623e:	e36e      	b.n	800691e <arm_nn_mat_mult_kernel_q7_q15_reordered+0x712>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8006240:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006244:	f107 0208 	add.w	r2, r7, #8
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 800624c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	441a      	add	r2, r3
 800625a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800625e:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	f107 020c 	add.w	r2, r7, #12
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	4413      	add	r3, r2
 800626c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

        /* init the sum with bias */
        q31_t sum = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8006270:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006274:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8006278:	4413      	add	r3, r2
 800627a:	f993 3000 	ldrsb.w	r3, [r3]
 800627e:	461a      	mov	r2, r3
 8006280:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006284:	409a      	lsls	r2, r3
 8006286:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 800628a:	2101      	movs	r1, #1
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	105b      	asrs	r3, r3, #1
 8006292:	4413      	add	r3, r2
 8006294:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        q31_t sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8006298:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800629c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80062a0:	4413      	add	r3, r2
 80062a2:	f993 3000 	ldrsb.w	r3, [r3]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80062ac:	409a      	lsls	r2, r3
 80062ae:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80062b2:	2101      	movs	r1, #1
 80062b4:	fa01 f303 	lsl.w	r3, r1, r3
 80062b8:	105b      	asrs	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        q31_t sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80062c0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80062c4:	3301      	adds	r3, #1
 80062c6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80062ca:	4413      	add	r3, r2
 80062cc:	f993 3000 	ldrsb.w	r3, [r3]
 80062d0:	461a      	mov	r2, r3
 80062d2:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80062d6:	409a      	lsls	r2, r3
 80062d8:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80062dc:	2101      	movs	r1, #1
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	105b      	asrs	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        q31_t sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80062ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80062ee:	3301      	adds	r3, #1
 80062f0:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80062f4:	4413      	add	r3, r2
 80062f6:	f993 3000 	ldrsb.w	r3, [r3]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006300:	409a      	lsls	r2, r3
 8006302:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8006306:	2101      	movs	r1, #1
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	105b      	asrs	r3, r3, #1
 800630e:	4413      	add	r3, r2
 8006310:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

        uint16_t colCnt = numCol_A >> 2;
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	089b      	lsrs	r3, r3, #2
 800631a:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        /* accumulate over the vector */
        while (colCnt)
 800631e:	e22d      	b.n	800677c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x570>
 8006320:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006324:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006328:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 800632a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800633a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800633c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	1d1a      	adds	r2, r3, #4
 8006346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	601a      	str	r2, [r3, #0]
    return (val);
 800634e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006352:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inA11, inA12, inA21, inA22;

            q31_t inB1 = arm_nn_read_q15x2_ia(&pB);
 8006354:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006358:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800635c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006360:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8006362:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006372:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8006374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	601a      	str	r2, [r3, #0]
    return (val);
 8006386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800638a:	681b      	ldr	r3, [r3, #0]
            q31_t inB2 = arm_nn_read_q15x2_ia(&pB2);
 800638c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006394:	f107 020c 	add.w	r2, r7, #12
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80063a0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80063aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80063b8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80063ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f107 0320 	add.w	r3, r7, #32
 80063ca:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80063cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	601a      	str	r2, [r3, #0]
    return (val);
 80063de:	f107 0320 	add.w	r3, r7, #32
 80063e2:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80063e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80063e8:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 80063ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80063fa:	2208      	movs	r2, #8
 80063fc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80063fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006402:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	f002 021f 	and.w	r2, r2, #31
 800640c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800640e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d103      	bne.n	8006420 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x214>
    return op1;
 8006418:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	e007      	b.n	8006430 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x224>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006420:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006424:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	fa62 f303 	ror.w	r3, r2, r3
 8006430:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006434:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006436:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	fa2f f283 	sxtb16	r2, r3
 8006440:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006444:	601a      	str	r2, [r3, #0]
  return(result);
 8006446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8006456:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006460:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006462:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	fa2f f283 	sxtb16	r2, r3
 800646c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006470:	601a      	str	r2, [r3, #0]
  return(result);
 8006472:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	601a      	str	r2, [r3, #0]
    return source;
 8006482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006486:	681a      	ldr	r2, [r3, #0]

            pA = read_and_pad_reordered(pA, &inA11, &inA12);
 8006488:	f107 030c 	add.w	r3, r7, #12
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	f107 031c 	add.w	r3, r7, #28
 8006492:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800649c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064a8:	f107 031c 	add.w	r3, r7, #28
 80064ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    memcpy(&val, *in_q7, 4);
 80064b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	f107 0318 	add.w	r3, r7, #24
 80064be:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80064c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	1d1a      	adds	r2, r3, #4
 80064c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064cc:	601a      	str	r2, [r3, #0]
    return (val);
 80064ce:	f107 0318 	add.w	r3, r7, #24
 80064d2:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80064d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 80064d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064e0:	2308      	movs	r3, #8
 80064e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  op2 %= 32U;
 80064e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (op2 == 0U)
 80064f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x2f4>
    return op1;
 80064fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064fe:	e005      	b.n	800650c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x300>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006500:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006508:	fa62 f303 	ror.w	r3, r2, r3
 800650c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006514:	fa2f f383 	sxtb16	r3, r3
 8006518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 800651c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006520:	461a      	mov	r2, r3
 8006522:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006526:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8006528:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800652c:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800652e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006530:	fa2f f283 	sxtb16	r2, r3
 8006534:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006538:	601a      	str	r2, [r3, #0]
  return(result);
 800653a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006546:	601a      	str	r2, [r3, #0]
    return source;
 8006548:	f107 031c 	add.w	r3, r7, #28
 800654c:	681b      	ldr	r3, [r3, #0]
            pA2 = read_and_pad_reordered(pA2, &inA21, &inA22);
 800654e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

            sum = __SMLAD(inA11, inB1, sum);
 8006552:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4619      	mov	r1, r3
 800655a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800655e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006562:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8006566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800656a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800656e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006576:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800657a:	fb23 1302 	smlad	r3, r3, r2, r1
 800657e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8006582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006586:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            sum2 = __SMLAD(inA11, inB2, sum2);
 800658a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4619      	mov	r1, r3
 8006592:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006596:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800659a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 800659e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80065a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80065a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065ae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80065b2:	fb23 1302 	smlad	r3, r3, r2, r1
 80065b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 80065ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
            sum3 = __SMLAD(inA21, inB1, sum3);
 80065c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4619      	mov	r1, r3
 80065ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80065ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80065d2:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80065d6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80065da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80065de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065e6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80065ea:	fb23 1302 	smlad	r3, r3, r2, r1
 80065ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 80065f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            sum4 = __SMLAD(inA21, inB2, sum4);
 80065fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006606:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800660a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800660e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8006612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800661e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8006622:	fb23 1302 	smlad	r3, r3, r2, r1
 8006626:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 800662a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800662e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006632:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    memcpy(&val, *in_q15, 4);
 800663a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800664a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006656:	601a      	str	r2, [r3, #0]
    return (val);
 8006658:	f107 0314 	add.w	r3, r7, #20
 800665c:	681b      	ldr	r3, [r3, #0]

            inB1 = arm_nn_read_q15x2_ia(&pB);
 800665e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006662:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    memcpy(&val, *in_q15, 4);
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	f107 0310 	add.w	r3, r7, #16
 8006678:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	1d1a      	adds	r2, r3, #4
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	601a      	str	r2, [r3, #0]
    return (val);
 8006688:	f107 0310 	add.w	r3, r7, #16
 800668c:	681b      	ldr	r3, [r3, #0]
            inB2 = arm_nn_read_q15x2_ia(&pB2);
 800668e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

            sum = __SMLAD(inA12, inB1, sum);
 8006692:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800669e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80066a2:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80066a6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80066aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80066b6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80066ba:	fb23 1302 	smlad	r3, r3, r2, r1
 80066be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 80066c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            sum2 = __SMLAD(inA12, inB2, sum2);
 80066ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80066da:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80066de:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80066e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ea:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80066ee:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80066f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80066f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 80066fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
            sum3 = __SMLAD(inA22, inB1, sum3);
 8006702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4619      	mov	r1, r3
 800670a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800670e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006712:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8006716:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800671a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006722:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8006726:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800672a:	fb23 1302 	smlad	r3, r3, r2, r1
 800672e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8006732:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006736:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            sum4 = __SMLAD(inA22, inB2, sum4);
 800673a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4619      	mov	r1, r3
 8006742:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006746:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800674a:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800674e:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8006752:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006756:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800675a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800675e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8006762:	fb23 1302 	smlad	r3, r3, r2, r1
 8006766:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 800676a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800676e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

            colCnt--;
 8006772:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8006776:	3b01      	subs	r3, #1
 8006778:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        while (colCnt)
 800677c:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f adcd 	bne.w	8006320 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        } /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8006786:	1d3b      	adds	r3, r7, #4
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        while (colCnt)
 8006792:	e056      	b.n	8006842 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x636>
        {
            q7_t inA1 = *pA++;
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f107 020c 	add.w	r2, r7, #12
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	6011      	str	r1, [r2, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
            q15_t inB1 = *pB++;
 80067a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	1c99      	adds	r1, r3, #2
 80067b0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80067b4:	6011      	str	r1, [r2, #0]
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
            q7_t inA2 = *pA2++;
 80067bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
            q15_t inB2 = *pB2++;
 80067cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	1c99      	adds	r1, r3, #2
 80067d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80067d8:	6011      	str	r1, [r2, #0]
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            sum += inA1 * inB1;
 80067e0:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80067e4:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80067f0:	4413      	add	r3, r2
 80067f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            sum2 += inA1 * inB2;
 80067f6:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80067fa:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8006806:	4413      	add	r3, r2
 8006808:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
            sum3 += inA2 * inB1;
 800680c:	f997 3133 	ldrsb.w	r3, [r7, #307]	; 0x133
 8006810:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8006814:	fb02 f303 	mul.w	r3, r2, r3
 8006818:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800681c:	4413      	add	r3, r2
 800681e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
            sum4 += inA2 * inB2;
 8006822:	f997 3133 	ldrsb.w	r3, [r7, #307]	; 0x133
 8006826:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8006832:	4413      	add	r3, r2
 8006834:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            colCnt--;
 8006838:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 800683c:	3b01      	subs	r3, #1
 800683e:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
        while (colCnt)
 8006842:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1a4      	bne.n	8006794 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x588>
        } /* while over colCnt */
        *pOut++ = (q7_t)__SSAT((sum >> out_shift), 8);
 800684a:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 800684e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8006852:	fa42 f303 	asr.w	r3, r2, r3
 8006856:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800685a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800685e:	f303 0307 	ssat	r3, #8, r3
 8006862:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006866:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800686a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8006874:	b24a      	sxtb	r2, r1
 8006876:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t)__SSAT((sum3 >> out_shift), 8);
 8006878:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 800687c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8006880:	fa42 f303 	asr.w	r3, r2, r3
 8006884:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006888:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800688c:	f303 0307 	ssat	r3, #8, r3
 8006890:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8006894:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8006898:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 80068a2:	b24a      	sxtb	r2, r1
 80068a4:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum2 >> out_shift), 8);
 80068a6:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80068aa:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80068ae:	fa42 f303 	asr.w	r3, r2, r3
 80068b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80068b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80068ba:	f303 0307 	ssat	r3, #8, r3
 80068be:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80068c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80068c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80068d0:	b24a      	sxtb	r2, r1
 80068d2:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t)__SSAT((sum4 >> out_shift), 8);
 80068d4:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80068d8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80068dc:	fa42 f303 	asr.w	r3, r2, r3
 80068e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80068e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80068e8:	f303 0307 	ssat	r3, #8, r3
 80068ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80068f0:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80068f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80068fe:	b24a      	sxtb	r2, r1
 8006900:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	881a      	ldrh	r2, [r3, #0]
 8006906:	f107 030c 	add.w	r3, r7, #12
 800690a:	f107 010c 	add.w	r1, r7, #12
 800690e:	6809      	ldr	r1, [r1, #0]
 8006910:	440a      	add	r2, r1
 8006912:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 8006914:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006918:	3302      	adds	r3, #2
 800691a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800691e:	1dbb      	adds	r3, r7, #6
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8006926:	429a      	cmp	r2, r3
 8006928:	f6ff ac8a 	blt.w	8006240 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    } /* for over ch_im_out */

    pOut += ch_im_out;
 800692c:	1dbb      	adds	r3, r7, #6
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8006934:	4413      	add	r3, r2
 8006936:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* return the new output pointer with offset */
    return pOut;
 800693a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    (void)bias;
    (void)pOut;
    /* To be completed */
    return NULL;
#endif /* ARM_MATH_DSP */
}
 800693e:	4618      	mov	r0, r3
 8006940:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8006944:	46bd      	mov	sp, r7
 8006946:	bc90      	pop	{r4, r7}
 8006948:	4770      	bx	lr

0800694a <arm_fully_connected_q7>:
                                  const uint16_t bias_shift,
                                  const uint16_t out_shift,
                                  const q7_t *bias,
                                  q7_t *pOut,
                                  q15_t *vec_buffer)
{
 800694a:	b590      	push	{r4, r7, lr}
 800694c:	b0e5      	sub	sp, #404	; 0x194
 800694e:	af00      	add	r7, sp, #0
 8006950:	f107 040c 	add.w	r4, r7, #12
 8006954:	6020      	str	r0, [r4, #0]
 8006956:	f107 0008 	add.w	r0, r7, #8
 800695a:	6001      	str	r1, [r0, #0]
 800695c:	4619      	mov	r1, r3
 800695e:	1dbb      	adds	r3, r7, #6
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	460a      	mov	r2, r1
 8006966:	801a      	strh	r2, [r3, #0]

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 8006968:	f107 0308 	add.w	r3, r7, #8
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    const q7_t *pB2;
    q7_t *pO = pOut;
 8006972:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8006976:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    const q7_t *pBias = bias;
 800697a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800697e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    const q15_t *pA;
    uint16_t rowCnt = num_of_rows >> 1;
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 800698c:	1dbb      	adds	r3, r7, #6
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	f000 fc31 	bl	8007200 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 800699e:	e224      	b.n	8006dea <arm_fully_connected_q7+0x4a0>
    {
        q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80069a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 80069aa:	f993 3000 	ldrsb.w	r3, [r3]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 80069b4:	409a      	lsls	r2, r3
 80069b6:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80069ba:	2101      	movs	r1, #1
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	105b      	asrs	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        q31_t sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80069c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 80069d2:	f993 3000 	ldrsb.w	r3, [r3]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 80069dc:	409a      	lsls	r2, r3
 80069de:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80069e2:	2101      	movs	r1, #1
 80069e4:	fa01 f303 	lsl.w	r3, r1, r3
 80069e8:	105b      	asrs	r3, r3, #1
 80069ea:	4413      	add	r3, r2
 80069ec:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        uint16_t colCnt = dim_vec >> 2;
 80069f0:	1dbb      	adds	r3, r7, #6
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172

        pA = vec_buffer;
 80069fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069fe:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8006a02:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 8006a04:	1dbb      	adds	r3, r7, #6
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

        while (colCnt)
 8006a12:	e168      	b.n	8006ce6 <arm_fully_connected_q7+0x39c>
 8006a14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a18:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    memcpy(&val, *in_q7, 4);
 8006a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a44:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8006a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	1d1a      	adds	r2, r3, #4
 8006a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a52:	601a      	str	r2, [r3, #0]
    return (val);
 8006a54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a58:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8006a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8006a5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a66:	2308      	movs	r3, #8
 8006a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  op2 %= 32U;
 8006a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (op2 == 0U)
 8006a78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d102      	bne.n	8006a86 <arm_fully_connected_q7+0x13c>
    return op1;
 8006a80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a84:	e005      	b.n	8006a92 <arm_fully_connected_q7+0x148>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006a86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a8e:	fa62 f303 	ror.w	r3, r2, r3
 8006a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a9a:	fa2f f383 	sxtb16	r3, r3
 8006a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8006aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006aac:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8006aae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aba:	fa2f f383 	sxtb16	r3, r3
 8006abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8006ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006acc:	601a      	str	r2, [r3, #0]
    return source;
 8006ace:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ad2:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inV, inM11, inM12, inM21, inM22;
            pB = read_and_pad_reordered(pB, &inM11, &inM12);
 8006ad4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006adc:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006ae6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006aee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006af2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    memcpy(&val, *in_q7, 4);
 8006afa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b08:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8006b0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b16:	601a      	str	r2, [r3, #0]
    return (val);
 8006b18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b1c:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8006b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  op2 %= 32U;
 8006b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (op2 == 0U)
 8006b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d102      	bne.n	8006b4a <arm_fully_connected_q7+0x200>
    return op1;
 8006b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b48:	e005      	b.n	8006b56 <arm_fully_connected_q7+0x20c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b52:	fa62 f303 	ror.w	r3, r2, r3
 8006b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5e:	fa2f f383 	sxtb16	r3, r3
 8006b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8006b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b70:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006b7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b7e:	fa2f f383 	sxtb16	r3, r3
 8006b82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8006b86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b90:	601a      	str	r2, [r3, #0]
    return source;
 8006b92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006b96:	681b      	ldr	r3, [r3, #0]
            pB2 = read_and_pad_reordered(pB2, &inM21, &inM22);
 8006b98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006b9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    memcpy(&val, *in_q15, 4);
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bb2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	601a      	str	r2, [r3, #0]
    return (val);
 8006bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bc6:	681b      	ldr	r3, [r3, #0]

            inV = arm_nn_read_q15x2_ia(&pA);
 8006bc8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inV, inM11, sum);
 8006bcc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006bd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006bdc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006be0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8006be4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8006bf0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006bf4:	fb23 1302 	smlad	r3, r3, r2, r1
 8006bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 8006bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c00:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
            sum2 = __SMLAD(inV, inM21, sum2);
 8006c04:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006c08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006c14:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8006c18:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8006c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c24:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8006c28:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8006c2c:	fb23 1302 	smlad	r3, r3, r2, r1
 8006c30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8006c34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c38:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006c3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006c40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    memcpy(&val, *in_q15, 4);
 8006c44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c52:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8006c54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c60:	601a      	str	r2, [r3, #0]
    return (val);
 8006c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c66:	681b      	ldr	r3, [r3, #0]

            inV = arm_nn_read_q15x2_ia(&pA);
 8006c68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inV, inM12, sum);
 8006c6c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006c70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4619      	mov	r1, r3
 8006c78:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006c7c:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8006c80:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8006c84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c8c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006c90:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006c94:	fb23 1302 	smlad	r3, r3, r2, r1
 8006c98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 8006c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ca0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
            sum2 = __SMLAD(inV, inM22, sum2);
 8006ca4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006ca8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006cb4:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006cb8:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8006cbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006cc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cc4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006cc8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006ccc:	fb23 1302 	smlad	r3, r3, r2, r1
 8006cd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8006cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

            colCnt--;
 8006cdc:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
        while (colCnt)
 8006ce6:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f47f ae92 	bne.w	8006a14 <arm_fully_connected_q7+0xca>
        }
        colCnt = dim_vec & 0x3;
 8006cf0:	1dbb      	adds	r3, r7, #6
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
        while (colCnt)
 8006cfc:	e037      	b.n	8006d6e <arm_fully_connected_q7+0x424>
        {
            q7_t inV = *pA++;
 8006cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	1c99      	adds	r1, r3, #2
 8006d06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006d0a:	6011      	str	r1, [r2, #0]
 8006d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d10:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
            q15_t inM = *pB++;
 8006d14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8006d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8006d22:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
            q15_t inM2 = *pB2++;
 8006d26:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8006d30:	f993 3000 	ldrsb.w	r3, [r3]
 8006d34:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

            sum += inV * inM;
 8006d38:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006d3c:	f9b7 2144 	ldrsh.w	r2, [r7, #324]	; 0x144
 8006d40:	fb02 f303 	mul.w	r3, r2, r3
 8006d44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006d48:	4413      	add	r3, r2
 8006d4a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
            sum2 += inV * inM2;
 8006d4e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006d52:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006d5e:	4413      	add	r3, r2
 8006d60:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
            colCnt--;
 8006d64:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
        while (colCnt)
 8006d6e:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1c3      	bne.n	8006cfe <arm_fully_connected_q7+0x3b4>
        } /* while over colCnt */
        *pO++ = (q7_t)(__SSAT((sum >> out_shift), 8));
 8006d76:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8006d7a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006d7e:	fa42 f303 	asr.w	r3, r2, r3
 8006d82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006d86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006d8a:	f303 0307 	ssat	r3, #8, r3
 8006d8e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006d92:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006d96:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006da0:	b24a      	sxtb	r2, r1
 8006da2:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t)(__SSAT((sum2 >> out_shift), 8));
 8006da4:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8006da8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006dac:	fa42 f303 	asr.w	r3, r2, r3
 8006db0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006db8:	f303 0307 	ssat	r3, #8, r3
 8006dbc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8006dc0:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8006dc4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006dce:	b24a      	sxtb	r2, r1
 8006dd0:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8006dd2:	1dbb      	adds	r3, r7, #6
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8006dda:	4413      	add	r3, r2
 8006ddc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        rowCnt--;
 8006de0:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8006de4:	3b01      	subs	r3, #1
 8006de6:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
    while (rowCnt)
 8006dea:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f47f add6 	bne.w	80069a0 <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

    while (rowCnt)
 8006e00:	e168      	b.n	80070d4 <arm_fully_connected_q7+0x78a>
    {
        uint16_t colCnt = dim_vec >> 2;
 8006e02:	1dbb      	adds	r3, r7, #6
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	089b      	lsrs	r3, r3, #2
 8006e08:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        q31_t sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006e0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8006e16:	f993 3000 	ldrsb.w	r3, [r3]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8006e20:	409a      	lsls	r2, r3
 8006e22:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8006e26:	2101      	movs	r1, #1
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	105b      	asrs	r3, r3, #1
 8006e2e:	4413      	add	r3, r2
 8006e30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

        pA = vec_buffer;
 8006e34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e38:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8006e3c:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8006e3e:	e0f9      	b.n	8007034 <arm_fully_connected_q7+0x6ea>
 8006e40:	f107 031c 	add.w	r3, r7, #28
 8006e44:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e4e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e58:	f107 0220 	add.w	r2, r7, #32
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e62:	f107 021c 	add.w	r2, r7, #28
 8006e66:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8006e68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f107 0318 	add.w	r3, r7, #24
 8006e78:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8006e7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	1d1a      	adds	r2, r3, #4
 8006e84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	601a      	str	r2, [r3, #0]
    return (val);
 8006e8c:	f107 0318 	add.w	r3, r7, #24
 8006e90:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8006e92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e96:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8006e98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8006eac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006eb0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	f002 021f 	and.w	r2, r2, #31
 8006eba:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8006ebc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <arm_fully_connected_q7+0x584>
    return op1;
 8006ec6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	e007      	b.n	8006ede <arm_fully_connected_q7+0x594>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006ece:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006ed2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	fa62 f303 	ror.w	r3, r2, r3
 8006ede:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006ee2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006ee4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	fa2f f283 	sxtb16	r2, r3
 8006eee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006ef2:	601a      	str	r2, [r3, #0]
  return(result);
 8006ef4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8006f04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	fa2f f283 	sxtb16	r2, r3
 8006f1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f1e:	601a      	str	r2, [r3, #0]
  return(result);
 8006f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	601a      	str	r2, [r3, #0]
    return source;
 8006f30:	f107 031c 	add.w	r3, r7, #28
 8006f34:	681b      	ldr	r3, [r3, #0]
        {
            q31_t inV1, inV2, inM11, inM12;

            pB = read_and_pad_reordered(pB, &inM11, &inM12);
 8006f36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8006f3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006f42:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8006f44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f107 0314 	add.w	r3, r7, #20
 8006f54:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8006f56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	1d1a      	adds	r2, r3, #4
 8006f60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	601a      	str	r2, [r3, #0]
    return (val);
 8006f68:	f107 0314 	add.w	r3, r7, #20
 8006f6c:	681b      	ldr	r3, [r3, #0]

            inV1 = arm_nn_read_q15x2_ia(&pA);
 8006f6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            sum = __SMLAD(inV1, inM11, sum);
 8006f72:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8006f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8006f82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f86:	6019      	str	r1, [r3, #0]
 8006f88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006f8c:	6018      	str	r0, [r3, #0]
 8006f8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006f92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006f94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8006fa4:	6809      	ldr	r1, [r1, #0]
 8006fa6:	fb23 1202 	smlad	r2, r3, r2, r1
 8006faa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006fae:	601a      	str	r2, [r3, #0]
  return(result);
 8006fb0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8006fba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006fbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006fc2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8006fc4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f107 0310 	add.w	r3, r7, #16
 8006fd4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8006fd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	1d1a      	adds	r2, r3, #4
 8006fe0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	601a      	str	r2, [r3, #0]
    return (val);
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	681b      	ldr	r3, [r3, #0]

            inV2 = arm_nn_read_q15x2_ia(&pA);
 8006fee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum = __SMLAD(inV2, inM12, sum);
 8006ff2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8006ff6:	f107 0320 	add.w	r3, r7, #32
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8007002:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8007006:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800700a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800700e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007012:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007016:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800701a:	fb23 1302 	smlad	r3, r3, r2, r1
 800701e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8007022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007026:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

            colCnt--;
 800702a:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 800702e:	3b01      	subs	r3, #1
 8007030:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        while (colCnt)
 8007034:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af01 	bne.w	8006e40 <arm_fully_connected_q7+0x4f6>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 800703e:	1dbb      	adds	r3, r7, #6
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        while (colCnt)
 800704a:	e023      	b.n	8007094 <arm_fully_connected_q7+0x74a>
        {
            q7_t inV = *pA++;
 800704c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	1c99      	adds	r1, r3, #2
 8007054:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007058:	6011      	str	r1, [r2, #0]
 800705a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800705e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
            q15_t inM = *pB++;
 8007062:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800706c:	f993 3000 	ldrsb.w	r3, [r3]
 8007070:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
            sum += inV * inM;
 8007074:	f997 3163 	ldrsb.w	r3, [r7, #355]	; 0x163
 8007078:	f9b7 2160 	ldrsh.w	r2, [r7, #352]	; 0x160
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8007084:	4413      	add	r3, r2
 8007086:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            colCnt--;
 800708a:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 800708e:	3b01      	subs	r3, #1
 8007090:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
        while (colCnt)
 8007094:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1d7      	bne.n	800704c <arm_fully_connected_q7+0x702>
        }

        *pO++ = (q7_t)(__SSAT((sum >> out_shift), 8));
 800709c:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80070a0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80070a4:	fa42 f303 	asr.w	r3, r2, r3
 80070a8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80070ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80070b0:	f303 0307 	ssat	r3, #8, r3
 80070b4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80070b8:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 80070bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80070c6:	b24a      	sxtb	r2, r1
 80070c8:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 80070ca:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 80070ce:	3b01      	subs	r3, #1
 80070d0:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
    while (rowCnt)
 80070d4:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f47f ae92 	bne.w	8006e02 <arm_fully_connected_q7+0x4b8>
    }

#endif /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd90      	pop	{r4, r7, pc}

080070ea <arm_q7_to_q15_no_shift>:
 * </pre>
 *
 */

void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b09b      	sub	sp, #108	; 0x6c
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	623b      	str	r3, [r7, #32]
    q31_t in;
    q31_t in1, in2;
    q31_t out1, out2;

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	089b      	lsrs	r3, r3, #2
 80070fe:	667b      	str	r3, [r7, #100]	; 0x64

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    while (blkCnt > 0u)
 8007100:	e05f      	b.n	80071c2 <arm_q7_to_q15_no_shift+0xd8>
 8007102:	f107 0320 	add.w	r3, r7, #32
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	61fb      	str	r3, [r7, #28]
    *in_q7 += 4;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	1d1a      	adds	r2, r3, #4
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	601a      	str	r2, [r3, #0]
    return (val);
 800711a:	69fb      	ldr	r3, [r7, #28]
    {
        in = arm_nn_read_q7x4_ia(&pIn);
 800711c:	663b      	str	r3, [r7, #96]	; 0x60

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR((uint32_t)in, 8));
 800711e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007122:	2308      	movs	r3, #8
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
  op2 %= 32U;
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (op2 == 0U)
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <arm_q7_to_q15_no_shift+0x4e>
    return op1;
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	e003      	b.n	8007140 <arm_q7_to_q15_no_shift+0x56>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	fa62 f303 	ror.w	r3, r2, r3
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	fa2f f383 	sxtb16	r3, r3
 8007148:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* extend remaining two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 800714e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007154:	fa2f f383 	sxtb16	r3, r3
 8007158:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	65bb      	str	r3, [r7, #88]	; 0x58

#ifndef ARM_MATH_BIG_ENDIAN
        out2 = (int32_t)__PKHTB(in1, in2, 16);
 800715e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007166:	0c12      	lsrs	r2, r2, #16
 8007168:	4313      	orrs	r3, r2
 800716a:	657b      	str	r3, [r7, #84]	; 0x54
        out1 = (int32_t)__PKHBT(in2, in1, 16);
 800716c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800716e:	b29a      	uxth	r2, r3
 8007170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	4313      	orrs	r3, r2
 8007176:	653b      	str	r3, [r7, #80]	; 0x50
 8007178:	f107 0308 	add.w	r3, r7, #8
 800717c:	647b      	str	r3, [r7, #68]	; 0x44
 800717e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007180:	643b      	str	r3, [r7, #64]	; 0x40
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 8007182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007184:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 8007186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 800718e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007196:	601a      	str	r2, [r3, #0]
}
 8007198:	bf00      	nop
 800719a:	f107 0308 	add.w	r3, r7, #8
 800719e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48
    q31_t val = src_q31;
 80071a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a6:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 80071a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 80071b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	1d1a      	adds	r2, r3, #4
 80071b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b8:	601a      	str	r2, [r3, #0]
}
 80071ba:	bf00      	nop
#endif
        arm_nn_write_q15x2_ia(&pDst, out1);
        arm_nn_write_q15x2_ia(&pDst, out2);

        /* Decrement the loop counter */
        blkCnt--;
 80071bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071be:	3b01      	subs	r3, #1
 80071c0:	667b      	str	r3, [r7, #100]	; 0x64
    while (blkCnt > 0u)
 80071c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d19c      	bne.n	8007102 <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f003 0303 	and.w	r3, r3, #3
 80071ce:	667b      	str	r3, [r7, #100]	; 0x64
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 80071d0:	e00c      	b.n	80071ec <arm_q7_to_q15_no_shift+0x102>
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t)*pIn++;
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	623a      	str	r2, [r7, #32]
 80071d8:	f993 1000 	ldrsb.w	r1, [r3]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	1c9a      	adds	r2, r3, #2
 80071e0:	60ba      	str	r2, [r7, #8]
 80071e2:	b20a      	sxth	r2, r1
 80071e4:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 80071e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071e8:	3b01      	subs	r3, #1
 80071ea:	667b      	str	r3, [r7, #100]	; 0x64
    while (blkCnt > 0u)
 80071ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1ef      	bne.n	80071d2 <arm_q7_to_q15_no_shift+0xe8>
    }
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	376c      	adds	r7, #108	; 0x6c
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize)
{
 8007200:	b480      	push	{r7}
 8007202:	b097      	sub	sp, #92	; 0x5c
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc; /* Src pointer */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	623b      	str	r3, [r7, #32]
    q31_t in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	089b      	lsrs	r3, r3, #2
 8007214:	657b      	str	r3, [r7, #84]	; 0x54

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8007216:	e04e      	b.n	80072b6 <arm_q7_to_q15_reordered_no_shift+0xb6>
 8007218:	f107 0320 	add.w	r3, r7, #32
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	61fb      	str	r3, [r7, #28]
    *in_q7 += 4;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	1d1a      	adds	r2, r3, #4
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	601a      	str	r2, [r3, #0]
    return (val);
 8007230:	69fb      	ldr	r3, [r7, #28]
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = arm_nn_read_q7x4_ia(&pIn);
 8007232:	653b      	str	r3, [r7, #80]	; 0x50

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR((uint32_t)in, 8));
 8007234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007238:	2308      	movs	r3, #8
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
  op2 %= 32U;
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
  if (op2 == 0U)
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <arm_q7_to_q15_reordered_no_shift+0x4e>
    return op1;
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	e003      	b.n	8007256 <arm_q7_to_q15_reordered_no_shift+0x56>
  return (op1 >> op2) | (op1 << (32U - op2));
 800724e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	fa62 f303 	ror.w	r3, r2, r3
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725a:	fa2f f383 	sxtb16	r3, r3
 800725e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8007264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726a:	fa2f f383 	sxtb16	r3, r3
 800726e:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	64bb      	str	r3, [r7, #72]	; 0x48
 8007274:	f107 0308 	add.w	r3, r7, #8
 8007278:	643b      	str	r3, [r7, #64]	; 0x40
 800727a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727c:	61bb      	str	r3, [r7, #24]
    memcpy(*in, &value, 4);
 800727e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	601a      	str	r2, [r3, #0]
    *in += 4;
 8007286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	1d1a      	adds	r2, r3, #4
 800728c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800728e:	601a      	str	r2, [r3, #0]
}
 8007290:	bf00      	nop
 8007292:	f107 0308 	add.w	r3, r7, #8
 8007296:	647b      	str	r3, [r7, #68]	; 0x44
 8007298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800729a:	617b      	str	r3, [r7, #20]
    memcpy(*in, &value, 4);
 800729c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	601a      	str	r2, [r3, #0]
    *in += 4;
 80072a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	1d1a      	adds	r2, r3, #4
 80072aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ac:	601a      	str	r2, [r3, #0]
}
 80072ae:	bf00      	nop
        arm_nn_write_q7x4_ia((q7_t **)&pDst, in1);
        arm_nn_write_q7x4_ia((q7_t **)&pDst, in2);
#endif

        /* Decrement the loop counter */
        blkCnt--;
 80072b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b2:	3b01      	subs	r3, #1
 80072b4:	657b      	str	r3, [r7, #84]	; 0x54
    while (blkCnt > 0u)
 80072b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1ad      	bne.n	8007218 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	657b      	str	r3, [r7, #84]	; 0x54
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 80072c4:	e00c      	b.n	80072e0 <arm_q7_to_q15_reordered_no_shift+0xe0>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t)*pIn++;
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	623a      	str	r2, [r7, #32]
 80072cc:	f993 1000 	ldrsb.w	r1, [r3]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	1c9a      	adds	r2, r3, #2
 80072d4:	60ba      	str	r2, [r7, #8]
 80072d6:	b20a      	sxth	r2, r1
 80072d8:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 80072da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072dc:	3b01      	subs	r3, #1
 80072de:	657b      	str	r3, [r7, #84]	; 0x54
    while (blkCnt > 0u)
 80072e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1ef      	bne.n	80072c6 <arm_q7_to_q15_reordered_no_shift+0xc6>
    }
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	375c      	adds	r7, #92	; 0x5c
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072fe:	2003      	movs	r0, #3
 8007300:	f000 f901 	bl	8007506 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007304:	200f      	movs	r0, #15
 8007306:	f7fc fecd 	bl	80040a4 <HAL_InitTick>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	71fb      	strb	r3, [r7, #7]
 8007314:	e001      	b.n	800731a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007316:	f7fc fc13 	bl	8003b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800731a:	79fb      	ldrb	r3, [r7, #7]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_IncTick+0x20>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_IncTick+0x24>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4413      	add	r3, r2
 8007334:	4a04      	ldr	r2, [pc, #16]	; (8007348 <HAL_IncTick+0x24>)
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000010 	.word	0x20000010
 8007348:	20000444 	.word	0x20000444

0800734c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return uwTick;
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <HAL_GetTick+0x14>)
 8007352:	681b      	ldr	r3, [r3, #0]
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000444 	.word	0x20000444

08007364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800736c:	f7ff ffee 	bl	800734c <HAL_GetTick>
 8007370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d005      	beq.n	800738a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <HAL_Delay+0x44>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800738a:	bf00      	nop
 800738c:	f7ff ffde 	bl	800734c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d8f7      	bhi.n	800738c <HAL_Delay+0x28>
  {
  }
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000010 	.word	0x20000010

080073ac <__NVIC_SetPriorityGrouping>:
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073bc:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <__NVIC_SetPriorityGrouping+0x44>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073c8:	4013      	ands	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073de:	4a04      	ldr	r2, [pc, #16]	; (80073f0 <__NVIC_SetPriorityGrouping+0x44>)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	60d3      	str	r3, [r2, #12]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	e000ed00 	.word	0xe000ed00

080073f4 <__NVIC_GetPriorityGrouping>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <__NVIC_GetPriorityGrouping+0x18>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 0307 	and.w	r3, r3, #7
}
 8007402:	4618      	mov	r0, r3
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	e000ed00 	.word	0xe000ed00

08007410 <__NVIC_EnableIRQ>:
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800741a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741e:	2b00      	cmp	r3, #0
 8007420:	db0b      	blt.n	800743a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	f003 021f 	and.w	r2, r3, #31
 8007428:	4907      	ldr	r1, [pc, #28]	; (8007448 <__NVIC_EnableIRQ+0x38>)
 800742a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	2001      	movs	r0, #1
 8007432:	fa00 f202 	lsl.w	r2, r0, r2
 8007436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	e000e100 	.word	0xe000e100

0800744c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745c:	2b00      	cmp	r3, #0
 800745e:	db0a      	blt.n	8007476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	490c      	ldr	r1, [pc, #48]	; (8007498 <__NVIC_SetPriority+0x4c>)
 8007466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746a:	0112      	lsls	r2, r2, #4
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	440b      	add	r3, r1
 8007470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007474:	e00a      	b.n	800748c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	4908      	ldr	r1, [pc, #32]	; (800749c <__NVIC_SetPriority+0x50>)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	3b04      	subs	r3, #4
 8007484:	0112      	lsls	r2, r2, #4
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	440b      	add	r3, r1
 800748a:	761a      	strb	r2, [r3, #24]
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	e000e100 	.word	0xe000e100
 800749c:	e000ed00 	.word	0xe000ed00

080074a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b089      	sub	sp, #36	; 0x24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f1c3 0307 	rsb	r3, r3, #7
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	bf28      	it	cs
 80074be:	2304      	movcs	r3, #4
 80074c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d902      	bls.n	80074d0 <NVIC_EncodePriority+0x30>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	3b03      	subs	r3, #3
 80074ce:	e000      	b.n	80074d2 <NVIC_EncodePriority+0x32>
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43da      	mvns	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	401a      	ands	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074e8:	f04f 31ff 	mov.w	r1, #4294967295
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	43d9      	mvns	r1, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f8:	4313      	orrs	r3, r2
         );
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3724      	adds	r7, #36	; 0x24
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff ff4c 	bl	80073ac <__NVIC_SetPriorityGrouping>
}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800752e:	f7ff ff61 	bl	80073f4 <__NVIC_GetPriorityGrouping>
 8007532:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	6978      	ldr	r0, [r7, #20]
 800753a:	f7ff ffb1 	bl	80074a0 <NVIC_EncodePriority>
 800753e:	4602      	mov	r2, r0
 8007540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff ff80 	bl	800744c <__NVIC_SetPriority>
}
 800754c:	bf00      	nop
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800755e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ff54 	bl	8007410 <__NVIC_EnableIRQ>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e054      	b.n	800762c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7f5b      	ldrb	r3, [r3, #29]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d105      	bne.n	8007598 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fc faf8 	bl	8003b88 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	791b      	ldrb	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10c      	bne.n	80075c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a22      	ldr	r2, [pc, #136]	; (8007634 <HAL_CRC_Init+0xc4>)
 80075ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0218 	bic.w	r2, r2, #24
 80075bc:	609a      	str	r2, [r3, #8]
 80075be:	e00c      	b.n	80075da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6899      	ldr	r1, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f834 	bl	8007638 <HAL_CRCEx_Polynomial_Set>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e028      	b.n	800762c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	795b      	ldrb	r3, [r3, #5]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ea:	611a      	str	r2, [r3, #16]
 80075ec:	e004      	b.n	80075f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6912      	ldr	r2, [r2, #16]
 80075f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695a      	ldr	r2, [r3, #20]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699a      	ldr	r2, [r3, #24]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	04c11db7 	.word	0x04c11db7

08007638 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007648:	231f      	movs	r3, #31
 800764a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800764c:	bf00      	nop
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1e5a      	subs	r2, r3, #1
 8007652:	613a      	str	r2, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <HAL_CRCEx_Polynomial_Set+0x34>
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0f0      	beq.n	800764e <HAL_CRCEx_Polynomial_Set+0x16>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b18      	cmp	r3, #24
 8007670:	d846      	bhi.n	8007700 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007707 	.word	0x08007707
 800767c:	08007701 	.word	0x08007701
 8007680:	08007701 	.word	0x08007701
 8007684:	08007701 	.word	0x08007701
 8007688:	08007701 	.word	0x08007701
 800768c:	08007701 	.word	0x08007701
 8007690:	08007701 	.word	0x08007701
 8007694:	08007701 	.word	0x08007701
 8007698:	080076f5 	.word	0x080076f5
 800769c:	08007701 	.word	0x08007701
 80076a0:	08007701 	.word	0x08007701
 80076a4:	08007701 	.word	0x08007701
 80076a8:	08007701 	.word	0x08007701
 80076ac:	08007701 	.word	0x08007701
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007701 	.word	0x08007701
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	08007701 	.word	0x08007701
 80076c0:	08007701 	.word	0x08007701
 80076c4:	08007701 	.word	0x08007701
 80076c8:	08007701 	.word	0x08007701
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007701 	.word	0x08007701
 80076d4:	08007701 	.word	0x08007701
 80076d8:	080076dd 	.word	0x080076dd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b06      	cmp	r3, #6
 80076e0:	d913      	bls.n	800770a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076e6:	e010      	b.n	800770a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b07      	cmp	r3, #7
 80076ec:	d90f      	bls.n	800770e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076f2:	e00c      	b.n	800770e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	d90b      	bls.n	8007712 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076fe:	e008      	b.n	8007712 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	e006      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007706:	bf00      	nop
 8007708:	e004      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007712:	bf00      	nop
  }
  if (status == HAL_OK)
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10d      	bne.n	8007736 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f023 0118 	bic.w	r1, r3, #24
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	430a      	orrs	r2, r1
 8007734:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
}
 8007738:	4618      	mov	r0, r3
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e014      	b.n	8007780 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	791b      	ldrb	r3, [r3, #4]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fc fa2e 	bl	8003bc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	795b      	ldrb	r3, [r3, #5]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_DAC_Start_DMA+0x1e>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e0ab      	b.n	80078fe <HAL_DAC_Start_DMA+0x176>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2202      	movs	r2, #2
 80077b0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d12f      	bne.n	8007818 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	4a52      	ldr	r2, [pc, #328]	; (8007908 <HAL_DAC_Start_DMA+0x180>)
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	4a51      	ldr	r2, [pc, #324]	; (800790c <HAL_DAC_Start_DMA+0x184>)
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	4a50      	ldr	r2, [pc, #320]	; (8007910 <HAL_DAC_Start_DMA+0x188>)
 80077ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077de:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d013      	beq.n	800780e <HAL_DAC_Start_DMA+0x86>
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d845      	bhi.n	8007878 <HAL_DAC_Start_DMA+0xf0>
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_DAC_Start_DMA+0x72>
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d005      	beq.n	8007804 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80077f8:	e03e      	b.n	8007878 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	613b      	str	r3, [r7, #16]
        break;
 8007802:	e03c      	b.n	800787e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	613b      	str	r3, [r7, #16]
        break;
 800780c:	e037      	b.n	800787e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3310      	adds	r3, #16
 8007814:	613b      	str	r3, [r7, #16]
        break;
 8007816:	e032      	b.n	800787e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4a3d      	ldr	r2, [pc, #244]	; (8007914 <HAL_DAC_Start_DMA+0x18c>)
 800781e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a3c      	ldr	r2, [pc, #240]	; (8007918 <HAL_DAC_Start_DMA+0x190>)
 8007826:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	4a3b      	ldr	r2, [pc, #236]	; (800791c <HAL_DAC_Start_DMA+0x194>)
 800782e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800783e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	2b08      	cmp	r3, #8
 8007844:	d013      	beq.n	800786e <HAL_DAC_Start_DMA+0xe6>
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	2b08      	cmp	r3, #8
 800784a:	d817      	bhi.n	800787c <HAL_DAC_Start_DMA+0xf4>
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_DAC_Start_DMA+0xd2>
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	2b04      	cmp	r3, #4
 8007856:	d005      	beq.n	8007864 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007858:	e010      	b.n	800787c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3314      	adds	r3, #20
 8007860:	613b      	str	r3, [r7, #16]
        break;
 8007862:	e00c      	b.n	800787e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3318      	adds	r3, #24
 800786a:	613b      	str	r3, [r7, #16]
        break;
 800786c:	e007      	b.n	800787e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	331c      	adds	r3, #28
 8007874:	613b      	str	r3, [r7, #16]
        break;
 8007876:	e002      	b.n	800787e <HAL_DAC_Start_DMA+0xf6>
        break;
 8007878:	bf00      	nop
 800787a:	e000      	b.n	800787e <HAL_DAC_Start_DMA+0xf6>
        break;
 800787c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d111      	bne.n	80078a8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007892:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6898      	ldr	r0, [r3, #8]
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	f000 fe95 	bl	80085cc <HAL_DMA_Start_IT>
 80078a2:	4603      	mov	r3, r0
 80078a4:	75fb      	strb	r3, [r7, #23]
 80078a6:	e010      	b.n	80078ca <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80078b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68d8      	ldr	r0, [r3, #12]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	f000 fe83 	bl	80085cc <HAL_DMA_Start_IT>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10c      	bne.n	80078f0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6819      	ldr	r1, [r3, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f003 0310 	and.w	r3, r3, #16
 80078e2:	2201      	movs	r2, #1
 80078e4:	409a      	lsls	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e005      	b.n	80078fc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f043 0204 	orr.w	r2, r3, #4
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	08007bf3 	.word	0x08007bf3
 800790c:	08007c15 	.word	0x08007c15
 8007910:	08007c31 	.word	0x08007c31
 8007914:	08007c9b 	.word	0x08007c9b
 8007918:	08007cbd 	.word	0x08007cbd
 800791c:	08007cd9 	.word	0x08007cd9

08007920 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800793a:	fa02 f303 	lsl.w	r3, r2, r3
 800793e:	43da      	mvns	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	400a      	ands	r2, r1
 8007946:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6819      	ldr	r1, [r3, #0]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	f003 0310 	and.w	r3, r3, #16
 8007954:	2201      	movs	r2, #1
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	43da      	mvns	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	400a      	ands	r2, r1
 8007962:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10d      	bne.n	8007986 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fe8c 	bl	800868c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e00c      	b.n	80079a0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fe7e 	bl	800868c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800799e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b088      	sub	sp, #32
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	795b      	ldrb	r3, [r3, #5]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d101      	bne.n	80079da <HAL_DAC_ConfigChannel+0x1c>
 80079d6:	2302      	movs	r3, #2
 80079d8:	e107      	b.n	8007bea <HAL_DAC_ConfigChannel+0x22c>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2202      	movs	r2, #2
 80079e4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d174      	bne.n	8007ad8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80079ee:	f7ff fcad 	bl	800734c <HAL_GetTick>
 80079f2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d134      	bne.n	8007a64 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80079fa:	e011      	b.n	8007a20 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80079fc:	f7ff fca6 	bl	800734c <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d90a      	bls.n	8007a20 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f043 0208 	orr.w	r2, r3, #8
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e0e4      	b.n	8007bea <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e6      	bne.n	80079fc <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8007a2e:	2001      	movs	r0, #1
 8007a30:	f7ff fc98 	bl	8007364 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	6992      	ldr	r2, [r2, #24]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8007a3e:	e01e      	b.n	8007a7e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007a40:	f7ff fc84 	bl	800734c <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d90a      	bls.n	8007a64 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f043 0208 	orr.w	r2, r3, #8
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e0c2      	b.n	8007bea <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	dbe8      	blt.n	8007a40 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8007a6e:	2001      	movs	r0, #1
 8007a70:	f7ff fc78 	bl	8007364 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	6992      	ldr	r2, [r2, #24]
 8007a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	43db      	mvns	r3, r3
 8007a94:	ea02 0103 	and.w	r1, r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	409a      	lsls	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	21ff      	movs	r1, #255	; 0xff
 8007aba:	fa01 f303 	lsl.w	r3, r1, r3
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	ea02 0103 	and.w	r1, r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d11d      	bne.n	8007b1c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f003 0310 	and.w	r3, r3, #16
 8007aee:	221f      	movs	r2, #31
 8007af0:	fa02 f303 	lsl.w	r3, r2, r3
 8007af4:	43db      	mvns	r3, r3
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	4013      	ands	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f003 0310 	and.w	r3, r3, #16
 8007b2a:	2207      	movs	r2, #7
 8007b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b30:	43db      	mvns	r3, r3
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4013      	ands	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6819      	ldr	r1, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	43da      	mvns	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	400a      	ands	r2, r1
 8007b80:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	f640 72fc 	movw	r2, #4092	; 0xffc
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6819      	ldr	r1, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	22c0      	movs	r2, #192	; 0xc0
 8007bce:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd2:	43da      	mvns	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	400a      	ands	r2, r1
 8007bda:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3720      	adds	r7, #32
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f7fb fa77 	bl	80030f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	711a      	strb	r2, [r3, #4]
}
 8007c0c:	bf00      	nop
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7fb fa2c 	bl	8003080 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f043 0204 	orr.w	r2, r3, #4
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fead 	bl	80079aa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2201      	movs	r2, #1
 8007c54:	711a      	strb	r2, [r3, #4]
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff ffd8 	bl	8007c5e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	711a      	strb	r2, [r3, #4]
}
 8007cb4:	bf00      	nop
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff ffd1 	bl	8007c72 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f043 0204 	orr.w	r2, r3, #4
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff ffc7 	bl	8007c86 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	711a      	strb	r2, [r3, #4]
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e0ac      	b.n	8007e74 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 faac 	bl	800827c <DFSDM_GetChannelFromInstance>
 8007d24:	4603      	mov	r3, r0
 8007d26:	4a55      	ldr	r2, [pc, #340]	; (8007e7c <HAL_DFSDM_ChannelInit+0x174>)
 8007d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e09f      	b.n	8007e74 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fc f861 	bl	8003dfc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8007d3a:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <HAL_DFSDM_ChannelInit+0x178>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	4a4f      	ldr	r2, [pc, #316]	; (8007e80 <HAL_DFSDM_ChannelInit+0x178>)
 8007d42:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8007d44:	4b4e      	ldr	r3, [pc, #312]	; (8007e80 <HAL_DFSDM_ChannelInit+0x178>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d125      	bne.n	8007d98 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007d4c:	4b4d      	ldr	r3, [pc, #308]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a4c      	ldr	r2, [pc, #304]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d56:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007d58:	4b4a      	ldr	r3, [pc, #296]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	4948      	ldr	r1, [pc, #288]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007d66:	4b47      	ldr	r3, [pc, #284]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a46      	ldr	r2, [pc, #280]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d6c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8007d70:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	791b      	ldrb	r3, [r3, #4]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d108      	bne.n	8007d8c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8007d7a:	4b42      	ldr	r3, [pc, #264]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	041b      	lsls	r3, r3, #16
 8007d86:	493f      	ldr	r1, [pc, #252]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007d8c:	4b3d      	ldr	r3, [pc, #244]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a3c      	ldr	r2, [pc, #240]	; (8007e84 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d96:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007da6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6819      	ldr	r1, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007db6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007dbc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 020f 	bic.w	r2, r2, #15
 8007dd4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6819      	ldr	r1, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007dfc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6899      	ldr	r1, [r3, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f002 0207 	and.w	r2, r2, #7
 8007e28:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6859      	ldr	r1, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e54:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fa0a 	bl	800827c <DFSDM_GetChannelFromInstance>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	4904      	ldr	r1, [pc, #16]	; (8007e7c <HAL_DFSDM_ChannelInit+0x174>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20000388 	.word	0x20000388
 8007e80:	20000384 	.word	0x20000384
 8007e84:	40016000 	.word	0x40016000

08007e88 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e0ca      	b.n	8008030 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a66      	ldr	r2, [pc, #408]	; (8008038 <HAL_DFSDM_FilterInit+0x1b0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d109      	bne.n	8007eb8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d003      	beq.n	8007eb4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e0bb      	b.n	8008030 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7fb fee7 	bl	8003ca4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8007ee4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7a1b      	ldrb	r3, [r3, #8]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d108      	bne.n	8007f00 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	e007      	b.n	8007f10 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007f0e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	7a5b      	ldrb	r3, [r3, #9]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d108      	bne.n	8007f2a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e007      	b.n	8007f3a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007f38:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8007f48:	f023 0308 	bic.w	r3, r3, #8
 8007f4c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d108      	bne.n	8007f68 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6819      	ldr	r1, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	695a      	ldr	r2, [r3, #20]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	7c1b      	ldrb	r3, [r3, #16]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d108      	bne.n	8007f82 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0210 	orr.w	r2, r2, #16
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e007      	b.n	8007f92 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0210 	bic.w	r2, r2, #16
 8007f90:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	7c5b      	ldrb	r3, [r3, #17]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d108      	bne.n	8007fac <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0220 	orr.w	r2, r2, #32
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e007      	b.n	8007fbc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0220 	bic.w	r2, r2, #32
 8007fba:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8007fca:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8007fce:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6959      	ldr	r1, [r3, #20]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007fe2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8007fea:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7c1a      	ldrb	r2, [r3, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40016100 	.word	0x40016100

0800803c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d02e      	beq.n	80080b4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800805c:	2bff      	cmp	r3, #255	; 0xff
 800805e:	d029      	beq.n	80080b4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	6812      	ldr	r2, [r2, #0]
 800806a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800806e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008072:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d10d      	bne.n	8008096 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008088:	431a      	orrs	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e00a      	b.n	80080ac <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6819      	ldr	r1, [r3, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30
 80080b2:	e001      	b.n	80080b8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
 80080e8:	e064      	b.n	80081b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080f8:	d002      	beq.n	8008100 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
 80080fe:	e059      	b.n	80081b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10e      	bne.n	8008126 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d002      	beq.n	8008126 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
 8008124:	e046      	b.n	80081b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8008132:	2b00      	cmp	r3, #0
 8008134:	d107      	bne.n	8008146 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800813c:	2b20      	cmp	r3, #32
 800813e:	d102      	bne.n	8008146 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	75fb      	strb	r3, [r7, #23]
 8008144:	e036      	b.n	80081b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800814c:	2b01      	cmp	r3, #1
 800814e:	d004      	beq.n	800815a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8008156:	2b03      	cmp	r3, #3
 8008158:	d12a      	bne.n	80081b0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	4a18      	ldr	r2, [pc, #96]	; (80081c0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8008160:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	4a17      	ldr	r2, [pc, #92]	; (80081c4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8008168:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8008170:	2b20      	cmp	r3, #32
 8008172:	d101      	bne.n	8008178 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8008174:	4a14      	ldr	r2, [pc, #80]	; (80081c8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8008176:	e000      	b.n	800817a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8008178:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	331c      	adds	r3, #28
 800818a:	4619      	mov	r1, r3
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f000 fa1c 	bl	80085cc <HAL_DMA_Start_IT>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d006      	beq.n	80081a8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	22ff      	movs	r2, #255	; 0xff
 800819e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80081a6:	e005      	b.n	80081b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f8b3 	bl	8008314 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80081ae:	e001      	b.n	80081b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	0800823d 	.word	0x0800823d
 80081c4:	08008259 	.word	0x08008259
 80081c8:	08008221 	.word	0x08008221

080081cc <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d007      	beq.n	80081f2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d002      	beq.n	80081f2 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
 80081f0:	e007      	b.n	8008202 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fa48 	bl	800868c <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8df 	bl	80083c0 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7fa ff9c 	bl	800316c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7fa ffbe 	bl	80031cc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2203      	movs	r2, #3
 800826a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff ffcd 	bl	800820c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1c      	ldr	r2, [pc, #112]	; (80082f8 <DFSDM_GetChannelFromInstance+0x7c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d102      	bne.n	8008292 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e02b      	b.n	80082ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a19      	ldr	r2, [pc, #100]	; (80082fc <DFSDM_GetChannelFromInstance+0x80>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d102      	bne.n	80082a0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800829a:	2301      	movs	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e024      	b.n	80082ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a17      	ldr	r2, [pc, #92]	; (8008300 <DFSDM_GetChannelFromInstance+0x84>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d102      	bne.n	80082ae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80082a8:	2302      	movs	r3, #2
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e01d      	b.n	80082ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a14      	ldr	r2, [pc, #80]	; (8008304 <DFSDM_GetChannelFromInstance+0x88>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d102      	bne.n	80082bc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80082b6:	2304      	movs	r3, #4
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	e016      	b.n	80082ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a12      	ldr	r2, [pc, #72]	; (8008308 <DFSDM_GetChannelFromInstance+0x8c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d102      	bne.n	80082ca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80082c4:	2305      	movs	r3, #5
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	e00f      	b.n	80082ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a0f      	ldr	r2, [pc, #60]	; (800830c <DFSDM_GetChannelFromInstance+0x90>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d102      	bne.n	80082d8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80082d2:	2306      	movs	r3, #6
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e008      	b.n	80082ea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a0d      	ldr	r2, [pc, #52]	; (8008310 <DFSDM_GetChannelFromInstance+0x94>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d102      	bne.n	80082e6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80082e0:	2307      	movs	r3, #7
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e001      	b.n	80082ea <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80082e6:	2303      	movs	r3, #3
 80082e8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80082ea:	68fb      	ldr	r3, [r7, #12]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	40016000 	.word	0x40016000
 80082fc:	40016020 	.word	0x40016020
 8008300:	40016040 	.word	0x40016040
 8008304:	40016080 	.word	0x40016080
 8008308:	400160a0 	.word	0x400160a0
 800830c:	400160c0 	.word	0x400160c0
 8008310:	400160e0 	.word	0x400160e0

08008314 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d108      	bne.n	8008336 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e033      	b.n	800839e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0201 	bic.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008354:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0201 	orr.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800836c:	2b03      	cmp	r3, #3
 800836e:	d116      	bne.n	800839e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	2b00      	cmp	r3, #0
 8008376:	d107      	bne.n	8008388 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0202 	orr.w	r2, r2, #2
 8008386:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800838e:	2b01      	cmp	r3, #1
 8008390:	d102      	bne.n	8008398 <DFSDM_RegConvStart+0x84>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	e000      	b.n	800839a <DFSDM_RegConvStart+0x86>
 8008398:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <DFSDM_RegConvStart+0x98>
 80083a8:	2202      	movs	r2, #2
 80083aa:	e000      	b.n	80083ae <DFSDM_RegConvStart+0x9a>
 80083ac:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d107      	bne.n	80083f0 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80083ee:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008406:	2b04      	cmp	r3, #4
 8008408:	d116      	bne.n	8008438 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0202 	orr.w	r2, r2, #2
 8008420:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8008428:	2b01      	cmp	r3, #1
 800842a:	d102      	bne.n	8008432 <DFSDM_RegConvStop+0x72>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	e000      	b.n	8008434 <DFSDM_RegConvStop+0x74>
 8008432:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800843e:	2b02      	cmp	r3, #2
 8008440:	d101      	bne.n	8008446 <DFSDM_RegConvStop+0x86>
 8008442:	2201      	movs	r2, #1
 8008444:	e000      	b.n	8008448 <DFSDM_RegConvStop+0x88>
 8008446:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
	...

0800845c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e098      	b.n	80085a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	4b4d      	ldr	r3, [pc, #308]	; (80085ac <HAL_DMA_Init+0x150>)
 8008476:	429a      	cmp	r2, r3
 8008478:	d80f      	bhi.n	800849a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	4b4b      	ldr	r3, [pc, #300]	; (80085b0 <HAL_DMA_Init+0x154>)
 8008482:	4413      	add	r3, r2
 8008484:	4a4b      	ldr	r2, [pc, #300]	; (80085b4 <HAL_DMA_Init+0x158>)
 8008486:	fba2 2303 	umull	r2, r3, r2, r3
 800848a:	091b      	lsrs	r3, r3, #4
 800848c:	009a      	lsls	r2, r3, #2
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a48      	ldr	r2, [pc, #288]	; (80085b8 <HAL_DMA_Init+0x15c>)
 8008496:	641a      	str	r2, [r3, #64]	; 0x40
 8008498:	e00e      	b.n	80084b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	4b46      	ldr	r3, [pc, #280]	; (80085bc <HAL_DMA_Init+0x160>)
 80084a2:	4413      	add	r3, r2
 80084a4:	4a43      	ldr	r2, [pc, #268]	; (80085b4 <HAL_DMA_Init+0x158>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	091b      	lsrs	r3, r3, #4
 80084ac:	009a      	lsls	r2, r3, #2
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a42      	ldr	r2, [pc, #264]	; (80085c0 <HAL_DMA_Init+0x164>)
 80084b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80084dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008512:	d039      	beq.n	8008588 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	4a27      	ldr	r2, [pc, #156]	; (80085b8 <HAL_DMA_Init+0x15c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d11a      	bne.n	8008554 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800851e:	4b29      	ldr	r3, [pc, #164]	; (80085c4 <HAL_DMA_Init+0x168>)
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	f003 031c 	and.w	r3, r3, #28
 800852a:	210f      	movs	r1, #15
 800852c:	fa01 f303 	lsl.w	r3, r1, r3
 8008530:	43db      	mvns	r3, r3
 8008532:	4924      	ldr	r1, [pc, #144]	; (80085c4 <HAL_DMA_Init+0x168>)
 8008534:	4013      	ands	r3, r2
 8008536:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008538:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <HAL_DMA_Init+0x168>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6859      	ldr	r1, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008544:	f003 031c 	and.w	r3, r3, #28
 8008548:	fa01 f303 	lsl.w	r3, r1, r3
 800854c:	491d      	ldr	r1, [pc, #116]	; (80085c4 <HAL_DMA_Init+0x168>)
 800854e:	4313      	orrs	r3, r2
 8008550:	600b      	str	r3, [r1, #0]
 8008552:	e019      	b.n	8008588 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008554:	4b1c      	ldr	r3, [pc, #112]	; (80085c8 <HAL_DMA_Init+0x16c>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855c:	f003 031c 	and.w	r3, r3, #28
 8008560:	210f      	movs	r1, #15
 8008562:	fa01 f303 	lsl.w	r3, r1, r3
 8008566:	43db      	mvns	r3, r3
 8008568:	4917      	ldr	r1, [pc, #92]	; (80085c8 <HAL_DMA_Init+0x16c>)
 800856a:	4013      	ands	r3, r2
 800856c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800856e:	4b16      	ldr	r3, [pc, #88]	; (80085c8 <HAL_DMA_Init+0x16c>)
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6859      	ldr	r1, [r3, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857a:	f003 031c 	and.w	r3, r3, #28
 800857e:	fa01 f303 	lsl.w	r3, r1, r3
 8008582:	4911      	ldr	r1, [pc, #68]	; (80085c8 <HAL_DMA_Init+0x16c>)
 8008584:	4313      	orrs	r3, r2
 8008586:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	40020407 	.word	0x40020407
 80085b0:	bffdfff8 	.word	0xbffdfff8
 80085b4:	cccccccd 	.word	0xcccccccd
 80085b8:	40020000 	.word	0x40020000
 80085bc:	bffdfbf8 	.word	0xbffdfbf8
 80085c0:	40020400 	.word	0x40020400
 80085c4:	400200a8 	.word	0x400200a8
 80085c8:	400204a8 	.word	0x400204a8

080085cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_DMA_Start_IT+0x20>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e04b      	b.n	8008684 <HAL_DMA_Start_IT+0xb8>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d13a      	bne.n	8008676 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0201 	bic.w	r2, r2, #1
 800861c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f91e 	bl	8008866 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	2b00      	cmp	r3, #0
 8008630:	d008      	beq.n	8008644 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 020e 	orr.w	r2, r2, #14
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	e00f      	b.n	8008664 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0204 	bic.w	r2, r2, #4
 8008652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 020a 	orr.w	r2, r2, #10
 8008662:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e005      	b.n	8008682 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800867e:	2302      	movs	r3, #2
 8008680:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d008      	beq.n	80086b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2204      	movs	r2, #4
 80086a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e022      	b.n	80086fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 020e 	bic.w	r2, r2, #14
 80086c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0201 	bic.w	r2, r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086da:	f003 021c 	and.w	r2, r3, #28
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	2101      	movs	r1, #1
 80086e4:	fa01 f202 	lsl.w	r2, r1, r2
 80086e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008724:	f003 031c 	and.w	r3, r3, #28
 8008728:	2204      	movs	r2, #4
 800872a:	409a      	lsls	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4013      	ands	r3, r2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d026      	beq.n	8008782 <HAL_DMA_IRQHandler+0x7a>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d021      	beq.n	8008782 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d107      	bne.n	800875c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0204 	bic.w	r2, r2, #4
 800875a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008760:	f003 021c 	and.w	r2, r3, #28
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	2104      	movs	r1, #4
 800876a:	fa01 f202 	lsl.w	r2, r1, r2
 800876e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	2b00      	cmp	r3, #0
 8008776:	d071      	beq.n	800885c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8008780:	e06c      	b.n	800885c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008786:	f003 031c 	and.w	r3, r3, #28
 800878a:	2202      	movs	r2, #2
 800878c:	409a      	lsls	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4013      	ands	r3, r2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d02e      	beq.n	80087f4 <HAL_DMA_IRQHandler+0xec>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d029      	beq.n	80087f4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 020a 	bic.w	r2, r2, #10
 80087bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ca:	f003 021c 	and.w	r2, r3, #28
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	2102      	movs	r1, #2
 80087d4:	fa01 f202 	lsl.w	r2, r1, r2
 80087d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d038      	beq.n	800885c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80087f2:	e033      	b.n	800885c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f8:	f003 031c 	and.w	r3, r3, #28
 80087fc:	2208      	movs	r2, #8
 80087fe:	409a      	lsls	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4013      	ands	r3, r2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d02a      	beq.n	800885e <HAL_DMA_IRQHandler+0x156>
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d025      	beq.n	800885e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 020e 	bic.w	r2, r2, #14
 8008820:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008826:	f003 021c 	and.w	r2, r3, #28
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	2101      	movs	r1, #1
 8008830:	fa01 f202 	lsl.w	r2, r1, r2
 8008834:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800885c:	bf00      	nop
 800885e:	bf00      	nop
}
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008878:	f003 021c 	and.w	r2, r3, #28
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	2101      	movs	r1, #1
 8008882:	fa01 f202 	lsl.w	r2, r1, r2
 8008886:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	2b10      	cmp	r3, #16
 8008896:	d108      	bne.n	80088aa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80088a8:	e007      	b.n	80088ba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	60da      	str	r2, [r3, #12]
}
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
	...

080088c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088d6:	e17f      	b.n	8008bd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	2101      	movs	r1, #1
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	fa01 f303 	lsl.w	r3, r1, r3
 80088e4:	4013      	ands	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 8171 	beq.w	8008bd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d005      	beq.n	8008908 <HAL_GPIO_Init+0x40>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f003 0303 	and.w	r3, r3, #3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d130      	bne.n	800896a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	2203      	movs	r2, #3
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	43db      	mvns	r3, r3
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4013      	ands	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	fa02 f303 	lsl.w	r3, r2, r3
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800893e:	2201      	movs	r2, #1
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	43db      	mvns	r3, r3
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4013      	ands	r3, r2
 800894c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	091b      	lsrs	r3, r3, #4
 8008954:	f003 0201 	and.w	r2, r3, #1
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d118      	bne.n	80089a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800897c:	2201      	movs	r2, #1
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	43db      	mvns	r3, r3
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	4013      	ands	r3, r2
 800898a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	08db      	lsrs	r3, r3, #3
 8008992:	f003 0201 	and.w	r2, r3, #1
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d017      	beq.n	80089e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	2203      	movs	r2, #3
 80089c0:	fa02 f303 	lsl.w	r3, r2, r3
 80089c4:	43db      	mvns	r3, r3
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	4013      	ands	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d123      	bne.n	8008a38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	08da      	lsrs	r2, r3, #3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3208      	adds	r2, #8
 80089f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	220f      	movs	r2, #15
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4013      	ands	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	08da      	lsrs	r2, r3, #3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3208      	adds	r2, #8
 8008a32:	6939      	ldr	r1, [r7, #16]
 8008a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	2203      	movs	r2, #3
 8008a44:	fa02 f303 	lsl.w	r3, r2, r3
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f003 0203 	and.w	r2, r3, #3
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80ac 	beq.w	8008bd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a7a:	4b5f      	ldr	r3, [pc, #380]	; (8008bf8 <HAL_GPIO_Init+0x330>)
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7e:	4a5e      	ldr	r2, [pc, #376]	; (8008bf8 <HAL_GPIO_Init+0x330>)
 8008a80:	f043 0301 	orr.w	r3, r3, #1
 8008a84:	6613      	str	r3, [r2, #96]	; 0x60
 8008a86:	4b5c      	ldr	r3, [pc, #368]	; (8008bf8 <HAL_GPIO_Init+0x330>)
 8008a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	60bb      	str	r3, [r7, #8]
 8008a90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008a92:	4a5a      	ldr	r2, [pc, #360]	; (8008bfc <HAL_GPIO_Init+0x334>)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	089b      	lsrs	r3, r3, #2
 8008a98:	3302      	adds	r3, #2
 8008a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	220f      	movs	r2, #15
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	43db      	mvns	r3, r3
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008abc:	d025      	beq.n	8008b0a <HAL_GPIO_Init+0x242>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a4f      	ldr	r2, [pc, #316]	; (8008c00 <HAL_GPIO_Init+0x338>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d01f      	beq.n	8008b06 <HAL_GPIO_Init+0x23e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a4e      	ldr	r2, [pc, #312]	; (8008c04 <HAL_GPIO_Init+0x33c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d019      	beq.n	8008b02 <HAL_GPIO_Init+0x23a>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a4d      	ldr	r2, [pc, #308]	; (8008c08 <HAL_GPIO_Init+0x340>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d013      	beq.n	8008afe <HAL_GPIO_Init+0x236>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a4c      	ldr	r2, [pc, #304]	; (8008c0c <HAL_GPIO_Init+0x344>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d00d      	beq.n	8008afa <HAL_GPIO_Init+0x232>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a4b      	ldr	r2, [pc, #300]	; (8008c10 <HAL_GPIO_Init+0x348>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d007      	beq.n	8008af6 <HAL_GPIO_Init+0x22e>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a4a      	ldr	r2, [pc, #296]	; (8008c14 <HAL_GPIO_Init+0x34c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d101      	bne.n	8008af2 <HAL_GPIO_Init+0x22a>
 8008aee:	2306      	movs	r3, #6
 8008af0:	e00c      	b.n	8008b0c <HAL_GPIO_Init+0x244>
 8008af2:	2307      	movs	r3, #7
 8008af4:	e00a      	b.n	8008b0c <HAL_GPIO_Init+0x244>
 8008af6:	2305      	movs	r3, #5
 8008af8:	e008      	b.n	8008b0c <HAL_GPIO_Init+0x244>
 8008afa:	2304      	movs	r3, #4
 8008afc:	e006      	b.n	8008b0c <HAL_GPIO_Init+0x244>
 8008afe:	2303      	movs	r3, #3
 8008b00:	e004      	b.n	8008b0c <HAL_GPIO_Init+0x244>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e002      	b.n	8008b0c <HAL_GPIO_Init+0x244>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <HAL_GPIO_Init+0x244>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	f002 0203 	and.w	r2, r2, #3
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	4093      	lsls	r3, r2
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008b1c:	4937      	ldr	r1, [pc, #220]	; (8008bfc <HAL_GPIO_Init+0x334>)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	3302      	adds	r3, #2
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b2a:	4b3b      	ldr	r3, [pc, #236]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	43db      	mvns	r3, r3
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4013      	ands	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008b4e:	4a32      	ldr	r2, [pc, #200]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008b54:	4b30      	ldr	r3, [pc, #192]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	43db      	mvns	r3, r3
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	4013      	ands	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008b78:	4a27      	ldr	r2, [pc, #156]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008b7e:	4b26      	ldr	r3, [pc, #152]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	43db      	mvns	r3, r3
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ba2:	4a1d      	ldr	r2, [pc, #116]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008ba8:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008bcc:	4a12      	ldr	r2, [pc, #72]	; (8008c18 <HAL_GPIO_Init+0x350>)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	fa22 f303 	lsr.w	r3, r2, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f47f ae78 	bne.w	80088d8 <HAL_GPIO_Init+0x10>
  }
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40021000 	.word	0x40021000
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	48000400 	.word	0x48000400
 8008c04:	48000800 	.word	0x48000800
 8008c08:	48000c00 	.word	0x48000c00
 8008c0c:	48001000 	.word	0x48001000
 8008c10:	48001400 	.word	0x48001400
 8008c14:	48001800 	.word	0x48001800
 8008c18:	40010400 	.word	0x40010400

08008c1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008c2a:	e0cd      	b.n	8008dc8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	4013      	ands	r3, r2
 8008c38:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 80c0 	beq.w	8008dc2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008c42:	4a68      	ldr	r2, [pc, #416]	; (8008de4 <HAL_GPIO_DeInit+0x1c8>)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	3302      	adds	r3, #2
 8008c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	220f      	movs	r2, #15
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4013      	ands	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008c6a:	d025      	beq.n	8008cb8 <HAL_GPIO_DeInit+0x9c>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a5e      	ldr	r2, [pc, #376]	; (8008de8 <HAL_GPIO_DeInit+0x1cc>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d01f      	beq.n	8008cb4 <HAL_GPIO_DeInit+0x98>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a5d      	ldr	r2, [pc, #372]	; (8008dec <HAL_GPIO_DeInit+0x1d0>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d019      	beq.n	8008cb0 <HAL_GPIO_DeInit+0x94>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a5c      	ldr	r2, [pc, #368]	; (8008df0 <HAL_GPIO_DeInit+0x1d4>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d013      	beq.n	8008cac <HAL_GPIO_DeInit+0x90>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a5b      	ldr	r2, [pc, #364]	; (8008df4 <HAL_GPIO_DeInit+0x1d8>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00d      	beq.n	8008ca8 <HAL_GPIO_DeInit+0x8c>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a5a      	ldr	r2, [pc, #360]	; (8008df8 <HAL_GPIO_DeInit+0x1dc>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d007      	beq.n	8008ca4 <HAL_GPIO_DeInit+0x88>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a59      	ldr	r2, [pc, #356]	; (8008dfc <HAL_GPIO_DeInit+0x1e0>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d101      	bne.n	8008ca0 <HAL_GPIO_DeInit+0x84>
 8008c9c:	2306      	movs	r3, #6
 8008c9e:	e00c      	b.n	8008cba <HAL_GPIO_DeInit+0x9e>
 8008ca0:	2307      	movs	r3, #7
 8008ca2:	e00a      	b.n	8008cba <HAL_GPIO_DeInit+0x9e>
 8008ca4:	2305      	movs	r3, #5
 8008ca6:	e008      	b.n	8008cba <HAL_GPIO_DeInit+0x9e>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	e006      	b.n	8008cba <HAL_GPIO_DeInit+0x9e>
 8008cac:	2303      	movs	r3, #3
 8008cae:	e004      	b.n	8008cba <HAL_GPIO_DeInit+0x9e>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e002      	b.n	8008cba <HAL_GPIO_DeInit+0x9e>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e000      	b.n	8008cba <HAL_GPIO_DeInit+0x9e>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	f002 0203 	and.w	r2, r2, #3
 8008cc0:	0092      	lsls	r2, r2, #2
 8008cc2:	4093      	lsls	r3, r2
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d132      	bne.n	8008d30 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008cca:	4b4d      	ldr	r3, [pc, #308]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	494b      	ldr	r1, [pc, #300]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008cd8:	4b49      	ldr	r3, [pc, #292]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	4947      	ldr	r1, [pc, #284]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008ce6:	4b46      	ldr	r3, [pc, #280]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	43db      	mvns	r3, r3
 8008cee:	4944      	ldr	r1, [pc, #272]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008cf4:	4b42      	ldr	r3, [pc, #264]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	4940      	ldr	r1, [pc, #256]	; (8008e00 <HAL_GPIO_DeInit+0x1e4>)
 8008cfe:	4013      	ands	r3, r2
 8008d00:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	220f      	movs	r2, #15
 8008d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d10:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008d12:	4a34      	ldr	r2, [pc, #208]	; (8008de4 <HAL_GPIO_DeInit+0x1c8>)
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	089b      	lsrs	r3, r3, #2
 8008d18:	3302      	adds	r3, #2
 8008d1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	43da      	mvns	r2, r3
 8008d22:	4830      	ldr	r0, [pc, #192]	; (8008de4 <HAL_GPIO_DeInit+0x1c8>)
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	089b      	lsrs	r3, r3, #2
 8008d28:	400a      	ands	r2, r1
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	2103      	movs	r1, #3
 8008d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	08da      	lsrs	r2, r3, #3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3208      	adds	r2, #8
 8008d4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	220f      	movs	r2, #15
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	43db      	mvns	r3, r3
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	08d2      	lsrs	r2, r2, #3
 8008d64:	4019      	ands	r1, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3208      	adds	r2, #8
 8008d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	2103      	movs	r1, #3
 8008d78:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	401a      	ands	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	2101      	movs	r1, #1
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d90:	43db      	mvns	r3, r3
 8008d92:	401a      	ands	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	2103      	movs	r1, #3
 8008da2:	fa01 f303 	lsl.w	r3, r1, r3
 8008da6:	43db      	mvns	r3, r3
 8008da8:	401a      	ands	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db2:	2101      	movs	r1, #1
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	401a      	ands	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f47f af2b 	bne.w	8008c2c <HAL_GPIO_DeInit+0x10>
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	371c      	adds	r7, #28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	40010000 	.word	0x40010000
 8008de8:	48000400 	.word	0x48000400
 8008dec:	48000800 	.word	0x48000800
 8008df0:	48000c00 	.word	0x48000c00
 8008df4:	48001000 	.word	0x48001000
 8008df8:	48001400 	.word	0x48001400
 8008dfc:	48001800 	.word	0x48001800
 8008e00:	40010400 	.word	0x40010400

08008e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]
 8008e10:	4613      	mov	r3, r2
 8008e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e14:	787b      	ldrb	r3, [r7, #1]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e1a:	887a      	ldrh	r2, [r7, #2]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e20:	e002      	b.n	8008e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e22:	887a      	ldrh	r2, [r7, #2]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008e3e:	4b08      	ldr	r3, [pc, #32]	; (8008e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e40:	695a      	ldr	r2, [r3, #20]
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	4013      	ands	r3, r2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e4a:	4a05      	ldr	r2, [pc, #20]	; (8008e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e4c:	88fb      	ldrh	r3, [r7, #6]
 8008e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fa f8e0 	bl	8003018 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	40010400 	.word	0x40010400

08008e64 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10c      	bne.n	8008e90 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8008e76:	4b13      	ldr	r3, [pc, #76]	; (8008ec4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e82:	d10e      	bne.n	8008ea2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008e84:	f000 f896 	bl	8008fb4 <HAL_PWREx_DisableLowPowerRunMode>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8008e8e:	e016      	b.n	8008ebe <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8008e90:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9c:	d001      	beq.n	8008ea2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008e9e:	f000 f879 	bl	8008f94 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	4a08      	ldr	r2, [pc, #32]	; (8008ec8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008ea8:	f023 0304 	bic.w	r3, r3, #4
 8008eac:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008eb4:	bf30      	wfi
 8008eb6:	e002      	b.n	8008ebe <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008eb8:	bf40      	sev
    __WFE();
 8008eba:	bf20      	wfe
    __WFE();
 8008ebc:	bf20      	wfe
  }

}
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40007000 	.word	0x40007000
 8008ec8:	e000ed00 	.word	0xe000ed00

08008ecc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008ed0:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40007000 	.word	0x40007000

08008ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef6:	d130      	bne.n	8008f5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ef8:	4b23      	ldr	r3, [pc, #140]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f04:	d038      	beq.n	8008f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f06:	4b20      	ldr	r3, [pc, #128]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f16:	4b1d      	ldr	r3, [pc, #116]	; (8008f8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2232      	movs	r2, #50	; 0x32
 8008f1c:	fb02 f303 	mul.w	r3, r2, r3
 8008f20:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	0c9b      	lsrs	r3, r3, #18
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f2c:	e002      	b.n	8008f34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f34:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f40:	d102      	bne.n	8008f48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1f2      	bne.n	8008f2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f54:	d110      	bne.n	8008f78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e00f      	b.n	8008f7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f66:	d007      	beq.n	8008f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f68:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f70:	4a05      	ldr	r2, [pc, #20]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40007000 	.word	0x40007000
 8008f8c:	20000008 	.word	0x20000008
 8008f90:	431bde83 	.word	0x431bde83

08008f94 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a04      	ldr	r2, [pc, #16]	; (8008fb0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8008f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fa2:	6013      	str	r3, [r2, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	40007000 	.word	0x40007000

08008fb4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8008fba:	4b17      	ldr	r3, [pc, #92]	; (8009018 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a16      	ldr	r2, [pc, #88]	; (8009018 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fc4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008fc6:	4b15      	ldr	r3, [pc, #84]	; (800901c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2232      	movs	r2, #50	; 0x32
 8008fcc:	fb02 f303 	mul.w	r3, r2, r3
 8008fd0:	4a13      	ldr	r2, [pc, #76]	; (8009020 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8008fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd6:	0c9b      	lsrs	r3, r3, #18
 8008fd8:	3301      	adds	r3, #1
 8008fda:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008fdc:	e002      	b.n	8008fe4 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ff0:	d102      	bne.n	8008ff8 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f2      	bne.n	8008fde <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009004:	d101      	bne.n	800900a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e000      	b.n	800900c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	40007000 	.word	0x40007000
 800901c:	20000008 	.word	0x20000008
 8009020:	431bde83 	.word	0x431bde83

08009024 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af02      	add	r7, sp, #8
 800902a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800902c:	f7fe f98e 	bl	800734c <HAL_GetTick>
 8009030:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e063      	b.n	8009104 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7fa ff43 	bl	8003edc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009056:	f241 3188 	movw	r1, #5000	; 0x1388
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 faf7 	bl	800964e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	3b01      	subs	r3, #1
 8009070:	021a      	lsls	r2, r3, #8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	2120      	movs	r1, #32
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 faef 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 800908c:	4603      	mov	r3, r0
 800908e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d131      	bne.n	80090fa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090a0:	f023 0310 	bic.w	r3, r3, #16
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6852      	ldr	r2, [r2, #4]
 80090a8:	0611      	lsls	r1, r2, #24
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68d2      	ldr	r2, [r2, #12]
 80090ae:	4311      	orrs	r1, r2
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	430b      	orrs	r3, r1
 80090b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <HAL_QSPI_Init+0xe8>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6912      	ldr	r2, [r2, #16]
 80090c6:	0411      	lsls	r1, r2, #16
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6952      	ldr	r2, [r2, #20]
 80090cc:	4311      	orrs	r1, r2
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6992      	ldr	r2, [r2, #24]
 80090d2:	4311      	orrs	r1, r2
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6812      	ldr	r2, [r2, #0]
 80090d8:	430b      	orrs	r3, r1
 80090da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0201 	orr.w	r2, r2, #1
 80090ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8009102:	7afb      	ldrb	r3, [r7, #11]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	ffe0f8fe 	.word	0xffe0f8fe

08009110 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e016      	b.n	8009150 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0201 	bic.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fa ff16 	bl	8003f64 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af02      	add	r7, sp, #8
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009164:	f7fe f8f2 	bl	800734c <HAL_GetTick>
 8009168:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <HAL_QSPI_Command+0x22>
 8009176:	2302      	movs	r3, #2
 8009178:	e048      	b.n	800920c <HAL_QSPI_Command+0xb4>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b01      	cmp	r3, #1
 800918c:	d137      	bne.n	80091fe <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2200      	movs	r2, #0
 80091a4:	2120      	movs	r1, #32
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 fa5f 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 80091ac:	4603      	mov	r3, r0
 80091ae:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d125      	bne.n	8009202 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80091b6:	2200      	movs	r2, #0
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 fa8c 	bl	80096d8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d115      	bne.n	80091f4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2201      	movs	r2, #1
 80091d0:	2102      	movs	r1, #2
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 fa49 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10f      	bne.n	8009202 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2202      	movs	r2, #2
 80091e8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80091f2:	e006      	b.n	8009202 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80091fc:	e001      	b.n	8009202 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80091fe:	2302      	movs	r3, #2
 8009200:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08a      	sub	sp, #40	; 0x28
 8009218:	af02      	add	r7, sp, #8
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8009224:	f7fe f892 	bl	800734c <HAL_GetTick>
 8009228:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3320      	adds	r3, #32
 8009230:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_QSPI_Transmit+0x2e>
 800923e:	2302      	movs	r3, #2
 8009240:	e07b      	b.n	800933a <HAL_QSPI_Transmit+0x126>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b01      	cmp	r3, #1
 8009254:	d16a      	bne.n	800932c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d05b      	beq.n	800931a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2212      	movs	r2, #18
 8009266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	695a      	ldr	r2, [r3, #20]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8009296:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8009298:	e01b      	b.n	80092d2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2201      	movs	r2, #1
 80092a2:	2104      	movs	r1, #4
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 f9e0 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 80092aa:	4603      	mov	r3, r0
 80092ac:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80092ae:	7ffb      	ldrb	r3, [r7, #31]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d113      	bne.n	80092dc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	781a      	ldrb	r2, [r3, #0]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	1c5a      	adds	r2, r3, #1
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	1e5a      	subs	r2, r3, #1
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1df      	bne.n	800929a <HAL_QSPI_Transmit+0x86>
 80092da:	e000      	b.n	80092de <HAL_QSPI_Transmit+0xca>
          break;
 80092dc:	bf00      	nop
      }

      if (status == HAL_OK)
 80092de:	7ffb      	ldrb	r3, [r7, #31]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d115      	bne.n	8009310 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2201      	movs	r2, #1
 80092ec:	2102      	movs	r1, #2
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 f9bb 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 80092f4:	4603      	mov	r3, r0
 80092f6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80092f8:	7ffb      	ldrb	r3, [r7, #31]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d108      	bne.n	8009310 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2202      	movs	r2, #2
 8009304:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 f934 	bl	8009574 <HAL_QSPI_Abort>
 800930c:	4603      	mov	r3, r0
 800930e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009318:	e00a      	b.n	8009330 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	f043 0208 	orr.w	r2, r3, #8
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	77fb      	strb	r3, [r7, #31]
 800932a:	e001      	b.n	8009330 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800932c:	2302      	movs	r3, #2
 800932e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8009338:	7ffb      	ldrb	r3, [r7, #31]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3720      	adds	r7, #32
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b08a      	sub	sp, #40	; 0x28
 8009346:	af02      	add	r7, sp, #8
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8009352:	f7fd fffb 	bl	800734c <HAL_GetTick>
 8009356:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3320      	adds	r3, #32
 8009366:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_QSPI_Receive+0x36>
 8009374:	2302      	movs	r3, #2
 8009376:	e082      	b.n	800947e <HAL_QSPI_Receive+0x13c>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b01      	cmp	r3, #1
 800938a:	d171      	bne.n	8009470 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d062      	beq.n	800945e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2222      	movs	r2, #34	; 0x22
 800939c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80093d0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80093da:	e01c      	b.n	8009416 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2201      	movs	r2, #1
 80093e4:	2106      	movs	r1, #6
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f93f 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80093f0:	7ffb      	ldrb	r3, [r7, #31]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d114      	bne.n	8009420 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	7812      	ldrb	r2, [r2, #0]
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	1e5a      	subs	r2, r3, #1
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1de      	bne.n	80093dc <HAL_QSPI_Receive+0x9a>
 800941e:	e000      	b.n	8009422 <HAL_QSPI_Receive+0xe0>
          break;
 8009420:	bf00      	nop
      }

      if (status == HAL_OK)
 8009422:	7ffb      	ldrb	r3, [r7, #31]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d115      	bne.n	8009454 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2201      	movs	r2, #1
 8009430:	2102      	movs	r1, #2
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 f919 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800943c:	7ffb      	ldrb	r3, [r7, #31]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d108      	bne.n	8009454 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2202      	movs	r2, #2
 8009448:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 f892 	bl	8009574 <HAL_QSPI_Abort>
 8009450:	4603      	mov	r3, r0
 8009452:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800945c:	e00a      	b.n	8009474 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009462:	f043 0208 	orr.w	r2, r3, #8
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	77fb      	strb	r3, [r7, #31]
 800946e:	e001      	b.n	8009474 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8009470:	2302      	movs	r3, #2
 8009472:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800947c:	7ffb      	ldrb	r3, [r7, #31]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b088      	sub	sp, #32
 800948a:	af02      	add	r7, sp, #8
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009494:	f7fd ff5a 	bl	800734c <HAL_GetTick>
 8009498:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_QSPI_AutoPolling+0x24>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e060      	b.n	800956c <HAL_QSPI_AutoPolling+0xe6>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d14f      	bne.n	800955e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2242      	movs	r2, #66	; 0x42
 80094c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	2200      	movs	r2, #0
 80094d4:	2120      	movs	r1, #32
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f8c7 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 80094dc:	4603      	mov	r3, r0
 80094de:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d13d      	bne.n	8009562 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6852      	ldr	r2, [r2, #4]
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6892      	ldr	r2, [r2, #8]
 8009502:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	431a      	orrs	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800951c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f8d3 	bl	80096d8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2201      	movs	r2, #1
 800953a:	2108      	movs	r1, #8
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f894 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2208      	movs	r2, #8
 8009552:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800955c:	e001      	b.n	8009562 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800955e:	2302      	movs	r3, #2
 8009560:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af02      	add	r7, sp, #8
 800957a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009580:	f7fd fee4 	bl	800734c <HAL_GetTick>
 8009584:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d056      	beq.n	8009644 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d017      	beq.n	80095dc <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0204 	bic.w	r2, r2, #4
 80095ba:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff f863 	bl	800868c <HAL_DMA_Abort>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d4:	f043 0204 	orr.w	r2, r3, #4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0202 	orr.w	r2, r2, #2
 80095ea:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2201      	movs	r2, #1
 80095f6:	2102      	movs	r1, #2
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f836 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10e      	bne.n	8009626 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2202      	movs	r2, #2
 800960e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2200      	movs	r2, #0
 800961a:	2120      	movs	r1, #32
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f824 	bl	800966a <QSPI_WaitFlagStateUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10b      	bne.n	8009644 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	695a      	ldr	r2, [r3, #20]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800963a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	60f8      	str	r0, [r7, #12]
 8009672:	60b9      	str	r1, [r7, #8]
 8009674:	603b      	str	r3, [r7, #0]
 8009676:	4613      	mov	r3, r2
 8009678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800967a:	e01a      	b.n	80096b2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d016      	beq.n	80096b2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009684:	f7fd fe62 	bl	800734c <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	429a      	cmp	r2, r3
 8009692:	d302      	bcc.n	800969a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10b      	bne.n	80096b2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2204      	movs	r2, #4
 800969e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a6:	f043 0201 	orr.w	r2, r3, #1
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e00e      	b.n	80096d0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4013      	ands	r3, r2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bf14      	ite	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	2300      	moveq	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d1d6      	bne.n	800967c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d009      	beq.n	8009700 <QSPI_Config+0x28>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80096f2:	d005      	beq.n	8009700 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3a01      	subs	r2, #1
 80096fe:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 80b9 	beq.w	800987c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d05f      	beq.n	80097d2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	6892      	ldr	r2, [r2, #8]
 800971a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d031      	beq.n	8009788 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972c:	431a      	orrs	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009732:	431a      	orrs	r2, r3
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	431a      	orrs	r2, r3
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	049b      	lsls	r3, r3, #18
 8009740:	431a      	orrs	r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	431a      	orrs	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	431a      	orrs	r2, r3
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	431a      	orrs	r2, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	431a      	orrs	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	431a      	orrs	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	ea42 0103 	orr.w	r1, r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	430a      	orrs	r2, r1
 8009770:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009778:	f000 812e 	beq.w	80099d8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	6852      	ldr	r2, [r2, #4]
 8009784:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8009786:	e127      	b.n	80099d8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	431a      	orrs	r2, r3
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009796:	431a      	orrs	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	431a      	orrs	r2, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	049b      	lsls	r3, r3, #18
 80097a4:	431a      	orrs	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	431a      	orrs	r2, r3
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	431a      	orrs	r2, r3
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	ea42 0103 	orr.w	r1, r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	615a      	str	r2, [r3, #20]
}
 80097d0:	e102      	b.n	80099d8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d02e      	beq.n	8009838 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	431a      	orrs	r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e8:	431a      	orrs	r2, r3
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	431a      	orrs	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	049b      	lsls	r3, r3, #18
 80097f6:	431a      	orrs	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	431a      	orrs	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	431a      	orrs	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	431a      	orrs	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	ea42 0103 	orr.w	r1, r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	430a      	orrs	r2, r1
 8009820:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009828:	f000 80d6 	beq.w	80099d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	6852      	ldr	r2, [r2, #4]
 8009834:	619a      	str	r2, [r3, #24]
}
 8009836:	e0cf      	b.n	80099d8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009840:	431a      	orrs	r2, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009846:	431a      	orrs	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	431a      	orrs	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	049b      	lsls	r3, r3, #18
 8009854:	431a      	orrs	r2, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	431a      	orrs	r2, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	431a      	orrs	r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	431a      	orrs	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	ea42 0103 	orr.w	r1, r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	430a      	orrs	r2, r1
 8009878:	615a      	str	r2, [r3, #20]
}
 800987a:	e0ad      	b.n	80099d8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d058      	beq.n	8009936 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	6892      	ldr	r2, [r2, #8]
 800988c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d02d      	beq.n	80098f2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	431a      	orrs	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	431a      	orrs	r2, r3
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	431a      	orrs	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	049b      	lsls	r3, r3, #18
 80098b2:	431a      	orrs	r2, r3
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	431a      	orrs	r2, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	431a      	orrs	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	431a      	orrs	r2, r3
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	ea42 0103 	orr.w	r1, r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	430a      	orrs	r2, r1
 80098dc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80098e4:	d078      	beq.n	80099d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	6852      	ldr	r2, [r2, #4]
 80098ee:	619a      	str	r2, [r3, #24]
}
 80098f0:	e072      	b.n	80099d8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	431a      	orrs	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009900:	431a      	orrs	r2, r3
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	431a      	orrs	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	049b      	lsls	r3, r3, #18
 800990e:	431a      	orrs	r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	431a      	orrs	r2, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	431a      	orrs	r2, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	431a      	orrs	r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	ea42 0103 	orr.w	r1, r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	430a      	orrs	r2, r1
 8009932:	615a      	str	r2, [r3, #20]
}
 8009934:	e050      	b.n	80099d8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d02a      	beq.n	8009994 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	431a      	orrs	r2, r3
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	431a      	orrs	r2, r3
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	431a      	orrs	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	049b      	lsls	r3, r3, #18
 800995a:	431a      	orrs	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	431a      	orrs	r2, r3
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	431a      	orrs	r2, r3
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	431a      	orrs	r2, r3
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	ea42 0103 	orr.w	r1, r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	430a      	orrs	r2, r1
 800997e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009986:	d027      	beq.n	80099d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	6852      	ldr	r2, [r2, #4]
 8009990:	619a      	str	r2, [r3, #24]
}
 8009992:	e021      	b.n	80099d8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01d      	beq.n	80099d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a4:	431a      	orrs	r2, r3
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099aa:	431a      	orrs	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b0:	431a      	orrs	r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	049b      	lsls	r3, r3, #18
 80099b8:	431a      	orrs	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	431a      	orrs	r2, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	431a      	orrs	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	ea42 0103 	orr.w	r1, r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	615a      	str	r2, [r3, #20]
}
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e3d4      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099f6:	4ba1      	ldr	r3, [pc, #644]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f003 030c 	and.w	r3, r3, #12
 80099fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a00:	4b9e      	ldr	r3, [pc, #632]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	f003 0303 	and.w	r3, r3, #3
 8009a08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0310 	and.w	r3, r3, #16
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 80e4 	beq.w	8009be0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d007      	beq.n	8009a2e <HAL_RCC_OscConfig+0x4a>
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	2b0c      	cmp	r3, #12
 8009a22:	f040 808b 	bne.w	8009b3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	f040 8087 	bne.w	8009b3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009a2e:	4b93      	ldr	r3, [pc, #588]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d005      	beq.n	8009a46 <HAL_RCC_OscConfig+0x62>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e3ac      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1a      	ldr	r2, [r3, #32]
 8009a4a:	4b8c      	ldr	r3, [pc, #560]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d004      	beq.n	8009a60 <HAL_RCC_OscConfig+0x7c>
 8009a56:	4b89      	ldr	r3, [pc, #548]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a5e:	e005      	b.n	8009a6c <HAL_RCC_OscConfig+0x88>
 8009a60:	4b86      	ldr	r3, [pc, #536]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a66:	091b      	lsrs	r3, r3, #4
 8009a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d223      	bcs.n	8009ab8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fd73 	bl	800a560 <RCC_SetFlashLatencyFromMSIRange>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e38d      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a84:	4b7d      	ldr	r3, [pc, #500]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a7c      	ldr	r2, [pc, #496]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a8a:	f043 0308 	orr.w	r3, r3, #8
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	4b7a      	ldr	r3, [pc, #488]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	4977      	ldr	r1, [pc, #476]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009aa2:	4b76      	ldr	r3, [pc, #472]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	021b      	lsls	r3, r3, #8
 8009ab0:	4972      	ldr	r1, [pc, #456]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	604b      	str	r3, [r1, #4]
 8009ab6:	e025      	b.n	8009b04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ab8:	4b70      	ldr	r3, [pc, #448]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a6f      	ldr	r2, [pc, #444]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009abe:	f043 0308 	orr.w	r3, r3, #8
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	4b6d      	ldr	r3, [pc, #436]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	496a      	ldr	r1, [pc, #424]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ad6:	4b69      	ldr	r3, [pc, #420]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	4965      	ldr	r1, [pc, #404]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d109      	bne.n	8009b04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 fd33 	bl	800a560 <RCC_SetFlashLatencyFromMSIRange>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e34d      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009b04:	f000 fc36 	bl	800a374 <HAL_RCC_GetSysClockFreq>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4b5c      	ldr	r3, [pc, #368]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	091b      	lsrs	r3, r3, #4
 8009b10:	f003 030f 	and.w	r3, r3, #15
 8009b14:	495a      	ldr	r1, [pc, #360]	; (8009c80 <HAL_RCC_OscConfig+0x29c>)
 8009b16:	5ccb      	ldrb	r3, [r1, r3]
 8009b18:	f003 031f 	and.w	r3, r3, #31
 8009b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b20:	4a58      	ldr	r2, [pc, #352]	; (8009c84 <HAL_RCC_OscConfig+0x2a0>)
 8009b22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009b24:	4b58      	ldr	r3, [pc, #352]	; (8009c88 <HAL_RCC_OscConfig+0x2a4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fa fabb 	bl	80040a4 <HAL_InitTick>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d052      	beq.n	8009bde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	e331      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d032      	beq.n	8009baa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009b44:	4b4d      	ldr	r3, [pc, #308]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a4c      	ldr	r2, [pc, #304]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b4a:	f043 0301 	orr.w	r3, r3, #1
 8009b4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009b50:	f7fd fbfc 	bl	800734c <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b58:	f7fd fbf8 	bl	800734c <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e31a      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b6a:	4b44      	ldr	r3, [pc, #272]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b76:	4b41      	ldr	r3, [pc, #260]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a40      	ldr	r2, [pc, #256]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b7c:	f043 0308 	orr.w	r3, r3, #8
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	4b3e      	ldr	r3, [pc, #248]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	493b      	ldr	r1, [pc, #236]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b94:	4b39      	ldr	r3, [pc, #228]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	4936      	ldr	r1, [pc, #216]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	604b      	str	r3, [r1, #4]
 8009ba8:	e01a      	b.n	8009be0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009baa:	4b34      	ldr	r3, [pc, #208]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a33      	ldr	r2, [pc, #204]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009bb0:	f023 0301 	bic.w	r3, r3, #1
 8009bb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009bb6:	f7fd fbc9 	bl	800734c <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009bbc:	e008      	b.n	8009bd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009bbe:	f7fd fbc5 	bl	800734c <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e2e7      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009bd0:	4b2a      	ldr	r3, [pc, #168]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f0      	bne.n	8009bbe <HAL_RCC_OscConfig+0x1da>
 8009bdc:	e000      	b.n	8009be0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009bde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d074      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d005      	beq.n	8009bfe <HAL_RCC_OscConfig+0x21a>
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b0c      	cmp	r3, #12
 8009bf6:	d10e      	bne.n	8009c16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d10b      	bne.n	8009c16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bfe:	4b1f      	ldr	r3, [pc, #124]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d064      	beq.n	8009cd4 <HAL_RCC_OscConfig+0x2f0>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d160      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e2c4      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1e:	d106      	bne.n	8009c2e <HAL_RCC_OscConfig+0x24a>
 8009c20:	4b16      	ldr	r3, [pc, #88]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a15      	ldr	r2, [pc, #84]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	e01d      	b.n	8009c6a <HAL_RCC_OscConfig+0x286>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c36:	d10c      	bne.n	8009c52 <HAL_RCC_OscConfig+0x26e>
 8009c38:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a0f      	ldr	r2, [pc, #60]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a0c      	ldr	r2, [pc, #48]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	e00b      	b.n	8009c6a <HAL_RCC_OscConfig+0x286>
 8009c52:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a09      	ldr	r2, [pc, #36]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	4b07      	ldr	r3, [pc, #28]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a06      	ldr	r2, [pc, #24]	; (8009c7c <HAL_RCC_OscConfig+0x298>)
 8009c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d01c      	beq.n	8009cac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c72:	f7fd fb6b 	bl	800734c <HAL_GetTick>
 8009c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c78:	e011      	b.n	8009c9e <HAL_RCC_OscConfig+0x2ba>
 8009c7a:	bf00      	nop
 8009c7c:	40021000 	.word	0x40021000
 8009c80:	08015f00 	.word	0x08015f00
 8009c84:	20000008 	.word	0x20000008
 8009c88:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c8c:	f7fd fb5e 	bl	800734c <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b64      	cmp	r3, #100	; 0x64
 8009c98:	d901      	bls.n	8009c9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e280      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c9e:	4baf      	ldr	r3, [pc, #700]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0f0      	beq.n	8009c8c <HAL_RCC_OscConfig+0x2a8>
 8009caa:	e014      	b.n	8009cd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cac:	f7fd fb4e 	bl	800734c <HAL_GetTick>
 8009cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009cb4:	f7fd fb4a 	bl	800734c <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	2b64      	cmp	r3, #100	; 0x64
 8009cc0:	d901      	bls.n	8009cc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e26c      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009cc6:	4ba5      	ldr	r3, [pc, #660]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1f0      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x2d0>
 8009cd2:	e000      	b.n	8009cd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d060      	beq.n	8009da4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d005      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x310>
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	2b0c      	cmp	r3, #12
 8009cec:	d119      	bne.n	8009d22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d116      	bne.n	8009d22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cf4:	4b99      	ldr	r3, [pc, #612]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <HAL_RCC_OscConfig+0x328>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e249      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d0c:	4b93      	ldr	r3, [pc, #588]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	061b      	lsls	r3, r3, #24
 8009d1a:	4990      	ldr	r1, [pc, #576]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d20:	e040      	b.n	8009da4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d023      	beq.n	8009d72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d2a:	4b8c      	ldr	r3, [pc, #560]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a8b      	ldr	r2, [pc, #556]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d36:	f7fd fb09 	bl	800734c <HAL_GetTick>
 8009d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d3e:	f7fd fb05 	bl	800734c <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e227      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d50:	4b82      	ldr	r3, [pc, #520]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0f0      	beq.n	8009d3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d5c:	4b7f      	ldr	r3, [pc, #508]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	061b      	lsls	r3, r3, #24
 8009d6a:	497c      	ldr	r1, [pc, #496]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	604b      	str	r3, [r1, #4]
 8009d70:	e018      	b.n	8009da4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d72:	4b7a      	ldr	r3, [pc, #488]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a79      	ldr	r2, [pc, #484]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7e:	f7fd fae5 	bl	800734c <HAL_GetTick>
 8009d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d84:	e008      	b.n	8009d98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d86:	f7fd fae1 	bl	800734c <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d901      	bls.n	8009d98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e203      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d98:	4b70      	ldr	r3, [pc, #448]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f0      	bne.n	8009d86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0308 	and.w	r3, r3, #8
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d03c      	beq.n	8009e2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01c      	beq.n	8009df2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009db8:	4b68      	ldr	r3, [pc, #416]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dbe:	4a67      	ldr	r2, [pc, #412]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009dc0:	f043 0301 	orr.w	r3, r3, #1
 8009dc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc8:	f7fd fac0 	bl	800734c <HAL_GetTick>
 8009dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dd0:	f7fd fabc 	bl	800734c <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e1de      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009de2:	4b5e      	ldr	r3, [pc, #376]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009de8:	f003 0302 	and.w	r3, r3, #2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0ef      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x3ec>
 8009df0:	e01b      	b.n	8009e2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009df2:	4b5a      	ldr	r3, [pc, #360]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009df8:	4a58      	ldr	r2, [pc, #352]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009dfa:	f023 0301 	bic.w	r3, r3, #1
 8009dfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e02:	f7fd faa3 	bl	800734c <HAL_GetTick>
 8009e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e08:	e008      	b.n	8009e1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e0a:	f7fd fa9f 	bl	800734c <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e1c1      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e1c:	4b4f      	ldr	r3, [pc, #316]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1ef      	bne.n	8009e0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0304 	and.w	r3, r3, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 80a6 	beq.w	8009f84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009e3c:	4b47      	ldr	r3, [pc, #284]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10d      	bne.n	8009e64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e48:	4b44      	ldr	r3, [pc, #272]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4c:	4a43      	ldr	r2, [pc, #268]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e52:	6593      	str	r3, [r2, #88]	; 0x58
 8009e54:	4b41      	ldr	r3, [pc, #260]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e5c:	60bb      	str	r3, [r7, #8]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e60:	2301      	movs	r3, #1
 8009e62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e64:	4b3e      	ldr	r3, [pc, #248]	; (8009f60 <HAL_RCC_OscConfig+0x57c>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d118      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e70:	4b3b      	ldr	r3, [pc, #236]	; (8009f60 <HAL_RCC_OscConfig+0x57c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a3a      	ldr	r2, [pc, #232]	; (8009f60 <HAL_RCC_OscConfig+0x57c>)
 8009e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e7c:	f7fd fa66 	bl	800734c <HAL_GetTick>
 8009e80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e82:	e008      	b.n	8009e96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e84:	f7fd fa62 	bl	800734c <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d901      	bls.n	8009e96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e184      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e96:	4b32      	ldr	r3, [pc, #200]	; (8009f60 <HAL_RCC_OscConfig+0x57c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0f0      	beq.n	8009e84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d108      	bne.n	8009ebc <HAL_RCC_OscConfig+0x4d8>
 8009eaa:	4b2c      	ldr	r3, [pc, #176]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb0:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009eb2:	f043 0301 	orr.w	r3, r3, #1
 8009eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009eba:	e024      	b.n	8009f06 <HAL_RCC_OscConfig+0x522>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2b05      	cmp	r3, #5
 8009ec2:	d110      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x502>
 8009ec4:	4b25      	ldr	r3, [pc, #148]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eca:	4a24      	ldr	r2, [pc, #144]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009ecc:	f043 0304 	orr.w	r3, r3, #4
 8009ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ed4:	4b21      	ldr	r3, [pc, #132]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eda:	4a20      	ldr	r2, [pc, #128]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009edc:	f043 0301 	orr.w	r3, r3, #1
 8009ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ee4:	e00f      	b.n	8009f06 <HAL_RCC_OscConfig+0x522>
 8009ee6:	4b1d      	ldr	r3, [pc, #116]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eec:	4a1b      	ldr	r2, [pc, #108]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009eee:	f023 0301 	bic.w	r3, r3, #1
 8009ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009ef6:	4b19      	ldr	r3, [pc, #100]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efc:	4a17      	ldr	r2, [pc, #92]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009efe:	f023 0304 	bic.w	r3, r3, #4
 8009f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d016      	beq.n	8009f3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f0e:	f7fd fa1d 	bl	800734c <HAL_GetTick>
 8009f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f14:	e00a      	b.n	8009f2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f16:	f7fd fa19 	bl	800734c <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d901      	bls.n	8009f2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e139      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f2c:	4b0b      	ldr	r3, [pc, #44]	; (8009f5c <HAL_RCC_OscConfig+0x578>)
 8009f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0ed      	beq.n	8009f16 <HAL_RCC_OscConfig+0x532>
 8009f3a:	e01a      	b.n	8009f72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f3c:	f7fd fa06 	bl	800734c <HAL_GetTick>
 8009f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f42:	e00f      	b.n	8009f64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f44:	f7fd fa02 	bl	800734c <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d906      	bls.n	8009f64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e122      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
 8009f5a:	bf00      	nop
 8009f5c:	40021000 	.word	0x40021000
 8009f60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f64:	4b90      	ldr	r3, [pc, #576]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 8009f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e8      	bne.n	8009f44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f72:	7ffb      	ldrb	r3, [r7, #31]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d105      	bne.n	8009f84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f78:	4b8b      	ldr	r3, [pc, #556]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 8009f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7c:	4a8a      	ldr	r2, [pc, #552]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 8009f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 8108 	beq.w	800a19e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	f040 80d0 	bne.w	800a138 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009f98:	4b83      	ldr	r3, [pc, #524]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f003 0203 	and.w	r2, r3, #3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d130      	bne.n	800a00e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d127      	bne.n	800a00e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d11f      	bne.n	800a00e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fd8:	2a07      	cmp	r2, #7
 8009fda:	bf14      	ite	ne
 8009fdc:	2201      	movne	r2, #1
 8009fde:	2200      	moveq	r2, #0
 8009fe0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d113      	bne.n	800a00e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff0:	085b      	lsrs	r3, r3, #1
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d109      	bne.n	800a00e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a004:	085b      	lsrs	r3, r3, #1
 800a006:	3b01      	subs	r3, #1
 800a008:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d06e      	beq.n	800a0ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b0c      	cmp	r3, #12
 800a012:	d069      	beq.n	800a0e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a014:	4b64      	ldr	r3, [pc, #400]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d105      	bne.n	800a02c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a020:	4b61      	ldr	r3, [pc, #388]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e0b7      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a030:	4b5d      	ldr	r3, [pc, #372]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a5c      	ldr	r2, [pc, #368]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a03a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a03c:	f7fd f986 	bl	800734c <HAL_GetTick>
 800a040:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a042:	e008      	b.n	800a056 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a044:	f7fd f982 	bl	800734c <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d901      	bls.n	800a056 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e0a4      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a056:	4b54      	ldr	r3, [pc, #336]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f0      	bne.n	800a044 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a062:	4b51      	ldr	r3, [pc, #324]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	4b51      	ldr	r3, [pc, #324]	; (800a1ac <HAL_RCC_OscConfig+0x7c8>)
 800a068:	4013      	ands	r3, r2
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a072:	3a01      	subs	r2, #1
 800a074:	0112      	lsls	r2, r2, #4
 800a076:	4311      	orrs	r1, r2
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a07c:	0212      	lsls	r2, r2, #8
 800a07e:	4311      	orrs	r1, r2
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a084:	0852      	lsrs	r2, r2, #1
 800a086:	3a01      	subs	r2, #1
 800a088:	0552      	lsls	r2, r2, #21
 800a08a:	4311      	orrs	r1, r2
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a090:	0852      	lsrs	r2, r2, #1
 800a092:	3a01      	subs	r2, #1
 800a094:	0652      	lsls	r2, r2, #25
 800a096:	4311      	orrs	r1, r2
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a09c:	0912      	lsrs	r2, r2, #4
 800a09e:	0452      	lsls	r2, r2, #17
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	4941      	ldr	r1, [pc, #260]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a0a8:	4b3f      	ldr	r3, [pc, #252]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a3e      	ldr	r2, [pc, #248]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a0b4:	4b3c      	ldr	r3, [pc, #240]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	4a3b      	ldr	r2, [pc, #236]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a0c0:	f7fd f944 	bl	800734c <HAL_GetTick>
 800a0c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0c8:	f7fd f940 	bl	800734c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e062      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0da:	4b33      	ldr	r3, [pc, #204]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f0      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a0e6:	e05a      	b.n	800a19e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e059      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0ec:	4b2e      	ldr	r3, [pc, #184]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d152      	bne.n	800a19e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a0f8:	4b2b      	ldr	r3, [pc, #172]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a2a      	ldr	r2, [pc, #168]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a0fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a102:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a104:	4b28      	ldr	r3, [pc, #160]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	4a27      	ldr	r2, [pc, #156]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a10a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a10e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a110:	f7fd f91c 	bl	800734c <HAL_GetTick>
 800a114:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a116:	e008      	b.n	800a12a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a118:	f7fd f918 	bl	800734c <HAL_GetTick>
 800a11c:	4602      	mov	r2, r0
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	2b02      	cmp	r3, #2
 800a124:	d901      	bls.n	800a12a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e03a      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a12a:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0f0      	beq.n	800a118 <HAL_RCC_OscConfig+0x734>
 800a136:	e032      	b.n	800a19e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2b0c      	cmp	r3, #12
 800a13c:	d02d      	beq.n	800a19a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a13e:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a19      	ldr	r2, [pc, #100]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a148:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800a14a:	4b17      	ldr	r3, [pc, #92]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d105      	bne.n	800a162 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	4a13      	ldr	r2, [pc, #76]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a15c:	f023 0303 	bic.w	r3, r3, #3
 800a160:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	4a10      	ldr	r2, [pc, #64]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a168:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a16c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a170:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a172:	f7fd f8eb 	bl	800734c <HAL_GetTick>
 800a176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a178:	e008      	b.n	800a18c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a17a:	f7fd f8e7 	bl	800734c <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	d901      	bls.n	800a18c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e009      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a18c:	4b06      	ldr	r3, [pc, #24]	; (800a1a8 <HAL_RCC_OscConfig+0x7c4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1f0      	bne.n	800a17a <HAL_RCC_OscConfig+0x796>
 800a198:	e001      	b.n	800a19e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	40021000 	.word	0x40021000
 800a1ac:	f99d808c 	.word	0xf99d808c

0800a1b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e0c8      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a1c4:	4b66      	ldr	r3, [pc, #408]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0307 	and.w	r3, r3, #7
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d910      	bls.n	800a1f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1d2:	4b63      	ldr	r3, [pc, #396]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f023 0207 	bic.w	r2, r3, #7
 800a1da:	4961      	ldr	r1, [pc, #388]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1e2:	4b5f      	ldr	r3, [pc, #380]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d001      	beq.n	800a1f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e0b0      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d04c      	beq.n	800a29a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b03      	cmp	r3, #3
 800a206:	d107      	bne.n	800a218 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a208:	4b56      	ldr	r3, [pc, #344]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d121      	bne.n	800a258 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e09e      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d107      	bne.n	800a230 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a220:	4b50      	ldr	r3, [pc, #320]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d115      	bne.n	800a258 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e092      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d107      	bne.n	800a248 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a238:	4b4a      	ldr	r3, [pc, #296]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d109      	bne.n	800a258 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e086      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a248:	4b46      	ldr	r3, [pc, #280]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e07e      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a258:	4b42      	ldr	r3, [pc, #264]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f023 0203 	bic.w	r2, r3, #3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	493f      	ldr	r1, [pc, #252]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a266:	4313      	orrs	r3, r2
 800a268:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a26a:	f7fd f86f 	bl	800734c <HAL_GetTick>
 800a26e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a270:	e00a      	b.n	800a288 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a272:	f7fd f86b 	bl	800734c <HAL_GetTick>
 800a276:	4602      	mov	r2, r0
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a280:	4293      	cmp	r3, r2
 800a282:	d901      	bls.n	800a288 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e066      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a288:	4b36      	ldr	r3, [pc, #216]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f003 020c 	and.w	r2, r3, #12
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	429a      	cmp	r2, r3
 800a298:	d1eb      	bne.n	800a272 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d008      	beq.n	800a2b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2a6:	4b2f      	ldr	r3, [pc, #188]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	492c      	ldr	r1, [pc, #176]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a2b8:	4b29      	ldr	r3, [pc, #164]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0307 	and.w	r3, r3, #7
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d210      	bcs.n	800a2e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2c6:	4b26      	ldr	r3, [pc, #152]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f023 0207 	bic.w	r2, r3, #7
 800a2ce:	4924      	ldr	r1, [pc, #144]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2d6:	4b22      	ldr	r3, [pc, #136]	; (800a360 <HAL_RCC_ClockConfig+0x1b0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0307 	and.w	r3, r3, #7
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d001      	beq.n	800a2e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e036      	b.n	800a356 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d008      	beq.n	800a306 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2f4:	4b1b      	ldr	r3, [pc, #108]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	4918      	ldr	r1, [pc, #96]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a302:	4313      	orrs	r3, r2
 800a304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0308 	and.w	r3, r3, #8
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d009      	beq.n	800a326 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	4910      	ldr	r1, [pc, #64]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a322:	4313      	orrs	r3, r2
 800a324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a326:	f000 f825 	bl	800a374 <HAL_RCC_GetSysClockFreq>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <HAL_RCC_ClockConfig+0x1b4>)
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	091b      	lsrs	r3, r3, #4
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	490c      	ldr	r1, [pc, #48]	; (800a368 <HAL_RCC_ClockConfig+0x1b8>)
 800a338:	5ccb      	ldrb	r3, [r1, r3]
 800a33a:	f003 031f 	and.w	r3, r3, #31
 800a33e:	fa22 f303 	lsr.w	r3, r2, r3
 800a342:	4a0a      	ldr	r2, [pc, #40]	; (800a36c <HAL_RCC_ClockConfig+0x1bc>)
 800a344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a346:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <HAL_RCC_ClockConfig+0x1c0>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7f9 feaa 	bl	80040a4 <HAL_InitTick>
 800a350:	4603      	mov	r3, r0
 800a352:	72fb      	strb	r3, [r7, #11]

  return status;
 800a354:	7afb      	ldrb	r3, [r7, #11]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	40022000 	.word	0x40022000
 800a364:	40021000 	.word	0x40021000
 800a368:	08015f00 	.word	0x08015f00
 800a36c:	20000008 	.word	0x20000008
 800a370:	2000000c 	.word	0x2000000c

0800a374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a374:	b480      	push	{r7}
 800a376:	b089      	sub	sp, #36	; 0x24
 800a378:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	61fb      	str	r3, [r7, #28]
 800a37e:	2300      	movs	r3, #0
 800a380:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a382:	4b3e      	ldr	r3, [pc, #248]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f003 030c 	and.w	r3, r3, #12
 800a38a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a38c:	4b3b      	ldr	r3, [pc, #236]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f003 0303 	and.w	r3, r3, #3
 800a394:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d005      	beq.n	800a3a8 <HAL_RCC_GetSysClockFreq+0x34>
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2b0c      	cmp	r3, #12
 800a3a0:	d121      	bne.n	800a3e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d11e      	bne.n	800a3e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a3a8:	4b34      	ldr	r3, [pc, #208]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0308 	and.w	r3, r3, #8
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d107      	bne.n	800a3c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a3b4:	4b31      	ldr	r3, [pc, #196]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3ba:	0a1b      	lsrs	r3, r3, #8
 800a3bc:	f003 030f 	and.w	r3, r3, #15
 800a3c0:	61fb      	str	r3, [r7, #28]
 800a3c2:	e005      	b.n	800a3d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a3c4:	4b2d      	ldr	r3, [pc, #180]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	091b      	lsrs	r3, r3, #4
 800a3ca:	f003 030f 	and.w	r3, r3, #15
 800a3ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a3d0:	4a2b      	ldr	r2, [pc, #172]	; (800a480 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10d      	bne.n	800a3fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a3e4:	e00a      	b.n	800a3fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d102      	bne.n	800a3f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a3ec:	4b25      	ldr	r3, [pc, #148]	; (800a484 <HAL_RCC_GetSysClockFreq+0x110>)
 800a3ee:	61bb      	str	r3, [r7, #24]
 800a3f0:	e004      	b.n	800a3fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d101      	bne.n	800a3fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a3f8:	4b23      	ldr	r3, [pc, #140]	; (800a488 <HAL_RCC_GetSysClockFreq+0x114>)
 800a3fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	2b0c      	cmp	r3, #12
 800a400:	d134      	bne.n	800a46c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a402:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d003      	beq.n	800a41a <HAL_RCC_GetSysClockFreq+0xa6>
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2b03      	cmp	r3, #3
 800a416:	d003      	beq.n	800a420 <HAL_RCC_GetSysClockFreq+0xac>
 800a418:	e005      	b.n	800a426 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a41a:	4b1a      	ldr	r3, [pc, #104]	; (800a484 <HAL_RCC_GetSysClockFreq+0x110>)
 800a41c:	617b      	str	r3, [r7, #20]
      break;
 800a41e:	e005      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a420:	4b19      	ldr	r3, [pc, #100]	; (800a488 <HAL_RCC_GetSysClockFreq+0x114>)
 800a422:	617b      	str	r3, [r7, #20]
      break;
 800a424:	e002      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	617b      	str	r3, [r7, #20]
      break;
 800a42a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a42c:	4b13      	ldr	r3, [pc, #76]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	091b      	lsrs	r3, r3, #4
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	3301      	adds	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a43a:	4b10      	ldr	r3, [pc, #64]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	fb02 f203 	mul.w	r2, r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a452:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <HAL_RCC_GetSysClockFreq+0x108>)
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	0e5b      	lsrs	r3, r3, #25
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	3301      	adds	r3, #1
 800a45e:	005b      	lsls	r3, r3, #1
 800a460:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	fbb2 f3f3 	udiv	r3, r2, r3
 800a46a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a46c:	69bb      	ldr	r3, [r7, #24]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3724      	adds	r7, #36	; 0x24
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	40021000 	.word	0x40021000
 800a480:	08015f18 	.word	0x08015f18
 800a484:	00f42400 	.word	0x00f42400
 800a488:	007a1200 	.word	0x007a1200

0800a48c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a48c:	b480      	push	{r7}
 800a48e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a490:	4b03      	ldr	r3, [pc, #12]	; (800a4a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a492:	681b      	ldr	r3, [r3, #0]
}
 800a494:	4618      	mov	r0, r3
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	20000008 	.word	0x20000008

0800a4a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a4a8:	f7ff fff0 	bl	800a48c <HAL_RCC_GetHCLKFreq>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	0a1b      	lsrs	r3, r3, #8
 800a4b4:	f003 0307 	and.w	r3, r3, #7
 800a4b8:	4904      	ldr	r1, [pc, #16]	; (800a4cc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a4ba:	5ccb      	ldrb	r3, [r1, r3]
 800a4bc:	f003 031f 	and.w	r3, r3, #31
 800a4c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	40021000 	.word	0x40021000
 800a4cc:	08015f10 	.word	0x08015f10

0800a4d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a4d4:	f7ff ffda 	bl	800a48c <HAL_RCC_GetHCLKFreq>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	4b06      	ldr	r3, [pc, #24]	; (800a4f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	0adb      	lsrs	r3, r3, #11
 800a4e0:	f003 0307 	and.w	r3, r3, #7
 800a4e4:	4904      	ldr	r1, [pc, #16]	; (800a4f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a4e6:	5ccb      	ldrb	r3, [r1, r3]
 800a4e8:	f003 031f 	and.w	r3, r3, #31
 800a4ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	40021000 	.word	0x40021000
 800a4f8:	08015f10 	.word	0x08015f10

0800a4fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	220f      	movs	r2, #15
 800a50a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a50c:	4b12      	ldr	r3, [pc, #72]	; (800a558 <HAL_RCC_GetClockConfig+0x5c>)
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f003 0203 	and.w	r2, r3, #3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a518:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <HAL_RCC_GetClockConfig+0x5c>)
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a524:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <HAL_RCC_GetClockConfig+0x5c>)
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a530:	4b09      	ldr	r3, [pc, #36]	; (800a558 <HAL_RCC_GetClockConfig+0x5c>)
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	08db      	lsrs	r3, r3, #3
 800a536:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a53e:	4b07      	ldr	r3, [pc, #28]	; (800a55c <HAL_RCC_GetClockConfig+0x60>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0207 	and.w	r2, r3, #7
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	601a      	str	r2, [r3, #0]
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	40021000 	.word	0x40021000
 800a55c:	40022000 	.word	0x40022000

0800a560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a568:	2300      	movs	r3, #0
 800a56a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a56c:	4b2a      	ldr	r3, [pc, #168]	; (800a618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a56e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a578:	f7fe fca8 	bl	8008ecc <HAL_PWREx_GetVoltageRange>
 800a57c:	6178      	str	r0, [r7, #20]
 800a57e:	e014      	b.n	800a5aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a580:	4b25      	ldr	r3, [pc, #148]	; (800a618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a584:	4a24      	ldr	r2, [pc, #144]	; (800a618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a58a:	6593      	str	r3, [r2, #88]	; 0x58
 800a58c:	4b22      	ldr	r3, [pc, #136]	; (800a618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a598:	f7fe fc98 	bl	8008ecc <HAL_PWREx_GetVoltageRange>
 800a59c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a59e:	4b1e      	ldr	r3, [pc, #120]	; (800a618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a2:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a5a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b0:	d10b      	bne.n	800a5ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b80      	cmp	r3, #128	; 0x80
 800a5b6:	d919      	bls.n	800a5ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2ba0      	cmp	r3, #160	; 0xa0
 800a5bc:	d902      	bls.n	800a5c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a5be:	2302      	movs	r3, #2
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	e013      	b.n	800a5ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	613b      	str	r3, [r7, #16]
 800a5c8:	e010      	b.n	800a5ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b80      	cmp	r3, #128	; 0x80
 800a5ce:	d902      	bls.n	800a5d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	613b      	str	r3, [r7, #16]
 800a5d4:	e00a      	b.n	800a5ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b80      	cmp	r3, #128	; 0x80
 800a5da:	d102      	bne.n	800a5e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a5dc:	2302      	movs	r3, #2
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	e004      	b.n	800a5ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b70      	cmp	r3, #112	; 0x70
 800a5e6:	d101      	bne.n	800a5ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a5ec:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f023 0207 	bic.w	r2, r3, #7
 800a5f4:	4909      	ldr	r1, [pc, #36]	; (800a61c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a5fc:	4b07      	ldr	r3, [pc, #28]	; (800a61c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0307 	and.w	r3, r3, #7
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	429a      	cmp	r2, r3
 800a608:	d001      	beq.n	800a60e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	40021000 	.word	0x40021000
 800a61c:	40022000 	.word	0x40022000

0800a620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a628:	2300      	movs	r3, #0
 800a62a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a62c:	2300      	movs	r3, #0
 800a62e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d041      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a644:	d02a      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a646:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a64a:	d824      	bhi.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a64c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a650:	d008      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a656:	d81e      	bhi.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00a      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a65c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a660:	d010      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a662:	e018      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a664:	4b86      	ldr	r3, [pc, #536]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4a85      	ldr	r2, [pc, #532]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a66a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a66e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a670:	e015      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3304      	adds	r3, #4
 800a676:	2100      	movs	r1, #0
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 fabb 	bl	800abf4 <RCCEx_PLLSAI1_Config>
 800a67e:	4603      	mov	r3, r0
 800a680:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a682:	e00c      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	3320      	adds	r3, #32
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fba6 	bl	800addc <RCCEx_PLLSAI2_Config>
 800a690:	4603      	mov	r3, r0
 800a692:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a694:	e003      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	74fb      	strb	r3, [r7, #19]
      break;
 800a69a:	e000      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a69c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a69e:	7cfb      	ldrb	r3, [r7, #19]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10b      	bne.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6a4:	4b76      	ldr	r3, [pc, #472]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b2:	4973      	ldr	r1, [pc, #460]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a6ba:	e001      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6bc:	7cfb      	ldrb	r3, [r7, #19]
 800a6be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d041      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6d4:	d02a      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a6d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6da:	d824      	bhi.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a6dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6e0:	d008      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a6e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6e6:	d81e      	bhi.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a6ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6f0:	d010      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a6f2:	e018      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a6f4:	4b62      	ldr	r3, [pc, #392]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	4a61      	ldr	r2, [pc, #388]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a6fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a700:	e015      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3304      	adds	r3, #4
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fa73 	bl	800abf4 <RCCEx_PLLSAI1_Config>
 800a70e:	4603      	mov	r3, r0
 800a710:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a712:	e00c      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3320      	adds	r3, #32
 800a718:	2100      	movs	r1, #0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fb5e 	bl	800addc <RCCEx_PLLSAI2_Config>
 800a720:	4603      	mov	r3, r0
 800a722:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a724:	e003      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	74fb      	strb	r3, [r7, #19]
      break;
 800a72a:	e000      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a72c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a72e:	7cfb      	ldrb	r3, [r7, #19]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10b      	bne.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a734:	4b52      	ldr	r3, [pc, #328]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a742:	494f      	ldr	r1, [pc, #316]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a744:	4313      	orrs	r3, r2
 800a746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a74a:	e001      	b.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74c:	7cfb      	ldrb	r3, [r7, #19]
 800a74e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80a0 	beq.w	800a89e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a75e:	2300      	movs	r3, #0
 800a760:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a762:	4b47      	ldr	r3, [pc, #284]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00d      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a778:	4b41      	ldr	r3, [pc, #260]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a77c:	4a40      	ldr	r2, [pc, #256]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a77e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a782:	6593      	str	r3, [r2, #88]	; 0x58
 800a784:	4b3e      	ldr	r3, [pc, #248]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a78c:	60bb      	str	r3, [r7, #8]
 800a78e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a790:	2301      	movs	r3, #1
 800a792:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a794:	4b3b      	ldr	r3, [pc, #236]	; (800a884 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a3a      	ldr	r2, [pc, #232]	; (800a884 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a79a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a79e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7a0:	f7fc fdd4 	bl	800734c <HAL_GetTick>
 800a7a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a7a6:	e009      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7a8:	f7fc fdd0 	bl	800734c <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d902      	bls.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	74fb      	strb	r3, [r7, #19]
        break;
 800a7ba:	e005      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a7bc:	4b31      	ldr	r3, [pc, #196]	; (800a884 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d0ef      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a7c8:	7cfb      	ldrb	r3, [r7, #19]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d15c      	bne.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a7ce:	4b2c      	ldr	r3, [pc, #176]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01f      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d019      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7ec:	4b24      	ldr	r3, [pc, #144]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7f8:	4b21      	ldr	r3, [pc, #132]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7fe:	4a20      	ldr	r2, [pc, #128]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a808:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a80e:	4a1c      	ldr	r2, [pc, #112]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a818:	4a19      	ldr	r2, [pc, #100]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d016      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a82a:	f7fc fd8f 	bl	800734c <HAL_GetTick>
 800a82e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a830:	e00b      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a832:	f7fc fd8b 	bl	800734c <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a840:	4293      	cmp	r3, r2
 800a842:	d902      	bls.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	74fb      	strb	r3, [r7, #19]
            break;
 800a848:	e006      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b00      	cmp	r3, #0
 800a856:	d0ec      	beq.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a858:	7cfb      	ldrb	r3, [r7, #19]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a85e:	4b08      	ldr	r3, [pc, #32]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a86e:	4904      	ldr	r1, [pc, #16]	; (800a880 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a870:	4313      	orrs	r3, r2
 800a872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a876:	e009      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a878:	7cfb      	ldrb	r3, [r7, #19]
 800a87a:	74bb      	strb	r3, [r7, #18]
 800a87c:	e006      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a87e:	bf00      	nop
 800a880:	40021000 	.word	0x40021000
 800a884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a888:	7cfb      	ldrb	r3, [r7, #19]
 800a88a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a88c:	7c7b      	ldrb	r3, [r7, #17]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d105      	bne.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a892:	4b9e      	ldr	r3, [pc, #632]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a896:	4a9d      	ldr	r2, [pc, #628]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a89c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a8aa:	4b98      	ldr	r3, [pc, #608]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	f023 0203 	bic.w	r2, r3, #3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	4994      	ldr	r1, [pc, #592]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0302 	and.w	r3, r3, #2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00a      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a8cc:	4b8f      	ldr	r3, [pc, #572]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d2:	f023 020c 	bic.w	r2, r3, #12
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8da:	498c      	ldr	r1, [pc, #560]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a8ee:	4b87      	ldr	r3, [pc, #540]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fc:	4983      	ldr	r1, [pc, #524]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0308 	and.w	r3, r3, #8
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00a      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a910:	4b7e      	ldr	r3, [pc, #504]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a916:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91e:	497b      	ldr	r1, [pc, #492]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a920:	4313      	orrs	r3, r2
 800a922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0310 	and.w	r3, r3, #16
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a932:	4b76      	ldr	r3, [pc, #472]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a940:	4972      	ldr	r1, [pc, #456]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a942:	4313      	orrs	r3, r2
 800a944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0320 	and.w	r3, r3, #32
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00a      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a954:	4b6d      	ldr	r3, [pc, #436]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a962:	496a      	ldr	r1, [pc, #424]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a964:	4313      	orrs	r3, r2
 800a966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00a      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a976:	4b65      	ldr	r3, [pc, #404]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a984:	4961      	ldr	r1, [pc, #388]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a986:	4313      	orrs	r3, r2
 800a988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00a      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a998:	4b5c      	ldr	r3, [pc, #368]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a6:	4959      	ldr	r1, [pc, #356]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a9ba:	4b54      	ldr	r3, [pc, #336]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a9bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c8:	4950      	ldr	r1, [pc, #320]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a9dc:	4b4b      	ldr	r3, [pc, #300]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a9de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ea:	4948      	ldr	r1, [pc, #288]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a9fe:	4b43      	ldr	r3, [pc, #268]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0c:	493f      	ldr	r1, [pc, #252]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d028      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa20:	4b3a      	ldr	r3, [pc, #232]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa2e:	4937      	ldr	r1, [pc, #220]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa3e:	d106      	bne.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa40:	4b32      	ldr	r3, [pc, #200]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	4a31      	ldr	r2, [pc, #196]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa4a:	60d3      	str	r3, [r2, #12]
 800aa4c:	e011      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa56:	d10c      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 f8c8 	bl	800abf4 <RCCEx_PLLSAI1_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800aa68:	7cfb      	ldrb	r3, [r7, #19]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800aa6e:	7cfb      	ldrb	r3, [r7, #19]
 800aa70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d028      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800aa7e:	4b23      	ldr	r3, [pc, #140]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa8c:	491f      	ldr	r1, [pc, #124]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa9c:	d106      	bne.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	4a1a      	ldr	r2, [pc, #104]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaa8:	60d3      	str	r3, [r2, #12]
 800aaaa:	e011      	b.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aab4:	d10c      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3304      	adds	r3, #4
 800aaba:	2101      	movs	r1, #1
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f899 	bl	800abf4 <RCCEx_PLLSAI1_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800aac6:	7cfb      	ldrb	r3, [r7, #19]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800aacc:	7cfb      	ldrb	r3, [r7, #19]
 800aace:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d02b      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aadc:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaea:	4908      	ldr	r1, [pc, #32]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aafa:	d109      	bne.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aafc:	4b03      	ldr	r3, [pc, #12]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	4a02      	ldr	r2, [pc, #8]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab06:	60d3      	str	r3, [r2, #12]
 800ab08:	e014      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800ab0a:	bf00      	nop
 800ab0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab18:	d10c      	bne.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	2101      	movs	r1, #1
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 f867 	bl	800abf4 <RCCEx_PLLSAI1_Config>
 800ab26:	4603      	mov	r3, r0
 800ab28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ab2a:	7cfb      	ldrb	r3, [r7, #19]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800ab30:	7cfb      	ldrb	r3, [r7, #19]
 800ab32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d02f      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab40:	4b2b      	ldr	r3, [pc, #172]	; (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ab42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab4e:	4928      	ldr	r1, [pc, #160]	; (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ab50:	4313      	orrs	r3, r2
 800ab52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab5e:	d10d      	bne.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3304      	adds	r3, #4
 800ab64:	2102      	movs	r1, #2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f844 	bl	800abf4 <RCCEx_PLLSAI1_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ab70:	7cfb      	ldrb	r3, [r7, #19]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d014      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800ab76:	7cfb      	ldrb	r3, [r7, #19]
 800ab78:	74bb      	strb	r3, [r7, #18]
 800ab7a:	e011      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab84:	d10c      	bne.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3320      	adds	r3, #32
 800ab8a:	2102      	movs	r1, #2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f925 	bl	800addc <RCCEx_PLLSAI2_Config>
 800ab92:	4603      	mov	r3, r0
 800ab94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ab96:	7cfb      	ldrb	r3, [r7, #19]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800ab9c:	7cfb      	ldrb	r3, [r7, #19]
 800ab9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800abac:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800abae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abba:	490d      	ldr	r1, [pc, #52]	; (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00b      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800abce:	4b08      	ldr	r3, [pc, #32]	; (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800abd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abde:	4904      	ldr	r1, [pc, #16]	; (800abf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800abe0:	4313      	orrs	r3, r2
 800abe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800abe6:	7cbb      	ldrb	r3, [r7, #18]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	40021000 	.word	0x40021000

0800abf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ac02:	4b75      	ldr	r3, [pc, #468]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d018      	beq.n	800ac40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ac0e:	4b72      	ldr	r3, [pc, #456]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	f003 0203 	and.w	r2, r3, #3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d10d      	bne.n	800ac3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
       ||
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ac26:	4b6c      	ldr	r3, [pc, #432]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	091b      	lsrs	r3, r3, #4
 800ac2c:	f003 0307 	and.w	r3, r3, #7
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
       ||
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d047      	beq.n	800acca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	73fb      	strb	r3, [r7, #15]
 800ac3e:	e044      	b.n	800acca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d018      	beq.n	800ac7a <RCCEx_PLLSAI1_Config+0x86>
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d825      	bhi.n	800ac98 <RCCEx_PLLSAI1_Config+0xa4>
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d002      	beq.n	800ac56 <RCCEx_PLLSAI1_Config+0x62>
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d009      	beq.n	800ac68 <RCCEx_PLLSAI1_Config+0x74>
 800ac54:	e020      	b.n	800ac98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ac56:	4b60      	ldr	r3, [pc, #384]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d11d      	bne.n	800ac9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac66:	e01a      	b.n	800ac9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ac68:	4b5b      	ldr	r3, [pc, #364]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d116      	bne.n	800aca2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ac78:	e013      	b.n	800aca2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ac7a:	4b57      	ldr	r3, [pc, #348]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10f      	bne.n	800aca6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ac86:	4b54      	ldr	r3, [pc, #336]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d109      	bne.n	800aca6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac96:	e006      	b.n	800aca6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9c:	e004      	b.n	800aca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ac9e:	bf00      	nop
 800aca0:	e002      	b.n	800aca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aca2:	bf00      	nop
 800aca4:	e000      	b.n	800aca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aca6:	bf00      	nop
    }

    if(status == HAL_OK)
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10d      	bne.n	800acca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800acae:	4b4a      	ldr	r3, [pc, #296]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6819      	ldr	r1, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	3b01      	subs	r3, #1
 800acc0:	011b      	lsls	r3, r3, #4
 800acc2:	430b      	orrs	r3, r1
 800acc4:	4944      	ldr	r1, [pc, #272]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d17d      	bne.n	800adcc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800acd0:	4b41      	ldr	r3, [pc, #260]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a40      	ldr	r2, [pc, #256]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800acd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800acda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acdc:	f7fc fb36 	bl	800734c <HAL_GetTick>
 800ace0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ace2:	e009      	b.n	800acf8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ace4:	f7fc fb32 	bl	800734c <HAL_GetTick>
 800ace8:	4602      	mov	r2, r0
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d902      	bls.n	800acf8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	73fb      	strb	r3, [r7, #15]
        break;
 800acf6:	e005      	b.n	800ad04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800acf8:	4b37      	ldr	r3, [pc, #220]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1ef      	bne.n	800ace4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d160      	bne.n	800adcc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d111      	bne.n	800ad34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ad10:	4b31      	ldr	r3, [pc, #196]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ad18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	6892      	ldr	r2, [r2, #8]
 800ad20:	0211      	lsls	r1, r2, #8
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	68d2      	ldr	r2, [r2, #12]
 800ad26:	0912      	lsrs	r2, r2, #4
 800ad28:	0452      	lsls	r2, r2, #17
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	492a      	ldr	r1, [pc, #168]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	610b      	str	r3, [r1, #16]
 800ad32:	e027      	b.n	800ad84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d112      	bne.n	800ad60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ad3a:	4b27      	ldr	r3, [pc, #156]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ad42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6892      	ldr	r2, [r2, #8]
 800ad4a:	0211      	lsls	r1, r2, #8
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	6912      	ldr	r2, [r2, #16]
 800ad50:	0852      	lsrs	r2, r2, #1
 800ad52:	3a01      	subs	r2, #1
 800ad54:	0552      	lsls	r2, r2, #21
 800ad56:	430a      	orrs	r2, r1
 800ad58:	491f      	ldr	r1, [pc, #124]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	610b      	str	r3, [r1, #16]
 800ad5e:	e011      	b.n	800ad84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ad60:	4b1d      	ldr	r3, [pc, #116]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ad68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	6892      	ldr	r2, [r2, #8]
 800ad70:	0211      	lsls	r1, r2, #8
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6952      	ldr	r2, [r2, #20]
 800ad76:	0852      	lsrs	r2, r2, #1
 800ad78:	3a01      	subs	r2, #1
 800ad7a:	0652      	lsls	r2, r2, #25
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	4916      	ldr	r1, [pc, #88]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad80:	4313      	orrs	r3, r2
 800ad82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ad84:	4b14      	ldr	r3, [pc, #80]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a13      	ldr	r2, [pc, #76]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ad8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad90:	f7fc fadc 	bl	800734c <HAL_GetTick>
 800ad94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ad96:	e009      	b.n	800adac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad98:	f7fc fad8 	bl	800734c <HAL_GetTick>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d902      	bls.n	800adac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	73fb      	strb	r3, [r7, #15]
          break;
 800adaa:	e005      	b.n	800adb8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0ef      	beq.n	800ad98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d106      	bne.n	800adcc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800adbe:	4b06      	ldr	r3, [pc, #24]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800adc0:	691a      	ldr	r2, [r3, #16]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	4904      	ldr	r1, [pc, #16]	; (800add8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800adc8:	4313      	orrs	r3, r2
 800adca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	40021000 	.word	0x40021000

0800addc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800adea:	4b6a      	ldr	r3, [pc, #424]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f003 0303 	and.w	r3, r3, #3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d018      	beq.n	800ae28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800adf6:	4b67      	ldr	r3, [pc, #412]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f003 0203 	and.w	r2, r3, #3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d10d      	bne.n	800ae22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
       ||
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d009      	beq.n	800ae22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800ae0e:	4b61      	ldr	r3, [pc, #388]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	091b      	lsrs	r3, r3, #4
 800ae14:	f003 0307 	and.w	r3, r3, #7
 800ae18:	1c5a      	adds	r2, r3, #1
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
       ||
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d047      	beq.n	800aeb2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	73fb      	strb	r3, [r7, #15]
 800ae26:	e044      	b.n	800aeb2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b03      	cmp	r3, #3
 800ae2e:	d018      	beq.n	800ae62 <RCCEx_PLLSAI2_Config+0x86>
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d825      	bhi.n	800ae80 <RCCEx_PLLSAI2_Config+0xa4>
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d002      	beq.n	800ae3e <RCCEx_PLLSAI2_Config+0x62>
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d009      	beq.n	800ae50 <RCCEx_PLLSAI2_Config+0x74>
 800ae3c:	e020      	b.n	800ae80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ae3e:	4b55      	ldr	r3, [pc, #340]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d11d      	bne.n	800ae86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae4e:	e01a      	b.n	800ae86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ae50:	4b50      	ldr	r3, [pc, #320]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d116      	bne.n	800ae8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae60:	e013      	b.n	800ae8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ae62:	4b4c      	ldr	r3, [pc, #304]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10f      	bne.n	800ae8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ae6e:	4b49      	ldr	r3, [pc, #292]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae7e:	e006      	b.n	800ae8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
      break;
 800ae84:	e004      	b.n	800ae90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ae86:	bf00      	nop
 800ae88:	e002      	b.n	800ae90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ae8a:	bf00      	nop
 800ae8c:	e000      	b.n	800ae90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ae8e:	bf00      	nop
    }

    if(status == HAL_OK)
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10d      	bne.n	800aeb2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ae96:	4b3f      	ldr	r3, [pc, #252]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6819      	ldr	r1, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	4939      	ldr	r1, [pc, #228]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d167      	bne.n	800af88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800aeb8:	4b36      	ldr	r3, [pc, #216]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a35      	ldr	r2, [pc, #212]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aec4:	f7fc fa42 	bl	800734c <HAL_GetTick>
 800aec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aeca:	e009      	b.n	800aee0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800aecc:	f7fc fa3e 	bl	800734c <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d902      	bls.n	800aee0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	73fb      	strb	r3, [r7, #15]
        break;
 800aede:	e005      	b.n	800aeec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aee0:	4b2c      	ldr	r3, [pc, #176]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1ef      	bne.n	800aecc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d14a      	bne.n	800af88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d111      	bne.n	800af1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800aef8:	4b26      	ldr	r3, [pc, #152]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800af00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	6892      	ldr	r2, [r2, #8]
 800af08:	0211      	lsls	r1, r2, #8
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	68d2      	ldr	r2, [r2, #12]
 800af0e:	0912      	lsrs	r2, r2, #4
 800af10:	0452      	lsls	r2, r2, #17
 800af12:	430a      	orrs	r2, r1
 800af14:	491f      	ldr	r1, [pc, #124]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af16:	4313      	orrs	r3, r2
 800af18:	614b      	str	r3, [r1, #20]
 800af1a:	e011      	b.n	800af40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800af1c:	4b1d      	ldr	r3, [pc, #116]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800af24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	6892      	ldr	r2, [r2, #8]
 800af2c:	0211      	lsls	r1, r2, #8
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	6912      	ldr	r2, [r2, #16]
 800af32:	0852      	lsrs	r2, r2, #1
 800af34:	3a01      	subs	r2, #1
 800af36:	0652      	lsls	r2, r2, #25
 800af38:	430a      	orrs	r2, r1
 800af3a:	4916      	ldr	r1, [pc, #88]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af3c:	4313      	orrs	r3, r2
 800af3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800af40:	4b14      	ldr	r3, [pc, #80]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a13      	ldr	r2, [pc, #76]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af4c:	f7fc f9fe 	bl	800734c <HAL_GetTick>
 800af50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800af52:	e009      	b.n	800af68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800af54:	f7fc f9fa 	bl	800734c <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d902      	bls.n	800af68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	73fb      	strb	r3, [r7, #15]
          break;
 800af66:	e005      	b.n	800af74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800af68:	4b0a      	ldr	r3, [pc, #40]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d0ef      	beq.n	800af54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800af7a:	4b06      	ldr	r3, [pc, #24]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af7c:	695a      	ldr	r2, [r3, #20]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	4904      	ldr	r1, [pc, #16]	; (800af94 <RCCEx_PLLSAI2_Config+0x1b8>)
 800af84:	4313      	orrs	r3, r2
 800af86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800af88:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	40021000 	.word	0x40021000

0800af98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e049      	b.n	800b03e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f8 ffee 	bl	8003fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3304      	adds	r3, #4
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f000 fab6 	bl	800b548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d001      	beq.n	800b060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e04f      	b.n	800b100 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a23      	ldr	r2, [pc, #140]	; (800b10c <HAL_TIM_Base_Start_IT+0xc4>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d01d      	beq.n	800b0be <HAL_TIM_Base_Start_IT+0x76>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08a:	d018      	beq.n	800b0be <HAL_TIM_Base_Start_IT+0x76>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a1f      	ldr	r2, [pc, #124]	; (800b110 <HAL_TIM_Base_Start_IT+0xc8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d013      	beq.n	800b0be <HAL_TIM_Base_Start_IT+0x76>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a1e      	ldr	r2, [pc, #120]	; (800b114 <HAL_TIM_Base_Start_IT+0xcc>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00e      	beq.n	800b0be <HAL_TIM_Base_Start_IT+0x76>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a1c      	ldr	r2, [pc, #112]	; (800b118 <HAL_TIM_Base_Start_IT+0xd0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d009      	beq.n	800b0be <HAL_TIM_Base_Start_IT+0x76>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <HAL_TIM_Base_Start_IT+0xd4>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d004      	beq.n	800b0be <HAL_TIM_Base_Start_IT+0x76>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a19      	ldr	r2, [pc, #100]	; (800b120 <HAL_TIM_Base_Start_IT+0xd8>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d115      	bne.n	800b0ea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689a      	ldr	r2, [r3, #8]
 800b0c4:	4b17      	ldr	r3, [pc, #92]	; (800b124 <HAL_TIM_Base_Start_IT+0xdc>)
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b06      	cmp	r3, #6
 800b0ce:	d015      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0xb4>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0d6:	d011      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0201 	orr.w	r2, r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e8:	e008      	b.n	800b0fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0201 	orr.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	e000      	b.n	800b0fe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	40012c00 	.word	0x40012c00
 800b110:	40000400 	.word	0x40000400
 800b114:	40000800 	.word	0x40000800
 800b118:	40000c00 	.word	0x40000c00
 800b11c:	40013400 	.word	0x40013400
 800b120:	40014000 	.word	0x40014000
 800b124:	00010007 	.word	0x00010007

0800b128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d122      	bne.n	800b184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d11b      	bne.n	800b184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f06f 0202 	mvn.w	r2, #2
 800b154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	f003 0303 	and.w	r3, r3, #3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f9ce 	bl	800b50c <HAL_TIM_IC_CaptureCallback>
 800b170:	e005      	b.n	800b17e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f9c0 	bl	800b4f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f9d1 	bl	800b520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d122      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d11b      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f06f 0204 	mvn.w	r2, #4
 800b1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d003      	beq.n	800b1c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f9a4 	bl	800b50c <HAL_TIM_IC_CaptureCallback>
 800b1c4:	e005      	b.n	800b1d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f996 	bl	800b4f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f9a7 	bl	800b520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b08      	cmp	r3, #8
 800b1e4:	d122      	bne.n	800b22c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d11b      	bne.n	800b22c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0208 	mvn.w	r2, #8
 800b1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2204      	movs	r2, #4
 800b202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 f97a 	bl	800b50c <HAL_TIM_IC_CaptureCallback>
 800b218:	e005      	b.n	800b226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f96c 	bl	800b4f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f97d 	bl	800b520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	2b10      	cmp	r3, #16
 800b238:	d122      	bne.n	800b280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0310 	and.w	r3, r3, #16
 800b244:	2b10      	cmp	r3, #16
 800b246:	d11b      	bne.n	800b280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0210 	mvn.w	r2, #16
 800b250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2208      	movs	r2, #8
 800b256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b262:	2b00      	cmp	r3, #0
 800b264:	d003      	beq.n	800b26e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f950 	bl	800b50c <HAL_TIM_IC_CaptureCallback>
 800b26c:	e005      	b.n	800b27a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f942 	bl	800b4f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f953 	bl	800b520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d10e      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d107      	bne.n	800b2ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f06f 0201 	mvn.w	r2, #1
 800b2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7f7 ffdc 	bl	8003264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b6:	2b80      	cmp	r3, #128	; 0x80
 800b2b8:	d10e      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c4:	2b80      	cmp	r3, #128	; 0x80
 800b2c6:	d107      	bne.n	800b2d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fafe 	bl	800b8d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2e6:	d10e      	bne.n	800b306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f2:	2b80      	cmp	r3, #128	; 0x80
 800b2f4:	d107      	bne.n	800b306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 faf1 	bl	800b8e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	d10e      	bne.n	800b332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b31e:	2b40      	cmp	r3, #64	; 0x40
 800b320:	d107      	bne.n	800b332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f901 	bl	800b534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d10e      	bne.n	800b35e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	f003 0320 	and.w	r3, r3, #32
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	d107      	bne.n	800b35e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f06f 0220 	mvn.w	r2, #32
 800b356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 fab1 	bl	800b8c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d101      	bne.n	800b382 <HAL_TIM_ConfigClockSource+0x1c>
 800b37e:	2302      	movs	r3, #2
 800b380:	e0b6      	b.n	800b4f0 <HAL_TIM_ConfigClockSource+0x18a>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2202      	movs	r2, #2
 800b38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b3a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3be:	d03e      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0xd8>
 800b3c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c4:	f200 8087 	bhi.w	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3cc:	f000 8086 	beq.w	800b4dc <HAL_TIM_ConfigClockSource+0x176>
 800b3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d4:	d87f      	bhi.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b3d6:	2b70      	cmp	r3, #112	; 0x70
 800b3d8:	d01a      	beq.n	800b410 <HAL_TIM_ConfigClockSource+0xaa>
 800b3da:	2b70      	cmp	r3, #112	; 0x70
 800b3dc:	d87b      	bhi.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b3de:	2b60      	cmp	r3, #96	; 0x60
 800b3e0:	d050      	beq.n	800b484 <HAL_TIM_ConfigClockSource+0x11e>
 800b3e2:	2b60      	cmp	r3, #96	; 0x60
 800b3e4:	d877      	bhi.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b3e6:	2b50      	cmp	r3, #80	; 0x50
 800b3e8:	d03c      	beq.n	800b464 <HAL_TIM_ConfigClockSource+0xfe>
 800b3ea:	2b50      	cmp	r3, #80	; 0x50
 800b3ec:	d873      	bhi.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b3ee:	2b40      	cmp	r3, #64	; 0x40
 800b3f0:	d058      	beq.n	800b4a4 <HAL_TIM_ConfigClockSource+0x13e>
 800b3f2:	2b40      	cmp	r3, #64	; 0x40
 800b3f4:	d86f      	bhi.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b3f6:	2b30      	cmp	r3, #48	; 0x30
 800b3f8:	d064      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x15e>
 800b3fa:	2b30      	cmp	r3, #48	; 0x30
 800b3fc:	d86b      	bhi.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b3fe:	2b20      	cmp	r3, #32
 800b400:	d060      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x15e>
 800b402:	2b20      	cmp	r3, #32
 800b404:	d867      	bhi.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
 800b406:	2b00      	cmp	r3, #0
 800b408:	d05c      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x15e>
 800b40a:	2b10      	cmp	r3, #16
 800b40c:	d05a      	beq.n	800b4c4 <HAL_TIM_ConfigClockSource+0x15e>
 800b40e:	e062      	b.n	800b4d6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6818      	ldr	r0, [r3, #0]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	6899      	ldr	r1, [r3, #8]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f000 f9a6 	bl	800b770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b432:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	609a      	str	r2, [r3, #8]
      break;
 800b43c:	e04f      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6899      	ldr	r1, [r3, #8]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	f000 f98f 	bl	800b770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689a      	ldr	r2, [r3, #8]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b460:	609a      	str	r2, [r3, #8]
      break;
 800b462:	e03c      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6818      	ldr	r0, [r3, #0]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	6859      	ldr	r1, [r3, #4]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	461a      	mov	r2, r3
 800b472:	f000 f903 	bl	800b67c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2150      	movs	r1, #80	; 0x50
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 f95c 	bl	800b73a <TIM_ITRx_SetConfig>
      break;
 800b482:	e02c      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	6859      	ldr	r1, [r3, #4]
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	461a      	mov	r2, r3
 800b492:	f000 f922 	bl	800b6da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2160      	movs	r1, #96	; 0x60
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 f94c 	bl	800b73a <TIM_ITRx_SetConfig>
      break;
 800b4a2:	e01c      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6818      	ldr	r0, [r3, #0]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	6859      	ldr	r1, [r3, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f000 f8e3 	bl	800b67c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2140      	movs	r1, #64	; 0x40
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f000 f93c 	bl	800b73a <TIM_ITRx_SetConfig>
      break;
 800b4c2:	e00c      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	f000 f933 	bl	800b73a <TIM_ITRx_SetConfig>
      break;
 800b4d4:	e003      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4da:	e000      	b.n	800b4de <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b4dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a40      	ldr	r2, [pc, #256]	; (800b65c <TIM_Base_SetConfig+0x114>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d013      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b566:	d00f      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a3d      	ldr	r2, [pc, #244]	; (800b660 <TIM_Base_SetConfig+0x118>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d00b      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a3c      	ldr	r2, [pc, #240]	; (800b664 <TIM_Base_SetConfig+0x11c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d007      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a3b      	ldr	r2, [pc, #236]	; (800b668 <TIM_Base_SetConfig+0x120>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d003      	beq.n	800b588 <TIM_Base_SetConfig+0x40>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a3a      	ldr	r2, [pc, #232]	; (800b66c <TIM_Base_SetConfig+0x124>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d108      	bne.n	800b59a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b58e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a2f      	ldr	r2, [pc, #188]	; (800b65c <TIM_Base_SetConfig+0x114>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d01f      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a8:	d01b      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a2c      	ldr	r2, [pc, #176]	; (800b660 <TIM_Base_SetConfig+0x118>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d017      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a2b      	ldr	r2, [pc, #172]	; (800b664 <TIM_Base_SetConfig+0x11c>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d013      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a2a      	ldr	r2, [pc, #168]	; (800b668 <TIM_Base_SetConfig+0x120>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d00f      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a29      	ldr	r2, [pc, #164]	; (800b66c <TIM_Base_SetConfig+0x124>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d00b      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a28      	ldr	r2, [pc, #160]	; (800b670 <TIM_Base_SetConfig+0x128>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d007      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a27      	ldr	r2, [pc, #156]	; (800b674 <TIM_Base_SetConfig+0x12c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d003      	beq.n	800b5e2 <TIM_Base_SetConfig+0x9a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a26      	ldr	r2, [pc, #152]	; (800b678 <TIM_Base_SetConfig+0x130>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d108      	bne.n	800b5f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	689a      	ldr	r2, [r3, #8]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a10      	ldr	r2, [pc, #64]	; (800b65c <TIM_Base_SetConfig+0x114>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d00f      	beq.n	800b640 <TIM_Base_SetConfig+0xf8>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a12      	ldr	r2, [pc, #72]	; (800b66c <TIM_Base_SetConfig+0x124>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d00b      	beq.n	800b640 <TIM_Base_SetConfig+0xf8>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a11      	ldr	r2, [pc, #68]	; (800b670 <TIM_Base_SetConfig+0x128>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d007      	beq.n	800b640 <TIM_Base_SetConfig+0xf8>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a10      	ldr	r2, [pc, #64]	; (800b674 <TIM_Base_SetConfig+0x12c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d003      	beq.n	800b640 <TIM_Base_SetConfig+0xf8>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a0f      	ldr	r2, [pc, #60]	; (800b678 <TIM_Base_SetConfig+0x130>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d103      	bne.n	800b648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	691a      	ldr	r2, [r3, #16]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	615a      	str	r2, [r3, #20]
}
 800b64e:	bf00      	nop
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	40012c00 	.word	0x40012c00
 800b660:	40000400 	.word	0x40000400
 800b664:	40000800 	.word	0x40000800
 800b668:	40000c00 	.word	0x40000c00
 800b66c:	40013400 	.word	0x40013400
 800b670:	40014000 	.word	0x40014000
 800b674:	40014400 	.word	0x40014400
 800b678:	40014800 	.word	0x40014800

0800b67c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	f023 0201 	bic.w	r2, r3, #1
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	011b      	lsls	r3, r3, #4
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f023 030a 	bic.w	r3, r3, #10
 800b6b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	621a      	str	r2, [r3, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	371c      	adds	r7, #28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b087      	sub	sp, #28
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	f023 0210 	bic.w	r2, r3, #16
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	031b      	lsls	r3, r3, #12
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b716:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	4313      	orrs	r3, r2
 800b720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	621a      	str	r2, [r3, #32]
}
 800b72e:	bf00      	nop
 800b730:	371c      	adds	r7, #28
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	f043 0307 	orr.w	r3, r3, #7
 800b75c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	609a      	str	r2, [r3, #8]
}
 800b764:	bf00      	nop
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b78a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	021a      	lsls	r2, r3, #8
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	431a      	orrs	r2, r3
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4313      	orrs	r3, r2
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	609a      	str	r2, [r3, #8]
}
 800b7a4:	bf00      	nop
 800b7a6:	371c      	adds	r7, #28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e068      	b.n	800b89a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a2e      	ldr	r2, [pc, #184]	; (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d004      	beq.n	800b7fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a2d      	ldr	r2, [pc, #180]	; (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d108      	bne.n	800b80e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b802:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a1e      	ldr	r2, [pc, #120]	; (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d01d      	beq.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b83a:	d018      	beq.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a1b      	ldr	r2, [pc, #108]	; (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d013      	beq.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1a      	ldr	r2, [pc, #104]	; (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d00e      	beq.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a18      	ldr	r2, [pc, #96]	; (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d009      	beq.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a13      	ldr	r2, [pc, #76]	; (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d004      	beq.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a14      	ldr	r2, [pc, #80]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d10c      	bne.n	800b888 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	40012c00 	.word	0x40012c00
 800b8ac:	40013400 	.word	0x40013400
 800b8b0:	40000400 	.word	0x40000400
 800b8b4:	40000800 	.word	0x40000800
 800b8b8:	40000c00 	.word	0x40000c00
 800b8bc:	40014000 	.word	0x40014000

0800b8c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	e040      	b.n	800b990 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7f8 fb62 	bl	8003fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2224      	movs	r2, #36	; 0x24
 800b928:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f022 0201 	bic.w	r2, r2, #1
 800b938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f8c0 	bl	800bac0 <UART_SetConfig>
 800b940:	4603      	mov	r3, r0
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e022      	b.n	800b990 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fb3e 	bl	800bfd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689a      	ldr	r2, [r3, #8]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0201 	orr.w	r2, r2, #1
 800b986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fbc5 	bl	800c118 <UART_CheckIdleState>
 800b98e:	4603      	mov	r3, r0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08a      	sub	sp, #40	; 0x28
 800b99c:	af02      	add	r7, sp, #8
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9ac:	2b20      	cmp	r3, #32
 800b9ae:	f040 8082 	bne.w	800bab6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <HAL_UART_Transmit+0x26>
 800b9b8:	88fb      	ldrh	r3, [r7, #6]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e07a      	b.n	800bab8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d101      	bne.n	800b9d0 <HAL_UART_Transmit+0x38>
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	e073      	b.n	800bab8 <HAL_UART_Transmit+0x120>
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2221      	movs	r2, #33	; 0x21
 800b9e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9e6:	f7fb fcb1 	bl	800734c <HAL_GetTick>
 800b9ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	88fa      	ldrh	r2, [r7, #6]
 800b9f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	88fa      	ldrh	r2, [r7, #6]
 800b9f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba04:	d108      	bne.n	800ba18 <HAL_UART_Transmit+0x80>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d104      	bne.n	800ba18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	e003      	b.n	800ba20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800ba28:	e02d      	b.n	800ba86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2200      	movs	r2, #0
 800ba32:	2180      	movs	r1, #128	; 0x80
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fbb8 	bl	800c1aa <UART_WaitOnFlagUntilTimeout>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e039      	b.n	800bab8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	881a      	ldrh	r2, [r3, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba56:	b292      	uxth	r2, r2
 800ba58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	3302      	adds	r3, #2
 800ba5e:	61bb      	str	r3, [r7, #24]
 800ba60:	e008      	b.n	800ba74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	b292      	uxth	r2, r2
 800ba6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	3301      	adds	r3, #1
 800ba72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1cb      	bne.n	800ba2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	2140      	movs	r1, #64	; 0x40
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 fb84 	bl	800c1aa <UART_WaitOnFlagUntilTimeout>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d001      	beq.n	800baac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800baa8:	2303      	movs	r3, #3
 800baaa:	e005      	b.n	800bab8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2220      	movs	r2, #32
 800bab0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	e000      	b.n	800bab8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800bab6:	2302      	movs	r3, #2
  }
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3720      	adds	r7, #32
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bac0:	b5b0      	push	{r4, r5, r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bac8:	2300      	movs	r3, #0
 800baca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	689a      	ldr	r2, [r3, #8]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	431a      	orrs	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	431a      	orrs	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	69db      	ldr	r3, [r3, #28]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	4bad      	ldr	r3, [pc, #692]	; (800bda0 <UART_SetConfig+0x2e0>)
 800baec:	4013      	ands	r3, r2
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	6812      	ldr	r2, [r2, #0]
 800baf2:	69f9      	ldr	r1, [r7, #28]
 800baf4:	430b      	orrs	r3, r1
 800baf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68da      	ldr	r2, [r3, #12]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	430a      	orrs	r2, r1
 800bb0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4aa2      	ldr	r2, [pc, #648]	; (800bda4 <UART_SetConfig+0x2e4>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d004      	beq.n	800bb28 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	69fa      	ldr	r2, [r7, #28]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	69fa      	ldr	r2, [r7, #28]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a99      	ldr	r2, [pc, #612]	; (800bda8 <UART_SetConfig+0x2e8>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d121      	bne.n	800bb8a <UART_SetConfig+0xca>
 800bb46:	4b99      	ldr	r3, [pc, #612]	; (800bdac <UART_SetConfig+0x2ec>)
 800bb48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb4c:	f003 0303 	and.w	r3, r3, #3
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d817      	bhi.n	800bb84 <UART_SetConfig+0xc4>
 800bb54:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <UART_SetConfig+0x9c>)
 800bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5a:	bf00      	nop
 800bb5c:	0800bb6d 	.word	0x0800bb6d
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bb73 	.word	0x0800bb73
 800bb68:	0800bb7f 	.word	0x0800bb7f
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	76fb      	strb	r3, [r7, #27]
 800bb70:	e0e7      	b.n	800bd42 <UART_SetConfig+0x282>
 800bb72:	2302      	movs	r3, #2
 800bb74:	76fb      	strb	r3, [r7, #27]
 800bb76:	e0e4      	b.n	800bd42 <UART_SetConfig+0x282>
 800bb78:	2304      	movs	r3, #4
 800bb7a:	76fb      	strb	r3, [r7, #27]
 800bb7c:	e0e1      	b.n	800bd42 <UART_SetConfig+0x282>
 800bb7e:	2308      	movs	r3, #8
 800bb80:	76fb      	strb	r3, [r7, #27]
 800bb82:	e0de      	b.n	800bd42 <UART_SetConfig+0x282>
 800bb84:	2310      	movs	r3, #16
 800bb86:	76fb      	strb	r3, [r7, #27]
 800bb88:	e0db      	b.n	800bd42 <UART_SetConfig+0x282>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a88      	ldr	r2, [pc, #544]	; (800bdb0 <UART_SetConfig+0x2f0>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d132      	bne.n	800bbfa <UART_SetConfig+0x13a>
 800bb94:	4b85      	ldr	r3, [pc, #532]	; (800bdac <UART_SetConfig+0x2ec>)
 800bb96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9a:	f003 030c 	and.w	r3, r3, #12
 800bb9e:	2b0c      	cmp	r3, #12
 800bba0:	d828      	bhi.n	800bbf4 <UART_SetConfig+0x134>
 800bba2:	a201      	add	r2, pc, #4	; (adr r2, 800bba8 <UART_SetConfig+0xe8>)
 800bba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba8:	0800bbdd 	.word	0x0800bbdd
 800bbac:	0800bbf5 	.word	0x0800bbf5
 800bbb0:	0800bbf5 	.word	0x0800bbf5
 800bbb4:	0800bbf5 	.word	0x0800bbf5
 800bbb8:	0800bbe9 	.word	0x0800bbe9
 800bbbc:	0800bbf5 	.word	0x0800bbf5
 800bbc0:	0800bbf5 	.word	0x0800bbf5
 800bbc4:	0800bbf5 	.word	0x0800bbf5
 800bbc8:	0800bbe3 	.word	0x0800bbe3
 800bbcc:	0800bbf5 	.word	0x0800bbf5
 800bbd0:	0800bbf5 	.word	0x0800bbf5
 800bbd4:	0800bbf5 	.word	0x0800bbf5
 800bbd8:	0800bbef 	.word	0x0800bbef
 800bbdc:	2300      	movs	r3, #0
 800bbde:	76fb      	strb	r3, [r7, #27]
 800bbe0:	e0af      	b.n	800bd42 <UART_SetConfig+0x282>
 800bbe2:	2302      	movs	r3, #2
 800bbe4:	76fb      	strb	r3, [r7, #27]
 800bbe6:	e0ac      	b.n	800bd42 <UART_SetConfig+0x282>
 800bbe8:	2304      	movs	r3, #4
 800bbea:	76fb      	strb	r3, [r7, #27]
 800bbec:	e0a9      	b.n	800bd42 <UART_SetConfig+0x282>
 800bbee:	2308      	movs	r3, #8
 800bbf0:	76fb      	strb	r3, [r7, #27]
 800bbf2:	e0a6      	b.n	800bd42 <UART_SetConfig+0x282>
 800bbf4:	2310      	movs	r3, #16
 800bbf6:	76fb      	strb	r3, [r7, #27]
 800bbf8:	e0a3      	b.n	800bd42 <UART_SetConfig+0x282>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a6d      	ldr	r2, [pc, #436]	; (800bdb4 <UART_SetConfig+0x2f4>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d120      	bne.n	800bc46 <UART_SetConfig+0x186>
 800bc04:	4b69      	ldr	r3, [pc, #420]	; (800bdac <UART_SetConfig+0x2ec>)
 800bc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc0e:	2b30      	cmp	r3, #48	; 0x30
 800bc10:	d013      	beq.n	800bc3a <UART_SetConfig+0x17a>
 800bc12:	2b30      	cmp	r3, #48	; 0x30
 800bc14:	d814      	bhi.n	800bc40 <UART_SetConfig+0x180>
 800bc16:	2b20      	cmp	r3, #32
 800bc18:	d009      	beq.n	800bc2e <UART_SetConfig+0x16e>
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d810      	bhi.n	800bc40 <UART_SetConfig+0x180>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <UART_SetConfig+0x168>
 800bc22:	2b10      	cmp	r3, #16
 800bc24:	d006      	beq.n	800bc34 <UART_SetConfig+0x174>
 800bc26:	e00b      	b.n	800bc40 <UART_SetConfig+0x180>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	76fb      	strb	r3, [r7, #27]
 800bc2c:	e089      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc2e:	2302      	movs	r3, #2
 800bc30:	76fb      	strb	r3, [r7, #27]
 800bc32:	e086      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc34:	2304      	movs	r3, #4
 800bc36:	76fb      	strb	r3, [r7, #27]
 800bc38:	e083      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	76fb      	strb	r3, [r7, #27]
 800bc3e:	e080      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc40:	2310      	movs	r3, #16
 800bc42:	76fb      	strb	r3, [r7, #27]
 800bc44:	e07d      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a5b      	ldr	r2, [pc, #364]	; (800bdb8 <UART_SetConfig+0x2f8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d120      	bne.n	800bc92 <UART_SetConfig+0x1d2>
 800bc50:	4b56      	ldr	r3, [pc, #344]	; (800bdac <UART_SetConfig+0x2ec>)
 800bc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc5a:	2bc0      	cmp	r3, #192	; 0xc0
 800bc5c:	d013      	beq.n	800bc86 <UART_SetConfig+0x1c6>
 800bc5e:	2bc0      	cmp	r3, #192	; 0xc0
 800bc60:	d814      	bhi.n	800bc8c <UART_SetConfig+0x1cc>
 800bc62:	2b80      	cmp	r3, #128	; 0x80
 800bc64:	d009      	beq.n	800bc7a <UART_SetConfig+0x1ba>
 800bc66:	2b80      	cmp	r3, #128	; 0x80
 800bc68:	d810      	bhi.n	800bc8c <UART_SetConfig+0x1cc>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <UART_SetConfig+0x1b4>
 800bc6e:	2b40      	cmp	r3, #64	; 0x40
 800bc70:	d006      	beq.n	800bc80 <UART_SetConfig+0x1c0>
 800bc72:	e00b      	b.n	800bc8c <UART_SetConfig+0x1cc>
 800bc74:	2300      	movs	r3, #0
 800bc76:	76fb      	strb	r3, [r7, #27]
 800bc78:	e063      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	76fb      	strb	r3, [r7, #27]
 800bc7e:	e060      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc80:	2304      	movs	r3, #4
 800bc82:	76fb      	strb	r3, [r7, #27]
 800bc84:	e05d      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc86:	2308      	movs	r3, #8
 800bc88:	76fb      	strb	r3, [r7, #27]
 800bc8a:	e05a      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc8c:	2310      	movs	r3, #16
 800bc8e:	76fb      	strb	r3, [r7, #27]
 800bc90:	e057      	b.n	800bd42 <UART_SetConfig+0x282>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a49      	ldr	r2, [pc, #292]	; (800bdbc <UART_SetConfig+0x2fc>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d125      	bne.n	800bce8 <UART_SetConfig+0x228>
 800bc9c:	4b43      	ldr	r3, [pc, #268]	; (800bdac <UART_SetConfig+0x2ec>)
 800bc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcaa:	d017      	beq.n	800bcdc <UART_SetConfig+0x21c>
 800bcac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcb0:	d817      	bhi.n	800bce2 <UART_SetConfig+0x222>
 800bcb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcb6:	d00b      	beq.n	800bcd0 <UART_SetConfig+0x210>
 800bcb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcbc:	d811      	bhi.n	800bce2 <UART_SetConfig+0x222>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <UART_SetConfig+0x20a>
 800bcc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcc6:	d006      	beq.n	800bcd6 <UART_SetConfig+0x216>
 800bcc8:	e00b      	b.n	800bce2 <UART_SetConfig+0x222>
 800bcca:	2300      	movs	r3, #0
 800bccc:	76fb      	strb	r3, [r7, #27]
 800bcce:	e038      	b.n	800bd42 <UART_SetConfig+0x282>
 800bcd0:	2302      	movs	r3, #2
 800bcd2:	76fb      	strb	r3, [r7, #27]
 800bcd4:	e035      	b.n	800bd42 <UART_SetConfig+0x282>
 800bcd6:	2304      	movs	r3, #4
 800bcd8:	76fb      	strb	r3, [r7, #27]
 800bcda:	e032      	b.n	800bd42 <UART_SetConfig+0x282>
 800bcdc:	2308      	movs	r3, #8
 800bcde:	76fb      	strb	r3, [r7, #27]
 800bce0:	e02f      	b.n	800bd42 <UART_SetConfig+0x282>
 800bce2:	2310      	movs	r3, #16
 800bce4:	76fb      	strb	r3, [r7, #27]
 800bce6:	e02c      	b.n	800bd42 <UART_SetConfig+0x282>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a2d      	ldr	r2, [pc, #180]	; (800bda4 <UART_SetConfig+0x2e4>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d125      	bne.n	800bd3e <UART_SetConfig+0x27e>
 800bcf2:	4b2e      	ldr	r3, [pc, #184]	; (800bdac <UART_SetConfig+0x2ec>)
 800bcf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bcfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd00:	d017      	beq.n	800bd32 <UART_SetConfig+0x272>
 800bd02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd06:	d817      	bhi.n	800bd38 <UART_SetConfig+0x278>
 800bd08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd0c:	d00b      	beq.n	800bd26 <UART_SetConfig+0x266>
 800bd0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd12:	d811      	bhi.n	800bd38 <UART_SetConfig+0x278>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <UART_SetConfig+0x260>
 800bd18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd1c:	d006      	beq.n	800bd2c <UART_SetConfig+0x26c>
 800bd1e:	e00b      	b.n	800bd38 <UART_SetConfig+0x278>
 800bd20:	2300      	movs	r3, #0
 800bd22:	76fb      	strb	r3, [r7, #27]
 800bd24:	e00d      	b.n	800bd42 <UART_SetConfig+0x282>
 800bd26:	2302      	movs	r3, #2
 800bd28:	76fb      	strb	r3, [r7, #27]
 800bd2a:	e00a      	b.n	800bd42 <UART_SetConfig+0x282>
 800bd2c:	2304      	movs	r3, #4
 800bd2e:	76fb      	strb	r3, [r7, #27]
 800bd30:	e007      	b.n	800bd42 <UART_SetConfig+0x282>
 800bd32:	2308      	movs	r3, #8
 800bd34:	76fb      	strb	r3, [r7, #27]
 800bd36:	e004      	b.n	800bd42 <UART_SetConfig+0x282>
 800bd38:	2310      	movs	r3, #16
 800bd3a:	76fb      	strb	r3, [r7, #27]
 800bd3c:	e001      	b.n	800bd42 <UART_SetConfig+0x282>
 800bd3e:	2310      	movs	r3, #16
 800bd40:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a17      	ldr	r2, [pc, #92]	; (800bda4 <UART_SetConfig+0x2e4>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	f040 8087 	bne.w	800be5c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd4e:	7efb      	ldrb	r3, [r7, #27]
 800bd50:	2b08      	cmp	r3, #8
 800bd52:	d837      	bhi.n	800bdc4 <UART_SetConfig+0x304>
 800bd54:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <UART_SetConfig+0x29c>)
 800bd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5a:	bf00      	nop
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bdc5 	.word	0x0800bdc5
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bdc5 	.word	0x0800bdc5
 800bd6c:	0800bd8f 	.word	0x0800bd8f
 800bd70:	0800bdc5 	.word	0x0800bdc5
 800bd74:	0800bdc5 	.word	0x0800bdc5
 800bd78:	0800bdc5 	.word	0x0800bdc5
 800bd7c:	0800bd97 	.word	0x0800bd97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd80:	f7fe fb90 	bl	800a4a4 <HAL_RCC_GetPCLK1Freq>
 800bd84:	6178      	str	r0, [r7, #20]
        break;
 800bd86:	e022      	b.n	800bdce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd88:	4b0d      	ldr	r3, [pc, #52]	; (800bdc0 <UART_SetConfig+0x300>)
 800bd8a:	617b      	str	r3, [r7, #20]
        break;
 800bd8c:	e01f      	b.n	800bdce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd8e:	f7fe faf1 	bl	800a374 <HAL_RCC_GetSysClockFreq>
 800bd92:	6178      	str	r0, [r7, #20]
        break;
 800bd94:	e01b      	b.n	800bdce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd9a:	617b      	str	r3, [r7, #20]
        break;
 800bd9c:	e017      	b.n	800bdce <UART_SetConfig+0x30e>
 800bd9e:	bf00      	nop
 800bda0:	efff69f3 	.word	0xefff69f3
 800bda4:	40008000 	.word	0x40008000
 800bda8:	40013800 	.word	0x40013800
 800bdac:	40021000 	.word	0x40021000
 800bdb0:	40004400 	.word	0x40004400
 800bdb4:	40004800 	.word	0x40004800
 800bdb8:	40004c00 	.word	0x40004c00
 800bdbc:	40005000 	.word	0x40005000
 800bdc0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	76bb      	strb	r3, [r7, #26]
        break;
 800bdcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 80f1 	beq.w	800bfb8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	4413      	add	r3, r2
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d305      	bcc.n	800bdf2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d902      	bls.n	800bdf8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	76bb      	strb	r3, [r7, #26]
 800bdf6:	e0df      	b.n	800bfb8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f04f 0100 	mov.w	r1, #0
 800be00:	f04f 0200 	mov.w	r2, #0
 800be04:	f04f 0300 	mov.w	r3, #0
 800be08:	020b      	lsls	r3, r1, #8
 800be0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be0e:	0202      	lsls	r2, r0, #8
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	6849      	ldr	r1, [r1, #4]
 800be14:	0849      	lsrs	r1, r1, #1
 800be16:	4608      	mov	r0, r1
 800be18:	f04f 0100 	mov.w	r1, #0
 800be1c:	1814      	adds	r4, r2, r0
 800be1e:	eb43 0501 	adc.w	r5, r3, r1
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	461a      	mov	r2, r3
 800be28:	f04f 0300 	mov.w	r3, #0
 800be2c:	4620      	mov	r0, r4
 800be2e:	4629      	mov	r1, r5
 800be30:	f7f4 ff0a 	bl	8000c48 <__aeabi_uldivmod>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4613      	mov	r3, r2
 800be3a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be42:	d308      	bcc.n	800be56 <UART_SetConfig+0x396>
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be4a:	d204      	bcs.n	800be56 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	60da      	str	r2, [r3, #12]
 800be54:	e0b0      	b.n	800bfb8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	76bb      	strb	r3, [r7, #26]
 800be5a:	e0ad      	b.n	800bfb8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	69db      	ldr	r3, [r3, #28]
 800be60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be64:	d15b      	bne.n	800bf1e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800be66:	7efb      	ldrb	r3, [r7, #27]
 800be68:	2b08      	cmp	r3, #8
 800be6a:	d828      	bhi.n	800bebe <UART_SetConfig+0x3fe>
 800be6c:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <UART_SetConfig+0x3b4>)
 800be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be72:	bf00      	nop
 800be74:	0800be99 	.word	0x0800be99
 800be78:	0800bea1 	.word	0x0800bea1
 800be7c:	0800bea9 	.word	0x0800bea9
 800be80:	0800bebf 	.word	0x0800bebf
 800be84:	0800beaf 	.word	0x0800beaf
 800be88:	0800bebf 	.word	0x0800bebf
 800be8c:	0800bebf 	.word	0x0800bebf
 800be90:	0800bebf 	.word	0x0800bebf
 800be94:	0800beb7 	.word	0x0800beb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be98:	f7fe fb04 	bl	800a4a4 <HAL_RCC_GetPCLK1Freq>
 800be9c:	6178      	str	r0, [r7, #20]
        break;
 800be9e:	e013      	b.n	800bec8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bea0:	f7fe fb16 	bl	800a4d0 <HAL_RCC_GetPCLK2Freq>
 800bea4:	6178      	str	r0, [r7, #20]
        break;
 800bea6:	e00f      	b.n	800bec8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bea8:	4b49      	ldr	r3, [pc, #292]	; (800bfd0 <UART_SetConfig+0x510>)
 800beaa:	617b      	str	r3, [r7, #20]
        break;
 800beac:	e00c      	b.n	800bec8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800beae:	f7fe fa61 	bl	800a374 <HAL_RCC_GetSysClockFreq>
 800beb2:	6178      	str	r0, [r7, #20]
        break;
 800beb4:	e008      	b.n	800bec8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800beb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beba:	617b      	str	r3, [r7, #20]
        break;
 800bebc:	e004      	b.n	800bec8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	76bb      	strb	r3, [r7, #26]
        break;
 800bec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d074      	beq.n	800bfb8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	005a      	lsls	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	085b      	lsrs	r3, r3, #1
 800bed8:	441a      	add	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2b0f      	cmp	r3, #15
 800bee8:	d916      	bls.n	800bf18 <UART_SetConfig+0x458>
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef0:	d212      	bcs.n	800bf18 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	f023 030f 	bic.w	r3, r3, #15
 800befa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	89fb      	ldrh	r3, [r7, #14]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	89fa      	ldrh	r2, [r7, #14]
 800bf14:	60da      	str	r2, [r3, #12]
 800bf16:	e04f      	b.n	800bfb8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	76bb      	strb	r3, [r7, #26]
 800bf1c:	e04c      	b.n	800bfb8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf1e:	7efb      	ldrb	r3, [r7, #27]
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d828      	bhi.n	800bf76 <UART_SetConfig+0x4b6>
 800bf24:	a201      	add	r2, pc, #4	; (adr r2, 800bf2c <UART_SetConfig+0x46c>)
 800bf26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2a:	bf00      	nop
 800bf2c:	0800bf51 	.word	0x0800bf51
 800bf30:	0800bf59 	.word	0x0800bf59
 800bf34:	0800bf61 	.word	0x0800bf61
 800bf38:	0800bf77 	.word	0x0800bf77
 800bf3c:	0800bf67 	.word	0x0800bf67
 800bf40:	0800bf77 	.word	0x0800bf77
 800bf44:	0800bf77 	.word	0x0800bf77
 800bf48:	0800bf77 	.word	0x0800bf77
 800bf4c:	0800bf6f 	.word	0x0800bf6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf50:	f7fe faa8 	bl	800a4a4 <HAL_RCC_GetPCLK1Freq>
 800bf54:	6178      	str	r0, [r7, #20]
        break;
 800bf56:	e013      	b.n	800bf80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf58:	f7fe faba 	bl	800a4d0 <HAL_RCC_GetPCLK2Freq>
 800bf5c:	6178      	str	r0, [r7, #20]
        break;
 800bf5e:	e00f      	b.n	800bf80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf60:	4b1b      	ldr	r3, [pc, #108]	; (800bfd0 <UART_SetConfig+0x510>)
 800bf62:	617b      	str	r3, [r7, #20]
        break;
 800bf64:	e00c      	b.n	800bf80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf66:	f7fe fa05 	bl	800a374 <HAL_RCC_GetSysClockFreq>
 800bf6a:	6178      	str	r0, [r7, #20]
        break;
 800bf6c:	e008      	b.n	800bf80 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf72:	617b      	str	r3, [r7, #20]
        break;
 800bf74:	e004      	b.n	800bf80 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	76bb      	strb	r3, [r7, #26]
        break;
 800bf7e:	bf00      	nop
    }

    if (pclk != 0U)
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d018      	beq.n	800bfb8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	085a      	lsrs	r2, r3, #1
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	441a      	add	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf98:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b0f      	cmp	r3, #15
 800bf9e:	d909      	bls.n	800bfb4 <UART_SetConfig+0x4f4>
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa6:	d205      	bcs.n	800bfb4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60da      	str	r2, [r3, #12]
 800bfb2:	e001      	b.n	800bfb8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bfc4:	7ebb      	ldrb	r3, [r7, #26]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bdb0      	pop	{r4, r5, r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	00f42400 	.word	0x00f42400

0800bfd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00a      	beq.n	800bffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c002:	f003 0302 	and.w	r3, r3, #2
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00a      	beq.n	800c042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	f003 0308 	and.w	r3, r3, #8
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00a      	beq.n	800c064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	430a      	orrs	r2, r1
 800c062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c068:	f003 0310 	and.w	r3, r3, #16
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00a      	beq.n	800c086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	430a      	orrs	r2, r1
 800c084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08a:	f003 0320 	and.w	r3, r3, #32
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00a      	beq.n	800c0a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	430a      	orrs	r2, r1
 800c0a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01a      	beq.n	800c0ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0d2:	d10a      	bne.n	800c0ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	430a      	orrs	r2, r1
 800c10a:	605a      	str	r2, [r3, #4]
  }
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c128:	f7fb f910 	bl	800734c <HAL_GetTick>
 800c12c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0308 	and.w	r3, r3, #8
 800c138:	2b08      	cmp	r3, #8
 800c13a:	d10e      	bne.n	800c15a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c13c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f82d 	bl	800c1aa <UART_WaitOnFlagUntilTimeout>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e023      	b.n	800c1a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b04      	cmp	r3, #4
 800c166:	d10e      	bne.n	800c186 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f817 	bl	800c1aa <UART_WaitOnFlagUntilTimeout>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d001      	beq.n	800c186 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c182:	2303      	movs	r3, #3
 800c184:	e00d      	b.n	800c1a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2220      	movs	r2, #32
 800c18a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2220      	movs	r2, #32
 800c190:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b09c      	sub	sp, #112	; 0x70
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	603b      	str	r3, [r7, #0]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1ba:	e0a5      	b.n	800c308 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c2:	f000 80a1 	beq.w	800c308 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1c6:	f7fb f8c1 	bl	800734c <HAL_GetTick>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d302      	bcc.n	800c1dc <UART_WaitOnFlagUntilTimeout+0x32>
 800c1d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d13e      	bne.n	800c25a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e4:	e853 3f00 	ldrex	r3, [r3]
 800c1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1f0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c202:	e841 2300 	strex	r3, r2, [r1]
 800c206:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1e6      	bne.n	800c1dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3308      	adds	r3, #8
 800c214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c218:	e853 3f00 	ldrex	r3, [r3]
 800c21c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c220:	f023 0301 	bic.w	r3, r3, #1
 800c224:	663b      	str	r3, [r7, #96]	; 0x60
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3308      	adds	r3, #8
 800c22c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c22e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c236:	e841 2300 	strex	r3, r2, [r1]
 800c23a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1e5      	bne.n	800c20e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2220      	movs	r2, #32
 800c246:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2220      	movs	r2, #32
 800c24c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e067      	b.n	800c32a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f003 0304 	and.w	r3, r3, #4
 800c264:	2b00      	cmp	r3, #0
 800c266:	d04f      	beq.n	800c308 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c276:	d147      	bne.n	800c308 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c280:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	e853 3f00 	ldrex	r3, [r3]
 800c28e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c296:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	461a      	mov	r2, r3
 800c29e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2a8:	e841 2300 	strex	r3, r2, [r1]
 800c2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1e6      	bne.n	800c282 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	e853 3f00 	ldrex	r3, [r3]
 800c2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	f023 0301 	bic.w	r3, r3, #1
 800c2ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2d4:	623a      	str	r2, [r7, #32]
 800c2d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d8:	69f9      	ldr	r1, [r7, #28]
 800c2da:	6a3a      	ldr	r2, [r7, #32]
 800c2dc:	e841 2300 	strex	r3, r2, [r1]
 800c2e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1e5      	bne.n	800c2b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2220      	movs	r2, #32
 800c2ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2220      	movs	r2, #32
 800c2f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e010      	b.n	800c32a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	69da      	ldr	r2, [r3, #28]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	4013      	ands	r3, r2
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	429a      	cmp	r2, r3
 800c316:	bf0c      	ite	eq
 800c318:	2301      	moveq	r3, #1
 800c31a:	2300      	movne	r3, #0
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	461a      	mov	r2, r3
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	429a      	cmp	r2, r3
 800c324:	f43f af4a 	beq.w	800c1bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3770      	adds	r7, #112	; 0x70
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
	...

0800c334 <arm_copy_q7>:
 800c334:	0893      	lsrs	r3, r2, #2
 800c336:	d050      	beq.n	800c3da <arm_copy_q7+0xa6>
 800c338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c33c:	f101 0408 	add.w	r4, r1, #8
 800c340:	f100 0708 	add.w	r7, r0, #8
 800c344:	4625      	mov	r5, r4
 800c346:	42b9      	cmp	r1, r7
 800c348:	bf38      	it	cc
 800c34a:	42a8      	cmpcc	r0, r5
 800c34c:	ea41 0600 	orr.w	r6, r1, r0
 800c350:	463c      	mov	r4, r7
 800c352:	bf2c      	ite	cs
 800c354:	2401      	movcs	r4, #1
 800c356:	2400      	movcc	r4, #0
 800c358:	f016 0f07 	tst.w	r6, #7
 800c35c:	bf18      	it	ne
 800c35e:	2400      	movne	r4, #0
 800c360:	b384      	cbz	r4, 800c3c4 <arm_copy_q7+0x90>
 800c362:	1e5c      	subs	r4, r3, #1
 800c364:	2c0b      	cmp	r4, #11
 800c366:	d92d      	bls.n	800c3c4 <arm_copy_q7+0x90>
 800c368:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 800c36c:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 800c370:	eb01 080c 	add.w	r8, r1, ip
 800c374:	f1a0 0508 	sub.w	r5, r0, #8
 800c378:	460c      	mov	r4, r1
 800c37a:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 800c37e:	e8e4 6702 	strd	r6, r7, [r4], #8
 800c382:	4544      	cmp	r4, r8
 800c384:	d1f9      	bne.n	800c37a <arm_copy_q7+0x46>
 800c386:	eb00 040c 	add.w	r4, r0, ip
 800c38a:	ebb3 0f4e 	cmp.w	r3, lr, lsl #1
 800c38e:	bf1b      	ittet	ne
 800c390:	6824      	ldrne	r4, [r4, #0]
 800c392:	f841 403e 	strne.w	r4, [r1, lr, lsl #3]
 800c396:	ea4f 03ce 	moveq.w	r3, lr, lsl #3
 800c39a:	009b      	lslne	r3, r3, #2
 800c39c:	f012 0203 	ands.w	r2, r2, #3
 800c3a0:	4418      	add	r0, r3
 800c3a2:	4419      	add	r1, r3
 800c3a4:	d00c      	beq.n	800c3c0 <arm_copy_q7+0x8c>
 800c3a6:	f990 3000 	ldrsb.w	r3, [r0]
 800c3aa:	700b      	strb	r3, [r1, #0]
 800c3ac:	3a01      	subs	r2, #1
 800c3ae:	d007      	beq.n	800c3c0 <arm_copy_q7+0x8c>
 800c3b0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c3b4:	704b      	strb	r3, [r1, #1]
 800c3b6:	2a01      	cmp	r2, #1
 800c3b8:	bf1c      	itt	ne
 800c3ba:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800c3be:	708b      	strbne	r3, [r1, #2]
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	18c7      	adds	r7, r0, r3
 800c3c8:	460d      	mov	r5, r1
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	f854 6b04 	ldr.w	r6, [r4], #4
 800c3d0:	f845 6b04 	str.w	r6, [r5], #4
 800c3d4:	42bc      	cmp	r4, r7
 800c3d6:	d1f9      	bne.n	800c3cc <arm_copy_q7+0x98>
 800c3d8:	e7e0      	b.n	800c39c <arm_copy_q7+0x68>
 800c3da:	f012 0203 	ands.w	r2, r2, #3
 800c3de:	d00d      	beq.n	800c3fc <arm_copy_q7+0xc8>
 800c3e0:	f990 3000 	ldrsb.w	r3, [r0]
 800c3e4:	700b      	strb	r3, [r1, #0]
 800c3e6:	3a01      	subs	r2, #1
 800c3e8:	d008      	beq.n	800c3fc <arm_copy_q7+0xc8>
 800c3ea:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c3ee:	704b      	strb	r3, [r1, #1]
 800c3f0:	2a01      	cmp	r2, #1
 800c3f2:	d003      	beq.n	800c3fc <arm_copy_q7+0xc8>
 800c3f4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800c3f8:	708b      	strb	r3, [r1, #2]
 800c3fa:	4770      	bx	lr
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop

0800c400 <arm_rfft_32_fast_init_f32>:
 800c400:	b178      	cbz	r0, 800c422 <arm_rfft_32_fast_init_f32+0x22>
 800c402:	b430      	push	{r4, r5}
 800c404:	4908      	ldr	r1, [pc, #32]	; (800c428 <arm_rfft_32_fast_init_f32+0x28>)
 800c406:	4a09      	ldr	r2, [pc, #36]	; (800c42c <arm_rfft_32_fast_init_f32+0x2c>)
 800c408:	2310      	movs	r3, #16
 800c40a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c40e:	8003      	strh	r3, [r0, #0]
 800c410:	2520      	movs	r5, #32
 800c412:	2414      	movs	r4, #20
 800c414:	4b06      	ldr	r3, [pc, #24]	; (800c430 <arm_rfft_32_fast_init_f32+0x30>)
 800c416:	8205      	strh	r5, [r0, #16]
 800c418:	8184      	strh	r4, [r0, #12]
 800c41a:	6143      	str	r3, [r0, #20]
 800c41c:	bc30      	pop	{r4, r5}
 800c41e:	2000      	movs	r0, #0
 800c420:	4770      	bx	lr
 800c422:	f04f 30ff 	mov.w	r0, #4294967295
 800c426:	4770      	bx	lr
 800c428:	08016ef8 	.word	0x08016ef8
 800c42c:	0801b830 	.word	0x0801b830
 800c430:	080245b0 	.word	0x080245b0

0800c434 <arm_rfft_64_fast_init_f32>:
 800c434:	b178      	cbz	r0, 800c456 <arm_rfft_64_fast_init_f32+0x22>
 800c436:	b430      	push	{r4, r5}
 800c438:	4908      	ldr	r1, [pc, #32]	; (800c45c <arm_rfft_64_fast_init_f32+0x28>)
 800c43a:	4a09      	ldr	r2, [pc, #36]	; (800c460 <arm_rfft_64_fast_init_f32+0x2c>)
 800c43c:	2320      	movs	r3, #32
 800c43e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c442:	8003      	strh	r3, [r0, #0]
 800c444:	2540      	movs	r5, #64	; 0x40
 800c446:	2430      	movs	r4, #48	; 0x30
 800c448:	4b06      	ldr	r3, [pc, #24]	; (800c464 <arm_rfft_64_fast_init_f32+0x30>)
 800c44a:	8205      	strh	r5, [r0, #16]
 800c44c:	8184      	strh	r4, [r0, #12]
 800c44e:	6143      	str	r3, [r0, #20]
 800c450:	bc30      	pop	{r4, r5}
 800c452:	2000      	movs	r0, #0
 800c454:	4770      	bx	lr
 800c456:	f04f 30ff 	mov.w	r0, #4294967295
 800c45a:	4770      	bx	lr
 800c45c:	08019050 	.word	0x08019050
 800c460:	080200b0 	.word	0x080200b0
 800c464:	08028e30 	.word	0x08028e30

0800c468 <arm_rfft_256_fast_init_f32>:
 800c468:	b180      	cbz	r0, 800c48c <arm_rfft_256_fast_init_f32+0x24>
 800c46a:	b430      	push	{r4, r5}
 800c46c:	4909      	ldr	r1, [pc, #36]	; (800c494 <arm_rfft_256_fast_init_f32+0x2c>)
 800c46e:	4a0a      	ldr	r2, [pc, #40]	; (800c498 <arm_rfft_256_fast_init_f32+0x30>)
 800c470:	2380      	movs	r3, #128	; 0x80
 800c472:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c476:	8003      	strh	r3, [r0, #0]
 800c478:	f44f 7580 	mov.w	r5, #256	; 0x100
 800c47c:	24d0      	movs	r4, #208	; 0xd0
 800c47e:	4b07      	ldr	r3, [pc, #28]	; (800c49c <arm_rfft_256_fast_init_f32+0x34>)
 800c480:	8205      	strh	r5, [r0, #16]
 800c482:	8184      	strh	r4, [r0, #12]
 800c484:	6143      	str	r3, [r0, #20]
 800c486:	bc30      	pop	{r4, r5}
 800c488:	2000      	movs	r0, #0
 800c48a:	4770      	bx	lr
 800c48c:	f04f 30ff 	mov.w	r0, #4294967295
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	08016d58 	.word	0x08016d58
 800c498:	0801b430 	.word	0x0801b430
 800c49c:	080241b0 	.word	0x080241b0

0800c4a0 <arm_rfft_512_fast_init_f32>:
 800c4a0:	b190      	cbz	r0, 800c4c8 <arm_rfft_512_fast_init_f32+0x28>
 800c4a2:	b430      	push	{r4, r5}
 800c4a4:	490a      	ldr	r1, [pc, #40]	; (800c4d0 <arm_rfft_512_fast_init_f32+0x30>)
 800c4a6:	4a0b      	ldr	r2, [pc, #44]	; (800c4d4 <arm_rfft_512_fast_init_f32+0x34>)
 800c4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4ac:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c4b0:	8003      	strh	r3, [r0, #0]
 800c4b2:	f44f 7500 	mov.w	r5, #512	; 0x200
 800c4b6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800c4ba:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <arm_rfft_512_fast_init_f32+0x38>)
 800c4bc:	8205      	strh	r5, [r0, #16]
 800c4be:	8184      	strh	r4, [r0, #12]
 800c4c0:	6143      	str	r3, [r0, #20]
 800c4c2:	bc30      	pop	{r4, r5}
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	4770      	bx	lr
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	08018ce0 	.word	0x08018ce0
 800c4d4:	0801f8b0 	.word	0x0801f8b0
 800c4d8:	08028630 	.word	0x08028630

0800c4dc <arm_rfft_1024_fast_init_f32>:
 800c4dc:	b190      	cbz	r0, 800c504 <arm_rfft_1024_fast_init_f32+0x28>
 800c4de:	b430      	push	{r4, r5}
 800c4e0:	490a      	ldr	r1, [pc, #40]	; (800c50c <arm_rfft_1024_fast_init_f32+0x30>)
 800c4e2:	4a0b      	ldr	r2, [pc, #44]	; (800c510 <arm_rfft_1024_fast_init_f32+0x34>)
 800c4e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4e8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c4ec:	8003      	strh	r3, [r0, #0]
 800c4ee:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800c4f2:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800c4f6:	4b07      	ldr	r3, [pc, #28]	; (800c514 <arm_rfft_1024_fast_init_f32+0x38>)
 800c4f8:	8205      	strh	r5, [r0, #16]
 800c4fa:	8184      	strh	r4, [r0, #12]
 800c4fc:	6143      	str	r3, [r0, #20]
 800c4fe:	bc30      	pop	{r4, r5}
 800c500:	2000      	movs	r0, #0
 800c502:	4770      	bx	lr
 800c504:	f04f 30ff 	mov.w	r0, #4294967295
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	080190b0 	.word	0x080190b0
 800c510:	080201b0 	.word	0x080201b0
 800c514:	080211b0 	.word	0x080211b0

0800c518 <arm_rfft_2048_fast_init_f32>:
 800c518:	b190      	cbz	r0, 800c540 <arm_rfft_2048_fast_init_f32+0x28>
 800c51a:	b430      	push	{r4, r5}
 800c51c:	490a      	ldr	r1, [pc, #40]	; (800c548 <arm_rfft_2048_fast_init_f32+0x30>)
 800c51e:	4a0b      	ldr	r2, [pc, #44]	; (800c54c <arm_rfft_2048_fast_init_f32+0x34>)
 800c520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c524:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c528:	8003      	strh	r3, [r0, #0]
 800c52a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800c52e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800c532:	4b07      	ldr	r3, [pc, #28]	; (800c550 <arm_rfft_2048_fast_init_f32+0x38>)
 800c534:	8205      	strh	r5, [r0, #16]
 800c536:	8184      	strh	r4, [r0, #12]
 800c538:	6143      	str	r3, [r0, #20]
 800c53a:	bc30      	pop	{r4, r5}
 800c53c:	2000      	movs	r0, #0
 800c53e:	4770      	bx	lr
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	08015f48 	.word	0x08015f48
 800c54c:	08019430 	.word	0x08019430
 800c550:	080221b0 	.word	0x080221b0

0800c554 <arm_rfft_4096_fast_init_f32>:
 800c554:	b190      	cbz	r0, 800c57c <arm_rfft_4096_fast_init_f32+0x28>
 800c556:	b430      	push	{r4, r5}
 800c558:	490a      	ldr	r1, [pc, #40]	; (800c584 <arm_rfft_4096_fast_init_f32+0x30>)
 800c55a:	4a0b      	ldr	r2, [pc, #44]	; (800c588 <arm_rfft_4096_fast_init_f32+0x34>)
 800c55c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c560:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c564:	8003      	strh	r3, [r0, #0]
 800c566:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800c56a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800c56e:	4b07      	ldr	r3, [pc, #28]	; (800c58c <arm_rfft_4096_fast_init_f32+0x38>)
 800c570:	8205      	strh	r5, [r0, #16]
 800c572:	8184      	strh	r4, [r0, #12]
 800c574:	6143      	str	r3, [r0, #20]
 800c576:	bc30      	pop	{r4, r5}
 800c578:	2000      	movs	r0, #0
 800c57a:	4770      	bx	lr
 800c57c:	f04f 30ff 	mov.w	r0, #4294967295
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	08016f20 	.word	0x08016f20
 800c588:	0801b8b0 	.word	0x0801b8b0
 800c58c:	08024630 	.word	0x08024630

0800c590 <arm_rfft_fast_init_f32>:
 800c590:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c594:	d01f      	beq.n	800c5d6 <arm_rfft_fast_init_f32+0x46>
 800c596:	d90b      	bls.n	800c5b0 <arm_rfft_fast_init_f32+0x20>
 800c598:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c59c:	d019      	beq.n	800c5d2 <arm_rfft_fast_init_f32+0x42>
 800c59e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c5a2:	d012      	beq.n	800c5ca <arm_rfft_fast_init_f32+0x3a>
 800c5a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c5a8:	d00d      	beq.n	800c5c6 <arm_rfft_fast_init_f32+0x36>
 800c5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ae:	4770      	bx	lr
 800c5b0:	2940      	cmp	r1, #64	; 0x40
 800c5b2:	d00c      	beq.n	800c5ce <arm_rfft_fast_init_f32+0x3e>
 800c5b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c5b8:	d003      	beq.n	800c5c2 <arm_rfft_fast_init_f32+0x32>
 800c5ba:	2920      	cmp	r1, #32
 800c5bc:	d1f5      	bne.n	800c5aa <arm_rfft_fast_init_f32+0x1a>
 800c5be:	4b07      	ldr	r3, [pc, #28]	; (800c5dc <arm_rfft_fast_init_f32+0x4c>)
 800c5c0:	4718      	bx	r3
 800c5c2:	4b07      	ldr	r3, [pc, #28]	; (800c5e0 <arm_rfft_fast_init_f32+0x50>)
 800c5c4:	4718      	bx	r3
 800c5c6:	4b07      	ldr	r3, [pc, #28]	; (800c5e4 <arm_rfft_fast_init_f32+0x54>)
 800c5c8:	4718      	bx	r3
 800c5ca:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <arm_rfft_fast_init_f32+0x58>)
 800c5cc:	4718      	bx	r3
 800c5ce:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <arm_rfft_fast_init_f32+0x5c>)
 800c5d0:	e7f6      	b.n	800c5c0 <arm_rfft_fast_init_f32+0x30>
 800c5d2:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <arm_rfft_fast_init_f32+0x60>)
 800c5d4:	e7f4      	b.n	800c5c0 <arm_rfft_fast_init_f32+0x30>
 800c5d6:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <arm_rfft_fast_init_f32+0x64>)
 800c5d8:	e7f2      	b.n	800c5c0 <arm_rfft_fast_init_f32+0x30>
 800c5da:	bf00      	nop
 800c5dc:	0800c401 	.word	0x0800c401
 800c5e0:	0800c469 	.word	0x0800c469
 800c5e4:	0800c4dd 	.word	0x0800c4dd
 800c5e8:	0800c555 	.word	0x0800c555
 800c5ec:	0800c435 	.word	0x0800c435
 800c5f0:	0800c519 	.word	0x0800c519
 800c5f4:	0800c4a1 	.word	0x0800c4a1

0800c5f8 <stage_rfft_f32>:
 800c5f8:	b410      	push	{r4}
 800c5fa:	edd1 7a00 	vldr	s15, [r1]
 800c5fe:	ed91 7a01 	vldr	s14, [r1, #4]
 800c602:	8804      	ldrh	r4, [r0, #0]
 800c604:	6940      	ldr	r0, [r0, #20]
 800c606:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c60a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c60e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c612:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c61a:	3c01      	subs	r4, #1
 800c61c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800c620:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c624:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800c628:	ed82 7a00 	vstr	s14, [r2]
 800c62c:	edc2 7a01 	vstr	s15, [r2, #4]
 800c630:	3010      	adds	r0, #16
 800c632:	3210      	adds	r2, #16
 800c634:	3b08      	subs	r3, #8
 800c636:	3110      	adds	r1, #16
 800c638:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c63c:	ed93 7a02 	vldr	s14, [r3, #8]
 800c640:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c644:	edd3 4a03 	vldr	s9, [r3, #12]
 800c648:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c64c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c650:	ee77 5a45 	vsub.f32	s11, s14, s10
 800c654:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c658:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c65c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c660:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c664:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c668:	ee37 7a23 	vadd.f32	s14, s14, s7
 800c66c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c670:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c674:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c678:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c67c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c680:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c684:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c688:	3c01      	subs	r4, #1
 800c68a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c68e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c692:	f1a3 0308 	sub.w	r3, r3, #8
 800c696:	f101 0108 	add.w	r1, r1, #8
 800c69a:	f100 0008 	add.w	r0, r0, #8
 800c69e:	f102 0208 	add.w	r2, r2, #8
 800c6a2:	d1c9      	bne.n	800c638 <stage_rfft_f32+0x40>
 800c6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop

0800c6ac <merge_rfft_f32>:
 800c6ac:	b410      	push	{r4}
 800c6ae:	edd1 7a00 	vldr	s15, [r1]
 800c6b2:	edd1 6a01 	vldr	s13, [r1, #4]
 800c6b6:	8804      	ldrh	r4, [r0, #0]
 800c6b8:	6940      	ldr	r0, [r0, #20]
 800c6ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c6c2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c6c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c6ca:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c6ce:	3c01      	subs	r4, #1
 800c6d0:	ed82 7a00 	vstr	s14, [r2]
 800c6d4:	edc2 7a01 	vstr	s15, [r2, #4]
 800c6d8:	b3dc      	cbz	r4, 800c752 <merge_rfft_f32+0xa6>
 800c6da:	00e3      	lsls	r3, r4, #3
 800c6dc:	3b08      	subs	r3, #8
 800c6de:	440b      	add	r3, r1
 800c6e0:	3010      	adds	r0, #16
 800c6e2:	3210      	adds	r2, #16
 800c6e4:	3110      	adds	r1, #16
 800c6e6:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c6ea:	ed93 7a02 	vldr	s14, [r3, #8]
 800c6ee:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c6f2:	edd3 4a03 	vldr	s9, [r3, #12]
 800c6f6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c6fa:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c6fe:	ee75 5a47 	vsub.f32	s11, s10, s14
 800c702:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c706:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c70a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c70e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c712:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c716:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c71a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c71e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c722:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c726:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c72a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c72e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c732:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c736:	3c01      	subs	r4, #1
 800c738:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c73c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c740:	f1a3 0308 	sub.w	r3, r3, #8
 800c744:	f101 0108 	add.w	r1, r1, #8
 800c748:	f100 0008 	add.w	r0, r0, #8
 800c74c:	f102 0208 	add.w	r2, r2, #8
 800c750:	d1c9      	bne.n	800c6e6 <merge_rfft_f32+0x3a>
 800c752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <arm_rfft_fast_f32>:
 800c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75c:	8a05      	ldrh	r5, [r0, #16]
 800c75e:	086d      	lsrs	r5, r5, #1
 800c760:	8005      	strh	r5, [r0, #0]
 800c762:	4604      	mov	r4, r0
 800c764:	4616      	mov	r6, r2
 800c766:	461d      	mov	r5, r3
 800c768:	b14b      	cbz	r3, 800c77e <arm_rfft_fast_f32+0x26>
 800c76a:	f7ff ff9f 	bl	800c6ac <merge_rfft_f32>
 800c76e:	462a      	mov	r2, r5
 800c770:	4631      	mov	r1, r6
 800c772:	4620      	mov	r0, r4
 800c774:	2301      	movs	r3, #1
 800c776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c77a:	f000 bb33 	b.w	800cde4 <arm_cfft_f32>
 800c77e:	460f      	mov	r7, r1
 800c780:	461a      	mov	r2, r3
 800c782:	2301      	movs	r3, #1
 800c784:	f000 fb2e 	bl	800cde4 <arm_cfft_f32>
 800c788:	4632      	mov	r2, r6
 800c78a:	4639      	mov	r1, r7
 800c78c:	4620      	mov	r0, r4
 800c78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c792:	f7ff bf31 	b.w	800c5f8 <stage_rfft_f32>
 800c796:	bf00      	nop

0800c798 <arm_cfft_radix8by2_f32>:
 800c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c79c:	ed2d 8b08 	vpush	{d8-d11}
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	f8b7 c000 	ldrh.w	ip, [r7]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c7ae:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c7b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c7b6:	f000 80b0 	beq.w	800c91a <arm_cfft_radix8by2_f32+0x182>
 800c7ba:	008c      	lsls	r4, r1, #2
 800c7bc:	3410      	adds	r4, #16
 800c7be:	f100 0310 	add.w	r3, r0, #16
 800c7c2:	1906      	adds	r6, r0, r4
 800c7c4:	3210      	adds	r2, #16
 800c7c6:	4444      	add	r4, r8
 800c7c8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c7cc:	f108 0510 	add.w	r5, r8, #16
 800c7d0:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c7d4:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c7d8:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c7dc:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c7e0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c7e4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c7e8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c7ec:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c7f0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c7f4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c7f8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c7fc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c800:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c804:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c808:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c80c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c810:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c814:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c818:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c81c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c820:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c824:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c828:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c82c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c830:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c834:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c838:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c83c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c840:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c844:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c848:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c84c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c850:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c854:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c858:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c85c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c860:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c864:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c868:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c86c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c870:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c874:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c878:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c87c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c880:	ee64 6a26 	vmul.f32	s13, s8, s13
 800c884:	ee24 4a03 	vmul.f32	s8, s8, s6
 800c888:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c88c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c890:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c894:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c898:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c89c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c8a0:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c8a4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c8a8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c8ac:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c8b0:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c8b4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c8b8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c8bc:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c8c0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800c8c4:	ee66 4a87 	vmul.f32	s9, s13, s14
 800c8c8:	ee25 4a25 	vmul.f32	s8, s10, s11
 800c8cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c8d0:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c8d4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c8d8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c8dc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c8e0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c8e4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800c8e8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c8ec:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c8f0:	3310      	adds	r3, #16
 800c8f2:	4563      	cmp	r3, ip
 800c8f4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800c8f8:	f106 0610 	add.w	r6, r6, #16
 800c8fc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c900:	f102 0210 	add.w	r2, r2, #16
 800c904:	ed04 6a02 	vstr	s12, [r4, #-8]
 800c908:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c90c:	f105 0510 	add.w	r5, r5, #16
 800c910:	f104 0410 	add.w	r4, r4, #16
 800c914:	f47f af5c 	bne.w	800c7d0 <arm_cfft_radix8by2_f32+0x38>
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	b28c      	uxth	r4, r1
 800c91c:	4621      	mov	r1, r4
 800c91e:	2302      	movs	r3, #2
 800c920:	f000 faf8 	bl	800cf14 <arm_radix8_butterfly_f32>
 800c924:	ecbd 8b08 	vpop	{d8-d11}
 800c928:	4621      	mov	r1, r4
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	4640      	mov	r0, r8
 800c92e:	2302      	movs	r3, #2
 800c930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c934:	f000 baee 	b.w	800cf14 <arm_radix8_butterfly_f32>

0800c938 <arm_cfft_radix8by4_f32>:
 800c938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93c:	ed2d 8b0a 	vpush	{d8-d12}
 800c940:	b08d      	sub	sp, #52	; 0x34
 800c942:	460d      	mov	r5, r1
 800c944:	910b      	str	r1, [sp, #44]	; 0x2c
 800c946:	8801      	ldrh	r1, [r0, #0]
 800c948:	6842      	ldr	r2, [r0, #4]
 800c94a:	900a      	str	r0, [sp, #40]	; 0x28
 800c94c:	0849      	lsrs	r1, r1, #1
 800c94e:	008b      	lsls	r3, r1, #2
 800c950:	18ee      	adds	r6, r5, r3
 800c952:	18f0      	adds	r0, r6, r3
 800c954:	edd0 5a00 	vldr	s11, [r0]
 800c958:	edd5 7a00 	vldr	s15, [r5]
 800c95c:	ed96 7a00 	vldr	s14, [r6]
 800c960:	edd0 3a01 	vldr	s7, [r0, #4]
 800c964:	ed96 4a01 	vldr	s8, [r6, #4]
 800c968:	ed95 5a01 	vldr	s10, [r5, #4]
 800c96c:	9008      	str	r0, [sp, #32]
 800c96e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800c972:	18c7      	adds	r7, r0, r3
 800c974:	edd7 4a00 	vldr	s9, [r7]
 800c978:	ed97 3a01 	vldr	s6, [r7, #4]
 800c97c:	9701      	str	r7, [sp, #4]
 800c97e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800c982:	462c      	mov	r4, r5
 800c984:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c988:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c98c:	ee16 ca90 	vmov	ip, s13
 800c990:	f844 cb08 	str.w	ip, [r4], #8
 800c994:	ee75 6a23 	vadd.f32	s13, s10, s7
 800c998:	edd6 5a01 	vldr	s11, [r6, #4]
 800c99c:	edd7 2a01 	vldr	s5, [r7, #4]
 800c9a0:	9404      	str	r4, [sp, #16]
 800c9a2:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c9a6:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c9aa:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c9ae:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800c9b2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c9b6:	0849      	lsrs	r1, r1, #1
 800c9b8:	f102 0e08 	add.w	lr, r2, #8
 800c9bc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c9c0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c9c4:	9109      	str	r1, [sp, #36]	; 0x24
 800c9c6:	ee35 4a47 	vsub.f32	s8, s10, s14
 800c9ca:	f1a1 0902 	sub.w	r9, r1, #2
 800c9ce:	f8cd e00c 	str.w	lr, [sp, #12]
 800c9d2:	4631      	mov	r1, r6
 800c9d4:	ee13 ea90 	vmov	lr, s7
 800c9d8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800c9dc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	edc5 5a01 	vstr	s11, [r5, #4]
 800c9e6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c9ea:	f841 eb08 	str.w	lr, [r1], #8
 800c9ee:	ee34 5a24 	vadd.f32	s10, s8, s9
 800c9f2:	ee16 ea10 	vmov	lr, s12
 800c9f6:	ed86 5a01 	vstr	s10, [r6, #4]
 800c9fa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c9fe:	f844 eb08 	str.w	lr, [r4], #8
 800ca02:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ca06:	edc0 6a01 	vstr	s13, [r0, #4]
 800ca0a:	9405      	str	r4, [sp, #20]
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	ee17 0a90 	vmov	r0, s15
 800ca12:	9106      	str	r1, [sp, #24]
 800ca14:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ca18:	f102 0110 	add.w	r1, r2, #16
 800ca1c:	46bc      	mov	ip, r7
 800ca1e:	9100      	str	r1, [sp, #0]
 800ca20:	f847 0b08 	str.w	r0, [r7], #8
 800ca24:	f102 0118 	add.w	r1, r2, #24
 800ca28:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800ca2c:	9102      	str	r1, [sp, #8]
 800ca2e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800ca32:	9007      	str	r0, [sp, #28]
 800ca34:	f000 8134 	beq.w	800cca0 <arm_cfft_radix8by4_f32+0x368>
 800ca38:	f102 0920 	add.w	r9, r2, #32
 800ca3c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800ca40:	9a01      	ldr	r2, [sp, #4]
 800ca42:	f8dd a000 	ldr.w	sl, [sp]
 800ca46:	3b0c      	subs	r3, #12
 800ca48:	4683      	mov	fp, r0
 800ca4a:	4463      	add	r3, ip
 800ca4c:	f105 0e10 	add.w	lr, r5, #16
 800ca50:	f1a4 010c 	sub.w	r1, r4, #12
 800ca54:	f104 0510 	add.w	r5, r4, #16
 800ca58:	f1a6 0c0c 	sub.w	ip, r6, #12
 800ca5c:	f1a2 040c 	sub.w	r4, r2, #12
 800ca60:	f106 0010 	add.w	r0, r6, #16
 800ca64:	3210      	adds	r2, #16
 800ca66:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800ca6a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ca6e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ca72:	ed52 1a02 	vldr	s3, [r2, #-8]
 800ca76:	ed55 6a01 	vldr	s13, [r5, #-4]
 800ca7a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800ca7e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800ca82:	ed10 8a01 	vldr	s16, [r0, #-4]
 800ca86:	ee35 4a25 	vadd.f32	s8, s10, s11
 800ca8a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800ca8e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800ca92:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ca96:	ee37 7a21 	vadd.f32	s14, s14, s3
 800ca9a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ca9e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800caa2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800caa6:	ed52 6a01 	vldr	s13, [r2, #-4]
 800caaa:	ee36 7a07 	vadd.f32	s14, s12, s14
 800caae:	ee78 aa25 	vadd.f32	s21, s16, s11
 800cab2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cab6:	ee70 3a67 	vsub.f32	s7, s0, s15
 800caba:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800cabe:	ed94 7a02 	vldr	s14, [r4, #8]
 800cac2:	ed9c 2a02 	vldr	s4, [ip, #8]
 800cac6:	ed91 ba02 	vldr	s22, [r1, #8]
 800caca:	edd3 9a02 	vldr	s19, [r3, #8]
 800cace:	edd4 2a01 	vldr	s5, [r4, #4]
 800cad2:	ed9c 9a01 	vldr	s18, [ip, #4]
 800cad6:	ed93 5a01 	vldr	s10, [r3, #4]
 800cada:	edd1 0a01 	vldr	s1, [r1, #4]
 800cade:	ee72 6a07 	vadd.f32	s13, s4, s14
 800cae2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800cae6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800caea:	ee79 4a22 	vadd.f32	s9, s18, s5
 800caee:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800caf2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800caf6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800cafa:	ed91 7a01 	vldr	s14, [r1, #4]
 800cafe:	edd3 8a01 	vldr	s17, [r3, #4]
 800cb02:	ee34 7a87 	vadd.f32	s14, s9, s14
 800cb06:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800cb0a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800cb0e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800cb12:	ed8c 7a01 	vstr	s14, [ip, #4]
 800cb16:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800cb1a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800cb1e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800cb22:	ee39 9a05 	vadd.f32	s18, s18, s10
 800cb26:	ee7a aac1 	vsub.f32	s21, s21, s2
 800cb2a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800cb2e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800cb32:	ee69 ba07 	vmul.f32	s23, s18, s14
 800cb36:	ee6a aa87 	vmul.f32	s21, s21, s14
 800cb3a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800cb3e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800cb42:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800cb46:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800cb4a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800cb4e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800cb52:	ee78 8a89 	vadd.f32	s17, s17, s18
 800cb56:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800cb5a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800cb5e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800cb62:	ee76 6acb 	vsub.f32	s13, s13, s22
 800cb66:	ee36 6a48 	vsub.f32	s12, s12, s16
 800cb6a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800cb6e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800cb72:	ed40 3a01 	vstr	s7, [r0, #-4]
 800cb76:	edc1 8a01 	vstr	s17, [r1, #4]
 800cb7a:	ed81 aa02 	vstr	s20, [r1, #8]
 800cb7e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800cb82:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800cb86:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800cb8a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800cb8e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800cb92:	ee36 6a41 	vsub.f32	s12, s12, s2
 800cb96:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800cb9a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800cb9e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800cba2:	ee26 6a23 	vmul.f32	s12, s12, s7
 800cba6:	ee24 4a26 	vmul.f32	s8, s8, s13
 800cbaa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cbae:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800cbb2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800cbb6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800cbba:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cbbe:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800cbc2:	ee79 3a29 	vadd.f32	s7, s18, s19
 800cbc6:	ee75 6a60 	vsub.f32	s13, s10, s1
 800cbca:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800cbce:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cbd2:	ed45 3a02 	vstr	s7, [r5, #-8]
 800cbd6:	ed05 6a01 	vstr	s12, [r5, #-4]
 800cbda:	ed84 7a01 	vstr	s14, [r4, #4]
 800cbde:	ed84 4a02 	vstr	s8, [r4, #8]
 800cbe2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800cbe6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800cbea:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800cbee:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800cbf2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800cbf6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800cbfa:	ee67 2a26 	vmul.f32	s5, s14, s13
 800cbfe:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800cc02:	ee26 5a25 	vmul.f32	s10, s12, s11
 800cc06:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cc0a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800cc0e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cc12:	ee63 6a26 	vmul.f32	s13, s6, s13
 800cc16:	ee23 3a25 	vmul.f32	s6, s6, s11
 800cc1a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cc1e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800cc22:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800cc26:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cc2a:	f1bb 0b01 	subs.w	fp, fp, #1
 800cc2e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800cc32:	ed42 7a01 	vstr	s15, [r2, #-4]
 800cc36:	f10e 0e08 	add.w	lr, lr, #8
 800cc3a:	ed83 3a02 	vstr	s6, [r3, #8]
 800cc3e:	ed83 7a01 	vstr	s14, [r3, #4]
 800cc42:	f1ac 0c08 	sub.w	ip, ip, #8
 800cc46:	f10a 0a08 	add.w	sl, sl, #8
 800cc4a:	f100 0008 	add.w	r0, r0, #8
 800cc4e:	f1a1 0108 	sub.w	r1, r1, #8
 800cc52:	f109 0910 	add.w	r9, r9, #16
 800cc56:	f105 0508 	add.w	r5, r5, #8
 800cc5a:	f1a4 0408 	sub.w	r4, r4, #8
 800cc5e:	f108 0818 	add.w	r8, r8, #24
 800cc62:	f102 0208 	add.w	r2, r2, #8
 800cc66:	f1a3 0308 	sub.w	r3, r3, #8
 800cc6a:	f47f aefc 	bne.w	800ca66 <arm_cfft_radix8by4_f32+0x12e>
 800cc6e:	9907      	ldr	r1, [sp, #28]
 800cc70:	9800      	ldr	r0, [sp, #0]
 800cc72:	00cb      	lsls	r3, r1, #3
 800cc74:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800cc78:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800cc7c:	9100      	str	r1, [sp, #0]
 800cc7e:	9904      	ldr	r1, [sp, #16]
 800cc80:	4419      	add	r1, r3
 800cc82:	9104      	str	r1, [sp, #16]
 800cc84:	9903      	ldr	r1, [sp, #12]
 800cc86:	4419      	add	r1, r3
 800cc88:	9103      	str	r1, [sp, #12]
 800cc8a:	9906      	ldr	r1, [sp, #24]
 800cc8c:	4419      	add	r1, r3
 800cc8e:	9106      	str	r1, [sp, #24]
 800cc90:	9905      	ldr	r1, [sp, #20]
 800cc92:	441f      	add	r7, r3
 800cc94:	4419      	add	r1, r3
 800cc96:	9b02      	ldr	r3, [sp, #8]
 800cc98:	9105      	str	r1, [sp, #20]
 800cc9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc9e:	9302      	str	r3, [sp, #8]
 800cca0:	9904      	ldr	r1, [sp, #16]
 800cca2:	9805      	ldr	r0, [sp, #20]
 800cca4:	ed91 4a00 	vldr	s8, [r1]
 800cca8:	edd0 6a00 	vldr	s13, [r0]
 800ccac:	9b06      	ldr	r3, [sp, #24]
 800ccae:	ed97 3a00 	vldr	s6, [r7]
 800ccb2:	edd3 7a00 	vldr	s15, [r3]
 800ccb6:	edd0 4a01 	vldr	s9, [r0, #4]
 800ccba:	edd1 3a01 	vldr	s7, [r1, #4]
 800ccbe:	ed97 2a01 	vldr	s4, [r7, #4]
 800ccc2:	ed93 7a01 	vldr	s14, [r3, #4]
 800ccc6:	9a03      	ldr	r2, [sp, #12]
 800ccc8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800cccc:	ee34 6a26 	vadd.f32	s12, s8, s13
 800ccd0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800ccd4:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ccd8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ccdc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800cce0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800cce4:	ed81 5a00 	vstr	s10, [r1]
 800cce8:	ed93 5a01 	vldr	s10, [r3, #4]
 800ccec:	edd7 4a01 	vldr	s9, [r7, #4]
 800ccf0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ccf4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800ccf8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ccfc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800cd00:	ed81 5a01 	vstr	s10, [r1, #4]
 800cd04:	edd2 1a00 	vldr	s3, [r2]
 800cd08:	edd2 2a01 	vldr	s5, [r2, #4]
 800cd0c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800cd10:	ee34 4a42 	vsub.f32	s8, s8, s4
 800cd14:	ee36 6a67 	vsub.f32	s12, s12, s15
 800cd18:	ee64 4a21 	vmul.f32	s9, s8, s3
 800cd1c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800cd20:	ee65 2a22 	vmul.f32	s5, s10, s5
 800cd24:	ee25 5a21 	vmul.f32	s10, s10, s3
 800cd28:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800cd2c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800cd30:	edc3 2a00 	vstr	s5, [r3]
 800cd34:	ed83 5a01 	vstr	s10, [r3, #4]
 800cd38:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800cd3c:	9b00      	ldr	r3, [sp, #0]
 800cd3e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800cd42:	ed93 4a01 	vldr	s8, [r3, #4]
 800cd46:	ed93 5a00 	vldr	s10, [r3]
 800cd4a:	9b02      	ldr	r3, [sp, #8]
 800cd4c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800cd50:	ee66 4a05 	vmul.f32	s9, s12, s10
 800cd54:	ee25 5a85 	vmul.f32	s10, s11, s10
 800cd58:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cd5c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800cd60:	ee35 6a46 	vsub.f32	s12, s10, s12
 800cd64:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800cd68:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cd6c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cd70:	ed80 6a01 	vstr	s12, [r0, #4]
 800cd74:	edc0 5a00 	vstr	s11, [r0]
 800cd78:	edd3 5a01 	vldr	s11, [r3, #4]
 800cd7c:	edd3 6a00 	vldr	s13, [r3]
 800cd80:	ee37 7a02 	vadd.f32	s14, s14, s4
 800cd84:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800cd88:	ee27 6a26 	vmul.f32	s12, s14, s13
 800cd8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800cd90:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cd94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cd98:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cd9c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cda0:	ed87 7a01 	vstr	s14, [r7, #4]
 800cda4:	edc7 7a00 	vstr	s15, [r7]
 800cda8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800cdac:	4621      	mov	r1, r4
 800cdae:	686a      	ldr	r2, [r5, #4]
 800cdb0:	2304      	movs	r3, #4
 800cdb2:	f000 f8af 	bl	800cf14 <arm_radix8_butterfly_f32>
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4621      	mov	r1, r4
 800cdba:	686a      	ldr	r2, [r5, #4]
 800cdbc:	2304      	movs	r3, #4
 800cdbe:	f000 f8a9 	bl	800cf14 <arm_radix8_butterfly_f32>
 800cdc2:	9808      	ldr	r0, [sp, #32]
 800cdc4:	686a      	ldr	r2, [r5, #4]
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	2304      	movs	r3, #4
 800cdca:	f000 f8a3 	bl	800cf14 <arm_radix8_butterfly_f32>
 800cdce:	686a      	ldr	r2, [r5, #4]
 800cdd0:	9801      	ldr	r0, [sp, #4]
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	2304      	movs	r3, #4
 800cdd6:	b00d      	add	sp, #52	; 0x34
 800cdd8:	ecbd 8b0a 	vpop	{d8-d12}
 800cddc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	f000 b898 	b.w	800cf14 <arm_radix8_butterfly_f32>

0800cde4 <arm_cfft_f32>:
 800cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde8:	2a01      	cmp	r2, #1
 800cdea:	4606      	mov	r6, r0
 800cdec:	4617      	mov	r7, r2
 800cdee:	460c      	mov	r4, r1
 800cdf0:	4698      	mov	r8, r3
 800cdf2:	8805      	ldrh	r5, [r0, #0]
 800cdf4:	d056      	beq.n	800cea4 <arm_cfft_f32+0xc0>
 800cdf6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800cdfa:	d063      	beq.n	800cec4 <arm_cfft_f32+0xe0>
 800cdfc:	d916      	bls.n	800ce2c <arm_cfft_f32+0x48>
 800cdfe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ce02:	d01a      	beq.n	800ce3a <arm_cfft_f32+0x56>
 800ce04:	d947      	bls.n	800ce96 <arm_cfft_f32+0xb2>
 800ce06:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ce0a:	d05b      	beq.n	800cec4 <arm_cfft_f32+0xe0>
 800ce0c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ce10:	d105      	bne.n	800ce1e <arm_cfft_f32+0x3a>
 800ce12:	2301      	movs	r3, #1
 800ce14:	6872      	ldr	r2, [r6, #4]
 800ce16:	4629      	mov	r1, r5
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 f87b 	bl	800cf14 <arm_radix8_butterfly_f32>
 800ce1e:	f1b8 0f00 	cmp.w	r8, #0
 800ce22:	d111      	bne.n	800ce48 <arm_cfft_f32+0x64>
 800ce24:	2f01      	cmp	r7, #1
 800ce26:	d016      	beq.n	800ce56 <arm_cfft_f32+0x72>
 800ce28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce2c:	2d20      	cmp	r5, #32
 800ce2e:	d049      	beq.n	800cec4 <arm_cfft_f32+0xe0>
 800ce30:	d935      	bls.n	800ce9e <arm_cfft_f32+0xba>
 800ce32:	2d40      	cmp	r5, #64	; 0x40
 800ce34:	d0ed      	beq.n	800ce12 <arm_cfft_f32+0x2e>
 800ce36:	2d80      	cmp	r5, #128	; 0x80
 800ce38:	d1f1      	bne.n	800ce1e <arm_cfft_f32+0x3a>
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7ff fcab 	bl	800c798 <arm_cfft_radix8by2_f32>
 800ce42:	f1b8 0f00 	cmp.w	r8, #0
 800ce46:	d0ed      	beq.n	800ce24 <arm_cfft_f32+0x40>
 800ce48:	68b2      	ldr	r2, [r6, #8]
 800ce4a:	89b1      	ldrh	r1, [r6, #12]
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 f841 	bl	800ced4 <arm_bitreversal_32>
 800ce52:	2f01      	cmp	r7, #1
 800ce54:	d1e8      	bne.n	800ce28 <arm_cfft_f32+0x44>
 800ce56:	ee07 5a90 	vmov	s15, r5
 800ce5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ce66:	2d00      	cmp	r5, #0
 800ce68:	d0de      	beq.n	800ce28 <arm_cfft_f32+0x44>
 800ce6a:	f104 0108 	add.w	r1, r4, #8
 800ce6e:	2300      	movs	r3, #0
 800ce70:	3301      	adds	r3, #1
 800ce72:	429d      	cmp	r5, r3
 800ce74:	f101 0108 	add.w	r1, r1, #8
 800ce78:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ce7c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ce80:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce84:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ce88:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ce8c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ce90:	d1ee      	bne.n	800ce70 <arm_cfft_f32+0x8c>
 800ce92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce96:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ce9a:	d0ba      	beq.n	800ce12 <arm_cfft_f32+0x2e>
 800ce9c:	e7bf      	b.n	800ce1e <arm_cfft_f32+0x3a>
 800ce9e:	2d10      	cmp	r5, #16
 800cea0:	d0cb      	beq.n	800ce3a <arm_cfft_f32+0x56>
 800cea2:	e7bc      	b.n	800ce1e <arm_cfft_f32+0x3a>
 800cea4:	b19d      	cbz	r5, 800cece <arm_cfft_f32+0xea>
 800cea6:	f101 030c 	add.w	r3, r1, #12
 800ceaa:	2200      	movs	r2, #0
 800ceac:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ceb0:	3201      	adds	r2, #1
 800ceb2:	eef1 7a67 	vneg.f32	s15, s15
 800ceb6:	4295      	cmp	r5, r2
 800ceb8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800cebc:	f103 0308 	add.w	r3, r3, #8
 800cec0:	d1f4      	bne.n	800ceac <arm_cfft_f32+0xc8>
 800cec2:	e798      	b.n	800cdf6 <arm_cfft_f32+0x12>
 800cec4:	4621      	mov	r1, r4
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff fd36 	bl	800c938 <arm_cfft_radix8by4_f32>
 800cecc:	e7a7      	b.n	800ce1e <arm_cfft_f32+0x3a>
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0aa      	beq.n	800ce28 <arm_cfft_f32+0x44>
 800ced2:	e7b9      	b.n	800ce48 <arm_cfft_f32+0x64>

0800ced4 <arm_bitreversal_32>:
 800ced4:	b1e9      	cbz	r1, 800cf12 <arm_bitreversal_32+0x3e>
 800ced6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ced8:	2500      	movs	r5, #0
 800ceda:	f102 0e02 	add.w	lr, r2, #2
 800cede:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800cee2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800cee6:	08a4      	lsrs	r4, r4, #2
 800cee8:	089b      	lsrs	r3, r3, #2
 800ceea:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800ceee:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800cef2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800cef6:	00a6      	lsls	r6, r4, #2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800cefe:	3304      	adds	r3, #4
 800cf00:	1d34      	adds	r4, r6, #4
 800cf02:	3502      	adds	r5, #2
 800cf04:	58c6      	ldr	r6, [r0, r3]
 800cf06:	5907      	ldr	r7, [r0, r4]
 800cf08:	50c7      	str	r7, [r0, r3]
 800cf0a:	428d      	cmp	r5, r1
 800cf0c:	5106      	str	r6, [r0, r4]
 800cf0e:	d3e6      	bcc.n	800cede <arm_bitreversal_32+0xa>
 800cf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf12:	4770      	bx	lr

0800cf14 <arm_radix8_butterfly_f32>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	ed2d 8b10 	vpush	{d8-d15}
 800cf1c:	b095      	sub	sp, #84	; 0x54
 800cf1e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800cf22:	4603      	mov	r3, r0
 800cf24:	3304      	adds	r3, #4
 800cf26:	ed9f bab9 	vldr	s22, [pc, #740]	; 800d20c <arm_radix8_butterfly_f32+0x2f8>
 800cf2a:	9012      	str	r0, [sp, #72]	; 0x48
 800cf2c:	468b      	mov	fp, r1
 800cf2e:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf30:	4689      	mov	r9, r1
 800cf32:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800cf36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf38:	960f      	str	r6, [sp, #60]	; 0x3c
 800cf3a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800cf3e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800cf42:	eb03 0508 	add.w	r5, r3, r8
 800cf46:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800cf4a:	eb05 040e 	add.w	r4, r5, lr
 800cf4e:	0137      	lsls	r7, r6, #4
 800cf50:	eba6 030a 	sub.w	r3, r6, sl
 800cf54:	eb04 000e 	add.w	r0, r4, lr
 800cf58:	44b2      	add	sl, r6
 800cf5a:	1d3a      	adds	r2, r7, #4
 800cf5c:	9702      	str	r7, [sp, #8]
 800cf5e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cf62:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800cf66:	ebae 0c06 	sub.w	ip, lr, r6
 800cf6a:	9703      	str	r7, [sp, #12]
 800cf6c:	eb03 0708 	add.w	r7, r3, r8
 800cf70:	9701      	str	r7, [sp, #4]
 800cf72:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800cf76:	9706      	str	r7, [sp, #24]
 800cf78:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800cf7a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800cf7e:	f10e 0104 	add.w	r1, lr, #4
 800cf82:	4439      	add	r1, r7
 800cf84:	443a      	add	r2, r7
 800cf86:	0137      	lsls	r7, r6, #4
 800cf88:	00f6      	lsls	r6, r6, #3
 800cf8a:	9704      	str	r7, [sp, #16]
 800cf8c:	9605      	str	r6, [sp, #20]
 800cf8e:	9f01      	ldr	r7, [sp, #4]
 800cf90:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800cf92:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800cf96:	f04f 0c00 	mov.w	ip, #0
 800cf9a:	edd4 6a00 	vldr	s13, [r4]
 800cf9e:	edd7 1a00 	vldr	s3, [r7]
 800cfa2:	ed16 aa01 	vldr	s20, [r6, #-4]
 800cfa6:	edd5 5a00 	vldr	s11, [r5]
 800cfaa:	ed52 9a01 	vldr	s19, [r2, #-4]
 800cfae:	ed90 6a00 	vldr	s12, [r0]
 800cfb2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800cfb6:	ed93 3a00 	vldr	s6, [r3]
 800cfba:	ee39 0a86 	vadd.f32	s0, s19, s12
 800cfbe:	ee33 2a21 	vadd.f32	s4, s6, s3
 800cfc2:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800cfc6:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800cfca:	ee35 7a02 	vadd.f32	s14, s10, s4
 800cfce:	ee34 4a80 	vadd.f32	s8, s9, s0
 800cfd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cfd6:	ee74 6a07 	vadd.f32	s13, s8, s14
 800cfda:	ee34 4a47 	vsub.f32	s8, s8, s14
 800cfde:	ed46 6a01 	vstr	s13, [r6, #-4]
 800cfe2:	ed85 4a00 	vstr	s8, [r5]
 800cfe6:	edd1 6a00 	vldr	s13, [r1]
 800cfea:	ed94 9a01 	vldr	s18, [r4, #4]
 800cfee:	edd3 2a01 	vldr	s5, [r3, #4]
 800cff2:	edd7 8a01 	vldr	s17, [r7, #4]
 800cff6:	edd6 0a00 	vldr	s1, [r6]
 800cffa:	edd5 3a01 	vldr	s7, [r5, #4]
 800cffe:	ed90 8a01 	vldr	s16, [r0, #4]
 800d002:	ed92 7a00 	vldr	s14, [r2]
 800d006:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d00a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800d00e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800d012:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800d016:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800d01a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d01e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800d022:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800d026:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800d02a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800d02e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800d032:	ee77 0a08 	vadd.f32	s1, s14, s16
 800d036:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800d03a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d03e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800d042:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800d046:	ee76 6a89 	vadd.f32	s13, s13, s18
 800d04a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800d04e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d052:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d056:	ee35 5a42 	vsub.f32	s10, s10, s4
 800d05a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800d05e:	ee33 2a20 	vadd.f32	s4, s6, s1
 800d062:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800d066:	ee33 3a60 	vsub.f32	s6, s6, s1
 800d06a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800d06e:	ee77 0a01 	vadd.f32	s1, s14, s2
 800d072:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d076:	ee37 7a41 	vsub.f32	s14, s14, s2
 800d07a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800d07e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d082:	ee76 3a27 	vadd.f32	s7, s12, s15
 800d086:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d08a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800d08e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800d092:	ee32 2a40 	vsub.f32	s4, s4, s0
 800d096:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d09a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800d09e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800d0a2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d0a6:	ee34 6a67 	vsub.f32	s12, s8, s15
 800d0aa:	ee75 4a87 	vadd.f32	s9, s11, s14
 800d0ae:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800d0b2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800d0b6:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d0ba:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800d0be:	44dc      	add	ip, fp
 800d0c0:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d0c4:	45e1      	cmp	r9, ip
 800d0c6:	ed86 8a00 	vstr	s16, [r6]
 800d0ca:	ed85 2a01 	vstr	s4, [r5, #4]
 800d0ce:	4456      	add	r6, sl
 800d0d0:	ed02 0a01 	vstr	s0, [r2, #-4]
 800d0d4:	4455      	add	r5, sl
 800d0d6:	edc0 6a00 	vstr	s13, [r0]
 800d0da:	ed82 1a00 	vstr	s2, [r2]
 800d0de:	ed80 5a01 	vstr	s10, [r0, #4]
 800d0e2:	4452      	add	r2, sl
 800d0e4:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d0e8:	4450      	add	r0, sl
 800d0ea:	edc7 2a00 	vstr	s5, [r7]
 800d0ee:	edc4 4a00 	vstr	s9, [r4]
 800d0f2:	ed83 7a00 	vstr	s14, [r3]
 800d0f6:	edc1 5a00 	vstr	s11, [r1]
 800d0fa:	edc7 3a01 	vstr	s7, [r7, #4]
 800d0fe:	4451      	add	r1, sl
 800d100:	ed84 6a01 	vstr	s12, [r4, #4]
 800d104:	4457      	add	r7, sl
 800d106:	edc3 7a01 	vstr	s15, [r3, #4]
 800d10a:	4454      	add	r4, sl
 800d10c:	4453      	add	r3, sl
 800d10e:	f63f af44 	bhi.w	800cf9a <arm_radix8_butterfly_f32+0x86>
 800d112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d114:	2b07      	cmp	r3, #7
 800d116:	f240 81b7 	bls.w	800d488 <arm_radix8_butterfly_f32+0x574>
 800d11a:	9b06      	ldr	r3, [sp, #24]
 800d11c:	9903      	ldr	r1, [sp, #12]
 800d11e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d120:	9e05      	ldr	r6, [sp, #20]
 800d122:	9a04      	ldr	r2, [sp, #16]
 800d124:	f103 0c08 	add.w	ip, r3, #8
 800d128:	9b02      	ldr	r3, [sp, #8]
 800d12a:	3108      	adds	r1, #8
 800d12c:	f108 0808 	add.w	r8, r8, #8
 800d130:	1841      	adds	r1, r0, r1
 800d132:	3608      	adds	r6, #8
 800d134:	330c      	adds	r3, #12
 800d136:	4604      	mov	r4, r0
 800d138:	4444      	add	r4, r8
 800d13a:	18c3      	adds	r3, r0, r3
 800d13c:	9109      	str	r1, [sp, #36]	; 0x24
 800d13e:	1981      	adds	r1, r0, r6
 800d140:	f10e 0e08 	add.w	lr, lr, #8
 800d144:	3208      	adds	r2, #8
 800d146:	940b      	str	r4, [sp, #44]	; 0x2c
 800d148:	9107      	str	r1, [sp, #28]
 800d14a:	4604      	mov	r4, r0
 800d14c:	4601      	mov	r1, r0
 800d14e:	9304      	str	r3, [sp, #16]
 800d150:	f100 030c 	add.w	r3, r0, #12
 800d154:	4474      	add	r4, lr
 800d156:	f04f 0801 	mov.w	r8, #1
 800d15a:	1882      	adds	r2, r0, r2
 800d15c:	4461      	add	r1, ip
 800d15e:	9305      	str	r3, [sp, #20]
 800d160:	464b      	mov	r3, r9
 800d162:	940a      	str	r4, [sp, #40]	; 0x28
 800d164:	46c1      	mov	r9, r8
 800d166:	9208      	str	r2, [sp, #32]
 800d168:	46d8      	mov	r8, fp
 800d16a:	9106      	str	r1, [sp, #24]
 800d16c:	f04f 0e00 	mov.w	lr, #0
 800d170:	469b      	mov	fp, r3
 800d172:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d174:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d176:	449e      	add	lr, r3
 800d178:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800d17c:	441a      	add	r2, r3
 800d17e:	920e      	str	r2, [sp, #56]	; 0x38
 800d180:	441a      	add	r2, r3
 800d182:	18d4      	adds	r4, r2, r3
 800d184:	18e5      	adds	r5, r4, r3
 800d186:	18ee      	adds	r6, r5, r3
 800d188:	18f7      	adds	r7, r6, r3
 800d18a:	eb07 0c03 	add.w	ip, r7, r3
 800d18e:	920d      	str	r2, [sp, #52]	; 0x34
 800d190:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800d194:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800d198:	910c      	str	r1, [sp, #48]	; 0x30
 800d19a:	4419      	add	r1, r3
 800d19c:	9103      	str	r1, [sp, #12]
 800d19e:	4419      	add	r1, r3
 800d1a0:	18ca      	adds	r2, r1, r3
 800d1a2:	9202      	str	r2, [sp, #8]
 800d1a4:	441a      	add	r2, r3
 800d1a6:	18d0      	adds	r0, r2, r3
 800d1a8:	ed92 ea01 	vldr	s28, [r2, #4]
 800d1ac:	9a02      	ldr	r2, [sp, #8]
 800d1ae:	edd4 7a00 	vldr	s15, [r4]
 800d1b2:	edd2 da01 	vldr	s27, [r2, #4]
 800d1b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1b8:	ed91 da01 	vldr	s26, [r1, #4]
 800d1bc:	ed92 ca01 	vldr	s24, [r2, #4]
 800d1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1c2:	9903      	ldr	r1, [sp, #12]
 800d1c4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d1c8:	edd2 7a00 	vldr	s15, [r2]
 800d1cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1ce:	edcd 7a02 	vstr	s15, [sp, #8]
 800d1d2:	edd2 7a00 	vldr	s15, [r2]
 800d1d6:	edd0 ea01 	vldr	s29, [r0, #4]
 800d1da:	edd1 ca01 	vldr	s25, [r1, #4]
 800d1de:	eddc ba00 	vldr	s23, [ip]
 800d1e2:	edd7 aa00 	vldr	s21, [r7]
 800d1e6:	ed96 aa00 	vldr	s20, [r6]
 800d1ea:	edd5 9a00 	vldr	s19, [r5]
 800d1ee:	edcd 7a01 	vstr	s15, [sp, #4]
 800d1f2:	4403      	add	r3, r0
 800d1f4:	ed93 fa01 	vldr	s30, [r3, #4]
 800d1f8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800d1fc:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800d200:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d208:	46cc      	mov	ip, r9
 800d20a:	e001      	b.n	800d210 <arm_radix8_butterfly_f32+0x2fc>
 800d20c:	3f3504f3 	.word	0x3f3504f3
 800d210:	ed91 6a00 	vldr	s12, [r1]
 800d214:	ed93 5a00 	vldr	s10, [r3]
 800d218:	edd0 fa00 	vldr	s31, [r0]
 800d21c:	edd4 7a00 	vldr	s15, [r4]
 800d220:	ed95 7a00 	vldr	s14, [r5]
 800d224:	ed56 3a01 	vldr	s7, [r6, #-4]
 800d228:	ed17 3a01 	vldr	s6, [r7, #-4]
 800d22c:	ed92 2a00 	vldr	s4, [r2]
 800d230:	ed96 0a00 	vldr	s0, [r6]
 800d234:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d238:	ee32 1a06 	vadd.f32	s2, s4, s12
 800d23c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800d240:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d244:	ee78 1a04 	vadd.f32	s3, s16, s8
 800d248:	ee71 6a24 	vadd.f32	s13, s2, s9
 800d24c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800d250:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800d254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d258:	ed06 6a01 	vstr	s12, [r6, #-4]
 800d25c:	edd4 8a01 	vldr	s17, [r4, #4]
 800d260:	ed92 9a01 	vldr	s18, [r2, #4]
 800d264:	edd7 0a00 	vldr	s1, [r7]
 800d268:	edd1 2a01 	vldr	s5, [r1, #4]
 800d26c:	ed95 7a01 	vldr	s14, [r5, #4]
 800d270:	ed93 6a01 	vldr	s12, [r3, #4]
 800d274:	edd0 5a01 	vldr	s11, [r0, #4]
 800d278:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800d27c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800d280:	ee39 5a62 	vsub.f32	s10, s18, s5
 800d284:	ee78 fac7 	vsub.f32	s31, s17, s14
 800d288:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d28c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800d290:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800d294:	ee79 2a22 	vadd.f32	s5, s18, s5
 800d298:	ee32 9a27 	vadd.f32	s18, s4, s15
 800d29c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800d2a0:	ee30 2a06 	vadd.f32	s4, s0, s12
 800d2a4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800d2a8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d2ac:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800d2b0:	ee32 1a08 	vadd.f32	s2, s4, s16
 800d2b4:	ee72 fa87 	vadd.f32	s31, s5, s14
 800d2b8:	ee32 2a48 	vsub.f32	s4, s4, s16
 800d2bc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800d2c0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800d2c4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d2c8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800d2cc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800d2d0:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800d2d4:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800d2d8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d2dc:	ee30 6a46 	vsub.f32	s12, s0, s12
 800d2e0:	ee74 0a22 	vadd.f32	s1, s8, s5
 800d2e4:	ee36 0a28 	vadd.f32	s0, s12, s17
 800d2e8:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d2ec:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d2f0:	ee32 4a64 	vsub.f32	s8, s4, s9
 800d2f4:	ee73 8a09 	vadd.f32	s17, s6, s18
 800d2f8:	ee74 4a82 	vadd.f32	s9, s9, s4
 800d2fc:	ee33 9a49 	vsub.f32	s18, s6, s18
 800d300:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800d304:	ee35 3a85 	vadd.f32	s6, s11, s10
 800d308:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d30c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800d310:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d314:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800d318:	ee30 7a68 	vsub.f32	s14, s0, s17
 800d31c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800d320:	ee38 0a80 	vadd.f32	s0, s17, s0
 800d324:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d328:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800d32c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800d330:	eddd 1a02 	vldr	s3, [sp, #8]
 800d334:	ee35 5a43 	vsub.f32	s10, s10, s6
 800d338:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800d33c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800d340:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800d344:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d348:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800d34c:	ee76 5a49 	vsub.f32	s11, s12, s18
 800d350:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800d354:	ee39 6a06 	vadd.f32	s12, s18, s12
 800d358:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800d35c:	ee21 4a84 	vmul.f32	s8, s3, s8
 800d360:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800d364:	ee22 7a07 	vmul.f32	s14, s4, s14
 800d368:	ee22 2a08 	vmul.f32	s4, s4, s16
 800d36c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d370:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800d374:	ee31 1a09 	vadd.f32	s2, s2, s18
 800d378:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800d37c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800d380:	ee74 0a60 	vsub.f32	s1, s8, s1
 800d384:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d388:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800d38c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800d390:	ee72 1a21 	vadd.f32	s3, s4, s3
 800d394:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800d398:	ee38 2a89 	vadd.f32	s4, s17, s18
 800d39c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d3a0:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d3a4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d3a8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d3ac:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d3b0:	eddd 5a03 	vldr	s11, [sp, #12]
 800d3b4:	edc6 fa00 	vstr	s31, [r6]
 800d3b8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d3bc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d3c0:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d3c4:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d3c8:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d3cc:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d3d0:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d3d4:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d3d8:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d3dc:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d3e0:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d3e4:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d3e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d3ec:	44c4      	add	ip, r8
 800d3ee:	45e3      	cmp	fp, ip
 800d3f0:	edc3 3a00 	vstr	s7, [r3]
 800d3f4:	edc3 6a01 	vstr	s13, [r3, #4]
 800d3f8:	4456      	add	r6, sl
 800d3fa:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d3fe:	edc7 0a00 	vstr	s1, [r7]
 800d402:	4453      	add	r3, sl
 800d404:	ed80 2a00 	vstr	s4, [r0]
 800d408:	edc0 2a01 	vstr	s5, [r0, #4]
 800d40c:	4457      	add	r7, sl
 800d40e:	edc2 1a00 	vstr	s3, [r2]
 800d412:	ed82 7a01 	vstr	s14, [r2, #4]
 800d416:	4450      	add	r0, sl
 800d418:	ed85 8a00 	vstr	s16, [r5]
 800d41c:	ed85 0a01 	vstr	s0, [r5, #4]
 800d420:	4452      	add	r2, sl
 800d422:	edc1 4a00 	vstr	s9, [r1]
 800d426:	4455      	add	r5, sl
 800d428:	ed81 3a01 	vstr	s6, [r1, #4]
 800d42c:	edc4 8a00 	vstr	s17, [r4]
 800d430:	ed84 6a01 	vstr	s12, [r4, #4]
 800d434:	4451      	add	r1, sl
 800d436:	4454      	add	r4, sl
 800d438:	f63f aeea 	bhi.w	800d210 <arm_radix8_butterfly_f32+0x2fc>
 800d43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d43e:	3308      	adds	r3, #8
 800d440:	930b      	str	r3, [sp, #44]	; 0x2c
 800d442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d444:	3308      	adds	r3, #8
 800d446:	930a      	str	r3, [sp, #40]	; 0x28
 800d448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44a:	3308      	adds	r3, #8
 800d44c:	9309      	str	r3, [sp, #36]	; 0x24
 800d44e:	9b08      	ldr	r3, [sp, #32]
 800d450:	3308      	adds	r3, #8
 800d452:	9308      	str	r3, [sp, #32]
 800d454:	9b07      	ldr	r3, [sp, #28]
 800d456:	3308      	adds	r3, #8
 800d458:	9307      	str	r3, [sp, #28]
 800d45a:	9b06      	ldr	r3, [sp, #24]
 800d45c:	3308      	adds	r3, #8
 800d45e:	9306      	str	r3, [sp, #24]
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	3308      	adds	r3, #8
 800d464:	9305      	str	r3, [sp, #20]
 800d466:	9b04      	ldr	r3, [sp, #16]
 800d468:	3308      	adds	r3, #8
 800d46a:	9304      	str	r3, [sp, #16]
 800d46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d46e:	f109 0901 	add.w	r9, r9, #1
 800d472:	454b      	cmp	r3, r9
 800d474:	f47f ae7d 	bne.w	800d172 <arm_radix8_butterfly_f32+0x25e>
 800d478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	46d9      	mov	r9, fp
 800d480:	9310      	str	r3, [sp, #64]	; 0x40
 800d482:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800d486:	e554      	b.n	800cf32 <arm_radix8_butterfly_f32+0x1e>
 800d488:	b015      	add	sp, #84	; 0x54
 800d48a:	ecbd 8b10 	vpop	{d8-d15}
 800d48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d492:	bf00      	nop

0800d494 <_ZdlPvj>:
 800d494:	f000 b818 	b.w	800d4c8 <_ZdlPv>

0800d498 <_ZdaPv>:
 800d498:	f000 b816 	b.w	800d4c8 <_ZdlPv>

0800d49c <_Znwj>:
 800d49c:	2801      	cmp	r0, #1
 800d49e:	bf38      	it	cc
 800d4a0:	2001      	movcc	r0, #1
 800d4a2:	b510      	push	{r4, lr}
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f002 fbc4 	bl	800fc34 <malloc>
 800d4ac:	b930      	cbnz	r0, 800d4bc <_Znwj+0x20>
 800d4ae:	f000 f81f 	bl	800d4f0 <_ZSt15get_new_handlerv>
 800d4b2:	b908      	cbnz	r0, 800d4b8 <_Znwj+0x1c>
 800d4b4:	f002 fb84 	bl	800fbc0 <abort>
 800d4b8:	4780      	blx	r0
 800d4ba:	e7f4      	b.n	800d4a6 <_Znwj+0xa>
 800d4bc:	bd10      	pop	{r4, pc}

0800d4be <_Znaj>:
 800d4be:	f7ff bfed 	b.w	800d49c <_Znwj>

0800d4c2 <__cxa_pure_virtual>:
 800d4c2:	b508      	push	{r3, lr}
 800d4c4:	f000 f80e 	bl	800d4e4 <_ZSt9terminatev>

0800d4c8 <_ZdlPv>:
 800d4c8:	f002 bbbc 	b.w	800fc44 <free>

0800d4cc <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d4cc:	b508      	push	{r3, lr}
 800d4ce:	4780      	blx	r0
 800d4d0:	f002 fb76 	bl	800fbc0 <abort>

0800d4d4 <_ZSt13get_terminatev>:
 800d4d4:	4b02      	ldr	r3, [pc, #8]	; (800d4e0 <_ZSt13get_terminatev+0xc>)
 800d4d6:	6818      	ldr	r0, [r3, #0]
 800d4d8:	f3bf 8f5b 	dmb	ish
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	20000014 	.word	0x20000014

0800d4e4 <_ZSt9terminatev>:
 800d4e4:	b508      	push	{r3, lr}
 800d4e6:	f7ff fff5 	bl	800d4d4 <_ZSt13get_terminatev>
 800d4ea:	f7ff ffef 	bl	800d4cc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800d4f0 <_ZSt15get_new_handlerv>:
 800d4f0:	4b02      	ldr	r3, [pc, #8]	; (800d4fc <_ZSt15get_new_handlerv+0xc>)
 800d4f2:	6818      	ldr	r0, [r3, #0]
 800d4f4:	f3bf 8f5b 	dmb	ish
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	200003a8 	.word	0x200003a8

0800d500 <ceil>:
 800d500:	ec51 0b10 	vmov	r0, r1, d0
 800d504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d508:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d50c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d510:	2e13      	cmp	r6, #19
 800d512:	ee10 5a10 	vmov	r5, s0
 800d516:	ee10 8a10 	vmov	r8, s0
 800d51a:	460c      	mov	r4, r1
 800d51c:	dc30      	bgt.n	800d580 <ceil+0x80>
 800d51e:	2e00      	cmp	r6, #0
 800d520:	da12      	bge.n	800d548 <ceil+0x48>
 800d522:	a335      	add	r3, pc, #212	; (adr r3, 800d5f8 <ceil+0xf8>)
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	f7f2 feb0 	bl	800028c <__adddf3>
 800d52c:	2200      	movs	r2, #0
 800d52e:	2300      	movs	r3, #0
 800d530:	f7f3 faf2 	bl	8000b18 <__aeabi_dcmpgt>
 800d534:	b128      	cbz	r0, 800d542 <ceil+0x42>
 800d536:	2c00      	cmp	r4, #0
 800d538:	db55      	blt.n	800d5e6 <ceil+0xe6>
 800d53a:	432c      	orrs	r4, r5
 800d53c:	d057      	beq.n	800d5ee <ceil+0xee>
 800d53e:	4c30      	ldr	r4, [pc, #192]	; (800d600 <ceil+0x100>)
 800d540:	2500      	movs	r5, #0
 800d542:	4621      	mov	r1, r4
 800d544:	4628      	mov	r0, r5
 800d546:	e025      	b.n	800d594 <ceil+0x94>
 800d548:	4f2e      	ldr	r7, [pc, #184]	; (800d604 <ceil+0x104>)
 800d54a:	4137      	asrs	r7, r6
 800d54c:	ea01 0307 	and.w	r3, r1, r7
 800d550:	4303      	orrs	r3, r0
 800d552:	d01f      	beq.n	800d594 <ceil+0x94>
 800d554:	a328      	add	r3, pc, #160	; (adr r3, 800d5f8 <ceil+0xf8>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	f7f2 fe97 	bl	800028c <__adddf3>
 800d55e:	2200      	movs	r2, #0
 800d560:	2300      	movs	r3, #0
 800d562:	f7f3 fad9 	bl	8000b18 <__aeabi_dcmpgt>
 800d566:	2800      	cmp	r0, #0
 800d568:	d0eb      	beq.n	800d542 <ceil+0x42>
 800d56a:	2c00      	cmp	r4, #0
 800d56c:	bfc2      	ittt	gt
 800d56e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d572:	fa43 f606 	asrgt.w	r6, r3, r6
 800d576:	19a4      	addgt	r4, r4, r6
 800d578:	ea24 0407 	bic.w	r4, r4, r7
 800d57c:	2500      	movs	r5, #0
 800d57e:	e7e0      	b.n	800d542 <ceil+0x42>
 800d580:	2e33      	cmp	r6, #51	; 0x33
 800d582:	dd0b      	ble.n	800d59c <ceil+0x9c>
 800d584:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d588:	d104      	bne.n	800d594 <ceil+0x94>
 800d58a:	ee10 2a10 	vmov	r2, s0
 800d58e:	460b      	mov	r3, r1
 800d590:	f7f2 fe7c 	bl	800028c <__adddf3>
 800d594:	ec41 0b10 	vmov	d0, r0, r1
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a4:	fa23 f707 	lsr.w	r7, r3, r7
 800d5a8:	4207      	tst	r7, r0
 800d5aa:	d0f3      	beq.n	800d594 <ceil+0x94>
 800d5ac:	a312      	add	r3, pc, #72	; (adr r3, 800d5f8 <ceil+0xf8>)
 800d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b2:	f7f2 fe6b 	bl	800028c <__adddf3>
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f7f3 faad 	bl	8000b18 <__aeabi_dcmpgt>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d0bf      	beq.n	800d542 <ceil+0x42>
 800d5c2:	2c00      	cmp	r4, #0
 800d5c4:	dd02      	ble.n	800d5cc <ceil+0xcc>
 800d5c6:	2e14      	cmp	r6, #20
 800d5c8:	d103      	bne.n	800d5d2 <ceil+0xd2>
 800d5ca:	3401      	adds	r4, #1
 800d5cc:	ea25 0507 	bic.w	r5, r5, r7
 800d5d0:	e7b7      	b.n	800d542 <ceil+0x42>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d5d8:	fa03 f606 	lsl.w	r6, r3, r6
 800d5dc:	4435      	add	r5, r6
 800d5de:	4545      	cmp	r5, r8
 800d5e0:	bf38      	it	cc
 800d5e2:	18e4      	addcc	r4, r4, r3
 800d5e4:	e7f2      	b.n	800d5cc <ceil+0xcc>
 800d5e6:	2500      	movs	r5, #0
 800d5e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d5ec:	e7a9      	b.n	800d542 <ceil+0x42>
 800d5ee:	4625      	mov	r5, r4
 800d5f0:	e7a7      	b.n	800d542 <ceil+0x42>
 800d5f2:	bf00      	nop
 800d5f4:	f3af 8000 	nop.w
 800d5f8:	8800759c 	.word	0x8800759c
 800d5fc:	7e37e43c 	.word	0x7e37e43c
 800d600:	3ff00000 	.word	0x3ff00000
 800d604:	000fffff 	.word	0x000fffff

0800d608 <cos>:
 800d608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d60a:	ec53 2b10 	vmov	r2, r3, d0
 800d60e:	4824      	ldr	r0, [pc, #144]	; (800d6a0 <cos+0x98>)
 800d610:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d614:	4281      	cmp	r1, r0
 800d616:	dc06      	bgt.n	800d626 <cos+0x1e>
 800d618:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d698 <cos+0x90>
 800d61c:	f001 fc54 	bl	800eec8 <__kernel_cos>
 800d620:	ec51 0b10 	vmov	r0, r1, d0
 800d624:	e007      	b.n	800d636 <cos+0x2e>
 800d626:	481f      	ldr	r0, [pc, #124]	; (800d6a4 <cos+0x9c>)
 800d628:	4281      	cmp	r1, r0
 800d62a:	dd09      	ble.n	800d640 <cos+0x38>
 800d62c:	ee10 0a10 	vmov	r0, s0
 800d630:	4619      	mov	r1, r3
 800d632:	f7f2 fe29 	bl	8000288 <__aeabi_dsub>
 800d636:	ec41 0b10 	vmov	d0, r0, r1
 800d63a:	b005      	add	sp, #20
 800d63c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d640:	4668      	mov	r0, sp
 800d642:	f001 f88d 	bl	800e760 <__ieee754_rem_pio2>
 800d646:	f000 0003 	and.w	r0, r0, #3
 800d64a:	2801      	cmp	r0, #1
 800d64c:	d007      	beq.n	800d65e <cos+0x56>
 800d64e:	2802      	cmp	r0, #2
 800d650:	d012      	beq.n	800d678 <cos+0x70>
 800d652:	b9c0      	cbnz	r0, 800d686 <cos+0x7e>
 800d654:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d658:	ed9d 0b00 	vldr	d0, [sp]
 800d65c:	e7de      	b.n	800d61c <cos+0x14>
 800d65e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d662:	ed9d 0b00 	vldr	d0, [sp]
 800d666:	f002 f837 	bl	800f6d8 <__kernel_sin>
 800d66a:	ec53 2b10 	vmov	r2, r3, d0
 800d66e:	ee10 0a10 	vmov	r0, s0
 800d672:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d676:	e7de      	b.n	800d636 <cos+0x2e>
 800d678:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d67c:	ed9d 0b00 	vldr	d0, [sp]
 800d680:	f001 fc22 	bl	800eec8 <__kernel_cos>
 800d684:	e7f1      	b.n	800d66a <cos+0x62>
 800d686:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d68a:	ed9d 0b00 	vldr	d0, [sp]
 800d68e:	2001      	movs	r0, #1
 800d690:	f002 f822 	bl	800f6d8 <__kernel_sin>
 800d694:	e7c4      	b.n	800d620 <cos+0x18>
 800d696:	bf00      	nop
	...
 800d6a0:	3fe921fb 	.word	0x3fe921fb
 800d6a4:	7fefffff 	.word	0x7fefffff

0800d6a8 <roundf>:
 800d6a8:	ee10 0a10 	vmov	r0, s0
 800d6ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d6b0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800d6b4:	2a16      	cmp	r2, #22
 800d6b6:	dc15      	bgt.n	800d6e4 <roundf+0x3c>
 800d6b8:	2a00      	cmp	r2, #0
 800d6ba:	da08      	bge.n	800d6ce <roundf+0x26>
 800d6bc:	3201      	adds	r2, #1
 800d6be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d6c2:	d101      	bne.n	800d6c8 <roundf+0x20>
 800d6c4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d6c8:	ee00 3a10 	vmov	s0, r3
 800d6cc:	4770      	bx	lr
 800d6ce:	4908      	ldr	r1, [pc, #32]	; (800d6f0 <roundf+0x48>)
 800d6d0:	4111      	asrs	r1, r2
 800d6d2:	4208      	tst	r0, r1
 800d6d4:	d0fa      	beq.n	800d6cc <roundf+0x24>
 800d6d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d6da:	4113      	asrs	r3, r2
 800d6dc:	4403      	add	r3, r0
 800d6de:	ea23 0301 	bic.w	r3, r3, r1
 800d6e2:	e7f1      	b.n	800d6c8 <roundf+0x20>
 800d6e4:	2a80      	cmp	r2, #128	; 0x80
 800d6e6:	d1f1      	bne.n	800d6cc <roundf+0x24>
 800d6e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	007fffff 	.word	0x007fffff
 800d6f4:	00000000 	.word	0x00000000

0800d6f8 <log>:
 800d6f8:	b538      	push	{r3, r4, r5, lr}
 800d6fa:	ed2d 8b02 	vpush	{d8}
 800d6fe:	ec55 4b10 	vmov	r4, r5, d0
 800d702:	f000 f94d 	bl	800d9a0 <__ieee754_log>
 800d706:	4b1e      	ldr	r3, [pc, #120]	; (800d780 <log+0x88>)
 800d708:	eeb0 8a40 	vmov.f32	s16, s0
 800d70c:	eef0 8a60 	vmov.f32	s17, s1
 800d710:	f993 3000 	ldrsb.w	r3, [r3]
 800d714:	3301      	adds	r3, #1
 800d716:	d01a      	beq.n	800d74e <log+0x56>
 800d718:	4622      	mov	r2, r4
 800d71a:	462b      	mov	r3, r5
 800d71c:	4620      	mov	r0, r4
 800d71e:	4629      	mov	r1, r5
 800d720:	f7f3 fa04 	bl	8000b2c <__aeabi_dcmpun>
 800d724:	b998      	cbnz	r0, 800d74e <log+0x56>
 800d726:	2200      	movs	r2, #0
 800d728:	2300      	movs	r3, #0
 800d72a:	4620      	mov	r0, r4
 800d72c:	4629      	mov	r1, r5
 800d72e:	f7f3 f9f3 	bl	8000b18 <__aeabi_dcmpgt>
 800d732:	b960      	cbnz	r0, 800d74e <log+0x56>
 800d734:	2200      	movs	r2, #0
 800d736:	2300      	movs	r3, #0
 800d738:	4620      	mov	r0, r4
 800d73a:	4629      	mov	r1, r5
 800d73c:	f7f3 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d740:	b160      	cbz	r0, 800d75c <log+0x64>
 800d742:	f002 fa4d 	bl	800fbe0 <__errno>
 800d746:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800d778 <log+0x80>
 800d74a:	2322      	movs	r3, #34	; 0x22
 800d74c:	6003      	str	r3, [r0, #0]
 800d74e:	eeb0 0a48 	vmov.f32	s0, s16
 800d752:	eef0 0a68 	vmov.f32	s1, s17
 800d756:	ecbd 8b02 	vpop	{d8}
 800d75a:	bd38      	pop	{r3, r4, r5, pc}
 800d75c:	f002 fa40 	bl	800fbe0 <__errno>
 800d760:	ecbd 8b02 	vpop	{d8}
 800d764:	2321      	movs	r3, #33	; 0x21
 800d766:	6003      	str	r3, [r0, #0]
 800d768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d76c:	4805      	ldr	r0, [pc, #20]	; (800d784 <log+0x8c>)
 800d76e:	f002 b907 	b.w	800f980 <nan>
 800d772:	bf00      	nop
 800d774:	f3af 8000 	nop.w
 800d778:	00000000 	.word	0x00000000
 800d77c:	fff00000 	.word	0xfff00000
 800d780:	20000018 	.word	0x20000018
 800d784:	0802914d 	.word	0x0802914d

0800d788 <pow>:
 800d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d78c:	ec59 8b10 	vmov	r8, r9, d0
 800d790:	ec57 6b11 	vmov	r6, r7, d1
 800d794:	f000 fac0 	bl	800dd18 <__ieee754_pow>
 800d798:	4b4e      	ldr	r3, [pc, #312]	; (800d8d4 <pow+0x14c>)
 800d79a:	f993 3000 	ldrsb.w	r3, [r3]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	ec55 4b10 	vmov	r4, r5, d0
 800d7a4:	d015      	beq.n	800d7d2 <pow+0x4a>
 800d7a6:	4632      	mov	r2, r6
 800d7a8:	463b      	mov	r3, r7
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	f7f3 f9bd 	bl	8000b2c <__aeabi_dcmpun>
 800d7b2:	b970      	cbnz	r0, 800d7d2 <pow+0x4a>
 800d7b4:	4642      	mov	r2, r8
 800d7b6:	464b      	mov	r3, r9
 800d7b8:	4640      	mov	r0, r8
 800d7ba:	4649      	mov	r1, r9
 800d7bc:	f7f3 f9b6 	bl	8000b2c <__aeabi_dcmpun>
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	b148      	cbz	r0, 800d7da <pow+0x52>
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7f3 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d17d      	bne.n	800d8ce <pow+0x146>
 800d7d2:	ec45 4b10 	vmov	d0, r4, r5
 800d7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7da:	4640      	mov	r0, r8
 800d7dc:	4649      	mov	r1, r9
 800d7de:	f7f3 f973 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7e2:	b1e0      	cbz	r0, 800d81e <pow+0x96>
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	4639      	mov	r1, r7
 800d7ec:	f7f3 f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d16c      	bne.n	800d8ce <pow+0x146>
 800d7f4:	ec47 6b10 	vmov	d0, r6, r7
 800d7f8:	f002 f835 	bl	800f866 <finite>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d0e8      	beq.n	800d7d2 <pow+0x4a>
 800d800:	2200      	movs	r2, #0
 800d802:	2300      	movs	r3, #0
 800d804:	4630      	mov	r0, r6
 800d806:	4639      	mov	r1, r7
 800d808:	f7f3 f968 	bl	8000adc <__aeabi_dcmplt>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d0e0      	beq.n	800d7d2 <pow+0x4a>
 800d810:	f002 f9e6 	bl	800fbe0 <__errno>
 800d814:	2321      	movs	r3, #33	; 0x21
 800d816:	6003      	str	r3, [r0, #0]
 800d818:	2400      	movs	r4, #0
 800d81a:	4d2f      	ldr	r5, [pc, #188]	; (800d8d8 <pow+0x150>)
 800d81c:	e7d9      	b.n	800d7d2 <pow+0x4a>
 800d81e:	ec45 4b10 	vmov	d0, r4, r5
 800d822:	f002 f820 	bl	800f866 <finite>
 800d826:	bbb8      	cbnz	r0, 800d898 <pow+0x110>
 800d828:	ec49 8b10 	vmov	d0, r8, r9
 800d82c:	f002 f81b 	bl	800f866 <finite>
 800d830:	b390      	cbz	r0, 800d898 <pow+0x110>
 800d832:	ec47 6b10 	vmov	d0, r6, r7
 800d836:	f002 f816 	bl	800f866 <finite>
 800d83a:	b368      	cbz	r0, 800d898 <pow+0x110>
 800d83c:	4622      	mov	r2, r4
 800d83e:	462b      	mov	r3, r5
 800d840:	4620      	mov	r0, r4
 800d842:	4629      	mov	r1, r5
 800d844:	f7f3 f972 	bl	8000b2c <__aeabi_dcmpun>
 800d848:	b160      	cbz	r0, 800d864 <pow+0xdc>
 800d84a:	f002 f9c9 	bl	800fbe0 <__errno>
 800d84e:	2321      	movs	r3, #33	; 0x21
 800d850:	6003      	str	r3, [r0, #0]
 800d852:	2200      	movs	r2, #0
 800d854:	2300      	movs	r3, #0
 800d856:	4610      	mov	r0, r2
 800d858:	4619      	mov	r1, r3
 800d85a:	f7f2 fff7 	bl	800084c <__aeabi_ddiv>
 800d85e:	4604      	mov	r4, r0
 800d860:	460d      	mov	r5, r1
 800d862:	e7b6      	b.n	800d7d2 <pow+0x4a>
 800d864:	f002 f9bc 	bl	800fbe0 <__errno>
 800d868:	2322      	movs	r3, #34	; 0x22
 800d86a:	6003      	str	r3, [r0, #0]
 800d86c:	2200      	movs	r2, #0
 800d86e:	2300      	movs	r3, #0
 800d870:	4640      	mov	r0, r8
 800d872:	4649      	mov	r1, r9
 800d874:	f7f3 f932 	bl	8000adc <__aeabi_dcmplt>
 800d878:	2400      	movs	r4, #0
 800d87a:	b158      	cbz	r0, 800d894 <pow+0x10c>
 800d87c:	ec47 6b10 	vmov	d0, r6, r7
 800d880:	f002 f886 	bl	800f990 <rint>
 800d884:	4632      	mov	r2, r6
 800d886:	ec51 0b10 	vmov	r0, r1, d0
 800d88a:	463b      	mov	r3, r7
 800d88c:	f7f3 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d890:	2800      	cmp	r0, #0
 800d892:	d0c2      	beq.n	800d81a <pow+0x92>
 800d894:	4d11      	ldr	r5, [pc, #68]	; (800d8dc <pow+0x154>)
 800d896:	e79c      	b.n	800d7d2 <pow+0x4a>
 800d898:	2200      	movs	r2, #0
 800d89a:	2300      	movs	r3, #0
 800d89c:	4620      	mov	r0, r4
 800d89e:	4629      	mov	r1, r5
 800d8a0:	f7f3 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d094      	beq.n	800d7d2 <pow+0x4a>
 800d8a8:	ec49 8b10 	vmov	d0, r8, r9
 800d8ac:	f001 ffdb 	bl	800f866 <finite>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d08e      	beq.n	800d7d2 <pow+0x4a>
 800d8b4:	ec47 6b10 	vmov	d0, r6, r7
 800d8b8:	f001 ffd5 	bl	800f866 <finite>
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	d088      	beq.n	800d7d2 <pow+0x4a>
 800d8c0:	f002 f98e 	bl	800fbe0 <__errno>
 800d8c4:	2322      	movs	r3, #34	; 0x22
 800d8c6:	6003      	str	r3, [r0, #0]
 800d8c8:	2400      	movs	r4, #0
 800d8ca:	2500      	movs	r5, #0
 800d8cc:	e781      	b.n	800d7d2 <pow+0x4a>
 800d8ce:	4d04      	ldr	r5, [pc, #16]	; (800d8e0 <pow+0x158>)
 800d8d0:	2400      	movs	r4, #0
 800d8d2:	e77e      	b.n	800d7d2 <pow+0x4a>
 800d8d4:	20000018 	.word	0x20000018
 800d8d8:	fff00000 	.word	0xfff00000
 800d8dc:	7ff00000 	.word	0x7ff00000
 800d8e0:	3ff00000 	.word	0x3ff00000

0800d8e4 <logf>:
 800d8e4:	b508      	push	{r3, lr}
 800d8e6:	ed2d 8b02 	vpush	{d8}
 800d8ea:	eeb0 8a40 	vmov.f32	s16, s0
 800d8ee:	f001 f9f5 	bl	800ecdc <__ieee754_logf>
 800d8f2:	4b14      	ldr	r3, [pc, #80]	; (800d944 <logf+0x60>)
 800d8f4:	f993 3000 	ldrsb.w	r3, [r3]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	d014      	beq.n	800d926 <logf+0x42>
 800d8fc:	eeb4 8a48 	vcmp.f32	s16, s16
 800d900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d904:	d60f      	bvs.n	800d926 <logf+0x42>
 800d906:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d90e:	dc0a      	bgt.n	800d926 <logf+0x42>
 800d910:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d918:	d108      	bne.n	800d92c <logf+0x48>
 800d91a:	f002 f961 	bl	800fbe0 <__errno>
 800d91e:	2322      	movs	r3, #34	; 0x22
 800d920:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d948 <logf+0x64>
 800d924:	6003      	str	r3, [r0, #0]
 800d926:	ecbd 8b02 	vpop	{d8}
 800d92a:	bd08      	pop	{r3, pc}
 800d92c:	f002 f958 	bl	800fbe0 <__errno>
 800d930:	ecbd 8b02 	vpop	{d8}
 800d934:	2321      	movs	r3, #33	; 0x21
 800d936:	6003      	str	r3, [r0, #0]
 800d938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d93c:	4803      	ldr	r0, [pc, #12]	; (800d94c <logf+0x68>)
 800d93e:	f002 b939 	b.w	800fbb4 <nanf>
 800d942:	bf00      	nop
 800d944:	20000018 	.word	0x20000018
 800d948:	ff800000 	.word	0xff800000
 800d94c:	0802914d 	.word	0x0802914d

0800d950 <sqrtf>:
 800d950:	b508      	push	{r3, lr}
 800d952:	ed2d 8b02 	vpush	{d8}
 800d956:	eeb0 8a40 	vmov.f32	s16, s0
 800d95a:	f001 faaf 	bl	800eebc <__ieee754_sqrtf>
 800d95e:	4b0d      	ldr	r3, [pc, #52]	; (800d994 <sqrtf+0x44>)
 800d960:	f993 3000 	ldrsb.w	r3, [r3]
 800d964:	3301      	adds	r3, #1
 800d966:	d011      	beq.n	800d98c <sqrtf+0x3c>
 800d968:	eeb4 8a48 	vcmp.f32	s16, s16
 800d96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d970:	d60c      	bvs.n	800d98c <sqrtf+0x3c>
 800d972:	eddf 8a09 	vldr	s17, [pc, #36]	; 800d998 <sqrtf+0x48>
 800d976:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97e:	d505      	bpl.n	800d98c <sqrtf+0x3c>
 800d980:	f002 f92e 	bl	800fbe0 <__errno>
 800d984:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d988:	2321      	movs	r3, #33	; 0x21
 800d98a:	6003      	str	r3, [r0, #0]
 800d98c:	ecbd 8b02 	vpop	{d8}
 800d990:	bd08      	pop	{r3, pc}
 800d992:	bf00      	nop
 800d994:	20000018 	.word	0x20000018
	...

0800d9a0 <__ieee754_log>:
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	ec51 0b10 	vmov	r0, r1, d0
 800d9a8:	ed2d 8b04 	vpush	{d8-d9}
 800d9ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d9b0:	b083      	sub	sp, #12
 800d9b2:	460d      	mov	r5, r1
 800d9b4:	da29      	bge.n	800da0a <__ieee754_log+0x6a>
 800d9b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9ba:	4303      	orrs	r3, r0
 800d9bc:	ee10 2a10 	vmov	r2, s0
 800d9c0:	d10c      	bne.n	800d9dc <__ieee754_log+0x3c>
 800d9c2:	49cf      	ldr	r1, [pc, #828]	; (800dd00 <__ieee754_log+0x360>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f7f2 ff3f 	bl	800084c <__aeabi_ddiv>
 800d9ce:	ec41 0b10 	vmov	d0, r0, r1
 800d9d2:	b003      	add	sp, #12
 800d9d4:	ecbd 8b04 	vpop	{d8-d9}
 800d9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9dc:	2900      	cmp	r1, #0
 800d9de:	da05      	bge.n	800d9ec <__ieee754_log+0x4c>
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	f7f2 fc51 	bl	8000288 <__aeabi_dsub>
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	e7ee      	b.n	800d9ca <__ieee754_log+0x2a>
 800d9ec:	4bc5      	ldr	r3, [pc, #788]	; (800dd04 <__ieee754_log+0x364>)
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f7f2 fe02 	bl	80005f8 <__aeabi_dmul>
 800d9f4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	4ac3      	ldr	r2, [pc, #780]	; (800dd08 <__ieee754_log+0x368>)
 800d9fc:	4295      	cmp	r5, r2
 800d9fe:	dd06      	ble.n	800da0e <__ieee754_log+0x6e>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	f7f2 fc42 	bl	800028c <__adddf3>
 800da08:	e7e1      	b.n	800d9ce <__ieee754_log+0x2e>
 800da0a:	2300      	movs	r3, #0
 800da0c:	e7f5      	b.n	800d9fa <__ieee754_log+0x5a>
 800da0e:	152c      	asrs	r4, r5, #20
 800da10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800da14:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800da18:	441c      	add	r4, r3
 800da1a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800da1e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800da22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da26:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800da2a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800da2e:	ea42 0105 	orr.w	r1, r2, r5
 800da32:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800da36:	2200      	movs	r2, #0
 800da38:	4bb4      	ldr	r3, [pc, #720]	; (800dd0c <__ieee754_log+0x36c>)
 800da3a:	f7f2 fc25 	bl	8000288 <__aeabi_dsub>
 800da3e:	1cab      	adds	r3, r5, #2
 800da40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da44:	2b02      	cmp	r3, #2
 800da46:	4682      	mov	sl, r0
 800da48:	468b      	mov	fp, r1
 800da4a:	f04f 0200 	mov.w	r2, #0
 800da4e:	dc53      	bgt.n	800daf8 <__ieee754_log+0x158>
 800da50:	2300      	movs	r3, #0
 800da52:	f7f3 f839 	bl	8000ac8 <__aeabi_dcmpeq>
 800da56:	b1d0      	cbz	r0, 800da8e <__ieee754_log+0xee>
 800da58:	2c00      	cmp	r4, #0
 800da5a:	f000 8122 	beq.w	800dca2 <__ieee754_log+0x302>
 800da5e:	4620      	mov	r0, r4
 800da60:	f7f2 fd60 	bl	8000524 <__aeabi_i2d>
 800da64:	a390      	add	r3, pc, #576	; (adr r3, 800dca8 <__ieee754_log+0x308>)
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	4606      	mov	r6, r0
 800da6c:	460f      	mov	r7, r1
 800da6e:	f7f2 fdc3 	bl	80005f8 <__aeabi_dmul>
 800da72:	a38f      	add	r3, pc, #572	; (adr r3, 800dcb0 <__ieee754_log+0x310>)
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	4604      	mov	r4, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	4630      	mov	r0, r6
 800da7e:	4639      	mov	r1, r7
 800da80:	f7f2 fdba 	bl	80005f8 <__aeabi_dmul>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4620      	mov	r0, r4
 800da8a:	4629      	mov	r1, r5
 800da8c:	e7ba      	b.n	800da04 <__ieee754_log+0x64>
 800da8e:	a38a      	add	r3, pc, #552	; (adr r3, 800dcb8 <__ieee754_log+0x318>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	4650      	mov	r0, sl
 800da96:	4659      	mov	r1, fp
 800da98:	f7f2 fdae 	bl	80005f8 <__aeabi_dmul>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	2000      	movs	r0, #0
 800daa2:	499b      	ldr	r1, [pc, #620]	; (800dd10 <__ieee754_log+0x370>)
 800daa4:	f7f2 fbf0 	bl	8000288 <__aeabi_dsub>
 800daa8:	4652      	mov	r2, sl
 800daaa:	4606      	mov	r6, r0
 800daac:	460f      	mov	r7, r1
 800daae:	465b      	mov	r3, fp
 800dab0:	4650      	mov	r0, sl
 800dab2:	4659      	mov	r1, fp
 800dab4:	f7f2 fda0 	bl	80005f8 <__aeabi_dmul>
 800dab8:	4602      	mov	r2, r0
 800daba:	460b      	mov	r3, r1
 800dabc:	4630      	mov	r0, r6
 800dabe:	4639      	mov	r1, r7
 800dac0:	f7f2 fd9a 	bl	80005f8 <__aeabi_dmul>
 800dac4:	4606      	mov	r6, r0
 800dac6:	460f      	mov	r7, r1
 800dac8:	b914      	cbnz	r4, 800dad0 <__ieee754_log+0x130>
 800daca:	4632      	mov	r2, r6
 800dacc:	463b      	mov	r3, r7
 800dace:	e0a2      	b.n	800dc16 <__ieee754_log+0x276>
 800dad0:	4620      	mov	r0, r4
 800dad2:	f7f2 fd27 	bl	8000524 <__aeabi_i2d>
 800dad6:	a374      	add	r3, pc, #464	; (adr r3, 800dca8 <__ieee754_log+0x308>)
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	4680      	mov	r8, r0
 800dade:	4689      	mov	r9, r1
 800dae0:	f7f2 fd8a 	bl	80005f8 <__aeabi_dmul>
 800dae4:	a372      	add	r3, pc, #456	; (adr r3, 800dcb0 <__ieee754_log+0x310>)
 800dae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daea:	4604      	mov	r4, r0
 800daec:	460d      	mov	r5, r1
 800daee:	4640      	mov	r0, r8
 800daf0:	4649      	mov	r1, r9
 800daf2:	f7f2 fd81 	bl	80005f8 <__aeabi_dmul>
 800daf6:	e0a7      	b.n	800dc48 <__ieee754_log+0x2a8>
 800daf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dafc:	f7f2 fbc6 	bl	800028c <__adddf3>
 800db00:	4602      	mov	r2, r0
 800db02:	460b      	mov	r3, r1
 800db04:	4650      	mov	r0, sl
 800db06:	4659      	mov	r1, fp
 800db08:	f7f2 fea0 	bl	800084c <__aeabi_ddiv>
 800db0c:	ec41 0b18 	vmov	d8, r0, r1
 800db10:	4620      	mov	r0, r4
 800db12:	f7f2 fd07 	bl	8000524 <__aeabi_i2d>
 800db16:	ec53 2b18 	vmov	r2, r3, d8
 800db1a:	ec41 0b19 	vmov	d9, r0, r1
 800db1e:	ec51 0b18 	vmov	r0, r1, d8
 800db22:	f7f2 fd69 	bl	80005f8 <__aeabi_dmul>
 800db26:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800db2a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800db2e:	9301      	str	r3, [sp, #4]
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	4680      	mov	r8, r0
 800db36:	4689      	mov	r9, r1
 800db38:	f7f2 fd5e 	bl	80005f8 <__aeabi_dmul>
 800db3c:	a360      	add	r3, pc, #384	; (adr r3, 800dcc0 <__ieee754_log+0x320>)
 800db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	f7f2 fd57 	bl	80005f8 <__aeabi_dmul>
 800db4a:	a35f      	add	r3, pc, #380	; (adr r3, 800dcc8 <__ieee754_log+0x328>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	f7f2 fb9c 	bl	800028c <__adddf3>
 800db54:	4632      	mov	r2, r6
 800db56:	463b      	mov	r3, r7
 800db58:	f7f2 fd4e 	bl	80005f8 <__aeabi_dmul>
 800db5c:	a35c      	add	r3, pc, #368	; (adr r3, 800dcd0 <__ieee754_log+0x330>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	f7f2 fb93 	bl	800028c <__adddf3>
 800db66:	4632      	mov	r2, r6
 800db68:	463b      	mov	r3, r7
 800db6a:	f7f2 fd45 	bl	80005f8 <__aeabi_dmul>
 800db6e:	a35a      	add	r3, pc, #360	; (adr r3, 800dcd8 <__ieee754_log+0x338>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	f7f2 fb8a 	bl	800028c <__adddf3>
 800db78:	4642      	mov	r2, r8
 800db7a:	464b      	mov	r3, r9
 800db7c:	f7f2 fd3c 	bl	80005f8 <__aeabi_dmul>
 800db80:	a357      	add	r3, pc, #348	; (adr r3, 800dce0 <__ieee754_log+0x340>)
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	4680      	mov	r8, r0
 800db88:	4689      	mov	r9, r1
 800db8a:	4630      	mov	r0, r6
 800db8c:	4639      	mov	r1, r7
 800db8e:	f7f2 fd33 	bl	80005f8 <__aeabi_dmul>
 800db92:	a355      	add	r3, pc, #340	; (adr r3, 800dce8 <__ieee754_log+0x348>)
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f7f2 fb78 	bl	800028c <__adddf3>
 800db9c:	4632      	mov	r2, r6
 800db9e:	463b      	mov	r3, r7
 800dba0:	f7f2 fd2a 	bl	80005f8 <__aeabi_dmul>
 800dba4:	a352      	add	r3, pc, #328	; (adr r3, 800dcf0 <__ieee754_log+0x350>)
 800dba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbaa:	f7f2 fb6f 	bl	800028c <__adddf3>
 800dbae:	4632      	mov	r2, r6
 800dbb0:	463b      	mov	r3, r7
 800dbb2:	f7f2 fd21 	bl	80005f8 <__aeabi_dmul>
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4602      	mov	r2, r0
 800dbba:	4649      	mov	r1, r9
 800dbbc:	4640      	mov	r0, r8
 800dbbe:	f7f2 fb65 	bl	800028c <__adddf3>
 800dbc2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800dbc6:	9b01      	ldr	r3, [sp, #4]
 800dbc8:	3551      	adds	r5, #81	; 0x51
 800dbca:	431d      	orrs	r5, r3
 800dbcc:	2d00      	cmp	r5, #0
 800dbce:	4680      	mov	r8, r0
 800dbd0:	4689      	mov	r9, r1
 800dbd2:	dd48      	ble.n	800dc66 <__ieee754_log+0x2c6>
 800dbd4:	4b4e      	ldr	r3, [pc, #312]	; (800dd10 <__ieee754_log+0x370>)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	4650      	mov	r0, sl
 800dbda:	4659      	mov	r1, fp
 800dbdc:	f7f2 fd0c 	bl	80005f8 <__aeabi_dmul>
 800dbe0:	4652      	mov	r2, sl
 800dbe2:	465b      	mov	r3, fp
 800dbe4:	f7f2 fd08 	bl	80005f8 <__aeabi_dmul>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4606      	mov	r6, r0
 800dbee:	460f      	mov	r7, r1
 800dbf0:	4640      	mov	r0, r8
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	f7f2 fb4a 	bl	800028c <__adddf3>
 800dbf8:	ec53 2b18 	vmov	r2, r3, d8
 800dbfc:	f7f2 fcfc 	bl	80005f8 <__aeabi_dmul>
 800dc00:	4680      	mov	r8, r0
 800dc02:	4689      	mov	r9, r1
 800dc04:	b964      	cbnz	r4, 800dc20 <__ieee754_log+0x280>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	4639      	mov	r1, r7
 800dc0e:	f7f2 fb3b 	bl	8000288 <__aeabi_dsub>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4650      	mov	r0, sl
 800dc18:	4659      	mov	r1, fp
 800dc1a:	f7f2 fb35 	bl	8000288 <__aeabi_dsub>
 800dc1e:	e6d6      	b.n	800d9ce <__ieee754_log+0x2e>
 800dc20:	a321      	add	r3, pc, #132	; (adr r3, 800dca8 <__ieee754_log+0x308>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	ec51 0b19 	vmov	r0, r1, d9
 800dc2a:	f7f2 fce5 	bl	80005f8 <__aeabi_dmul>
 800dc2e:	a320      	add	r3, pc, #128	; (adr r3, 800dcb0 <__ieee754_log+0x310>)
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	4604      	mov	r4, r0
 800dc36:	460d      	mov	r5, r1
 800dc38:	ec51 0b19 	vmov	r0, r1, d9
 800dc3c:	f7f2 fcdc 	bl	80005f8 <__aeabi_dmul>
 800dc40:	4642      	mov	r2, r8
 800dc42:	464b      	mov	r3, r9
 800dc44:	f7f2 fb22 	bl	800028c <__adddf3>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	4639      	mov	r1, r7
 800dc50:	f7f2 fb1a 	bl	8000288 <__aeabi_dsub>
 800dc54:	4652      	mov	r2, sl
 800dc56:	465b      	mov	r3, fp
 800dc58:	f7f2 fb16 	bl	8000288 <__aeabi_dsub>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4620      	mov	r0, r4
 800dc62:	4629      	mov	r1, r5
 800dc64:	e7d9      	b.n	800dc1a <__ieee754_log+0x27a>
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	4650      	mov	r0, sl
 800dc6c:	4659      	mov	r1, fp
 800dc6e:	f7f2 fb0b 	bl	8000288 <__aeabi_dsub>
 800dc72:	ec53 2b18 	vmov	r2, r3, d8
 800dc76:	f7f2 fcbf 	bl	80005f8 <__aeabi_dmul>
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	460f      	mov	r7, r1
 800dc7e:	2c00      	cmp	r4, #0
 800dc80:	f43f af23 	beq.w	800daca <__ieee754_log+0x12a>
 800dc84:	a308      	add	r3, pc, #32	; (adr r3, 800dca8 <__ieee754_log+0x308>)
 800dc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8a:	ec51 0b19 	vmov	r0, r1, d9
 800dc8e:	f7f2 fcb3 	bl	80005f8 <__aeabi_dmul>
 800dc92:	a307      	add	r3, pc, #28	; (adr r3, 800dcb0 <__ieee754_log+0x310>)
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	4604      	mov	r4, r0
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	ec51 0b19 	vmov	r0, r1, d9
 800dca0:	e727      	b.n	800daf2 <__ieee754_log+0x152>
 800dca2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800dcf8 <__ieee754_log+0x358>
 800dca6:	e694      	b.n	800d9d2 <__ieee754_log+0x32>
 800dca8:	fee00000 	.word	0xfee00000
 800dcac:	3fe62e42 	.word	0x3fe62e42
 800dcb0:	35793c76 	.word	0x35793c76
 800dcb4:	3dea39ef 	.word	0x3dea39ef
 800dcb8:	55555555 	.word	0x55555555
 800dcbc:	3fd55555 	.word	0x3fd55555
 800dcc0:	df3e5244 	.word	0xdf3e5244
 800dcc4:	3fc2f112 	.word	0x3fc2f112
 800dcc8:	96cb03de 	.word	0x96cb03de
 800dccc:	3fc74664 	.word	0x3fc74664
 800dcd0:	94229359 	.word	0x94229359
 800dcd4:	3fd24924 	.word	0x3fd24924
 800dcd8:	55555593 	.word	0x55555593
 800dcdc:	3fe55555 	.word	0x3fe55555
 800dce0:	d078c69f 	.word	0xd078c69f
 800dce4:	3fc39a09 	.word	0x3fc39a09
 800dce8:	1d8e78af 	.word	0x1d8e78af
 800dcec:	3fcc71c5 	.word	0x3fcc71c5
 800dcf0:	9997fa04 	.word	0x9997fa04
 800dcf4:	3fd99999 	.word	0x3fd99999
	...
 800dd00:	c3500000 	.word	0xc3500000
 800dd04:	43500000 	.word	0x43500000
 800dd08:	7fefffff 	.word	0x7fefffff
 800dd0c:	3ff00000 	.word	0x3ff00000
 800dd10:	3fe00000 	.word	0x3fe00000
 800dd14:	00000000 	.word	0x00000000

0800dd18 <__ieee754_pow>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	ed2d 8b06 	vpush	{d8-d10}
 800dd20:	b08d      	sub	sp, #52	; 0x34
 800dd22:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dd26:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800dd2a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dd2e:	ea56 0100 	orrs.w	r1, r6, r0
 800dd32:	ec53 2b10 	vmov	r2, r3, d0
 800dd36:	f000 84d1 	beq.w	800e6dc <__ieee754_pow+0x9c4>
 800dd3a:	497f      	ldr	r1, [pc, #508]	; (800df38 <__ieee754_pow+0x220>)
 800dd3c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dd40:	428c      	cmp	r4, r1
 800dd42:	ee10 8a10 	vmov	r8, s0
 800dd46:	4699      	mov	r9, r3
 800dd48:	dc09      	bgt.n	800dd5e <__ieee754_pow+0x46>
 800dd4a:	d103      	bne.n	800dd54 <__ieee754_pow+0x3c>
 800dd4c:	b97a      	cbnz	r2, 800dd6e <__ieee754_pow+0x56>
 800dd4e:	42a6      	cmp	r6, r4
 800dd50:	dd02      	ble.n	800dd58 <__ieee754_pow+0x40>
 800dd52:	e00c      	b.n	800dd6e <__ieee754_pow+0x56>
 800dd54:	428e      	cmp	r6, r1
 800dd56:	dc02      	bgt.n	800dd5e <__ieee754_pow+0x46>
 800dd58:	428e      	cmp	r6, r1
 800dd5a:	d110      	bne.n	800dd7e <__ieee754_pow+0x66>
 800dd5c:	b178      	cbz	r0, 800dd7e <__ieee754_pow+0x66>
 800dd5e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dd62:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dd66:	ea54 0308 	orrs.w	r3, r4, r8
 800dd6a:	f000 84b7 	beq.w	800e6dc <__ieee754_pow+0x9c4>
 800dd6e:	4873      	ldr	r0, [pc, #460]	; (800df3c <__ieee754_pow+0x224>)
 800dd70:	b00d      	add	sp, #52	; 0x34
 800dd72:	ecbd 8b06 	vpop	{d8-d10}
 800dd76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7a:	f001 be01 	b.w	800f980 <nan>
 800dd7e:	f1b9 0f00 	cmp.w	r9, #0
 800dd82:	da36      	bge.n	800ddf2 <__ieee754_pow+0xda>
 800dd84:	496e      	ldr	r1, [pc, #440]	; (800df40 <__ieee754_pow+0x228>)
 800dd86:	428e      	cmp	r6, r1
 800dd88:	dc51      	bgt.n	800de2e <__ieee754_pow+0x116>
 800dd8a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800dd8e:	428e      	cmp	r6, r1
 800dd90:	f340 84af 	ble.w	800e6f2 <__ieee754_pow+0x9da>
 800dd94:	1531      	asrs	r1, r6, #20
 800dd96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dd9a:	2914      	cmp	r1, #20
 800dd9c:	dd0f      	ble.n	800ddbe <__ieee754_pow+0xa6>
 800dd9e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800dda2:	fa20 fc01 	lsr.w	ip, r0, r1
 800dda6:	fa0c f101 	lsl.w	r1, ip, r1
 800ddaa:	4281      	cmp	r1, r0
 800ddac:	f040 84a1 	bne.w	800e6f2 <__ieee754_pow+0x9da>
 800ddb0:	f00c 0c01 	and.w	ip, ip, #1
 800ddb4:	f1cc 0102 	rsb	r1, ip, #2
 800ddb8:	9100      	str	r1, [sp, #0]
 800ddba:	b180      	cbz	r0, 800ddde <__ieee754_pow+0xc6>
 800ddbc:	e059      	b.n	800de72 <__ieee754_pow+0x15a>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d155      	bne.n	800de6e <__ieee754_pow+0x156>
 800ddc2:	f1c1 0114 	rsb	r1, r1, #20
 800ddc6:	fa46 fc01 	asr.w	ip, r6, r1
 800ddca:	fa0c f101 	lsl.w	r1, ip, r1
 800ddce:	42b1      	cmp	r1, r6
 800ddd0:	f040 848c 	bne.w	800e6ec <__ieee754_pow+0x9d4>
 800ddd4:	f00c 0c01 	and.w	ip, ip, #1
 800ddd8:	f1cc 0102 	rsb	r1, ip, #2
 800dddc:	9100      	str	r1, [sp, #0]
 800ddde:	4959      	ldr	r1, [pc, #356]	; (800df44 <__ieee754_pow+0x22c>)
 800dde0:	428e      	cmp	r6, r1
 800dde2:	d12d      	bne.n	800de40 <__ieee754_pow+0x128>
 800dde4:	2f00      	cmp	r7, #0
 800dde6:	da79      	bge.n	800dedc <__ieee754_pow+0x1c4>
 800dde8:	4956      	ldr	r1, [pc, #344]	; (800df44 <__ieee754_pow+0x22c>)
 800ddea:	2000      	movs	r0, #0
 800ddec:	f7f2 fd2e 	bl	800084c <__aeabi_ddiv>
 800ddf0:	e016      	b.n	800de20 <__ieee754_pow+0x108>
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	9100      	str	r1, [sp, #0]
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d13b      	bne.n	800de72 <__ieee754_pow+0x15a>
 800ddfa:	494f      	ldr	r1, [pc, #316]	; (800df38 <__ieee754_pow+0x220>)
 800ddfc:	428e      	cmp	r6, r1
 800ddfe:	d1ee      	bne.n	800ddde <__ieee754_pow+0xc6>
 800de00:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800de04:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800de08:	ea53 0308 	orrs.w	r3, r3, r8
 800de0c:	f000 8466 	beq.w	800e6dc <__ieee754_pow+0x9c4>
 800de10:	4b4d      	ldr	r3, [pc, #308]	; (800df48 <__ieee754_pow+0x230>)
 800de12:	429c      	cmp	r4, r3
 800de14:	dd0d      	ble.n	800de32 <__ieee754_pow+0x11a>
 800de16:	2f00      	cmp	r7, #0
 800de18:	f280 8464 	bge.w	800e6e4 <__ieee754_pow+0x9cc>
 800de1c:	2000      	movs	r0, #0
 800de1e:	2100      	movs	r1, #0
 800de20:	ec41 0b10 	vmov	d0, r0, r1
 800de24:	b00d      	add	sp, #52	; 0x34
 800de26:	ecbd 8b06 	vpop	{d8-d10}
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	2102      	movs	r1, #2
 800de30:	e7e0      	b.n	800ddf4 <__ieee754_pow+0xdc>
 800de32:	2f00      	cmp	r7, #0
 800de34:	daf2      	bge.n	800de1c <__ieee754_pow+0x104>
 800de36:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800de3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de3e:	e7ef      	b.n	800de20 <__ieee754_pow+0x108>
 800de40:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800de44:	d104      	bne.n	800de50 <__ieee754_pow+0x138>
 800de46:	4610      	mov	r0, r2
 800de48:	4619      	mov	r1, r3
 800de4a:	f7f2 fbd5 	bl	80005f8 <__aeabi_dmul>
 800de4e:	e7e7      	b.n	800de20 <__ieee754_pow+0x108>
 800de50:	493e      	ldr	r1, [pc, #248]	; (800df4c <__ieee754_pow+0x234>)
 800de52:	428f      	cmp	r7, r1
 800de54:	d10d      	bne.n	800de72 <__ieee754_pow+0x15a>
 800de56:	f1b9 0f00 	cmp.w	r9, #0
 800de5a:	db0a      	blt.n	800de72 <__ieee754_pow+0x15a>
 800de5c:	ec43 2b10 	vmov	d0, r2, r3
 800de60:	b00d      	add	sp, #52	; 0x34
 800de62:	ecbd 8b06 	vpop	{d8-d10}
 800de66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6a:	f000 be83 	b.w	800eb74 <__ieee754_sqrt>
 800de6e:	2100      	movs	r1, #0
 800de70:	9100      	str	r1, [sp, #0]
 800de72:	ec43 2b10 	vmov	d0, r2, r3
 800de76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de7a:	f001 fceb 	bl	800f854 <fabs>
 800de7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de82:	ec51 0b10 	vmov	r0, r1, d0
 800de86:	f1b8 0f00 	cmp.w	r8, #0
 800de8a:	d12a      	bne.n	800dee2 <__ieee754_pow+0x1ca>
 800de8c:	b12c      	cbz	r4, 800de9a <__ieee754_pow+0x182>
 800de8e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800df44 <__ieee754_pow+0x22c>
 800de92:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800de96:	45e6      	cmp	lr, ip
 800de98:	d123      	bne.n	800dee2 <__ieee754_pow+0x1ca>
 800de9a:	2f00      	cmp	r7, #0
 800de9c:	da05      	bge.n	800deaa <__ieee754_pow+0x192>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	2000      	movs	r0, #0
 800dea4:	4927      	ldr	r1, [pc, #156]	; (800df44 <__ieee754_pow+0x22c>)
 800dea6:	f7f2 fcd1 	bl	800084c <__aeabi_ddiv>
 800deaa:	f1b9 0f00 	cmp.w	r9, #0
 800deae:	dab7      	bge.n	800de20 <__ieee754_pow+0x108>
 800deb0:	9b00      	ldr	r3, [sp, #0]
 800deb2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800deb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800deba:	4323      	orrs	r3, r4
 800debc:	d108      	bne.n	800ded0 <__ieee754_pow+0x1b8>
 800debe:	4602      	mov	r2, r0
 800dec0:	460b      	mov	r3, r1
 800dec2:	4610      	mov	r0, r2
 800dec4:	4619      	mov	r1, r3
 800dec6:	f7f2 f9df 	bl	8000288 <__aeabi_dsub>
 800deca:	4602      	mov	r2, r0
 800decc:	460b      	mov	r3, r1
 800dece:	e78d      	b.n	800ddec <__ieee754_pow+0xd4>
 800ded0:	9b00      	ldr	r3, [sp, #0]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d1a4      	bne.n	800de20 <__ieee754_pow+0x108>
 800ded6:	4602      	mov	r2, r0
 800ded8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dedc:	4610      	mov	r0, r2
 800dede:	4619      	mov	r1, r3
 800dee0:	e79e      	b.n	800de20 <__ieee754_pow+0x108>
 800dee2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800dee6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800deea:	950a      	str	r5, [sp, #40]	; 0x28
 800deec:	9d00      	ldr	r5, [sp, #0]
 800deee:	46ac      	mov	ip, r5
 800def0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800def2:	ea5c 0505 	orrs.w	r5, ip, r5
 800def6:	d0e4      	beq.n	800dec2 <__ieee754_pow+0x1aa>
 800def8:	4b15      	ldr	r3, [pc, #84]	; (800df50 <__ieee754_pow+0x238>)
 800defa:	429e      	cmp	r6, r3
 800defc:	f340 80fc 	ble.w	800e0f8 <__ieee754_pow+0x3e0>
 800df00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800df04:	429e      	cmp	r6, r3
 800df06:	4b10      	ldr	r3, [pc, #64]	; (800df48 <__ieee754_pow+0x230>)
 800df08:	dd07      	ble.n	800df1a <__ieee754_pow+0x202>
 800df0a:	429c      	cmp	r4, r3
 800df0c:	dc0a      	bgt.n	800df24 <__ieee754_pow+0x20c>
 800df0e:	2f00      	cmp	r7, #0
 800df10:	da84      	bge.n	800de1c <__ieee754_pow+0x104>
 800df12:	a307      	add	r3, pc, #28	; (adr r3, 800df30 <__ieee754_pow+0x218>)
 800df14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df18:	e795      	b.n	800de46 <__ieee754_pow+0x12e>
 800df1a:	429c      	cmp	r4, r3
 800df1c:	dbf7      	blt.n	800df0e <__ieee754_pow+0x1f6>
 800df1e:	4b09      	ldr	r3, [pc, #36]	; (800df44 <__ieee754_pow+0x22c>)
 800df20:	429c      	cmp	r4, r3
 800df22:	dd17      	ble.n	800df54 <__ieee754_pow+0x23c>
 800df24:	2f00      	cmp	r7, #0
 800df26:	dcf4      	bgt.n	800df12 <__ieee754_pow+0x1fa>
 800df28:	e778      	b.n	800de1c <__ieee754_pow+0x104>
 800df2a:	bf00      	nop
 800df2c:	f3af 8000 	nop.w
 800df30:	8800759c 	.word	0x8800759c
 800df34:	7e37e43c 	.word	0x7e37e43c
 800df38:	7ff00000 	.word	0x7ff00000
 800df3c:	0802914d 	.word	0x0802914d
 800df40:	433fffff 	.word	0x433fffff
 800df44:	3ff00000 	.word	0x3ff00000
 800df48:	3fefffff 	.word	0x3fefffff
 800df4c:	3fe00000 	.word	0x3fe00000
 800df50:	41e00000 	.word	0x41e00000
 800df54:	4b64      	ldr	r3, [pc, #400]	; (800e0e8 <__ieee754_pow+0x3d0>)
 800df56:	2200      	movs	r2, #0
 800df58:	f7f2 f996 	bl	8000288 <__aeabi_dsub>
 800df5c:	a356      	add	r3, pc, #344	; (adr r3, 800e0b8 <__ieee754_pow+0x3a0>)
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	4604      	mov	r4, r0
 800df64:	460d      	mov	r5, r1
 800df66:	f7f2 fb47 	bl	80005f8 <__aeabi_dmul>
 800df6a:	a355      	add	r3, pc, #340	; (adr r3, 800e0c0 <__ieee754_pow+0x3a8>)
 800df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df70:	4606      	mov	r6, r0
 800df72:	460f      	mov	r7, r1
 800df74:	4620      	mov	r0, r4
 800df76:	4629      	mov	r1, r5
 800df78:	f7f2 fb3e 	bl	80005f8 <__aeabi_dmul>
 800df7c:	4b5b      	ldr	r3, [pc, #364]	; (800e0ec <__ieee754_pow+0x3d4>)
 800df7e:	4682      	mov	sl, r0
 800df80:	468b      	mov	fp, r1
 800df82:	2200      	movs	r2, #0
 800df84:	4620      	mov	r0, r4
 800df86:	4629      	mov	r1, r5
 800df88:	f7f2 fb36 	bl	80005f8 <__aeabi_dmul>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	a14d      	add	r1, pc, #308	; (adr r1, 800e0c8 <__ieee754_pow+0x3b0>)
 800df92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df96:	f7f2 f977 	bl	8000288 <__aeabi_dsub>
 800df9a:	4622      	mov	r2, r4
 800df9c:	462b      	mov	r3, r5
 800df9e:	f7f2 fb2b 	bl	80005f8 <__aeabi_dmul>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	4951      	ldr	r1, [pc, #324]	; (800e0f0 <__ieee754_pow+0x3d8>)
 800dfaa:	f7f2 f96d 	bl	8000288 <__aeabi_dsub>
 800dfae:	4622      	mov	r2, r4
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	4689      	mov	r9, r1
 800dfb4:	462b      	mov	r3, r5
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7f2 fb1d 	bl	80005f8 <__aeabi_dmul>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	f7f2 fb17 	bl	80005f8 <__aeabi_dmul>
 800dfca:	a341      	add	r3, pc, #260	; (adr r3, 800e0d0 <__ieee754_pow+0x3b8>)
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	f7f2 fb12 	bl	80005f8 <__aeabi_dmul>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4650      	mov	r0, sl
 800dfda:	4659      	mov	r1, fp
 800dfdc:	f7f2 f954 	bl	8000288 <__aeabi_dsub>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4680      	mov	r8, r0
 800dfe6:	4689      	mov	r9, r1
 800dfe8:	4630      	mov	r0, r6
 800dfea:	4639      	mov	r1, r7
 800dfec:	f7f2 f94e 	bl	800028c <__adddf3>
 800dff0:	2400      	movs	r4, #0
 800dff2:	4632      	mov	r2, r6
 800dff4:	463b      	mov	r3, r7
 800dff6:	4620      	mov	r0, r4
 800dff8:	460d      	mov	r5, r1
 800dffa:	f7f2 f945 	bl	8000288 <__aeabi_dsub>
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	4640      	mov	r0, r8
 800e004:	4649      	mov	r1, r9
 800e006:	f7f2 f93f 	bl	8000288 <__aeabi_dsub>
 800e00a:	9b00      	ldr	r3, [sp, #0]
 800e00c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e00e:	3b01      	subs	r3, #1
 800e010:	4313      	orrs	r3, r2
 800e012:	4682      	mov	sl, r0
 800e014:	468b      	mov	fp, r1
 800e016:	f040 81f1 	bne.w	800e3fc <__ieee754_pow+0x6e4>
 800e01a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e0d8 <__ieee754_pow+0x3c0>
 800e01e:	eeb0 8a47 	vmov.f32	s16, s14
 800e022:	eef0 8a67 	vmov.f32	s17, s15
 800e026:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e02a:	2600      	movs	r6, #0
 800e02c:	4632      	mov	r2, r6
 800e02e:	463b      	mov	r3, r7
 800e030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e034:	f7f2 f928 	bl	8000288 <__aeabi_dsub>
 800e038:	4622      	mov	r2, r4
 800e03a:	462b      	mov	r3, r5
 800e03c:	f7f2 fadc 	bl	80005f8 <__aeabi_dmul>
 800e040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e044:	4680      	mov	r8, r0
 800e046:	4689      	mov	r9, r1
 800e048:	4650      	mov	r0, sl
 800e04a:	4659      	mov	r1, fp
 800e04c:	f7f2 fad4 	bl	80005f8 <__aeabi_dmul>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	4640      	mov	r0, r8
 800e056:	4649      	mov	r1, r9
 800e058:	f7f2 f918 	bl	800028c <__adddf3>
 800e05c:	4632      	mov	r2, r6
 800e05e:	463b      	mov	r3, r7
 800e060:	4680      	mov	r8, r0
 800e062:	4689      	mov	r9, r1
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	f7f2 fac6 	bl	80005f8 <__aeabi_dmul>
 800e06c:	460b      	mov	r3, r1
 800e06e:	4604      	mov	r4, r0
 800e070:	460d      	mov	r5, r1
 800e072:	4602      	mov	r2, r0
 800e074:	4649      	mov	r1, r9
 800e076:	4640      	mov	r0, r8
 800e078:	f7f2 f908 	bl	800028c <__adddf3>
 800e07c:	4b1d      	ldr	r3, [pc, #116]	; (800e0f4 <__ieee754_pow+0x3dc>)
 800e07e:	4299      	cmp	r1, r3
 800e080:	ec45 4b19 	vmov	d9, r4, r5
 800e084:	4606      	mov	r6, r0
 800e086:	460f      	mov	r7, r1
 800e088:	468b      	mov	fp, r1
 800e08a:	f340 82fe 	ble.w	800e68a <__ieee754_pow+0x972>
 800e08e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e092:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e096:	4303      	orrs	r3, r0
 800e098:	f000 81f0 	beq.w	800e47c <__ieee754_pow+0x764>
 800e09c:	a310      	add	r3, pc, #64	; (adr r3, 800e0e0 <__ieee754_pow+0x3c8>)
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	ec51 0b18 	vmov	r0, r1, d8
 800e0a6:	f7f2 faa7 	bl	80005f8 <__aeabi_dmul>
 800e0aa:	a30d      	add	r3, pc, #52	; (adr r3, 800e0e0 <__ieee754_pow+0x3c8>)
 800e0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b0:	e6cb      	b.n	800de4a <__ieee754_pow+0x132>
 800e0b2:	bf00      	nop
 800e0b4:	f3af 8000 	nop.w
 800e0b8:	60000000 	.word	0x60000000
 800e0bc:	3ff71547 	.word	0x3ff71547
 800e0c0:	f85ddf44 	.word	0xf85ddf44
 800e0c4:	3e54ae0b 	.word	0x3e54ae0b
 800e0c8:	55555555 	.word	0x55555555
 800e0cc:	3fd55555 	.word	0x3fd55555
 800e0d0:	652b82fe 	.word	0x652b82fe
 800e0d4:	3ff71547 	.word	0x3ff71547
 800e0d8:	00000000 	.word	0x00000000
 800e0dc:	bff00000 	.word	0xbff00000
 800e0e0:	8800759c 	.word	0x8800759c
 800e0e4:	7e37e43c 	.word	0x7e37e43c
 800e0e8:	3ff00000 	.word	0x3ff00000
 800e0ec:	3fd00000 	.word	0x3fd00000
 800e0f0:	3fe00000 	.word	0x3fe00000
 800e0f4:	408fffff 	.word	0x408fffff
 800e0f8:	4bd7      	ldr	r3, [pc, #860]	; (800e458 <__ieee754_pow+0x740>)
 800e0fa:	ea03 0309 	and.w	r3, r3, r9
 800e0fe:	2200      	movs	r2, #0
 800e100:	b92b      	cbnz	r3, 800e10e <__ieee754_pow+0x3f6>
 800e102:	4bd6      	ldr	r3, [pc, #856]	; (800e45c <__ieee754_pow+0x744>)
 800e104:	f7f2 fa78 	bl	80005f8 <__aeabi_dmul>
 800e108:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e10c:	460c      	mov	r4, r1
 800e10e:	1523      	asrs	r3, r4, #20
 800e110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e114:	4413      	add	r3, r2
 800e116:	9309      	str	r3, [sp, #36]	; 0x24
 800e118:	4bd1      	ldr	r3, [pc, #836]	; (800e460 <__ieee754_pow+0x748>)
 800e11a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e11e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e122:	429c      	cmp	r4, r3
 800e124:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e128:	dd08      	ble.n	800e13c <__ieee754_pow+0x424>
 800e12a:	4bce      	ldr	r3, [pc, #824]	; (800e464 <__ieee754_pow+0x74c>)
 800e12c:	429c      	cmp	r4, r3
 800e12e:	f340 8163 	ble.w	800e3f8 <__ieee754_pow+0x6e0>
 800e132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e134:	3301      	adds	r3, #1
 800e136:	9309      	str	r3, [sp, #36]	; 0x24
 800e138:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e13c:	2400      	movs	r4, #0
 800e13e:	00e3      	lsls	r3, r4, #3
 800e140:	930b      	str	r3, [sp, #44]	; 0x2c
 800e142:	4bc9      	ldr	r3, [pc, #804]	; (800e468 <__ieee754_pow+0x750>)
 800e144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e148:	ed93 7b00 	vldr	d7, [r3]
 800e14c:	4629      	mov	r1, r5
 800e14e:	ec53 2b17 	vmov	r2, r3, d7
 800e152:	eeb0 8a47 	vmov.f32	s16, s14
 800e156:	eef0 8a67 	vmov.f32	s17, s15
 800e15a:	4682      	mov	sl, r0
 800e15c:	f7f2 f894 	bl	8000288 <__aeabi_dsub>
 800e160:	4652      	mov	r2, sl
 800e162:	4606      	mov	r6, r0
 800e164:	460f      	mov	r7, r1
 800e166:	462b      	mov	r3, r5
 800e168:	ec51 0b18 	vmov	r0, r1, d8
 800e16c:	f7f2 f88e 	bl	800028c <__adddf3>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	2000      	movs	r0, #0
 800e176:	49bd      	ldr	r1, [pc, #756]	; (800e46c <__ieee754_pow+0x754>)
 800e178:	f7f2 fb68 	bl	800084c <__aeabi_ddiv>
 800e17c:	ec41 0b19 	vmov	d9, r0, r1
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4630      	mov	r0, r6
 800e186:	4639      	mov	r1, r7
 800e188:	f7f2 fa36 	bl	80005f8 <__aeabi_dmul>
 800e18c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e194:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e198:	2300      	movs	r3, #0
 800e19a:	9304      	str	r3, [sp, #16]
 800e19c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e1a0:	46ab      	mov	fp, r5
 800e1a2:	106d      	asrs	r5, r5, #1
 800e1a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e1a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e1ac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	4649      	mov	r1, r9
 800e1b6:	4614      	mov	r4, r2
 800e1b8:	461d      	mov	r5, r3
 800e1ba:	f7f2 fa1d 	bl	80005f8 <__aeabi_dmul>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	f7f2 f85f 	bl	8000288 <__aeabi_dsub>
 800e1ca:	ec53 2b18 	vmov	r2, r3, d8
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	460f      	mov	r7, r1
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	f7f2 f857 	bl	8000288 <__aeabi_dsub>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4650      	mov	r0, sl
 800e1e0:	4659      	mov	r1, fp
 800e1e2:	f7f2 f851 	bl	8000288 <__aeabi_dsub>
 800e1e6:	4642      	mov	r2, r8
 800e1e8:	464b      	mov	r3, r9
 800e1ea:	f7f2 fa05 	bl	80005f8 <__aeabi_dmul>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	f7f2 f847 	bl	8000288 <__aeabi_dsub>
 800e1fa:	ec53 2b19 	vmov	r2, r3, d9
 800e1fe:	f7f2 f9fb 	bl	80005f8 <__aeabi_dmul>
 800e202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e206:	ec41 0b18 	vmov	d8, r0, r1
 800e20a:	4610      	mov	r0, r2
 800e20c:	4619      	mov	r1, r3
 800e20e:	f7f2 f9f3 	bl	80005f8 <__aeabi_dmul>
 800e212:	a37d      	add	r3, pc, #500	; (adr r3, 800e408 <__ieee754_pow+0x6f0>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	4604      	mov	r4, r0
 800e21a:	460d      	mov	r5, r1
 800e21c:	f7f2 f9ec 	bl	80005f8 <__aeabi_dmul>
 800e220:	a37b      	add	r3, pc, #492	; (adr r3, 800e410 <__ieee754_pow+0x6f8>)
 800e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e226:	f7f2 f831 	bl	800028c <__adddf3>
 800e22a:	4622      	mov	r2, r4
 800e22c:	462b      	mov	r3, r5
 800e22e:	f7f2 f9e3 	bl	80005f8 <__aeabi_dmul>
 800e232:	a379      	add	r3, pc, #484	; (adr r3, 800e418 <__ieee754_pow+0x700>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 f828 	bl	800028c <__adddf3>
 800e23c:	4622      	mov	r2, r4
 800e23e:	462b      	mov	r3, r5
 800e240:	f7f2 f9da 	bl	80005f8 <__aeabi_dmul>
 800e244:	a376      	add	r3, pc, #472	; (adr r3, 800e420 <__ieee754_pow+0x708>)
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	f7f2 f81f 	bl	800028c <__adddf3>
 800e24e:	4622      	mov	r2, r4
 800e250:	462b      	mov	r3, r5
 800e252:	f7f2 f9d1 	bl	80005f8 <__aeabi_dmul>
 800e256:	a374      	add	r3, pc, #464	; (adr r3, 800e428 <__ieee754_pow+0x710>)
 800e258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25c:	f7f2 f816 	bl	800028c <__adddf3>
 800e260:	4622      	mov	r2, r4
 800e262:	462b      	mov	r3, r5
 800e264:	f7f2 f9c8 	bl	80005f8 <__aeabi_dmul>
 800e268:	a371      	add	r3, pc, #452	; (adr r3, 800e430 <__ieee754_pow+0x718>)
 800e26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26e:	f7f2 f80d 	bl	800028c <__adddf3>
 800e272:	4622      	mov	r2, r4
 800e274:	4606      	mov	r6, r0
 800e276:	460f      	mov	r7, r1
 800e278:	462b      	mov	r3, r5
 800e27a:	4620      	mov	r0, r4
 800e27c:	4629      	mov	r1, r5
 800e27e:	f7f2 f9bb 	bl	80005f8 <__aeabi_dmul>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	4630      	mov	r0, r6
 800e288:	4639      	mov	r1, r7
 800e28a:	f7f2 f9b5 	bl	80005f8 <__aeabi_dmul>
 800e28e:	4642      	mov	r2, r8
 800e290:	4604      	mov	r4, r0
 800e292:	460d      	mov	r5, r1
 800e294:	464b      	mov	r3, r9
 800e296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e29a:	f7f1 fff7 	bl	800028c <__adddf3>
 800e29e:	ec53 2b18 	vmov	r2, r3, d8
 800e2a2:	f7f2 f9a9 	bl	80005f8 <__aeabi_dmul>
 800e2a6:	4622      	mov	r2, r4
 800e2a8:	462b      	mov	r3, r5
 800e2aa:	f7f1 ffef 	bl	800028c <__adddf3>
 800e2ae:	4642      	mov	r2, r8
 800e2b0:	4682      	mov	sl, r0
 800e2b2:	468b      	mov	fp, r1
 800e2b4:	464b      	mov	r3, r9
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	f7f2 f99d 	bl	80005f8 <__aeabi_dmul>
 800e2be:	4b6c      	ldr	r3, [pc, #432]	; (800e470 <__ieee754_pow+0x758>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	f7f1 ffe1 	bl	800028c <__adddf3>
 800e2ca:	4652      	mov	r2, sl
 800e2cc:	465b      	mov	r3, fp
 800e2ce:	f7f1 ffdd 	bl	800028c <__adddf3>
 800e2d2:	9c04      	ldr	r4, [sp, #16]
 800e2d4:	460d      	mov	r5, r1
 800e2d6:	4622      	mov	r2, r4
 800e2d8:	460b      	mov	r3, r1
 800e2da:	4640      	mov	r0, r8
 800e2dc:	4649      	mov	r1, r9
 800e2de:	f7f2 f98b 	bl	80005f8 <__aeabi_dmul>
 800e2e2:	4b63      	ldr	r3, [pc, #396]	; (800e470 <__ieee754_pow+0x758>)
 800e2e4:	4680      	mov	r8, r0
 800e2e6:	4689      	mov	r9, r1
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	f7f1 ffcb 	bl	8000288 <__aeabi_dsub>
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	463b      	mov	r3, r7
 800e2f6:	f7f1 ffc7 	bl	8000288 <__aeabi_dsub>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4650      	mov	r0, sl
 800e300:	4659      	mov	r1, fp
 800e302:	f7f1 ffc1 	bl	8000288 <__aeabi_dsub>
 800e306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e30a:	f7f2 f975 	bl	80005f8 <__aeabi_dmul>
 800e30e:	4622      	mov	r2, r4
 800e310:	4606      	mov	r6, r0
 800e312:	460f      	mov	r7, r1
 800e314:	462b      	mov	r3, r5
 800e316:	ec51 0b18 	vmov	r0, r1, d8
 800e31a:	f7f2 f96d 	bl	80005f8 <__aeabi_dmul>
 800e31e:	4602      	mov	r2, r0
 800e320:	460b      	mov	r3, r1
 800e322:	4630      	mov	r0, r6
 800e324:	4639      	mov	r1, r7
 800e326:	f7f1 ffb1 	bl	800028c <__adddf3>
 800e32a:	4606      	mov	r6, r0
 800e32c:	460f      	mov	r7, r1
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	4640      	mov	r0, r8
 800e334:	4649      	mov	r1, r9
 800e336:	f7f1 ffa9 	bl	800028c <__adddf3>
 800e33a:	9c04      	ldr	r4, [sp, #16]
 800e33c:	a33e      	add	r3, pc, #248	; (adr r3, 800e438 <__ieee754_pow+0x720>)
 800e33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e342:	4620      	mov	r0, r4
 800e344:	460d      	mov	r5, r1
 800e346:	f7f2 f957 	bl	80005f8 <__aeabi_dmul>
 800e34a:	4642      	mov	r2, r8
 800e34c:	ec41 0b18 	vmov	d8, r0, r1
 800e350:	464b      	mov	r3, r9
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f7f1 ff97 	bl	8000288 <__aeabi_dsub>
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	4630      	mov	r0, r6
 800e360:	4639      	mov	r1, r7
 800e362:	f7f1 ff91 	bl	8000288 <__aeabi_dsub>
 800e366:	a336      	add	r3, pc, #216	; (adr r3, 800e440 <__ieee754_pow+0x728>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f7f2 f944 	bl	80005f8 <__aeabi_dmul>
 800e370:	a335      	add	r3, pc, #212	; (adr r3, 800e448 <__ieee754_pow+0x730>)
 800e372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e376:	4606      	mov	r6, r0
 800e378:	460f      	mov	r7, r1
 800e37a:	4620      	mov	r0, r4
 800e37c:	4629      	mov	r1, r5
 800e37e:	f7f2 f93b 	bl	80005f8 <__aeabi_dmul>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4630      	mov	r0, r6
 800e388:	4639      	mov	r1, r7
 800e38a:	f7f1 ff7f 	bl	800028c <__adddf3>
 800e38e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e390:	4b38      	ldr	r3, [pc, #224]	; (800e474 <__ieee754_pow+0x75c>)
 800e392:	4413      	add	r3, r2
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ff78 	bl	800028c <__adddf3>
 800e39c:	4682      	mov	sl, r0
 800e39e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3a0:	468b      	mov	fp, r1
 800e3a2:	f7f2 f8bf 	bl	8000524 <__aeabi_i2d>
 800e3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3a8:	4b33      	ldr	r3, [pc, #204]	; (800e478 <__ieee754_pow+0x760>)
 800e3aa:	4413      	add	r3, r2
 800e3ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	460f      	mov	r7, r1
 800e3b4:	4652      	mov	r2, sl
 800e3b6:	465b      	mov	r3, fp
 800e3b8:	ec51 0b18 	vmov	r0, r1, d8
 800e3bc:	f7f1 ff66 	bl	800028c <__adddf3>
 800e3c0:	4642      	mov	r2, r8
 800e3c2:	464b      	mov	r3, r9
 800e3c4:	f7f1 ff62 	bl	800028c <__adddf3>
 800e3c8:	4632      	mov	r2, r6
 800e3ca:	463b      	mov	r3, r7
 800e3cc:	f7f1 ff5e 	bl	800028c <__adddf3>
 800e3d0:	9c04      	ldr	r4, [sp, #16]
 800e3d2:	4632      	mov	r2, r6
 800e3d4:	463b      	mov	r3, r7
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	460d      	mov	r5, r1
 800e3da:	f7f1 ff55 	bl	8000288 <__aeabi_dsub>
 800e3de:	4642      	mov	r2, r8
 800e3e0:	464b      	mov	r3, r9
 800e3e2:	f7f1 ff51 	bl	8000288 <__aeabi_dsub>
 800e3e6:	ec53 2b18 	vmov	r2, r3, d8
 800e3ea:	f7f1 ff4d 	bl	8000288 <__aeabi_dsub>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	4650      	mov	r0, sl
 800e3f4:	4659      	mov	r1, fp
 800e3f6:	e606      	b.n	800e006 <__ieee754_pow+0x2ee>
 800e3f8:	2401      	movs	r4, #1
 800e3fa:	e6a0      	b.n	800e13e <__ieee754_pow+0x426>
 800e3fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e450 <__ieee754_pow+0x738>
 800e400:	e60d      	b.n	800e01e <__ieee754_pow+0x306>
 800e402:	bf00      	nop
 800e404:	f3af 8000 	nop.w
 800e408:	4a454eef 	.word	0x4a454eef
 800e40c:	3fca7e28 	.word	0x3fca7e28
 800e410:	93c9db65 	.word	0x93c9db65
 800e414:	3fcd864a 	.word	0x3fcd864a
 800e418:	a91d4101 	.word	0xa91d4101
 800e41c:	3fd17460 	.word	0x3fd17460
 800e420:	518f264d 	.word	0x518f264d
 800e424:	3fd55555 	.word	0x3fd55555
 800e428:	db6fabff 	.word	0xdb6fabff
 800e42c:	3fdb6db6 	.word	0x3fdb6db6
 800e430:	33333303 	.word	0x33333303
 800e434:	3fe33333 	.word	0x3fe33333
 800e438:	e0000000 	.word	0xe0000000
 800e43c:	3feec709 	.word	0x3feec709
 800e440:	dc3a03fd 	.word	0xdc3a03fd
 800e444:	3feec709 	.word	0x3feec709
 800e448:	145b01f5 	.word	0x145b01f5
 800e44c:	be3e2fe0 	.word	0xbe3e2fe0
 800e450:	00000000 	.word	0x00000000
 800e454:	3ff00000 	.word	0x3ff00000
 800e458:	7ff00000 	.word	0x7ff00000
 800e45c:	43400000 	.word	0x43400000
 800e460:	0003988e 	.word	0x0003988e
 800e464:	000bb679 	.word	0x000bb679
 800e468:	08028f30 	.word	0x08028f30
 800e46c:	3ff00000 	.word	0x3ff00000
 800e470:	40080000 	.word	0x40080000
 800e474:	08028f50 	.word	0x08028f50
 800e478:	08028f40 	.word	0x08028f40
 800e47c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e754 <__ieee754_pow+0xa3c>)
 800e47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e482:	4640      	mov	r0, r8
 800e484:	4649      	mov	r1, r9
 800e486:	f7f1 ff01 	bl	800028c <__adddf3>
 800e48a:	4622      	mov	r2, r4
 800e48c:	ec41 0b1a 	vmov	d10, r0, r1
 800e490:	462b      	mov	r3, r5
 800e492:	4630      	mov	r0, r6
 800e494:	4639      	mov	r1, r7
 800e496:	f7f1 fef7 	bl	8000288 <__aeabi_dsub>
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	ec51 0b1a 	vmov	r0, r1, d10
 800e4a2:	f7f2 fb39 	bl	8000b18 <__aeabi_dcmpgt>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f47f adf8 	bne.w	800e09c <__ieee754_pow+0x384>
 800e4ac:	4aa4      	ldr	r2, [pc, #656]	; (800e740 <__ieee754_pow+0xa28>)
 800e4ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	f340 810b 	ble.w	800e6ce <__ieee754_pow+0x9b6>
 800e4b8:	151b      	asrs	r3, r3, #20
 800e4ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e4be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e4c2:	fa4a f303 	asr.w	r3, sl, r3
 800e4c6:	445b      	add	r3, fp
 800e4c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e4cc:	4e9d      	ldr	r6, [pc, #628]	; (800e744 <__ieee754_pow+0xa2c>)
 800e4ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e4d2:	4116      	asrs	r6, r2
 800e4d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e4d8:	2000      	movs	r0, #0
 800e4da:	ea23 0106 	bic.w	r1, r3, r6
 800e4de:	f1c2 0214 	rsb	r2, r2, #20
 800e4e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e4e6:	fa4a fa02 	asr.w	sl, sl, r2
 800e4ea:	f1bb 0f00 	cmp.w	fp, #0
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	bfb8      	it	lt
 800e4f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e4fc:	f7f1 fec4 	bl	8000288 <__aeabi_dsub>
 800e500:	ec41 0b19 	vmov	d9, r0, r1
 800e504:	4642      	mov	r2, r8
 800e506:	464b      	mov	r3, r9
 800e508:	ec51 0b19 	vmov	r0, r1, d9
 800e50c:	f7f1 febe 	bl	800028c <__adddf3>
 800e510:	2400      	movs	r4, #0
 800e512:	a379      	add	r3, pc, #484	; (adr r3, 800e6f8 <__ieee754_pow+0x9e0>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	4620      	mov	r0, r4
 800e51a:	460d      	mov	r5, r1
 800e51c:	f7f2 f86c 	bl	80005f8 <__aeabi_dmul>
 800e520:	ec53 2b19 	vmov	r2, r3, d9
 800e524:	4606      	mov	r6, r0
 800e526:	460f      	mov	r7, r1
 800e528:	4620      	mov	r0, r4
 800e52a:	4629      	mov	r1, r5
 800e52c:	f7f1 feac 	bl	8000288 <__aeabi_dsub>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	4640      	mov	r0, r8
 800e536:	4649      	mov	r1, r9
 800e538:	f7f1 fea6 	bl	8000288 <__aeabi_dsub>
 800e53c:	a370      	add	r3, pc, #448	; (adr r3, 800e700 <__ieee754_pow+0x9e8>)
 800e53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e542:	f7f2 f859 	bl	80005f8 <__aeabi_dmul>
 800e546:	a370      	add	r3, pc, #448	; (adr r3, 800e708 <__ieee754_pow+0x9f0>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	4680      	mov	r8, r0
 800e54e:	4689      	mov	r9, r1
 800e550:	4620      	mov	r0, r4
 800e552:	4629      	mov	r1, r5
 800e554:	f7f2 f850 	bl	80005f8 <__aeabi_dmul>
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4640      	mov	r0, r8
 800e55e:	4649      	mov	r1, r9
 800e560:	f7f1 fe94 	bl	800028c <__adddf3>
 800e564:	4604      	mov	r4, r0
 800e566:	460d      	mov	r5, r1
 800e568:	4602      	mov	r2, r0
 800e56a:	460b      	mov	r3, r1
 800e56c:	4630      	mov	r0, r6
 800e56e:	4639      	mov	r1, r7
 800e570:	f7f1 fe8c 	bl	800028c <__adddf3>
 800e574:	4632      	mov	r2, r6
 800e576:	463b      	mov	r3, r7
 800e578:	4680      	mov	r8, r0
 800e57a:	4689      	mov	r9, r1
 800e57c:	f7f1 fe84 	bl	8000288 <__aeabi_dsub>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	4620      	mov	r0, r4
 800e586:	4629      	mov	r1, r5
 800e588:	f7f1 fe7e 	bl	8000288 <__aeabi_dsub>
 800e58c:	4642      	mov	r2, r8
 800e58e:	4606      	mov	r6, r0
 800e590:	460f      	mov	r7, r1
 800e592:	464b      	mov	r3, r9
 800e594:	4640      	mov	r0, r8
 800e596:	4649      	mov	r1, r9
 800e598:	f7f2 f82e 	bl	80005f8 <__aeabi_dmul>
 800e59c:	a35c      	add	r3, pc, #368	; (adr r3, 800e710 <__ieee754_pow+0x9f8>)
 800e59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	460d      	mov	r5, r1
 800e5a6:	f7f2 f827 	bl	80005f8 <__aeabi_dmul>
 800e5aa:	a35b      	add	r3, pc, #364	; (adr r3, 800e718 <__ieee754_pow+0xa00>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f7f1 fe6a 	bl	8000288 <__aeabi_dsub>
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f7f2 f81e 	bl	80005f8 <__aeabi_dmul>
 800e5bc:	a358      	add	r3, pc, #352	; (adr r3, 800e720 <__ieee754_pow+0xa08>)
 800e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c2:	f7f1 fe63 	bl	800028c <__adddf3>
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	462b      	mov	r3, r5
 800e5ca:	f7f2 f815 	bl	80005f8 <__aeabi_dmul>
 800e5ce:	a356      	add	r3, pc, #344	; (adr r3, 800e728 <__ieee754_pow+0xa10>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7f1 fe58 	bl	8000288 <__aeabi_dsub>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	462b      	mov	r3, r5
 800e5dc:	f7f2 f80c 	bl	80005f8 <__aeabi_dmul>
 800e5e0:	a353      	add	r3, pc, #332	; (adr r3, 800e730 <__ieee754_pow+0xa18>)
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	f7f1 fe51 	bl	800028c <__adddf3>
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	f7f2 f803 	bl	80005f8 <__aeabi_dmul>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	f7f1 fe45 	bl	8000288 <__aeabi_dsub>
 800e5fe:	4604      	mov	r4, r0
 800e600:	460d      	mov	r5, r1
 800e602:	4602      	mov	r2, r0
 800e604:	460b      	mov	r3, r1
 800e606:	4640      	mov	r0, r8
 800e608:	4649      	mov	r1, r9
 800e60a:	f7f1 fff5 	bl	80005f8 <__aeabi_dmul>
 800e60e:	2200      	movs	r2, #0
 800e610:	ec41 0b19 	vmov	d9, r0, r1
 800e614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e618:	4620      	mov	r0, r4
 800e61a:	4629      	mov	r1, r5
 800e61c:	f7f1 fe34 	bl	8000288 <__aeabi_dsub>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	ec51 0b19 	vmov	r0, r1, d9
 800e628:	f7f2 f910 	bl	800084c <__aeabi_ddiv>
 800e62c:	4632      	mov	r2, r6
 800e62e:	4604      	mov	r4, r0
 800e630:	460d      	mov	r5, r1
 800e632:	463b      	mov	r3, r7
 800e634:	4640      	mov	r0, r8
 800e636:	4649      	mov	r1, r9
 800e638:	f7f1 ffde 	bl	80005f8 <__aeabi_dmul>
 800e63c:	4632      	mov	r2, r6
 800e63e:	463b      	mov	r3, r7
 800e640:	f7f1 fe24 	bl	800028c <__adddf3>
 800e644:	4602      	mov	r2, r0
 800e646:	460b      	mov	r3, r1
 800e648:	4620      	mov	r0, r4
 800e64a:	4629      	mov	r1, r5
 800e64c:	f7f1 fe1c 	bl	8000288 <__aeabi_dsub>
 800e650:	4642      	mov	r2, r8
 800e652:	464b      	mov	r3, r9
 800e654:	f7f1 fe18 	bl	8000288 <__aeabi_dsub>
 800e658:	460b      	mov	r3, r1
 800e65a:	4602      	mov	r2, r0
 800e65c:	493a      	ldr	r1, [pc, #232]	; (800e748 <__ieee754_pow+0xa30>)
 800e65e:	2000      	movs	r0, #0
 800e660:	f7f1 fe12 	bl	8000288 <__aeabi_dsub>
 800e664:	e9cd 0100 	strd	r0, r1, [sp]
 800e668:	9b01      	ldr	r3, [sp, #4]
 800e66a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e672:	da2f      	bge.n	800e6d4 <__ieee754_pow+0x9bc>
 800e674:	4650      	mov	r0, sl
 800e676:	ed9d 0b00 	vldr	d0, [sp]
 800e67a:	f001 fa15 	bl	800faa8 <scalbn>
 800e67e:	ec51 0b10 	vmov	r0, r1, d0
 800e682:	ec53 2b18 	vmov	r2, r3, d8
 800e686:	f7ff bbe0 	b.w	800de4a <__ieee754_pow+0x132>
 800e68a:	4b30      	ldr	r3, [pc, #192]	; (800e74c <__ieee754_pow+0xa34>)
 800e68c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e690:	429e      	cmp	r6, r3
 800e692:	f77f af0b 	ble.w	800e4ac <__ieee754_pow+0x794>
 800e696:	4b2e      	ldr	r3, [pc, #184]	; (800e750 <__ieee754_pow+0xa38>)
 800e698:	440b      	add	r3, r1
 800e69a:	4303      	orrs	r3, r0
 800e69c:	d00b      	beq.n	800e6b6 <__ieee754_pow+0x99e>
 800e69e:	a326      	add	r3, pc, #152	; (adr r3, 800e738 <__ieee754_pow+0xa20>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	ec51 0b18 	vmov	r0, r1, d8
 800e6a8:	f7f1 ffa6 	bl	80005f8 <__aeabi_dmul>
 800e6ac:	a322      	add	r3, pc, #136	; (adr r3, 800e738 <__ieee754_pow+0xa20>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	f7ff bbca 	b.w	800de4a <__ieee754_pow+0x132>
 800e6b6:	4622      	mov	r2, r4
 800e6b8:	462b      	mov	r3, r5
 800e6ba:	f7f1 fde5 	bl	8000288 <__aeabi_dsub>
 800e6be:	4642      	mov	r2, r8
 800e6c0:	464b      	mov	r3, r9
 800e6c2:	f7f2 fa1f 	bl	8000b04 <__aeabi_dcmpge>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	f43f aef0 	beq.w	800e4ac <__ieee754_pow+0x794>
 800e6cc:	e7e7      	b.n	800e69e <__ieee754_pow+0x986>
 800e6ce:	f04f 0a00 	mov.w	sl, #0
 800e6d2:	e717      	b.n	800e504 <__ieee754_pow+0x7ec>
 800e6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	e7d2      	b.n	800e682 <__ieee754_pow+0x96a>
 800e6dc:	491a      	ldr	r1, [pc, #104]	; (800e748 <__ieee754_pow+0xa30>)
 800e6de:	2000      	movs	r0, #0
 800e6e0:	f7ff bb9e 	b.w	800de20 <__ieee754_pow+0x108>
 800e6e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6e8:	f7ff bb9a 	b.w	800de20 <__ieee754_pow+0x108>
 800e6ec:	9000      	str	r0, [sp, #0]
 800e6ee:	f7ff bb76 	b.w	800ddde <__ieee754_pow+0xc6>
 800e6f2:	2100      	movs	r1, #0
 800e6f4:	f7ff bb60 	b.w	800ddb8 <__ieee754_pow+0xa0>
 800e6f8:	00000000 	.word	0x00000000
 800e6fc:	3fe62e43 	.word	0x3fe62e43
 800e700:	fefa39ef 	.word	0xfefa39ef
 800e704:	3fe62e42 	.word	0x3fe62e42
 800e708:	0ca86c39 	.word	0x0ca86c39
 800e70c:	be205c61 	.word	0xbe205c61
 800e710:	72bea4d0 	.word	0x72bea4d0
 800e714:	3e663769 	.word	0x3e663769
 800e718:	c5d26bf1 	.word	0xc5d26bf1
 800e71c:	3ebbbd41 	.word	0x3ebbbd41
 800e720:	af25de2c 	.word	0xaf25de2c
 800e724:	3f11566a 	.word	0x3f11566a
 800e728:	16bebd93 	.word	0x16bebd93
 800e72c:	3f66c16c 	.word	0x3f66c16c
 800e730:	5555553e 	.word	0x5555553e
 800e734:	3fc55555 	.word	0x3fc55555
 800e738:	c2f8f359 	.word	0xc2f8f359
 800e73c:	01a56e1f 	.word	0x01a56e1f
 800e740:	3fe00000 	.word	0x3fe00000
 800e744:	000fffff 	.word	0x000fffff
 800e748:	3ff00000 	.word	0x3ff00000
 800e74c:	4090cbff 	.word	0x4090cbff
 800e750:	3f6f3400 	.word	0x3f6f3400
 800e754:	652b82fe 	.word	0x652b82fe
 800e758:	3c971547 	.word	0x3c971547
 800e75c:	00000000 	.word	0x00000000

0800e760 <__ieee754_rem_pio2>:
 800e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	ed2d 8b02 	vpush	{d8}
 800e768:	ec55 4b10 	vmov	r4, r5, d0
 800e76c:	4bca      	ldr	r3, [pc, #808]	; (800ea98 <__ieee754_rem_pio2+0x338>)
 800e76e:	b08b      	sub	sp, #44	; 0x2c
 800e770:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e774:	4598      	cmp	r8, r3
 800e776:	4682      	mov	sl, r0
 800e778:	9502      	str	r5, [sp, #8]
 800e77a:	dc08      	bgt.n	800e78e <__ieee754_rem_pio2+0x2e>
 800e77c:	2200      	movs	r2, #0
 800e77e:	2300      	movs	r3, #0
 800e780:	ed80 0b00 	vstr	d0, [r0]
 800e784:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e788:	f04f 0b00 	mov.w	fp, #0
 800e78c:	e028      	b.n	800e7e0 <__ieee754_rem_pio2+0x80>
 800e78e:	4bc3      	ldr	r3, [pc, #780]	; (800ea9c <__ieee754_rem_pio2+0x33c>)
 800e790:	4598      	cmp	r8, r3
 800e792:	dc78      	bgt.n	800e886 <__ieee754_rem_pio2+0x126>
 800e794:	9b02      	ldr	r3, [sp, #8]
 800e796:	4ec2      	ldr	r6, [pc, #776]	; (800eaa0 <__ieee754_rem_pio2+0x340>)
 800e798:	2b00      	cmp	r3, #0
 800e79a:	ee10 0a10 	vmov	r0, s0
 800e79e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ea60 <__ieee754_rem_pio2+0x300>)
 800e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	dd39      	ble.n	800e81c <__ieee754_rem_pio2+0xbc>
 800e7a8:	f7f1 fd6e 	bl	8000288 <__aeabi_dsub>
 800e7ac:	45b0      	cmp	r8, r6
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	460d      	mov	r5, r1
 800e7b2:	d01b      	beq.n	800e7ec <__ieee754_rem_pio2+0x8c>
 800e7b4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ea68 <__ieee754_rem_pio2+0x308>)
 800e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ba:	f7f1 fd65 	bl	8000288 <__aeabi_dsub>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9ca 2300 	strd	r2, r3, [sl]
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	f7f1 fd5d 	bl	8000288 <__aeabi_dsub>
 800e7ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800ea68 <__ieee754_rem_pio2+0x308>)
 800e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d4:	f7f1 fd58 	bl	8000288 <__aeabi_dsub>
 800e7d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7dc:	f04f 0b01 	mov.w	fp, #1
 800e7e0:	4658      	mov	r0, fp
 800e7e2:	b00b      	add	sp, #44	; 0x2c
 800e7e4:	ecbd 8b02 	vpop	{d8}
 800e7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ec:	a3a0      	add	r3, pc, #640	; (adr r3, 800ea70 <__ieee754_rem_pio2+0x310>)
 800e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f2:	f7f1 fd49 	bl	8000288 <__aeabi_dsub>
 800e7f6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ea78 <__ieee754_rem_pio2+0x318>)
 800e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	460d      	mov	r5, r1
 800e800:	f7f1 fd42 	bl	8000288 <__aeabi_dsub>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	e9ca 2300 	strd	r2, r3, [sl]
 800e80c:	4620      	mov	r0, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	f7f1 fd3a 	bl	8000288 <__aeabi_dsub>
 800e814:	a398      	add	r3, pc, #608	; (adr r3, 800ea78 <__ieee754_rem_pio2+0x318>)
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	e7db      	b.n	800e7d4 <__ieee754_rem_pio2+0x74>
 800e81c:	f7f1 fd36 	bl	800028c <__adddf3>
 800e820:	45b0      	cmp	r8, r6
 800e822:	4604      	mov	r4, r0
 800e824:	460d      	mov	r5, r1
 800e826:	d016      	beq.n	800e856 <__ieee754_rem_pio2+0xf6>
 800e828:	a38f      	add	r3, pc, #572	; (adr r3, 800ea68 <__ieee754_rem_pio2+0x308>)
 800e82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82e:	f7f1 fd2d 	bl	800028c <__adddf3>
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
 800e836:	e9ca 2300 	strd	r2, r3, [sl]
 800e83a:	4620      	mov	r0, r4
 800e83c:	4629      	mov	r1, r5
 800e83e:	f7f1 fd23 	bl	8000288 <__aeabi_dsub>
 800e842:	a389      	add	r3, pc, #548	; (adr r3, 800ea68 <__ieee754_rem_pio2+0x308>)
 800e844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e848:	f7f1 fd20 	bl	800028c <__adddf3>
 800e84c:	f04f 3bff 	mov.w	fp, #4294967295
 800e850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e854:	e7c4      	b.n	800e7e0 <__ieee754_rem_pio2+0x80>
 800e856:	a386      	add	r3, pc, #536	; (adr r3, 800ea70 <__ieee754_rem_pio2+0x310>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f7f1 fd16 	bl	800028c <__adddf3>
 800e860:	a385      	add	r3, pc, #532	; (adr r3, 800ea78 <__ieee754_rem_pio2+0x318>)
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	4604      	mov	r4, r0
 800e868:	460d      	mov	r5, r1
 800e86a:	f7f1 fd0f 	bl	800028c <__adddf3>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	e9ca 2300 	strd	r2, r3, [sl]
 800e876:	4620      	mov	r0, r4
 800e878:	4629      	mov	r1, r5
 800e87a:	f7f1 fd05 	bl	8000288 <__aeabi_dsub>
 800e87e:	a37e      	add	r3, pc, #504	; (adr r3, 800ea78 <__ieee754_rem_pio2+0x318>)
 800e880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e884:	e7e0      	b.n	800e848 <__ieee754_rem_pio2+0xe8>
 800e886:	4b87      	ldr	r3, [pc, #540]	; (800eaa4 <__ieee754_rem_pio2+0x344>)
 800e888:	4598      	cmp	r8, r3
 800e88a:	f300 80d9 	bgt.w	800ea40 <__ieee754_rem_pio2+0x2e0>
 800e88e:	f000 ffe1 	bl	800f854 <fabs>
 800e892:	ec55 4b10 	vmov	r4, r5, d0
 800e896:	ee10 0a10 	vmov	r0, s0
 800e89a:	a379      	add	r3, pc, #484	; (adr r3, 800ea80 <__ieee754_rem_pio2+0x320>)
 800e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	f7f1 fea9 	bl	80005f8 <__aeabi_dmul>
 800e8a6:	4b80      	ldr	r3, [pc, #512]	; (800eaa8 <__ieee754_rem_pio2+0x348>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f7f1 fcef 	bl	800028c <__adddf3>
 800e8ae:	f7f2 f953 	bl	8000b58 <__aeabi_d2iz>
 800e8b2:	4683      	mov	fp, r0
 800e8b4:	f7f1 fe36 	bl	8000524 <__aeabi_i2d>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	ec43 2b18 	vmov	d8, r2, r3
 800e8c0:	a367      	add	r3, pc, #412	; (adr r3, 800ea60 <__ieee754_rem_pio2+0x300>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	f7f1 fe97 	bl	80005f8 <__aeabi_dmul>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7f1 fcd9 	bl	8000288 <__aeabi_dsub>
 800e8d6:	a364      	add	r3, pc, #400	; (adr r3, 800ea68 <__ieee754_rem_pio2+0x308>)
 800e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8dc:	4606      	mov	r6, r0
 800e8de:	460f      	mov	r7, r1
 800e8e0:	ec51 0b18 	vmov	r0, r1, d8
 800e8e4:	f7f1 fe88 	bl	80005f8 <__aeabi_dmul>
 800e8e8:	f1bb 0f1f 	cmp.w	fp, #31
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	dc0d      	bgt.n	800e90e <__ieee754_rem_pio2+0x1ae>
 800e8f2:	4b6e      	ldr	r3, [pc, #440]	; (800eaac <__ieee754_rem_pio2+0x34c>)
 800e8f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8fc:	4543      	cmp	r3, r8
 800e8fe:	d006      	beq.n	800e90e <__ieee754_rem_pio2+0x1ae>
 800e900:	4622      	mov	r2, r4
 800e902:	462b      	mov	r3, r5
 800e904:	4630      	mov	r0, r6
 800e906:	4639      	mov	r1, r7
 800e908:	f7f1 fcbe 	bl	8000288 <__aeabi_dsub>
 800e90c:	e00f      	b.n	800e92e <__ieee754_rem_pio2+0x1ce>
 800e90e:	462b      	mov	r3, r5
 800e910:	4622      	mov	r2, r4
 800e912:	4630      	mov	r0, r6
 800e914:	4639      	mov	r1, r7
 800e916:	f7f1 fcb7 	bl	8000288 <__aeabi_dsub>
 800e91a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e91e:	9303      	str	r3, [sp, #12]
 800e920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e924:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e928:	f1b8 0f10 	cmp.w	r8, #16
 800e92c:	dc02      	bgt.n	800e934 <__ieee754_rem_pio2+0x1d4>
 800e92e:	e9ca 0100 	strd	r0, r1, [sl]
 800e932:	e039      	b.n	800e9a8 <__ieee754_rem_pio2+0x248>
 800e934:	a34e      	add	r3, pc, #312	; (adr r3, 800ea70 <__ieee754_rem_pio2+0x310>)
 800e936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93a:	ec51 0b18 	vmov	r0, r1, d8
 800e93e:	f7f1 fe5b 	bl	80005f8 <__aeabi_dmul>
 800e942:	4604      	mov	r4, r0
 800e944:	460d      	mov	r5, r1
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4630      	mov	r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	f7f1 fc9b 	bl	8000288 <__aeabi_dsub>
 800e952:	4602      	mov	r2, r0
 800e954:	460b      	mov	r3, r1
 800e956:	4680      	mov	r8, r0
 800e958:	4689      	mov	r9, r1
 800e95a:	4630      	mov	r0, r6
 800e95c:	4639      	mov	r1, r7
 800e95e:	f7f1 fc93 	bl	8000288 <__aeabi_dsub>
 800e962:	4622      	mov	r2, r4
 800e964:	462b      	mov	r3, r5
 800e966:	f7f1 fc8f 	bl	8000288 <__aeabi_dsub>
 800e96a:	a343      	add	r3, pc, #268	; (adr r3, 800ea78 <__ieee754_rem_pio2+0x318>)
 800e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e970:	4604      	mov	r4, r0
 800e972:	460d      	mov	r5, r1
 800e974:	ec51 0b18 	vmov	r0, r1, d8
 800e978:	f7f1 fe3e 	bl	80005f8 <__aeabi_dmul>
 800e97c:	4622      	mov	r2, r4
 800e97e:	462b      	mov	r3, r5
 800e980:	f7f1 fc82 	bl	8000288 <__aeabi_dsub>
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	4604      	mov	r4, r0
 800e98a:	460d      	mov	r5, r1
 800e98c:	4640      	mov	r0, r8
 800e98e:	4649      	mov	r1, r9
 800e990:	f7f1 fc7a 	bl	8000288 <__aeabi_dsub>
 800e994:	9a03      	ldr	r2, [sp, #12]
 800e996:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	2b31      	cmp	r3, #49	; 0x31
 800e99e:	dc24      	bgt.n	800e9ea <__ieee754_rem_pio2+0x28a>
 800e9a0:	e9ca 0100 	strd	r0, r1, [sl]
 800e9a4:	4646      	mov	r6, r8
 800e9a6:	464f      	mov	r7, r9
 800e9a8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	4642      	mov	r2, r8
 800e9b0:	464b      	mov	r3, r9
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	f7f1 fc68 	bl	8000288 <__aeabi_dsub>
 800e9b8:	462b      	mov	r3, r5
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	f7f1 fc64 	bl	8000288 <__aeabi_dsub>
 800e9c0:	9b02      	ldr	r3, [sp, #8]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9c8:	f6bf af0a 	bge.w	800e7e0 <__ieee754_rem_pio2+0x80>
 800e9cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e9d0:	f8ca 3004 	str.w	r3, [sl, #4]
 800e9d4:	f8ca 8000 	str.w	r8, [sl]
 800e9d8:	f8ca 0008 	str.w	r0, [sl, #8]
 800e9dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9e0:	f8ca 300c 	str.w	r3, [sl, #12]
 800e9e4:	f1cb 0b00 	rsb	fp, fp, #0
 800e9e8:	e6fa      	b.n	800e7e0 <__ieee754_rem_pio2+0x80>
 800e9ea:	a327      	add	r3, pc, #156	; (adr r3, 800ea88 <__ieee754_rem_pio2+0x328>)
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	ec51 0b18 	vmov	r0, r1, d8
 800e9f4:	f7f1 fe00 	bl	80005f8 <__aeabi_dmul>
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4640      	mov	r0, r8
 800ea02:	4649      	mov	r1, r9
 800ea04:	f7f1 fc40 	bl	8000288 <__aeabi_dsub>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	460f      	mov	r7, r1
 800ea10:	4640      	mov	r0, r8
 800ea12:	4649      	mov	r1, r9
 800ea14:	f7f1 fc38 	bl	8000288 <__aeabi_dsub>
 800ea18:	4622      	mov	r2, r4
 800ea1a:	462b      	mov	r3, r5
 800ea1c:	f7f1 fc34 	bl	8000288 <__aeabi_dsub>
 800ea20:	a31b      	add	r3, pc, #108	; (adr r3, 800ea90 <__ieee754_rem_pio2+0x330>)
 800ea22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea26:	4604      	mov	r4, r0
 800ea28:	460d      	mov	r5, r1
 800ea2a:	ec51 0b18 	vmov	r0, r1, d8
 800ea2e:	f7f1 fde3 	bl	80005f8 <__aeabi_dmul>
 800ea32:	4622      	mov	r2, r4
 800ea34:	462b      	mov	r3, r5
 800ea36:	f7f1 fc27 	bl	8000288 <__aeabi_dsub>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	460d      	mov	r5, r1
 800ea3e:	e75f      	b.n	800e900 <__ieee754_rem_pio2+0x1a0>
 800ea40:	4b1b      	ldr	r3, [pc, #108]	; (800eab0 <__ieee754_rem_pio2+0x350>)
 800ea42:	4598      	cmp	r8, r3
 800ea44:	dd36      	ble.n	800eab4 <__ieee754_rem_pio2+0x354>
 800ea46:	ee10 2a10 	vmov	r2, s0
 800ea4a:	462b      	mov	r3, r5
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	4629      	mov	r1, r5
 800ea50:	f7f1 fc1a 	bl	8000288 <__aeabi_dsub>
 800ea54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea58:	e9ca 0100 	strd	r0, r1, [sl]
 800ea5c:	e694      	b.n	800e788 <__ieee754_rem_pio2+0x28>
 800ea5e:	bf00      	nop
 800ea60:	54400000 	.word	0x54400000
 800ea64:	3ff921fb 	.word	0x3ff921fb
 800ea68:	1a626331 	.word	0x1a626331
 800ea6c:	3dd0b461 	.word	0x3dd0b461
 800ea70:	1a600000 	.word	0x1a600000
 800ea74:	3dd0b461 	.word	0x3dd0b461
 800ea78:	2e037073 	.word	0x2e037073
 800ea7c:	3ba3198a 	.word	0x3ba3198a
 800ea80:	6dc9c883 	.word	0x6dc9c883
 800ea84:	3fe45f30 	.word	0x3fe45f30
 800ea88:	2e000000 	.word	0x2e000000
 800ea8c:	3ba3198a 	.word	0x3ba3198a
 800ea90:	252049c1 	.word	0x252049c1
 800ea94:	397b839a 	.word	0x397b839a
 800ea98:	3fe921fb 	.word	0x3fe921fb
 800ea9c:	4002d97b 	.word	0x4002d97b
 800eaa0:	3ff921fb 	.word	0x3ff921fb
 800eaa4:	413921fb 	.word	0x413921fb
 800eaa8:	3fe00000 	.word	0x3fe00000
 800eaac:	08028f60 	.word	0x08028f60
 800eab0:	7fefffff 	.word	0x7fefffff
 800eab4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800eab8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800eabc:	ee10 0a10 	vmov	r0, s0
 800eac0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800eac4:	ee10 6a10 	vmov	r6, s0
 800eac8:	460f      	mov	r7, r1
 800eaca:	f7f2 f845 	bl	8000b58 <__aeabi_d2iz>
 800eace:	f7f1 fd29 	bl	8000524 <__aeabi_i2d>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4630      	mov	r0, r6
 800ead8:	4639      	mov	r1, r7
 800eada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eade:	f7f1 fbd3 	bl	8000288 <__aeabi_dsub>
 800eae2:	4b22      	ldr	r3, [pc, #136]	; (800eb6c <__ieee754_rem_pio2+0x40c>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	f7f1 fd87 	bl	80005f8 <__aeabi_dmul>
 800eaea:	460f      	mov	r7, r1
 800eaec:	4606      	mov	r6, r0
 800eaee:	f7f2 f833 	bl	8000b58 <__aeabi_d2iz>
 800eaf2:	f7f1 fd17 	bl	8000524 <__aeabi_i2d>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	4630      	mov	r0, r6
 800eafc:	4639      	mov	r1, r7
 800eafe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb02:	f7f1 fbc1 	bl	8000288 <__aeabi_dsub>
 800eb06:	4b19      	ldr	r3, [pc, #100]	; (800eb6c <__ieee754_rem_pio2+0x40c>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f7f1 fd75 	bl	80005f8 <__aeabi_dmul>
 800eb0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb12:	ad04      	add	r5, sp, #16
 800eb14:	f04f 0803 	mov.w	r8, #3
 800eb18:	46a9      	mov	r9, r5
 800eb1a:	2600      	movs	r6, #0
 800eb1c:	2700      	movs	r7, #0
 800eb1e:	4632      	mov	r2, r6
 800eb20:	463b      	mov	r3, r7
 800eb22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800eb26:	46c3      	mov	fp, r8
 800eb28:	3d08      	subs	r5, #8
 800eb2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb2e:	f7f1 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d1f3      	bne.n	800eb1e <__ieee754_rem_pio2+0x3be>
 800eb36:	4b0e      	ldr	r3, [pc, #56]	; (800eb70 <__ieee754_rem_pio2+0x410>)
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	4622      	mov	r2, r4
 800eb40:	465b      	mov	r3, fp
 800eb42:	4651      	mov	r1, sl
 800eb44:	4648      	mov	r0, r9
 800eb46:	f000 fa87 	bl	800f058 <__kernel_rem_pio2>
 800eb4a:	9b02      	ldr	r3, [sp, #8]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	4683      	mov	fp, r0
 800eb50:	f6bf ae46 	bge.w	800e7e0 <__ieee754_rem_pio2+0x80>
 800eb54:	f8da 3004 	ldr.w	r3, [sl, #4]
 800eb58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb5c:	f8ca 3004 	str.w	r3, [sl, #4]
 800eb60:	f8da 300c 	ldr.w	r3, [sl, #12]
 800eb64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb68:	e73a      	b.n	800e9e0 <__ieee754_rem_pio2+0x280>
 800eb6a:	bf00      	nop
 800eb6c:	41700000 	.word	0x41700000
 800eb70:	08028fe0 	.word	0x08028fe0

0800eb74 <__ieee754_sqrt>:
 800eb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb78:	ec55 4b10 	vmov	r4, r5, d0
 800eb7c:	4e56      	ldr	r6, [pc, #344]	; (800ecd8 <__ieee754_sqrt+0x164>)
 800eb7e:	43ae      	bics	r6, r5
 800eb80:	ee10 0a10 	vmov	r0, s0
 800eb84:	ee10 3a10 	vmov	r3, s0
 800eb88:	4629      	mov	r1, r5
 800eb8a:	462a      	mov	r2, r5
 800eb8c:	d110      	bne.n	800ebb0 <__ieee754_sqrt+0x3c>
 800eb8e:	ee10 2a10 	vmov	r2, s0
 800eb92:	462b      	mov	r3, r5
 800eb94:	f7f1 fd30 	bl	80005f8 <__aeabi_dmul>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	4629      	mov	r1, r5
 800eba0:	f7f1 fb74 	bl	800028c <__adddf3>
 800eba4:	4604      	mov	r4, r0
 800eba6:	460d      	mov	r5, r1
 800eba8:	ec45 4b10 	vmov	d0, r4, r5
 800ebac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb0:	2d00      	cmp	r5, #0
 800ebb2:	dc10      	bgt.n	800ebd6 <__ieee754_sqrt+0x62>
 800ebb4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ebb8:	4330      	orrs	r0, r6
 800ebba:	d0f5      	beq.n	800eba8 <__ieee754_sqrt+0x34>
 800ebbc:	b15d      	cbz	r5, 800ebd6 <__ieee754_sqrt+0x62>
 800ebbe:	ee10 2a10 	vmov	r2, s0
 800ebc2:	462b      	mov	r3, r5
 800ebc4:	ee10 0a10 	vmov	r0, s0
 800ebc8:	f7f1 fb5e 	bl	8000288 <__aeabi_dsub>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	f7f1 fe3c 	bl	800084c <__aeabi_ddiv>
 800ebd4:	e7e6      	b.n	800eba4 <__ieee754_sqrt+0x30>
 800ebd6:	1509      	asrs	r1, r1, #20
 800ebd8:	d076      	beq.n	800ecc8 <__ieee754_sqrt+0x154>
 800ebda:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ebde:	07ce      	lsls	r6, r1, #31
 800ebe0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ebe4:	bf5e      	ittt	pl
 800ebe6:	0fda      	lsrpl	r2, r3, #31
 800ebe8:	005b      	lslpl	r3, r3, #1
 800ebea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ebee:	0fda      	lsrs	r2, r3, #31
 800ebf0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ebf4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	106d      	asrs	r5, r5, #1
 800ebfc:	005b      	lsls	r3, r3, #1
 800ebfe:	f04f 0e16 	mov.w	lr, #22
 800ec02:	4684      	mov	ip, r0
 800ec04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec08:	eb0c 0401 	add.w	r4, ip, r1
 800ec0c:	4294      	cmp	r4, r2
 800ec0e:	bfde      	ittt	le
 800ec10:	1b12      	suble	r2, r2, r4
 800ec12:	eb04 0c01 	addle.w	ip, r4, r1
 800ec16:	1840      	addle	r0, r0, r1
 800ec18:	0052      	lsls	r2, r2, #1
 800ec1a:	f1be 0e01 	subs.w	lr, lr, #1
 800ec1e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ec22:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ec26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec2a:	d1ed      	bne.n	800ec08 <__ieee754_sqrt+0x94>
 800ec2c:	4671      	mov	r1, lr
 800ec2e:	2720      	movs	r7, #32
 800ec30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ec34:	4562      	cmp	r2, ip
 800ec36:	eb04 060e 	add.w	r6, r4, lr
 800ec3a:	dc02      	bgt.n	800ec42 <__ieee754_sqrt+0xce>
 800ec3c:	d113      	bne.n	800ec66 <__ieee754_sqrt+0xf2>
 800ec3e:	429e      	cmp	r6, r3
 800ec40:	d811      	bhi.n	800ec66 <__ieee754_sqrt+0xf2>
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	eb06 0e04 	add.w	lr, r6, r4
 800ec48:	da43      	bge.n	800ecd2 <__ieee754_sqrt+0x15e>
 800ec4a:	f1be 0f00 	cmp.w	lr, #0
 800ec4e:	db40      	blt.n	800ecd2 <__ieee754_sqrt+0x15e>
 800ec50:	f10c 0801 	add.w	r8, ip, #1
 800ec54:	eba2 020c 	sub.w	r2, r2, ip
 800ec58:	429e      	cmp	r6, r3
 800ec5a:	bf88      	it	hi
 800ec5c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ec60:	1b9b      	subs	r3, r3, r6
 800ec62:	4421      	add	r1, r4
 800ec64:	46c4      	mov	ip, r8
 800ec66:	0052      	lsls	r2, r2, #1
 800ec68:	3f01      	subs	r7, #1
 800ec6a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ec6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ec72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec76:	d1dd      	bne.n	800ec34 <__ieee754_sqrt+0xc0>
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	d006      	beq.n	800ec8a <__ieee754_sqrt+0x116>
 800ec7c:	1c4c      	adds	r4, r1, #1
 800ec7e:	bf13      	iteet	ne
 800ec80:	3101      	addne	r1, #1
 800ec82:	3001      	addeq	r0, #1
 800ec84:	4639      	moveq	r1, r7
 800ec86:	f021 0101 	bicne.w	r1, r1, #1
 800ec8a:	1043      	asrs	r3, r0, #1
 800ec8c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ec90:	0849      	lsrs	r1, r1, #1
 800ec92:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ec96:	07c2      	lsls	r2, r0, #31
 800ec98:	bf48      	it	mi
 800ec9a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ec9e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800eca2:	460c      	mov	r4, r1
 800eca4:	463d      	mov	r5, r7
 800eca6:	e77f      	b.n	800eba8 <__ieee754_sqrt+0x34>
 800eca8:	0ada      	lsrs	r2, r3, #11
 800ecaa:	3815      	subs	r0, #21
 800ecac:	055b      	lsls	r3, r3, #21
 800ecae:	2a00      	cmp	r2, #0
 800ecb0:	d0fa      	beq.n	800eca8 <__ieee754_sqrt+0x134>
 800ecb2:	02d7      	lsls	r7, r2, #11
 800ecb4:	d50a      	bpl.n	800eccc <__ieee754_sqrt+0x158>
 800ecb6:	f1c1 0420 	rsb	r4, r1, #32
 800ecba:	fa23 f404 	lsr.w	r4, r3, r4
 800ecbe:	1e4d      	subs	r5, r1, #1
 800ecc0:	408b      	lsls	r3, r1
 800ecc2:	4322      	orrs	r2, r4
 800ecc4:	1b41      	subs	r1, r0, r5
 800ecc6:	e788      	b.n	800ebda <__ieee754_sqrt+0x66>
 800ecc8:	4608      	mov	r0, r1
 800ecca:	e7f0      	b.n	800ecae <__ieee754_sqrt+0x13a>
 800eccc:	0052      	lsls	r2, r2, #1
 800ecce:	3101      	adds	r1, #1
 800ecd0:	e7ef      	b.n	800ecb2 <__ieee754_sqrt+0x13e>
 800ecd2:	46e0      	mov	r8, ip
 800ecd4:	e7be      	b.n	800ec54 <__ieee754_sqrt+0xe0>
 800ecd6:	bf00      	nop
 800ecd8:	7ff00000 	.word	0x7ff00000

0800ecdc <__ieee754_logf>:
 800ecdc:	ee10 3a10 	vmov	r3, s0
 800ece0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ece4:	d106      	bne.n	800ecf4 <__ieee754_logf+0x18>
 800ece6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ee7c <__ieee754_logf+0x1a0>
 800ecea:	eddf 7a65 	vldr	s15, [pc, #404]	; 800ee80 <__ieee754_logf+0x1a4>
 800ecee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ecf2:	4770      	bx	lr
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	da02      	bge.n	800ecfe <__ieee754_logf+0x22>
 800ecf8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ecfc:	e7f5      	b.n	800ecea <__ieee754_logf+0xe>
 800ecfe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ed02:	db02      	blt.n	800ed0a <__ieee754_logf+0x2e>
 800ed04:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ed08:	4770      	bx	lr
 800ed0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed0e:	bfb8      	it	lt
 800ed10:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800ee84 <__ieee754_logf+0x1a8>
 800ed14:	485c      	ldr	r0, [pc, #368]	; (800ee88 <__ieee754_logf+0x1ac>)
 800ed16:	bfbe      	ittt	lt
 800ed18:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ed1c:	f06f 0118 	mvnlt.w	r1, #24
 800ed20:	ee17 3a90 	vmovlt	r3, s15
 800ed24:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800ed28:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ed2c:	4418      	add	r0, r3
 800ed2e:	bfa8      	it	ge
 800ed30:	2100      	movge	r1, #0
 800ed32:	3a7f      	subs	r2, #127	; 0x7f
 800ed34:	440a      	add	r2, r1
 800ed36:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800ed3a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800ed3e:	4319      	orrs	r1, r3
 800ed40:	ee00 1a10 	vmov	s0, r1
 800ed44:	4951      	ldr	r1, [pc, #324]	; (800ee8c <__ieee754_logf+0x1b0>)
 800ed46:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800ed4a:	f103 000f 	add.w	r0, r3, #15
 800ed4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed52:	4001      	ands	r1, r0
 800ed54:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed58:	bb89      	cbnz	r1, 800edbe <__ieee754_logf+0xe2>
 800ed5a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ed5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed62:	d10f      	bne.n	800ed84 <__ieee754_logf+0xa8>
 800ed64:	2a00      	cmp	r2, #0
 800ed66:	f000 8085 	beq.w	800ee74 <__ieee754_logf+0x198>
 800ed6a:	ee07 2a90 	vmov	s15, r2
 800ed6e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800ee90 <__ieee754_logf+0x1b4>
 800ed72:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ee94 <__ieee754_logf+0x1b8>
 800ed76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ed7e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800ed82:	4770      	bx	lr
 800ed84:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ee98 <__ieee754_logf+0x1bc>
 800ed88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ed8c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800ed90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ed94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed98:	b912      	cbnz	r2, 800eda0 <__ieee754_logf+0xc4>
 800ed9a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ed9e:	4770      	bx	lr
 800eda0:	ee07 2a90 	vmov	s15, r2
 800eda4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800ee90 <__ieee754_logf+0x1b4>
 800eda8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edac:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800edb0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800edb4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ee94 <__ieee754_logf+0x1b8>
 800edb8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800edbc:	4770      	bx	lr
 800edbe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800edc2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800edc6:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ee9c <__ieee754_logf+0x1c0>
 800edca:	eddf 4a35 	vldr	s9, [pc, #212]	; 800eea0 <__ieee754_logf+0x1c4>
 800edce:	4935      	ldr	r1, [pc, #212]	; (800eea4 <__ieee754_logf+0x1c8>)
 800edd0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800edd4:	4419      	add	r1, r3
 800edd6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800edda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800edde:	430b      	orrs	r3, r1
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	ee07 2a90 	vmov	s15, r2
 800ede6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800edea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800edee:	ee25 7a05 	vmul.f32	s14, s10, s10
 800edf2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800eea8 <__ieee754_logf+0x1cc>
 800edf6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800edfa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800eeac <__ieee754_logf+0x1d0>
 800edfe:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ee02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800eeb0 <__ieee754_logf+0x1d4>
 800ee06:	eee7 7a24 	vfma.f32	s15, s14, s9
 800ee0a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800eeb4 <__ieee754_logf+0x1d8>
 800ee0e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800ee12:	eddf 7a29 	vldr	s15, [pc, #164]	; 800eeb8 <__ieee754_logf+0x1dc>
 800ee16:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ee1a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ee1e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ee22:	dd1c      	ble.n	800ee5e <__ieee754_logf+0x182>
 800ee24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ee28:	ee20 7a07 	vmul.f32	s14, s0, s14
 800ee2c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ee30:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee34:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ee38:	b922      	cbnz	r2, 800ee44 <__ieee754_logf+0x168>
 800ee3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee42:	4770      	bx	lr
 800ee44:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800ee90 <__ieee754_logf+0x1b4>
 800ee48:	eee6 7a86 	vfma.f32	s15, s13, s12
 800ee4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ee54:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ee94 <__ieee754_logf+0x1b8>
 800ee58:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800ee5c:	4770      	bx	lr
 800ee5e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ee62:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ee66:	2a00      	cmp	r2, #0
 800ee68:	d0e9      	beq.n	800ee3e <__ieee754_logf+0x162>
 800ee6a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800ee90 <__ieee754_logf+0x1b4>
 800ee6e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ee72:	e7ed      	b.n	800ee50 <__ieee754_logf+0x174>
 800ee74:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800ee80 <__ieee754_logf+0x1a4>
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	cc000000 	.word	0xcc000000
 800ee80:	00000000 	.word	0x00000000
 800ee84:	4c000000 	.word	0x4c000000
 800ee88:	004afb20 	.word	0x004afb20
 800ee8c:	007ffff0 	.word	0x007ffff0
 800ee90:	3717f7d1 	.word	0x3717f7d1
 800ee94:	3f317180 	.word	0x3f317180
 800ee98:	3eaaaaab 	.word	0x3eaaaaab
 800ee9c:	3e1cd04f 	.word	0x3e1cd04f
 800eea0:	3e178897 	.word	0x3e178897
 800eea4:	ffcf5c30 	.word	0xffcf5c30
 800eea8:	3e638e29 	.word	0x3e638e29
 800eeac:	3ecccccd 	.word	0x3ecccccd
 800eeb0:	3e3a3325 	.word	0x3e3a3325
 800eeb4:	3e924925 	.word	0x3e924925
 800eeb8:	3f2aaaab 	.word	0x3f2aaaab

0800eebc <__ieee754_sqrtf>:
 800eebc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eec0:	4770      	bx	lr
 800eec2:	0000      	movs	r0, r0
 800eec4:	0000      	movs	r0, r0
	...

0800eec8 <__kernel_cos>:
 800eec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	ec57 6b10 	vmov	r6, r7, d0
 800eed0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800eed4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800eed8:	ed8d 1b00 	vstr	d1, [sp]
 800eedc:	da07      	bge.n	800eeee <__kernel_cos+0x26>
 800eede:	ee10 0a10 	vmov	r0, s0
 800eee2:	4639      	mov	r1, r7
 800eee4:	f7f1 fe38 	bl	8000b58 <__aeabi_d2iz>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	f000 8088 	beq.w	800effe <__kernel_cos+0x136>
 800eeee:	4632      	mov	r2, r6
 800eef0:	463b      	mov	r3, r7
 800eef2:	4630      	mov	r0, r6
 800eef4:	4639      	mov	r1, r7
 800eef6:	f7f1 fb7f 	bl	80005f8 <__aeabi_dmul>
 800eefa:	4b51      	ldr	r3, [pc, #324]	; (800f040 <__kernel_cos+0x178>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	4604      	mov	r4, r0
 800ef00:	460d      	mov	r5, r1
 800ef02:	f7f1 fb79 	bl	80005f8 <__aeabi_dmul>
 800ef06:	a340      	add	r3, pc, #256	; (adr r3, 800f008 <__kernel_cos+0x140>)
 800ef08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	468b      	mov	fp, r1
 800ef10:	4620      	mov	r0, r4
 800ef12:	4629      	mov	r1, r5
 800ef14:	f7f1 fb70 	bl	80005f8 <__aeabi_dmul>
 800ef18:	a33d      	add	r3, pc, #244	; (adr r3, 800f010 <__kernel_cos+0x148>)
 800ef1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1e:	f7f1 f9b5 	bl	800028c <__adddf3>
 800ef22:	4622      	mov	r2, r4
 800ef24:	462b      	mov	r3, r5
 800ef26:	f7f1 fb67 	bl	80005f8 <__aeabi_dmul>
 800ef2a:	a33b      	add	r3, pc, #236	; (adr r3, 800f018 <__kernel_cos+0x150>)
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	f7f1 f9aa 	bl	8000288 <__aeabi_dsub>
 800ef34:	4622      	mov	r2, r4
 800ef36:	462b      	mov	r3, r5
 800ef38:	f7f1 fb5e 	bl	80005f8 <__aeabi_dmul>
 800ef3c:	a338      	add	r3, pc, #224	; (adr r3, 800f020 <__kernel_cos+0x158>)
 800ef3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef42:	f7f1 f9a3 	bl	800028c <__adddf3>
 800ef46:	4622      	mov	r2, r4
 800ef48:	462b      	mov	r3, r5
 800ef4a:	f7f1 fb55 	bl	80005f8 <__aeabi_dmul>
 800ef4e:	a336      	add	r3, pc, #216	; (adr r3, 800f028 <__kernel_cos+0x160>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	f7f1 f998 	bl	8000288 <__aeabi_dsub>
 800ef58:	4622      	mov	r2, r4
 800ef5a:	462b      	mov	r3, r5
 800ef5c:	f7f1 fb4c 	bl	80005f8 <__aeabi_dmul>
 800ef60:	a333      	add	r3, pc, #204	; (adr r3, 800f030 <__kernel_cos+0x168>)
 800ef62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef66:	f7f1 f991 	bl	800028c <__adddf3>
 800ef6a:	4622      	mov	r2, r4
 800ef6c:	462b      	mov	r3, r5
 800ef6e:	f7f1 fb43 	bl	80005f8 <__aeabi_dmul>
 800ef72:	4622      	mov	r2, r4
 800ef74:	462b      	mov	r3, r5
 800ef76:	f7f1 fb3f 	bl	80005f8 <__aeabi_dmul>
 800ef7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef7e:	4604      	mov	r4, r0
 800ef80:	460d      	mov	r5, r1
 800ef82:	4630      	mov	r0, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	f7f1 fb37 	bl	80005f8 <__aeabi_dmul>
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	4629      	mov	r1, r5
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7f1 f979 	bl	8000288 <__aeabi_dsub>
 800ef96:	4b2b      	ldr	r3, [pc, #172]	; (800f044 <__kernel_cos+0x17c>)
 800ef98:	4598      	cmp	r8, r3
 800ef9a:	4606      	mov	r6, r0
 800ef9c:	460f      	mov	r7, r1
 800ef9e:	dc10      	bgt.n	800efc2 <__kernel_cos+0xfa>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4650      	mov	r0, sl
 800efa6:	4659      	mov	r1, fp
 800efa8:	f7f1 f96e 	bl	8000288 <__aeabi_dsub>
 800efac:	460b      	mov	r3, r1
 800efae:	4926      	ldr	r1, [pc, #152]	; (800f048 <__kernel_cos+0x180>)
 800efb0:	4602      	mov	r2, r0
 800efb2:	2000      	movs	r0, #0
 800efb4:	f7f1 f968 	bl	8000288 <__aeabi_dsub>
 800efb8:	ec41 0b10 	vmov	d0, r0, r1
 800efbc:	b003      	add	sp, #12
 800efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc2:	4b22      	ldr	r3, [pc, #136]	; (800f04c <__kernel_cos+0x184>)
 800efc4:	4920      	ldr	r1, [pc, #128]	; (800f048 <__kernel_cos+0x180>)
 800efc6:	4598      	cmp	r8, r3
 800efc8:	bfcc      	ite	gt
 800efca:	4d21      	ldrgt	r5, [pc, #132]	; (800f050 <__kernel_cos+0x188>)
 800efcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800efd0:	2400      	movs	r4, #0
 800efd2:	4622      	mov	r2, r4
 800efd4:	462b      	mov	r3, r5
 800efd6:	2000      	movs	r0, #0
 800efd8:	f7f1 f956 	bl	8000288 <__aeabi_dsub>
 800efdc:	4622      	mov	r2, r4
 800efde:	4680      	mov	r8, r0
 800efe0:	4689      	mov	r9, r1
 800efe2:	462b      	mov	r3, r5
 800efe4:	4650      	mov	r0, sl
 800efe6:	4659      	mov	r1, fp
 800efe8:	f7f1 f94e 	bl	8000288 <__aeabi_dsub>
 800efec:	4632      	mov	r2, r6
 800efee:	463b      	mov	r3, r7
 800eff0:	f7f1 f94a 	bl	8000288 <__aeabi_dsub>
 800eff4:	4602      	mov	r2, r0
 800eff6:	460b      	mov	r3, r1
 800eff8:	4640      	mov	r0, r8
 800effa:	4649      	mov	r1, r9
 800effc:	e7da      	b.n	800efb4 <__kernel_cos+0xec>
 800effe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f038 <__kernel_cos+0x170>
 800f002:	e7db      	b.n	800efbc <__kernel_cos+0xf4>
 800f004:	f3af 8000 	nop.w
 800f008:	be8838d4 	.word	0xbe8838d4
 800f00c:	bda8fae9 	.word	0xbda8fae9
 800f010:	bdb4b1c4 	.word	0xbdb4b1c4
 800f014:	3e21ee9e 	.word	0x3e21ee9e
 800f018:	809c52ad 	.word	0x809c52ad
 800f01c:	3e927e4f 	.word	0x3e927e4f
 800f020:	19cb1590 	.word	0x19cb1590
 800f024:	3efa01a0 	.word	0x3efa01a0
 800f028:	16c15177 	.word	0x16c15177
 800f02c:	3f56c16c 	.word	0x3f56c16c
 800f030:	5555554c 	.word	0x5555554c
 800f034:	3fa55555 	.word	0x3fa55555
 800f038:	00000000 	.word	0x00000000
 800f03c:	3ff00000 	.word	0x3ff00000
 800f040:	3fe00000 	.word	0x3fe00000
 800f044:	3fd33332 	.word	0x3fd33332
 800f048:	3ff00000 	.word	0x3ff00000
 800f04c:	3fe90000 	.word	0x3fe90000
 800f050:	3fd20000 	.word	0x3fd20000
 800f054:	00000000 	.word	0x00000000

0800f058 <__kernel_rem_pio2>:
 800f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05c:	ed2d 8b02 	vpush	{d8}
 800f060:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f064:	f112 0f14 	cmn.w	r2, #20
 800f068:	9308      	str	r3, [sp, #32]
 800f06a:	9101      	str	r1, [sp, #4]
 800f06c:	4bc6      	ldr	r3, [pc, #792]	; (800f388 <__kernel_rem_pio2+0x330>)
 800f06e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f070:	9009      	str	r0, [sp, #36]	; 0x24
 800f072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f076:	9304      	str	r3, [sp, #16]
 800f078:	9b08      	ldr	r3, [sp, #32]
 800f07a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f07e:	bfa8      	it	ge
 800f080:	1ed4      	subge	r4, r2, #3
 800f082:	9306      	str	r3, [sp, #24]
 800f084:	bfb2      	itee	lt
 800f086:	2400      	movlt	r4, #0
 800f088:	2318      	movge	r3, #24
 800f08a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f08e:	f06f 0317 	mvn.w	r3, #23
 800f092:	fb04 3303 	mla	r3, r4, r3, r3
 800f096:	eb03 0a02 	add.w	sl, r3, r2
 800f09a:	9b04      	ldr	r3, [sp, #16]
 800f09c:	9a06      	ldr	r2, [sp, #24]
 800f09e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f378 <__kernel_rem_pio2+0x320>
 800f0a2:	eb03 0802 	add.w	r8, r3, r2
 800f0a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f0a8:	1aa7      	subs	r7, r4, r2
 800f0aa:	ae20      	add	r6, sp, #128	; 0x80
 800f0ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f0b0:	2500      	movs	r5, #0
 800f0b2:	4545      	cmp	r5, r8
 800f0b4:	dd18      	ble.n	800f0e8 <__kernel_rem_pio2+0x90>
 800f0b6:	9b08      	ldr	r3, [sp, #32]
 800f0b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f0bc:	aa20      	add	r2, sp, #128	; 0x80
 800f0be:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f378 <__kernel_rem_pio2+0x320>
 800f0c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f0c6:	f1c3 0301 	rsb	r3, r3, #1
 800f0ca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f0ce:	9307      	str	r3, [sp, #28]
 800f0d0:	9b07      	ldr	r3, [sp, #28]
 800f0d2:	9a04      	ldr	r2, [sp, #16]
 800f0d4:	4443      	add	r3, r8
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	db2f      	blt.n	800f13a <__kernel_rem_pio2+0xe2>
 800f0da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f0de:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f0e2:	462f      	mov	r7, r5
 800f0e4:	2600      	movs	r6, #0
 800f0e6:	e01b      	b.n	800f120 <__kernel_rem_pio2+0xc8>
 800f0e8:	42ef      	cmn	r7, r5
 800f0ea:	d407      	bmi.n	800f0fc <__kernel_rem_pio2+0xa4>
 800f0ec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f0f0:	f7f1 fa18 	bl	8000524 <__aeabi_i2d>
 800f0f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f0f8:	3501      	adds	r5, #1
 800f0fa:	e7da      	b.n	800f0b2 <__kernel_rem_pio2+0x5a>
 800f0fc:	ec51 0b18 	vmov	r0, r1, d8
 800f100:	e7f8      	b.n	800f0f4 <__kernel_rem_pio2+0x9c>
 800f102:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f106:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f10a:	f7f1 fa75 	bl	80005f8 <__aeabi_dmul>
 800f10e:	4602      	mov	r2, r0
 800f110:	460b      	mov	r3, r1
 800f112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f116:	f7f1 f8b9 	bl	800028c <__adddf3>
 800f11a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f11e:	3601      	adds	r6, #1
 800f120:	9b06      	ldr	r3, [sp, #24]
 800f122:	429e      	cmp	r6, r3
 800f124:	f1a7 0708 	sub.w	r7, r7, #8
 800f128:	ddeb      	ble.n	800f102 <__kernel_rem_pio2+0xaa>
 800f12a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f12e:	3508      	adds	r5, #8
 800f130:	ecab 7b02 	vstmia	fp!, {d7}
 800f134:	f108 0801 	add.w	r8, r8, #1
 800f138:	e7ca      	b.n	800f0d0 <__kernel_rem_pio2+0x78>
 800f13a:	9b04      	ldr	r3, [sp, #16]
 800f13c:	aa0c      	add	r2, sp, #48	; 0x30
 800f13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f142:	930b      	str	r3, [sp, #44]	; 0x2c
 800f144:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f146:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f14a:	9c04      	ldr	r4, [sp, #16]
 800f14c:	930a      	str	r3, [sp, #40]	; 0x28
 800f14e:	ab98      	add	r3, sp, #608	; 0x260
 800f150:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f154:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f158:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f15c:	f8cd b008 	str.w	fp, [sp, #8]
 800f160:	4625      	mov	r5, r4
 800f162:	2d00      	cmp	r5, #0
 800f164:	dc78      	bgt.n	800f258 <__kernel_rem_pio2+0x200>
 800f166:	ec47 6b10 	vmov	d0, r6, r7
 800f16a:	4650      	mov	r0, sl
 800f16c:	f000 fc9c 	bl	800faa8 <scalbn>
 800f170:	ec57 6b10 	vmov	r6, r7, d0
 800f174:	2200      	movs	r2, #0
 800f176:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f17a:	ee10 0a10 	vmov	r0, s0
 800f17e:	4639      	mov	r1, r7
 800f180:	f7f1 fa3a 	bl	80005f8 <__aeabi_dmul>
 800f184:	ec41 0b10 	vmov	d0, r0, r1
 800f188:	f000 fb7a 	bl	800f880 <floor>
 800f18c:	4b7f      	ldr	r3, [pc, #508]	; (800f38c <__kernel_rem_pio2+0x334>)
 800f18e:	ec51 0b10 	vmov	r0, r1, d0
 800f192:	2200      	movs	r2, #0
 800f194:	f7f1 fa30 	bl	80005f8 <__aeabi_dmul>
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	4630      	mov	r0, r6
 800f19e:	4639      	mov	r1, r7
 800f1a0:	f7f1 f872 	bl	8000288 <__aeabi_dsub>
 800f1a4:	460f      	mov	r7, r1
 800f1a6:	4606      	mov	r6, r0
 800f1a8:	f7f1 fcd6 	bl	8000b58 <__aeabi_d2iz>
 800f1ac:	9007      	str	r0, [sp, #28]
 800f1ae:	f7f1 f9b9 	bl	8000524 <__aeabi_i2d>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	f7f1 f865 	bl	8000288 <__aeabi_dsub>
 800f1be:	f1ba 0f00 	cmp.w	sl, #0
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460f      	mov	r7, r1
 800f1c6:	dd70      	ble.n	800f2aa <__kernel_rem_pio2+0x252>
 800f1c8:	1e62      	subs	r2, r4, #1
 800f1ca:	ab0c      	add	r3, sp, #48	; 0x30
 800f1cc:	9d07      	ldr	r5, [sp, #28]
 800f1ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f1d2:	f1ca 0118 	rsb	r1, sl, #24
 800f1d6:	fa40 f301 	asr.w	r3, r0, r1
 800f1da:	441d      	add	r5, r3
 800f1dc:	408b      	lsls	r3, r1
 800f1de:	1ac0      	subs	r0, r0, r3
 800f1e0:	ab0c      	add	r3, sp, #48	; 0x30
 800f1e2:	9507      	str	r5, [sp, #28]
 800f1e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f1e8:	f1ca 0317 	rsb	r3, sl, #23
 800f1ec:	fa40 f303 	asr.w	r3, r0, r3
 800f1f0:	9302      	str	r3, [sp, #8]
 800f1f2:	9b02      	ldr	r3, [sp, #8]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	dd66      	ble.n	800f2c6 <__kernel_rem_pio2+0x26e>
 800f1f8:	9b07      	ldr	r3, [sp, #28]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	9307      	str	r3, [sp, #28]
 800f200:	4615      	mov	r5, r2
 800f202:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f206:	4294      	cmp	r4, r2
 800f208:	f300 8099 	bgt.w	800f33e <__kernel_rem_pio2+0x2e6>
 800f20c:	f1ba 0f00 	cmp.w	sl, #0
 800f210:	dd07      	ble.n	800f222 <__kernel_rem_pio2+0x1ca>
 800f212:	f1ba 0f01 	cmp.w	sl, #1
 800f216:	f000 80a5 	beq.w	800f364 <__kernel_rem_pio2+0x30c>
 800f21a:	f1ba 0f02 	cmp.w	sl, #2
 800f21e:	f000 80c1 	beq.w	800f3a4 <__kernel_rem_pio2+0x34c>
 800f222:	9b02      	ldr	r3, [sp, #8]
 800f224:	2b02      	cmp	r3, #2
 800f226:	d14e      	bne.n	800f2c6 <__kernel_rem_pio2+0x26e>
 800f228:	4632      	mov	r2, r6
 800f22a:	463b      	mov	r3, r7
 800f22c:	4958      	ldr	r1, [pc, #352]	; (800f390 <__kernel_rem_pio2+0x338>)
 800f22e:	2000      	movs	r0, #0
 800f230:	f7f1 f82a 	bl	8000288 <__aeabi_dsub>
 800f234:	4606      	mov	r6, r0
 800f236:	460f      	mov	r7, r1
 800f238:	2d00      	cmp	r5, #0
 800f23a:	d044      	beq.n	800f2c6 <__kernel_rem_pio2+0x26e>
 800f23c:	4650      	mov	r0, sl
 800f23e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f380 <__kernel_rem_pio2+0x328>
 800f242:	f000 fc31 	bl	800faa8 <scalbn>
 800f246:	4630      	mov	r0, r6
 800f248:	4639      	mov	r1, r7
 800f24a:	ec53 2b10 	vmov	r2, r3, d0
 800f24e:	f7f1 f81b 	bl	8000288 <__aeabi_dsub>
 800f252:	4606      	mov	r6, r0
 800f254:	460f      	mov	r7, r1
 800f256:	e036      	b.n	800f2c6 <__kernel_rem_pio2+0x26e>
 800f258:	4b4e      	ldr	r3, [pc, #312]	; (800f394 <__kernel_rem_pio2+0x33c>)
 800f25a:	2200      	movs	r2, #0
 800f25c:	4630      	mov	r0, r6
 800f25e:	4639      	mov	r1, r7
 800f260:	f7f1 f9ca 	bl	80005f8 <__aeabi_dmul>
 800f264:	f7f1 fc78 	bl	8000b58 <__aeabi_d2iz>
 800f268:	f7f1 f95c 	bl	8000524 <__aeabi_i2d>
 800f26c:	4b4a      	ldr	r3, [pc, #296]	; (800f398 <__kernel_rem_pio2+0x340>)
 800f26e:	2200      	movs	r2, #0
 800f270:	4680      	mov	r8, r0
 800f272:	4689      	mov	r9, r1
 800f274:	f7f1 f9c0 	bl	80005f8 <__aeabi_dmul>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4630      	mov	r0, r6
 800f27e:	4639      	mov	r1, r7
 800f280:	f7f1 f802 	bl	8000288 <__aeabi_dsub>
 800f284:	f7f1 fc68 	bl	8000b58 <__aeabi_d2iz>
 800f288:	9b02      	ldr	r3, [sp, #8]
 800f28a:	f843 0b04 	str.w	r0, [r3], #4
 800f28e:	3d01      	subs	r5, #1
 800f290:	9302      	str	r3, [sp, #8]
 800f292:	ab70      	add	r3, sp, #448	; 0x1c0
 800f294:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	4640      	mov	r0, r8
 800f29e:	4649      	mov	r1, r9
 800f2a0:	f7f0 fff4 	bl	800028c <__adddf3>
 800f2a4:	4606      	mov	r6, r0
 800f2a6:	460f      	mov	r7, r1
 800f2a8:	e75b      	b.n	800f162 <__kernel_rem_pio2+0x10a>
 800f2aa:	d105      	bne.n	800f2b8 <__kernel_rem_pio2+0x260>
 800f2ac:	1e63      	subs	r3, r4, #1
 800f2ae:	aa0c      	add	r2, sp, #48	; 0x30
 800f2b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f2b4:	15c3      	asrs	r3, r0, #23
 800f2b6:	e79b      	b.n	800f1f0 <__kernel_rem_pio2+0x198>
 800f2b8:	4b38      	ldr	r3, [pc, #224]	; (800f39c <__kernel_rem_pio2+0x344>)
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f7f1 fc22 	bl	8000b04 <__aeabi_dcmpge>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d139      	bne.n	800f338 <__kernel_rem_pio2+0x2e0>
 800f2c4:	9002      	str	r0, [sp, #8]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	4639      	mov	r1, r7
 800f2ce:	f7f1 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	f000 80b4 	beq.w	800f440 <__kernel_rem_pio2+0x3e8>
 800f2d8:	f104 3bff 	add.w	fp, r4, #4294967295
 800f2dc:	465b      	mov	r3, fp
 800f2de:	2200      	movs	r2, #0
 800f2e0:	9904      	ldr	r1, [sp, #16]
 800f2e2:	428b      	cmp	r3, r1
 800f2e4:	da65      	bge.n	800f3b2 <__kernel_rem_pio2+0x35a>
 800f2e6:	2a00      	cmp	r2, #0
 800f2e8:	d07b      	beq.n	800f3e2 <__kernel_rem_pio2+0x38a>
 800f2ea:	ab0c      	add	r3, sp, #48	; 0x30
 800f2ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800f2f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f000 80a0 	beq.w	800f43a <__kernel_rem_pio2+0x3e2>
 800f2fa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f380 <__kernel_rem_pio2+0x328>
 800f2fe:	4650      	mov	r0, sl
 800f300:	f000 fbd2 	bl	800faa8 <scalbn>
 800f304:	4f23      	ldr	r7, [pc, #140]	; (800f394 <__kernel_rem_pio2+0x33c>)
 800f306:	ec55 4b10 	vmov	r4, r5, d0
 800f30a:	46d8      	mov	r8, fp
 800f30c:	2600      	movs	r6, #0
 800f30e:	f1b8 0f00 	cmp.w	r8, #0
 800f312:	f280 80cf 	bge.w	800f4b4 <__kernel_rem_pio2+0x45c>
 800f316:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f378 <__kernel_rem_pio2+0x320>
 800f31a:	465f      	mov	r7, fp
 800f31c:	f04f 0800 	mov.w	r8, #0
 800f320:	2f00      	cmp	r7, #0
 800f322:	f2c0 80fd 	blt.w	800f520 <__kernel_rem_pio2+0x4c8>
 800f326:	ab70      	add	r3, sp, #448	; 0x1c0
 800f328:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f3a0 <__kernel_rem_pio2+0x348>
 800f32c:	ec55 4b18 	vmov	r4, r5, d8
 800f330:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f334:	2600      	movs	r6, #0
 800f336:	e0e5      	b.n	800f504 <__kernel_rem_pio2+0x4ac>
 800f338:	2302      	movs	r3, #2
 800f33a:	9302      	str	r3, [sp, #8]
 800f33c:	e75c      	b.n	800f1f8 <__kernel_rem_pio2+0x1a0>
 800f33e:	f8db 3000 	ldr.w	r3, [fp]
 800f342:	b955      	cbnz	r5, 800f35a <__kernel_rem_pio2+0x302>
 800f344:	b123      	cbz	r3, 800f350 <__kernel_rem_pio2+0x2f8>
 800f346:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f34a:	f8cb 3000 	str.w	r3, [fp]
 800f34e:	2301      	movs	r3, #1
 800f350:	3201      	adds	r2, #1
 800f352:	f10b 0b04 	add.w	fp, fp, #4
 800f356:	461d      	mov	r5, r3
 800f358:	e755      	b.n	800f206 <__kernel_rem_pio2+0x1ae>
 800f35a:	1acb      	subs	r3, r1, r3
 800f35c:	f8cb 3000 	str.w	r3, [fp]
 800f360:	462b      	mov	r3, r5
 800f362:	e7f5      	b.n	800f350 <__kernel_rem_pio2+0x2f8>
 800f364:	1e62      	subs	r2, r4, #1
 800f366:	ab0c      	add	r3, sp, #48	; 0x30
 800f368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f36c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f370:	a90c      	add	r1, sp, #48	; 0x30
 800f372:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f376:	e754      	b.n	800f222 <__kernel_rem_pio2+0x1ca>
	...
 800f384:	3ff00000 	.word	0x3ff00000
 800f388:	08029128 	.word	0x08029128
 800f38c:	40200000 	.word	0x40200000
 800f390:	3ff00000 	.word	0x3ff00000
 800f394:	3e700000 	.word	0x3e700000
 800f398:	41700000 	.word	0x41700000
 800f39c:	3fe00000 	.word	0x3fe00000
 800f3a0:	080290e8 	.word	0x080290e8
 800f3a4:	1e62      	subs	r2, r4, #1
 800f3a6:	ab0c      	add	r3, sp, #48	; 0x30
 800f3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f3b0:	e7de      	b.n	800f370 <__kernel_rem_pio2+0x318>
 800f3b2:	a90c      	add	r1, sp, #48	; 0x30
 800f3b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	e790      	b.n	800f2e0 <__kernel_rem_pio2+0x288>
 800f3be:	3301      	adds	r3, #1
 800f3c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	d0fa      	beq.n	800f3be <__kernel_rem_pio2+0x366>
 800f3c8:	9a08      	ldr	r2, [sp, #32]
 800f3ca:	18e3      	adds	r3, r4, r3
 800f3cc:	18a6      	adds	r6, r4, r2
 800f3ce:	aa20      	add	r2, sp, #128	; 0x80
 800f3d0:	1c65      	adds	r5, r4, #1
 800f3d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f3d6:	9302      	str	r3, [sp, #8]
 800f3d8:	9b02      	ldr	r3, [sp, #8]
 800f3da:	42ab      	cmp	r3, r5
 800f3dc:	da04      	bge.n	800f3e8 <__kernel_rem_pio2+0x390>
 800f3de:	461c      	mov	r4, r3
 800f3e0:	e6b5      	b.n	800f14e <__kernel_rem_pio2+0xf6>
 800f3e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e7eb      	b.n	800f3c0 <__kernel_rem_pio2+0x368>
 800f3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f3ee:	f7f1 f899 	bl	8000524 <__aeabi_i2d>
 800f3f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f8:	46b3      	mov	fp, r6
 800f3fa:	461c      	mov	r4, r3
 800f3fc:	2700      	movs	r7, #0
 800f3fe:	f04f 0800 	mov.w	r8, #0
 800f402:	f04f 0900 	mov.w	r9, #0
 800f406:	9b06      	ldr	r3, [sp, #24]
 800f408:	429f      	cmp	r7, r3
 800f40a:	dd06      	ble.n	800f41a <__kernel_rem_pio2+0x3c2>
 800f40c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f40e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f412:	e9c3 8900 	strd	r8, r9, [r3]
 800f416:	3501      	adds	r5, #1
 800f418:	e7de      	b.n	800f3d8 <__kernel_rem_pio2+0x380>
 800f41a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f41e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f422:	f7f1 f8e9 	bl	80005f8 <__aeabi_dmul>
 800f426:	4602      	mov	r2, r0
 800f428:	460b      	mov	r3, r1
 800f42a:	4640      	mov	r0, r8
 800f42c:	4649      	mov	r1, r9
 800f42e:	f7f0 ff2d 	bl	800028c <__adddf3>
 800f432:	3701      	adds	r7, #1
 800f434:	4680      	mov	r8, r0
 800f436:	4689      	mov	r9, r1
 800f438:	e7e5      	b.n	800f406 <__kernel_rem_pio2+0x3ae>
 800f43a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f43e:	e754      	b.n	800f2ea <__kernel_rem_pio2+0x292>
 800f440:	ec47 6b10 	vmov	d0, r6, r7
 800f444:	f1ca 0000 	rsb	r0, sl, #0
 800f448:	f000 fb2e 	bl	800faa8 <scalbn>
 800f44c:	ec57 6b10 	vmov	r6, r7, d0
 800f450:	4b9f      	ldr	r3, [pc, #636]	; (800f6d0 <__kernel_rem_pio2+0x678>)
 800f452:	ee10 0a10 	vmov	r0, s0
 800f456:	2200      	movs	r2, #0
 800f458:	4639      	mov	r1, r7
 800f45a:	f7f1 fb53 	bl	8000b04 <__aeabi_dcmpge>
 800f45e:	b300      	cbz	r0, 800f4a2 <__kernel_rem_pio2+0x44a>
 800f460:	4b9c      	ldr	r3, [pc, #624]	; (800f6d4 <__kernel_rem_pio2+0x67c>)
 800f462:	2200      	movs	r2, #0
 800f464:	4630      	mov	r0, r6
 800f466:	4639      	mov	r1, r7
 800f468:	f7f1 f8c6 	bl	80005f8 <__aeabi_dmul>
 800f46c:	f7f1 fb74 	bl	8000b58 <__aeabi_d2iz>
 800f470:	4605      	mov	r5, r0
 800f472:	f7f1 f857 	bl	8000524 <__aeabi_i2d>
 800f476:	4b96      	ldr	r3, [pc, #600]	; (800f6d0 <__kernel_rem_pio2+0x678>)
 800f478:	2200      	movs	r2, #0
 800f47a:	f7f1 f8bd 	bl	80005f8 <__aeabi_dmul>
 800f47e:	460b      	mov	r3, r1
 800f480:	4602      	mov	r2, r0
 800f482:	4639      	mov	r1, r7
 800f484:	4630      	mov	r0, r6
 800f486:	f7f0 feff 	bl	8000288 <__aeabi_dsub>
 800f48a:	f7f1 fb65 	bl	8000b58 <__aeabi_d2iz>
 800f48e:	f104 0b01 	add.w	fp, r4, #1
 800f492:	ab0c      	add	r3, sp, #48	; 0x30
 800f494:	f10a 0a18 	add.w	sl, sl, #24
 800f498:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f49c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f4a0:	e72b      	b.n	800f2fa <__kernel_rem_pio2+0x2a2>
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f7f1 fb57 	bl	8000b58 <__aeabi_d2iz>
 800f4aa:	ab0c      	add	r3, sp, #48	; 0x30
 800f4ac:	46a3      	mov	fp, r4
 800f4ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f4b2:	e722      	b.n	800f2fa <__kernel_rem_pio2+0x2a2>
 800f4b4:	ab70      	add	r3, sp, #448	; 0x1c0
 800f4b6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f4ba:	ab0c      	add	r3, sp, #48	; 0x30
 800f4bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f4c0:	f7f1 f830 	bl	8000524 <__aeabi_i2d>
 800f4c4:	4622      	mov	r2, r4
 800f4c6:	462b      	mov	r3, r5
 800f4c8:	f7f1 f896 	bl	80005f8 <__aeabi_dmul>
 800f4cc:	4632      	mov	r2, r6
 800f4ce:	e9c9 0100 	strd	r0, r1, [r9]
 800f4d2:	463b      	mov	r3, r7
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	f7f1 f88e 	bl	80005f8 <__aeabi_dmul>
 800f4dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	460d      	mov	r5, r1
 800f4e4:	e713      	b.n	800f30e <__kernel_rem_pio2+0x2b6>
 800f4e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f4ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f4ee:	f7f1 f883 	bl	80005f8 <__aeabi_dmul>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	f7f0 fec7 	bl	800028c <__adddf3>
 800f4fe:	3601      	adds	r6, #1
 800f500:	4604      	mov	r4, r0
 800f502:	460d      	mov	r5, r1
 800f504:	9b04      	ldr	r3, [sp, #16]
 800f506:	429e      	cmp	r6, r3
 800f508:	dc01      	bgt.n	800f50e <__kernel_rem_pio2+0x4b6>
 800f50a:	45b0      	cmp	r8, r6
 800f50c:	daeb      	bge.n	800f4e6 <__kernel_rem_pio2+0x48e>
 800f50e:	ab48      	add	r3, sp, #288	; 0x120
 800f510:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f514:	e9c3 4500 	strd	r4, r5, [r3]
 800f518:	3f01      	subs	r7, #1
 800f51a:	f108 0801 	add.w	r8, r8, #1
 800f51e:	e6ff      	b.n	800f320 <__kernel_rem_pio2+0x2c8>
 800f520:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f522:	2b02      	cmp	r3, #2
 800f524:	dc0b      	bgt.n	800f53e <__kernel_rem_pio2+0x4e6>
 800f526:	2b00      	cmp	r3, #0
 800f528:	dc6e      	bgt.n	800f608 <__kernel_rem_pio2+0x5b0>
 800f52a:	d045      	beq.n	800f5b8 <__kernel_rem_pio2+0x560>
 800f52c:	9b07      	ldr	r3, [sp, #28]
 800f52e:	f003 0007 	and.w	r0, r3, #7
 800f532:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f536:	ecbd 8b02 	vpop	{d8}
 800f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f540:	2b03      	cmp	r3, #3
 800f542:	d1f3      	bne.n	800f52c <__kernel_rem_pio2+0x4d4>
 800f544:	ab48      	add	r3, sp, #288	; 0x120
 800f546:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f54a:	46d0      	mov	r8, sl
 800f54c:	46d9      	mov	r9, fp
 800f54e:	f1b9 0f00 	cmp.w	r9, #0
 800f552:	f1a8 0808 	sub.w	r8, r8, #8
 800f556:	dc64      	bgt.n	800f622 <__kernel_rem_pio2+0x5ca>
 800f558:	465c      	mov	r4, fp
 800f55a:	2c01      	cmp	r4, #1
 800f55c:	f1aa 0a08 	sub.w	sl, sl, #8
 800f560:	dc7e      	bgt.n	800f660 <__kernel_rem_pio2+0x608>
 800f562:	2000      	movs	r0, #0
 800f564:	2100      	movs	r1, #0
 800f566:	f1bb 0f01 	cmp.w	fp, #1
 800f56a:	f300 8097 	bgt.w	800f69c <__kernel_rem_pio2+0x644>
 800f56e:	9b02      	ldr	r3, [sp, #8]
 800f570:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f574:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f040 8099 	bne.w	800f6b0 <__kernel_rem_pio2+0x658>
 800f57e:	9b01      	ldr	r3, [sp, #4]
 800f580:	e9c3 5600 	strd	r5, r6, [r3]
 800f584:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f588:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f58c:	e7ce      	b.n	800f52c <__kernel_rem_pio2+0x4d4>
 800f58e:	ab48      	add	r3, sp, #288	; 0x120
 800f590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f7f0 fe78 	bl	800028c <__adddf3>
 800f59c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f5a0:	f1bb 0f00 	cmp.w	fp, #0
 800f5a4:	daf3      	bge.n	800f58e <__kernel_rem_pio2+0x536>
 800f5a6:	9b02      	ldr	r3, [sp, #8]
 800f5a8:	b113      	cbz	r3, 800f5b0 <__kernel_rem_pio2+0x558>
 800f5aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	9b01      	ldr	r3, [sp, #4]
 800f5b2:	e9c3 0100 	strd	r0, r1, [r3]
 800f5b6:	e7b9      	b.n	800f52c <__kernel_rem_pio2+0x4d4>
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	e7f0      	b.n	800f5a0 <__kernel_rem_pio2+0x548>
 800f5be:	ab48      	add	r3, sp, #288	; 0x120
 800f5c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c8:	f7f0 fe60 	bl	800028c <__adddf3>
 800f5cc:	3c01      	subs	r4, #1
 800f5ce:	2c00      	cmp	r4, #0
 800f5d0:	daf5      	bge.n	800f5be <__kernel_rem_pio2+0x566>
 800f5d2:	9b02      	ldr	r3, [sp, #8]
 800f5d4:	b1e3      	cbz	r3, 800f610 <__kernel_rem_pio2+0x5b8>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5dc:	9c01      	ldr	r4, [sp, #4]
 800f5de:	e9c4 2300 	strd	r2, r3, [r4]
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f5ea:	f7f0 fe4d 	bl	8000288 <__aeabi_dsub>
 800f5ee:	ad4a      	add	r5, sp, #296	; 0x128
 800f5f0:	2401      	movs	r4, #1
 800f5f2:	45a3      	cmp	fp, r4
 800f5f4:	da0f      	bge.n	800f616 <__kernel_rem_pio2+0x5be>
 800f5f6:	9b02      	ldr	r3, [sp, #8]
 800f5f8:	b113      	cbz	r3, 800f600 <__kernel_rem_pio2+0x5a8>
 800f5fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5fe:	4619      	mov	r1, r3
 800f600:	9b01      	ldr	r3, [sp, #4]
 800f602:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f606:	e791      	b.n	800f52c <__kernel_rem_pio2+0x4d4>
 800f608:	465c      	mov	r4, fp
 800f60a:	2000      	movs	r0, #0
 800f60c:	2100      	movs	r1, #0
 800f60e:	e7de      	b.n	800f5ce <__kernel_rem_pio2+0x576>
 800f610:	4602      	mov	r2, r0
 800f612:	460b      	mov	r3, r1
 800f614:	e7e2      	b.n	800f5dc <__kernel_rem_pio2+0x584>
 800f616:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f61a:	f7f0 fe37 	bl	800028c <__adddf3>
 800f61e:	3401      	adds	r4, #1
 800f620:	e7e7      	b.n	800f5f2 <__kernel_rem_pio2+0x59a>
 800f622:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f626:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f62a:	4620      	mov	r0, r4
 800f62c:	4632      	mov	r2, r6
 800f62e:	463b      	mov	r3, r7
 800f630:	4629      	mov	r1, r5
 800f632:	f7f0 fe2b 	bl	800028c <__adddf3>
 800f636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f63a:	4602      	mov	r2, r0
 800f63c:	460b      	mov	r3, r1
 800f63e:	4620      	mov	r0, r4
 800f640:	4629      	mov	r1, r5
 800f642:	f7f0 fe21 	bl	8000288 <__aeabi_dsub>
 800f646:	4632      	mov	r2, r6
 800f648:	463b      	mov	r3, r7
 800f64a:	f7f0 fe1f 	bl	800028c <__adddf3>
 800f64e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f652:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f656:	ed88 7b00 	vstr	d7, [r8]
 800f65a:	f109 39ff 	add.w	r9, r9, #4294967295
 800f65e:	e776      	b.n	800f54e <__kernel_rem_pio2+0x4f6>
 800f660:	e9da 8900 	ldrd	r8, r9, [sl]
 800f664:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f668:	4640      	mov	r0, r8
 800f66a:	4632      	mov	r2, r6
 800f66c:	463b      	mov	r3, r7
 800f66e:	4649      	mov	r1, r9
 800f670:	f7f0 fe0c 	bl	800028c <__adddf3>
 800f674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	4640      	mov	r0, r8
 800f67e:	4649      	mov	r1, r9
 800f680:	f7f0 fe02 	bl	8000288 <__aeabi_dsub>
 800f684:	4632      	mov	r2, r6
 800f686:	463b      	mov	r3, r7
 800f688:	f7f0 fe00 	bl	800028c <__adddf3>
 800f68c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f690:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f694:	ed8a 7b00 	vstr	d7, [sl]
 800f698:	3c01      	subs	r4, #1
 800f69a:	e75e      	b.n	800f55a <__kernel_rem_pio2+0x502>
 800f69c:	ab48      	add	r3, sp, #288	; 0x120
 800f69e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a6:	f7f0 fdf1 	bl	800028c <__adddf3>
 800f6aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6ae:	e75a      	b.n	800f566 <__kernel_rem_pio2+0x50e>
 800f6b0:	9b01      	ldr	r3, [sp, #4]
 800f6b2:	9a01      	ldr	r2, [sp, #4]
 800f6b4:	601d      	str	r5, [r3, #0]
 800f6b6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f6ba:	605c      	str	r4, [r3, #4]
 800f6bc:	609f      	str	r7, [r3, #8]
 800f6be:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f6c2:	60d3      	str	r3, [r2, #12]
 800f6c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6c8:	6110      	str	r0, [r2, #16]
 800f6ca:	6153      	str	r3, [r2, #20]
 800f6cc:	e72e      	b.n	800f52c <__kernel_rem_pio2+0x4d4>
 800f6ce:	bf00      	nop
 800f6d0:	41700000 	.word	0x41700000
 800f6d4:	3e700000 	.word	0x3e700000

0800f6d8 <__kernel_sin>:
 800f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6dc:	ed2d 8b04 	vpush	{d8-d9}
 800f6e0:	eeb0 8a41 	vmov.f32	s16, s2
 800f6e4:	eef0 8a61 	vmov.f32	s17, s3
 800f6e8:	ec55 4b10 	vmov	r4, r5, d0
 800f6ec:	b083      	sub	sp, #12
 800f6ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f6f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f6f6:	9001      	str	r0, [sp, #4]
 800f6f8:	da06      	bge.n	800f708 <__kernel_sin+0x30>
 800f6fa:	ee10 0a10 	vmov	r0, s0
 800f6fe:	4629      	mov	r1, r5
 800f700:	f7f1 fa2a 	bl	8000b58 <__aeabi_d2iz>
 800f704:	2800      	cmp	r0, #0
 800f706:	d051      	beq.n	800f7ac <__kernel_sin+0xd4>
 800f708:	4622      	mov	r2, r4
 800f70a:	462b      	mov	r3, r5
 800f70c:	4620      	mov	r0, r4
 800f70e:	4629      	mov	r1, r5
 800f710:	f7f0 ff72 	bl	80005f8 <__aeabi_dmul>
 800f714:	4682      	mov	sl, r0
 800f716:	468b      	mov	fp, r1
 800f718:	4602      	mov	r2, r0
 800f71a:	460b      	mov	r3, r1
 800f71c:	4620      	mov	r0, r4
 800f71e:	4629      	mov	r1, r5
 800f720:	f7f0 ff6a 	bl	80005f8 <__aeabi_dmul>
 800f724:	a341      	add	r3, pc, #260	; (adr r3, 800f82c <__kernel_sin+0x154>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	4680      	mov	r8, r0
 800f72c:	4689      	mov	r9, r1
 800f72e:	4650      	mov	r0, sl
 800f730:	4659      	mov	r1, fp
 800f732:	f7f0 ff61 	bl	80005f8 <__aeabi_dmul>
 800f736:	a33f      	add	r3, pc, #252	; (adr r3, 800f834 <__kernel_sin+0x15c>)
 800f738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73c:	f7f0 fda4 	bl	8000288 <__aeabi_dsub>
 800f740:	4652      	mov	r2, sl
 800f742:	465b      	mov	r3, fp
 800f744:	f7f0 ff58 	bl	80005f8 <__aeabi_dmul>
 800f748:	a33c      	add	r3, pc, #240	; (adr r3, 800f83c <__kernel_sin+0x164>)
 800f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74e:	f7f0 fd9d 	bl	800028c <__adddf3>
 800f752:	4652      	mov	r2, sl
 800f754:	465b      	mov	r3, fp
 800f756:	f7f0 ff4f 	bl	80005f8 <__aeabi_dmul>
 800f75a:	a33a      	add	r3, pc, #232	; (adr r3, 800f844 <__kernel_sin+0x16c>)
 800f75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f760:	f7f0 fd92 	bl	8000288 <__aeabi_dsub>
 800f764:	4652      	mov	r2, sl
 800f766:	465b      	mov	r3, fp
 800f768:	f7f0 ff46 	bl	80005f8 <__aeabi_dmul>
 800f76c:	a337      	add	r3, pc, #220	; (adr r3, 800f84c <__kernel_sin+0x174>)
 800f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f772:	f7f0 fd8b 	bl	800028c <__adddf3>
 800f776:	9b01      	ldr	r3, [sp, #4]
 800f778:	4606      	mov	r6, r0
 800f77a:	460f      	mov	r7, r1
 800f77c:	b9eb      	cbnz	r3, 800f7ba <__kernel_sin+0xe2>
 800f77e:	4602      	mov	r2, r0
 800f780:	460b      	mov	r3, r1
 800f782:	4650      	mov	r0, sl
 800f784:	4659      	mov	r1, fp
 800f786:	f7f0 ff37 	bl	80005f8 <__aeabi_dmul>
 800f78a:	a325      	add	r3, pc, #148	; (adr r3, 800f820 <__kernel_sin+0x148>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	f7f0 fd7a 	bl	8000288 <__aeabi_dsub>
 800f794:	4642      	mov	r2, r8
 800f796:	464b      	mov	r3, r9
 800f798:	f7f0 ff2e 	bl	80005f8 <__aeabi_dmul>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	4629      	mov	r1, r5
 800f7a4:	f7f0 fd72 	bl	800028c <__adddf3>
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	460d      	mov	r5, r1
 800f7ac:	ec45 4b10 	vmov	d0, r4, r5
 800f7b0:	b003      	add	sp, #12
 800f7b2:	ecbd 8b04 	vpop	{d8-d9}
 800f7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ba:	4b1b      	ldr	r3, [pc, #108]	; (800f828 <__kernel_sin+0x150>)
 800f7bc:	ec51 0b18 	vmov	r0, r1, d8
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f7f0 ff19 	bl	80005f8 <__aeabi_dmul>
 800f7c6:	4632      	mov	r2, r6
 800f7c8:	ec41 0b19 	vmov	d9, r0, r1
 800f7cc:	463b      	mov	r3, r7
 800f7ce:	4640      	mov	r0, r8
 800f7d0:	4649      	mov	r1, r9
 800f7d2:	f7f0 ff11 	bl	80005f8 <__aeabi_dmul>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	ec51 0b19 	vmov	r0, r1, d9
 800f7de:	f7f0 fd53 	bl	8000288 <__aeabi_dsub>
 800f7e2:	4652      	mov	r2, sl
 800f7e4:	465b      	mov	r3, fp
 800f7e6:	f7f0 ff07 	bl	80005f8 <__aeabi_dmul>
 800f7ea:	ec53 2b18 	vmov	r2, r3, d8
 800f7ee:	f7f0 fd4b 	bl	8000288 <__aeabi_dsub>
 800f7f2:	a30b      	add	r3, pc, #44	; (adr r3, 800f820 <__kernel_sin+0x148>)
 800f7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	460f      	mov	r7, r1
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	4649      	mov	r1, r9
 800f800:	f7f0 fefa 	bl	80005f8 <__aeabi_dmul>
 800f804:	4602      	mov	r2, r0
 800f806:	460b      	mov	r3, r1
 800f808:	4630      	mov	r0, r6
 800f80a:	4639      	mov	r1, r7
 800f80c:	f7f0 fd3e 	bl	800028c <__adddf3>
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	4620      	mov	r0, r4
 800f816:	4629      	mov	r1, r5
 800f818:	f7f0 fd36 	bl	8000288 <__aeabi_dsub>
 800f81c:	e7c4      	b.n	800f7a8 <__kernel_sin+0xd0>
 800f81e:	bf00      	nop
 800f820:	55555549 	.word	0x55555549
 800f824:	3fc55555 	.word	0x3fc55555
 800f828:	3fe00000 	.word	0x3fe00000
 800f82c:	5acfd57c 	.word	0x5acfd57c
 800f830:	3de5d93a 	.word	0x3de5d93a
 800f834:	8a2b9ceb 	.word	0x8a2b9ceb
 800f838:	3e5ae5e6 	.word	0x3e5ae5e6
 800f83c:	57b1fe7d 	.word	0x57b1fe7d
 800f840:	3ec71de3 	.word	0x3ec71de3
 800f844:	19c161d5 	.word	0x19c161d5
 800f848:	3f2a01a0 	.word	0x3f2a01a0
 800f84c:	1110f8a6 	.word	0x1110f8a6
 800f850:	3f811111 	.word	0x3f811111

0800f854 <fabs>:
 800f854:	ec51 0b10 	vmov	r0, r1, d0
 800f858:	ee10 2a10 	vmov	r2, s0
 800f85c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f860:	ec43 2b10 	vmov	d0, r2, r3
 800f864:	4770      	bx	lr

0800f866 <finite>:
 800f866:	b082      	sub	sp, #8
 800f868:	ed8d 0b00 	vstr	d0, [sp]
 800f86c:	9801      	ldr	r0, [sp, #4]
 800f86e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f872:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f876:	0fc0      	lsrs	r0, r0, #31
 800f878:	b002      	add	sp, #8
 800f87a:	4770      	bx	lr
 800f87c:	0000      	movs	r0, r0
	...

0800f880 <floor>:
 800f880:	ec51 0b10 	vmov	r0, r1, d0
 800f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f888:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f88c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f890:	2e13      	cmp	r6, #19
 800f892:	ee10 5a10 	vmov	r5, s0
 800f896:	ee10 8a10 	vmov	r8, s0
 800f89a:	460c      	mov	r4, r1
 800f89c:	dc32      	bgt.n	800f904 <floor+0x84>
 800f89e:	2e00      	cmp	r6, #0
 800f8a0:	da14      	bge.n	800f8cc <floor+0x4c>
 800f8a2:	a333      	add	r3, pc, #204	; (adr r3, 800f970 <floor+0xf0>)
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	f7f0 fcf0 	bl	800028c <__adddf3>
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	f7f1 f932 	bl	8000b18 <__aeabi_dcmpgt>
 800f8b4:	b138      	cbz	r0, 800f8c6 <floor+0x46>
 800f8b6:	2c00      	cmp	r4, #0
 800f8b8:	da57      	bge.n	800f96a <floor+0xea>
 800f8ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f8be:	431d      	orrs	r5, r3
 800f8c0:	d001      	beq.n	800f8c6 <floor+0x46>
 800f8c2:	4c2d      	ldr	r4, [pc, #180]	; (800f978 <floor+0xf8>)
 800f8c4:	2500      	movs	r5, #0
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	4628      	mov	r0, r5
 800f8ca:	e025      	b.n	800f918 <floor+0x98>
 800f8cc:	4f2b      	ldr	r7, [pc, #172]	; (800f97c <floor+0xfc>)
 800f8ce:	4137      	asrs	r7, r6
 800f8d0:	ea01 0307 	and.w	r3, r1, r7
 800f8d4:	4303      	orrs	r3, r0
 800f8d6:	d01f      	beq.n	800f918 <floor+0x98>
 800f8d8:	a325      	add	r3, pc, #148	; (adr r3, 800f970 <floor+0xf0>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	f7f0 fcd5 	bl	800028c <__adddf3>
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f7f1 f917 	bl	8000b18 <__aeabi_dcmpgt>
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	d0eb      	beq.n	800f8c6 <floor+0x46>
 800f8ee:	2c00      	cmp	r4, #0
 800f8f0:	bfbe      	ittt	lt
 800f8f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f8f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800f8fa:	19a4      	addlt	r4, r4, r6
 800f8fc:	ea24 0407 	bic.w	r4, r4, r7
 800f900:	2500      	movs	r5, #0
 800f902:	e7e0      	b.n	800f8c6 <floor+0x46>
 800f904:	2e33      	cmp	r6, #51	; 0x33
 800f906:	dd0b      	ble.n	800f920 <floor+0xa0>
 800f908:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f90c:	d104      	bne.n	800f918 <floor+0x98>
 800f90e:	ee10 2a10 	vmov	r2, s0
 800f912:	460b      	mov	r3, r1
 800f914:	f7f0 fcba 	bl	800028c <__adddf3>
 800f918:	ec41 0b10 	vmov	d0, r0, r1
 800f91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f920:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f924:	f04f 33ff 	mov.w	r3, #4294967295
 800f928:	fa23 f707 	lsr.w	r7, r3, r7
 800f92c:	4207      	tst	r7, r0
 800f92e:	d0f3      	beq.n	800f918 <floor+0x98>
 800f930:	a30f      	add	r3, pc, #60	; (adr r3, 800f970 <floor+0xf0>)
 800f932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f936:	f7f0 fca9 	bl	800028c <__adddf3>
 800f93a:	2200      	movs	r2, #0
 800f93c:	2300      	movs	r3, #0
 800f93e:	f7f1 f8eb 	bl	8000b18 <__aeabi_dcmpgt>
 800f942:	2800      	cmp	r0, #0
 800f944:	d0bf      	beq.n	800f8c6 <floor+0x46>
 800f946:	2c00      	cmp	r4, #0
 800f948:	da02      	bge.n	800f950 <floor+0xd0>
 800f94a:	2e14      	cmp	r6, #20
 800f94c:	d103      	bne.n	800f956 <floor+0xd6>
 800f94e:	3401      	adds	r4, #1
 800f950:	ea25 0507 	bic.w	r5, r5, r7
 800f954:	e7b7      	b.n	800f8c6 <floor+0x46>
 800f956:	2301      	movs	r3, #1
 800f958:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f95c:	fa03 f606 	lsl.w	r6, r3, r6
 800f960:	4435      	add	r5, r6
 800f962:	4545      	cmp	r5, r8
 800f964:	bf38      	it	cc
 800f966:	18e4      	addcc	r4, r4, r3
 800f968:	e7f2      	b.n	800f950 <floor+0xd0>
 800f96a:	2500      	movs	r5, #0
 800f96c:	462c      	mov	r4, r5
 800f96e:	e7aa      	b.n	800f8c6 <floor+0x46>
 800f970:	8800759c 	.word	0x8800759c
 800f974:	7e37e43c 	.word	0x7e37e43c
 800f978:	bff00000 	.word	0xbff00000
 800f97c:	000fffff 	.word	0x000fffff

0800f980 <nan>:
 800f980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f988 <nan+0x8>
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	00000000 	.word	0x00000000
 800f98c:	7ff80000 	.word	0x7ff80000

0800f990 <rint>:
 800f990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f992:	ec51 0b10 	vmov	r0, r1, d0
 800f996:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f99a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f99e:	2e13      	cmp	r6, #19
 800f9a0:	ee10 4a10 	vmov	r4, s0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f9aa:	dc58      	bgt.n	800fa5e <rint+0xce>
 800f9ac:	2e00      	cmp	r6, #0
 800f9ae:	da2b      	bge.n	800fa08 <rint+0x78>
 800f9b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f9b4:	4302      	orrs	r2, r0
 800f9b6:	d023      	beq.n	800fa00 <rint+0x70>
 800f9b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f9bc:	4302      	orrs	r2, r0
 800f9be:	4254      	negs	r4, r2
 800f9c0:	4314      	orrs	r4, r2
 800f9c2:	0c4b      	lsrs	r3, r1, #17
 800f9c4:	0b24      	lsrs	r4, r4, #12
 800f9c6:	045b      	lsls	r3, r3, #17
 800f9c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f9cc:	ea44 0103 	orr.w	r1, r4, r3
 800f9d0:	4b32      	ldr	r3, [pc, #200]	; (800fa9c <rint+0x10c>)
 800f9d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f9d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f9da:	4602      	mov	r2, r0
 800f9dc:	460b      	mov	r3, r1
 800f9de:	4630      	mov	r0, r6
 800f9e0:	4639      	mov	r1, r7
 800f9e2:	f7f0 fc53 	bl	800028c <__adddf3>
 800f9e6:	e9cd 0100 	strd	r0, r1, [sp]
 800f9ea:	463b      	mov	r3, r7
 800f9ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9f0:	4632      	mov	r2, r6
 800f9f2:	f7f0 fc49 	bl	8000288 <__aeabi_dsub>
 800f9f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f9fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f9fe:	4639      	mov	r1, r7
 800fa00:	ec41 0b10 	vmov	d0, r0, r1
 800fa04:	b003      	add	sp, #12
 800fa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa08:	4a25      	ldr	r2, [pc, #148]	; (800faa0 <rint+0x110>)
 800fa0a:	4132      	asrs	r2, r6
 800fa0c:	ea01 0702 	and.w	r7, r1, r2
 800fa10:	4307      	orrs	r7, r0
 800fa12:	d0f5      	beq.n	800fa00 <rint+0x70>
 800fa14:	0851      	lsrs	r1, r2, #1
 800fa16:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800fa1a:	4314      	orrs	r4, r2
 800fa1c:	d00c      	beq.n	800fa38 <rint+0xa8>
 800fa1e:	ea23 0201 	bic.w	r2, r3, r1
 800fa22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fa26:	2e13      	cmp	r6, #19
 800fa28:	fa43 f606 	asr.w	r6, r3, r6
 800fa2c:	bf0c      	ite	eq
 800fa2e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fa32:	2400      	movne	r4, #0
 800fa34:	ea42 0306 	orr.w	r3, r2, r6
 800fa38:	4918      	ldr	r1, [pc, #96]	; (800fa9c <rint+0x10c>)
 800fa3a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fa3e:	4622      	mov	r2, r4
 800fa40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fa44:	4620      	mov	r0, r4
 800fa46:	4629      	mov	r1, r5
 800fa48:	f7f0 fc20 	bl	800028c <__adddf3>
 800fa4c:	e9cd 0100 	strd	r0, r1, [sp]
 800fa50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa54:	4622      	mov	r2, r4
 800fa56:	462b      	mov	r3, r5
 800fa58:	f7f0 fc16 	bl	8000288 <__aeabi_dsub>
 800fa5c:	e7d0      	b.n	800fa00 <rint+0x70>
 800fa5e:	2e33      	cmp	r6, #51	; 0x33
 800fa60:	dd07      	ble.n	800fa72 <rint+0xe2>
 800fa62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fa66:	d1cb      	bne.n	800fa00 <rint+0x70>
 800fa68:	ee10 2a10 	vmov	r2, s0
 800fa6c:	f7f0 fc0e 	bl	800028c <__adddf3>
 800fa70:	e7c6      	b.n	800fa00 <rint+0x70>
 800fa72:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fa76:	f04f 36ff 	mov.w	r6, #4294967295
 800fa7a:	40d6      	lsrs	r6, r2
 800fa7c:	4230      	tst	r0, r6
 800fa7e:	d0bf      	beq.n	800fa00 <rint+0x70>
 800fa80:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800fa84:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800fa88:	bf1f      	itttt	ne
 800fa8a:	ea24 0101 	bicne.w	r1, r4, r1
 800fa8e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fa92:	fa44 f202 	asrne.w	r2, r4, r2
 800fa96:	ea41 0402 	orrne.w	r4, r1, r2
 800fa9a:	e7cd      	b.n	800fa38 <rint+0xa8>
 800fa9c:	08029138 	.word	0x08029138
 800faa0:	000fffff 	.word	0x000fffff
 800faa4:	00000000 	.word	0x00000000

0800faa8 <scalbn>:
 800faa8:	b570      	push	{r4, r5, r6, lr}
 800faaa:	ec55 4b10 	vmov	r4, r5, d0
 800faae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fab2:	4606      	mov	r6, r0
 800fab4:	462b      	mov	r3, r5
 800fab6:	b99a      	cbnz	r2, 800fae0 <scalbn+0x38>
 800fab8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fabc:	4323      	orrs	r3, r4
 800fabe:	d036      	beq.n	800fb2e <scalbn+0x86>
 800fac0:	4b39      	ldr	r3, [pc, #228]	; (800fba8 <scalbn+0x100>)
 800fac2:	4629      	mov	r1, r5
 800fac4:	ee10 0a10 	vmov	r0, s0
 800fac8:	2200      	movs	r2, #0
 800faca:	f7f0 fd95 	bl	80005f8 <__aeabi_dmul>
 800face:	4b37      	ldr	r3, [pc, #220]	; (800fbac <scalbn+0x104>)
 800fad0:	429e      	cmp	r6, r3
 800fad2:	4604      	mov	r4, r0
 800fad4:	460d      	mov	r5, r1
 800fad6:	da10      	bge.n	800fafa <scalbn+0x52>
 800fad8:	a32b      	add	r3, pc, #172	; (adr r3, 800fb88 <scalbn+0xe0>)
 800fada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fade:	e03a      	b.n	800fb56 <scalbn+0xae>
 800fae0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fae4:	428a      	cmp	r2, r1
 800fae6:	d10c      	bne.n	800fb02 <scalbn+0x5a>
 800fae8:	ee10 2a10 	vmov	r2, s0
 800faec:	4620      	mov	r0, r4
 800faee:	4629      	mov	r1, r5
 800faf0:	f7f0 fbcc 	bl	800028c <__adddf3>
 800faf4:	4604      	mov	r4, r0
 800faf6:	460d      	mov	r5, r1
 800faf8:	e019      	b.n	800fb2e <scalbn+0x86>
 800fafa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fafe:	460b      	mov	r3, r1
 800fb00:	3a36      	subs	r2, #54	; 0x36
 800fb02:	4432      	add	r2, r6
 800fb04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fb08:	428a      	cmp	r2, r1
 800fb0a:	dd08      	ble.n	800fb1e <scalbn+0x76>
 800fb0c:	2d00      	cmp	r5, #0
 800fb0e:	a120      	add	r1, pc, #128	; (adr r1, 800fb90 <scalbn+0xe8>)
 800fb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb14:	da1c      	bge.n	800fb50 <scalbn+0xa8>
 800fb16:	a120      	add	r1, pc, #128	; (adr r1, 800fb98 <scalbn+0xf0>)
 800fb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb1c:	e018      	b.n	800fb50 <scalbn+0xa8>
 800fb1e:	2a00      	cmp	r2, #0
 800fb20:	dd08      	ble.n	800fb34 <scalbn+0x8c>
 800fb22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb2e:	ec45 4b10 	vmov	d0, r4, r5
 800fb32:	bd70      	pop	{r4, r5, r6, pc}
 800fb34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fb38:	da19      	bge.n	800fb6e <scalbn+0xc6>
 800fb3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fb3e:	429e      	cmp	r6, r3
 800fb40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fb44:	dd0a      	ble.n	800fb5c <scalbn+0xb4>
 800fb46:	a112      	add	r1, pc, #72	; (adr r1, 800fb90 <scalbn+0xe8>)
 800fb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1e2      	bne.n	800fb16 <scalbn+0x6e>
 800fb50:	a30f      	add	r3, pc, #60	; (adr r3, 800fb90 <scalbn+0xe8>)
 800fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb56:	f7f0 fd4f 	bl	80005f8 <__aeabi_dmul>
 800fb5a:	e7cb      	b.n	800faf4 <scalbn+0x4c>
 800fb5c:	a10a      	add	r1, pc, #40	; (adr r1, 800fb88 <scalbn+0xe0>)
 800fb5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d0b8      	beq.n	800fad8 <scalbn+0x30>
 800fb66:	a10e      	add	r1, pc, #56	; (adr r1, 800fba0 <scalbn+0xf8>)
 800fb68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb6c:	e7b4      	b.n	800fad8 <scalbn+0x30>
 800fb6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb72:	3236      	adds	r2, #54	; 0x36
 800fb74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	4b0c      	ldr	r3, [pc, #48]	; (800fbb0 <scalbn+0x108>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	e7e8      	b.n	800fb56 <scalbn+0xae>
 800fb84:	f3af 8000 	nop.w
 800fb88:	c2f8f359 	.word	0xc2f8f359
 800fb8c:	01a56e1f 	.word	0x01a56e1f
 800fb90:	8800759c 	.word	0x8800759c
 800fb94:	7e37e43c 	.word	0x7e37e43c
 800fb98:	8800759c 	.word	0x8800759c
 800fb9c:	fe37e43c 	.word	0xfe37e43c
 800fba0:	c2f8f359 	.word	0xc2f8f359
 800fba4:	81a56e1f 	.word	0x81a56e1f
 800fba8:	43500000 	.word	0x43500000
 800fbac:	ffff3cb0 	.word	0xffff3cb0
 800fbb0:	3c900000 	.word	0x3c900000

0800fbb4 <nanf>:
 800fbb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fbbc <nanf+0x8>
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop
 800fbbc:	7fc00000 	.word	0x7fc00000

0800fbc0 <abort>:
 800fbc0:	b508      	push	{r3, lr}
 800fbc2:	2006      	movs	r0, #6
 800fbc4:	f000 f968 	bl	800fe98 <raise>
 800fbc8:	2001      	movs	r0, #1
 800fbca:	f7f4 fb59 	bl	8004280 <_exit>
	...

0800fbd0 <calloc>:
 800fbd0:	4b02      	ldr	r3, [pc, #8]	; (800fbdc <calloc+0xc>)
 800fbd2:	460a      	mov	r2, r1
 800fbd4:	4601      	mov	r1, r0
 800fbd6:	6818      	ldr	r0, [r3, #0]
 800fbd8:	f000 b86c 	b.w	800fcb4 <_calloc_r>
 800fbdc:	2000001c 	.word	0x2000001c

0800fbe0 <__errno>:
 800fbe0:	4b01      	ldr	r3, [pc, #4]	; (800fbe8 <__errno+0x8>)
 800fbe2:	6818      	ldr	r0, [r3, #0]
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop
 800fbe8:	2000001c 	.word	0x2000001c

0800fbec <__libc_init_array>:
 800fbec:	b570      	push	{r4, r5, r6, lr}
 800fbee:	4d0d      	ldr	r5, [pc, #52]	; (800fc24 <__libc_init_array+0x38>)
 800fbf0:	4c0d      	ldr	r4, [pc, #52]	; (800fc28 <__libc_init_array+0x3c>)
 800fbf2:	1b64      	subs	r4, r4, r5
 800fbf4:	10a4      	asrs	r4, r4, #2
 800fbf6:	2600      	movs	r6, #0
 800fbf8:	42a6      	cmp	r6, r4
 800fbfa:	d109      	bne.n	800fc10 <__libc_init_array+0x24>
 800fbfc:	4d0b      	ldr	r5, [pc, #44]	; (800fc2c <__libc_init_array+0x40>)
 800fbfe:	4c0c      	ldr	r4, [pc, #48]	; (800fc30 <__libc_init_array+0x44>)
 800fc00:	f000 fcba 	bl	8010578 <_init>
 800fc04:	1b64      	subs	r4, r4, r5
 800fc06:	10a4      	asrs	r4, r4, #2
 800fc08:	2600      	movs	r6, #0
 800fc0a:	42a6      	cmp	r6, r4
 800fc0c:	d105      	bne.n	800fc1a <__libc_init_array+0x2e>
 800fc0e:	bd70      	pop	{r4, r5, r6, pc}
 800fc10:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc14:	4798      	blx	r3
 800fc16:	3601      	adds	r6, #1
 800fc18:	e7ee      	b.n	800fbf8 <__libc_init_array+0xc>
 800fc1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc1e:	4798      	blx	r3
 800fc20:	3601      	adds	r6, #1
 800fc22:	e7f2      	b.n	800fc0a <__libc_init_array+0x1e>
 800fc24:	08029184 	.word	0x08029184
 800fc28:	08029184 	.word	0x08029184
 800fc2c:	08029184 	.word	0x08029184
 800fc30:	08029188 	.word	0x08029188

0800fc34 <malloc>:
 800fc34:	4b02      	ldr	r3, [pc, #8]	; (800fc40 <malloc+0xc>)
 800fc36:	4601      	mov	r1, r0
 800fc38:	6818      	ldr	r0, [r3, #0]
 800fc3a:	f000 b89b 	b.w	800fd74 <_malloc_r>
 800fc3e:	bf00      	nop
 800fc40:	2000001c 	.word	0x2000001c

0800fc44 <free>:
 800fc44:	4b02      	ldr	r3, [pc, #8]	; (800fc50 <free+0xc>)
 800fc46:	4601      	mov	r1, r0
 800fc48:	6818      	ldr	r0, [r3, #0]
 800fc4a:	f000 b843 	b.w	800fcd4 <_free_r>
 800fc4e:	bf00      	nop
 800fc50:	2000001c 	.word	0x2000001c

0800fc54 <memcpy>:
 800fc54:	440a      	add	r2, r1
 800fc56:	4291      	cmp	r1, r2
 800fc58:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc5c:	d100      	bne.n	800fc60 <memcpy+0xc>
 800fc5e:	4770      	bx	lr
 800fc60:	b510      	push	{r4, lr}
 800fc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc6a:	4291      	cmp	r1, r2
 800fc6c:	d1f9      	bne.n	800fc62 <memcpy+0xe>
 800fc6e:	bd10      	pop	{r4, pc}

0800fc70 <memmove>:
 800fc70:	4288      	cmp	r0, r1
 800fc72:	b510      	push	{r4, lr}
 800fc74:	eb01 0402 	add.w	r4, r1, r2
 800fc78:	d902      	bls.n	800fc80 <memmove+0x10>
 800fc7a:	4284      	cmp	r4, r0
 800fc7c:	4623      	mov	r3, r4
 800fc7e:	d807      	bhi.n	800fc90 <memmove+0x20>
 800fc80:	1e43      	subs	r3, r0, #1
 800fc82:	42a1      	cmp	r1, r4
 800fc84:	d008      	beq.n	800fc98 <memmove+0x28>
 800fc86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc8e:	e7f8      	b.n	800fc82 <memmove+0x12>
 800fc90:	4402      	add	r2, r0
 800fc92:	4601      	mov	r1, r0
 800fc94:	428a      	cmp	r2, r1
 800fc96:	d100      	bne.n	800fc9a <memmove+0x2a>
 800fc98:	bd10      	pop	{r4, pc}
 800fc9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fca2:	e7f7      	b.n	800fc94 <memmove+0x24>

0800fca4 <memset>:
 800fca4:	4402      	add	r2, r0
 800fca6:	4603      	mov	r3, r0
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d100      	bne.n	800fcae <memset+0xa>
 800fcac:	4770      	bx	lr
 800fcae:	f803 1b01 	strb.w	r1, [r3], #1
 800fcb2:	e7f9      	b.n	800fca8 <memset+0x4>

0800fcb4 <_calloc_r>:
 800fcb4:	b513      	push	{r0, r1, r4, lr}
 800fcb6:	434a      	muls	r2, r1
 800fcb8:	4611      	mov	r1, r2
 800fcba:	9201      	str	r2, [sp, #4]
 800fcbc:	f000 f85a 	bl	800fd74 <_malloc_r>
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	b118      	cbz	r0, 800fccc <_calloc_r+0x18>
 800fcc4:	9a01      	ldr	r2, [sp, #4]
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	f7ff ffec 	bl	800fca4 <memset>
 800fccc:	4620      	mov	r0, r4
 800fcce:	b002      	add	sp, #8
 800fcd0:	bd10      	pop	{r4, pc}
	...

0800fcd4 <_free_r>:
 800fcd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcd6:	2900      	cmp	r1, #0
 800fcd8:	d048      	beq.n	800fd6c <_free_r+0x98>
 800fcda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcde:	9001      	str	r0, [sp, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f1a1 0404 	sub.w	r4, r1, #4
 800fce6:	bfb8      	it	lt
 800fce8:	18e4      	addlt	r4, r4, r3
 800fcea:	f000 f919 	bl	800ff20 <__malloc_lock>
 800fcee:	4a20      	ldr	r2, [pc, #128]	; (800fd70 <_free_r+0x9c>)
 800fcf0:	9801      	ldr	r0, [sp, #4]
 800fcf2:	6813      	ldr	r3, [r2, #0]
 800fcf4:	4615      	mov	r5, r2
 800fcf6:	b933      	cbnz	r3, 800fd06 <_free_r+0x32>
 800fcf8:	6063      	str	r3, [r4, #4]
 800fcfa:	6014      	str	r4, [r2, #0]
 800fcfc:	b003      	add	sp, #12
 800fcfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd02:	f000 b913 	b.w	800ff2c <__malloc_unlock>
 800fd06:	42a3      	cmp	r3, r4
 800fd08:	d90b      	bls.n	800fd22 <_free_r+0x4e>
 800fd0a:	6821      	ldr	r1, [r4, #0]
 800fd0c:	1862      	adds	r2, r4, r1
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	bf04      	itt	eq
 800fd12:	681a      	ldreq	r2, [r3, #0]
 800fd14:	685b      	ldreq	r3, [r3, #4]
 800fd16:	6063      	str	r3, [r4, #4]
 800fd18:	bf04      	itt	eq
 800fd1a:	1852      	addeq	r2, r2, r1
 800fd1c:	6022      	streq	r2, [r4, #0]
 800fd1e:	602c      	str	r4, [r5, #0]
 800fd20:	e7ec      	b.n	800fcfc <_free_r+0x28>
 800fd22:	461a      	mov	r2, r3
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	b10b      	cbz	r3, 800fd2c <_free_r+0x58>
 800fd28:	42a3      	cmp	r3, r4
 800fd2a:	d9fa      	bls.n	800fd22 <_free_r+0x4e>
 800fd2c:	6811      	ldr	r1, [r2, #0]
 800fd2e:	1855      	adds	r5, r2, r1
 800fd30:	42a5      	cmp	r5, r4
 800fd32:	d10b      	bne.n	800fd4c <_free_r+0x78>
 800fd34:	6824      	ldr	r4, [r4, #0]
 800fd36:	4421      	add	r1, r4
 800fd38:	1854      	adds	r4, r2, r1
 800fd3a:	42a3      	cmp	r3, r4
 800fd3c:	6011      	str	r1, [r2, #0]
 800fd3e:	d1dd      	bne.n	800fcfc <_free_r+0x28>
 800fd40:	681c      	ldr	r4, [r3, #0]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	6053      	str	r3, [r2, #4]
 800fd46:	4421      	add	r1, r4
 800fd48:	6011      	str	r1, [r2, #0]
 800fd4a:	e7d7      	b.n	800fcfc <_free_r+0x28>
 800fd4c:	d902      	bls.n	800fd54 <_free_r+0x80>
 800fd4e:	230c      	movs	r3, #12
 800fd50:	6003      	str	r3, [r0, #0]
 800fd52:	e7d3      	b.n	800fcfc <_free_r+0x28>
 800fd54:	6825      	ldr	r5, [r4, #0]
 800fd56:	1961      	adds	r1, r4, r5
 800fd58:	428b      	cmp	r3, r1
 800fd5a:	bf04      	itt	eq
 800fd5c:	6819      	ldreq	r1, [r3, #0]
 800fd5e:	685b      	ldreq	r3, [r3, #4]
 800fd60:	6063      	str	r3, [r4, #4]
 800fd62:	bf04      	itt	eq
 800fd64:	1949      	addeq	r1, r1, r5
 800fd66:	6021      	streq	r1, [r4, #0]
 800fd68:	6054      	str	r4, [r2, #4]
 800fd6a:	e7c7      	b.n	800fcfc <_free_r+0x28>
 800fd6c:	b003      	add	sp, #12
 800fd6e:	bd30      	pop	{r4, r5, pc}
 800fd70:	200003ac 	.word	0x200003ac

0800fd74 <_malloc_r>:
 800fd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd76:	1ccd      	adds	r5, r1, #3
 800fd78:	f025 0503 	bic.w	r5, r5, #3
 800fd7c:	3508      	adds	r5, #8
 800fd7e:	2d0c      	cmp	r5, #12
 800fd80:	bf38      	it	cc
 800fd82:	250c      	movcc	r5, #12
 800fd84:	2d00      	cmp	r5, #0
 800fd86:	4606      	mov	r6, r0
 800fd88:	db01      	blt.n	800fd8e <_malloc_r+0x1a>
 800fd8a:	42a9      	cmp	r1, r5
 800fd8c:	d903      	bls.n	800fd96 <_malloc_r+0x22>
 800fd8e:	230c      	movs	r3, #12
 800fd90:	6033      	str	r3, [r6, #0]
 800fd92:	2000      	movs	r0, #0
 800fd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd96:	f000 f8c3 	bl	800ff20 <__malloc_lock>
 800fd9a:	4921      	ldr	r1, [pc, #132]	; (800fe20 <_malloc_r+0xac>)
 800fd9c:	680a      	ldr	r2, [r1, #0]
 800fd9e:	4614      	mov	r4, r2
 800fda0:	b99c      	cbnz	r4, 800fdca <_malloc_r+0x56>
 800fda2:	4f20      	ldr	r7, [pc, #128]	; (800fe24 <_malloc_r+0xb0>)
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	b923      	cbnz	r3, 800fdb2 <_malloc_r+0x3e>
 800fda8:	4621      	mov	r1, r4
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f000 f83c 	bl	800fe28 <_sbrk_r>
 800fdb0:	6038      	str	r0, [r7, #0]
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f000 f837 	bl	800fe28 <_sbrk_r>
 800fdba:	1c43      	adds	r3, r0, #1
 800fdbc:	d123      	bne.n	800fe06 <_malloc_r+0x92>
 800fdbe:	230c      	movs	r3, #12
 800fdc0:	6033      	str	r3, [r6, #0]
 800fdc2:	4630      	mov	r0, r6
 800fdc4:	f000 f8b2 	bl	800ff2c <__malloc_unlock>
 800fdc8:	e7e3      	b.n	800fd92 <_malloc_r+0x1e>
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	1b5b      	subs	r3, r3, r5
 800fdce:	d417      	bmi.n	800fe00 <_malloc_r+0x8c>
 800fdd0:	2b0b      	cmp	r3, #11
 800fdd2:	d903      	bls.n	800fddc <_malloc_r+0x68>
 800fdd4:	6023      	str	r3, [r4, #0]
 800fdd6:	441c      	add	r4, r3
 800fdd8:	6025      	str	r5, [r4, #0]
 800fdda:	e004      	b.n	800fde6 <_malloc_r+0x72>
 800fddc:	6863      	ldr	r3, [r4, #4]
 800fdde:	42a2      	cmp	r2, r4
 800fde0:	bf0c      	ite	eq
 800fde2:	600b      	streq	r3, [r1, #0]
 800fde4:	6053      	strne	r3, [r2, #4]
 800fde6:	4630      	mov	r0, r6
 800fde8:	f000 f8a0 	bl	800ff2c <__malloc_unlock>
 800fdec:	f104 000b 	add.w	r0, r4, #11
 800fdf0:	1d23      	adds	r3, r4, #4
 800fdf2:	f020 0007 	bic.w	r0, r0, #7
 800fdf6:	1ac2      	subs	r2, r0, r3
 800fdf8:	d0cc      	beq.n	800fd94 <_malloc_r+0x20>
 800fdfa:	1a1b      	subs	r3, r3, r0
 800fdfc:	50a3      	str	r3, [r4, r2]
 800fdfe:	e7c9      	b.n	800fd94 <_malloc_r+0x20>
 800fe00:	4622      	mov	r2, r4
 800fe02:	6864      	ldr	r4, [r4, #4]
 800fe04:	e7cc      	b.n	800fda0 <_malloc_r+0x2c>
 800fe06:	1cc4      	adds	r4, r0, #3
 800fe08:	f024 0403 	bic.w	r4, r4, #3
 800fe0c:	42a0      	cmp	r0, r4
 800fe0e:	d0e3      	beq.n	800fdd8 <_malloc_r+0x64>
 800fe10:	1a21      	subs	r1, r4, r0
 800fe12:	4630      	mov	r0, r6
 800fe14:	f000 f808 	bl	800fe28 <_sbrk_r>
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d1dd      	bne.n	800fdd8 <_malloc_r+0x64>
 800fe1c:	e7cf      	b.n	800fdbe <_malloc_r+0x4a>
 800fe1e:	bf00      	nop
 800fe20:	200003ac 	.word	0x200003ac
 800fe24:	200003b0 	.word	0x200003b0

0800fe28 <_sbrk_r>:
 800fe28:	b538      	push	{r3, r4, r5, lr}
 800fe2a:	4d06      	ldr	r5, [pc, #24]	; (800fe44 <_sbrk_r+0x1c>)
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	4604      	mov	r4, r0
 800fe30:	4608      	mov	r0, r1
 800fe32:	602b      	str	r3, [r5, #0]
 800fe34:	f7f4 fa2e 	bl	8004294 <_sbrk>
 800fe38:	1c43      	adds	r3, r0, #1
 800fe3a:	d102      	bne.n	800fe42 <_sbrk_r+0x1a>
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	b103      	cbz	r3, 800fe42 <_sbrk_r+0x1a>
 800fe40:	6023      	str	r3, [r4, #0]
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
 800fe44:	20000448 	.word	0x20000448

0800fe48 <_raise_r>:
 800fe48:	291f      	cmp	r1, #31
 800fe4a:	b538      	push	{r3, r4, r5, lr}
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	460d      	mov	r5, r1
 800fe50:	d904      	bls.n	800fe5c <_raise_r+0x14>
 800fe52:	2316      	movs	r3, #22
 800fe54:	6003      	str	r3, [r0, #0]
 800fe56:	f04f 30ff 	mov.w	r0, #4294967295
 800fe5a:	bd38      	pop	{r3, r4, r5, pc}
 800fe5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe5e:	b112      	cbz	r2, 800fe66 <_raise_r+0x1e>
 800fe60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe64:	b94b      	cbnz	r3, 800fe7a <_raise_r+0x32>
 800fe66:	4620      	mov	r0, r4
 800fe68:	f000 f830 	bl	800fecc <_getpid_r>
 800fe6c:	462a      	mov	r2, r5
 800fe6e:	4601      	mov	r1, r0
 800fe70:	4620      	mov	r0, r4
 800fe72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe76:	f000 b817 	b.w	800fea8 <_kill_r>
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d00a      	beq.n	800fe94 <_raise_r+0x4c>
 800fe7e:	1c59      	adds	r1, r3, #1
 800fe80:	d103      	bne.n	800fe8a <_raise_r+0x42>
 800fe82:	2316      	movs	r3, #22
 800fe84:	6003      	str	r3, [r0, #0]
 800fe86:	2001      	movs	r0, #1
 800fe88:	e7e7      	b.n	800fe5a <_raise_r+0x12>
 800fe8a:	2400      	movs	r4, #0
 800fe8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe90:	4628      	mov	r0, r5
 800fe92:	4798      	blx	r3
 800fe94:	2000      	movs	r0, #0
 800fe96:	e7e0      	b.n	800fe5a <_raise_r+0x12>

0800fe98 <raise>:
 800fe98:	4b02      	ldr	r3, [pc, #8]	; (800fea4 <raise+0xc>)
 800fe9a:	4601      	mov	r1, r0
 800fe9c:	6818      	ldr	r0, [r3, #0]
 800fe9e:	f7ff bfd3 	b.w	800fe48 <_raise_r>
 800fea2:	bf00      	nop
 800fea4:	2000001c 	.word	0x2000001c

0800fea8 <_kill_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4d07      	ldr	r5, [pc, #28]	; (800fec8 <_kill_r+0x20>)
 800feac:	2300      	movs	r3, #0
 800feae:	4604      	mov	r4, r0
 800feb0:	4608      	mov	r0, r1
 800feb2:	4611      	mov	r1, r2
 800feb4:	602b      	str	r3, [r5, #0]
 800feb6:	f7f4 f9d3 	bl	8004260 <_kill>
 800feba:	1c43      	adds	r3, r0, #1
 800febc:	d102      	bne.n	800fec4 <_kill_r+0x1c>
 800febe:	682b      	ldr	r3, [r5, #0]
 800fec0:	b103      	cbz	r3, 800fec4 <_kill_r+0x1c>
 800fec2:	6023      	str	r3, [r4, #0]
 800fec4:	bd38      	pop	{r3, r4, r5, pc}
 800fec6:	bf00      	nop
 800fec8:	20000448 	.word	0x20000448

0800fecc <_getpid_r>:
 800fecc:	f7f4 b9c0 	b.w	8004250 <_getpid>

0800fed0 <siprintf>:
 800fed0:	b40e      	push	{r1, r2, r3}
 800fed2:	b500      	push	{lr}
 800fed4:	b09c      	sub	sp, #112	; 0x70
 800fed6:	ab1d      	add	r3, sp, #116	; 0x74
 800fed8:	9002      	str	r0, [sp, #8]
 800feda:	9006      	str	r0, [sp, #24]
 800fedc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fee0:	4809      	ldr	r0, [pc, #36]	; (800ff08 <siprintf+0x38>)
 800fee2:	9107      	str	r1, [sp, #28]
 800fee4:	9104      	str	r1, [sp, #16]
 800fee6:	4909      	ldr	r1, [pc, #36]	; (800ff0c <siprintf+0x3c>)
 800fee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800feec:	9105      	str	r1, [sp, #20]
 800feee:	6800      	ldr	r0, [r0, #0]
 800fef0:	9301      	str	r3, [sp, #4]
 800fef2:	a902      	add	r1, sp, #8
 800fef4:	f000 f87c 	bl	800fff0 <_svfiprintf_r>
 800fef8:	9b02      	ldr	r3, [sp, #8]
 800fefa:	2200      	movs	r2, #0
 800fefc:	701a      	strb	r2, [r3, #0]
 800fefe:	b01c      	add	sp, #112	; 0x70
 800ff00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff04:	b003      	add	sp, #12
 800ff06:	4770      	bx	lr
 800ff08:	2000001c 	.word	0x2000001c
 800ff0c:	ffff0208 	.word	0xffff0208

0800ff10 <strcpy>:
 800ff10:	4603      	mov	r3, r0
 800ff12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff16:	f803 2b01 	strb.w	r2, [r3], #1
 800ff1a:	2a00      	cmp	r2, #0
 800ff1c:	d1f9      	bne.n	800ff12 <strcpy+0x2>
 800ff1e:	4770      	bx	lr

0800ff20 <__malloc_lock>:
 800ff20:	4801      	ldr	r0, [pc, #4]	; (800ff28 <__malloc_lock+0x8>)
 800ff22:	f000 baf9 	b.w	8010518 <__retarget_lock_acquire_recursive>
 800ff26:	bf00      	nop
 800ff28:	20000450 	.word	0x20000450

0800ff2c <__malloc_unlock>:
 800ff2c:	4801      	ldr	r0, [pc, #4]	; (800ff34 <__malloc_unlock+0x8>)
 800ff2e:	f000 baf4 	b.w	801051a <__retarget_lock_release_recursive>
 800ff32:	bf00      	nop
 800ff34:	20000450 	.word	0x20000450

0800ff38 <__ssputs_r>:
 800ff38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff3c:	688e      	ldr	r6, [r1, #8]
 800ff3e:	429e      	cmp	r6, r3
 800ff40:	4682      	mov	sl, r0
 800ff42:	460c      	mov	r4, r1
 800ff44:	4690      	mov	r8, r2
 800ff46:	461f      	mov	r7, r3
 800ff48:	d838      	bhi.n	800ffbc <__ssputs_r+0x84>
 800ff4a:	898a      	ldrh	r2, [r1, #12]
 800ff4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff50:	d032      	beq.n	800ffb8 <__ssputs_r+0x80>
 800ff52:	6825      	ldr	r5, [r4, #0]
 800ff54:	6909      	ldr	r1, [r1, #16]
 800ff56:	eba5 0901 	sub.w	r9, r5, r1
 800ff5a:	6965      	ldr	r5, [r4, #20]
 800ff5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff64:	3301      	adds	r3, #1
 800ff66:	444b      	add	r3, r9
 800ff68:	106d      	asrs	r5, r5, #1
 800ff6a:	429d      	cmp	r5, r3
 800ff6c:	bf38      	it	cc
 800ff6e:	461d      	movcc	r5, r3
 800ff70:	0553      	lsls	r3, r2, #21
 800ff72:	d531      	bpl.n	800ffd8 <__ssputs_r+0xa0>
 800ff74:	4629      	mov	r1, r5
 800ff76:	f7ff fefd 	bl	800fd74 <_malloc_r>
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	b950      	cbnz	r0, 800ff94 <__ssputs_r+0x5c>
 800ff7e:	230c      	movs	r3, #12
 800ff80:	f8ca 3000 	str.w	r3, [sl]
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff8a:	81a3      	strh	r3, [r4, #12]
 800ff8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff94:	6921      	ldr	r1, [r4, #16]
 800ff96:	464a      	mov	r2, r9
 800ff98:	f7ff fe5c 	bl	800fc54 <memcpy>
 800ff9c:	89a3      	ldrh	r3, [r4, #12]
 800ff9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ffa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffa6:	81a3      	strh	r3, [r4, #12]
 800ffa8:	6126      	str	r6, [r4, #16]
 800ffaa:	6165      	str	r5, [r4, #20]
 800ffac:	444e      	add	r6, r9
 800ffae:	eba5 0509 	sub.w	r5, r5, r9
 800ffb2:	6026      	str	r6, [r4, #0]
 800ffb4:	60a5      	str	r5, [r4, #8]
 800ffb6:	463e      	mov	r6, r7
 800ffb8:	42be      	cmp	r6, r7
 800ffba:	d900      	bls.n	800ffbe <__ssputs_r+0x86>
 800ffbc:	463e      	mov	r6, r7
 800ffbe:	4632      	mov	r2, r6
 800ffc0:	6820      	ldr	r0, [r4, #0]
 800ffc2:	4641      	mov	r1, r8
 800ffc4:	f7ff fe54 	bl	800fc70 <memmove>
 800ffc8:	68a3      	ldr	r3, [r4, #8]
 800ffca:	6822      	ldr	r2, [r4, #0]
 800ffcc:	1b9b      	subs	r3, r3, r6
 800ffce:	4432      	add	r2, r6
 800ffd0:	60a3      	str	r3, [r4, #8]
 800ffd2:	6022      	str	r2, [r4, #0]
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	e7db      	b.n	800ff90 <__ssputs_r+0x58>
 800ffd8:	462a      	mov	r2, r5
 800ffda:	f000 fa9f 	bl	801051c <_realloc_r>
 800ffde:	4606      	mov	r6, r0
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d1e1      	bne.n	800ffa8 <__ssputs_r+0x70>
 800ffe4:	6921      	ldr	r1, [r4, #16]
 800ffe6:	4650      	mov	r0, sl
 800ffe8:	f7ff fe74 	bl	800fcd4 <_free_r>
 800ffec:	e7c7      	b.n	800ff7e <__ssputs_r+0x46>
	...

0800fff0 <_svfiprintf_r>:
 800fff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff4:	4698      	mov	r8, r3
 800fff6:	898b      	ldrh	r3, [r1, #12]
 800fff8:	061b      	lsls	r3, r3, #24
 800fffa:	b09d      	sub	sp, #116	; 0x74
 800fffc:	4607      	mov	r7, r0
 800fffe:	460d      	mov	r5, r1
 8010000:	4614      	mov	r4, r2
 8010002:	d50e      	bpl.n	8010022 <_svfiprintf_r+0x32>
 8010004:	690b      	ldr	r3, [r1, #16]
 8010006:	b963      	cbnz	r3, 8010022 <_svfiprintf_r+0x32>
 8010008:	2140      	movs	r1, #64	; 0x40
 801000a:	f7ff feb3 	bl	800fd74 <_malloc_r>
 801000e:	6028      	str	r0, [r5, #0]
 8010010:	6128      	str	r0, [r5, #16]
 8010012:	b920      	cbnz	r0, 801001e <_svfiprintf_r+0x2e>
 8010014:	230c      	movs	r3, #12
 8010016:	603b      	str	r3, [r7, #0]
 8010018:	f04f 30ff 	mov.w	r0, #4294967295
 801001c:	e0d1      	b.n	80101c2 <_svfiprintf_r+0x1d2>
 801001e:	2340      	movs	r3, #64	; 0x40
 8010020:	616b      	str	r3, [r5, #20]
 8010022:	2300      	movs	r3, #0
 8010024:	9309      	str	r3, [sp, #36]	; 0x24
 8010026:	2320      	movs	r3, #32
 8010028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801002c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010030:	2330      	movs	r3, #48	; 0x30
 8010032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80101dc <_svfiprintf_r+0x1ec>
 8010036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801003a:	f04f 0901 	mov.w	r9, #1
 801003e:	4623      	mov	r3, r4
 8010040:	469a      	mov	sl, r3
 8010042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010046:	b10a      	cbz	r2, 801004c <_svfiprintf_r+0x5c>
 8010048:	2a25      	cmp	r2, #37	; 0x25
 801004a:	d1f9      	bne.n	8010040 <_svfiprintf_r+0x50>
 801004c:	ebba 0b04 	subs.w	fp, sl, r4
 8010050:	d00b      	beq.n	801006a <_svfiprintf_r+0x7a>
 8010052:	465b      	mov	r3, fp
 8010054:	4622      	mov	r2, r4
 8010056:	4629      	mov	r1, r5
 8010058:	4638      	mov	r0, r7
 801005a:	f7ff ff6d 	bl	800ff38 <__ssputs_r>
 801005e:	3001      	adds	r0, #1
 8010060:	f000 80aa 	beq.w	80101b8 <_svfiprintf_r+0x1c8>
 8010064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010066:	445a      	add	r2, fp
 8010068:	9209      	str	r2, [sp, #36]	; 0x24
 801006a:	f89a 3000 	ldrb.w	r3, [sl]
 801006e:	2b00      	cmp	r3, #0
 8010070:	f000 80a2 	beq.w	80101b8 <_svfiprintf_r+0x1c8>
 8010074:	2300      	movs	r3, #0
 8010076:	f04f 32ff 	mov.w	r2, #4294967295
 801007a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801007e:	f10a 0a01 	add.w	sl, sl, #1
 8010082:	9304      	str	r3, [sp, #16]
 8010084:	9307      	str	r3, [sp, #28]
 8010086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801008a:	931a      	str	r3, [sp, #104]	; 0x68
 801008c:	4654      	mov	r4, sl
 801008e:	2205      	movs	r2, #5
 8010090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010094:	4851      	ldr	r0, [pc, #324]	; (80101dc <_svfiprintf_r+0x1ec>)
 8010096:	f7f0 f8a3 	bl	80001e0 <memchr>
 801009a:	9a04      	ldr	r2, [sp, #16]
 801009c:	b9d8      	cbnz	r0, 80100d6 <_svfiprintf_r+0xe6>
 801009e:	06d0      	lsls	r0, r2, #27
 80100a0:	bf44      	itt	mi
 80100a2:	2320      	movmi	r3, #32
 80100a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100a8:	0711      	lsls	r1, r2, #28
 80100aa:	bf44      	itt	mi
 80100ac:	232b      	movmi	r3, #43	; 0x2b
 80100ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100b2:	f89a 3000 	ldrb.w	r3, [sl]
 80100b6:	2b2a      	cmp	r3, #42	; 0x2a
 80100b8:	d015      	beq.n	80100e6 <_svfiprintf_r+0xf6>
 80100ba:	9a07      	ldr	r2, [sp, #28]
 80100bc:	4654      	mov	r4, sl
 80100be:	2000      	movs	r0, #0
 80100c0:	f04f 0c0a 	mov.w	ip, #10
 80100c4:	4621      	mov	r1, r4
 80100c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100ca:	3b30      	subs	r3, #48	; 0x30
 80100cc:	2b09      	cmp	r3, #9
 80100ce:	d94e      	bls.n	801016e <_svfiprintf_r+0x17e>
 80100d0:	b1b0      	cbz	r0, 8010100 <_svfiprintf_r+0x110>
 80100d2:	9207      	str	r2, [sp, #28]
 80100d4:	e014      	b.n	8010100 <_svfiprintf_r+0x110>
 80100d6:	eba0 0308 	sub.w	r3, r0, r8
 80100da:	fa09 f303 	lsl.w	r3, r9, r3
 80100de:	4313      	orrs	r3, r2
 80100e0:	9304      	str	r3, [sp, #16]
 80100e2:	46a2      	mov	sl, r4
 80100e4:	e7d2      	b.n	801008c <_svfiprintf_r+0x9c>
 80100e6:	9b03      	ldr	r3, [sp, #12]
 80100e8:	1d19      	adds	r1, r3, #4
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	9103      	str	r1, [sp, #12]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	bfbb      	ittet	lt
 80100f2:	425b      	neglt	r3, r3
 80100f4:	f042 0202 	orrlt.w	r2, r2, #2
 80100f8:	9307      	strge	r3, [sp, #28]
 80100fa:	9307      	strlt	r3, [sp, #28]
 80100fc:	bfb8      	it	lt
 80100fe:	9204      	strlt	r2, [sp, #16]
 8010100:	7823      	ldrb	r3, [r4, #0]
 8010102:	2b2e      	cmp	r3, #46	; 0x2e
 8010104:	d10c      	bne.n	8010120 <_svfiprintf_r+0x130>
 8010106:	7863      	ldrb	r3, [r4, #1]
 8010108:	2b2a      	cmp	r3, #42	; 0x2a
 801010a:	d135      	bne.n	8010178 <_svfiprintf_r+0x188>
 801010c:	9b03      	ldr	r3, [sp, #12]
 801010e:	1d1a      	adds	r2, r3, #4
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	9203      	str	r2, [sp, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	bfb8      	it	lt
 8010118:	f04f 33ff 	movlt.w	r3, #4294967295
 801011c:	3402      	adds	r4, #2
 801011e:	9305      	str	r3, [sp, #20]
 8010120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80101ec <_svfiprintf_r+0x1fc>
 8010124:	7821      	ldrb	r1, [r4, #0]
 8010126:	2203      	movs	r2, #3
 8010128:	4650      	mov	r0, sl
 801012a:	f7f0 f859 	bl	80001e0 <memchr>
 801012e:	b140      	cbz	r0, 8010142 <_svfiprintf_r+0x152>
 8010130:	2340      	movs	r3, #64	; 0x40
 8010132:	eba0 000a 	sub.w	r0, r0, sl
 8010136:	fa03 f000 	lsl.w	r0, r3, r0
 801013a:	9b04      	ldr	r3, [sp, #16]
 801013c:	4303      	orrs	r3, r0
 801013e:	3401      	adds	r4, #1
 8010140:	9304      	str	r3, [sp, #16]
 8010142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010146:	4826      	ldr	r0, [pc, #152]	; (80101e0 <_svfiprintf_r+0x1f0>)
 8010148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801014c:	2206      	movs	r2, #6
 801014e:	f7f0 f847 	bl	80001e0 <memchr>
 8010152:	2800      	cmp	r0, #0
 8010154:	d038      	beq.n	80101c8 <_svfiprintf_r+0x1d8>
 8010156:	4b23      	ldr	r3, [pc, #140]	; (80101e4 <_svfiprintf_r+0x1f4>)
 8010158:	bb1b      	cbnz	r3, 80101a2 <_svfiprintf_r+0x1b2>
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	3307      	adds	r3, #7
 801015e:	f023 0307 	bic.w	r3, r3, #7
 8010162:	3308      	adds	r3, #8
 8010164:	9303      	str	r3, [sp, #12]
 8010166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010168:	4433      	add	r3, r6
 801016a:	9309      	str	r3, [sp, #36]	; 0x24
 801016c:	e767      	b.n	801003e <_svfiprintf_r+0x4e>
 801016e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010172:	460c      	mov	r4, r1
 8010174:	2001      	movs	r0, #1
 8010176:	e7a5      	b.n	80100c4 <_svfiprintf_r+0xd4>
 8010178:	2300      	movs	r3, #0
 801017a:	3401      	adds	r4, #1
 801017c:	9305      	str	r3, [sp, #20]
 801017e:	4619      	mov	r1, r3
 8010180:	f04f 0c0a 	mov.w	ip, #10
 8010184:	4620      	mov	r0, r4
 8010186:	f810 2b01 	ldrb.w	r2, [r0], #1
 801018a:	3a30      	subs	r2, #48	; 0x30
 801018c:	2a09      	cmp	r2, #9
 801018e:	d903      	bls.n	8010198 <_svfiprintf_r+0x1a8>
 8010190:	2b00      	cmp	r3, #0
 8010192:	d0c5      	beq.n	8010120 <_svfiprintf_r+0x130>
 8010194:	9105      	str	r1, [sp, #20]
 8010196:	e7c3      	b.n	8010120 <_svfiprintf_r+0x130>
 8010198:	fb0c 2101 	mla	r1, ip, r1, r2
 801019c:	4604      	mov	r4, r0
 801019e:	2301      	movs	r3, #1
 80101a0:	e7f0      	b.n	8010184 <_svfiprintf_r+0x194>
 80101a2:	ab03      	add	r3, sp, #12
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	462a      	mov	r2, r5
 80101a8:	4b0f      	ldr	r3, [pc, #60]	; (80101e8 <_svfiprintf_r+0x1f8>)
 80101aa:	a904      	add	r1, sp, #16
 80101ac:	4638      	mov	r0, r7
 80101ae:	f3af 8000 	nop.w
 80101b2:	1c42      	adds	r2, r0, #1
 80101b4:	4606      	mov	r6, r0
 80101b6:	d1d6      	bne.n	8010166 <_svfiprintf_r+0x176>
 80101b8:	89ab      	ldrh	r3, [r5, #12]
 80101ba:	065b      	lsls	r3, r3, #25
 80101bc:	f53f af2c 	bmi.w	8010018 <_svfiprintf_r+0x28>
 80101c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101c2:	b01d      	add	sp, #116	; 0x74
 80101c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c8:	ab03      	add	r3, sp, #12
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	462a      	mov	r2, r5
 80101ce:	4b06      	ldr	r3, [pc, #24]	; (80101e8 <_svfiprintf_r+0x1f8>)
 80101d0:	a904      	add	r1, sp, #16
 80101d2:	4638      	mov	r0, r7
 80101d4:	f000 f87a 	bl	80102cc <_printf_i>
 80101d8:	e7eb      	b.n	80101b2 <_svfiprintf_r+0x1c2>
 80101da:	bf00      	nop
 80101dc:	08029148 	.word	0x08029148
 80101e0:	08029152 	.word	0x08029152
 80101e4:	00000000 	.word	0x00000000
 80101e8:	0800ff39 	.word	0x0800ff39
 80101ec:	0802914e 	.word	0x0802914e

080101f0 <_printf_common>:
 80101f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f4:	4616      	mov	r6, r2
 80101f6:	4699      	mov	r9, r3
 80101f8:	688a      	ldr	r2, [r1, #8]
 80101fa:	690b      	ldr	r3, [r1, #16]
 80101fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010200:	4293      	cmp	r3, r2
 8010202:	bfb8      	it	lt
 8010204:	4613      	movlt	r3, r2
 8010206:	6033      	str	r3, [r6, #0]
 8010208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801020c:	4607      	mov	r7, r0
 801020e:	460c      	mov	r4, r1
 8010210:	b10a      	cbz	r2, 8010216 <_printf_common+0x26>
 8010212:	3301      	adds	r3, #1
 8010214:	6033      	str	r3, [r6, #0]
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	0699      	lsls	r1, r3, #26
 801021a:	bf42      	ittt	mi
 801021c:	6833      	ldrmi	r3, [r6, #0]
 801021e:	3302      	addmi	r3, #2
 8010220:	6033      	strmi	r3, [r6, #0]
 8010222:	6825      	ldr	r5, [r4, #0]
 8010224:	f015 0506 	ands.w	r5, r5, #6
 8010228:	d106      	bne.n	8010238 <_printf_common+0x48>
 801022a:	f104 0a19 	add.w	sl, r4, #25
 801022e:	68e3      	ldr	r3, [r4, #12]
 8010230:	6832      	ldr	r2, [r6, #0]
 8010232:	1a9b      	subs	r3, r3, r2
 8010234:	42ab      	cmp	r3, r5
 8010236:	dc26      	bgt.n	8010286 <_printf_common+0x96>
 8010238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801023c:	1e13      	subs	r3, r2, #0
 801023e:	6822      	ldr	r2, [r4, #0]
 8010240:	bf18      	it	ne
 8010242:	2301      	movne	r3, #1
 8010244:	0692      	lsls	r2, r2, #26
 8010246:	d42b      	bmi.n	80102a0 <_printf_common+0xb0>
 8010248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801024c:	4649      	mov	r1, r9
 801024e:	4638      	mov	r0, r7
 8010250:	47c0      	blx	r8
 8010252:	3001      	adds	r0, #1
 8010254:	d01e      	beq.n	8010294 <_printf_common+0xa4>
 8010256:	6823      	ldr	r3, [r4, #0]
 8010258:	68e5      	ldr	r5, [r4, #12]
 801025a:	6832      	ldr	r2, [r6, #0]
 801025c:	f003 0306 	and.w	r3, r3, #6
 8010260:	2b04      	cmp	r3, #4
 8010262:	bf08      	it	eq
 8010264:	1aad      	subeq	r5, r5, r2
 8010266:	68a3      	ldr	r3, [r4, #8]
 8010268:	6922      	ldr	r2, [r4, #16]
 801026a:	bf0c      	ite	eq
 801026c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010270:	2500      	movne	r5, #0
 8010272:	4293      	cmp	r3, r2
 8010274:	bfc4      	itt	gt
 8010276:	1a9b      	subgt	r3, r3, r2
 8010278:	18ed      	addgt	r5, r5, r3
 801027a:	2600      	movs	r6, #0
 801027c:	341a      	adds	r4, #26
 801027e:	42b5      	cmp	r5, r6
 8010280:	d11a      	bne.n	80102b8 <_printf_common+0xc8>
 8010282:	2000      	movs	r0, #0
 8010284:	e008      	b.n	8010298 <_printf_common+0xa8>
 8010286:	2301      	movs	r3, #1
 8010288:	4652      	mov	r2, sl
 801028a:	4649      	mov	r1, r9
 801028c:	4638      	mov	r0, r7
 801028e:	47c0      	blx	r8
 8010290:	3001      	adds	r0, #1
 8010292:	d103      	bne.n	801029c <_printf_common+0xac>
 8010294:	f04f 30ff 	mov.w	r0, #4294967295
 8010298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029c:	3501      	adds	r5, #1
 801029e:	e7c6      	b.n	801022e <_printf_common+0x3e>
 80102a0:	18e1      	adds	r1, r4, r3
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	2030      	movs	r0, #48	; 0x30
 80102a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102aa:	4422      	add	r2, r4
 80102ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102b4:	3302      	adds	r3, #2
 80102b6:	e7c7      	b.n	8010248 <_printf_common+0x58>
 80102b8:	2301      	movs	r3, #1
 80102ba:	4622      	mov	r2, r4
 80102bc:	4649      	mov	r1, r9
 80102be:	4638      	mov	r0, r7
 80102c0:	47c0      	blx	r8
 80102c2:	3001      	adds	r0, #1
 80102c4:	d0e6      	beq.n	8010294 <_printf_common+0xa4>
 80102c6:	3601      	adds	r6, #1
 80102c8:	e7d9      	b.n	801027e <_printf_common+0x8e>
	...

080102cc <_printf_i>:
 80102cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102d0:	460c      	mov	r4, r1
 80102d2:	4691      	mov	r9, r2
 80102d4:	7e27      	ldrb	r7, [r4, #24]
 80102d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80102d8:	2f78      	cmp	r7, #120	; 0x78
 80102da:	4680      	mov	r8, r0
 80102dc:	469a      	mov	sl, r3
 80102de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102e2:	d807      	bhi.n	80102f4 <_printf_i+0x28>
 80102e4:	2f62      	cmp	r7, #98	; 0x62
 80102e6:	d80a      	bhi.n	80102fe <_printf_i+0x32>
 80102e8:	2f00      	cmp	r7, #0
 80102ea:	f000 80d8 	beq.w	801049e <_printf_i+0x1d2>
 80102ee:	2f58      	cmp	r7, #88	; 0x58
 80102f0:	f000 80a3 	beq.w	801043a <_printf_i+0x16e>
 80102f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80102f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102fc:	e03a      	b.n	8010374 <_printf_i+0xa8>
 80102fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010302:	2b15      	cmp	r3, #21
 8010304:	d8f6      	bhi.n	80102f4 <_printf_i+0x28>
 8010306:	a001      	add	r0, pc, #4	; (adr r0, 801030c <_printf_i+0x40>)
 8010308:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801030c:	08010365 	.word	0x08010365
 8010310:	08010379 	.word	0x08010379
 8010314:	080102f5 	.word	0x080102f5
 8010318:	080102f5 	.word	0x080102f5
 801031c:	080102f5 	.word	0x080102f5
 8010320:	080102f5 	.word	0x080102f5
 8010324:	08010379 	.word	0x08010379
 8010328:	080102f5 	.word	0x080102f5
 801032c:	080102f5 	.word	0x080102f5
 8010330:	080102f5 	.word	0x080102f5
 8010334:	080102f5 	.word	0x080102f5
 8010338:	08010485 	.word	0x08010485
 801033c:	080103a9 	.word	0x080103a9
 8010340:	08010467 	.word	0x08010467
 8010344:	080102f5 	.word	0x080102f5
 8010348:	080102f5 	.word	0x080102f5
 801034c:	080104a7 	.word	0x080104a7
 8010350:	080102f5 	.word	0x080102f5
 8010354:	080103a9 	.word	0x080103a9
 8010358:	080102f5 	.word	0x080102f5
 801035c:	080102f5 	.word	0x080102f5
 8010360:	0801046f 	.word	0x0801046f
 8010364:	680b      	ldr	r3, [r1, #0]
 8010366:	1d1a      	adds	r2, r3, #4
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	600a      	str	r2, [r1, #0]
 801036c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010374:	2301      	movs	r3, #1
 8010376:	e0a3      	b.n	80104c0 <_printf_i+0x1f4>
 8010378:	6825      	ldr	r5, [r4, #0]
 801037a:	6808      	ldr	r0, [r1, #0]
 801037c:	062e      	lsls	r6, r5, #24
 801037e:	f100 0304 	add.w	r3, r0, #4
 8010382:	d50a      	bpl.n	801039a <_printf_i+0xce>
 8010384:	6805      	ldr	r5, [r0, #0]
 8010386:	600b      	str	r3, [r1, #0]
 8010388:	2d00      	cmp	r5, #0
 801038a:	da03      	bge.n	8010394 <_printf_i+0xc8>
 801038c:	232d      	movs	r3, #45	; 0x2d
 801038e:	426d      	negs	r5, r5
 8010390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010394:	485e      	ldr	r0, [pc, #376]	; (8010510 <_printf_i+0x244>)
 8010396:	230a      	movs	r3, #10
 8010398:	e019      	b.n	80103ce <_printf_i+0x102>
 801039a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801039e:	6805      	ldr	r5, [r0, #0]
 80103a0:	600b      	str	r3, [r1, #0]
 80103a2:	bf18      	it	ne
 80103a4:	b22d      	sxthne	r5, r5
 80103a6:	e7ef      	b.n	8010388 <_printf_i+0xbc>
 80103a8:	680b      	ldr	r3, [r1, #0]
 80103aa:	6825      	ldr	r5, [r4, #0]
 80103ac:	1d18      	adds	r0, r3, #4
 80103ae:	6008      	str	r0, [r1, #0]
 80103b0:	0628      	lsls	r0, r5, #24
 80103b2:	d501      	bpl.n	80103b8 <_printf_i+0xec>
 80103b4:	681d      	ldr	r5, [r3, #0]
 80103b6:	e002      	b.n	80103be <_printf_i+0xf2>
 80103b8:	0669      	lsls	r1, r5, #25
 80103ba:	d5fb      	bpl.n	80103b4 <_printf_i+0xe8>
 80103bc:	881d      	ldrh	r5, [r3, #0]
 80103be:	4854      	ldr	r0, [pc, #336]	; (8010510 <_printf_i+0x244>)
 80103c0:	2f6f      	cmp	r7, #111	; 0x6f
 80103c2:	bf0c      	ite	eq
 80103c4:	2308      	moveq	r3, #8
 80103c6:	230a      	movne	r3, #10
 80103c8:	2100      	movs	r1, #0
 80103ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103ce:	6866      	ldr	r6, [r4, #4]
 80103d0:	60a6      	str	r6, [r4, #8]
 80103d2:	2e00      	cmp	r6, #0
 80103d4:	bfa2      	ittt	ge
 80103d6:	6821      	ldrge	r1, [r4, #0]
 80103d8:	f021 0104 	bicge.w	r1, r1, #4
 80103dc:	6021      	strge	r1, [r4, #0]
 80103de:	b90d      	cbnz	r5, 80103e4 <_printf_i+0x118>
 80103e0:	2e00      	cmp	r6, #0
 80103e2:	d04d      	beq.n	8010480 <_printf_i+0x1b4>
 80103e4:	4616      	mov	r6, r2
 80103e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80103ea:	fb03 5711 	mls	r7, r3, r1, r5
 80103ee:	5dc7      	ldrb	r7, [r0, r7]
 80103f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103f4:	462f      	mov	r7, r5
 80103f6:	42bb      	cmp	r3, r7
 80103f8:	460d      	mov	r5, r1
 80103fa:	d9f4      	bls.n	80103e6 <_printf_i+0x11a>
 80103fc:	2b08      	cmp	r3, #8
 80103fe:	d10b      	bne.n	8010418 <_printf_i+0x14c>
 8010400:	6823      	ldr	r3, [r4, #0]
 8010402:	07df      	lsls	r7, r3, #31
 8010404:	d508      	bpl.n	8010418 <_printf_i+0x14c>
 8010406:	6923      	ldr	r3, [r4, #16]
 8010408:	6861      	ldr	r1, [r4, #4]
 801040a:	4299      	cmp	r1, r3
 801040c:	bfde      	ittt	le
 801040e:	2330      	movle	r3, #48	; 0x30
 8010410:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010414:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010418:	1b92      	subs	r2, r2, r6
 801041a:	6122      	str	r2, [r4, #16]
 801041c:	f8cd a000 	str.w	sl, [sp]
 8010420:	464b      	mov	r3, r9
 8010422:	aa03      	add	r2, sp, #12
 8010424:	4621      	mov	r1, r4
 8010426:	4640      	mov	r0, r8
 8010428:	f7ff fee2 	bl	80101f0 <_printf_common>
 801042c:	3001      	adds	r0, #1
 801042e:	d14c      	bne.n	80104ca <_printf_i+0x1fe>
 8010430:	f04f 30ff 	mov.w	r0, #4294967295
 8010434:	b004      	add	sp, #16
 8010436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801043a:	4835      	ldr	r0, [pc, #212]	; (8010510 <_printf_i+0x244>)
 801043c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010440:	6823      	ldr	r3, [r4, #0]
 8010442:	680e      	ldr	r6, [r1, #0]
 8010444:	061f      	lsls	r7, r3, #24
 8010446:	f856 5b04 	ldr.w	r5, [r6], #4
 801044a:	600e      	str	r6, [r1, #0]
 801044c:	d514      	bpl.n	8010478 <_printf_i+0x1ac>
 801044e:	07d9      	lsls	r1, r3, #31
 8010450:	bf44      	itt	mi
 8010452:	f043 0320 	orrmi.w	r3, r3, #32
 8010456:	6023      	strmi	r3, [r4, #0]
 8010458:	b91d      	cbnz	r5, 8010462 <_printf_i+0x196>
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	f023 0320 	bic.w	r3, r3, #32
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	2310      	movs	r3, #16
 8010464:	e7b0      	b.n	80103c8 <_printf_i+0xfc>
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	f043 0320 	orr.w	r3, r3, #32
 801046c:	6023      	str	r3, [r4, #0]
 801046e:	2378      	movs	r3, #120	; 0x78
 8010470:	4828      	ldr	r0, [pc, #160]	; (8010514 <_printf_i+0x248>)
 8010472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010476:	e7e3      	b.n	8010440 <_printf_i+0x174>
 8010478:	065e      	lsls	r6, r3, #25
 801047a:	bf48      	it	mi
 801047c:	b2ad      	uxthmi	r5, r5
 801047e:	e7e6      	b.n	801044e <_printf_i+0x182>
 8010480:	4616      	mov	r6, r2
 8010482:	e7bb      	b.n	80103fc <_printf_i+0x130>
 8010484:	680b      	ldr	r3, [r1, #0]
 8010486:	6826      	ldr	r6, [r4, #0]
 8010488:	6960      	ldr	r0, [r4, #20]
 801048a:	1d1d      	adds	r5, r3, #4
 801048c:	600d      	str	r5, [r1, #0]
 801048e:	0635      	lsls	r5, r6, #24
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	d501      	bpl.n	8010498 <_printf_i+0x1cc>
 8010494:	6018      	str	r0, [r3, #0]
 8010496:	e002      	b.n	801049e <_printf_i+0x1d2>
 8010498:	0671      	lsls	r1, r6, #25
 801049a:	d5fb      	bpl.n	8010494 <_printf_i+0x1c8>
 801049c:	8018      	strh	r0, [r3, #0]
 801049e:	2300      	movs	r3, #0
 80104a0:	6123      	str	r3, [r4, #16]
 80104a2:	4616      	mov	r6, r2
 80104a4:	e7ba      	b.n	801041c <_printf_i+0x150>
 80104a6:	680b      	ldr	r3, [r1, #0]
 80104a8:	1d1a      	adds	r2, r3, #4
 80104aa:	600a      	str	r2, [r1, #0]
 80104ac:	681e      	ldr	r6, [r3, #0]
 80104ae:	6862      	ldr	r2, [r4, #4]
 80104b0:	2100      	movs	r1, #0
 80104b2:	4630      	mov	r0, r6
 80104b4:	f7ef fe94 	bl	80001e0 <memchr>
 80104b8:	b108      	cbz	r0, 80104be <_printf_i+0x1f2>
 80104ba:	1b80      	subs	r0, r0, r6
 80104bc:	6060      	str	r0, [r4, #4]
 80104be:	6863      	ldr	r3, [r4, #4]
 80104c0:	6123      	str	r3, [r4, #16]
 80104c2:	2300      	movs	r3, #0
 80104c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104c8:	e7a8      	b.n	801041c <_printf_i+0x150>
 80104ca:	6923      	ldr	r3, [r4, #16]
 80104cc:	4632      	mov	r2, r6
 80104ce:	4649      	mov	r1, r9
 80104d0:	4640      	mov	r0, r8
 80104d2:	47d0      	blx	sl
 80104d4:	3001      	adds	r0, #1
 80104d6:	d0ab      	beq.n	8010430 <_printf_i+0x164>
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	079b      	lsls	r3, r3, #30
 80104dc:	d413      	bmi.n	8010506 <_printf_i+0x23a>
 80104de:	68e0      	ldr	r0, [r4, #12]
 80104e0:	9b03      	ldr	r3, [sp, #12]
 80104e2:	4298      	cmp	r0, r3
 80104e4:	bfb8      	it	lt
 80104e6:	4618      	movlt	r0, r3
 80104e8:	e7a4      	b.n	8010434 <_printf_i+0x168>
 80104ea:	2301      	movs	r3, #1
 80104ec:	4632      	mov	r2, r6
 80104ee:	4649      	mov	r1, r9
 80104f0:	4640      	mov	r0, r8
 80104f2:	47d0      	blx	sl
 80104f4:	3001      	adds	r0, #1
 80104f6:	d09b      	beq.n	8010430 <_printf_i+0x164>
 80104f8:	3501      	adds	r5, #1
 80104fa:	68e3      	ldr	r3, [r4, #12]
 80104fc:	9903      	ldr	r1, [sp, #12]
 80104fe:	1a5b      	subs	r3, r3, r1
 8010500:	42ab      	cmp	r3, r5
 8010502:	dcf2      	bgt.n	80104ea <_printf_i+0x21e>
 8010504:	e7eb      	b.n	80104de <_printf_i+0x212>
 8010506:	2500      	movs	r5, #0
 8010508:	f104 0619 	add.w	r6, r4, #25
 801050c:	e7f5      	b.n	80104fa <_printf_i+0x22e>
 801050e:	bf00      	nop
 8010510:	08029159 	.word	0x08029159
 8010514:	0802916a 	.word	0x0802916a

08010518 <__retarget_lock_acquire_recursive>:
 8010518:	4770      	bx	lr

0801051a <__retarget_lock_release_recursive>:
 801051a:	4770      	bx	lr

0801051c <_realloc_r>:
 801051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051e:	4607      	mov	r7, r0
 8010520:	4614      	mov	r4, r2
 8010522:	460e      	mov	r6, r1
 8010524:	b921      	cbnz	r1, 8010530 <_realloc_r+0x14>
 8010526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801052a:	4611      	mov	r1, r2
 801052c:	f7ff bc22 	b.w	800fd74 <_malloc_r>
 8010530:	b922      	cbnz	r2, 801053c <_realloc_r+0x20>
 8010532:	f7ff fbcf 	bl	800fcd4 <_free_r>
 8010536:	4625      	mov	r5, r4
 8010538:	4628      	mov	r0, r5
 801053a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801053c:	f000 f814 	bl	8010568 <_malloc_usable_size_r>
 8010540:	42a0      	cmp	r0, r4
 8010542:	d20f      	bcs.n	8010564 <_realloc_r+0x48>
 8010544:	4621      	mov	r1, r4
 8010546:	4638      	mov	r0, r7
 8010548:	f7ff fc14 	bl	800fd74 <_malloc_r>
 801054c:	4605      	mov	r5, r0
 801054e:	2800      	cmp	r0, #0
 8010550:	d0f2      	beq.n	8010538 <_realloc_r+0x1c>
 8010552:	4631      	mov	r1, r6
 8010554:	4622      	mov	r2, r4
 8010556:	f7ff fb7d 	bl	800fc54 <memcpy>
 801055a:	4631      	mov	r1, r6
 801055c:	4638      	mov	r0, r7
 801055e:	f7ff fbb9 	bl	800fcd4 <_free_r>
 8010562:	e7e9      	b.n	8010538 <_realloc_r+0x1c>
 8010564:	4635      	mov	r5, r6
 8010566:	e7e7      	b.n	8010538 <_realloc_r+0x1c>

08010568 <_malloc_usable_size_r>:
 8010568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801056c:	1f18      	subs	r0, r3, #4
 801056e:	2b00      	cmp	r3, #0
 8010570:	bfbc      	itt	lt
 8010572:	580b      	ldrlt	r3, [r1, r0]
 8010574:	18c0      	addlt	r0, r0, r3
 8010576:	4770      	bx	lr

08010578 <_init>:
 8010578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801057a:	bf00      	nop
 801057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801057e:	bc08      	pop	{r3}
 8010580:	469e      	mov	lr, r3
 8010582:	4770      	bx	lr

08010584 <_fini>:
 8010584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010586:	bf00      	nop
 8010588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801058a:	bc08      	pop	{r3}
 801058c:	469e      	mov	lr, r3
 801058e:	4770      	bx	lr
