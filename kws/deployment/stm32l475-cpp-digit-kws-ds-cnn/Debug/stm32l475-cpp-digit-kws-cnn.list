
stm32l475-cpp-digit-kws-cnn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00056fc4  08010cc0  08010cc0  00020cc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08067c84  08067c84  00080c8c  2**0
                  CONTENTS
  4 .ARM          00000008  08067c84  08067c84  00077c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08067c8c  08067c8c  00080c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08067c8c  08067c8c  00077c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08067c90  08067c90  00077c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c8c  20000000  08067c94  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000c8c  08068920  00080c8c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001118  08068920  00081118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080c8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000396f8  00000000  00000000  00080cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006620  00000000  00000000  000ba3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  000c09d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  000c2478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030746  00000000  00000000  000c3d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ea4  00000000  00000000  000f444e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e018  00000000  00000000  001182f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000143  00000000  00000000  0022630a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b24  00000000  00000000  00226450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000033a6  00000000  00000000  0022df74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c8c 	.word	0x20000c8c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010c94 	.word	0x08010c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c90 	.word	0x20000c90
 80001cc:	08010c94 	.word	0x08010c94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f4e:	f00c fe1b 	bl	800db88 <roundf>
 8000f52:	eef0 7a40 	vmov.f32	s15, s0
 8000f56:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 8000f6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f6e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f9c <_ZN4MFCC8MelScaleEf+0x3c>
 8000f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f82:	f00c ff5d 	bl	800de40 <logf>
 8000f86:	eef0 7a40 	vmov.f32	s15, s0
 8000f8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fa0 <_ZN4MFCC8MelScaleEf+0x40>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	442f0000 	.word	0x442f0000
 8000fa0:	448ce000 	.word	0x448ce000

08000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fab9 	bl	8000524 <__aeabi_i2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	ec43 2b10 	vmov	d0, r2, r3
 8000fba:	f00c fe0d 	bl	800dbd8 <log>
 8000fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc2:	eef0 7a60 	vmov.f32	s15, s1
 8000fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fca:	eef0 0a67 	vmov.f32	s1, s15
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff fa9f 	bl	8000524 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	ed97 1b00 	vldr	d1, [r7]
 8000fee:	ec43 2b10 	vmov	d0, r2, r3
 8000ff2:	f00c fe39 	bl	800dc68 <pow>
 8000ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8000ffa:	eef0 7a60 	vmov.f32	s15, s1
    }
 8000ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8001002:	eef0 0a67 	vmov.f32	s1, s15
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0000      	movs	r0, r0
	...

08001010 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffb7 	bl	8000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001036:	ec55 4b10 	vmov	r4, r5, d0
 800103a:	2002      	movs	r0, #2
 800103c:	f7ff ffb2 	bl	8000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001040:	ec53 2b10 	vmov	r2, r3, d0
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff fc00 	bl	800084c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	ec43 2b17 	vmov	d7, r2, r3
 8001054:	eeb0 0a47 	vmov.f32	s0, s14
 8001058:	eef0 0a67 	vmov.f32	s1, s15
 800105c:	f00c fcc0 	bl	800d9e0 <ceil>
 8001060:	eeb0 7a40 	vmov.f32	s14, s0
 8001064:	eef0 7a60 	vmov.f32	s15, s1
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ffaf 	bl	8000fd4 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001076:	ec53 2b10 	vmov	r2, r3, d0
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd6b 	bl	8000b58 <__aeabi_d2iz>
 8001082:	4602      	mov	r2, r0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001090:	4293      	cmp	r3, r2
 8001092:	d201      	bcs.n	8001098 <_ZN4MFCCC1Eiii+0x88>
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	e001      	b.n	800109c <_ZN4MFCCC1Eiii+0x8c>
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	f00c fc92 	bl	800d9c6 <_Znaj>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d201      	bcs.n	80010ba <_ZN4MFCCC1Eiii+0xaa>
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	e001      	b.n	80010be <_ZN4MFCCC1Eiii+0xae>
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c fc81 	bl	800d9c6 <_Znaj>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 80010cc:	20a0      	movs	r0, #160	; 0xa0
 80010ce:	f00c fc7a 	bl	800d9c6 <_Znaj>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d201      	bcs.n	80010e8 <_ZN4MFCCC1Eiii+0xd8>
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	e001      	b.n	80010ec <_ZN4MFCCC1Eiii+0xdc>
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00c fc6a 	bl	800d9c6 <_Znaj>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	da3b      	bge.n	800117e <_ZN4MFCCC1Eiii+0x16e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001110:	ee17 0a90 	vmov	r0, s15
 8001114:	f7ff fa18 	bl	8000548 <__aeabi_f2d>
 8001118:	a332      	add	r3, pc, #200	; (adr r3, 80011e4 <_ZN4MFCCC1Eiii+0x1d4>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4614      	mov	r4, r2
 8001128:	461d      	mov	r5, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff f9fa 	bl	8000524 <__aeabi_i2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff fb88 	bl	800084c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <_ZN4MFCCC1Eiii+0x1d0>)
 800114a:	f7ff fa55 	bl	80005f8 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4922      	ldr	r1, [pc, #136]	; (80011e0 <_ZN4MFCCC1Eiii+0x1d0>)
 8001158:	f7ff f896 	bl	8000288 <__aeabi_dsub>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	18d4      	adds	r4, r2, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < frame_len; i++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e7bf      	b.n	80010fe <_ZN4MFCCC1Eiii+0xee>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 800117e:	20a0      	movs	r0, #160	; 0xa0
 8001180:	f00c fc21 	bl	800d9c6 <_Znaj>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 800118c:	20a0      	movs	r0, #160	; 0xa0
 800118e:	f00c fc1a 	bl	800d9c6 <_Znaj>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f942 	bl	8001424 <_ZN4MFCC16create_mel_fbankEv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	2128      	movs	r1, #40	; 0x28
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 f88c 	bl	80012c8 <_ZN4MFCC17create_dct_matrixEll>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80011b6:	2018      	movs	r0, #24
 80011b8:	f00c fbf4 	bl	800d9a4 <_Znwj>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f00b fc61 	bl	800ca98 <arm_rfft_fast_init_f32>

}
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	3fe00000 	.word	0x3fe00000
 80011e4:	54442d18 	.word	0x54442d18
 80011e8:	401921fb 	.word	0x401921fb

080011ec <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  delete []frame;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <_ZN4MFCCD1Ev+0x1a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	4618      	mov	r0, r3
 8001202:	f00c fbcd 	bl	800d9a0 <_ZdaPv>
  delete [] buffer;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <_ZN4MFCCD1Ev+0x2c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4618      	mov	r0, r3
 8001214:	f00c fbc4 	bl	800d9a0 <_ZdaPv>
  delete []mel_energies;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <_ZN4MFCCD1Ev+0x3e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4618      	mov	r0, r3
 8001226:	f00c fbbb 	bl	800d9a0 <_ZdaPv>
  delete []window_func;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <_ZN4MFCCD1Ev+0x50>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4618      	mov	r0, r3
 8001238:	f00c fbb2 	bl	800d9a0 <_ZdaPv>
  delete []fbank_filter_first;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <_ZN4MFCCD1Ev+0x62>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4618      	mov	r0, r3
 800124a:	f00c fba9 	bl	800d9a0 <_ZdaPv>
  delete []fbank_filter_last;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <_ZN4MFCCD1Ev+0x74>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	4618      	mov	r0, r3
 800125c:	f00c fba0 	bl	800d9a0 <_ZdaPv>
  delete []dct_matrix;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <_ZN4MFCCD1Ev+0x86>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	4618      	mov	r0, r3
 800126e:	f00c fb97 	bl	800d9a0 <_ZdaPv>
  delete rfft;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <_ZN4MFCCD1Ev+0x96>
 800127a:	2118      	movs	r1, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f00c fb8d 	bl	800d99c <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b27      	cmp	r3, #39	; 0x27
 800128a:	dc0f      	bgt.n	80012ac <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <_ZN4MFCCD1Ev+0xb8>
 800129c:	2104      	movs	r1, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f00c fb7c 	bl	800d99c <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e7ec      	b.n	8001286 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <_ZN4MFCCD1Ev+0xd0>
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00c fb70 	bl	800d99c <_ZdlPvj>
}
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80012c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012cc:	b08a      	sub	sp, #40	; 0x28
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d201      	bcs.n	80012ea <_ZN4MFCC17create_dct_matrixEll+0x22>
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	e001      	b.n	80012ee <_ZN4MFCC17create_dct_matrixEll+0x26>
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00c fb69 	bl	800d9c6 <_Znaj>
 80012f4:	4603      	mov	r3, r0
 80012f6:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130a:	edc7 7a06 	vstr	s15, [r7, #24]
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001314:	edd7 7a06 	vldr	s15, [r7, #24]
 8001318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	db09      	blt.n	8001336 <_ZN4MFCC17create_dct_matrixEll+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001322:	ed97 0a06 	vldr	s0, [r7, #24]
 8001326:	f00c fdc1 	bl	800deac <sqrtf>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001334:	e004      	b.n	8001340 <_ZN4MFCC17create_dct_matrixEll+0x78>
    }
    else
    {
      *pOut = 0.0f;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800133e:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	da5d      	bge.n	8001408 <_ZN4MFCC17create_dct_matrixEll+0x140>
    for (n = 0; n < input_length; n++) {
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	429a      	cmp	r2, r3
 8001356:	da53      	bge.n	8001400 <_ZN4MFCC17create_dct_matrixEll+0x138>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8f4 	bl	8000548 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff f8dd 	bl	8000524 <__aeabi_i2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	a12b      	add	r1, pc, #172	; (adr r1, 800141c <_ZN4MFCC17create_dct_matrixEll+0x154>)
 8001370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001374:	f7ff fa6a 	bl	800084c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4690      	mov	r8, r2
 800137e:	4699      	mov	r9, r3
 8001380:	6a38      	ldr	r0, [r7, #32]
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_i2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <_ZN4MFCC17create_dct_matrixEll+0x150>)
 800138c:	f7fe ff7e 	bl	800028c <__adddf3>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4640      	mov	r0, r8
 8001396:	4649      	mov	r1, r9
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4640      	mov	r0, r8
 80013b0:	4649      	mov	r1, r9
 80013b2:	f7ff f921 	bl	80005f8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	ec43 2b17 	vmov	d7, r2, r3
 80013be:	eeb0 0a47 	vmov.f32	s0, s14
 80013c2:	eef0 0a67 	vmov.f32	s1, s15
 80013c6:	f00c fb8f 	bl	800dae8 <cos>
 80013ca:	ec53 2b10 	vmov	r2, r3, d0
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	18d4      	adds	r4, r2, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	6023      	str	r3, [r4, #0]
    for (n = 0; n < input_length; n++) {
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	3301      	adds	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	e7a7      	b.n	8001350 <_ZN4MFCC17create_dct_matrixEll+0x88>
  for (k = 0; k < coefficient_count; k++) {
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	3301      	adds	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	e79d      	b.n	8001344 <_ZN4MFCC17create_dct_matrixEll+0x7c>
    }
  }
  return M;
 8001408:	69fb      	ldr	r3, [r7, #28]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	3fe00000 	.word	0x3fe00000
 800141c:	54442d18 	.word	0x54442d18
 8001420:	400921fb 	.word	0x400921fb

08001424 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b095      	sub	sp, #84	; 0x54
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	0fda      	lsrs	r2, r3, #31
 8001432:	4413      	add	r3, r2
 8001434:	105b      	asrs	r3, r3, #1
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001444:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001690 <_ZN4MFCC16create_mel_fbankEv+0x26c>
 8001448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8001450:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001454:	f7ff fd84 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001458:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 800145c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001694 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8001460:	f7ff fd7e 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001464:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8001468:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800146c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001474:	eddf 6a88 	vldr	s13, [pc, #544]	; 8001698 <_ZN4MFCC16create_mel_fbankEv+0x274>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8001480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001482:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001486:	4293      	cmp	r3, r2
 8001488:	d201      	bcs.n	800148e <_ZN4MFCC16create_mel_fbankEv+0x6a>
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	e001      	b.n	8001492 <_ZN4MFCC16create_mel_fbankEv+0x6e>
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	4618      	mov	r0, r3
 8001494:	f00c fa97 	bl	800d9c6 <_Znaj>
 8001498:	4603      	mov	r3, r0
 800149a:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 800149c:	20a0      	movs	r0, #160	; 0xa0
 800149e:	f00c fa92 	bl	800d9c6 <_Znaj>
 80014a2:	4603      	mov	r3, r0
 80014a4:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ac:	2b27      	cmp	r3, #39	; 0x27
 80014ae:	f300 80e4 	bgt.w	800167a <_ZN4MFCC16create_mel_fbankEv+0x256>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 80014b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 80014d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d2:	3301      	adds	r3, #1
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 80014f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f2:	3302      	adds	r3, #2
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	429a      	cmp	r2, r3
 8001526:	da65      	bge.n	80015f4 <_ZN4MFCC16create_mel_fbankEv+0x1d0>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8001528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 800153e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001542:	f7ff fd0d 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001546:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 800154a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	4413      	add	r3, r2
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8001558:	ed97 7a02 	vldr	s14, [r7, #8]
 800155c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	dd40      	ble.n	80015ec <_ZN4MFCC16create_mel_fbankEv+0x1c8>
 800156a:	ed97 7a02 	vldr	s14, [r7, #8]
 800156e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d537      	bpl.n	80015ec <_ZN4MFCC16create_mel_fbankEv+0x1c8>
        float weight;
        if (mel <= center_mel) {
 800157c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001580:	edd7 7a05 	vldr	s15, [r7, #20]
 8001584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d810      	bhi.n	80015b0 <_ZN4MFCC16create_mel_fbankEv+0x18c>
          weight = (mel - left_mel) / (center_mel - left_mel);
 800158e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001592:	edd7 7a06 	vldr	s15, [r7, #24]
 8001596:	ee77 6a67 	vsub.f32	s13, s14, s15
 800159a:	ed97 7a05 	vldr	s14, [r7, #20]
 800159e:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80015ae:	e00f      	b.n	80015d0 <_ZN4MFCC16create_mel_fbankEv+0x1ac>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 80015b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80015c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 80015d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	4413      	add	r3, r2
 80015d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015da:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e2:	d101      	bne.n	80015e8 <_ZN4MFCC16create_mel_fbankEv+0x1c4>
          first_index = i;
 80015e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 80015e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 80015ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ee:	3301      	adds	r3, #1
 80015f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80015f2:	e795      	b.n	8001520 <_ZN4MFCC16create_mel_fbankEv+0xfc>
      }
    }

    fbank_filter_first[bin] = first_index;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001600:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800160e:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8001610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800161c:	4293      	cmp	r3, r2
 800161e:	d201      	bcs.n	8001624 <_ZN4MFCC16create_mel_fbankEv+0x200>
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	e001      	b.n	8001628 <_ZN4MFCC16create_mel_fbankEv+0x204>
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	69f9      	ldr	r1, [r7, #28]
 800162e:	188c      	adds	r4, r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f00c f9c8 	bl	800d9c6 <_Znaj>
 8001636:	4603      	mov	r3, r0
 8001638:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 800163e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001640:	64bb      	str	r3, [r7, #72]	; 0x48
 8001642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001646:	429a      	cmp	r2, r3
 8001648:	dc13      	bgt.n	8001672 <_ZN4MFCC16create_mel_fbankEv+0x24e>
      mel_fbank[bin][j++] = this_bin[i];
 800164a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	441a      	add	r2, r3
 8001652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	69f9      	ldr	r1, [r7, #28]
 8001658:	440b      	add	r3, r1
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165e:	1c58      	adds	r0, r3, #1
 8001660:	63b8      	str	r0, [r7, #56]	; 0x38
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 800166a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800166c:	3301      	adds	r3, #1
 800166e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001670:	e7e7      	b.n	8001642 <_ZN4MFCC16create_mel_fbankEv+0x21e>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8001672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001674:	3301      	adds	r3, #1
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001678:	e717      	b.n	80014aa <_ZN4MFCC16create_mel_fbankEv+0x86>
    }
  }
  delete []this_bin;
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <_ZN4MFCC16create_mel_fbankEv+0x262>
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f00c f98d 	bl	800d9a0 <_ZdaPv>
  return mel_fbank;
 8001686:	69fb      	ldr	r3, [r7, #28]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3754      	adds	r7, #84	; 0x54
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	467a0000 	.word	0x467a0000
 8001694:	457a0000 	.word	0x457a0000
 8001698:	42240000 	.word	0x42240000

0800169c <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b095      	sub	sp, #84	; 0x54
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016b2:	429a      	cmp	r2, r3
 80016b4:	da18      	bge.n	80016e8 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	eddf 6aac 	vldr	s13, [pc, #688]	; 8001988 <_ZN4MFCC12mfcc_computeEPKsPa+0x2ec>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 80016e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e2:	3301      	adds	r3, #1
 80016e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e6:	e7e1      	b.n	80016ac <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	18d0      	adds	r0, r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	461a      	mov	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f00e fe42 	bl	801038c <memset>

  for (i = 0; i < frame_len; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001712:	429a      	cmp	r2, r3
 8001714:	da1a      	bge.n	800174c <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8001744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001746:	3301      	adds	r3, #1
 8001748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174a:	e7df      	b.n	800170c <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6919      	ldr	r1, [r3, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	2300      	movs	r3, #0
 800175a:	f00b fa81 	bl	800cc60 <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0fda      	lsrs	r2, r3, #31
 8001764:	4413      	add	r3, r2
 8001766:	105b      	asrs	r3, r3, #1
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	3304      	adds	r3, #4
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	3304      	adds	r3, #4
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 800179e:	2301      	movs	r3, #1
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	429a      	cmp	r2, r3
 80017a8:	da23      	bge.n	80017f2 <_ZN4MFCC12mfcc_computeEPKsPa+0x156>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	3304      	adds	r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 80017c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e6:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 80017ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ec:	3301      	adds	r3, #1
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017f0:	e7d7      	b.n	80017a2 <_ZN4MFCC12mfcc_computeEPKsPa+0x106>
  }
  buffer[0] = first_energy;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f8:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001806:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800180e:	2b27      	cmp	r3, #39	; 0x27
 8001810:	dc6d      	bgt.n	80018ee <_ZN4MFCC12mfcc_computeEPKsPa+0x252>
    j = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800183c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	dc3a      	bgt.n	80018ba <_ZN4MFCC12mfcc_computeEPKsPa+0x21e>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8001858:	edd7 7a07 	vldr	s15, [r7, #28]
 800185c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	db09      	blt.n	800187a <_ZN4MFCC12mfcc_computeEPKsPa+0x1de>
      *pOut = sqrtf(in);
 8001866:	ed97 0a07 	vldr	s0, [r7, #28]
 800186a:	f00c fb1f 	bl	800deac <sqrtf>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001878:	e004      	b.n	8001884 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e8>
      *pOut = 0.0f;
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001882:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001892:	1c59      	adds	r1, r3, #1
 8001894:	64b9      	str	r1, [r7, #72]	; 0x48
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 80018b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b4:	3301      	adds	r3, #1
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b8:	e7c0      	b.n	800183c <_ZN4MFCC12mfcc_computeEPKsPa+0x1a0>
    }
    mel_energies[bin] = mel_energy;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018c6:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 80018c8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d107      	bne.n	80018e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x24a>
      mel_energies[bin] = FLT_MIN;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018e4:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80018e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e8:	3301      	adds	r3, #1
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
 80018ec:	e78e      	b.n	800180c <_ZN4MFCC12mfcc_computeEPKsPa+0x170>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
 80018f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f4:	2b27      	cmp	r3, #39	; 0x27
 80018f6:	dc17      	bgt.n	8001928 <_ZN4MFCC12mfcc_computeEPKsPa+0x28c>
    mel_energies[bin] = logf(mel_energies[bin]);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18d4      	adds	r4, r2, r3
 8001910:	eeb0 0a67 	vmov.f32	s0, s15
 8001914:	f00c fa94 	bl	800de40 <logf>
 8001918:	eef0 7a40 	vmov.f32	s15, s0
 800191c:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8001920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001922:	3301      	adds	r3, #1
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
 8001926:	e7e4      	b.n	80018f2 <_ZN4MFCC12mfcc_computeEPKsPa+0x256>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001928:	2300      	movs	r3, #0
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001932:	429a      	cmp	r2, r3
 8001934:	da71      	bge.n	8001a1a <_ZN4MFCC12mfcc_computeEPKsPa+0x37e>
    float sum = 0.0;
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800193c:	2300      	movs	r3, #0
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001942:	2b27      	cmp	r3, #39	; 0x27
 8001944:	dc26      	bgt.n	8001994 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	461a      	mov	r2, r3
 8001956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	ed93 7a00 	vldr	s14, [r3]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001974:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001982:	3301      	adds	r3, #1
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
 8001986:	e7db      	b.n	8001940 <_ZN4MFCC12mfcc_computeEPKsPa+0x2a4>
 8001988:	47000000 	.word	0x47000000
 800198c:	42fe0000 	.word	0x42fe0000
 8001990:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80019aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 80019b2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80019b6:	f7ff fac3 	bl	8000f40 <_ZSt5roundf>
 80019ba:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80019be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019c2:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800198c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	db05      	blt.n	80019dc <_ZN4MFCC12mfcc_computeEPKsPa+0x340>
      mfcc_out[i] = 127;
 80019d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	227f      	movs	r2, #127	; 0x7f
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e01a      	b.n	8001a12 <_ZN4MFCC12mfcc_computeEPKsPa+0x376>
    else if(sum <= -128)
 80019dc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019e0:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8001990 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80019e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d805      	bhi.n	80019fa <_ZN4MFCC12mfcc_computeEPKsPa+0x35e>
      mfcc_out[i] = -128;
 80019ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e00b      	b.n	8001a12 <_ZN4MFCC12mfcc_computeEPKsPa+0x376>
    else
      mfcc_out[i] = sum; 
 80019fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	edc7 7a00 	vstr	s15, [r7]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b252      	sxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 8001a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a14:	3301      	adds	r3, #1
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a18:	e788      	b.n	800192c <_ZN4MFCC12mfcc_computeEPKsPa+0x290>
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3754      	adds	r7, #84	; 0x54
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop

08001a24 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>

// constructor
AudioPlayer::AudioPlayer(DAC_HandleTypeDef *hdac)
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
: hdac(hdac)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	611a      	str	r2, [r3, #16]
{
	dac_stop_flag = 1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	731a      	strb	r2, [r3, #12]
}
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
}
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af02      	add	r7, sp, #8
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	609a      	str	r2, [r3, #8]
	played_samples = 0;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
	converted_samples = 0;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]

	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001a7a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001a7e:	f00b ffa2 	bl	800d9c6 <_Znaj>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	605a      	str	r2, [r3, #4]
	dac_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001a8a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001a8e:	f00b ff9a 	bl	800d9c6 <_Znaj>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]


	// initial full read
	update_dac_buffer(0, PLAY_BUFFER_LENGTH);
 8001a9a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f833 	bl	8001b0c <_ZN11AudioPlayer17update_dac_bufferEmm>

	// Start DAC in circular mode
	dac_stop_flag = 0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	731a      	strb	r2, [r3, #12]
	if (HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, PLAY_BUFFER_LENGTH, DAC_ALIGN_12B_R) == HAL_ERROR) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6918      	ldr	r0, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001abc:	2100      	movs	r1, #0
 8001abe:	f002 fd5d 	bl	800457c <HAL_DAC_Start_DMA>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
		Error_Handler();
 8001ad2:	f001 fa91 	bl	8002ff8 <Error_Handler>
	}
	while(!dac_stop_flag);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7b1b      	ldrb	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d100      	bne.n	8001ae0 <_ZN11AudioPlayer10play_audioEP8WaveData+0x82>
 8001ade:	e7fa      	b.n	8001ad6 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
	delete [] dac_buffer;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <_ZN11AudioPlayer10play_audioEP8WaveData+0x94>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f00b ff57 	bl	800d9a0 <_ZdaPv>
	delete [] conversion_buffer;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <_ZN11AudioPlayer10play_audioEP8WaveData+0xa6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00b ff4e 	bl	800d9a0 <_ZdaPv>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN11AudioPlayer17update_dac_bufferEmm>:

// update buffer. Method called by dac callbacks functions.
void AudioPlayer::update_dac_buffer(uint32_t offset, uint32_t data_length) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001b20:	617b      	str	r3, [r7, #20]
	uint32_t read_length = data_length;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	61fb      	str	r3, [r7, #28]
	if (read_length >= remaining_samples) {
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d301      	bcc.n	8001b32 <_ZN11AudioPlayer17update_dac_bufferEmm+0x26>
		read_length = remaining_samples;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	61fb      	str	r3, [r7, #28]
	}
	if (read_length > 0) {
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d046      	beq.n	8001bc6 <_ZN11AudioPlayer17update_dac_bufferEmm+0xba>
		qspi_read((uint8_t*)conversion_buffer, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6858      	ldr	r0, [r3, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	18d1      	adds	r1, r2, r3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f001 fa60 	bl	8003014 <_Z9qspi_readPhmm>
		for (uint32_t i = 0; i < read_length; i++){
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d220      	bcs.n	8001ba2 <_ZN11AudioPlayer17update_dac_bufferEmm+0x96>
			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_DAC_SCALE_FACTOR + WAVE_TO_DAC_BIAS);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b74:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001bd0 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc4>
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bd4 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc8>
 8001b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b92:	ee17 2a90 	vmov	r2, s15
 8001b96:	b292      	uxth	r2, r2
 8001b98:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < read_length; i++){
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	e7da      	b.n	8001b58 <_ZN11AudioPlayer17update_dac_bufferEmm+0x4c>
		}
		converted_samples += read_length;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	441a      	add	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	619a      	str	r2, [r3, #24]
		memcpy(dac_buffer + offset, conversion_buffer, read_length * DAC_DATA_WIDTH);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	18d0      	adds	r0, r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f00e fbd5 	bl	8010370 <memcpy>
	}
}
 8001bc6:	bf00      	nop
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	3d7ff100 	.word	0x3d7ff100
 8001bd4:	44fff100 	.word	0x44fff100

08001bd8 <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	731a      	strb	r2, [r3, #12]
}
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
}
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 8001c42:	2008      	movs	r0, #8
 8001c44:	f00b feae 	bl	800d9a4 <_Znwj>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461c      	mov	r4, r3
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff ffc2 	bl	8001bd8 <_ZN8WaveDataC1Em>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 8001c58:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001c5c:	f00b feb3 	bl	800d9c6 <_Znaj>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 8001c68:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001c6c:	f00b feab 	bl	800d9c6 <_Znaj>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6918      	ldr	r0, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f003 f916 	bl	8004ebc <HAL_DFSDM_FilterRegularStart_DMA>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	bf0c      	ite	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	2300      	movne	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 8001ca0:	f001 f9aa 	bl	8002ff8 <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <_ZN13AudioRecorder12record_audioEm+0xb8>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 8001cac:	f000 f94e 	bl	8001f4c <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 8001cb0:	f002 f918 	bl	8003ee4 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7b1b      	ldrb	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d100      	bne.n	8001cbe <_ZN13AudioRecorder12record_audioEm+0x86>
 8001cbc:	e7fa      	b.n	8001cb4 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <_ZN13AudioRecorder12record_audioEm+0x98>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00b fe68 	bl	800d9a0 <_ZdaPv>
	delete [] wave_buffer;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <_ZN13AudioRecorder12record_audioEm+0xaa>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00b fe5f 	bl	800d9a0 <_ZdaPv>
	return cur_data;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001d0a:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d301      	bcc.n	8001d1c <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d213      	bcs.n	8001d50 <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	440b      	add	r3, r1
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	1419      	asrs	r1, r3, #16
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	b20a      	sxth	r2, r1
 8001d46:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	e7e7      	b.n	8001d20 <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6858      	ldr	r0, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	18d1      	adds	r1, r2, r3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f001 f96c 	bl	8003046 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	440a      	add	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <_Z13get_top_classPf>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(float* nn_output) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8001d94:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001d98:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <_Z13get_top_classPf+0x70>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d220      	bcs.n	8001dea <_Z13get_top_classPf+0x62>
		if (nn_output[i] > max_value) {
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	dd0c      	ble.n	8001de2 <_Z13get_top_classPf+0x5a>
			max_index = i;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ddc:	ee17 3a90 	vmov	r3, s15
 8001de0:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e7d9      	b.n	8001d9e <_Z13get_top_classPf+0x16>
		}
	}
	return max_index;
 8001dea:	697b      	ldr	r3, [r7, #20]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	20000000 	.word	0x20000000

08001dfc <_Z19average_predictionsPfS_mm>:

void average_predictions(float *average_out, float* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
	float *sum = new float[num_output_classes];
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d201      	bcs.n	8001e18 <_Z19average_predictionsPfS_mm+0x1c>
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	e001      	b.n	8001e1c <_Z19average_predictionsPfS_mm+0x20>
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f00b fdd2 	bl	800d9c6 <_Znaj>
 8001e22:	4603      	mov	r3, r0
 8001e24:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d240      	bcs.n	8001eb4 <_Z19average_predictionsPfS_mm+0xb8>
		sum[i] = 0;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d21c      	bcs.n	8001e86 <_Z19average_predictionsPfS_mm+0x8a>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4413      	add	r3, r2
 8001e54:	ed93 7a00 	vldr	s14, [r3]
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	fb02 f203 	mul.w	r2, r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4413      	add	r3, r2
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4413      	add	r3, r2
 8001e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	e7de      	b.n	8001e44 <_Z19average_predictionsPfS_mm+0x48>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	edd3 6a00 	vldr	s13, [r3]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	e7ba      	b.n	8001e2a <_Z19average_predictionsPfS_mm+0x2e>
	}
	delete [] sum;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <_Z19average_predictionsPfS_mm+0xc4>
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f00b fd70 	bl	800d9a0 <_ZdaPv>
}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4907      	ldr	r1, [pc, #28]	; (8001f00 <__NVIC_EnableIRQ+0x38>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	db12      	blt.n	8001f3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	490a      	ldr	r1, [pc, #40]	; (8001f48 <__NVIC_DisableIRQ+0x44>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2001      	movs	r0, #1
 8001f26:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2a:	3320      	adds	r3, #32
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f30:	f3bf 8f4f 	dsb	sy
}
 8001f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f36:	f3bf 8f6f 	isb	sy
}
 8001f3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001f50:	f001 ffb6 	bl	8003ec0 <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001f54:	201c      	movs	r0, #28
 8001f56:	f7ff ffd5 	bl	8001f04 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f5a:	201a      	movs	r0, #26
 8001f5c:	f7ff ffd2 	bl	8001f04 <__NVIC_DisableIRQ>
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f60:	2101      	movs	r1, #1
 8001f62:	2000      	movs	r0, #0
 8001f64:	f003 fe78 	bl	8005c58 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001f68:	201c      	movs	r0, #28
 8001f6a:	f7ff ffad 	bl	8001ec8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f6e:	201a      	movs	r0, #26
 8001f70:	f7ff ffaa 	bl	8001ec8 <__NVIC_EnableIRQ>
	HAL_ResumeTick();
 8001f74:	f001 ffb6 	bl	8003ee4 <HAL_ResumeTick>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b5b0      	push	{r4, r5, r7, lr}
 8001f7e:	f5ad 4d06 	sub.w	sp, sp, #34304	; 0x8600
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f86:	f002 f8ae 	bl	80040e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8a:	f000 fc5d 	bl	8002848 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f8e:	f000 fe75 	bl	8002c7c <_ZL12MX_GPIO_Initv>
  MX_QUADSPI_Init();
 8001f92:	f000 fd93 	bl	8002abc <_ZL15MX_QUADSPI_Initv>
  MX_DMA_Init();
 8001f96:	f000 fe4b 	bl	8002c30 <_ZL11MX_DMA_Initv>
  MX_DAC1_Init();
 8001f9a:	f000 fcdf 	bl	800295c <_ZL12MX_DAC1_Initv>
  MX_DFSDM1_Init();
 8001f9e:	f000 fd19 	bl	80029d4 <_ZL14MX_DFSDM1_Initv>
  MX_TIM2_Init();
 8001fa2:	f000 fdb5 	bl	8002b10 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8001fa6:	f000 fe0f 	bl	8002bc8 <_ZL19MX_USART1_UART_Initv>
  MX_CRC_Init();
 8001faa:	f000 fcaf 	bl	800290c <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  qspi_init();
 8001fae:	f001 f863 	bl	8003078 <_Z9qspi_initv>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fb2:	483a      	ldr	r0, [pc, #232]	; (800209c <main+0x120>)
 8001fb4:	f005 ff42 	bl	8007e3c <HAL_TIM_Base_Start_IT>
  main_state = SETUP;
 8001fb8:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <main+0x124>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"zero", "one","two","three","four","five","six","seven","eight","nine","unknown","silence"};
 8001fbe:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <main+0x128>)
 8001fc0:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 8001fc4:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8001fc8:	4611      	mov	r1, r2
 8001fca:	2260      	movs	r2, #96	; 0x60
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00e f9cf 	bl	8010370 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	switch(main_state) {
 8001fd2:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <main+0x124>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d8fa      	bhi.n	8001fd2 <main+0x56>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <main+0x68>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	0800281d 	.word	0x0800281d
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	0800203d 	.word	0x0800203d
 8001ff0:	080020c5 	.word	0x080020c5
 8001ff4:	080027e5 	.word	0x080027e5
  	case SETUP:
  	{
  		ITM_Port32(31) = 1;
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <main+0x12c>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
  		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002004:	4829      	ldr	r0, [pc, #164]	; (80020ac <main+0x130>)
 8002006:	f003 fdf7 	bl	8005bf8 <HAL_GPIO_WritePin>

  		// To indicate to user, don't do nothing when red light
  		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2108      	movs	r1, #8
 800200e:	4828      	ldr	r0, [pc, #160]	; (80020b0 <main+0x134>)
 8002010:	f003 fdf2 	bl	8005bf8 <HAL_GPIO_WritePin>
  		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 8002014:	2106      	movs	r1, #6
 8002016:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 800201a:	f001 f83e 	bl	800309a <_Z17qspi_erase_blocksmm>

  		ITM_Port32(31) = 2;
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <main+0x12c>)
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
  		print("Press the blue button and say a keyword\r\n");
 8002024:	4823      	ldr	r0, [pc, #140]	; (80020b4 <main+0x138>)
 8002026:	f000 ffbb 	bl	8002fa0 <print>
  		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	2108      	movs	r1, #8
 800202e:	4820      	ldr	r0, [pc, #128]	; (80020b0 <main+0x134>)
 8002030:	f003 fde2 	bl	8005bf8 <HAL_GPIO_WritePin>
  	  	main_state = READY;
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <main+0x124>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
  		break;
 800203a:	e3f6      	b.n	800282a <main+0x8ae>
  	}
  	case RECORDING:
  	{
  		ITM_Port32(31) = 3;
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <main+0x12c>)
 800203e:	2203      	movs	r2, #3
 8002040:	601a      	str	r2, [r3, #0]
  		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002048:	4818      	ldr	r0, [pc, #96]	; (80020ac <main+0x130>)
 800204a:	f003 fdd5 	bl	8005bf8 <HAL_GPIO_WritePin>
  		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 800204e:	2014      	movs	r0, #20
 8002050:	f00b fca8 	bl	800d9a4 <_Znwj>
 8002054:	4603      	mov	r3, r0
 8002056:	461c      	mov	r4, r3
 8002058:	4917      	ldr	r1, [pc, #92]	; (80020b8 <main+0x13c>)
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff fdce 	bl	8001bfc <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <main+0x140>)
 8002062:	601c      	str	r4, [r3, #0]
  		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <main+0x140>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fde3 	bl	8001c38 <_ZN13AudioRecorder12record_audioEm>
 8002072:	4603      	mov	r3, r0
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <main+0x144>)
 8002076:	6013      	str	r3, [r2, #0]

  		ITM_Port32(31) = 4;
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <main+0x12c>)
 800207a:	2204      	movs	r2, #4
 800207c:	601a      	str	r2, [r3, #0]
  		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002084:	4809      	ldr	r0, [pc, #36]	; (80020ac <main+0x130>)
 8002086:	f003 fdb7 	bl	8005bf8 <HAL_GPIO_WritePin>
  //		main_state = NN;
  		audio_recorder->~AudioRecorder();
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <main+0x140>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fdc6 	bl	8001c20 <_ZN13AudioRecorderD1Ev>
  		main_state = AUDIO_TEST;
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <main+0x124>)
 8002096:	2204      	movs	r2, #4
 8002098:	701a      	strb	r2, [r3, #0]
  		break;
 800209a:	e3c6      	b.n	800282a <main+0x8ae>
 800209c:	20000e40 	.word	0x20000e40
 80020a0:	20000f10 	.word	0x20000f10
 80020a4:	08010d5c 	.word	0x08010d5c
 80020a8:	e000007c 	.word	0xe000007c
 80020ac:	48000400 	.word	0x48000400
 80020b0:	48001000 	.word	0x48001000
 80020b4:	08010cc0 	.word	0x08010cc0
 80020b8:	20000d28 	.word	0x20000d28
 80020bc:	20000f78 	.word	0x20000f78
 80020c0:	20000f7c 	.word	0x20000f7c
  	}
  	case NN:
  	{
  		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2108      	movs	r1, #8
 80020c8:	48a8      	ldr	r0, [pc, #672]	; (800236c <main+0x3f0>)
 80020ca:	f003 fd95 	bl	8005bf8 <HAL_GPIO_WritePin>

  		// input buffer
  		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 80020ce:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020d2:	f00b fc78 	bl	800d9c6 <_Znaj>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80020dc:	f102 0218 	add.w	r2, r2, #24
 80020e0:	6013      	str	r3, [r2, #0]

  		// mfcc coefficients
  		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 80020e2:	2101      	movs	r1, #1
 80020e4:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 80020e8:	f00e f900 	bl	80102ec <calloc>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80020f2:	f102 0214 	add.w	r2, r2, #20
 80020f6:	6013      	str	r3, [r2, #0]

  		// output buffer
  		ai_float *predictions = (ai_float*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(ai_float));
 80020f8:	2104      	movs	r1, #4
 80020fa:	206c      	movs	r0, #108	; 0x6c
 80020fc:	f00e f8f6 	bl	80102ec <calloc>
 8002100:	4603      	mov	r3, r0
 8002102:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002106:	f102 0210 	add.w	r2, r2, #16
 800210a:	6013      	str	r3, [r2, #0]

  		// average predictions
  		ai_float *average = new ai_float[NUM_OUTPUT_CLASSES];
 800210c:	2030      	movs	r0, #48	; 0x30
 800210e:	f00b fc5a 	bl	800d9c6 <_Znaj>
 8002112:	4603      	mov	r3, r0
 8002114:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002118:	f102 020c 	add.w	r2, r2, #12
 800211c:	6013      	str	r3, [r2, #0]

  		uint32_t pred_index;

  		q7_t *mfcc_head;
  		//DS_CNN *ds_cnn = new DS_CNN();
  		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 800211e:	2034      	movs	r0, #52	; 0x34
 8002120:	f00b fc40 	bl	800d9a4 <_Znwj>
 8002124:	4603      	mov	r3, r0
 8002126:	461c      	mov	r4, r3
 8002128:	2301      	movs	r3, #1
 800212a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800212e:	210a      	movs	r1, #10
 8002130:	4620      	mov	r0, r4
 8002132:	f7fe ff6d 	bl	8001010 <_ZN4MFCCC1Eiii>
 8002136:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800213a:	f103 0308 	add.w	r3, r3, #8
 800213e:	601c      	str	r4, [r3, #0]
		// Buffers used to store input and output tensors
		AI_ALIGNED(4) ai_i8 in_data[AI_CNN_MODEL_IN_1_SIZE_BYTES];
		AI_ALIGNED(4) ai_i8 out_data[AI_CNN_MODEL_OUT_1_SIZE_BYTES];

		// Pointer to our model
		ai_handle cnn_model = AI_HANDLE_NULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8002146:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 800214a:	6013      	str	r3, [r2, #0]
		//ai_buffer ai_output = AI_BUFFER_OBJ_INIT(AI_BUFFER_FORMAT_FLOAT, 1, 1, 12, 1, NULL);

		ai_buffer ai_input[AI_CNN_MODEL_IN_NUM];
		ai_buffer ai_output[AI_CNN_MODEL_OUT_NUM];

		ai_input[0] = *AI_CNN_MODEL_IN;
 800214c:	2100      	movs	r1, #0
 800214e:	2000      	movs	r0, #0
 8002150:	f007 f9b6 	bl	80094c0 <ai_cnn_model_inputs_get>
 8002154:	4603      	mov	r3, r0
 8002156:	f507 4405 	add.w	r4, r7, #34048	; 0x8500
 800215a:	f104 0470 	add.w	r4, r4, #112	; 0x70
 800215e:	461d      	mov	r5, r3
 8002160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ai_output[0] = *AI_CNN_MODEL_OUT;
 800216c:	2100      	movs	r1, #0
 800216e:	2000      	movs	r0, #0
 8002170:	f007 f9c0 	bl	80094f4 <ai_cnn_model_outputs_get>
 8002174:	4603      	mov	r3, r0
 8002176:	f507 4405 	add.w	r4, r7, #34048	; 0x8500
 800217a:	f104 0454 	add.w	r4, r4, #84	; 0x54
 800217e:	461d      	mov	r5, r3
 8002180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002184:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002188:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// Set working memory and get weights/biases from model
		ai_network_params ai_params = AI_NETWORK_PARAMS_INIT(
 800218c:	f007 fa8e 	bl	80096ac <ai_cnn_model_data_weights_get>
 8002190:	4602      	mov	r2, r0
 8002192:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002196:	3b9c      	subs	r3, #156	; 0x9c
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f007 fa50 	bl	8009640 <ai_cnn_model_data_weights_buffer_get>
 80021a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80021a4:	3b9c      	subs	r3, #156	; 0x9c
 80021a6:	f103 021c 	add.w	r2, r3, #28
 80021aa:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80021ae:	3b3c      	subs	r3, #60	; 0x3c
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f007 fa10 	bl	80095d8 <ai_cnn_model_data_activations_buffer_get>
				AI_CNN_MODEL_DATA_ACTIVATIONS(activations)
		);

		// Set pointers wrapper structs to our data buffers
		//ai_input[0].n_batches = 1;
		ai_input[0].data = AI_HANDLE_PTR(in_data);
 80021b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80021bc:	3b64      	subs	r3, #100	; 0x64
 80021be:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 80021c2:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80021c6:	6013      	str	r3, [r2, #0]
		//ai_output[0].n_batches = 1;
		ai_output[0].data = AI_HANDLE_PTR(out_data);
 80021c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021cc:	3b2c      	subs	r3, #44	; 0x2c
 80021ce:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 80021d2:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80021d6:	6013      	str	r3, [r2, #0]

		//ITM_Port32(31) = 7;
		// create instance of neural network
		ai_err = ai_cnn_model_create(&cnn_model, AI_CNN_MODEL_DATA_CONFIG);
 80021d8:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 80021dc:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f007 f956 	bl	8009494 <ai_cnn_model_create>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 80021ee:	f102 0290 	add.w	r2, r2, #144	; 0x90
 80021f2:	6013      	str	r3, [r2, #0]
		if (ai_err.type != AI_ERROR_NONE)
 80021f4:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 80021f8:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <main+0x28a>
		{
			// error creating model
			Error_Handler();
 8002202:	f000 fef9 	bl	8002ff8 <Error_Handler>
		}

		if(!ai_cnn_model_init(cnn_model, &ai_params))
 8002206:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800220a:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002214:	3b9c      	subs	r3, #156	; 0x9c
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f007 f991 	bl	8009540 <ai_cnn_model_init>
 800221e:	4603      	mov	r3, r0
 8002220:	f083 0301 	eor.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <main+0x2ce>
		{
			ai_err = ai_cnn_model_get_error(cnn_model);
 800222a:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800222e:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f007 f921 	bl	800947c <ai_cnn_model_get_error>
 800223a:	4603      	mov	r3, r0
 800223c:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8002240:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8002244:	6013      	str	r3, [r2, #0]
			Error_Handler();
 8002246:	f000 fed7 	bl	8002ff8 <Error_Handler>
		}

		///////////

  		bool keyword_detected = false;
 800224a:	2300      	movs	r3, #0
 800224c:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002250:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8002254:	7013      	strb	r3, [r2, #0]

  		ai_float *average_window_head = predictions;
 8002256:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800225a:	f103 0310 	add.w	r3, r3, #16
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002264:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002268:	6013      	str	r3, [r2, #0]
  		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 800226a:	2300      	movs	r3, #0
 800226c:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002270:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800227a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b08      	cmp	r3, #8
 8002282:	f200 8257 	bhi.w	8002734 <main+0x7b8>
  				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 8002286:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800228a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 800229c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80022a0:	4619      	mov	r1, r3
 80022a2:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80022a6:	f103 0318 	add.w	r3, r3, #24
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	f000 feb2 	bl	8003014 <_Z9qspi_readPhmm>
  				// move old data to the left
  				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS * sizeof(q7_t));
 80022b0:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80022b4:	f103 0314 	add.w	r3, r3, #20
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3332      	adds	r3, #50	; 0x32
 80022bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80022c0:	f507 4106 	add.w	r1, r7, #34304	; 0x8600
 80022c4:	f101 0114 	add.w	r1, r1, #20
 80022c8:	6809      	ldr	r1, [r1, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00a fab6 	bl	800c83c <arm_copy_q7>
  				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 80022d0:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80022d4:	f103 0314 	add.w	r3, r3, #20
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022de:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80022e2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80022e6:	6013      	str	r3, [r2, #0]
  				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80022ee:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80022f8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d836      	bhi.n	8002370 <main+0x3f4>
  					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8002302:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002306:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	461a      	mov	r2, r3
 8002316:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800231a:	f103 0318 	add.w	r3, r3, #24
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4413      	add	r3, r2
 8002322:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002326:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002332:	f103 0308 	add.w	r3, r3, #8
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	f7ff f9b0 	bl	800169c <_ZN4MFCC12mfcc_computeEPKsPa>
  					mfcc_head += NUM_MFCC_COEFFS;
 800233c:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002340:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330a      	adds	r3, #10
 8002348:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 800234c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002350:	6013      	str	r3, [r2, #0]
  				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8002352:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002356:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002362:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e7c4      	b.n	80022f4 <main+0x378>
 800236a:	bf00      	nop
 800236c:	48001000 	.word	0x48001000
  				}

  				ai_float* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8002370:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002374:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	461a      	mov	r2, r3
 8002384:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002388:	f103 0310 	add.w	r3, r3, #16
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002394:	f102 0204 	add.w	r2, r2, #4
 8002398:	6013      	str	r3, [r2, #0]

  				// Fill input buffer
				for (uint32_t i = 0; i < AI_CNN_MODEL_IN_1_SIZE; i++) {
 800239a:	2300      	movs	r3, #0
 800239c:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80023a0:	f102 0220 	add.w	r2, r2, #32
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80023aa:	f103 0320 	add.w	r3, r3, #32
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80023b4:	d250      	bcs.n	8002458 <main+0x4dc>
					uint32_t row_index = (uint32_t) (i / NUM_MFCC_COEFFS);
 80023b6:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80023ba:	f103 0320 	add.w	r3, r3, #32
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4ad3      	ldr	r2, [pc, #844]	; (8002710 <main+0x794>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80023cc:	6013      	str	r3, [r2, #0]
					uint32_t col_index = i % NUM_MFCC_COEFFS;
 80023ce:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80023d2:	f103 0320 	add.w	r3, r3, #32
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4bcd      	ldr	r3, [pc, #820]	; (8002710 <main+0x794>)
 80023da:	fba3 1302 	umull	r1, r3, r3, r2
 80023de:	08d9      	lsrs	r1, r3, #3
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 80023ee:	f102 02fc 	add.w	r2, r2, #252	; 0xfc
 80023f2:	6013      	str	r3, [r2, #0]
					((ai_float*)in_data)[i] =  (ai_float)mfcc_out[row_index*10+col_index];
 80023f4:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	461a      	mov	r2, r3
 8002404:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 8002408:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002414:	f102 0214 	add.w	r2, r2, #20
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4413      	add	r3, r2
 800241c:	f993 1000 	ldrsb.w	r1, [r3]
 8002420:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002424:	f103 0320 	add.w	r3, r3, #32
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	009a      	lsls	r2, r3, #2
 800242c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002430:	3b64      	subs	r3, #100	; 0x64
 8002432:	4413      	add	r3, r2
 8002434:	ee07 1a90 	vmov	s15, r1
 8002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243c:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < AI_CNN_MODEL_IN_1_SIZE; i++) {
 8002440:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002444:	f103 0320 	add.w	r3, r3, #32
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002450:	f102 0220 	add.w	r2, r2, #32
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e7a6      	b.n	80023a6 <main+0x42a>
				}

				// forward MFCC matrix to the NN
				nbatch = ai_cnn_model_run(cnn_model, &ai_input[0], &ai_output[0]);
 8002458:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800245c:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8002466:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800246a:	f507 4105 	add.w	r1, r7, #34048	; 0x8500
 800246e:	f101 0170 	add.w	r1, r1, #112	; 0x70
 8002472:	4618      	mov	r0, r3
 8002474:	f007 f8a0 	bl	80095b8 <ai_cnn_model_run>
 8002478:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800247c:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 8002480:	6018      	str	r0, [r3, #0]
				if (nbatch != 1) {
 8002482:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 8002486:	f103 03f8 	add.w	r3, r3, #248	; 0xf8
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d001      	beq.n	8002494 <main+0x518>
					// could not run inference
					Error_Handler();
 8002490:	f000 fdb2 	bl	8002ff8 <Error_Handler>
				}
				//arm_softmax_q7 (nn_out,NUM_OUTPUT_CLASSES,nn_out);
				ai_float tmp_out_data [NUM_OUTPUT_CLASSES];
				ai_float tmp_nn_out [NUM_OUTPUT_CLASSES];
				// extract output data
				for (uint32_t i = 0; i < NUM_OUTPUT_CLASSES; i++) {
 8002494:	2300      	movs	r3, #0
 8002496:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 800249a:	f102 021c 	add.w	r2, r2, #28
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80024a4:	f103 031c 	add.w	r3, r3, #28
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b0b      	cmp	r3, #11
 80024ac:	d851      	bhi.n	8002552 <main+0x5d6>
					nn_out[i] = ((ai_float*)out_data)[i];
 80024ae:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80024b2:	f103 031c 	add.w	r3, r3, #28
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	009a      	lsls	r2, r3, #2
 80024ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024be:	3b2c      	subs	r3, #44	; 0x2c
 80024c0:	441a      	add	r2, r3
 80024c2:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80024c6:	f103 031c 	add.w	r3, r3, #28
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	f507 4106 	add.w	r1, r7, #34304	; 0x8600
 80024d2:	f101 0104 	add.w	r1, r1, #4
 80024d6:	6809      	ldr	r1, [r1, #0]
 80024d8:	440b      	add	r3, r1
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	601a      	str	r2, [r3, #0]
					tmp_out_data[i] = ((ai_float*)out_data)[i];
 80024de:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80024e2:	f103 031c 	add.w	r3, r3, #28
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	009a      	lsls	r2, r3, #2
 80024ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ee:	3b2c      	subs	r3, #44	; 0x2c
 80024f0:	4413      	add	r3, r2
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80024f8:	3bfc      	subs	r3, #252	; 0xfc
 80024fa:	f507 4106 	add.w	r1, r7, #34304	; 0x8600
 80024fe:	f101 011c 	add.w	r1, r1, #28
 8002502:	6809      	ldr	r1, [r1, #0]
 8002504:	0089      	lsls	r1, r1, #2
 8002506:	440b      	add	r3, r1
 8002508:	601a      	str	r2, [r3, #0]
					tmp_nn_out[i] = nn_out[i];
 800250a:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800250e:	f103 031c 	add.w	r3, r3, #28
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 800251a:	f102 0204 	add.w	r2, r2, #4
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002528:	3bcc      	subs	r3, #204	; 0xcc
 800252a:	f507 4106 	add.w	r1, r7, #34304	; 0x8600
 800252e:	f101 011c 	add.w	r1, r1, #28
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	0089      	lsls	r1, r1, #2
 8002536:	440b      	add	r3, r1
 8002538:	601a      	str	r2, [r3, #0]
				for (uint32_t i = 0; i < NUM_OUTPUT_CLASSES; i++) {
 800253a:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800253e:	f103 031c 	add.w	r3, r3, #28
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3301      	adds	r3, #1
 8002546:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 800254a:	f102 021c 	add.w	r2, r2, #28
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e7a6      	b.n	80024a0 <main+0x524>
				}

  				// get prediction for each recording window
  				if (DEBUG_MODE) {
 8002552:	4b70      	ldr	r3, [pc, #448]	; (8002714 <main+0x798>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d032      	beq.n	80025c0 <main+0x644>
  					pred_index = get_top_class(nn_out);
 800255a:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800255e:	f103 0304 	add.w	r3, r3, #4
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	f7ff fc10 	bl	8001d88 <_Z13get_top_classPf>
 8002568:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800256c:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002570:	6018      	str	r0, [r3, #0]
  					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], (uint8_t)nn_out[pred_index]);
 8002572:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8002576:	f102 0294 	add.w	r2, r2, #148	; 0x94
 800257a:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800257e:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	18d1      	adds	r1, r2, r3
 8002588:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800258c:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002598:	f102 0204 	add.w	r2, r2, #4
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80025ac:	793b      	ldrb	r3, [r7, #4]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	460a      	mov	r2, r1
 80025b2:	4959      	ldr	r1, [pc, #356]	; (8002718 <main+0x79c>)
 80025b4:	4859      	ldr	r0, [pc, #356]	; (800271c <main+0x7a0>)
 80025b6:	f00d ffff 	bl	80105b8 <siprintf>
  					print(uart_buffer);
 80025ba:	4858      	ldr	r0, [pc, #352]	; (800271c <main+0x7a0>)
 80025bc:	f000 fcf0 	bl	8002fa0 <print>
  				}

  				// increment average window pointer
  				if (i >= AVERAGE_WINDOW_LENGTH) {
 80025c0:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80025c4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d90a      	bls.n	80025e4 <main+0x668>
  					average_window_head += NUM_OUTPUT_CLASSES;
 80025ce:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80025d2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3330      	adds	r3, #48	; 0x30
 80025da:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80025de:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80025e2:	6013      	str	r3, [r2, #0]
  				}
  				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 80025e4:	230c      	movs	r3, #12
 80025e6:	2203      	movs	r2, #3
 80025e8:	f507 4106 	add.w	r1, r7, #34304	; 0x8600
 80025ec:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 80025f0:	6809      	ldr	r1, [r1, #0]
 80025f2:	f507 4006 	add.w	r0, r7, #34304	; 0x8600
 80025f6:	f100 000c 	add.w	r0, r0, #12
 80025fa:	6800      	ldr	r0, [r0, #0]
 80025fc:	f7ff fbfe 	bl	8001dfc <_Z19average_predictionsPfS_mm>
  				pred_index = get_top_class(average);
 8002600:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002604:	f103 030c 	add.w	r3, r3, #12
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	f7ff fbbd 	bl	8001d88 <_Z13get_top_classPf>
 800260e:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 8002612:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002616:	6018      	str	r0, [r3, #0]

  				if (DEBUG_MODE) {
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <main+0x798>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d026      	beq.n	800266e <main+0x6f2>
  					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], (uint8_t)average[pred_index]);
 8002620:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 8002624:	f102 0294 	add.w	r2, r2, #148	; 0x94
 8002628:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800262c:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	18d1      	adds	r1, r2, r3
 8002636:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 800263a:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002646:	f102 020c 	add.w	r2, r2, #12
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4413      	add	r3, r2
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002656:	edc7 7a01 	vstr	s15, [r7, #4]
 800265a:	793b      	ldrb	r3, [r7, #4]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	460a      	mov	r2, r1
 8002660:	492f      	ldr	r1, [pc, #188]	; (8002720 <main+0x7a4>)
 8002662:	482e      	ldr	r0, [pc, #184]	; (800271c <main+0x7a0>)
 8002664:	f00d ffa8 	bl	80105b8 <siprintf>
  					print(uart_buffer);
 8002668:	482c      	ldr	r0, [pc, #176]	; (800271c <main+0x7a0>)
 800266a:	f000 fc99 	bl	8002fa0 <print>
  				}

  				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 800266e:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 8002672:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 800267e:	f102 020c 	add.w	r2, r2, #12
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff5d 	bl	8000548 <__aeabi_f2d>
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <main+0x7a8>)
 8002694:	f7fe f8da 	bl	800084c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <main+0x7ac>)
 80026a6:	f7fd ffa7 	bl	80005f8 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <main+0x7b0>)
 80026b8:	f7fe fa2e 	bl	8000b18 <__aeabi_dcmpgt>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <main+0x77a>
  					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 80026c2:	f507 4205 	add.w	r2, r7, #34048	; 0x8500
 80026c6:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80026ca:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 80026ce:	f103 03f4 	add.w	r3, r3, #244	; 0xf4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4915      	ldr	r1, [pc, #84]	; (8002730 <main+0x7b4>)
 80026dc:	480f      	ldr	r0, [pc, #60]	; (800271c <main+0x7a0>)
 80026de:	f00d ff6b 	bl	80105b8 <siprintf>
  					print(uart_buffer);
 80026e2:	480e      	ldr	r0, [pc, #56]	; (800271c <main+0x7a0>)
 80026e4:	f000 fc5c 	bl	8002fa0 <print>
  					keyword_detected = true;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 80026ee:	f102 0233 	add.w	r2, r2, #51	; 0x33
 80026f2:	7013      	strb	r3, [r2, #0]
 80026f4:	e01e      	b.n	8002734 <main+0x7b8>
  		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 80026f6:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80026fa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	f507 4206 	add.w	r2, r7, #34304	; 0x8600
 8002706:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e5b3      	b.n	8002276 <main+0x2fa>
 800270e:	bf00      	nop
 8002710:	cccccccd 	.word	0xcccccccd
 8002714:	20000005 	.word	0x20000005
 8002718:	08010cec 	.word	0x08010cec
 800271c:	20000f14 	.word	0x20000f14
 8002720:	08010d0c 	.word	0x08010d0c
 8002724:	40600000 	.word	0x40600000
 8002728:	40590000 	.word	0x40590000
 800272c:	40418000 	.word	0x40418000
 8002730:	08010d28 	.word	0x08010d28
  					break;
  				}
  		}

  		if (!keyword_detected) {
 8002734:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002738:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <main+0x7d2>
  			print("No keyword detected.");
 8002748:	4839      	ldr	r0, [pc, #228]	; (8002830 <main+0x8b4>)
 800274a:	f000 fc29 	bl	8002fa0 <print>
  		}

  		mfcc->~MFCC();
 800274e:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002752:	f103 0308 	add.w	r3, r3, #8
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f7fe fd48 	bl	80011ec <_ZN4MFCCD1Ev>
  		delete [] mfcc_out;
 800275c:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002760:	f103 0314 	add.w	r3, r3, #20
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <main+0x7fc>
 800276a:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800276e:	f103 0314 	add.w	r3, r3, #20
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	f00b f914 	bl	800d9a0 <_ZdaPv>
  		delete [] predictions;
 8002778:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800277c:	f103 0310 	add.w	r3, r3, #16
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <main+0x818>
 8002786:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 800278a:	f103 0310 	add.w	r3, r3, #16
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	f00b f906 	bl	800d9a0 <_ZdaPv>
  		delete [] average;
 8002794:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 8002798:	f103 030c 	add.w	r3, r3, #12
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <main+0x834>
 80027a2:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80027a6:	f103 030c 	add.w	r3, r3, #12
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f00b f8f8 	bl	800d9a0 <_ZdaPv>
  		delete [] audio_buffer;
 80027b0:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80027b4:	f103 0318 	add.w	r3, r3, #24
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <main+0x850>
 80027be:	f507 4306 	add.w	r3, r7, #34304	; 0x8600
 80027c2:	f103 0318 	add.w	r3, r3, #24
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	f00b f8ea 	bl	800d9a0 <_ZdaPv>
  		// free allocated memory
  		//delete activations;
  		//delete in_data;
  		//delete out_data;
		// destroy model and free allocated memory
		ai_cnn_model_destroy(cnn_model);
 80027cc:	f507 4305 	add.w	r3, r7, #34048	; 0x8500
 80027d0:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f006 fea6 	bl	8009528 <ai_cnn_model_destroy>
  		main_state = SETUP;
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <main+0x8b8>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
  		break;
 80027e2:	e022      	b.n	800282a <main+0x8ae>
  	}
  	case AUDIO_TEST:
  	{
  		audio_player = new AudioPlayer(&hdac1);
 80027e4:	201c      	movs	r0, #28
 80027e6:	f00b f8dd 	bl	800d9a4 <_Znwj>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461c      	mov	r4, r3
 80027ee:	4912      	ldr	r1, [pc, #72]	; (8002838 <main+0x8bc>)
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff f917 	bl	8001a24 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <main+0x8c0>)
 80027f8:	601c      	str	r4, [r3, #0]
  		audio_player->play_audio(wave_data);
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <main+0x8c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a10      	ldr	r2, [pc, #64]	; (8002840 <main+0x8c4>)
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f92a 	bl	8001a5e <_ZN11AudioPlayer10play_audioEP8WaveData>

  //		audio_recorder->print_data(wave_data);
  		main_state = NN;
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <main+0x8b8>)
 800280c:	2203      	movs	r2, #3
 800280e:	701a      	strb	r2, [r3, #0]
  //		main_state = SETUP;
  		audio_player->~AudioPlayer();
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <main+0x8c0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f917 	bl	8001a48 <_ZN11AudioPlayerD1Ev>

  		break;
 800281a:	e006      	b.n	800282a <main+0x8ae>
  	}
  	case READY:
  	{
  		if (LOW_POWER_MODE)
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <main+0x8c8>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <main+0x8ac>
  			enter_sleep_mode();
 8002824:	f7ff fb92 	bl	8001f4c <_Z16enter_sleep_modev>
  		break;
 8002828:	bf00      	nop
  	}
  	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800282a:	f7ff bbd2 	b.w	8001fd2 <main+0x56>
 800282e:	bf00      	nop
 8002830:	08010d44 	.word	0x08010d44
 8002834:	20000f10 	.word	0x20000f10
 8002838:	20000ccc 	.word	0x20000ccc
 800283c:	20000f80 	.word	0x20000f80
 8002840:	20000f7c 	.word	0x20000f7c
 8002844:	20000004 	.word	0x20000004

08002848 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b096      	sub	sp, #88	; 0x58
 800284c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	2244      	movs	r2, #68	; 0x44
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f00d fd98 	bl	801038c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800285c:	463b      	mov	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800286a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800286e:	f003 fa35 	bl	8005cdc <HAL_PWREx_ControlVoltageScaling>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002882:	f000 fbb9 	bl	8002ff8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002886:	2310      	movs	r3, #16
 8002888:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800288a:	2301      	movs	r3, #1
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002892:	2360      	movs	r3, #96	; 0x60
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002896:	2302      	movs	r3, #2
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800289a:	2301      	movs	r3, #1
 800289c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80028a2:	2328      	movs	r3, #40	; 0x28
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028a6:	2307      	movs	r3, #7
 80028a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028aa:	2302      	movs	r3, #2
 80028ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028ae:	2302      	movs	r3, #2
 80028b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 ff8e 	bl	80067d8 <HAL_RCC_OscConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80028cc:	f000 fb94 	bl	8002ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d0:	230f      	movs	r3, #15
 80028d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d4:	2303      	movs	r3, #3
 80028d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028e4:	463b      	mov	r3, r7
 80028e6:	2104      	movs	r1, #4
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 fb5b 	bl	8006fa4 <HAL_RCC_ClockConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80028fe:	f000 fb7b 	bl	8002ff8 <Error_Handler>
  }
}
 8002902:	bf00      	nop
 8002904:	3758      	adds	r7, #88	; 0x58
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_ZL11MX_CRC_Initv+0x48>)
 8002912:	4a11      	ldr	r2, [pc, #68]	; (8002958 <_ZL11MX_CRC_Initv+0x4c>)
 8002914:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <_ZL11MX_CRC_Initv+0x48>)
 8002918:	2200      	movs	r2, #0
 800291a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <_ZL11MX_CRC_Initv+0x48>)
 800291e:	2200      	movs	r2, #0
 8002920:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <_ZL11MX_CRC_Initv+0x48>)
 8002924:	2200      	movs	r2, #0
 8002926:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <_ZL11MX_CRC_Initv+0x48>)
 800292a:	2200      	movs	r2, #0
 800292c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <_ZL11MX_CRC_Initv+0x48>)
 8002930:	2201      	movs	r2, #1
 8002932:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002934:	4807      	ldr	r0, [pc, #28]	; (8002954 <_ZL11MX_CRC_Initv+0x48>)
 8002936:	f001 fd15 	bl	8004364 <HAL_CRC_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800294a:	f000 fb55 	bl	8002ff8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000ca8 	.word	0x20000ca8
 8002958:	40023000 	.word	0x40023000

0800295c <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2224      	movs	r2, #36	; 0x24
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f00d fd0f 	bl	801038c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <_ZL12MX_DAC1_Initv+0x70>)
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <_ZL12MX_DAC1_Initv+0x74>)
 8002972:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002974:	4815      	ldr	r0, [pc, #84]	; (80029cc <_ZL12MX_DAC1_Initv+0x70>)
 8002976:	f001 fddf 	bl	8004538 <HAL_DAC_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 800298a:	f000 fb35 	bl	8002ff8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002992:	2324      	movs	r3, #36	; 0x24
 8002994:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	4619      	mov	r1, r3
 80029a8:	4808      	ldr	r0, [pc, #32]	; (80029cc <_ZL12MX_DAC1_Initv+0x70>)
 80029aa:	f001 ff02 	bl	80047b2 <HAL_DAC_ConfigChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 80029be:	f000 fb1b 	bl	8002ff8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000ccc 	.word	0x20000ccc
 80029d0:	40007400 	.word	0x40007400

080029d4 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80029d8:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <_ZL14MX_DFSDM1_Initv+0xd8>)
 80029dc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80029de:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80029f2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80029f6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 200;
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80029fa:	22c8      	movs	r2, #200	; 0xc8
 80029fc:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8002a04:	4828      	ldr	r0, [pc, #160]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002a06:	f002 f939 	bl	8004c7c <HAL_DFSDM_FilterInit>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <_ZL14MX_DFSDM1_Initv+0x4a>
  {
    Error_Handler();
 8002a1a:	f000 faed 	bl	8002ff8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a20:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <_ZL14MX_DFSDM1_Initv+0xe0>)
 8002a22:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 25;
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a32:	2219      	movs	r2, #25
 8002a34:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a50:	2204      	movs	r2, #4
 8002a52:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002a6c:	4810      	ldr	r0, [pc, #64]	; (8002ab0 <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002a6e:	f002 f845 	bl	8004afc <HAL_DFSDM_ChannelInit>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf14      	ite	ne
 8002a78:	2301      	movne	r3, #1
 8002a7a:	2300      	moveq	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <_ZL14MX_DFSDM1_Initv+0xb2>
  {
    Error_Handler();
 8002a82:	f000 fab9 	bl	8002ff8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8002a86:	2201      	movs	r2, #1
 8002a88:	490b      	ldr	r1, [pc, #44]	; (8002ab8 <_ZL14MX_DFSDM1_Initv+0xe4>)
 8002a8a:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002a8c:	f002 f9d0 	bl	8004e30 <HAL_DFSDM_FilterConfigRegChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZL14MX_DFSDM1_Initv+0xd0>
  {
    Error_Handler();
 8002aa0:	f000 faaa 	bl	8002ff8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000d28 	.word	0x20000d28
 8002aac:	40016100 	.word	0x40016100
 8002ab0:	20000d7c 	.word	0x20000d7c
 8002ab4:	40016040 	.word	0x40016040
 8002ab8:	00020004 	.word	0x00020004

08002abc <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <_ZL15MX_QUADSPI_Initv+0x50>)
 8002ac4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002aea:	4807      	ldr	r0, [pc, #28]	; (8002b08 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002aec:	f003 f994 	bl	8005e18 <HAL_QSPI_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <_ZL15MX_QUADSPI_Initv+0x48>
  {
    Error_Handler();
 8002b00:	f000 fa7a 	bl	8002ff8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000dfc 	.word	0x20000dfc
 8002b0c:	a0001000 	.word	0xa0001000

08002b10 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b2e:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b36:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b56:	481b      	ldr	r0, [pc, #108]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b58:	f005 f918 	bl	8007d8c <HAL_TIM_Base_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002b6c:	f000 fa44 	bl	8002ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4811      	ldr	r0, [pc, #68]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002b7e:	f005 faec 	bl	800815a <HAL_TIM_ConfigClockSource>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8002b92:	f000 fa31 	bl	8002ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b96:	2320      	movs	r3, #32
 8002b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002ba4:	f005 fcfe 	bl	80085a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002bb8:	f000 fa1e 	bl	8002ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000e40 	.word	0x20000e40

08002bc8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002bce:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <_ZL19MX_USART1_UART_Initv+0x64>)
 8002bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002bee:	220c      	movs	r2, #12
 8002bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c0a:	4807      	ldr	r0, [pc, #28]	; (8002c28 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002c0c:	f005 fd70 	bl	80086f0 <HAL_UART_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002c20:	f000 f9ea 	bl	8002ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000e8c 	.word	0x20000e8c
 8002c2c:	40013800 	.word	0x40013800

08002c30 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <_ZL11MX_DMA_Initv+0x48>)
 8002c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3a:	4a0f      	ldr	r2, [pc, #60]	; (8002c78 <_ZL11MX_DMA_Initv+0x48>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6493      	str	r3, [r2, #72]	; 0x48
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <_ZL11MX_DMA_Initv+0x48>)
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	200d      	movs	r0, #13
 8002c54:	f001 fb5c 	bl	8004310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002c58:	200d      	movs	r0, #13
 8002c5a:	f001 fb75 	bl	8004348 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	200e      	movs	r0, #14
 8002c64:	f001 fb54 	bl	8004310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002c68:	200e      	movs	r0, #14
 8002c6a:	f001 fb6d 	bl	8004348 <HAL_NVIC_EnableIRQ>

}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000

08002c7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002c98:	f043 0310 	orr.w	r3, r3, #16
 8002c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	4a32      	ldr	r2, [pc, #200]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cce:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2108      	movs	r1, #8
 8002cf6:	4821      	ldr	r0, [pc, #132]	; (8002d7c <_ZL12MX_GPIO_Initv+0x100>)
 8002cf8:	f002 ff7e 	bl	8005bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d02:	481f      	ldr	r0, [pc, #124]	; (8002d80 <_ZL12MX_GPIO_Initv+0x104>)
 8002d04:	f002 ff78 	bl	8005bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4817      	ldr	r0, [pc, #92]	; (8002d7c <_ZL12MX_GPIO_Initv+0x100>)
 8002d20:	f002 fccc 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4812      	ldr	r0, [pc, #72]	; (8002d84 <_ZL12MX_GPIO_Initv+0x108>)
 8002d3c:	f002 fcbe 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8002d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	4809      	ldr	r0, [pc, #36]	; (8002d80 <_ZL12MX_GPIO_Initv+0x104>)
 8002d5a:	f002 fcaf 	bl	80056bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	2028      	movs	r0, #40	; 0x28
 8002d64:	f001 fad4 	bl	8004310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d68:	2028      	movs	r0, #40	; 0x28
 8002d6a:	f001 faed 	bl	8004348 <HAL_NVIC_EnableIRQ>

}
 8002d6e:	bf00      	nop
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	48001000 	.word	0x48001000
 8002d80:	48000400 	.word	0x48000400
 8002d84:	48000800 	.word	0x48000800

08002d88 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// callback function of GPIO interrupts
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d98:	d11f      	bne.n	8002dda <HAL_GPIO_EXTI_Callback+0x52>
	case BUTTON_Pin:
		switch(main_state) {
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d819      	bhi.n	8002dd8 <HAL_GPIO_EXTI_Callback+0x50>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_GPIO_EXTI_Callback+0x24>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002dc5 	.word	0x08002dc5
 8002db0:	08002dd7 	.word	0x08002dd7
 8002db4:	08002dcd 	.word	0x08002dcd
 8002db8:	08002dd7 	.word	0x08002dd7
 8002dbc:	08002dd7 	.word	0x08002dd7
 8002dc0:	08002dd7 	.word	0x08002dd7
		case READY:
			main_state = RECORDING;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	701a      	strb	r2, [r3, #0]
			break;
 8002dca:	e005      	b.n	8002dd8 <HAL_GPIO_EXTI_Callback+0x50>
		case RECORDING:
//			dfsdm_stop_flag = 1;
			audio_recorder->dfsdm_stop_flag = 1;
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_GPIO_EXTI_Callback+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	731a      	strb	r2, [r3, #12]
			break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_EXTI_Callback+0x50>
		case SETUP:
		case MFCC_TEST:
		case AUDIO_TEST:
		case NN:
			break;
 8002dd6:	bf00      	nop
		}
		break;
 8002dd8:	bf00      	nop
	}
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000f10 	.word	0x20000f10
 8002dec:	20000f78 	.word	0x20000f78

08002df0 <HAL_DAC_ConvHalfCpltCallbackCh1>:

// DAC Circular DMA callback functions
void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d128      	bne.n	8002e54 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002e10:	615a      	str	r2, [r3, #20]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002e1c:	d312      	bcc.n	8002e44 <HAL_DAC_ConvHalfCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 8002e1e:	2100      	movs	r1, #0
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f001 fc77 	bl	8004714 <HAL_DAC_Stop_DMA>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_DAC_ConvHalfCpltCallbackCh1+0x4a>
				Error_Handler();
 8002e36:	f000 f8df 	bl	8002ff8 <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002e42:	e007      	b.n	8002e54 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fe5c 	bl	8001b0c <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40007400 	.word	0x40007400
 8002e60:	20000f80 	.word	0x20000f80

08002e64 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002e7a:	615a      	str	r2, [r3, #20]
	if (hdac->Instance == DAC1) {
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d121      	bne.n	8002eca <HAL_DAC_ConvCpltCallbackCh1+0x66>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002e90:	d312      	bcc.n	8002eb8 <HAL_DAC_ConvCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 8002e92:	2100      	movs	r1, #0
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f001 fc3d 	bl	8004714 <HAL_DAC_Stop_DMA>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_DAC_ConvCpltCallbackCh1+0x4a>
				Error_Handler();
 8002eaa:	f000 f8a5 	bl	8002ff8 <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002eb6:	e008      	b.n	8002eca <HAL_DAC_ConvCpltCallbackCh1+0x66>
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002ec0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fe21 	bl	8001b0c <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000f80 	.word	0x20000f80
 8002ed8:	40007400 	.word	0x40007400

08002edc <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d11f      	bne.n	8002f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fefc 	bl	8001cf4 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002f08:	d310      	bcc.n	8002f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f002 f854 	bl	8004fc0 <HAL_DFSDM_FilterRegularStop_DMA>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 8002f28:	f000 f866 	bl	8002ff8 <Error_Handler>
			}
		}
	}
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000d28 	.word	0x20000d28
 8002f38:	20000f78 	.word	0x20000f78

08002f3c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d120      	bne.n	8002f8e <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002f54:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fecb 	bl	8001cf4 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002f6a:	d310      	bcc.n	8002f8e <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f002 f823 	bl	8004fc0 <HAL_DFSDM_FilterRegularStop_DMA>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 8002f8a:	f000 f835 	bl	8002ff8 <Error_Handler>
			}
		}

	}
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000d28 	.word	0x20000d28
 8002f9c:	20000f78 	.word	0x20000f78

08002fa0 <print>:

void print(const char* txt) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4808      	ldr	r0, [pc, #32]	; (8002fcc <print+0x2c>)
 8002fac:	f00d fb24 	bl	80105f8 <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fd f90d 	bl	80001d0 <strlen>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	230a      	movs	r3, #10
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <print+0x2c>)
 8002fbe:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <print+0x30>)
 8002fc0:	f005 fbe4 	bl	800878c <HAL_UART_Transmit>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000f14 	.word	0x20000f14
 8002fd0:	20000e8c 	.word	0x20000e8c

08002fd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fe6:	f001 f897 	bl	8004118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40014800 	.word	0x40014800

08002ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2108      	movs	r1, #8
 8003000:	4803      	ldr	r0, [pc, #12]	; (8003010 <Error_Handler+0x18>)
 8003002:	f002 fdf9 	bl	8005bf8 <HAL_GPIO_WritePin>
		__BKPT();
 8003006:	be00      	bkpt	0x0000
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800300c:	e7fe      	b.n	800300c <Error_Handler+0x14>
 800300e:	bf00      	nop
 8003010:	48001000 	.word	0x48001000

08003014 <_Z9qspi_readPhmm>:
#include "stm32l4xx_hal.h"
#include "stm32l475e_iot01_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f8bf 	bl	80031a8 <BSP_QSPI_Read>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 800303a:	f7ff ffdd 	bl	8002ff8 <Error_Handler>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8ec 	bl	8003234 <BSP_QSPI_Write>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 800306c:	f7ff ffc4 	bl	8002ff8 <Error_Handler>
	}
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_Z9qspi_initv>:

void qspi_init() {
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 800307c:	f000 f828 	bl	80030d0 <BSP_QSPI_Init>
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}

08003084 <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f94f 	bl	8003330 <BSP_QSPI_Erase_Block>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d90b      	bls.n	80030c8 <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25R6435F_BLOCK_SIZE);
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ffe2 	bl	8003084 <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	3301      	adds	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e7ef      	b.n	80030a8 <_Z17qspi_erase_blocksmm+0xe>
	}
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 80030d8:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <BSP_QSPI_Init+0xd4>)
 80030da:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80030dc:	4830      	ldr	r0, [pc, #192]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 80030de:	f002 ff11 	bl	8005f04 <HAL_QSPI_DeInit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e054      	b.n	8003196 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80030ec:	f000 f964 	bl	80033b8 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 80030f2:	2202      	movs	r2, #2
 80030f4:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 80030f8:	2204      	movs	r2, #4
 80030fa:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 80030fe:	2210      	movs	r2, #16
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003106:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8003126:	3b01      	subs	r3, #1
 8003128:	461a      	mov	r2, r3
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 800312c:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800313a:	4819      	ldr	r0, [pc, #100]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 800313c:	f002 fe6c 	bl	8005e18 <HAL_QSPI_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e025      	b.n	8003196 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800314a:	4815      	ldr	r0, [pc, #84]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 800314c:	f000 f974 	bl	8003438 <QSPI_ResetMemory>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8003156:	2304      	movs	r3, #4
 8003158:	e01d      	b.n	8003196 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800315a:	2101      	movs	r1, #1
 800315c:	4810      	ldr	r0, [pc, #64]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 800315e:	f000 fa35 	bl	80035cc <QSPI_QuadMode>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e014      	b.n	8003196 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800316c:	2101      	movs	r1, #1
 800316e:	480c      	ldr	r0, [pc, #48]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 8003170:	f000 fad4 	bl	800371c <QSPI_HighPerfMode>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e00b      	b.n	8003196 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 8003180:	2201      	movs	r2, #1
 8003182:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003184:	4806      	ldr	r0, [pc, #24]	; (80031a0 <BSP_QSPI_Init+0xd0>)
 8003186:	f002 fe47 	bl	8005e18 <HAL_QSPI_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20001074 	.word	0x20001074
 80031a4:	a0001000 	.word	0xa0001000

080031a8 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b092      	sub	sp, #72	; 0x48
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 80031b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 80031ba:	23eb      	movs	r3, #235	; 0xeb
 80031bc:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 80031be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 80031c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c8:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 80031ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80031d8:	23aa      	movs	r3, #170	; 0xaa
 80031da:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 80031dc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80031e2:	2304      	movs	r3, #4
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80031ee:	2300      	movs	r3, #0
 80031f0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80031f2:	2300      	movs	r3, #0
 80031f4:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031f6:	f107 0310 	add.w	r3, r7, #16
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4619      	mov	r1, r3
 8003200:	480b      	ldr	r0, [pc, #44]	; (8003230 <BSP_QSPI_Read+0x88>)
 8003202:	f002 fea3 	bl	8005f4c <HAL_QSPI_Command>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e00b      	b.n	8003228 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <BSP_QSPI_Read+0x88>)
 8003218:	f002 ff8d 	bl	8006136 <HAL_QSPI_Receive>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3748      	adds	r7, #72	; 0x48
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20001074 	.word	0x20001074

08003234 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b096      	sub	sp, #88	; 0x58
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003248:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800324a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d901      	bls.n	8003256 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8003268:	2338      	movs	r3, #56	; 0x38
 800326a:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800326c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003276:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003278:	2300      	movs	r3, #0
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 800327c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800328a:	2300      	movs	r3, #0
 800328c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800328e:	2300      	movs	r3, #0
 8003290:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8003292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003294:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8003296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003298:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800329a:	4824      	ldr	r0, [pc, #144]	; (800332c <BSP_QSPI_Write+0xf8>)
 800329c:	f000 f910 	bl	80034c0 <QSPI_WriteEnable>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e03b      	b.n	8003322 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4619      	mov	r1, r3
 80032b4:	481d      	ldr	r0, [pc, #116]	; (800332c <BSP_QSPI_Write+0xf8>)
 80032b6:	f002 fe49 	bl	8005f4c <HAL_QSPI_Command>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e02e      	b.n	8003322 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	4818      	ldr	r0, [pc, #96]	; (800332c <BSP_QSPI_Write+0xf8>)
 80032cc:	f002 fe9c 	bl	8006008 <HAL_QSPI_Transmit>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e023      	b.n	8003322 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80032da:	f241 3188 	movw	r1, #5000	; 0x1388
 80032de:	4813      	ldr	r0, [pc, #76]	; (800332c <BSP_QSPI_Write+0xf8>)
 80032e0:	f000 f93a 	bl	8003558 <QSPI_AutoPollingMemReady>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e019      	b.n	8003322 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80032ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	4413      	add	r3, r2
 80032f4:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 80032fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003300:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003306:	429a      	cmp	r2, r3
 8003308:	d203      	bcs.n	8003312 <BSP_QSPI_Write+0xde>
 800330a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800330c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	e001      	b.n	8003316 <BSP_QSPI_Write+0xe2>
 8003312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003316:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8003318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800331a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331c:	429a      	cmp	r2, r3
 800331e:	d3b8      	bcc.n	8003292 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3758      	adds	r7, #88	; 0x58
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20001074 	.word	0x20001074

08003330 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b090      	sub	sp, #64	; 0x40
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 800333e:	23d8      	movs	r3, #216	; 0xd8
 8003340:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8003342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800334c:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003352:	2300      	movs	r3, #0
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003362:	2300      	movs	r3, #0
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003366:	2300      	movs	r3, #0
 8003368:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800336a:	4812      	ldr	r0, [pc, #72]	; (80033b4 <BSP_QSPI_Erase_Block+0x84>)
 800336c:	f000 f8a8 	bl	80034c0 <QSPI_WriteEnable>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e017      	b.n	80033aa <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4619      	mov	r1, r3
 8003384:	480b      	ldr	r0, [pc, #44]	; (80033b4 <BSP_QSPI_Erase_Block+0x84>)
 8003386:	f002 fde1 	bl	8005f4c <HAL_QSPI_Command>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e00a      	b.n	80033aa <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8003394:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003398:	4806      	ldr	r0, [pc, #24]	; (80033b4 <BSP_QSPI_Erase_Block+0x84>)
 800339a:	f000 f8dd 	bl	8003558 <QSPI_AutoPollingMemReady>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3740      	adds	r7, #64	; 0x40
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20001074 	.word	0x20001074

080033b8 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c8:	6513      	str	r3, [r2, #80]	; 0x50
 80033ca:	4b19      	ldr	r3, [pc, #100]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a12      	ldr	r2, [pc, #72]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <BSP_QSPI_MspInit+0x78>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003406:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800340a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003414:	2303      	movs	r3, #3
 8003416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003418:	230a      	movs	r3, #10
 800341a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	4619      	mov	r1, r3
 8003422:	4804      	ldr	r0, [pc, #16]	; (8003434 <BSP_QSPI_MspInit+0x7c>)
 8003424:	f002 f94a 	bl	80056bc <HAL_GPIO_Init>
}
 8003428:	bf00      	nop
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	48001000 	.word	0x48001000

08003438 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b090      	sub	sp, #64	; 0x40
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003444:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8003446:	2366      	movs	r3, #102	; 0x66
 8003448:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800344e:	2300      	movs	r3, #0
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003452:	2300      	movs	r3, #0
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800345e:	2300      	movs	r3, #0
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003462:	2300      	movs	r3, #0
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4619      	mov	r1, r3
 8003470:	4812      	ldr	r0, [pc, #72]	; (80034bc <QSPI_ResetMemory+0x84>)
 8003472:	f002 fd6b 	bl	8005f4c <HAL_QSPI_Command>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e019      	b.n	80034b4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8003480:	2399      	movs	r3, #153	; 0x99
 8003482:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4619      	mov	r1, r3
 800348e:	480b      	ldr	r0, [pc, #44]	; (80034bc <QSPI_ResetMemory+0x84>)
 8003490:	f002 fd5c 	bl	8005f4c <HAL_QSPI_Command>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00a      	b.n	80034b4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800349e:	f241 3188 	movw	r1, #5000	; 0x1388
 80034a2:	4806      	ldr	r0, [pc, #24]	; (80034bc <QSPI_ResetMemory+0x84>)
 80034a4:	f000 f858 	bl	8003558 <QSPI_AutoPollingMemReady>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3740      	adds	r7, #64	; 0x40
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20001074 	.word	0x20001074

080034c0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b096      	sub	sp, #88	; 0x58
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80034c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80034ce:	2306      	movs	r3, #6
 80034d0:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80034da:	2300      	movs	r3, #0
 80034dc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80034e6:	2300      	movs	r3, #0
 80034e8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80034ea:	2300      	movs	r3, #0
 80034ec:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034ee:	f107 0320 	add.w	r3, r7, #32
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4619      	mov	r1, r3
 80034f8:	4816      	ldr	r0, [pc, #88]	; (8003554 <QSPI_WriteEnable+0x94>)
 80034fa:	f002 fd27 	bl	8005f4c <HAL_QSPI_Command>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e020      	b.n	800354a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8003508:	2302      	movs	r3, #2
 800350a:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 800350c:	2302      	movs	r3, #2
 800350e:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003518:	2310      	movs	r3, #16
 800351a:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800351c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003520:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8003522:	2305      	movs	r3, #5
 8003524:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8003526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800352a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800352c:	f107 0208 	add.w	r2, r7, #8
 8003530:	f107 0120 	add.w	r1, r7, #32
 8003534:	f241 3388 	movw	r3, #5000	; 0x1388
 8003538:	4806      	ldr	r0, [pc, #24]	; (8003554 <QSPI_WriteEnable+0x94>)
 800353a:	f002 fe9e 	bl	800627a <HAL_QSPI_AutoPolling>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3758      	adds	r7, #88	; 0x58
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20001074 	.word	0x20001074

08003558 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b096      	sub	sp, #88	; 0x58
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003568:	2305      	movs	r3, #5
 800356a:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800356c:	2300      	movs	r3, #0
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003570:	2300      	movs	r3, #0
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003574:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800357e:	2300      	movs	r3, #0
 8003580:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003582:	2300      	movs	r3, #0
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003586:	2300      	movs	r3, #0
 8003588:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 800358e:	2301      	movs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 800359a:	2310      	movs	r3, #16
 800359c:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800359e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035a2:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80035a4:	f107 0208 	add.w	r2, r7, #8
 80035a8:	f107 0120 	add.w	r1, r7, #32
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4806      	ldr	r0, [pc, #24]	; (80035c8 <QSPI_AutoPollingMemReady+0x70>)
 80035b0:	f002 fe63 	bl	800627a <HAL_QSPI_AutoPolling>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3758      	adds	r7, #88	; 0x58
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20001074 	.word	0x20001074

080035cc <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b092      	sub	sp, #72	; 0x48
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80035de:	2305      	movs	r3, #5
 80035e0:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80035ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 80035f4:	2301      	movs	r3, #1
 80035f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035fc:	2300      	movs	r3, #0
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003600:	2300      	movs	r3, #0
 8003602:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4619      	mov	r1, r3
 800360e:	4842      	ldr	r0, [pc, #264]	; (8003718 <QSPI_QuadMode+0x14c>)
 8003610:	f002 fc9c 	bl	8005f4c <HAL_QSPI_Command>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e077      	b.n	800370e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800361e:	f107 030f 	add.w	r3, r7, #15
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4619      	mov	r1, r3
 8003628:	483b      	ldr	r0, [pc, #236]	; (8003718 <QSPI_QuadMode+0x14c>)
 800362a:	f002 fd84 	bl	8006136 <HAL_QSPI_Receive>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e06a      	b.n	800370e <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003638:	4837      	ldr	r0, [pc, #220]	; (8003718 <QSPI_QuadMode+0x14c>)
 800363a:	f7ff ff41 	bl	80034c0 <QSPI_WriteEnable>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e062      	b.n	800370e <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003654:	b2db      	uxtb	r3, r3
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e004      	b.n	8003664 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003660:	b2db      	uxtb	r3, r3
 8003662:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003668:	f107 0310 	add.w	r3, r7, #16
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4619      	mov	r1, r3
 8003672:	4829      	ldr	r0, [pc, #164]	; (8003718 <QSPI_QuadMode+0x14c>)
 8003674:	f002 fc6a 	bl	8005f4c <HAL_QSPI_Command>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e045      	b.n	800370e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003682:	f107 030f 	add.w	r3, r7, #15
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4619      	mov	r1, r3
 800368c:	4822      	ldr	r0, [pc, #136]	; (8003718 <QSPI_QuadMode+0x14c>)
 800368e:	f002 fcbb 	bl	8006008 <HAL_QSPI_Transmit>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e038      	b.n	800370e <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800369c:	f241 3188 	movw	r1, #5000	; 0x1388
 80036a0:	481d      	ldr	r0, [pc, #116]	; (8003718 <QSPI_QuadMode+0x14c>)
 80036a2:	f7ff ff59 	bl	8003558 <QSPI_AutoPollingMemReady>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e02e      	b.n	800370e <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80036b0:	2305      	movs	r3, #5
 80036b2:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036b4:	f107 0310 	add.w	r3, r7, #16
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4619      	mov	r1, r3
 80036be:	4816      	ldr	r0, [pc, #88]	; (8003718 <QSPI_QuadMode+0x14c>)
 80036c0:	f002 fc44 	bl	8005f4c <HAL_QSPI_Command>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e01f      	b.n	800370e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036ce:	f107 030f 	add.w	r3, r7, #15
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4619      	mov	r1, r3
 80036d8:	480f      	ldr	r0, [pc, #60]	; (8003718 <QSPI_QuadMode+0x14c>)
 80036da:	f002 fd2c 	bl	8006136 <HAL_QSPI_Receive>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e012      	b.n	800370e <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <QSPI_QuadMode+0x12c>
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d007      	beq.n	8003708 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3748      	adds	r7, #72	; 0x48
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20001074 	.word	0x20001074

0800371c <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b092      	sub	sp, #72	; 0x48
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800372e:	2305      	movs	r3, #5
 8003730:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003732:	2300      	movs	r3, #0
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003736:	2300      	movs	r3, #0
 8003738:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800373a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003744:	2301      	movs	r3, #1
 8003746:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800374c:	2300      	movs	r3, #0
 800374e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003750:	2300      	movs	r3, #0
 8003752:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4619      	mov	r1, r3
 800375e:	4853      	ldr	r0, [pc, #332]	; (80038ac <QSPI_HighPerfMode+0x190>)
 8003760:	f002 fbf4 	bl	8005f4c <HAL_QSPI_Command>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e09a      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	f241 3288 	movw	r2, #5000	; 0x1388
 8003776:	4619      	mov	r1, r3
 8003778:	484c      	ldr	r0, [pc, #304]	; (80038ac <QSPI_HighPerfMode+0x190>)
 800377a:	f002 fcdc 	bl	8006136 <HAL_QSPI_Receive>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e08d      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003788:	2315      	movs	r3, #21
 800378a:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 800378c:	2302      	movs	r3, #2
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4619      	mov	r1, r3
 800379a:	4844      	ldr	r0, [pc, #272]	; (80038ac <QSPI_HighPerfMode+0x190>)
 800379c:	f002 fbd6 	bl	8005f4c <HAL_QSPI_Command>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07c      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	3301      	adds	r3, #1
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4619      	mov	r1, r3
 80037b6:	483d      	ldr	r0, [pc, #244]	; (80038ac <QSPI_HighPerfMode+0x190>)
 80037b8:	f002 fcbd 	bl	8006136 <HAL_QSPI_Receive>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06e      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80037c6:	4839      	ldr	r0, [pc, #228]	; (80038ac <QSPI_HighPerfMode+0x190>)
 80037c8:	f7ff fe7a 	bl	80034c0 <QSPI_WriteEnable>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e066      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80037dc:	7bbb      	ldrb	r3, [r7, #14]
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	73bb      	strb	r3, [r7, #14]
 80037e6:	e004      	b.n	80037f2 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80037e8:	7bbb      	ldrb	r3, [r7, #14]
 80037ea:	f023 0302 	bic.w	r3, r3, #2
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80037f2:	2301      	movs	r3, #1
 80037f4:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 80037f6:	2303      	movs	r3, #3
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037fa:	f107 0310 	add.w	r3, r7, #16
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4619      	mov	r1, r3
 8003804:	4829      	ldr	r0, [pc, #164]	; (80038ac <QSPI_HighPerfMode+0x190>)
 8003806:	f002 fba1 	bl	8005f4c <HAL_QSPI_Command>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e047      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4619      	mov	r1, r3
 800381e:	4823      	ldr	r0, [pc, #140]	; (80038ac <QSPI_HighPerfMode+0x190>)
 8003820:	f002 fbf2 	bl	8006008 <HAL_QSPI_Transmit>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e03a      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800382e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003832:	481e      	ldr	r0, [pc, #120]	; (80038ac <QSPI_HighPerfMode+0x190>)
 8003834:	f7ff fe90 	bl	8003558 <QSPI_AutoPollingMemReady>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e030      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003842:	2315      	movs	r3, #21
 8003844:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8003846:	2302      	movs	r3, #2
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800384a:	f107 0310 	add.w	r3, r7, #16
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4619      	mov	r1, r3
 8003854:	4815      	ldr	r0, [pc, #84]	; (80038ac <QSPI_HighPerfMode+0x190>)
 8003856:	f002 fb79 	bl	8005f4c <HAL_QSPI_Command>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e01f      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4619      	mov	r1, r3
 800386e:	480f      	ldr	r0, [pc, #60]	; (80038ac <QSPI_HighPerfMode+0x190>)
 8003870:	f002 fc61 	bl	8006136 <HAL_QSPI_Receive>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e012      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800387e:	7b7b      	ldrb	r3, [r7, #13]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <QSPI_HighPerfMode+0x172>
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d007      	beq.n	800389e <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800388e:	7b7b      	ldrb	r3, [r7, #13]
 8003890:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3748      	adds	r7, #72	; 0x48
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20001074 	.word	0x20001074

080038b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_MspInit+0x44>)
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <HAL_MspInit+0x44>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6613      	str	r3, [r2, #96]	; 0x60
 80038c2:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <HAL_MspInit+0x44>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_MspInit+0x44>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <HAL_MspInit+0x44>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6593      	str	r3, [r2, #88]	; 0x58
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_MspInit+0x44>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_CRC_MspInit+0x38>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10b      	bne.n	8003922 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_CRC_MspInit+0x3c>)
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <HAL_CRC_MspInit+0x3c>)
 8003910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003914:	6493      	str	r3, [r2, #72]	; 0x48
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_CRC_MspInit+0x3c>)
 8003918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023000 	.word	0x40023000
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_DAC_MspInit+0xcc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d14f      	bne.n	80039fa <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800395a:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_DAC_MspInit+0xd0>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <HAL_DAC_MspInit+0xd0>)
 8003960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003964:	6593      	str	r3, [r2, #88]	; 0x58
 8003966:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_DAC_MspInit+0xd0>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003972:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_DAC_MspInit+0xd0>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	4a24      	ldr	r2, [pc, #144]	; (8003a08 <HAL_DAC_MspInit+0xd0>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_DAC_MspInit+0xd0>)
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800398a:	2310      	movs	r3, #16
 800398c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800398e:	2303      	movs	r3, #3
 8003990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	4619      	mov	r1, r3
 800399c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039a0:	f001 fe8c 	bl	80056bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_DAC_MspInit+0xd8>)
 80039a8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039ac:	2206      	movs	r2, #6
 80039ae:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039b2:	2210      	movs	r2, #16
 80039b4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039d0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039d4:	2220      	movs	r2, #32
 80039d6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80039de:	480b      	ldr	r0, [pc, #44]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039e0:	f001 fc36 	bl	8005250 <HAL_DMA_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80039ea:	f7ff fb05 	bl	8002ff8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <HAL_DAC_MspInit+0xd4>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40007400 	.word	0x40007400
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	20000ce0 	.word	0x20000ce0
 8003a10:	40020030 	.word	0x40020030

08003a14 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0ac      	sub	sp, #176	; 0xb0
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2288      	movs	r2, #136	; 0x88
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f00c fca9 	bl	801038c <memset>
  if(DFSDM1_Init == 0)
 8003a3a:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <HAL_DFSDM_FilterMspInit+0x13c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d14b      	bne.n	8003ada <HAL_DFSDM_FilterMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fcde 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8003a5e:	f7ff facb 	bl	8002ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003a62:	4b3c      	ldr	r3, [pc, #240]	; (8003b54 <HAL_DFSDM_FilterMspInit+0x140>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	4a3a      	ldr	r2, [pc, #232]	; (8003b54 <HAL_DFSDM_FilterMspInit+0x140>)
 8003a6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003a6c:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_DFSDM_FilterMspInit+0x140>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d10b      	bne.n	8003a8c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003a74:	4b38      	ldr	r3, [pc, #224]	; (8003b58 <HAL_DFSDM_FilterMspInit+0x144>)
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	4a37      	ldr	r2, [pc, #220]	; (8003b58 <HAL_DFSDM_FilterMspInit+0x144>)
 8003a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	6613      	str	r3, [r2, #96]	; 0x60
 8003a80:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <HAL_DFSDM_FilterMspInit+0x144>)
 8003a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_DFSDM_FilterMspInit+0x144>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	4a31      	ldr	r2, [pc, #196]	; (8003b58 <HAL_DFSDM_FilterMspInit+0x144>)
 8003a92:	f043 0310 	orr.w	r3, r3, #16
 8003a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a98:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <HAL_DFSDM_FilterMspInit+0x144>)
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003aa4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003abe:	2306      	movs	r3, #6
 8003ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ac4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4824      	ldr	r0, [pc, #144]	; (8003b5c <HAL_DFSDM_FilterMspInit+0x148>)
 8003acc:	f001 fdf6 	bl	80056bc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003ad0:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <HAL_DFSDM_FilterMspInit+0x13c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_DFSDM_FilterMspInit+0x13c>)
 8003ad8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d130      	bne.n	8003b46 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003ae6:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <HAL_DFSDM_FilterMspInit+0x154>)
 8003ae8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003aea:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b08:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b10:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b14:	2220      	movs	r2, #32
 8003b16:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003b1e:	4811      	ldr	r0, [pc, #68]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b20:	f001 fb96 	bl	8005250 <HAL_DMA_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8003b2a:	f7ff fa65 	bl	8002ff8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <HAL_DFSDM_FilterMspInit+0x150>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8003b46:	bf00      	nop
 8003b48:	37b0      	adds	r7, #176	; 0xb0
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000f88 	.word	0x20000f88
 8003b54:	20000f84 	.word	0x20000f84
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	48001000 	.word	0x48001000
 8003b60:	40016100 	.word	0x40016100
 8003b64:	20000db4 	.word	0x20000db4
 8003b68:	40020044 	.word	0x40020044

08003b6c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b0ac      	sub	sp, #176	; 0xb0
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	2288      	movs	r2, #136	; 0x88
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f00c fbfd 	bl	801038c <memset>
  if(DFSDM1_Init == 0)
 8003b92:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d14b      	bne.n	8003c32 <HAL_DFSDM_ChannelMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ba6:	f107 0314 	add.w	r3, r7, #20
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fc32 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003bb6:	f7ff fa1f 	bl	8002ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003bc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10b      	bne.n	8003be4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003bea:	f043 0310 	orr.w	r3, r3, #16
 8003bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003bfc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003c16:	2306      	movs	r3, #6
 8003c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c20:	4619      	mov	r1, r3
 8003c22:	4809      	ldr	r0, [pc, #36]	; (8003c48 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8003c24:	f001 fd4a 	bl	80056bc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003c30:	6013      	str	r3, [r2, #0]
  }

}
 8003c32:	bf00      	nop
 8003c34:	37b0      	adds	r7, #176	; 0xb0
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000f88 	.word	0x20000f88
 8003c40:	20000f84 	.word	0x20000f84
 8003c44:	40021000 	.word	0x40021000
 8003c48:	48001000 	.word	0x48001000

08003c4c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_QSPI_MspInit+0x7c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d128      	bne.n	8003cc0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003c6e:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <HAL_QSPI_MspInit+0x80>)
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_QSPI_MspInit+0x80>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6513      	str	r3, [r2, #80]	; 0x50
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_QSPI_MspInit+0x80>)
 8003c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_QSPI_MspInit+0x80>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_QSPI_MspInit+0x80>)
 8003c8c:	f043 0310 	orr.w	r3, r3, #16
 8003c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_QSPI_MspInit+0x80>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003c9e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003ca2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cac:	2303      	movs	r3, #3
 8003cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003cb0:	230a      	movs	r3, #10
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <HAL_QSPI_MspInit+0x84>)
 8003cbc:	f001 fcfe 	bl	80056bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003cc0:	bf00      	nop
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	a0001000 	.word	0xa0001000
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	48001000 	.word	0x48001000

08003cd4 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <HAL_QSPI_MspDeInit+0x30>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10a      	bne.n	8003cfc <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <HAL_QSPI_MspDeInit+0x34>)
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <HAL_QSPI_MspDeInit+0x34>)
 8003cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf0:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003cf2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8003cf6:	4805      	ldr	r0, [pc, #20]	; (8003d0c <HAL_QSPI_MspDeInit+0x38>)
 8003cf8:	f001 fe8a 	bl	8005a10 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	a0001000 	.word	0xa0001000
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	48001000 	.word	0x48001000

08003d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d113      	bne.n	8003d4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_TIM_Base_MspInit+0x44>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_TIM_Base_MspInit+0x44>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_TIM_Base_MspInit+0x44>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	201c      	movs	r0, #28
 8003d40:	f000 fae6 	bl	8004310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d44:	201c      	movs	r0, #28
 8003d46:	f000 faff 	bl	8004348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000

08003d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0ac      	sub	sp, #176	; 0xb0
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d70:	f107 0314 	add.w	r3, r7, #20
 8003d74:	2288      	movs	r2, #136	; 0x88
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f00c fb07 	bl	801038c <memset>
  if(huart->Instance==USART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <HAL_UART_MspInit+0xb0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d13a      	bne.n	8003dfe <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	4618      	mov	r0, r3
 8003d96:	f003 fb3d 	bl	8007414 <HAL_RCCEx_PeriphCLKConfig>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003da0:	f7ff f92a 	bl	8002ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_UART_MspInit+0xb4>)
 8003da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_UART_MspInit+0xb4>)
 8003daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dae:	6613      	str	r3, [r2, #96]	; 0x60
 8003db0:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_UART_MspInit+0xb4>)
 8003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_UART_MspInit+0xb4>)
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc0:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <HAL_UART_MspInit+0xb4>)
 8003dc2:	f043 0302 	orr.w	r3, r3, #2
 8003dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_UART_MspInit+0xb4>)
 8003dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dd4:	23c0      	movs	r3, #192	; 0xc0
 8003dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de6:	2303      	movs	r3, #3
 8003de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dec:	2307      	movs	r3, #7
 8003dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003df6:	4619      	mov	r1, r3
 8003df8:	4805      	ldr	r0, [pc, #20]	; (8003e10 <HAL_UART_MspInit+0xb8>)
 8003dfa:	f001 fc5f 	bl	80056bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003dfe:	bf00      	nop
 8003e00:	37b0      	adds	r7, #176	; 0xb0
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	48000400 	.word	0x48000400

08003e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8003e24:	2200      	movs	r2, #0
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	201a      	movs	r0, #26
 8003e2a:	f000 fa71 	bl	8004310 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003e2e:	201a      	movs	r0, #26
 8003e30:	f000 fa8a 	bl	8004348 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003e34:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_InitTick+0x9c>)
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_InitTick+0x9c>)
 8003e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e3e:	6613      	str	r3, [r2, #96]	; 0x60
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_InitTick+0x9c>)
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e4c:	f107 0210 	add.w	r2, r7, #16
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 fa4a 	bl	80072f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f003 fa32 	bl	80072c4 <HAL_RCC_GetPCLK2Freq>
 8003e60:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <HAL_InitTick+0xa0>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0c9b      	lsrs	r3, r3, #18
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_InitTick+0xa4>)
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <HAL_InitTick+0xa8>)
 8003e74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_InitTick+0xa4>)
 8003e78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e7c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <HAL_InitTick+0xa4>)
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_InitTick+0xa4>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_InitTick+0xa4>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003e90:	4809      	ldr	r0, [pc, #36]	; (8003eb8 <HAL_InitTick+0xa4>)
 8003e92:	f003 ff7b 	bl	8007d8c <HAL_TIM_Base_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d104      	bne.n	8003ea6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003e9c:	4806      	ldr	r0, [pc, #24]	; (8003eb8 <HAL_InitTick+0xa4>)
 8003e9e:	f003 ffcd 	bl	8007e3c <HAL_TIM_Base_Start_IT>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	e000      	b.n	8003ea8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	431bde83 	.word	0x431bde83
 8003eb8:	200010b8 	.word	0x200010b8
 8003ebc:	40014800 	.word	0x40014800

08003ec0 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* Disable TIM17 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_SuspendTick+0x20>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_SuspendTick+0x20>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	60da      	str	r2, [r3, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	200010b8 	.word	0x200010b8

08003ee4 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* Enable TIM17 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_ResumeTick+0x20>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_ResumeTick+0x20>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	60da      	str	r2, [r3, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	200010b8 	.word	0x200010b8

08003f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <NMI_Handler+0x4>

08003f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f12:	e7fe      	b.n	8003f12 <HardFault_Handler+0x4>

08003f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <MemManage_Handler+0x4>

08003f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f1e:	e7fe      	b.n	8003f1e <BusFault_Handler+0x4>

08003f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f24:	e7fe      	b.n	8003f24 <UsageFault_Handler+0x4>

08003f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003f64:	4802      	ldr	r0, [pc, #8]	; (8003f70 <DMA1_Channel3_IRQHandler+0x10>)
 8003f66:	f001 fac9 	bl	80054fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000ce0 	.word	0x20000ce0

08003f74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003f78:	4802      	ldr	r0, [pc, #8]	; (8003f84 <DMA1_Channel4_IRQHandler+0x10>)
 8003f7a:	f001 fabf 	bl	80054fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000db4 	.word	0x20000db4

08003f88 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003f8e:	f003 ffc5 	bl	8007f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200010b8 	.word	0x200010b8

08003f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <TIM2_IRQHandler+0x10>)
 8003fa2:	f003 ffbb 	bl	8007f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000e40 	.word	0x20000e40

08003fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fb8:	f001 fe36 	bl	8005c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
	return 1;
 8003fc4:	2301      	movs	r3, #1
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_kill>:

int _kill(int pid, int sig)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003fda:	f00c f98f 	bl	80102fc <__errno>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2216      	movs	r2, #22
 8003fe2:	601a      	str	r2, [r3, #0]
	return -1;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_exit>:

void _exit (int status)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ffe7 	bl	8003fd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004002:	e7fe      	b.n	8004002 <_exit+0x12>

08004004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <_sbrk+0x5c>)
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <_sbrk+0x60>)
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004018:	4b13      	ldr	r3, [pc, #76]	; (8004068 <_sbrk+0x64>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <_sbrk+0x64>)
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <_sbrk+0x68>)
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <_sbrk+0x64>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d207      	bcs.n	8004044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004034:	f00c f962 	bl	80102fc <__errno>
 8004038:	4603      	mov	r3, r0
 800403a:	220c      	movs	r2, #12
 800403c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	e009      	b.n	8004058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <_sbrk+0x64>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <_sbrk+0x64>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	4a05      	ldr	r2, [pc, #20]	; (8004068 <_sbrk+0x64>)
 8004054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20018000 	.word	0x20018000
 8004064:	00000800 	.word	0x00000800
 8004068:	20000f8c 	.word	0x20000f8c
 800406c:	20001118 	.word	0x20001118

08004070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <SystemInit+0x20>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	4a05      	ldr	r2, [pc, #20]	; (8004090 <SystemInit+0x20>)
 800407c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004098:	f7ff ffea 	bl	8004070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800409c:	480c      	ldr	r0, [pc, #48]	; (80040d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800409e:	490d      	ldr	r1, [pc, #52]	; (80040d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040a0:	4a0d      	ldr	r2, [pc, #52]	; (80040d8 <LoopForever+0xe>)
  movs r3, #0
 80040a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a4:	e002      	b.n	80040ac <LoopCopyDataInit>

080040a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040aa:	3304      	adds	r3, #4

080040ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b0:	d3f9      	bcc.n	80040a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80040b4:	4c0a      	ldr	r4, [pc, #40]	; (80040e0 <LoopForever+0x16>)
  movs r3, #0
 80040b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040b8:	e001      	b.n	80040be <LoopFillZerobss>

080040ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040bc:	3204      	adds	r2, #4

080040be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c0:	d3fb      	bcc.n	80040ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c2:	f00c f921 	bl	8010308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040c6:	f7fd ff59 	bl	8001f7c <main>

080040ca <LoopForever>:

LoopForever:
    b LoopForever
 80040ca:	e7fe      	b.n	80040ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80040cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80040d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d4:	20000c8c 	.word	0x20000c8c
  ldr r2, =_sidata
 80040d8:	08067c94 	.word	0x08067c94
  ldr r2, =_sbss
 80040dc:	20000c8c 	.word	0x20000c8c
  ldr r4, =_ebss
 80040e0:	20001118 	.word	0x20001118

080040e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040e4:	e7fe      	b.n	80040e4 <ADC1_2_IRQHandler>

080040e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f0:	2003      	movs	r0, #3
 80040f2:	f000 f902 	bl	80042fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040f6:	200f      	movs	r0, #15
 80040f8:	f7ff fe8c 	bl	8003e14 <HAL_InitTick>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	71fb      	strb	r3, [r7, #7]
 8004106:	e001      	b.n	800410c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004108:	f7ff fbd2 	bl	80038b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800410c:	79fb      	ldrb	r3, [r7, #7]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_IncTick+0x20>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_IncTick+0x24>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4413      	add	r3, r2
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_IncTick+0x24>)
 800412a:	6013      	str	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000010 	.word	0x20000010
 800413c:	20001104 	.word	0x20001104

08004140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return uwTick;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_GetTick+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20001104 	.word	0x20001104

08004158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004160:	f7ff ffee 	bl	8004140 <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d005      	beq.n	800417e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_Delay+0x44>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800417e:	bf00      	nop
 8004180:	f7ff ffde 	bl	8004140 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	429a      	cmp	r2, r3
 800418e:	d8f7      	bhi.n	8004180 <HAL_Delay+0x28>
  {
  }
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000010 	.word	0x20000010

080041a0 <__NVIC_SetPriorityGrouping>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <__NVIC_SetPriorityGrouping+0x44>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041bc:	4013      	ands	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <__NVIC_SetPriorityGrouping+0x44>)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	60d3      	str	r3, [r2, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <__NVIC_GetPriorityGrouping>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <__NVIC_GetPriorityGrouping+0x18>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	f003 0307 	and.w	r3, r3, #7
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_EnableIRQ>:
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db0b      	blt.n	800422e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	4907      	ldr	r1, [pc, #28]	; (800423c <__NVIC_EnableIRQ+0x38>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2001      	movs	r0, #1
 8004226:	fa00 f202 	lsl.w	r2, r0, r2
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000e100 	.word	0xe000e100

08004240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db0a      	blt.n	800426a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	490c      	ldr	r1, [pc, #48]	; (800428c <__NVIC_SetPriority+0x4c>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	440b      	add	r3, r1
 8004264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004268:	e00a      	b.n	8004280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4908      	ldr	r1, [pc, #32]	; (8004290 <__NVIC_SetPriority+0x50>)
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3b04      	subs	r3, #4
 8004278:	0112      	lsls	r2, r2, #4
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	440b      	add	r3, r1
 800427e:	761a      	strb	r2, [r3, #24]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000e100 	.word	0xe000e100
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f1c3 0307 	rsb	r3, r3, #7
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	bf28      	it	cs
 80042b2:	2304      	movcs	r3, #4
 80042b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d902      	bls.n	80042c4 <NVIC_EncodePriority+0x30>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3b03      	subs	r3, #3
 80042c2:	e000      	b.n	80042c6 <NVIC_EncodePriority+0x32>
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	401a      	ands	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042dc:	f04f 31ff 	mov.w	r1, #4294967295
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43d9      	mvns	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	4313      	orrs	r3, r2
         );
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	; 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff4c 	bl	80041a0 <__NVIC_SetPriorityGrouping>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004322:	f7ff ff61 	bl	80041e8 <__NVIC_GetPriorityGrouping>
 8004326:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	6978      	ldr	r0, [r7, #20]
 800432e:	f7ff ffb1 	bl	8004294 <NVIC_EncodePriority>
 8004332:	4602      	mov	r2, r0
 8004334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff80 	bl	8004240 <__NVIC_SetPriority>
}
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff54 	bl	8004204 <__NVIC_EnableIRQ>
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e054      	b.n	8004420 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7f5b      	ldrb	r3, [r3, #29]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fab6 	bl	80038f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	791b      	ldrb	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_CRC_Init+0xc4>)
 80043a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0218 	bic.w	r2, r2, #24
 80043b0:	609a      	str	r2, [r3, #8]
 80043b2:	e00c      	b.n	80043ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6899      	ldr	r1, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f834 	bl	800442c <HAL_CRCEx_Polynomial_Set>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e028      	b.n	8004420 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	795b      	ldrb	r3, [r3, #5]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	611a      	str	r2, [r3, #16]
 80043e0:	e004      	b.n	80043ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6912      	ldr	r2, [r2, #16]
 80043ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	04c11db7 	.word	0x04c11db7

0800442c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800443c:	231f      	movs	r3, #31
 800443e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004440:	bf00      	nop
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	613a      	str	r2, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_CRCEx_Polynomial_Set+0x34>
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_CRCEx_Polynomial_Set+0x16>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b18      	cmp	r3, #24
 8004464:	d846      	bhi.n	80044f4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_CRCEx_Polynomial_Set+0x40>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044fb 	.word	0x080044fb
 8004470:	080044f5 	.word	0x080044f5
 8004474:	080044f5 	.word	0x080044f5
 8004478:	080044f5 	.word	0x080044f5
 800447c:	080044f5 	.word	0x080044f5
 8004480:	080044f5 	.word	0x080044f5
 8004484:	080044f5 	.word	0x080044f5
 8004488:	080044f5 	.word	0x080044f5
 800448c:	080044e9 	.word	0x080044e9
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080044f5 	.word	0x080044f5
 8004498:	080044f5 	.word	0x080044f5
 800449c:	080044f5 	.word	0x080044f5
 80044a0:	080044f5 	.word	0x080044f5
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044dd 	.word	0x080044dd
 80044b0:	080044f5 	.word	0x080044f5
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044f5 	.word	0x080044f5
 80044bc:	080044f5 	.word	0x080044f5
 80044c0:	080044f5 	.word	0x080044f5
 80044c4:	080044f5 	.word	0x080044f5
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	080044d1 	.word	0x080044d1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d913      	bls.n	80044fe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044da:	e010      	b.n	80044fe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b07      	cmp	r3, #7
 80044e0:	d90f      	bls.n	8004502 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044e6:	e00c      	b.n	8004502 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d90b      	bls.n	8004506 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044f2:	e008      	b.n	8004506 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
      break;
 80044f8:	e006      	b.n	8004508 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044fa:	bf00      	nop
 80044fc:	e004      	b.n	8004508 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80044fe:	bf00      	nop
 8004500:	e002      	b.n	8004508 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004506:	bf00      	nop
  }
  if (status == HAL_OK)
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f023 0118 	bic.w	r1, r3, #24
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
}
 800452c:	4618      	mov	r0, r3
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e014      	b.n	8004574 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	791b      	ldrb	r3, [r3, #4]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff f9ec 	bl	8003938 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	795b      	ldrb	r3, [r3, #5]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_DAC_Start_DMA+0x1e>
 8004596:	2302      	movs	r3, #2
 8004598:	e0ab      	b.n	80046f2 <HAL_DAC_Start_DMA+0x176>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2202      	movs	r2, #2
 80045a4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d12f      	bne.n	800460c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a52      	ldr	r2, [pc, #328]	; (80046fc <HAL_DAC_Start_DMA+0x180>)
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a51      	ldr	r2, [pc, #324]	; (8004700 <HAL_DAC_Start_DMA+0x184>)
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a50      	ldr	r2, [pc, #320]	; (8004704 <HAL_DAC_Start_DMA+0x188>)
 80045c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d013      	beq.n	8004602 <HAL_DAC_Start_DMA+0x86>
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d845      	bhi.n	800466c <HAL_DAC_Start_DMA+0xf0>
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_DAC_Start_DMA+0x72>
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d005      	beq.n	80045f8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80045ec:	e03e      	b.n	800466c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	613b      	str	r3, [r7, #16]
        break;
 80045f6:	e03c      	b.n	8004672 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	613b      	str	r3, [r7, #16]
        break;
 8004600:	e037      	b.n	8004672 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3310      	adds	r3, #16
 8004608:	613b      	str	r3, [r7, #16]
        break;
 800460a:	e032      	b.n	8004672 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a3d      	ldr	r2, [pc, #244]	; (8004708 <HAL_DAC_Start_DMA+0x18c>)
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a3c      	ldr	r2, [pc, #240]	; (800470c <HAL_DAC_Start_DMA+0x190>)
 800461a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a3b      	ldr	r2, [pc, #236]	; (8004710 <HAL_DAC_Start_DMA+0x194>)
 8004622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b08      	cmp	r3, #8
 8004638:	d013      	beq.n	8004662 <HAL_DAC_Start_DMA+0xe6>
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d817      	bhi.n	8004670 <HAL_DAC_Start_DMA+0xf4>
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_DAC_Start_DMA+0xd2>
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2b04      	cmp	r3, #4
 800464a:	d005      	beq.n	8004658 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800464c:	e010      	b.n	8004670 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3314      	adds	r3, #20
 8004654:	613b      	str	r3, [r7, #16]
        break;
 8004656:	e00c      	b.n	8004672 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3318      	adds	r3, #24
 800465e:	613b      	str	r3, [r7, #16]
        break;
 8004660:	e007      	b.n	8004672 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	331c      	adds	r3, #28
 8004668:	613b      	str	r3, [r7, #16]
        break;
 800466a:	e002      	b.n	8004672 <HAL_DAC_Start_DMA+0xf6>
        break;
 800466c:	bf00      	nop
 800466e:	e000      	b.n	8004672 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004670:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d111      	bne.n	800469c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004686:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6898      	ldr	r0, [r3, #8]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	f000 fe95 	bl	80053c0 <HAL_DMA_Start_IT>
 8004696:	4603      	mov	r3, r0
 8004698:	75fb      	strb	r3, [r7, #23]
 800469a:	e010      	b.n	80046be <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68d8      	ldr	r0, [r3, #12]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	f000 fe83 	bl	80053c0 <HAL_DMA_Start_IT>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10c      	bne.n	80046e4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2201      	movs	r2, #1
 80046d8:	409a      	lsls	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e005      	b.n	80046f0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f043 0204 	orr.w	r2, r3, #4
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	080049e7 	.word	0x080049e7
 8004700:	08004a09 	.word	0x08004a09
 8004704:	08004a25 	.word	0x08004a25
 8004708:	08004a8f 	.word	0x08004a8f
 800470c:	08004ab1 	.word	0x08004ab1
 8004710:	08004acd 	.word	0x08004acd

08004714 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2201      	movs	r2, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	400a      	ands	r2, r1
 8004756:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fe8c 	bl	8005480 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e00c      	b.n	8004794 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe7e 	bl	8005480 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004792:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b088      	sub	sp, #32
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	795b      	ldrb	r3, [r3, #5]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_DAC_ConfigChannel+0x1c>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e107      	b.n	80049de <HAL_DAC_ConfigChannel+0x22c>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2202      	movs	r2, #2
 80047d8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d174      	bne.n	80048cc <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80047e2:	f7ff fcad 	bl	8004140 <HAL_GetTick>
 80047e6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d134      	bne.n	8004858 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80047ee:	e011      	b.n	8004814 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80047f0:	f7ff fca6 	bl	8004140 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d90a      	bls.n	8004814 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f043 0208 	orr.w	r2, r3, #8
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2203      	movs	r2, #3
 800480e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0e4      	b.n	80049de <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e6      	bne.n	80047f0 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004822:	2001      	movs	r0, #1
 8004824:	f7ff fc98 	bl	8004158 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	6992      	ldr	r2, [r2, #24]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
 8004832:	e01e      	b.n	8004872 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004834:	f7ff fc84 	bl	8004140 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d90a      	bls.n	8004858 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f043 0208 	orr.w	r2, r3, #8
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2203      	movs	r2, #3
 8004852:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e0c2      	b.n	80049de <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	2b00      	cmp	r3, #0
 8004860:	dbe8      	blt.n	8004834 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004862:	2001      	movs	r0, #1
 8004864:	f7ff fc78 	bl	8004158 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	6992      	ldr	r2, [r2, #24]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	ea02 0103 	and.w	r1, r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	21ff      	movs	r1, #255	; 0xff
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	ea02 0103 	and.w	r1, r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	409a      	lsls	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d11d      	bne.n	8004910 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	221f      	movs	r2, #31
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2207      	movs	r2, #7
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	431a      	orrs	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43da      	mvns	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	400a      	ands	r2, r1
 8004974:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6819      	ldr	r1, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	22c0      	movs	r2, #192	; 0xc0
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43da      	mvns	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	400a      	ands	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7fe fa35 	bl	8002e64 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	711a      	strb	r2, [r3, #4]
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f7fe f9ea 	bl	8002df0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff fead 	bl	800479e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	711a      	strb	r2, [r3, #4]
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7ff ffd8 	bl	8004a52 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	711a      	strb	r2, [r3, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ffd1 	bl	8004a66 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f043 0204 	orr.w	r2, r3, #4
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff ffc7 	bl	8004a7a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	711a      	strb	r2, [r3, #4]
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e0ac      	b.n	8004c68 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 faac 	bl	8005070 <DFSDM_GetChannelFromInstance>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4a55      	ldr	r2, [pc, #340]	; (8004c70 <HAL_DFSDM_ChannelInit+0x174>)
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e09f      	b.n	8004c68 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff f81f 	bl	8003b6c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004b2e:	4b51      	ldr	r3, [pc, #324]	; (8004c74 <HAL_DFSDM_ChannelInit+0x178>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a4f      	ldr	r2, [pc, #316]	; (8004c74 <HAL_DFSDM_ChannelInit+0x178>)
 8004b36:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004b38:	4b4e      	ldr	r3, [pc, #312]	; (8004c74 <HAL_DFSDM_ChannelInit+0x178>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d125      	bne.n	8004b8c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004b40:	4b4d      	ldr	r3, [pc, #308]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a4c      	ldr	r2, [pc, #304]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b4a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004b4c:	4b4a      	ldr	r3, [pc, #296]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	4948      	ldr	r1, [pc, #288]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004b5a:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a46      	ldr	r2, [pc, #280]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b60:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004b64:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	791b      	ldrb	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d108      	bne.n	8004b80 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004b6e:	4b42      	ldr	r3, [pc, #264]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	493f      	ldr	r1, [pc, #252]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004b80:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8004b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004b9a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004baa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004bb0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 020f 	bic.w	r2, r2, #15
 8004bc8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004bf0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6899      	ldr	r1, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	3b01      	subs	r3, #1
 8004c02:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f002 0207 	and.w	r2, r2, #7
 8004c1c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c48:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa0a 	bl	8005070 <DFSDM_GetChannelFromInstance>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4904      	ldr	r1, [pc, #16]	; (8004c70 <HAL_DFSDM_ChannelInit+0x174>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000f94 	.word	0x20000f94
 8004c74:	20000f90 	.word	0x20000f90
 8004c78:	40016000 	.word	0x40016000

08004c7c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0ca      	b.n	8004e24 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a66      	ldr	r2, [pc, #408]	; (8004e2c <HAL_DFSDM_FilterInit+0x1b0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d109      	bne.n	8004cac <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d003      	beq.n	8004ca8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0bb      	b.n	8004e24 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fe fea5 	bl	8003a14 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004cd8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	7a1b      	ldrb	r3, [r3, #8]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d108      	bne.n	8004cf4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e007      	b.n	8004d04 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004d02:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7a5b      	ldrb	r3, [r3, #9]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d108      	bne.n	8004d1e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e007      	b.n	8004d2e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8004d3c:	f023 0308 	bic.w	r3, r3, #8
 8004d40:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d108      	bne.n	8004d5c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7c1b      	ldrb	r3, [r3, #16]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d108      	bne.n	8004d76 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0210 	orr.w	r2, r2, #16
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e007      	b.n	8004d86 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0210 	bic.w	r2, r2, #16
 8004d84:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7c5b      	ldrb	r3, [r3, #17]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d108      	bne.n	8004da0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0220 	orr.w	r2, r2, #32
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e007      	b.n	8004db0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0220 	bic.w	r2, r2, #32
 8004dae:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8004dbe:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004dc2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6959      	ldr	r1, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004dd6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004dde:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7c1a      	ldrb	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40016100 	.word	0x40016100

08004e30 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d02e      	beq.n	8004ea8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004e50:	2bff      	cmp	r3, #255	; 0xff
 8004e52:	d029      	beq.n	8004ea8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e66:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10d      	bne.n	8004e8a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e00a      	b.n	8004ea0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea6:	e001      	b.n	8004eac <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
 8004edc:	e064      	b.n	8004fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eec:	d002      	beq.n	8004ef4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
 8004ef2:	e059      	b.n	8004fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10e      	bne.n	8004f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d002      	beq.n	8004f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
 8004f18:	e046      	b.n	8004fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d107      	bne.n	8004f3a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d102      	bne.n	8004f3a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
 8004f38:	e036      	b.n	8004fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d004      	beq.n	8004f4e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d12a      	bne.n	8004fa4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	4a18      	ldr	r2, [pc, #96]	; (8004fb4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d101      	bne.n	8004f6c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8004f6a:	e000      	b.n	8004f6e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8004f6c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	331c      	adds	r3, #28
 8004f7e:	4619      	mov	r1, r3
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f000 fa1c 	bl	80053c0 <HAL_DMA_Start_IT>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	22ff      	movs	r2, #255	; 0xff
 8004f92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004f9a:	e005      	b.n	8004fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f8b3 	bl	8005108 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004fa2:	e001      	b.n	8004fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	08005031 	.word	0x08005031
 8004fb8:	0800504d 	.word	0x0800504d
 8004fbc:	08005015 	.word	0x08005015

08004fc0 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d007      	beq.n	8004fe6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d002      	beq.n	8004fe6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e007      	b.n	8004ff6 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fa48 	bl	8005480 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8df 	bl	80051b4 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7fd ff5a 	bl	8002edc <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7fd ff7c 	bl	8002f3c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2203      	movs	r2, #3
 800505e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff ffcd 	bl	8005000 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <DFSDM_GetChannelFromInstance+0x7c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d102      	bne.n	8005086 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e02b      	b.n	80050de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <DFSDM_GetChannelFromInstance+0x80>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d102      	bne.n	8005094 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e024      	b.n	80050de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <DFSDM_GetChannelFromInstance+0x84>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d102      	bne.n	80050a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800509c:	2302      	movs	r3, #2
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e01d      	b.n	80050de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <DFSDM_GetChannelFromInstance+0x88>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d102      	bne.n	80050b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80050aa:	2304      	movs	r3, #4
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e016      	b.n	80050de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <DFSDM_GetChannelFromInstance+0x8c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d102      	bne.n	80050be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80050b8:	2305      	movs	r3, #5
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e00f      	b.n	80050de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a0f      	ldr	r2, [pc, #60]	; (8005100 <DFSDM_GetChannelFromInstance+0x90>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d102      	bne.n	80050cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80050c6:	2306      	movs	r3, #6
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e008      	b.n	80050de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0d      	ldr	r2, [pc, #52]	; (8005104 <DFSDM_GetChannelFromInstance+0x94>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d102      	bne.n	80050da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80050d4:	2307      	movs	r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e001      	b.n	80050de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80050da:	2303      	movs	r3, #3
 80050dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80050de:	68fb      	ldr	r3, [r7, #12]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40016000 	.word	0x40016000
 80050f0:	40016020 	.word	0x40016020
 80050f4:	40016040 	.word	0x40016040
 80050f8:	40016080 	.word	0x40016080
 80050fc:	400160a0 	.word	0x400160a0
 8005100:	400160c0 	.word	0x400160c0
 8005104:	400160e0 	.word	0x400160e0

08005108 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	2b00      	cmp	r3, #0
 8005116:	d108      	bne.n	800512a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e033      	b.n	8005192 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005148:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005160:	2b03      	cmp	r3, #3
 8005162:	d116      	bne.n	8005192 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d107      	bne.n	800517c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0202 	orr.w	r2, r2, #2
 800517a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8005182:	2b01      	cmp	r3, #1
 8005184:	d102      	bne.n	800518c <DFSDM_RegConvStart+0x84>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	e000      	b.n	800518e <DFSDM_RegConvStart+0x86>
 800518c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <DFSDM_RegConvStart+0x98>
 800519c:	2202      	movs	r2, #2
 800519e:	e000      	b.n	80051a2 <DFSDM_RegConvStart+0x9a>
 80051a0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d116      	bne.n	800522c <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	2b00      	cmp	r3, #0
 8005204:	d107      	bne.n	8005216 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0202 	orr.w	r2, r2, #2
 8005214:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 800521c:	2b01      	cmp	r3, #1
 800521e:	d102      	bne.n	8005226 <DFSDM_RegConvStop+0x72>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	e000      	b.n	8005228 <DFSDM_RegConvStop+0x74>
 8005226:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8005232:	2b02      	cmp	r3, #2
 8005234:	d101      	bne.n	800523a <DFSDM_RegConvStop+0x86>
 8005236:	2201      	movs	r2, #1
 8005238:	e000      	b.n	800523c <DFSDM_RegConvStop+0x88>
 800523a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e098      	b.n	8005394 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	4b4d      	ldr	r3, [pc, #308]	; (80053a0 <HAL_DMA_Init+0x150>)
 800526a:	429a      	cmp	r2, r3
 800526c:	d80f      	bhi.n	800528e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_DMA_Init+0x154>)
 8005276:	4413      	add	r3, r2
 8005278:	4a4b      	ldr	r2, [pc, #300]	; (80053a8 <HAL_DMA_Init+0x158>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	009a      	lsls	r2, r3, #2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a48      	ldr	r2, [pc, #288]	; (80053ac <HAL_DMA_Init+0x15c>)
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
 800528c:	e00e      	b.n	80052ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	4b46      	ldr	r3, [pc, #280]	; (80053b0 <HAL_DMA_Init+0x160>)
 8005296:	4413      	add	r3, r2
 8005298:	4a43      	ldr	r2, [pc, #268]	; (80053a8 <HAL_DMA_Init+0x158>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	009a      	lsls	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a42      	ldr	r2, [pc, #264]	; (80053b4 <HAL_DMA_Init+0x164>)
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005306:	d039      	beq.n	800537c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	4a27      	ldr	r2, [pc, #156]	; (80053ac <HAL_DMA_Init+0x15c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d11a      	bne.n	8005348 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005312:	4b29      	ldr	r3, [pc, #164]	; (80053b8 <HAL_DMA_Init+0x168>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f003 031c 	and.w	r3, r3, #28
 800531e:	210f      	movs	r1, #15
 8005320:	fa01 f303 	lsl.w	r3, r1, r3
 8005324:	43db      	mvns	r3, r3
 8005326:	4924      	ldr	r1, [pc, #144]	; (80053b8 <HAL_DMA_Init+0x168>)
 8005328:	4013      	ands	r3, r2
 800532a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800532c:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <HAL_DMA_Init+0x168>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	f003 031c 	and.w	r3, r3, #28
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	491d      	ldr	r1, [pc, #116]	; (80053b8 <HAL_DMA_Init+0x168>)
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]
 8005346:	e019      	b.n	800537c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005348:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <HAL_DMA_Init+0x16c>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	f003 031c 	and.w	r3, r3, #28
 8005354:	210f      	movs	r1, #15
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	43db      	mvns	r3, r3
 800535c:	4917      	ldr	r1, [pc, #92]	; (80053bc <HAL_DMA_Init+0x16c>)
 800535e:	4013      	ands	r3, r2
 8005360:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005362:	4b16      	ldr	r3, [pc, #88]	; (80053bc <HAL_DMA_Init+0x16c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f003 031c 	and.w	r3, r3, #28
 8005372:	fa01 f303 	lsl.w	r3, r1, r3
 8005376:	4911      	ldr	r1, [pc, #68]	; (80053bc <HAL_DMA_Init+0x16c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	40020407 	.word	0x40020407
 80053a4:	bffdfff8 	.word	0xbffdfff8
 80053a8:	cccccccd 	.word	0xcccccccd
 80053ac:	40020000 	.word	0x40020000
 80053b0:	bffdfbf8 	.word	0xbffdfbf8
 80053b4:	40020400 	.word	0x40020400
 80053b8:	400200a8 	.word	0x400200a8
 80053bc:	400204a8 	.word	0x400204a8

080053c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_DMA_Start_IT+0x20>
 80053dc:	2302      	movs	r3, #2
 80053de:	e04b      	b.n	8005478 <HAL_DMA_Start_IT+0xb8>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d13a      	bne.n	800546a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f91e 	bl	800565a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 020e 	orr.w	r2, r2, #14
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e00f      	b.n	8005458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 020a 	orr.w	r2, r2, #10
 8005456:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e005      	b.n	8005476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d008      	beq.n	80054aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2204      	movs	r2, #4
 800549c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e022      	b.n	80054f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 020e 	bic.w	r2, r2, #14
 80054b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	f003 021c 	and.w	r2, r3, #28
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2101      	movs	r1, #1
 80054d8:	fa01 f202 	lsl.w	r2, r1, r2
 80054dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f003 031c 	and.w	r3, r3, #28
 800551c:	2204      	movs	r2, #4
 800551e:	409a      	lsls	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d026      	beq.n	8005576 <HAL_DMA_IRQHandler+0x7a>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d021      	beq.n	8005576 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0204 	bic.w	r2, r2, #4
 800554e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	f003 021c 	and.w	r2, r3, #28
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2104      	movs	r1, #4
 800555e:	fa01 f202 	lsl.w	r2, r1, r2
 8005562:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	2b00      	cmp	r3, #0
 800556a:	d071      	beq.n	8005650 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005574:	e06c      	b.n	8005650 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	f003 031c 	and.w	r3, r3, #28
 800557e:	2202      	movs	r2, #2
 8005580:	409a      	lsls	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d02e      	beq.n	80055e8 <HAL_DMA_IRQHandler+0xec>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d029      	beq.n	80055e8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 020a 	bic.w	r2, r2, #10
 80055b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f003 021c 	and.w	r2, r3, #28
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	2102      	movs	r1, #2
 80055c8:	fa01 f202 	lsl.w	r2, r1, r2
 80055cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d038      	beq.n	8005650 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80055e6:	e033      	b.n	8005650 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ec:	f003 031c 	and.w	r3, r3, #28
 80055f0:	2208      	movs	r2, #8
 80055f2:	409a      	lsls	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02a      	beq.n	8005652 <HAL_DMA_IRQHandler+0x156>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d025      	beq.n	8005652 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 020e 	bic.w	r2, r2, #14
 8005614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f003 021c 	and.w	r2, r3, #28
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f202 	lsl.w	r2, r1, r2
 8005628:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005650:	bf00      	nop
 8005652:	bf00      	nop
}
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	f003 021c 	and.w	r2, r3, #28
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f202 	lsl.w	r2, r1, r2
 800567a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b10      	cmp	r3, #16
 800568a:	d108      	bne.n	800569e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800569c:	e007      	b.n	80056ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	60da      	str	r2, [r3, #12]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ca:	e17f      	b.n	80059cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	2101      	movs	r1, #1
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8171 	beq.w	80059c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d005      	beq.n	80056fc <HAL_GPIO_Init+0x40>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d130      	bne.n	800575e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	2203      	movs	r2, #3
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4013      	ands	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005732:	2201      	movs	r2, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4013      	ands	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	f003 0201 	and.w	r2, r3, #1
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b03      	cmp	r3, #3
 8005768:	d118      	bne.n	800579c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005770:	2201      	movs	r2, #1
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4013      	ands	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	f003 0201 	and.w	r2, r3, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d017      	beq.n	80057d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d123      	bne.n	800582c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	08da      	lsrs	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3208      	adds	r2, #8
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	220f      	movs	r2, #15
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4013      	ands	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	08da      	lsrs	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3208      	adds	r2, #8
 8005826:	6939      	ldr	r1, [r7, #16]
 8005828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0203 	and.w	r2, r3, #3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80ac 	beq.w	80059c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586e:	4b5f      	ldr	r3, [pc, #380]	; (80059ec <HAL_GPIO_Init+0x330>)
 8005870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005872:	4a5e      	ldr	r2, [pc, #376]	; (80059ec <HAL_GPIO_Init+0x330>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	6613      	str	r3, [r2, #96]	; 0x60
 800587a:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <HAL_GPIO_Init+0x330>)
 800587c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005886:	4a5a      	ldr	r2, [pc, #360]	; (80059f0 <HAL_GPIO_Init+0x334>)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	3302      	adds	r3, #2
 800588e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005892:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	220f      	movs	r2, #15
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058b0:	d025      	beq.n	80058fe <HAL_GPIO_Init+0x242>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a4f      	ldr	r2, [pc, #316]	; (80059f4 <HAL_GPIO_Init+0x338>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01f      	beq.n	80058fa <HAL_GPIO_Init+0x23e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a4e      	ldr	r2, [pc, #312]	; (80059f8 <HAL_GPIO_Init+0x33c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d019      	beq.n	80058f6 <HAL_GPIO_Init+0x23a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4d      	ldr	r2, [pc, #308]	; (80059fc <HAL_GPIO_Init+0x340>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_GPIO_Init+0x236>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a4c      	ldr	r2, [pc, #304]	; (8005a00 <HAL_GPIO_Init+0x344>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00d      	beq.n	80058ee <HAL_GPIO_Init+0x232>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a4b      	ldr	r2, [pc, #300]	; (8005a04 <HAL_GPIO_Init+0x348>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <HAL_GPIO_Init+0x22e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a4a      	ldr	r2, [pc, #296]	; (8005a08 <HAL_GPIO_Init+0x34c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <HAL_GPIO_Init+0x22a>
 80058e2:	2306      	movs	r3, #6
 80058e4:	e00c      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058e6:	2307      	movs	r3, #7
 80058e8:	e00a      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058ea:	2305      	movs	r3, #5
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058ee:	2304      	movs	r3, #4
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x244>
 80058fe:	2300      	movs	r3, #0
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005910:	4937      	ldr	r1, [pc, #220]	; (80059f0 <HAL_GPIO_Init+0x334>)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	43db      	mvns	r3, r3
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005942:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005948:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	43db      	mvns	r3, r3
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4013      	ands	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	43db      	mvns	r3, r3
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4013      	ands	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_GPIO_Init+0x350>)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_GPIO_Init+0x350>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4013      	ands	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059c0:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <HAL_GPIO_Init+0x350>)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3301      	adds	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	fa22 f303 	lsr.w	r3, r2, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f47f ae78 	bne.w	80056cc <HAL_GPIO_Init+0x10>
  }
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40010000 	.word	0x40010000
 80059f4:	48000400 	.word	0x48000400
 80059f8:	48000800 	.word	0x48000800
 80059fc:	48000c00 	.word	0x48000c00
 8005a00:	48001000 	.word	0x48001000
 8005a04:	48001400 	.word	0x48001400
 8005a08:	48001800 	.word	0x48001800
 8005a0c:	40010400 	.word	0x40010400

08005a10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005a1e:	e0cd      	b.n	8005bbc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a20:	2201      	movs	r2, #1
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80c0 	beq.w	8005bb6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005a36:	4a68      	ldr	r2, [pc, #416]	; (8005bd8 <HAL_GPIO_DeInit+0x1c8>)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	089b      	lsrs	r3, r3, #2
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a42:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4013      	ands	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a5e:	d025      	beq.n	8005aac <HAL_GPIO_DeInit+0x9c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a5e      	ldr	r2, [pc, #376]	; (8005bdc <HAL_GPIO_DeInit+0x1cc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d01f      	beq.n	8005aa8 <HAL_GPIO_DeInit+0x98>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a5d      	ldr	r2, [pc, #372]	; (8005be0 <HAL_GPIO_DeInit+0x1d0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d019      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x94>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a5c      	ldr	r2, [pc, #368]	; (8005be4 <HAL_GPIO_DeInit+0x1d4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_GPIO_DeInit+0x90>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a5b      	ldr	r2, [pc, #364]	; (8005be8 <HAL_GPIO_DeInit+0x1d8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00d      	beq.n	8005a9c <HAL_GPIO_DeInit+0x8c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a5a      	ldr	r2, [pc, #360]	; (8005bec <HAL_GPIO_DeInit+0x1dc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d007      	beq.n	8005a98 <HAL_GPIO_DeInit+0x88>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a59      	ldr	r2, [pc, #356]	; (8005bf0 <HAL_GPIO_DeInit+0x1e0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <HAL_GPIO_DeInit+0x84>
 8005a90:	2306      	movs	r3, #6
 8005a92:	e00c      	b.n	8005aae <HAL_GPIO_DeInit+0x9e>
 8005a94:	2307      	movs	r3, #7
 8005a96:	e00a      	b.n	8005aae <HAL_GPIO_DeInit+0x9e>
 8005a98:	2305      	movs	r3, #5
 8005a9a:	e008      	b.n	8005aae <HAL_GPIO_DeInit+0x9e>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	e006      	b.n	8005aae <HAL_GPIO_DeInit+0x9e>
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e004      	b.n	8005aae <HAL_GPIO_DeInit+0x9e>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e002      	b.n	8005aae <HAL_GPIO_DeInit+0x9e>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_GPIO_DeInit+0x9e>
 8005aac:	2300      	movs	r3, #0
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	f002 0203 	and.w	r2, r2, #3
 8005ab4:	0092      	lsls	r2, r2, #2
 8005ab6:	4093      	lsls	r3, r2
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d132      	bne.n	8005b24 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005abe:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	494b      	ldr	r1, [pc, #300]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005acc:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	4947      	ldr	r1, [pc, #284]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005ada:	4b46      	ldr	r3, [pc, #280]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	4944      	ldr	r1, [pc, #272]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005ae8:	4b42      	ldr	r3, [pc, #264]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	4940      	ldr	r1, [pc, #256]	; (8005bf4 <HAL_GPIO_DeInit+0x1e4>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	220f      	movs	r2, #15
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005b06:	4a34      	ldr	r2, [pc, #208]	; (8005bd8 <HAL_GPIO_DeInit+0x1c8>)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43da      	mvns	r2, r3
 8005b16:	4830      	ldr	r0, [pc, #192]	; (8005bd8 <HAL_GPIO_DeInit+0x1c8>)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	400a      	ands	r2, r1
 8005b1e:	3302      	adds	r3, #2
 8005b20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	2103      	movs	r1, #3
 8005b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	08da      	lsrs	r2, r3, #3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3208      	adds	r2, #8
 8005b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	08d2      	lsrs	r2, r2, #3
 8005b58:	4019      	ands	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3208      	adds	r2, #8
 8005b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	2103      	movs	r1, #3
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	401a      	ands	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	fa01 f303 	lsl.w	r3, r1, r3
 8005b84:	43db      	mvns	r3, r3
 8005b86:	401a      	ands	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	2103      	movs	r1, #3
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	401a      	ands	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	401a      	ands	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f47f af2b 	bne.w	8005a20 <HAL_GPIO_DeInit+0x10>
  }
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	48000400 	.word	0x48000400
 8005be0:	48000800 	.word	0x48000800
 8005be4:	48000c00 	.word	0x48000c00
 8005be8:	48001000 	.word	0x48001000
 8005bec:	48001400 	.word	0x48001400
 8005bf0:	48001800 	.word	0x48001800
 8005bf4:	40010400 	.word	0x40010400

08005bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
 8005c04:	4613      	mov	r3, r2
 8005c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c08:	787b      	ldrb	r3, [r7, #1]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c0e:	887a      	ldrh	r2, [r7, #2]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c14:	e002      	b.n	8005c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c16:	887a      	ldrh	r2, [r7, #2]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c34:	695a      	ldr	r2, [r3, #20]
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d006      	beq.n	8005c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd f89e 	bl	8002d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40010400 	.word	0x40010400

08005c58 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10c      	bne.n	8005c84 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005c6a:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c76:	d10e      	bne.n	8005c96 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005c78:	f000 f896 	bl	8005da8 <HAL_PWREx_DisableLowPowerRunMode>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8005c82:	e016      	b.n	8005cb2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c90:	d001      	beq.n	8005c96 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005c92:	f000 f879 	bl	8005d88 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <HAL_PWR_EnterSLEEPMode+0x64>)
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <HAL_PWR_EnterSLEEPMode+0x64>)
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005ca8:	bf30      	wfi
 8005caa:	e002      	b.n	8005cb2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005cac:	bf40      	sev
    __WFE();
 8005cae:	bf20      	wfe
    __WFE();
 8005cb0:	bf20      	wfe
  }

}
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40007000 	.word	0x40007000
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40007000 	.word	0x40007000

08005cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cea:	d130      	bne.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cec:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf8:	d038      	beq.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d02:	4a1e      	ldr	r2, [pc, #120]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2232      	movs	r2, #50	; 0x32
 8005d10:	fb02 f303 	mul.w	r3, r2, r3
 8005d14:	4a1b      	ldr	r2, [pc, #108]	; (8005d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	0c9b      	lsrs	r3, r3, #18
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d20:	e002      	b.n	8005d28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d34:	d102      	bne.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f2      	bne.n	8005d22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d48:	d110      	bne.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e00f      	b.n	8005d6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5a:	d007      	beq.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d64:	4a05      	ldr	r2, [pc, #20]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40007000 	.word	0x40007000
 8005d80:	20000008 	.word	0x20000008
 8005d84:	431bde83 	.word	0x431bde83

08005d88 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40007000 	.word	0x40007000

08005da8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005dae:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2232      	movs	r2, #50	; 0x32
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0c9b      	lsrs	r3, r3, #18
 8005dcc:	3301      	adds	r3, #1
 8005dce:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005dd0:	e002      	b.n	8005dd8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005dd8:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de4:	d102      	bne.n	8005dec <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f2      	bne.n	8005dd2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005dec:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df8:	d101      	bne.n	8005dfe <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e000      	b.n	8005e00 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	20000008 	.word	0x20000008
 8005e14:	431bde83 	.word	0x431bde83

08005e18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005e20:	f7fe f98e 	bl	8004140 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e063      	b.n	8005ef8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fd ff01 	bl	8003c4c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005e4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 faf7 	bl	8006442 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	021a      	lsls	r2, r3, #8
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	2120      	movs	r1, #32
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 faef 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d131      	bne.n	8005eee <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e94:	f023 0310 	bic.w	r3, r3, #16
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6852      	ldr	r2, [r2, #4]
 8005e9c:	0611      	lsls	r1, r2, #24
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68d2      	ldr	r2, [r2, #12]
 8005ea2:	4311      	orrs	r1, r2
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <HAL_QSPI_Init+0xe8>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6912      	ldr	r2, [r2, #16]
 8005eba:	0411      	lsls	r1, r2, #16
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6952      	ldr	r2, [r2, #20]
 8005ec0:	4311      	orrs	r1, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6992      	ldr	r2, [r2, #24]
 8005ec6:	4311      	orrs	r1, r2
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	ffe0f8fe 	.word	0xffe0f8fe

08005f04 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e016      	b.n	8005f44 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0201 	bic.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fd fed4 	bl	8003cd4 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f58:	f7fe f8f2 	bl	8004140 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_QSPI_Command+0x22>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e048      	b.n	8006000 <HAL_QSPI_Command+0xb4>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d137      	bne.n	8005ff2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2120      	movs	r1, #32
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fa5f 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d125      	bne.n	8005ff6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005faa:	2200      	movs	r2, #0
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fa8c 	bl	80064cc <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d115      	bne.n	8005fe8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fa49 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10f      	bne.n	8005ff6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005fe6:	e006      	b.n	8005ff6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005ff0:	e001      	b.n	8005ff6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006018:	f7fe f892 	bl	8004140 <HAL_GetTick>
 800601c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3320      	adds	r3, #32
 8006024:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_QSPI_Transmit+0x2e>
 8006032:	2302      	movs	r3, #2
 8006034:	e07b      	b.n	800612e <HAL_QSPI_Transmit+0x126>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d16a      	bne.n	8006120 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d05b      	beq.n	800610e <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2212      	movs	r2, #18
 800605a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800608a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800608c:	e01b      	b.n	80060c6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2201      	movs	r2, #1
 8006096:	2104      	movs	r1, #4
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f9e0 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80060a2:	7ffb      	ldrb	r3, [r7, #31]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d113      	bne.n	80060d0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1df      	bne.n	800608e <HAL_QSPI_Transmit+0x86>
 80060ce:	e000      	b.n	80060d2 <HAL_QSPI_Transmit+0xca>
          break;
 80060d0:	bf00      	nop
      }

      if (status == HAL_OK)
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d115      	bne.n	8006104 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2201      	movs	r2, #1
 80060e0:	2102      	movs	r1, #2
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f9bb 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80060ec:	7ffb      	ldrb	r3, [r7, #31]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2202      	movs	r2, #2
 80060f8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f934 	bl	8006368 <HAL_QSPI_Abort>
 8006100:	4603      	mov	r3, r0
 8006102:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800610c:	e00a      	b.n	8006124 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e001      	b.n	8006124 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006120:	2302      	movs	r3, #2
 8006122:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800612c:	7ffb      	ldrb	r3, [r7, #31]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08a      	sub	sp, #40	; 0x28
 800613a:	af02      	add	r7, sp, #8
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006146:	f7fd fffb 	bl	8004140 <HAL_GetTick>
 800614a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3320      	adds	r3, #32
 800615a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_QSPI_Receive+0x36>
 8006168:	2302      	movs	r3, #2
 800616a:	e082      	b.n	8006272 <HAL_QSPI_Receive+0x13c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	d171      	bne.n	8006264 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d062      	beq.n	8006252 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2222      	movs	r2, #34	; 0x22
 8006190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80061c4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80061ce:	e01c      	b.n	800620a <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2201      	movs	r2, #1
 80061d8:	2106      	movs	r1, #6
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f93f 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80061e4:	7ffb      	ldrb	r3, [r7, #31]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d114      	bne.n	8006214 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	1e5a      	subs	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1de      	bne.n	80061d0 <HAL_QSPI_Receive+0x9a>
 8006212:	e000      	b.n	8006216 <HAL_QSPI_Receive+0xe0>
          break;
 8006214:	bf00      	nop
      }

      if (status == HAL_OK)
 8006216:	7ffb      	ldrb	r3, [r7, #31]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d115      	bne.n	8006248 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2201      	movs	r2, #1
 8006224:	2102      	movs	r1, #2
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f919 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006230:	7ffb      	ldrb	r3, [r7, #31]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d108      	bne.n	8006248 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2202      	movs	r2, #2
 800623c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f892 	bl	8006368 <HAL_QSPI_Abort>
 8006244:	4603      	mov	r3, r0
 8006246:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006250:	e00a      	b.n	8006268 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e001      	b.n	8006268 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006264:	2302      	movs	r3, #2
 8006266:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8006270:	7ffb      	ldrb	r3, [r7, #31]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b088      	sub	sp, #32
 800627e:	af02      	add	r7, sp, #8
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006288:	f7fd ff5a 	bl	8004140 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_QSPI_AutoPolling+0x24>
 800629a:	2302      	movs	r3, #2
 800629c:	e060      	b.n	8006360 <HAL_QSPI_AutoPolling+0xe6>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d14f      	bne.n	8006352 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2242      	movs	r2, #66	; 0x42
 80062bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2200      	movs	r2, #0
 80062c8:	2120      	movs	r1, #32
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f8c7 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d13d      	bne.n	8006356 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6852      	ldr	r2, [r2, #4]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6892      	ldr	r2, [r2, #8]
 80062f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	431a      	orrs	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006310:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800631a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f8d3 	bl	80064cc <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2201      	movs	r2, #1
 800632e:	2108      	movs	r1, #8
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f894 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2208      	movs	r2, #8
 8006346:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006350:	e001      	b.n	8006356 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006352:	2302      	movs	r3, #2
 8006354:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800635e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af02      	add	r7, sp, #8
 800636e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006374:	f7fd fee4 	bl	8004140 <HAL_GetTick>
 8006378:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d056      	beq.n	8006438 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d017      	beq.n	80063d0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0204 	bic.w	r2, r2, #4
 80063ae:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff f863 	bl	8005480 <HAL_DMA_Abort>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	f043 0204 	orr.w	r2, r3, #4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0202 	orr.w	r2, r2, #2
 80063de:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2201      	movs	r2, #1
 80063ea:	2102      	movs	r1, #2
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f836 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10e      	bne.n	800641a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2202      	movs	r2, #2
 8006402:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	2120      	movs	r1, #32
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f824 	bl	800645e <QSPI_WaitFlagStateUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800642e:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	4613      	mov	r3, r2
 800646c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800646e:	e01a      	b.n	80064a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d016      	beq.n	80064a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006478:	f7fd fe62 	bl	8004140 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2204      	movs	r2, #4
 8006492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e00e      	b.n	80064c4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bf14      	ite	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2300      	moveq	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d1d6      	bne.n	8006470 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <QSPI_Config+0x28>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064e6:	d005      	beq.n	80064f4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3a01      	subs	r2, #1
 80064f2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80b9 	beq.w	8006670 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d05f      	beq.n	80065c6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	6892      	ldr	r2, [r2, #8]
 800650e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d031      	beq.n	800657c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	431a      	orrs	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	431a      	orrs	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	431a      	orrs	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	049b      	lsls	r3, r3, #18
 8006534:	431a      	orrs	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	431a      	orrs	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	431a      	orrs	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	431a      	orrs	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	431a      	orrs	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	ea42 0103 	orr.w	r1, r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	430a      	orrs	r2, r1
 8006564:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800656c:	f000 812e 	beq.w	80067cc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	6852      	ldr	r2, [r2, #4]
 8006578:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800657a:	e127      	b.n	80067cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	431a      	orrs	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	431a      	orrs	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	431a      	orrs	r2, r3
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	049b      	lsls	r3, r3, #18
 8006598:	431a      	orrs	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	431a      	orrs	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	ea42 0103 	orr.w	r1, r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	615a      	str	r2, [r3, #20]
}
 80065c4:	e102      	b.n	80067cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02e      	beq.n	800662c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	431a      	orrs	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065dc:	431a      	orrs	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	431a      	orrs	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	049b      	lsls	r3, r3, #18
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	431a      	orrs	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	ea42 0103 	orr.w	r1, r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	430a      	orrs	r2, r1
 8006614:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800661c:	f000 80d6 	beq.w	80067cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	6852      	ldr	r2, [r2, #4]
 8006628:	619a      	str	r2, [r3, #24]
}
 800662a:	e0cf      	b.n	80067cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	431a      	orrs	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	431a      	orrs	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	431a      	orrs	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	049b      	lsls	r3, r3, #18
 8006648:	431a      	orrs	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	431a      	orrs	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	431a      	orrs	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	431a      	orrs	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	ea42 0103 	orr.w	r1, r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	430a      	orrs	r2, r1
 800666c:	615a      	str	r2, [r3, #20]
}
 800666e:	e0ad      	b.n	80067cc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d058      	beq.n	800672a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	6892      	ldr	r2, [r2, #8]
 8006680:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02d      	beq.n	80066e6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	431a      	orrs	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	431a      	orrs	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	431a      	orrs	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	049b      	lsls	r3, r3, #18
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	431a      	orrs	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	ea42 0103 	orr.w	r1, r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066d8:	d078      	beq.n	80067cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	6852      	ldr	r2, [r2, #4]
 80066e2:	619a      	str	r2, [r3, #24]
}
 80066e4:	e072      	b.n	80067cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	431a      	orrs	r2, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	431a      	orrs	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	049b      	lsls	r3, r3, #18
 8006702:	431a      	orrs	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	431a      	orrs	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	431a      	orrs	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	431a      	orrs	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	ea42 0103 	orr.w	r1, r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	430a      	orrs	r2, r1
 8006726:	615a      	str	r2, [r3, #20]
}
 8006728:	e050      	b.n	80067cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02a      	beq.n	8006788 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	431a      	orrs	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	431a      	orrs	r2, r3
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	431a      	orrs	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	049b      	lsls	r3, r3, #18
 800674e:	431a      	orrs	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	431a      	orrs	r2, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	431a      	orrs	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	431a      	orrs	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	ea42 0103 	orr.w	r1, r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	430a      	orrs	r2, r1
 8006772:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800677a:	d027      	beq.n	80067cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	6852      	ldr	r2, [r2, #4]
 8006784:	619a      	str	r2, [r3, #24]
}
 8006786:	e021      	b.n	80067cc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01d      	beq.n	80067cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	431a      	orrs	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679e:	431a      	orrs	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	049b      	lsls	r3, r3, #18
 80067ac:	431a      	orrs	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	ea42 0103 	orr.w	r1, r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	615a      	str	r2, [r3, #20]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e3d4      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ea:	4ba1      	ldr	r3, [pc, #644]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
 80067f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067f4:	4b9e      	ldr	r3, [pc, #632]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80e4 	beq.w	80069d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <HAL_RCC_OscConfig+0x4a>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b0c      	cmp	r3, #12
 8006816:	f040 808b 	bne.w	8006930 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b01      	cmp	r3, #1
 800681e:	f040 8087 	bne.w	8006930 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006822:	4b93      	ldr	r3, [pc, #588]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_RCC_OscConfig+0x62>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e3ac      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1a      	ldr	r2, [r3, #32]
 800683e:	4b8c      	ldr	r3, [pc, #560]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d004      	beq.n	8006854 <HAL_RCC_OscConfig+0x7c>
 800684a:	4b89      	ldr	r3, [pc, #548]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006852:	e005      	b.n	8006860 <HAL_RCC_OscConfig+0x88>
 8006854:	4b86      	ldr	r3, [pc, #536]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800685a:	091b      	lsrs	r3, r3, #4
 800685c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006860:	4293      	cmp	r3, r2
 8006862:	d223      	bcs.n	80068ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fd73 	bl	8007354 <RCC_SetFlashLatencyFromMSIRange>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e38d      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006878:	4b7d      	ldr	r3, [pc, #500]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a7c      	ldr	r2, [pc, #496]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 800687e:	f043 0308 	orr.w	r3, r3, #8
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b7a      	ldr	r3, [pc, #488]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	4977      	ldr	r1, [pc, #476]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006892:	4313      	orrs	r3, r2
 8006894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006896:	4b76      	ldr	r3, [pc, #472]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	4972      	ldr	r1, [pc, #456]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	604b      	str	r3, [r1, #4]
 80068aa:	e025      	b.n	80068f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068ac:	4b70      	ldr	r3, [pc, #448]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a6f      	ldr	r2, [pc, #444]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80068b2:	f043 0308 	orr.w	r3, r3, #8
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	4b6d      	ldr	r3, [pc, #436]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	496a      	ldr	r1, [pc, #424]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ca:	4b69      	ldr	r3, [pc, #420]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	4965      	ldr	r1, [pc, #404]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fd33 	bl	8007354 <RCC_SetFlashLatencyFromMSIRange>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e34d      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068f8:	f000 fc36 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 80068fc:	4602      	mov	r2, r0
 80068fe:	4b5c      	ldr	r3, [pc, #368]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	091b      	lsrs	r3, r3, #4
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	495a      	ldr	r1, [pc, #360]	; (8006a74 <HAL_RCC_OscConfig+0x29c>)
 800690a:	5ccb      	ldrb	r3, [r1, r3]
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
 8006914:	4a58      	ldr	r2, [pc, #352]	; (8006a78 <HAL_RCC_OscConfig+0x2a0>)
 8006916:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006918:	4b58      	ldr	r3, [pc, #352]	; (8006a7c <HAL_RCC_OscConfig+0x2a4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f7fd fa79 	bl	8003e14 <HAL_InitTick>
 8006922:	4603      	mov	r3, r0
 8006924:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d052      	beq.n	80069d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	e331      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d032      	beq.n	800699e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006938:	4b4d      	ldr	r3, [pc, #308]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a4c      	ldr	r2, [pc, #304]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006944:	f7fd fbfc 	bl	8004140 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800694c:	f7fd fbf8 	bl	8004140 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e31a      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800695e:	4b44      	ldr	r3, [pc, #272]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800696a:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a40      	ldr	r2, [pc, #256]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006970:	f043 0308 	orr.w	r3, r3, #8
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	4b3e      	ldr	r3, [pc, #248]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	493b      	ldr	r1, [pc, #236]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006988:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	4936      	ldr	r1, [pc, #216]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006998:	4313      	orrs	r3, r2
 800699a:	604b      	str	r3, [r1, #4]
 800699c:	e01a      	b.n	80069d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800699e:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a33      	ldr	r2, [pc, #204]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80069a4:	f023 0301 	bic.w	r3, r3, #1
 80069a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069aa:	f7fd fbc9 	bl	8004140 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069b2:	f7fd fbc5 	bl	8004140 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e2e7      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069c4:	4b2a      	ldr	r3, [pc, #168]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f0      	bne.n	80069b2 <HAL_RCC_OscConfig+0x1da>
 80069d0:	e000      	b.n	80069d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d074      	beq.n	8006aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d005      	beq.n	80069f2 <HAL_RCC_OscConfig+0x21a>
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b0c      	cmp	r3, #12
 80069ea:	d10e      	bne.n	8006a0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d10b      	bne.n	8006a0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f2:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d064      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x2f0>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d160      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e2c4      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a12:	d106      	bne.n	8006a22 <HAL_RCC_OscConfig+0x24a>
 8006a14:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e01d      	b.n	8006a5e <HAL_RCC_OscConfig+0x286>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a2a:	d10c      	bne.n	8006a46 <HAL_RCC_OscConfig+0x26e>
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	e00b      	b.n	8006a5e <HAL_RCC_OscConfig+0x286>
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <HAL_RCC_OscConfig+0x298>)
 8006a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01c      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a66:	f7fd fb6b 	bl	8004140 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a6c:	e011      	b.n	8006a92 <HAL_RCC_OscConfig+0x2ba>
 8006a6e:	bf00      	nop
 8006a70:	40021000 	.word	0x40021000
 8006a74:	08010df0 	.word	0x08010df0
 8006a78:	20000008 	.word	0x20000008
 8006a7c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a80:	f7fd fb5e 	bl	8004140 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e280      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a92:	4baf      	ldr	r3, [pc, #700]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0x2a8>
 8006a9e:	e014      	b.n	8006aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fd fb4e 	bl	8004140 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa8:	f7fd fb4a 	bl	8004140 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b64      	cmp	r3, #100	; 0x64
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e26c      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aba:	4ba5      	ldr	r3, [pc, #660]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x2d0>
 8006ac6:	e000      	b.n	8006aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d060      	beq.n	8006b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d005      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x310>
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b0c      	cmp	r3, #12
 8006ae0:	d119      	bne.n	8006b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d116      	bne.n	8006b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae8:	4b99      	ldr	r3, [pc, #612]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_RCC_OscConfig+0x328>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e249      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b00:	4b93      	ldr	r3, [pc, #588]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	061b      	lsls	r3, r3, #24
 8006b0e:	4990      	ldr	r1, [pc, #576]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b14:	e040      	b.n	8006b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d023      	beq.n	8006b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b1e:	4b8c      	ldr	r3, [pc, #560]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a8b      	ldr	r2, [pc, #556]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2a:	f7fd fb09 	bl	8004140 <HAL_GetTick>
 8006b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b30:	e008      	b.n	8006b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b32:	f7fd fb05 	bl	8004140 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d901      	bls.n	8006b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e227      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b44:	4b82      	ldr	r3, [pc, #520]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0f0      	beq.n	8006b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b50:	4b7f      	ldr	r3, [pc, #508]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	061b      	lsls	r3, r3, #24
 8006b5e:	497c      	ldr	r1, [pc, #496]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	604b      	str	r3, [r1, #4]
 8006b64:	e018      	b.n	8006b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b66:	4b7a      	ldr	r3, [pc, #488]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a79      	ldr	r2, [pc, #484]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b72:	f7fd fae5 	bl	8004140 <HAL_GetTick>
 8006b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b78:	e008      	b.n	8006b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b7a:	f7fd fae1 	bl	8004140 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e203      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b8c:	4b70      	ldr	r3, [pc, #448]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f0      	bne.n	8006b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d03c      	beq.n	8006c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01c      	beq.n	8006be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bac:	4b68      	ldr	r3, [pc, #416]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bb2:	4a67      	ldr	r2, [pc, #412]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbc:	f7fd fac0 	bl	8004140 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bc4:	f7fd fabc 	bl	8004140 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e1de      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bd6:	4b5e      	ldr	r3, [pc, #376]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0ef      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x3ec>
 8006be4:	e01b      	b.n	8006c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006be6:	4b5a      	ldr	r3, [pc, #360]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bec:	4a58      	ldr	r2, [pc, #352]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf6:	f7fd faa3 	bl	8004140 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bfe:	f7fd fa9f 	bl	8004140 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e1c1      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c10:	4b4f      	ldr	r3, [pc, #316]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1ef      	bne.n	8006bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80a6 	beq.w	8006d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c30:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c3c:	4b44      	ldr	r3, [pc, #272]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c40:	4a43      	ldr	r2, [pc, #268]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c46:	6593      	str	r3, [r2, #88]	; 0x58
 8006c48:	4b41      	ldr	r3, [pc, #260]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c50:	60bb      	str	r3, [r7, #8]
 8006c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c54:	2301      	movs	r3, #1
 8006c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c58:	4b3e      	ldr	r3, [pc, #248]	; (8006d54 <HAL_RCC_OscConfig+0x57c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d118      	bne.n	8006c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c64:	4b3b      	ldr	r3, [pc, #236]	; (8006d54 <HAL_RCC_OscConfig+0x57c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3a      	ldr	r2, [pc, #232]	; (8006d54 <HAL_RCC_OscConfig+0x57c>)
 8006c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c70:	f7fd fa66 	bl	8004140 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c78:	f7fd fa62 	bl	8004140 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e184      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c8a:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <HAL_RCC_OscConfig+0x57c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d108      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x4d8>
 8006c9e:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cae:	e024      	b.n	8006cfa <HAL_RCC_OscConfig+0x522>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b05      	cmp	r3, #5
 8006cb6:	d110      	bne.n	8006cda <HAL_RCC_OscConfig+0x502>
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	4a24      	ldr	r2, [pc, #144]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006cc0:	f043 0304 	orr.w	r3, r3, #4
 8006cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cc8:	4b21      	ldr	r3, [pc, #132]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cd8:	e00f      	b.n	8006cfa <HAL_RCC_OscConfig+0x522>
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce0:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cea:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006cf2:	f023 0304 	bic.w	r3, r3, #4
 8006cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d02:	f7fd fa1d 	bl	8004140 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d08:	e00a      	b.n	8006d20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d0a:	f7fd fa19 	bl	8004140 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e139      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCC_OscConfig+0x578>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0ed      	beq.n	8006d0a <HAL_RCC_OscConfig+0x532>
 8006d2e:	e01a      	b.n	8006d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fd fa06 	bl	8004140 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d36:	e00f      	b.n	8006d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d38:	f7fd fa02 	bl	8004140 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d906      	bls.n	8006d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e122      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
 8006d4e:	bf00      	nop
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d58:	4b90      	ldr	r3, [pc, #576]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e8      	bne.n	8006d38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d66:	7ffb      	ldrb	r3, [r7, #31]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d105      	bne.n	8006d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d6c:	4b8b      	ldr	r3, [pc, #556]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d70:	4a8a      	ldr	r2, [pc, #552]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8108 	beq.w	8006f92 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	f040 80d0 	bne.w	8006f2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d8c:	4b83      	ldr	r3, [pc, #524]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f003 0203 	and.w	r2, r3, #3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d130      	bne.n	8006e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	3b01      	subs	r3, #1
 8006dac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d127      	bne.n	8006e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d11f      	bne.n	8006e02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dcc:	2a07      	cmp	r2, #7
 8006dce:	bf14      	ite	ne
 8006dd0:	2201      	movne	r2, #1
 8006dd2:	2200      	moveq	r2, #0
 8006dd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d113      	bne.n	8006e02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	3b01      	subs	r3, #1
 8006de8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d109      	bne.n	8006e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d06e      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	d069      	beq.n	8006edc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e08:	4b64      	ldr	r3, [pc, #400]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006e14:	4b61      	ldr	r3, [pc, #388]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0b7      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e24:	4b5d      	ldr	r3, [pc, #372]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a5c      	ldr	r2, [pc, #368]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e30:	f7fd f986 	bl	8004140 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e38:	f7fd f982 	bl	8004140 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e0a4      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e4a:	4b54      	ldr	r3, [pc, #336]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f0      	bne.n	8006e38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e56:	4b51      	ldr	r3, [pc, #324]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	4b51      	ldr	r3, [pc, #324]	; (8006fa0 <HAL_RCC_OscConfig+0x7c8>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e66:	3a01      	subs	r2, #1
 8006e68:	0112      	lsls	r2, r2, #4
 8006e6a:	4311      	orrs	r1, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e70:	0212      	lsls	r2, r2, #8
 8006e72:	4311      	orrs	r1, r2
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e78:	0852      	lsrs	r2, r2, #1
 8006e7a:	3a01      	subs	r2, #1
 8006e7c:	0552      	lsls	r2, r2, #21
 8006e7e:	4311      	orrs	r1, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e84:	0852      	lsrs	r2, r2, #1
 8006e86:	3a01      	subs	r2, #1
 8006e88:	0652      	lsls	r2, r2, #25
 8006e8a:	4311      	orrs	r1, r2
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e90:	0912      	lsrs	r2, r2, #4
 8006e92:	0452      	lsls	r2, r2, #17
 8006e94:	430a      	orrs	r2, r1
 8006e96:	4941      	ldr	r1, [pc, #260]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e9c:	4b3f      	ldr	r3, [pc, #252]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a3e      	ldr	r2, [pc, #248]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ea8:	4b3c      	ldr	r3, [pc, #240]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4a3b      	ldr	r2, [pc, #236]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006eb4:	f7fd f944 	bl	8004140 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ebc:	f7fd f940 	bl	8004140 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e062      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ece:	4b33      	ldr	r3, [pc, #204]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f0      	beq.n	8006ebc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006eda:	e05a      	b.n	8006f92 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e059      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ee0:	4b2e      	ldr	r3, [pc, #184]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d152      	bne.n	8006f92 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006eec:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ef8:	4b28      	ldr	r3, [pc, #160]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f04:	f7fd f91c 	bl	8004140 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f0c:	f7fd f918 	bl	8004140 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e03a      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f1e:	4b1f      	ldr	r3, [pc, #124]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0f0      	beq.n	8006f0c <HAL_RCC_OscConfig+0x734>
 8006f2a:	e032      	b.n	8006f92 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b0c      	cmp	r3, #12
 8006f30:	d02d      	beq.n	8006f8e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f32:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a19      	ldr	r2, [pc, #100]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006f3e:	4b17      	ldr	r3, [pc, #92]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f4a:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f50:	f023 0303 	bic.w	r3, r3, #3
 8006f54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f56:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	4a10      	ldr	r2, [pc, #64]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f66:	f7fd f8eb 	bl	8004140 <HAL_GetTick>
 8006f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f6c:	e008      	b.n	8006f80 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f6e:	f7fd f8e7 	bl	8004140 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e009      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_RCC_OscConfig+0x7c4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f0      	bne.n	8006f6e <HAL_RCC_OscConfig+0x796>
 8006f8c:	e001      	b.n	8006f92 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3720      	adds	r7, #32
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	f99d808c 	.word	0xf99d808c

08006fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0c8      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb8:	4b66      	ldr	r3, [pc, #408]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d910      	bls.n	8006fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc6:	4b63      	ldr	r3, [pc, #396]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 0207 	bic.w	r2, r3, #7
 8006fce:	4961      	ldr	r1, [pc, #388]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b5f      	ldr	r3, [pc, #380]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0b0      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d04c      	beq.n	800708e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d107      	bne.n	800700c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffc:	4b56      	ldr	r3, [pc, #344]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d121      	bne.n	800704c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e09e      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d107      	bne.n	8007024 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007014:	4b50      	ldr	r3, [pc, #320]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d115      	bne.n	800704c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e092      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d107      	bne.n	800703c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800702c:	4b4a      	ldr	r3, [pc, #296]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e086      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800703c:	4b46      	ldr	r3, [pc, #280]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e07e      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800704c:	4b42      	ldr	r3, [pc, #264]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f023 0203 	bic.w	r2, r3, #3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	493f      	ldr	r1, [pc, #252]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 800705a:	4313      	orrs	r3, r2
 800705c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705e:	f7fd f86f 	bl	8004140 <HAL_GetTick>
 8007062:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007064:	e00a      	b.n	800707c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007066:	f7fd f86b 	bl	8004140 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f241 3288 	movw	r2, #5000	; 0x1388
 8007074:	4293      	cmp	r3, r2
 8007076:	d901      	bls.n	800707c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e066      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707c:	4b36      	ldr	r3, [pc, #216]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 020c 	and.w	r2, r3, #12
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	429a      	cmp	r2, r3
 800708c:	d1eb      	bne.n	8007066 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800709a:	4b2f      	ldr	r3, [pc, #188]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	492c      	ldr	r1, [pc, #176]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d210      	bcs.n	80070dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f023 0207 	bic.w	r2, r3, #7
 80070c2:	4924      	ldr	r1, [pc, #144]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ca:	4b22      	ldr	r3, [pc, #136]	; (8007154 <HAL_RCC_ClockConfig+0x1b0>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d001      	beq.n	80070dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e036      	b.n	800714a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e8:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4918      	ldr	r1, [pc, #96]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007106:	4b14      	ldr	r3, [pc, #80]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4910      	ldr	r1, [pc, #64]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800711a:	f000 f825 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 800711e:	4602      	mov	r2, r0
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <HAL_RCC_ClockConfig+0x1b4>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	490c      	ldr	r1, [pc, #48]	; (800715c <HAL_RCC_ClockConfig+0x1b8>)
 800712c:	5ccb      	ldrb	r3, [r1, r3]
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <HAL_RCC_ClockConfig+0x1c0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fc fe68 	bl	8003e14 <HAL_InitTick>
 8007144:	4603      	mov	r3, r0
 8007146:	72fb      	strb	r3, [r7, #11]

  return status;
 8007148:	7afb      	ldrb	r3, [r7, #11]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40022000 	.word	0x40022000
 8007158:	40021000 	.word	0x40021000
 800715c:	08010df0 	.word	0x08010df0
 8007160:	20000008 	.word	0x20000008
 8007164:	2000000c 	.word	0x2000000c

08007168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007168:	b480      	push	{r7}
 800716a:	b089      	sub	sp, #36	; 0x24
 800716c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	2300      	movs	r3, #0
 8007174:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007176:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007180:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0x34>
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2b0c      	cmp	r3, #12
 8007194:	d121      	bne.n	80071da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d11e      	bne.n	80071da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800719c:	4b34      	ldr	r3, [pc, #208]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80071a8:	4b31      	ldr	r3, [pc, #196]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 80071aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	e005      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80071b8:	4b2d      	ldr	r3, [pc, #180]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80071c4:	4a2b      	ldr	r2, [pc, #172]	; (8007274 <HAL_RCC_GetSysClockFreq+0x10c>)
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d102      	bne.n	80071e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071e0:	4b25      	ldr	r3, [pc, #148]	; (8007278 <HAL_RCC_GetSysClockFreq+0x110>)
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	e004      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d101      	bne.n	80071f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071ec:	4b23      	ldr	r3, [pc, #140]	; (800727c <HAL_RCC_GetSysClockFreq+0x114>)
 80071ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d134      	bne.n	8007260 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071f6:	4b1e      	ldr	r3, [pc, #120]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b02      	cmp	r3, #2
 8007204:	d003      	beq.n	800720e <HAL_RCC_GetSysClockFreq+0xa6>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d003      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0xac>
 800720c:	e005      	b.n	800721a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800720e:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <HAL_RCC_GetSysClockFreq+0x110>)
 8007210:	617b      	str	r3, [r7, #20]
      break;
 8007212:	e005      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007214:	4b19      	ldr	r3, [pc, #100]	; (800727c <HAL_RCC_GetSysClockFreq+0x114>)
 8007216:	617b      	str	r3, [r7, #20]
      break;
 8007218:	e002      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	617b      	str	r3, [r7, #20]
      break;
 800721e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007220:	4b13      	ldr	r3, [pc, #76]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	3301      	adds	r3, #1
 800722c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800722e:	4b10      	ldr	r3, [pc, #64]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	fb02 f203 	mul.w	r2, r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <HAL_RCC_GetSysClockFreq+0x108>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	0e5b      	lsrs	r3, r3, #25
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	3301      	adds	r3, #1
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	fbb2 f3f3 	udiv	r3, r2, r3
 800725e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007260:	69bb      	ldr	r3, [r7, #24]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3724      	adds	r7, #36	; 0x24
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40021000 	.word	0x40021000
 8007274:	08010e08 	.word	0x08010e08
 8007278:	00f42400 	.word	0x00f42400
 800727c:	007a1200 	.word	0x007a1200

08007280 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <HAL_RCC_GetHCLKFreq+0x14>)
 8007286:	681b      	ldr	r3, [r3, #0]
}
 8007288:	4618      	mov	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000008 	.word	0x20000008

08007298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800729c:	f7ff fff0 	bl	8007280 <HAL_RCC_GetHCLKFreq>
 80072a0:	4602      	mov	r2, r0
 80072a2:	4b06      	ldr	r3, [pc, #24]	; (80072bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	4904      	ldr	r1, [pc, #16]	; (80072c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072ae:	5ccb      	ldrb	r3, [r1, r3]
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40021000 	.word	0x40021000
 80072c0:	08010e00 	.word	0x08010e00

080072c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072c8:	f7ff ffda 	bl	8007280 <HAL_RCC_GetHCLKFreq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	0adb      	lsrs	r3, r3, #11
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	4904      	ldr	r1, [pc, #16]	; (80072ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80072da:	5ccb      	ldrb	r3, [r1, r3]
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40021000 	.word	0x40021000
 80072ec:	08010e00 	.word	0x08010e00

080072f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	220f      	movs	r2, #15
 80072fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007300:	4b12      	ldr	r3, [pc, #72]	; (800734c <HAL_RCC_GetClockConfig+0x5c>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0203 	and.w	r2, r3, #3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <HAL_RCC_GetClockConfig+0x5c>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007318:	4b0c      	ldr	r3, [pc, #48]	; (800734c <HAL_RCC_GetClockConfig+0x5c>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <HAL_RCC_GetClockConfig+0x5c>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	08db      	lsrs	r3, r3, #3
 800732a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <HAL_RCC_GetClockConfig+0x60>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0207 	and.w	r2, r3, #7
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	601a      	str	r2, [r3, #0]
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40021000 	.word	0x40021000
 8007350:	40022000 	.word	0x40022000

08007354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800735c:	2300      	movs	r3, #0
 800735e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007360:	4b2a      	ldr	r3, [pc, #168]	; (800740c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800736c:	f7fe fca8 	bl	8005cc0 <HAL_PWREx_GetVoltageRange>
 8007370:	6178      	str	r0, [r7, #20]
 8007372:	e014      	b.n	800739e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007378:	4a24      	ldr	r2, [pc, #144]	; (800740c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800737a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737e:	6593      	str	r3, [r2, #88]	; 0x58
 8007380:	4b22      	ldr	r3, [pc, #136]	; (800740c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800738c:	f7fe fc98 	bl	8005cc0 <HAL_PWREx_GetVoltageRange>
 8007390:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007392:	4b1e      	ldr	r3, [pc, #120]	; (800740c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007396:	4a1d      	ldr	r2, [pc, #116]	; (800740c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800739c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a4:	d10b      	bne.n	80073be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d919      	bls.n	80073e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2ba0      	cmp	r3, #160	; 0xa0
 80073b0:	d902      	bls.n	80073b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073b2:	2302      	movs	r3, #2
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	e013      	b.n	80073e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073b8:	2301      	movs	r3, #1
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	e010      	b.n	80073e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b80      	cmp	r3, #128	; 0x80
 80073c2:	d902      	bls.n	80073ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80073c4:	2303      	movs	r3, #3
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	e00a      	b.n	80073e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d102      	bne.n	80073d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073d0:	2302      	movs	r3, #2
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	e004      	b.n	80073e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b70      	cmp	r3, #112	; 0x70
 80073da:	d101      	bne.n	80073e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073dc:	2301      	movs	r3, #1
 80073de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f023 0207 	bic.w	r2, r3, #7
 80073e8:	4909      	ldr	r1, [pc, #36]	; (8007410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d001      	beq.n	8007402 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40021000 	.word	0x40021000
 8007410:	40022000 	.word	0x40022000

08007414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800741c:	2300      	movs	r3, #0
 800741e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007420:	2300      	movs	r3, #0
 8007422:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800742c:	2b00      	cmp	r3, #0
 800742e:	d041      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007434:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007438:	d02a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800743a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800743e:	d824      	bhi.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007440:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007444:	d008      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007446:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800744a:	d81e      	bhi.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007454:	d010      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007456:	e018      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007458:	4b86      	ldr	r3, [pc, #536]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	4a85      	ldr	r2, [pc, #532]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007462:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007464:	e015      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3304      	adds	r3, #4
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fabb 	bl	80079e8 <RCCEx_PLLSAI1_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007476:	e00c      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3320      	adds	r3, #32
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fba6 	bl	8007bd0 <RCCEx_PLLSAI2_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007488:	e003      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	74fb      	strb	r3, [r7, #19]
      break;
 800748e:	e000      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007492:	7cfb      	ldrb	r3, [r7, #19]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007498:	4b76      	ldr	r3, [pc, #472]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a6:	4973      	ldr	r1, [pc, #460]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80074ae:	e001      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b0:	7cfb      	ldrb	r3, [r7, #19]
 80074b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d041      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074c8:	d02a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80074ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074ce:	d824      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80074d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074d4:	d008      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074da:	d81e      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80074e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074e4:	d010      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80074e6:	e018      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074e8:	4b62      	ldr	r3, [pc, #392]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4a61      	ldr	r2, [pc, #388]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074f4:	e015      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3304      	adds	r3, #4
 80074fa:	2100      	movs	r1, #0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fa73 	bl	80079e8 <RCCEx_PLLSAI1_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007506:	e00c      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3320      	adds	r3, #32
 800750c:	2100      	movs	r1, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fb5e 	bl	8007bd0 <RCCEx_PLLSAI2_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007518:	e003      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	74fb      	strb	r3, [r7, #19]
      break;
 800751e:	e000      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007522:	7cfb      	ldrb	r3, [r7, #19]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007528:	4b52      	ldr	r3, [pc, #328]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007536:	494f      	ldr	r1, [pc, #316]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800753e:	e001      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007540:	7cfb      	ldrb	r3, [r7, #19]
 8007542:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80a0 	beq.w	8007692 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007552:	2300      	movs	r3, #0
 8007554:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007556:	4b47      	ldr	r3, [pc, #284]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00d      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800756c:	4b41      	ldr	r3, [pc, #260]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800756e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007570:	4a40      	ldr	r2, [pc, #256]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007576:	6593      	str	r3, [r2, #88]	; 0x58
 8007578:	4b3e      	ldr	r3, [pc, #248]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800757a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007584:	2301      	movs	r3, #1
 8007586:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007588:	4b3b      	ldr	r3, [pc, #236]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a3a      	ldr	r2, [pc, #232]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800758e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007594:	f7fc fdd4 	bl	8004140 <HAL_GetTick>
 8007598:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800759a:	e009      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800759c:	f7fc fdd0 	bl	8004140 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d902      	bls.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	74fb      	strb	r3, [r7, #19]
        break;
 80075ae:	e005      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075b0:	4b31      	ldr	r3, [pc, #196]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0ef      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80075bc:	7cfb      	ldrb	r3, [r7, #19]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d15c      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075c2:	4b2c      	ldr	r3, [pc, #176]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01f      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d019      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075e0:	4b24      	ldr	r3, [pc, #144]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075ec:	4b21      	ldr	r3, [pc, #132]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f2:	4a20      	ldr	r2, [pc, #128]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075fc:	4b1d      	ldr	r3, [pc, #116]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800760c:	4a19      	ldr	r2, [pc, #100]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761e:	f7fc fd8f 	bl	8004140 <HAL_GetTick>
 8007622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007624:	e00b      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007626:	f7fc fd8b 	bl	8004140 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	f241 3288 	movw	r2, #5000	; 0x1388
 8007634:	4293      	cmp	r3, r2
 8007636:	d902      	bls.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	74fb      	strb	r3, [r7, #19]
            break;
 800763c:	e006      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800763e:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0ec      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800764c:	7cfb      	ldrb	r3, [r7, #19]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10c      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007652:	4b08      	ldr	r3, [pc, #32]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007662:	4904      	ldr	r1, [pc, #16]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800766a:	e009      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800766c:	7cfb      	ldrb	r3, [r7, #19]
 800766e:	74bb      	strb	r3, [r7, #18]
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007672:	bf00      	nop
 8007674:	40021000 	.word	0x40021000
 8007678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767c:	7cfb      	ldrb	r3, [r7, #19]
 800767e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007680:	7c7b      	ldrb	r3, [r7, #17]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007686:	4b9e      	ldr	r3, [pc, #632]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	4a9d      	ldr	r2, [pc, #628]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800768c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007690:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800769e:	4b98      	ldr	r3, [pc, #608]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a4:	f023 0203 	bic.w	r2, r3, #3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	4994      	ldr	r1, [pc, #592]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076c0:	4b8f      	ldr	r3, [pc, #572]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c6:	f023 020c 	bic.w	r2, r3, #12
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	498c      	ldr	r1, [pc, #560]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076e2:	4b87      	ldr	r3, [pc, #540]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	4983      	ldr	r1, [pc, #524]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007704:	4b7e      	ldr	r3, [pc, #504]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007712:	497b      	ldr	r1, [pc, #492]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0310 	and.w	r3, r3, #16
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007726:	4b76      	ldr	r3, [pc, #472]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007734:	4972      	ldr	r1, [pc, #456]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007736:	4313      	orrs	r3, r2
 8007738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007748:	4b6d      	ldr	r3, [pc, #436]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007756:	496a      	ldr	r1, [pc, #424]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007758:	4313      	orrs	r3, r2
 800775a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800776a:	4b65      	ldr	r3, [pc, #404]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007770:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	4961      	ldr	r1, [pc, #388]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800777a:	4313      	orrs	r3, r2
 800777c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800778c:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779a:	4959      	ldr	r1, [pc, #356]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800779c:	4313      	orrs	r3, r2
 800779e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077ae:	4b54      	ldr	r3, [pc, #336]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077bc:	4950      	ldr	r1, [pc, #320]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077d0:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	4948      	ldr	r1, [pc, #288]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077f2:	4b43      	ldr	r3, [pc, #268]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007800:	493f      	ldr	r1, [pc, #252]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d028      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007814:	4b3a      	ldr	r3, [pc, #232]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007822:	4937      	ldr	r1, [pc, #220]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007824:	4313      	orrs	r3, r2
 8007826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007832:	d106      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007834:	4b32      	ldr	r3, [pc, #200]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	4a31      	ldr	r2, [pc, #196]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800783a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783e:	60d3      	str	r3, [r2, #12]
 8007840:	e011      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800784a:	d10c      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3304      	adds	r3, #4
 8007850:	2101      	movs	r1, #1
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f8c8 	bl	80079e8 <RCCEx_PLLSAI1_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800785c:	7cfb      	ldrb	r3, [r7, #19]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007862:	7cfb      	ldrb	r3, [r7, #19]
 8007864:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d028      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007872:	4b23      	ldr	r3, [pc, #140]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007878:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	491f      	ldr	r1, [pc, #124]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007890:	d106      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007892:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	4a1a      	ldr	r2, [pc, #104]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800789c:	60d3      	str	r3, [r2, #12]
 800789e:	e011      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078a8:	d10c      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3304      	adds	r3, #4
 80078ae:	2101      	movs	r1, #1
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f899 	bl	80079e8 <RCCEx_PLLSAI1_Config>
 80078b6:	4603      	mov	r3, r0
 80078b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078ba:	7cfb      	ldrb	r3, [r7, #19]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80078c0:	7cfb      	ldrb	r3, [r7, #19]
 80078c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d02b      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078de:	4908      	ldr	r1, [pc, #32]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ee:	d109      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078f0:	4b03      	ldr	r3, [pc, #12]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	4a02      	ldr	r2, [pc, #8]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078fa:	60d3      	str	r3, [r2, #12]
 80078fc:	e014      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80078fe:	bf00      	nop
 8007900:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800790c:	d10c      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f000 f867 	bl	80079e8 <RCCEx_PLLSAI1_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800791e:	7cfb      	ldrb	r3, [r7, #19]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007924:	7cfb      	ldrb	r3, [r7, #19]
 8007926:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d02f      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007934:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007942:	4928      	ldr	r1, [pc, #160]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800794e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007952:	d10d      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	2102      	movs	r1, #2
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f844 	bl	80079e8 <RCCEx_PLLSAI1_Config>
 8007960:	4603      	mov	r3, r0
 8007962:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007964:	7cfb      	ldrb	r3, [r7, #19]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d014      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800796a:	7cfb      	ldrb	r3, [r7, #19]
 800796c:	74bb      	strb	r3, [r7, #18]
 800796e:	e011      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007978:	d10c      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3320      	adds	r3, #32
 800797e:	2102      	movs	r1, #2
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f925 	bl	8007bd0 <RCCEx_PLLSAI2_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800798a:	7cfb      	ldrb	r3, [r7, #19]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007990:	7cfb      	ldrb	r3, [r7, #19]
 8007992:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079a0:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ae:	490d      	ldr	r1, [pc, #52]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079c2:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079d2:	4904      	ldr	r1, [pc, #16]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80079da:	7cbb      	ldrb	r3, [r7, #18]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40021000 	.word	0x40021000

080079e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079f6:	4b75      	ldr	r3, [pc, #468]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d018      	beq.n	8007a34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a02:	4b72      	ldr	r3, [pc, #456]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f003 0203 	and.w	r2, r3, #3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d10d      	bne.n	8007a2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
       ||
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a1a:	4b6c      	ldr	r3, [pc, #432]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	091b      	lsrs	r3, r3, #4
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
       ||
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d047      	beq.n	8007abe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	73fb      	strb	r3, [r7, #15]
 8007a32:	e044      	b.n	8007abe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d018      	beq.n	8007a6e <RCCEx_PLLSAI1_Config+0x86>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d825      	bhi.n	8007a8c <RCCEx_PLLSAI1_Config+0xa4>
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d002      	beq.n	8007a4a <RCCEx_PLLSAI1_Config+0x62>
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d009      	beq.n	8007a5c <RCCEx_PLLSAI1_Config+0x74>
 8007a48:	e020      	b.n	8007a8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a4a:	4b60      	ldr	r3, [pc, #384]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d11d      	bne.n	8007a92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a5a:	e01a      	b.n	8007a92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a5c:	4b5b      	ldr	r3, [pc, #364]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d116      	bne.n	8007a96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a6c:	e013      	b.n	8007a96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a6e:	4b57      	ldr	r3, [pc, #348]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10f      	bne.n	8007a9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a7a:	4b54      	ldr	r3, [pc, #336]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d109      	bne.n	8007a9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a8a:	e006      	b.n	8007a9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a90:	e004      	b.n	8007a9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a92:	bf00      	nop
 8007a94:	e002      	b.n	8007a9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10d      	bne.n	8007abe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007aa2:	4b4a      	ldr	r3, [pc, #296]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	4944      	ldr	r1, [pc, #272]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d17d      	bne.n	8007bc0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ac4:	4b41      	ldr	r3, [pc, #260]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a40      	ldr	r2, [pc, #256]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad0:	f7fc fb36 	bl	8004140 <HAL_GetTick>
 8007ad4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ad6:	e009      	b.n	8007aec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ad8:	f7fc fb32 	bl	8004140 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d902      	bls.n	8007aec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8007aea:	e005      	b.n	8007af8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007aec:	4b37      	ldr	r3, [pc, #220]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1ef      	bne.n	8007ad8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d160      	bne.n	8007bc0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d111      	bne.n	8007b28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b04:	4b31      	ldr	r3, [pc, #196]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6892      	ldr	r2, [r2, #8]
 8007b14:	0211      	lsls	r1, r2, #8
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	68d2      	ldr	r2, [r2, #12]
 8007b1a:	0912      	lsrs	r2, r2, #4
 8007b1c:	0452      	lsls	r2, r2, #17
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	492a      	ldr	r1, [pc, #168]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	610b      	str	r3, [r1, #16]
 8007b26:	e027      	b.n	8007b78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d112      	bne.n	8007b54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b2e:	4b27      	ldr	r3, [pc, #156]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007b36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6892      	ldr	r2, [r2, #8]
 8007b3e:	0211      	lsls	r1, r2, #8
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6912      	ldr	r2, [r2, #16]
 8007b44:	0852      	lsrs	r2, r2, #1
 8007b46:	3a01      	subs	r2, #1
 8007b48:	0552      	lsls	r2, r2, #21
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	491f      	ldr	r1, [pc, #124]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	610b      	str	r3, [r1, #16]
 8007b52:	e011      	b.n	8007b78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b54:	4b1d      	ldr	r3, [pc, #116]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6892      	ldr	r2, [r2, #8]
 8007b64:	0211      	lsls	r1, r2, #8
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6952      	ldr	r2, [r2, #20]
 8007b6a:	0852      	lsrs	r2, r2, #1
 8007b6c:	3a01      	subs	r2, #1
 8007b6e:	0652      	lsls	r2, r2, #25
 8007b70:	430a      	orrs	r2, r1
 8007b72:	4916      	ldr	r1, [pc, #88]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b78:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b84:	f7fc fadc 	bl	8004140 <HAL_GetTick>
 8007b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b8a:	e009      	b.n	8007ba0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b8c:	f7fc fad8 	bl	8004140 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d902      	bls.n	8007ba0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8007b9e:	e005      	b.n	8007bac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0ef      	beq.n	8007b8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007bb2:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	4904      	ldr	r1, [pc, #16]	; (8007bcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	40021000 	.word	0x40021000

08007bd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007bde:	4b6a      	ldr	r3, [pc, #424]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d018      	beq.n	8007c1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007bea:	4b67      	ldr	r3, [pc, #412]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f003 0203 	and.w	r2, r3, #3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d10d      	bne.n	8007c16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007c02:	4b61      	ldr	r3, [pc, #388]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	091b      	lsrs	r3, r3, #4
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
       ||
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d047      	beq.n	8007ca6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]
 8007c1a:	e044      	b.n	8007ca6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d018      	beq.n	8007c56 <RCCEx_PLLSAI2_Config+0x86>
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d825      	bhi.n	8007c74 <RCCEx_PLLSAI2_Config+0xa4>
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d002      	beq.n	8007c32 <RCCEx_PLLSAI2_Config+0x62>
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d009      	beq.n	8007c44 <RCCEx_PLLSAI2_Config+0x74>
 8007c30:	e020      	b.n	8007c74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c32:	4b55      	ldr	r3, [pc, #340]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d11d      	bne.n	8007c7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c42:	e01a      	b.n	8007c7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c44:	4b50      	ldr	r3, [pc, #320]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d116      	bne.n	8007c7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c54:	e013      	b.n	8007c7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c56:	4b4c      	ldr	r3, [pc, #304]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10f      	bne.n	8007c82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c62:	4b49      	ldr	r3, [pc, #292]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c72:	e006      	b.n	8007c82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
      break;
 8007c78:	e004      	b.n	8007c84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e002      	b.n	8007c84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e000      	b.n	8007c84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c8a:	4b3f      	ldr	r3, [pc, #252]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6819      	ldr	r1, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	4939      	ldr	r1, [pc, #228]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d167      	bne.n	8007d7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a35      	ldr	r2, [pc, #212]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb8:	f7fc fa42 	bl	8004140 <HAL_GetTick>
 8007cbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cbe:	e009      	b.n	8007cd4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cc0:	f7fc fa3e 	bl	8004140 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d902      	bls.n	8007cd4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8007cd2:	e005      	b.n	8007ce0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cd4:	4b2c      	ldr	r3, [pc, #176]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1ef      	bne.n	8007cc0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d14a      	bne.n	8007d7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d111      	bne.n	8007d10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007cec:	4b26      	ldr	r3, [pc, #152]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6892      	ldr	r2, [r2, #8]
 8007cfc:	0211      	lsls	r1, r2, #8
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	68d2      	ldr	r2, [r2, #12]
 8007d02:	0912      	lsrs	r2, r2, #4
 8007d04:	0452      	lsls	r2, r2, #17
 8007d06:	430a      	orrs	r2, r1
 8007d08:	491f      	ldr	r1, [pc, #124]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	614b      	str	r3, [r1, #20]
 8007d0e:	e011      	b.n	8007d34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d10:	4b1d      	ldr	r3, [pc, #116]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6892      	ldr	r2, [r2, #8]
 8007d20:	0211      	lsls	r1, r2, #8
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6912      	ldr	r2, [r2, #16]
 8007d26:	0852      	lsrs	r2, r2, #1
 8007d28:	3a01      	subs	r2, #1
 8007d2a:	0652      	lsls	r2, r2, #25
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	4916      	ldr	r1, [pc, #88]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d34:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d40:	f7fc f9fe 	bl	8004140 <HAL_GetTick>
 8007d44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d46:	e009      	b.n	8007d5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d48:	f7fc f9fa 	bl	8004140 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d902      	bls.n	8007d5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	73fb      	strb	r3, [r7, #15]
          break;
 8007d5a:	e005      	b.n	8007d68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0ef      	beq.n	8007d48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	4904      	ldr	r1, [pc, #16]	; (8007d88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	40021000 	.word	0x40021000

08007d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e049      	b.n	8007e32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d106      	bne.n	8007db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7fb ffac 	bl	8003d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f000 fab6 	bl	800833c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d001      	beq.n	8007e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e04f      	b.n	8007ef4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0201 	orr.w	r2, r2, #1
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01d      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0x76>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7e:	d018      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0x76>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1f      	ldr	r2, [pc, #124]	; (8007f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d013      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0x76>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1e      	ldr	r2, [pc, #120]	; (8007f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00e      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0x76>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1c      	ldr	r2, [pc, #112]	; (8007f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0x76>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	; (8007f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIM_Base_Start_IT+0x76>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a19      	ldr	r2, [pc, #100]	; (8007f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d115      	bne.n	8007ede <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b06      	cmp	r3, #6
 8007ec2:	d015      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0xb4>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eca:	d011      	beq.n	8007ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007edc:	e008      	b.n	8007ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0201 	orr.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e000      	b.n	8007ef2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	00010007 	.word	0x00010007

08007f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d122      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d11b      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f06f 0202 	mvn.w	r2, #2
 8007f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9ce 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007f64:	e005      	b.n	8007f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9c0 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f9d1 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d122      	bne.n	8007fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d11b      	bne.n	8007fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0204 	mvn.w	r2, #4
 8007f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f9a4 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8007fb8:	e005      	b.n	8007fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f996 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f9a7 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d122      	bne.n	8008020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d11b      	bne.n	8008020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0208 	mvn.w	r2, #8
 8007ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f97a 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 800800c:	e005      	b.n	800801a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f96c 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f97d 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0310 	and.w	r3, r3, #16
 800802a:	2b10      	cmp	r3, #16
 800802c:	d122      	bne.n	8008074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b10      	cmp	r3, #16
 800803a:	d11b      	bne.n	8008074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0210 	mvn.w	r2, #16
 8008044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2208      	movs	r2, #8
 800804a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f950 	bl	8008300 <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f942 	bl	80082ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f953 	bl	8008314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b01      	cmp	r3, #1
 8008080:	d10e      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b01      	cmp	r3, #1
 800808e:	d107      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0201 	mvn.w	r2, #1
 8008098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fa ff9a 	bl	8002fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080aa:	2b80      	cmp	r3, #128	; 0x80
 80080ac:	d10e      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d107      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fafe 	bl	80086c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080da:	d10e      	bne.n	80080fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e6:	2b80      	cmp	r3, #128	; 0x80
 80080e8:	d107      	bne.n	80080fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 faf1 	bl	80086dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008104:	2b40      	cmp	r3, #64	; 0x40
 8008106:	d10e      	bne.n	8008126 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008112:	2b40      	cmp	r3, #64	; 0x40
 8008114:	d107      	bne.n	8008126 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800811e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f901 	bl	8008328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f003 0320 	and.w	r3, r3, #32
 8008130:	2b20      	cmp	r3, #32
 8008132:	d10e      	bne.n	8008152 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b20      	cmp	r3, #32
 8008140:	d107      	bne.n	8008152 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f06f 0220 	mvn.w	r2, #32
 800814a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fab1 	bl	80086b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_TIM_ConfigClockSource+0x1c>
 8008172:	2302      	movs	r3, #2
 8008174:	e0b6      	b.n	80082e4 <HAL_TIM_ConfigClockSource+0x18a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008194:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008198:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b2:	d03e      	beq.n	8008232 <HAL_TIM_ConfigClockSource+0xd8>
 80081b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b8:	f200 8087 	bhi.w	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c0:	f000 8086 	beq.w	80082d0 <HAL_TIM_ConfigClockSource+0x176>
 80081c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c8:	d87f      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081ca:	2b70      	cmp	r3, #112	; 0x70
 80081cc:	d01a      	beq.n	8008204 <HAL_TIM_ConfigClockSource+0xaa>
 80081ce:	2b70      	cmp	r3, #112	; 0x70
 80081d0:	d87b      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081d2:	2b60      	cmp	r3, #96	; 0x60
 80081d4:	d050      	beq.n	8008278 <HAL_TIM_ConfigClockSource+0x11e>
 80081d6:	2b60      	cmp	r3, #96	; 0x60
 80081d8:	d877      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081da:	2b50      	cmp	r3, #80	; 0x50
 80081dc:	d03c      	beq.n	8008258 <HAL_TIM_ConfigClockSource+0xfe>
 80081de:	2b50      	cmp	r3, #80	; 0x50
 80081e0:	d873      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d058      	beq.n	8008298 <HAL_TIM_ConfigClockSource+0x13e>
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d86f      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081ea:	2b30      	cmp	r3, #48	; 0x30
 80081ec:	d064      	beq.n	80082b8 <HAL_TIM_ConfigClockSource+0x15e>
 80081ee:	2b30      	cmp	r3, #48	; 0x30
 80081f0:	d86b      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d060      	beq.n	80082b8 <HAL_TIM_ConfigClockSource+0x15e>
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d867      	bhi.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d05c      	beq.n	80082b8 <HAL_TIM_ConfigClockSource+0x15e>
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d05a      	beq.n	80082b8 <HAL_TIM_ConfigClockSource+0x15e>
 8008202:	e062      	b.n	80082ca <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	6899      	ldr	r1, [r3, #8]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f000 f9a6 	bl	8008564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008226:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	609a      	str	r2, [r3, #8]
      break;
 8008230:	e04f      	b.n	80082d2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6899      	ldr	r1, [r3, #8]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f000 f98f 	bl	8008564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008254:	609a      	str	r2, [r3, #8]
      break;
 8008256:	e03c      	b.n	80082d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6859      	ldr	r1, [r3, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	461a      	mov	r2, r3
 8008266:	f000 f903 	bl	8008470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2150      	movs	r1, #80	; 0x50
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f95c 	bl	800852e <TIM_ITRx_SetConfig>
      break;
 8008276:	e02c      	b.n	80082d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	6859      	ldr	r1, [r3, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	461a      	mov	r2, r3
 8008286:	f000 f922 	bl	80084ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2160      	movs	r1, #96	; 0x60
 8008290:	4618      	mov	r0, r3
 8008292:	f000 f94c 	bl	800852e <TIM_ITRx_SetConfig>
      break;
 8008296:	e01c      	b.n	80082d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	6859      	ldr	r1, [r3, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	461a      	mov	r2, r3
 80082a6:	f000 f8e3 	bl	8008470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2140      	movs	r1, #64	; 0x40
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f93c 	bl	800852e <TIM_ITRx_SetConfig>
      break;
 80082b6:	e00c      	b.n	80082d2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f000 f933 	bl	800852e <TIM_ITRx_SetConfig>
      break;
 80082c8:	e003      	b.n	80082d2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	73fb      	strb	r3, [r7, #15]
      break;
 80082ce:	e000      	b.n	80082d2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80082d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a40      	ldr	r2, [pc, #256]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835a:	d00f      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <TIM_Base_SetConfig+0x118>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00b      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a3c      	ldr	r2, [pc, #240]	; (8008458 <TIM_Base_SetConfig+0x11c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d007      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a3b      	ldr	r2, [pc, #236]	; (800845c <TIM_Base_SetConfig+0x120>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_Base_SetConfig+0x40>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a3a      	ldr	r2, [pc, #232]	; (8008460 <TIM_Base_SetConfig+0x124>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d108      	bne.n	800838e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2f      	ldr	r2, [pc, #188]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01f      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839c:	d01b      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a2c      	ldr	r2, [pc, #176]	; (8008454 <TIM_Base_SetConfig+0x118>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d017      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a2b      	ldr	r2, [pc, #172]	; (8008458 <TIM_Base_SetConfig+0x11c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	; (800845c <TIM_Base_SetConfig+0x120>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00f      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a29      	ldr	r2, [pc, #164]	; (8008460 <TIM_Base_SetConfig+0x124>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00b      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a28      	ldr	r2, [pc, #160]	; (8008464 <TIM_Base_SetConfig+0x128>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d007      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a27      	ldr	r2, [pc, #156]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_Base_SetConfig+0x9a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a26      	ldr	r2, [pc, #152]	; (800846c <TIM_Base_SetConfig+0x130>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d108      	bne.n	80083e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a10      	ldr	r2, [pc, #64]	; (8008450 <TIM_Base_SetConfig+0x114>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00f      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a12      	ldr	r2, [pc, #72]	; (8008460 <TIM_Base_SetConfig+0x124>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00b      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a11      	ldr	r2, [pc, #68]	; (8008464 <TIM_Base_SetConfig+0x128>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d007      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a10      	ldr	r2, [pc, #64]	; (8008468 <TIM_Base_SetConfig+0x12c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_Base_SetConfig+0xf8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a0f      	ldr	r2, [pc, #60]	; (800846c <TIM_Base_SetConfig+0x130>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d103      	bne.n	800843c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	615a      	str	r2, [r3, #20]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40000400 	.word	0x40000400
 8008458:	40000800 	.word	0x40000800
 800845c:	40000c00 	.word	0x40000c00
 8008460:	40013400 	.word	0x40013400
 8008464:	40014000 	.word	0x40014000
 8008468:	40014400 	.word	0x40014400
 800846c:	40014800 	.word	0x40014800

08008470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f023 0201 	bic.w	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800849a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f023 030a 	bic.w	r3, r3, #10
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	621a      	str	r2, [r3, #32]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b087      	sub	sp, #28
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f023 0210 	bic.w	r2, r3, #16
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	031b      	lsls	r3, r3, #12
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800850a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	f043 0307 	orr.w	r3, r3, #7
 8008550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	609a      	str	r2, [r3, #8]
}
 8008558:	bf00      	nop
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800857e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	021a      	lsls	r2, r3, #8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	431a      	orrs	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4313      	orrs	r3, r2
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	609a      	str	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	371c      	adds	r7, #28
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e068      	b.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a2e      	ldr	r2, [pc, #184]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d004      	beq.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a2d      	ldr	r2, [pc, #180]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d108      	bne.n	8008602 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008608:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1e      	ldr	r2, [pc, #120]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01d      	beq.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800862e:	d018      	beq.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1b      	ldr	r2, [pc, #108]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1a      	ldr	r2, [pc, #104]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a18      	ldr	r2, [pc, #96]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d10c      	bne.n	800867c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	4313      	orrs	r3, r2
 8008672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40013400 	.word	0x40013400
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800
 80086ac:	40000c00 	.word	0x40000c00
 80086b0:	40014000 	.word	0x40014000

080086b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e040      	b.n	8008784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fb fb20 	bl	8003d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2224      	movs	r2, #36	; 0x24
 800871c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f8c0 	bl	80088b4 <UART_SetConfig>
 8008734:	4603      	mov	r3, r0
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e022      	b.n	8008784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fb3e 	bl	8008dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800875a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800876a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0201 	orr.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fbc5 	bl	8008f0c <UART_CheckIdleState>
 8008782:	4603      	mov	r3, r0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	; 0x28
 8008790:	af02      	add	r7, sp, #8
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	603b      	str	r3, [r7, #0]
 8008798:	4613      	mov	r3, r2
 800879a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	f040 8082 	bne.w	80088aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <HAL_UART_Transmit+0x26>
 80087ac:	88fb      	ldrh	r3, [r7, #6]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e07a      	b.n	80088ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_UART_Transmit+0x38>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e073      	b.n	80088ac <HAL_UART_Transmit+0x120>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2221      	movs	r2, #33	; 0x21
 80087d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087da:	f7fb fcb1 	bl	8004140 <HAL_GetTick>
 80087de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	88fa      	ldrh	r2, [r7, #6]
 80087ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f8:	d108      	bne.n	800880c <HAL_UART_Transmit+0x80>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d104      	bne.n	800880c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	61bb      	str	r3, [r7, #24]
 800880a:	e003      	b.n	8008814 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800881c:	e02d      	b.n	800887a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2200      	movs	r2, #0
 8008826:	2180      	movs	r1, #128	; 0x80
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 fbb8 	bl	8008f9e <UART_WaitOnFlagUntilTimeout>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e039      	b.n	80088ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10b      	bne.n	8008856 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	881a      	ldrh	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800884a:	b292      	uxth	r2, r2
 800884c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	3302      	adds	r3, #2
 8008852:	61bb      	str	r3, [r7, #24]
 8008854:	e008      	b.n	8008868 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	781a      	ldrb	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	b292      	uxth	r2, r2
 8008860:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	3301      	adds	r3, #1
 8008866:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1cb      	bne.n	800881e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2200      	movs	r2, #0
 800888e:	2140      	movs	r1, #64	; 0x40
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fb84 	bl	8008f9e <UART_WaitOnFlagUntilTimeout>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e005      	b.n	80088ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	e000      	b.n	80088ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80088aa:	2302      	movs	r3, #2
  }
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3720      	adds	r7, #32
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088b4:	b5b0      	push	{r4, r5, r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689a      	ldr	r2, [r3, #8]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	431a      	orrs	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	4bad      	ldr	r3, [pc, #692]	; (8008b94 <UART_SetConfig+0x2e0>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	69f9      	ldr	r1, [r7, #28]
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4aa2      	ldr	r2, [pc, #648]	; (8008b98 <UART_SetConfig+0x2e4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d004      	beq.n	800891c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	69fa      	ldr	r2, [r7, #28]
 8008918:	4313      	orrs	r3, r2
 800891a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	430a      	orrs	r2, r1
 800892e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a99      	ldr	r2, [pc, #612]	; (8008b9c <UART_SetConfig+0x2e8>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d121      	bne.n	800897e <UART_SetConfig+0xca>
 800893a:	4b99      	ldr	r3, [pc, #612]	; (8008ba0 <UART_SetConfig+0x2ec>)
 800893c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	2b03      	cmp	r3, #3
 8008946:	d817      	bhi.n	8008978 <UART_SetConfig+0xc4>
 8008948:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <UART_SetConfig+0x9c>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	08008961 	.word	0x08008961
 8008954:	0800896d 	.word	0x0800896d
 8008958:	08008967 	.word	0x08008967
 800895c:	08008973 	.word	0x08008973
 8008960:	2301      	movs	r3, #1
 8008962:	76fb      	strb	r3, [r7, #27]
 8008964:	e0e7      	b.n	8008b36 <UART_SetConfig+0x282>
 8008966:	2302      	movs	r3, #2
 8008968:	76fb      	strb	r3, [r7, #27]
 800896a:	e0e4      	b.n	8008b36 <UART_SetConfig+0x282>
 800896c:	2304      	movs	r3, #4
 800896e:	76fb      	strb	r3, [r7, #27]
 8008970:	e0e1      	b.n	8008b36 <UART_SetConfig+0x282>
 8008972:	2308      	movs	r3, #8
 8008974:	76fb      	strb	r3, [r7, #27]
 8008976:	e0de      	b.n	8008b36 <UART_SetConfig+0x282>
 8008978:	2310      	movs	r3, #16
 800897a:	76fb      	strb	r3, [r7, #27]
 800897c:	e0db      	b.n	8008b36 <UART_SetConfig+0x282>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a88      	ldr	r2, [pc, #544]	; (8008ba4 <UART_SetConfig+0x2f0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d132      	bne.n	80089ee <UART_SetConfig+0x13a>
 8008988:	4b85      	ldr	r3, [pc, #532]	; (8008ba0 <UART_SetConfig+0x2ec>)
 800898a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898e:	f003 030c 	and.w	r3, r3, #12
 8008992:	2b0c      	cmp	r3, #12
 8008994:	d828      	bhi.n	80089e8 <UART_SetConfig+0x134>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <UART_SetConfig+0xe8>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089d1 	.word	0x080089d1
 80089a0:	080089e9 	.word	0x080089e9
 80089a4:	080089e9 	.word	0x080089e9
 80089a8:	080089e9 	.word	0x080089e9
 80089ac:	080089dd 	.word	0x080089dd
 80089b0:	080089e9 	.word	0x080089e9
 80089b4:	080089e9 	.word	0x080089e9
 80089b8:	080089e9 	.word	0x080089e9
 80089bc:	080089d7 	.word	0x080089d7
 80089c0:	080089e9 	.word	0x080089e9
 80089c4:	080089e9 	.word	0x080089e9
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	080089e3 	.word	0x080089e3
 80089d0:	2300      	movs	r3, #0
 80089d2:	76fb      	strb	r3, [r7, #27]
 80089d4:	e0af      	b.n	8008b36 <UART_SetConfig+0x282>
 80089d6:	2302      	movs	r3, #2
 80089d8:	76fb      	strb	r3, [r7, #27]
 80089da:	e0ac      	b.n	8008b36 <UART_SetConfig+0x282>
 80089dc:	2304      	movs	r3, #4
 80089de:	76fb      	strb	r3, [r7, #27]
 80089e0:	e0a9      	b.n	8008b36 <UART_SetConfig+0x282>
 80089e2:	2308      	movs	r3, #8
 80089e4:	76fb      	strb	r3, [r7, #27]
 80089e6:	e0a6      	b.n	8008b36 <UART_SetConfig+0x282>
 80089e8:	2310      	movs	r3, #16
 80089ea:	76fb      	strb	r3, [r7, #27]
 80089ec:	e0a3      	b.n	8008b36 <UART_SetConfig+0x282>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a6d      	ldr	r2, [pc, #436]	; (8008ba8 <UART_SetConfig+0x2f4>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d120      	bne.n	8008a3a <UART_SetConfig+0x186>
 80089f8:	4b69      	ldr	r3, [pc, #420]	; (8008ba0 <UART_SetConfig+0x2ec>)
 80089fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a02:	2b30      	cmp	r3, #48	; 0x30
 8008a04:	d013      	beq.n	8008a2e <UART_SetConfig+0x17a>
 8008a06:	2b30      	cmp	r3, #48	; 0x30
 8008a08:	d814      	bhi.n	8008a34 <UART_SetConfig+0x180>
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	d009      	beq.n	8008a22 <UART_SetConfig+0x16e>
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d810      	bhi.n	8008a34 <UART_SetConfig+0x180>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <UART_SetConfig+0x168>
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d006      	beq.n	8008a28 <UART_SetConfig+0x174>
 8008a1a:	e00b      	b.n	8008a34 <UART_SetConfig+0x180>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	76fb      	strb	r3, [r7, #27]
 8008a20:	e089      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a22:	2302      	movs	r3, #2
 8008a24:	76fb      	strb	r3, [r7, #27]
 8008a26:	e086      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	76fb      	strb	r3, [r7, #27]
 8008a2c:	e083      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a2e:	2308      	movs	r3, #8
 8008a30:	76fb      	strb	r3, [r7, #27]
 8008a32:	e080      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a34:	2310      	movs	r3, #16
 8008a36:	76fb      	strb	r3, [r7, #27]
 8008a38:	e07d      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a5b      	ldr	r2, [pc, #364]	; (8008bac <UART_SetConfig+0x2f8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d120      	bne.n	8008a86 <UART_SetConfig+0x1d2>
 8008a44:	4b56      	ldr	r3, [pc, #344]	; (8008ba0 <UART_SetConfig+0x2ec>)
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8008a50:	d013      	beq.n	8008a7a <UART_SetConfig+0x1c6>
 8008a52:	2bc0      	cmp	r3, #192	; 0xc0
 8008a54:	d814      	bhi.n	8008a80 <UART_SetConfig+0x1cc>
 8008a56:	2b80      	cmp	r3, #128	; 0x80
 8008a58:	d009      	beq.n	8008a6e <UART_SetConfig+0x1ba>
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d810      	bhi.n	8008a80 <UART_SetConfig+0x1cc>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <UART_SetConfig+0x1b4>
 8008a62:	2b40      	cmp	r3, #64	; 0x40
 8008a64:	d006      	beq.n	8008a74 <UART_SetConfig+0x1c0>
 8008a66:	e00b      	b.n	8008a80 <UART_SetConfig+0x1cc>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	76fb      	strb	r3, [r7, #27]
 8008a6c:	e063      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	76fb      	strb	r3, [r7, #27]
 8008a72:	e060      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a74:	2304      	movs	r3, #4
 8008a76:	76fb      	strb	r3, [r7, #27]
 8008a78:	e05d      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a7a:	2308      	movs	r3, #8
 8008a7c:	76fb      	strb	r3, [r7, #27]
 8008a7e:	e05a      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a80:	2310      	movs	r3, #16
 8008a82:	76fb      	strb	r3, [r7, #27]
 8008a84:	e057      	b.n	8008b36 <UART_SetConfig+0x282>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a49      	ldr	r2, [pc, #292]	; (8008bb0 <UART_SetConfig+0x2fc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d125      	bne.n	8008adc <UART_SetConfig+0x228>
 8008a90:	4b43      	ldr	r3, [pc, #268]	; (8008ba0 <UART_SetConfig+0x2ec>)
 8008a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a9e:	d017      	beq.n	8008ad0 <UART_SetConfig+0x21c>
 8008aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aa4:	d817      	bhi.n	8008ad6 <UART_SetConfig+0x222>
 8008aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aaa:	d00b      	beq.n	8008ac4 <UART_SetConfig+0x210>
 8008aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab0:	d811      	bhi.n	8008ad6 <UART_SetConfig+0x222>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <UART_SetConfig+0x20a>
 8008ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aba:	d006      	beq.n	8008aca <UART_SetConfig+0x216>
 8008abc:	e00b      	b.n	8008ad6 <UART_SetConfig+0x222>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	76fb      	strb	r3, [r7, #27]
 8008ac2:	e038      	b.n	8008b36 <UART_SetConfig+0x282>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	76fb      	strb	r3, [r7, #27]
 8008ac8:	e035      	b.n	8008b36 <UART_SetConfig+0x282>
 8008aca:	2304      	movs	r3, #4
 8008acc:	76fb      	strb	r3, [r7, #27]
 8008ace:	e032      	b.n	8008b36 <UART_SetConfig+0x282>
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	76fb      	strb	r3, [r7, #27]
 8008ad4:	e02f      	b.n	8008b36 <UART_SetConfig+0x282>
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	76fb      	strb	r3, [r7, #27]
 8008ada:	e02c      	b.n	8008b36 <UART_SetConfig+0x282>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a2d      	ldr	r2, [pc, #180]	; (8008b98 <UART_SetConfig+0x2e4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d125      	bne.n	8008b32 <UART_SetConfig+0x27e>
 8008ae6:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <UART_SetConfig+0x2ec>)
 8008ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008af4:	d017      	beq.n	8008b26 <UART_SetConfig+0x272>
 8008af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008afa:	d817      	bhi.n	8008b2c <UART_SetConfig+0x278>
 8008afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b00:	d00b      	beq.n	8008b1a <UART_SetConfig+0x266>
 8008b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b06:	d811      	bhi.n	8008b2c <UART_SetConfig+0x278>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <UART_SetConfig+0x260>
 8008b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b10:	d006      	beq.n	8008b20 <UART_SetConfig+0x26c>
 8008b12:	e00b      	b.n	8008b2c <UART_SetConfig+0x278>
 8008b14:	2300      	movs	r3, #0
 8008b16:	76fb      	strb	r3, [r7, #27]
 8008b18:	e00d      	b.n	8008b36 <UART_SetConfig+0x282>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	76fb      	strb	r3, [r7, #27]
 8008b1e:	e00a      	b.n	8008b36 <UART_SetConfig+0x282>
 8008b20:	2304      	movs	r3, #4
 8008b22:	76fb      	strb	r3, [r7, #27]
 8008b24:	e007      	b.n	8008b36 <UART_SetConfig+0x282>
 8008b26:	2308      	movs	r3, #8
 8008b28:	76fb      	strb	r3, [r7, #27]
 8008b2a:	e004      	b.n	8008b36 <UART_SetConfig+0x282>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	76fb      	strb	r3, [r7, #27]
 8008b30:	e001      	b.n	8008b36 <UART_SetConfig+0x282>
 8008b32:	2310      	movs	r3, #16
 8008b34:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <UART_SetConfig+0x2e4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	f040 8087 	bne.w	8008c50 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b42:	7efb      	ldrb	r3, [r7, #27]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d837      	bhi.n	8008bb8 <UART_SetConfig+0x304>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0x29c>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008bb9 	.word	0x08008bb9
 8008b58:	08008b7d 	.word	0x08008b7d
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008b83 	.word	0x08008b83
 8008b64:	08008bb9 	.word	0x08008bb9
 8008b68:	08008bb9 	.word	0x08008bb9
 8008b6c:	08008bb9 	.word	0x08008bb9
 8008b70:	08008b8b 	.word	0x08008b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b74:	f7fe fb90 	bl	8007298 <HAL_RCC_GetPCLK1Freq>
 8008b78:	6178      	str	r0, [r7, #20]
        break;
 8008b7a:	e022      	b.n	8008bc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b7c:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <UART_SetConfig+0x300>)
 8008b7e:	617b      	str	r3, [r7, #20]
        break;
 8008b80:	e01f      	b.n	8008bc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b82:	f7fe faf1 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8008b86:	6178      	str	r0, [r7, #20]
        break;
 8008b88:	e01b      	b.n	8008bc2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b8e:	617b      	str	r3, [r7, #20]
        break;
 8008b90:	e017      	b.n	8008bc2 <UART_SetConfig+0x30e>
 8008b92:	bf00      	nop
 8008b94:	efff69f3 	.word	0xefff69f3
 8008b98:	40008000 	.word	0x40008000
 8008b9c:	40013800 	.word	0x40013800
 8008ba0:	40021000 	.word	0x40021000
 8008ba4:	40004400 	.word	0x40004400
 8008ba8:	40004800 	.word	0x40004800
 8008bac:	40004c00 	.word	0x40004c00
 8008bb0:	40005000 	.word	0x40005000
 8008bb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	76bb      	strb	r3, [r7, #26]
        break;
 8008bc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80f1 	beq.w	8008dac <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	4413      	add	r3, r2
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d305      	bcc.n	8008be6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008be0:	697a      	ldr	r2, [r7, #20]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d902      	bls.n	8008bec <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	76bb      	strb	r3, [r7, #26]
 8008bea:	e0df      	b.n	8008dac <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f04f 0100 	mov.w	r1, #0
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	020b      	lsls	r3, r1, #8
 8008bfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c02:	0202      	lsls	r2, r0, #8
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	6849      	ldr	r1, [r1, #4]
 8008c08:	0849      	lsrs	r1, r1, #1
 8008c0a:	4608      	mov	r0, r1
 8008c0c:	f04f 0100 	mov.w	r1, #0
 8008c10:	1814      	adds	r4, r2, r0
 8008c12:	eb43 0501 	adc.w	r5, r3, r1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	4620      	mov	r0, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7f8 f810 	bl	8000c48 <__aeabi_uldivmod>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c36:	d308      	bcc.n	8008c4a <UART_SetConfig+0x396>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c3e:	d204      	bcs.n	8008c4a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	60da      	str	r2, [r3, #12]
 8008c48:	e0b0      	b.n	8008dac <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	76bb      	strb	r3, [r7, #26]
 8008c4e:	e0ad      	b.n	8008dac <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c58:	d15b      	bne.n	8008d12 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008c5a:	7efb      	ldrb	r3, [r7, #27]
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d828      	bhi.n	8008cb2 <UART_SetConfig+0x3fe>
 8008c60:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <UART_SetConfig+0x3b4>)
 8008c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c66:	bf00      	nop
 8008c68:	08008c8d 	.word	0x08008c8d
 8008c6c:	08008c95 	.word	0x08008c95
 8008c70:	08008c9d 	.word	0x08008c9d
 8008c74:	08008cb3 	.word	0x08008cb3
 8008c78:	08008ca3 	.word	0x08008ca3
 8008c7c:	08008cb3 	.word	0x08008cb3
 8008c80:	08008cb3 	.word	0x08008cb3
 8008c84:	08008cb3 	.word	0x08008cb3
 8008c88:	08008cab 	.word	0x08008cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c8c:	f7fe fb04 	bl	8007298 <HAL_RCC_GetPCLK1Freq>
 8008c90:	6178      	str	r0, [r7, #20]
        break;
 8008c92:	e013      	b.n	8008cbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c94:	f7fe fb16 	bl	80072c4 <HAL_RCC_GetPCLK2Freq>
 8008c98:	6178      	str	r0, [r7, #20]
        break;
 8008c9a:	e00f      	b.n	8008cbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c9c:	4b49      	ldr	r3, [pc, #292]	; (8008dc4 <UART_SetConfig+0x510>)
 8008c9e:	617b      	str	r3, [r7, #20]
        break;
 8008ca0:	e00c      	b.n	8008cbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ca2:	f7fe fa61 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8008ca6:	6178      	str	r0, [r7, #20]
        break;
 8008ca8:	e008      	b.n	8008cbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cae:	617b      	str	r3, [r7, #20]
        break;
 8008cb0:	e004      	b.n	8008cbc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	76bb      	strb	r3, [r7, #26]
        break;
 8008cba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d074      	beq.n	8008dac <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	005a      	lsls	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	441a      	add	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b0f      	cmp	r3, #15
 8008cdc:	d916      	bls.n	8008d0c <UART_SetConfig+0x458>
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce4:	d212      	bcs.n	8008d0c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f023 030f 	bic.w	r3, r3, #15
 8008cee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	89fb      	ldrh	r3, [r7, #14]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	89fa      	ldrh	r2, [r7, #14]
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	e04f      	b.n	8008dac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	76bb      	strb	r3, [r7, #26]
 8008d10:	e04c      	b.n	8008dac <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d12:	7efb      	ldrb	r3, [r7, #27]
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d828      	bhi.n	8008d6a <UART_SetConfig+0x4b6>
 8008d18:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <UART_SetConfig+0x46c>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d4d 	.word	0x08008d4d
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	08008d6b 	.word	0x08008d6b
 8008d30:	08008d5b 	.word	0x08008d5b
 8008d34:	08008d6b 	.word	0x08008d6b
 8008d38:	08008d6b 	.word	0x08008d6b
 8008d3c:	08008d6b 	.word	0x08008d6b
 8008d40:	08008d63 	.word	0x08008d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d44:	f7fe faa8 	bl	8007298 <HAL_RCC_GetPCLK1Freq>
 8008d48:	6178      	str	r0, [r7, #20]
        break;
 8008d4a:	e013      	b.n	8008d74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d4c:	f7fe faba 	bl	80072c4 <HAL_RCC_GetPCLK2Freq>
 8008d50:	6178      	str	r0, [r7, #20]
        break;
 8008d52:	e00f      	b.n	8008d74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d54:	4b1b      	ldr	r3, [pc, #108]	; (8008dc4 <UART_SetConfig+0x510>)
 8008d56:	617b      	str	r3, [r7, #20]
        break;
 8008d58:	e00c      	b.n	8008d74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d5a:	f7fe fa05 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8008d5e:	6178      	str	r0, [r7, #20]
        break;
 8008d60:	e008      	b.n	8008d74 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d66:	617b      	str	r3, [r7, #20]
        break;
 8008d68:	e004      	b.n	8008d74 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	76bb      	strb	r3, [r7, #26]
        break;
 8008d72:	bf00      	nop
    }

    if (pclk != 0U)
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d018      	beq.n	8008dac <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	085a      	lsrs	r2, r3, #1
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	441a      	add	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	2b0f      	cmp	r3, #15
 8008d92:	d909      	bls.n	8008da8 <UART_SetConfig+0x4f4>
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d9a:	d205      	bcs.n	8008da8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	e001      	b.n	8008dac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008db8:	7ebb      	ldrb	r3, [r7, #26]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	00f42400 	.word	0x00f42400

08008dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d01a      	beq.n	8008ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ec6:	d10a      	bne.n	8008ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	605a      	str	r2, [r3, #4]
  }
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f1c:	f7fb f910 	bl	8004140 <HAL_GetTick>
 8008f20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d10e      	bne.n	8008f4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f82d 	bl	8008f9e <UART_WaitOnFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e023      	b.n	8008f96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d10e      	bne.n	8008f7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f817 	bl	8008f9e <UART_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e00d      	b.n	8008f96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b09c      	sub	sp, #112	; 0x70
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	603b      	str	r3, [r7, #0]
 8008faa:	4613      	mov	r3, r2
 8008fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fae:	e0a5      	b.n	80090fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	f000 80a1 	beq.w	80090fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fba:	f7fb f8c1 	bl	8004140 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d302      	bcc.n	8008fd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d13e      	bne.n	800904e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ff0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ff6:	e841 2300 	strex	r3, r2, [r1]
 8008ffa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1e6      	bne.n	8008fd0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	663b      	str	r3, [r7, #96]	; 0x60
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009022:	64ba      	str	r2, [r7, #72]	; 0x48
 8009024:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e5      	bne.n	8009002 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2220      	movs	r2, #32
 800903a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2220      	movs	r2, #32
 8009040:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e067      	b.n	800911e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d04f      	beq.n	80090fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800906a:	d147      	bne.n	80090fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009074:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	e853 3f00 	ldrex	r3, [r3]
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800908a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009094:	637b      	str	r3, [r7, #52]	; 0x34
 8009096:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800909a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800909c:	e841 2300 	strex	r3, r2, [r1]
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e6      	bne.n	8009076 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3308      	adds	r3, #8
 80090ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	613b      	str	r3, [r7, #16]
   return(result);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f023 0301 	bic.w	r3, r3, #1
 80090be:	66bb      	str	r3, [r7, #104]	; 0x68
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090c8:	623a      	str	r2, [r7, #32]
 80090ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	69f9      	ldr	r1, [r7, #28]
 80090ce:	6a3a      	ldr	r2, [r7, #32]
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e5      	bne.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2220      	movs	r2, #32
 80090e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2220      	movs	r2, #32
 80090e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e010      	b.n	800911e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	69da      	ldr	r2, [r3, #28]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	4013      	ands	r3, r2
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	429a      	cmp	r2, r3
 800910a:	bf0c      	ite	eq
 800910c:	2301      	moveq	r3, #1
 800910e:	2300      	movne	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	429a      	cmp	r2, r3
 8009118:	f43f af4a 	beq.w	8008fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3770      	adds	r7, #112	; 0x70
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <cnn_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool cnn_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8009136:	f107 030c 	add.w	r3, r7, #12
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	2101      	movs	r1, #1
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fb4c 	bl	80097dc <ai_platform_get_activations_map>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d043      	beq.n	80091d2 <cnn_model_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    conv2d_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 600);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009150:	4a25      	ldr	r2, [pc, #148]	; (80091e8 <cnn_model_configure_activations+0xc0>)
 8009152:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 600);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800915a:	4a23      	ldr	r2, [pc, #140]	; (80091e8 <cnn_model_configure_activations+0xc0>)
 800915c:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_output_array.data = AI_PTR(activations_map[0] + 600);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009164:	4a21      	ldr	r2, [pc, #132]	; (80091ec <cnn_model_configure_activations+0xc4>)
 8009166:	6093      	str	r3, [r2, #8]
    batch_normalization_1_output_array.data_start = AI_PTR(activations_map[0] + 600);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800916e:	4a1f      	ldr	r2, [pc, #124]	; (80091ec <cnn_model_configure_activations+0xc4>)
 8009170:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4a1e      	ldr	r2, [pc, #120]	; (80091f0 <cnn_model_configure_activations+0xc8>)
 8009176:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4a1d      	ldr	r2, [pc, #116]	; (80091f0 <cnn_model_configure_activations+0xc8>)
 800917c:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_output_array.data = AI_PTR(activations_map[0] + 7680);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8009184:	4a1b      	ldr	r2, [pc, #108]	; (80091f4 <cnn_model_configure_activations+0xcc>)
 8009186:	6093      	str	r3, [r2, #8]
    batch_normalization_2_output_array.data_start = AI_PTR(activations_map[0] + 7680);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800918e:	4a19      	ldr	r2, [pc, #100]	; (80091f4 <cnn_model_configure_activations+0xcc>)
 8009190:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4a18      	ldr	r2, [pc, #96]	; (80091f8 <cnn_model_configure_activations+0xd0>)
 8009196:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4a17      	ldr	r2, [pc, #92]	; (80091f8 <cnn_model_configure_activations+0xd0>)
 800919c:	60d3      	str	r3, [r2, #12]
    dense_2_dense_output_array.data = AI_PTR(activations_map[0] + 64);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3340      	adds	r3, #64	; 0x40
 80091a2:	4a16      	ldr	r2, [pc, #88]	; (80091fc <cnn_model_configure_activations+0xd4>)
 80091a4:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(activations_map[0] + 64);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3340      	adds	r3, #64	; 0x40
 80091aa:	4a14      	ldr	r2, [pc, #80]	; (80091fc <cnn_model_configure_activations+0xd4>)
 80091ac:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations_map[0] + 576);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80091b4:	4a12      	ldr	r2, [pc, #72]	; (8009200 <cnn_model_configure_activations+0xd8>)
 80091b6:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations_map[0] + 576);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80091be:	4a10      	ldr	r2, [pc, #64]	; (8009200 <cnn_model_configure_activations+0xd8>)
 80091c0:	60d3      	str	r3, [r2, #12]
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4a0f      	ldr	r2, [pc, #60]	; (8009204 <cnn_model_configure_activations+0xdc>)
 80091c6:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4a0e      	ldr	r2, [pc, #56]	; (8009204 <cnn_model_configure_activations+0xdc>)
 80091cc:	60d3      	str	r3, [r2, #12]
    
    return true;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e005      	b.n	80091de <cnn_model_configure_activations+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80091d2:	2213      	movs	r2, #19
 80091d4:	2130      	movs	r1, #48	; 0x30
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fbcc 	bl	8009974 <ai_platform_network_set_error>
  return false;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000024 	.word	0x20000024
 80091ec:	20000034 	.word	0x20000034
 80091f0:	20000044 	.word	0x20000044
 80091f4:	20000054 	.word	0x20000054
 80091f8:	20000064 	.word	0x20000064
 80091fc:	20000074 	.word	0x20000074
 8009200:	20000084 	.word	0x20000084
 8009204:	20000094 	.word	0x20000094

08009208 <cnn_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool cnn_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8009216:	f107 030c 	add.w	r3, r7, #12
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	2101      	movs	r1, #1
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fa8c 	bl	800973c <ai_platform_get_weights_map>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 8102 	beq.w	8009430 <cnn_model_configure_weights+0x228>
    /* Updating weights (byte) offsets */
    
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800922c:	4b85      	ldr	r3, [pc, #532]	; (8009444 <cnn_model_configure_weights+0x23c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009234:	4a83      	ldr	r2, [pc, #524]	; (8009444 <cnn_model_configure_weights+0x23c>)
 8009236:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a82      	ldr	r2, [pc, #520]	; (8009444 <cnn_model_configure_weights+0x23c>)
 800923c:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4a80      	ldr	r2, [pc, #512]	; (8009444 <cnn_model_configure_weights+0x23c>)
 8009242:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8009244:	4b80      	ldr	r3, [pc, #512]	; (8009448 <cnn_model_configure_weights+0x240>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800924c:	4a7e      	ldr	r2, [pc, #504]	; (8009448 <cnn_model_configure_weights+0x240>)
 800924e:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 4480);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8009256:	4a7c      	ldr	r2, [pc, #496]	; (8009448 <cnn_model_configure_weights+0x240>)
 8009258:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 4480);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8009260:	4a79      	ldr	r2, [pc, #484]	; (8009448 <cnn_model_configure_weights+0x240>)
 8009262:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_scale_array.format |= AI_FMT_FLAG_CONST;
 8009264:	4b79      	ldr	r3, [pc, #484]	; (800944c <cnn_model_configure_weights+0x244>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800926c:	4a77      	ldr	r2, [pc, #476]	; (800944c <cnn_model_configure_weights+0x244>)
 800926e:	6013      	str	r3, [r2, #0]
    batch_normalization_1_scale_array.data = AI_PTR(weights_map[0] + 4592);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8009276:	3310      	adds	r3, #16
 8009278:	4a74      	ldr	r2, [pc, #464]	; (800944c <cnn_model_configure_weights+0x244>)
 800927a:	6093      	str	r3, [r2, #8]
    batch_normalization_1_scale_array.data_start = AI_PTR(weights_map[0] + 4592);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8009282:	3310      	adds	r3, #16
 8009284:	4a71      	ldr	r2, [pc, #452]	; (800944c <cnn_model_configure_weights+0x244>)
 8009286:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8009288:	4b71      	ldr	r3, [pc, #452]	; (8009450 <cnn_model_configure_weights+0x248>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009290:	4a6f      	ldr	r2, [pc, #444]	; (8009450 <cnn_model_configure_weights+0x248>)
 8009292:	6013      	str	r3, [r2, #0]
    batch_normalization_1_bias_array.data = AI_PTR(weights_map[0] + 4704);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800929a:	4a6d      	ldr	r2, [pc, #436]	; (8009450 <cnn_model_configure_weights+0x248>)
 800929c:	6093      	str	r3, [r2, #8]
    batch_normalization_1_bias_array.data_start = AI_PTR(weights_map[0] + 4704);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80092a4:	4a6a      	ldr	r2, [pc, #424]	; (8009450 <cnn_model_configure_weights+0x248>)
 80092a6:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80092a8:	4b6a      	ldr	r3, [pc, #424]	; (8009454 <cnn_model_configure_weights+0x24c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092b0:	4a68      	ldr	r2, [pc, #416]	; (8009454 <cnn_model_configure_weights+0x24c>)
 80092b2:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 4816);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80092ba:	3310      	adds	r3, #16
 80092bc:	4a65      	ldr	r2, [pc, #404]	; (8009454 <cnn_model_configure_weights+0x24c>)
 80092be:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 4816);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80092c6:	3310      	adds	r3, #16
 80092c8:	4a62      	ldr	r2, [pc, #392]	; (8009454 <cnn_model_configure_weights+0x24c>)
 80092ca:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80092cc:	4b62      	ldr	r3, [pc, #392]	; (8009458 <cnn_model_configure_weights+0x250>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092d4:	4a60      	ldr	r2, [pc, #384]	; (8009458 <cnn_model_configure_weights+0x250>)
 80092d6:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 139216);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80092de:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80092e2:	4a5d      	ldr	r2, [pc, #372]	; (8009458 <cnn_model_configure_weights+0x250>)
 80092e4:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 139216);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80092ec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80092f0:	4a59      	ldr	r2, [pc, #356]	; (8009458 <cnn_model_configure_weights+0x250>)
 80092f2:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 80092f4:	4b59      	ldr	r3, [pc, #356]	; (800945c <cnn_model_configure_weights+0x254>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092fc:	4a57      	ldr	r2, [pc, #348]	; (800945c <cnn_model_configure_weights+0x254>)
 80092fe:	6013      	str	r3, [r2, #0]
    batch_normalization_2_scale_array.data = AI_PTR(weights_map[0] + 139336);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8009306:	3348      	adds	r3, #72	; 0x48
 8009308:	4a54      	ldr	r2, [pc, #336]	; (800945c <cnn_model_configure_weights+0x254>)
 800930a:	6093      	str	r3, [r2, #8]
    batch_normalization_2_scale_array.data_start = AI_PTR(weights_map[0] + 139336);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8009312:	3348      	adds	r3, #72	; 0x48
 8009314:	4a51      	ldr	r2, [pc, #324]	; (800945c <cnn_model_configure_weights+0x254>)
 8009316:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8009318:	4b51      	ldr	r3, [pc, #324]	; (8009460 <cnn_model_configure_weights+0x258>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009320:	4a4f      	ldr	r2, [pc, #316]	; (8009460 <cnn_model_configure_weights+0x258>)
 8009322:	6013      	str	r3, [r2, #0]
    batch_normalization_2_bias_array.data = AI_PTR(weights_map[0] + 139456);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 800932a:	33c0      	adds	r3, #192	; 0xc0
 800932c:	4a4c      	ldr	r2, [pc, #304]	; (8009460 <cnn_model_configure_weights+0x258>)
 800932e:	6093      	str	r3, [r2, #8]
    batch_normalization_2_bias_array.data_start = AI_PTR(weights_map[0] + 139456);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8009336:	33c0      	adds	r3, #192	; 0xc0
 8009338:	4a49      	ldr	r2, [pc, #292]	; (8009460 <cnn_model_configure_weights+0x258>)
 800933a:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800933c:	4b49      	ldr	r3, [pc, #292]	; (8009464 <cnn_model_configure_weights+0x25c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009344:	4a47      	ldr	r2, [pc, #284]	; (8009464 <cnn_model_configure_weights+0x25c>)
 8009346:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(weights_map[0] + 139576);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 800934e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009352:	4a44      	ldr	r2, [pc, #272]	; (8009464 <cnn_model_configure_weights+0x25c>)
 8009354:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(weights_map[0] + 139576);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 800935c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009360:	4a40      	ldr	r2, [pc, #256]	; (8009464 <cnn_model_configure_weights+0x25c>)
 8009362:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8009364:	4b40      	ldr	r3, [pc, #256]	; (8009468 <cnn_model_configure_weights+0x260>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800936c:	4a3e      	ldr	r2, [pc, #248]	; (8009468 <cnn_model_configure_weights+0x260>)
 800936e:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(weights_map[0] + 262456);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8009376:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800937a:	4a3b      	ldr	r2, [pc, #236]	; (8009468 <cnn_model_configure_weights+0x260>)
 800937c:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(weights_map[0] + 262456);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8009384:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009388:	4a37      	ldr	r2, [pc, #220]	; (8009468 <cnn_model_configure_weights+0x260>)
 800938a:	60d3      	str	r3, [r2, #12]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800938c:	4b37      	ldr	r3, [pc, #220]	; (800946c <cnn_model_configure_weights+0x264>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009394:	4a35      	ldr	r2, [pc, #212]	; (800946c <cnn_model_configure_weights+0x264>)
 8009396:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(weights_map[0] + 262520);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800939e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80093a2:	4a32      	ldr	r2, [pc, #200]	; (800946c <cnn_model_configure_weights+0x264>)
 80093a4:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(weights_map[0] + 262520);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80093ac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80093b0:	4a2e      	ldr	r2, [pc, #184]	; (800946c <cnn_model_configure_weights+0x264>)
 80093b2:	60d3      	str	r3, [r2, #12]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80093b4:	4b2e      	ldr	r3, [pc, #184]	; (8009470 <cnn_model_configure_weights+0x268>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093bc:	4a2c      	ldr	r2, [pc, #176]	; (8009470 <cnn_model_configure_weights+0x268>)
 80093be:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(weights_map[0] + 270712);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 80093c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80093ca:	4a29      	ldr	r2, [pc, #164]	; (8009470 <cnn_model_configure_weights+0x268>)
 80093cc:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(weights_map[0] + 270712);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 80093d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80093d8:	4a25      	ldr	r2, [pc, #148]	; (8009470 <cnn_model_configure_weights+0x268>)
 80093da:	60d3      	str	r3, [r2, #12]
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80093dc:	4b25      	ldr	r3, [pc, #148]	; (8009474 <cnn_model_configure_weights+0x26c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093e4:	4a23      	ldr	r2, [pc, #140]	; (8009474 <cnn_model_configure_weights+0x26c>)
 80093e6:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 271224);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 80093ee:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80093f2:	4a20      	ldr	r2, [pc, #128]	; (8009474 <cnn_model_configure_weights+0x26c>)
 80093f4:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 271224);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 80093fc:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8009400:	4a1c      	ldr	r2, [pc, #112]	; (8009474 <cnn_model_configure_weights+0x26c>)
 8009402:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8009404:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <cnn_model_configure_weights+0x270>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800940c:	4a1a      	ldr	r2, [pc, #104]	; (8009478 <cnn_model_configure_weights+0x270>)
 800940e:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 277368);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
 8009416:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800941a:	4a17      	ldr	r2, [pc, #92]	; (8009478 <cnn_model_configure_weights+0x270>)
 800941c:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 277368);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
 8009424:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8009428:	4a13      	ldr	r2, [pc, #76]	; (8009478 <cnn_model_configure_weights+0x270>)
 800942a:	60d3      	str	r3, [r2, #12]
    return true;
 800942c:	2301      	movs	r3, #1
 800942e:	e005      	b.n	800943c <cnn_model_configure_weights+0x234>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8009430:	2212      	movs	r2, #18
 8009432:	2130      	movs	r1, #48	; 0x30
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fa9d 	bl	8009974 <ai_platform_network_set_error>
  return false;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200000b4 	.word	0x200000b4
 8009448:	200000c4 	.word	0x200000c4
 800944c:	200000d4 	.word	0x200000d4
 8009450:	200000e4 	.word	0x200000e4
 8009454:	200000f4 	.word	0x200000f4
 8009458:	20000104 	.word	0x20000104
 800945c:	20000114 	.word	0x20000114
 8009460:	20000124 	.word	0x20000124
 8009464:	20000134 	.word	0x20000134
 8009468:	20000144 	.word	0x20000144
 800946c:	20000154 	.word	0x20000154
 8009470:	20000164 	.word	0x20000164
 8009474:	20000174 	.word	0x20000174
 8009478:	20000184 	.word	0x20000184

0800947c <ai_cnn_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_cnn_model_get_error(ai_handle network)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9fb 	bl	8009880 <ai_platform_network_get_error>
 800948a:	4603      	mov	r3, r0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <ai_cnn_model_create>:

AI_API_ENTRY
ai_error ai_cnn_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af02      	add	r7, sp, #8
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800949e:	2300      	movs	r3, #0
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	2305      	movs	r3, #5
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	2301      	movs	r3, #1
 80094a8:	4a04      	ldr	r2, [pc, #16]	; (80094bc <ai_cnn_model_create+0x28>)
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fc55 	bl	8009d5c <ai_platform_network_create>
 80094b2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000b84 	.word	0x20000b84

080094c0 <ai_cnn_model_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_cnn_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d104      	bne.n	80094da <ai_cnn_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80094d0:	4b06      	ldr	r3, [pc, #24]	; (80094ec <ai_cnn_model_inputs_get+0x2c>)
 80094d2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a06      	ldr	r2, [pc, #24]	; (80094f0 <ai_cnn_model_inputs_get+0x30>)
 80094d8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fa4f 	bl	8009980 <ai_platform_inputs_get>
 80094e2:	4603      	mov	r3, r0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000b84 	.word	0x20000b84
 80094f0:	a1c00100 	.word	0xa1c00100

080094f4 <ai_cnn_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_cnn_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <ai_cnn_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009504:	4b06      	ldr	r3, [pc, #24]	; (8009520 <ai_cnn_model_outputs_get+0x2c>)
 8009506:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a06      	ldr	r2, [pc, #24]	; (8009524 <ai_cnn_model_outputs_get+0x30>)
 800950c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb29 	bl	8009b68 <ai_platform_outputs_get>
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000b84 	.word	0x20000b84
 8009524:	a1c00100 	.word	0xa1c00100

08009528 <ai_cnn_model_destroy>:

AI_API_ENTRY
ai_handle ai_cnn_model_destroy(ai_handle network)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fcf3 	bl	8009f1c <ai_platform_network_destroy>
 8009536:	4603      	mov	r3, r0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <ai_cnn_model_init>:

AI_API_ENTRY
ai_bool ai_cnn_model_init(
  ai_handle network, const ai_network_params* params)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fd5d 	bl	800a00c <ai_platform_network_init>
 8009552:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <ai_cnn_model_init+0x1e>
 800955a:	2300      	movs	r3, #0
 800955c:	e028      	b.n	80095b0 <ai_cnn_model_init+0x70>

  ai_bool ok = true;
 800955e:	2301      	movs	r3, #1
 8009560:	72fb      	strb	r3, [r7, #11]
  ok &= cnn_model_configure_weights(net_ctx, params);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fe4f 	bl	8009208 <cnn_model_configure_weights>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
 800956e:	7afb      	ldrb	r3, [r7, #11]
 8009570:	4013      	ands	r3, r2
 8009572:	2b00      	cmp	r3, #0
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	72fb      	strb	r3, [r7, #11]
  ok &= cnn_model_configure_activations(net_ctx, params);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f7ff fdd2 	bl	8009128 <cnn_model_configure_activations>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	7afb      	ldrb	r3, [r7, #11]
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	bf14      	ite	ne
 8009590:	2301      	movne	r3, #1
 8009592:	2300      	moveq	r3, #0
 8009594:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fe44 	bl	800a224 <ai_platform_network_post_init>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	7afb      	ldrb	r3, [r7, #11]
 80095a2:	4013      	ands	r3, r2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bf14      	ite	ne
 80095a8:	2301      	movne	r3, #1
 80095aa:	2300      	moveq	r3, #0
 80095ac:	72fb      	strb	r3, [r7, #11]

  return ok;
 80095ae:	7afb      	ldrb	r3, [r7, #11]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <ai_cnn_model_run>:


AI_API_ENTRY
ai_i32 ai_cnn_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	68b9      	ldr	r1, [r7, #8]
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 febf 	bl	800a34c <ai_platform_network_process>
 80095ce:	4603      	mov	r3, r0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <ai_cnn_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_cnn_model_data_activations_buffer_get(const ai_handle ptr)
{
 80095d8:	b4b0      	push	{r4, r5, r7}
 80095da:	b08f      	sub	sp, #60	; 0x3c
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <ai_cnn_model_data_activations_buffer_get+0x60>)
 80095e4:	61fb      	str	r3, [r7, #28]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	623b      	str	r3, [r7, #32]
 80095ea:	2300      	movs	r3, #0
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
 80095ee:	2300      	movs	r3, #0
 80095f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f2:	f647 43d8 	movw	r3, #31960	; 0x7cd8
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	2204      	movs	r2, #4
 8009602:	f362 231f 	bfi	r3, r2, #8, #24
 8009606:	633b      	str	r3, [r7, #48]	; 0x30
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <ai_cnn_model_data_activations_buffer_get+0x64>)
 800960a:	f107 040c 	add.w	r4, r7, #12
 800960e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009614:	f107 030c 	add.w	r3, r7, #12
 8009618:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_CNN_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_CNN_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_CNN_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	461d      	mov	r5, r3
 800961e:	f107 041c 	add.w	r4, r7, #28
 8009622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009626:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800962a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	373c      	adds	r7, #60	; 0x3c
 8009632:	46bd      	mov	sp, r7
 8009634:	bcb0      	pop	{r4, r5, r7}
 8009636:	4770      	bx	lr
 8009638:	00040440 	.word	0x00040440
 800963c:	08010dbc 	.word	0x08010dbc

08009640 <ai_cnn_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_cnn_model_data_weights_buffer_get(const ai_handle ptr)
{
 8009640:	b4b0      	push	{r4, r5, r7}
 8009642:	b08f      	sub	sp, #60	; 0x3c
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800964a:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <ai_cnn_model_data_weights_buffer_get+0x60>)
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	623b      	str	r3, [r7, #32]
 8009652:	2300      	movs	r3, #0
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
 8009656:	2300      	movs	r3, #0
 8009658:	62bb      	str	r3, [r7, #40]	; 0x28
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <ai_cnn_model_data_weights_buffer_get+0x64>)
 800965c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800965e:	2301      	movs	r3, #1
 8009660:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	2204      	movs	r2, #4
 8009668:	f362 231f 	bfi	r3, r2, #8, #24
 800966c:	633b      	str	r3, [r7, #48]	; 0x30
 800966e:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <ai_cnn_model_data_weights_buffer_get+0x68>)
 8009670:	f107 040c 	add.w	r4, r7, #12
 8009674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800967a:	f107 030c 	add.w	r3, r7, #12
 800967e:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_CNN_MODEL_DATA_WEIGHTS_SIZE, 1, AI_CNN_MODEL_DATA_WEIGHTS_COUNT),
    AI_CNN_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	461d      	mov	r5, r3
 8009684:	f107 041c 	add.w	r4, r7, #28
 8009688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800968a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800968c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009690:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	373c      	adds	r7, #60	; 0x3c
 8009698:	46bd      	mov	sp, r7
 800969a:	bcb0      	pop	{r4, r5, r7}
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40040440 	.word	0x40040440
 80096a4:	00043ba8 	.word	0x00043ba8
 80096a8:	08010dcc 	.word	0x08010dcc

080096ac <ai_cnn_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_cnn_model_data_weights_get(void)
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_cnn_model_cnn_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_cnn_model_weights_table);
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <ai_cnn_model_data_weights_get+0x10>)

}
 80096b2:	4618      	mov	r0, r3
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	08054a28 	.word	0x08054a28

080096c0 <ai_buffer_get_size>:
 80096c0:	b358      	cbz	r0, 800971a <ai_buffer_get_size+0x5a>
 80096c2:	b430      	push	{r4, r5}
 80096c4:	6803      	ldr	r3, [r0, #0]
 80096c6:	4d15      	ldr	r5, [pc, #84]	; (800971c <ai_buffer_get_size+0x5c>)
 80096c8:	6984      	ldr	r4, [r0, #24]
 80096ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80096ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80096d2:	42ab      	cmp	r3, r5
 80096d4:	6862      	ldr	r2, [r4, #4]
 80096d6:	d01a      	beq.n	800970e <ai_buffer_get_size+0x4e>
 80096d8:	7d03      	ldrb	r3, [r0, #20]
 80096da:	6941      	ldr	r1, [r0, #20]
 80096dc:	f1a3 0301 	sub.w	r3, r3, #1
 80096e0:	fab3 f383 	clz	r3, r3
 80096e4:	095b      	lsrs	r3, r3, #5
 80096e6:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80096ea:	428b      	cmp	r3, r1
 80096ec:	da0b      	bge.n	8009706 <ai_buffer_get_size+0x46>
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d102      	bne.n	80096f8 <ai_buffer_get_size+0x38>
 80096f2:	2902      	cmp	r1, #2
 80096f4:	d007      	beq.n	8009706 <ai_buffer_get_size+0x46>
 80096f6:	2302      	movs	r3, #2
 80096f8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80096fc:	3301      	adds	r3, #1
 80096fe:	428b      	cmp	r3, r1
 8009700:	fb00 f202 	mul.w	r2, r0, r2
 8009704:	d1f3      	bne.n	80096ee <ai_buffer_get_size+0x2e>
 8009706:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800970a:	bc30      	pop	{r4, r5}
 800970c:	4770      	bx	lr
 800970e:	2900      	cmp	r1, #0
 8009710:	d0e2      	beq.n	80096d8 <ai_buffer_get_size+0x18>
 8009712:	321f      	adds	r2, #31
 8009714:	f022 021f 	bic.w	r2, r2, #31
 8009718:	e7de      	b.n	80096d8 <ai_buffer_get_size+0x18>
 800971a:	4770      	bx	lr
 800971c:	000400c0 	.word	0x000400c0

08009720 <ai_buffer_array_sane>:
 8009720:	b138      	cbz	r0, 8009732 <ai_buffer_array_sane+0x12>
 8009722:	6843      	ldr	r3, [r0, #4]
 8009724:	b123      	cbz	r3, 8009730 <ai_buffer_array_sane+0x10>
 8009726:	8840      	ldrh	r0, [r0, #2]
 8009728:	3000      	adds	r0, #0
 800972a:	bf18      	it	ne
 800972c:	2001      	movne	r0, #1
 800972e:	4770      	bx	lr
 8009730:	4618      	mov	r0, r3
 8009732:	4770      	bx	lr

08009734 <_ai_platform_acquire_crc>:
 8009734:	2001      	movs	r0, #1
 8009736:	4770      	bx	lr

08009738 <_ai_platform_release_crc>:
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop

0800973c <ai_platform_get_weights_map>:
 800973c:	b192      	cbz	r2, 8009764 <ai_platform_get_weights_map+0x28>
 800973e:	b188      	cbz	r0, 8009764 <ai_platform_get_weights_map+0x28>
 8009740:	b181      	cbz	r1, 8009764 <ai_platform_get_weights_map+0x28>
 8009742:	b570      	push	{r4, r5, r6, lr}
 8009744:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <ai_platform_get_weights_map+0x9c>)
 8009746:	6814      	ldr	r4, [r2, #0]
 8009748:	429c      	cmp	r4, r3
 800974a:	d00d      	beq.n	8009768 <ai_platform_get_weights_map+0x2c>
 800974c:	6854      	ldr	r4, [r2, #4]
 800974e:	b194      	cbz	r4, 8009776 <ai_platform_get_weights_map+0x3a>
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	429d      	cmp	r5, r3
 8009754:	d027      	beq.n	80097a6 <ai_platform_get_weights_map+0x6a>
 8009756:	6004      	str	r4, [r0, #0]
 8009758:	f1a1 0001 	sub.w	r0, r1, #1
 800975c:	fab0 f080 	clz	r0, r0
 8009760:	0940      	lsrs	r0, r0, #5
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	2000      	movs	r0, #0
 8009766:	4770      	bx	lr
 8009768:	4605      	mov	r5, r0
 800976a:	1d10      	adds	r0, r2, #4
 800976c:	4616      	mov	r6, r2
 800976e:	460c      	mov	r4, r1
 8009770:	f7ff ffd6 	bl	8009720 <ai_buffer_array_sane>
 8009774:	b908      	cbnz	r0, 800977a <ai_platform_get_weights_map+0x3e>
 8009776:	2000      	movs	r0, #0
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	88f3      	ldrh	r3, [r6, #6]
 800977c:	429c      	cmp	r4, r3
 800977e:	d1fa      	bne.n	8009776 <ai_platform_get_weights_map+0x3a>
 8009780:	2100      	movs	r1, #0
 8009782:	1f2b      	subs	r3, r5, #4
 8009784:	4608      	mov	r0, r1
 8009786:	68b2      	ldr	r2, [r6, #8]
 8009788:	440a      	add	r2, r1
 800978a:	311c      	adds	r1, #28
 800978c:	6852      	ldr	r2, [r2, #4]
 800978e:	b12a      	cbz	r2, 800979c <ai_platform_get_weights_map+0x60>
 8009790:	3001      	adds	r0, #1
 8009792:	4284      	cmp	r4, r0
 8009794:	f843 2f04 	str.w	r2, [r3, #4]!
 8009798:	d1f5      	bne.n	8009786 <ai_platform_get_weights_map+0x4a>
 800979a:	4620      	mov	r0, r4
 800979c:	1a20      	subs	r0, r4, r0
 800979e:	fab0 f080 	clz	r0, r0
 80097a2:	0940      	lsrs	r0, r0, #5
 80097a4:	bd70      	pop	{r4, r5, r6, pc}
 80097a6:	6863      	ldr	r3, [r4, #4]
 80097a8:	42ab      	cmp	r3, r5
 80097aa:	f104 0404 	add.w	r4, r4, #4
 80097ae:	d0e2      	beq.n	8009776 <ai_platform_get_weights_map+0x3a>
 80097b0:	3804      	subs	r0, #4
 80097b2:	4626      	mov	r6, r4
 80097b4:	2200      	movs	r2, #0
 80097b6:	e003      	b.n	80097c0 <ai_platform_get_weights_map+0x84>
 80097b8:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80097bc:	42ab      	cmp	r3, r5
 80097be:	d0da      	beq.n	8009776 <ai_platform_get_weights_map+0x3a>
 80097c0:	3201      	adds	r2, #1
 80097c2:	4291      	cmp	r1, r2
 80097c4:	f840 3f04 	str.w	r3, [r0, #4]!
 80097c8:	d1f6      	bne.n	80097b8 <ai_platform_get_weights_map+0x7c>
 80097ca:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80097ce:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <ai_platform_get_weights_map+0x9c>)
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d1d0      	bne.n	8009776 <ai_platform_get_weights_map+0x3a>
 80097d4:	2001      	movs	r0, #1
 80097d6:	bd70      	pop	{r4, r5, r6, pc}
 80097d8:	a1facade 	.word	0xa1facade

080097dc <ai_platform_get_activations_map>:
 80097dc:	b192      	cbz	r2, 8009804 <ai_platform_get_activations_map+0x28>
 80097de:	b188      	cbz	r0, 8009804 <ai_platform_get_activations_map+0x28>
 80097e0:	b181      	cbz	r1, 8009804 <ai_platform_get_activations_map+0x28>
 80097e2:	b570      	push	{r4, r5, r6, lr}
 80097e4:	4b25      	ldr	r3, [pc, #148]	; (800987c <ai_platform_get_activations_map+0xa0>)
 80097e6:	6814      	ldr	r4, [r2, #0]
 80097e8:	429c      	cmp	r4, r3
 80097ea:	d00d      	beq.n	8009808 <ai_platform_get_activations_map+0x2c>
 80097ec:	6a14      	ldr	r4, [r2, #32]
 80097ee:	b19c      	cbz	r4, 8009818 <ai_platform_get_activations_map+0x3c>
 80097f0:	6825      	ldr	r5, [r4, #0]
 80097f2:	429d      	cmp	r5, r3
 80097f4:	d028      	beq.n	8009848 <ai_platform_get_activations_map+0x6c>
 80097f6:	6004      	str	r4, [r0, #0]
 80097f8:	f1a1 0001 	sub.w	r0, r1, #1
 80097fc:	fab0 f080 	clz	r0, r0
 8009800:	0940      	lsrs	r0, r0, #5
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	2000      	movs	r0, #0
 8009806:	4770      	bx	lr
 8009808:	4605      	mov	r5, r0
 800980a:	f102 000c 	add.w	r0, r2, #12
 800980e:	4616      	mov	r6, r2
 8009810:	460c      	mov	r4, r1
 8009812:	f7ff ff85 	bl	8009720 <ai_buffer_array_sane>
 8009816:	b908      	cbnz	r0, 800981c <ai_platform_get_activations_map+0x40>
 8009818:	2000      	movs	r0, #0
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	89f3      	ldrh	r3, [r6, #14]
 800981e:	429c      	cmp	r4, r3
 8009820:	d1fa      	bne.n	8009818 <ai_platform_get_activations_map+0x3c>
 8009822:	2100      	movs	r1, #0
 8009824:	1f2b      	subs	r3, r5, #4
 8009826:	4608      	mov	r0, r1
 8009828:	6932      	ldr	r2, [r6, #16]
 800982a:	440a      	add	r2, r1
 800982c:	311c      	adds	r1, #28
 800982e:	6852      	ldr	r2, [r2, #4]
 8009830:	b12a      	cbz	r2, 800983e <ai_platform_get_activations_map+0x62>
 8009832:	3001      	adds	r0, #1
 8009834:	4284      	cmp	r4, r0
 8009836:	f843 2f04 	str.w	r2, [r3, #4]!
 800983a:	d1f5      	bne.n	8009828 <ai_platform_get_activations_map+0x4c>
 800983c:	4620      	mov	r0, r4
 800983e:	1a20      	subs	r0, r4, r0
 8009840:	fab0 f080 	clz	r0, r0
 8009844:	0940      	lsrs	r0, r0, #5
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	6863      	ldr	r3, [r4, #4]
 800984a:	42ab      	cmp	r3, r5
 800984c:	f104 0404 	add.w	r4, r4, #4
 8009850:	d0e2      	beq.n	8009818 <ai_platform_get_activations_map+0x3c>
 8009852:	3804      	subs	r0, #4
 8009854:	4626      	mov	r6, r4
 8009856:	2200      	movs	r2, #0
 8009858:	e003      	b.n	8009862 <ai_platform_get_activations_map+0x86>
 800985a:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800985e:	42ab      	cmp	r3, r5
 8009860:	d0da      	beq.n	8009818 <ai_platform_get_activations_map+0x3c>
 8009862:	3201      	adds	r2, #1
 8009864:	4291      	cmp	r1, r2
 8009866:	f840 3f04 	str.w	r3, [r0, #4]!
 800986a:	d1f6      	bne.n	800985a <ai_platform_get_activations_map+0x7e>
 800986c:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <ai_platform_get_activations_map+0xa0>)
 8009872:	429a      	cmp	r2, r3
 8009874:	d1d0      	bne.n	8009818 <ai_platform_get_activations_map+0x3c>
 8009876:	2001      	movs	r0, #1
 8009878:	bd70      	pop	{r4, r5, r6, pc}
 800987a:	bf00      	nop
 800987c:	a1facade 	.word	0xa1facade

08009880 <ai_platform_network_get_error>:
 8009880:	b510      	push	{r4, lr}
 8009882:	b120      	cbz	r0, 800988e <ai_platform_network_get_error+0xe>
 8009884:	4b32      	ldr	r3, [pc, #200]	; (8009950 <ai_platform_network_get_error+0xd0>)
 8009886:	6802      	ldr	r2, [r0, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	4604      	mov	r4, r0
 800988c:	d02e      	beq.n	80098ec <ai_platform_network_get_error+0x6c>
 800988e:	4a31      	ldr	r2, [pc, #196]	; (8009954 <ai_platform_network_get_error+0xd4>)
 8009890:	6813      	ldr	r3, [r2, #0]
 8009892:	f023 0301 	bic.w	r3, r3, #1
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	f7ff ff4c 	bl	8009734 <_ai_platform_acquire_crc>
 800989c:	4b2e      	ldr	r3, [pc, #184]	; (8009958 <ai_platform_network_get_error+0xd8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a8:	d00d      	beq.n	80098c6 <ai_platform_network_get_error+0x46>
 80098aa:	4b2c      	ldr	r3, [pc, #176]	; (800995c <ai_platform_network_get_error+0xdc>)
 80098ac:	2201      	movs	r2, #1
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	2a00      	cmp	r2, #0
 80098b4:	d1fc      	bne.n	80098b0 <ai_platform_network_get_error+0x30>
 80098b6:	4b2a      	ldr	r3, [pc, #168]	; (8009960 <ai_platform_network_get_error+0xe0>)
 80098b8:	4a2a      	ldr	r2, [pc, #168]	; (8009964 <ai_platform_network_get_error+0xe4>)
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	4b2a      	ldr	r3, [pc, #168]	; (8009968 <ai_platform_network_get_error+0xe8>)
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d00d      	beq.n	80098e0 <ai_platform_network_get_error+0x60>
 80098c4:	e7fe      	b.n	80098c4 <ai_platform_network_get_error+0x44>
 80098c6:	4b29      	ldr	r3, [pc, #164]	; (800996c <ai_platform_network_get_error+0xec>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	d1fc      	bne.n	80098cc <ai_platform_network_get_error+0x4c>
 80098d2:	4b27      	ldr	r3, [pc, #156]	; (8009970 <ai_platform_network_get_error+0xf0>)
 80098d4:	4a23      	ldr	r2, [pc, #140]	; (8009964 <ai_platform_network_get_error+0xe4>)
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b23      	ldr	r3, [pc, #140]	; (8009968 <ai_platform_network_get_error+0xe8>)
 80098dc:	429a      	cmp	r2, r3
 80098de:	d104      	bne.n	80098ea <ai_platform_network_get_error+0x6a>
 80098e0:	f7ff ff2a 	bl	8009738 <_ai_platform_release_crc>
 80098e4:	f241 0010 	movw	r0, #4112	; 0x1010
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	e7fe      	b.n	80098ea <ai_platform_network_get_error+0x6a>
 80098ec:	4a19      	ldr	r2, [pc, #100]	; (8009954 <ai_platform_network_get_error+0xd4>)
 80098ee:	6813      	ldr	r3, [r2, #0]
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	f7ff ff1d 	bl	8009734 <_ai_platform_acquire_crc>
 80098fa:	4b17      	ldr	r3, [pc, #92]	; (8009958 <ai_platform_network_get_error+0xd8>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009906:	d00d      	beq.n	8009924 <ai_platform_network_get_error+0xa4>
 8009908:	4b14      	ldr	r3, [pc, #80]	; (800995c <ai_platform_network_get_error+0xdc>)
 800990a:	2201      	movs	r2, #1
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	2a00      	cmp	r2, #0
 8009912:	d1fc      	bne.n	800990e <ai_platform_network_get_error+0x8e>
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <ai_platform_network_get_error+0xe0>)
 8009916:	4a13      	ldr	r2, [pc, #76]	; (8009964 <ai_platform_network_get_error+0xe4>)
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	4b12      	ldr	r3, [pc, #72]	; (8009968 <ai_platform_network_get_error+0xe8>)
 800991e:	429a      	cmp	r2, r3
 8009920:	d00e      	beq.n	8009940 <ai_platform_network_get_error+0xc0>
 8009922:	e7fe      	b.n	8009922 <ai_platform_network_get_error+0xa2>
 8009924:	4b11      	ldr	r3, [pc, #68]	; (800996c <ai_platform_network_get_error+0xec>)
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	2a00      	cmp	r2, #0
 800992e:	d1fc      	bne.n	800992a <ai_platform_network_get_error+0xaa>
 8009930:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <ai_platform_network_get_error+0xf0>)
 8009932:	4a0c      	ldr	r2, [pc, #48]	; (8009964 <ai_platform_network_get_error+0xe4>)
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <ai_platform_network_get_error+0xe8>)
 800993a:	429a      	cmp	r2, r3
 800993c:	d000      	beq.n	8009940 <ai_platform_network_get_error+0xc0>
 800993e:	e7fe      	b.n	800993e <ai_platform_network_get_error+0xbe>
 8009940:	f7ff fefa 	bl	8009738 <_ai_platform_release_crc>
 8009944:	f104 0010 	add.w	r0, r4, #16
 8009948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800994c:	f000 bf6c 	b.w	800a828 <core_get_error>
 8009950:	a1c00100 	.word	0xa1c00100
 8009954:	e0002000 	.word	0xe0002000
 8009958:	e0042000 	.word	0xe0042000
 800995c:	58024c08 	.word	0x58024c08
 8009960:	58024c00 	.word	0x58024c00
 8009964:	f407a5c2 	.word	0xf407a5c2
 8009968:	b5e8b5cd 	.word	0xb5e8b5cd
 800996c:	40023008 	.word	0x40023008
 8009970:	40023000 	.word	0x40023000

08009974 <ai_platform_network_set_error>:
 8009974:	b110      	cbz	r0, 800997c <ai_platform_network_set_error+0x8>
 8009976:	3010      	adds	r0, #16
 8009978:	f000 bf5c 	b.w	800a834 <core_set_error>
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <ai_platform_inputs_get>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	b085      	sub	sp, #20
 8009986:	2800      	cmp	r0, #0
 8009988:	f000 80a1 	beq.w	8009ace <ai_platform_inputs_get+0x14e>
 800998c:	4b6d      	ldr	r3, [pc, #436]	; (8009b44 <ai_platform_inputs_get+0x1c4>)
 800998e:	6802      	ldr	r2, [r0, #0]
 8009990:	429a      	cmp	r2, r3
 8009992:	4607      	mov	r7, r0
 8009994:	f040 809b 	bne.w	8009ace <ai_platform_inputs_get+0x14e>
 8009998:	4a6b      	ldr	r2, [pc, #428]	; (8009b48 <ai_platform_inputs_get+0x1c8>)
 800999a:	6813      	ldr	r3, [r2, #0]
 800999c:	f023 0301 	bic.w	r3, r3, #1
 80099a0:	6013      	str	r3, [r2, #0]
 80099a2:	468b      	mov	fp, r1
 80099a4:	f7ff fec6 	bl	8009734 <_ai_platform_acquire_crc>
 80099a8:	4b68      	ldr	r3, [pc, #416]	; (8009b4c <ai_platform_inputs_get+0x1cc>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b4:	d00d      	beq.n	80099d2 <ai_platform_inputs_get+0x52>
 80099b6:	4b66      	ldr	r3, [pc, #408]	; (8009b50 <ai_platform_inputs_get+0x1d0>)
 80099b8:	2201      	movs	r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	2a00      	cmp	r2, #0
 80099c0:	d1fc      	bne.n	80099bc <ai_platform_inputs_get+0x3c>
 80099c2:	4b64      	ldr	r3, [pc, #400]	; (8009b54 <ai_platform_inputs_get+0x1d4>)
 80099c4:	4a64      	ldr	r2, [pc, #400]	; (8009b58 <ai_platform_inputs_get+0x1d8>)
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	4b64      	ldr	r3, [pc, #400]	; (8009b5c <ai_platform_inputs_get+0x1dc>)
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d00d      	beq.n	80099ec <ai_platform_inputs_get+0x6c>
 80099d0:	e7fe      	b.n	80099d0 <ai_platform_inputs_get+0x50>
 80099d2:	4b63      	ldr	r3, [pc, #396]	; (8009b60 <ai_platform_inputs_get+0x1e0>)
 80099d4:	2201      	movs	r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1fc      	bne.n	80099d8 <ai_platform_inputs_get+0x58>
 80099de:	4b61      	ldr	r3, [pc, #388]	; (8009b64 <ai_platform_inputs_get+0x1e4>)
 80099e0:	4a5d      	ldr	r2, [pc, #372]	; (8009b58 <ai_platform_inputs_get+0x1d8>)
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	4b5d      	ldr	r3, [pc, #372]	; (8009b5c <ai_platform_inputs_get+0x1dc>)
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d16f      	bne.n	8009acc <ai_platform_inputs_get+0x14c>
 80099ec:	f7ff fea4 	bl	8009738 <_ai_platform_release_crc>
 80099f0:	f1bb 0f00 	cmp.w	fp, #0
 80099f4:	d002      	beq.n	80099fc <ai_platform_inputs_get+0x7c>
 80099f6:	2300      	movs	r3, #0
 80099f8:	f8ab 3000 	strh.w	r3, [fp]
 80099fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 8081 	beq.w	8009b06 <ai_platform_inputs_get+0x186>
 8009a04:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	d07d      	beq.n	8009b06 <ai_platform_inputs_get+0x186>
 8009a0a:	8833      	ldrh	r3, [r6, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d07a      	beq.n	8009b06 <ai_platform_inputs_get+0x186>
 8009a10:	6873      	ldr	r3, [r6, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d077      	beq.n	8009b06 <ai_platform_inputs_get+0x186>
 8009a16:	681d      	ldr	r5, [r3, #0]
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	d074      	beq.n	8009b06 <ai_platform_inputs_get+0x186>
 8009a1c:	f04f 0800 	mov.w	r8, #0
 8009a20:	f8cd b008 	str.w	fp, [sp, #8]
 8009a24:	46c1      	mov	r9, r8
 8009a26:	46bb      	mov	fp, r7
 8009a28:	68b0      	ldr	r0, [r6, #8]
 8009a2a:	69aa      	ldr	r2, [r5, #24]
 8009a2c:	68ab      	ldr	r3, [r5, #8]
 8009a2e:	6844      	ldr	r4, [r0, #4]
 8009a30:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8009a34:	6810      	ldr	r0, [r2, #0]
 8009a36:	68ef      	ldr	r7, [r5, #12]
 8009a38:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009a3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	9203      	str	r2, [sp, #12]
 8009a44:	f002 fe70 	bl	800c728 <ai_array_to_buffer_fmt>
 8009a48:	9a03      	ldr	r2, [sp, #12]
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	69a8      	ldr	r0, [r5, #24]
 8009a4e:	eb0a 0302 	add.w	r3, sl, r2
 8009a52:	4444      	add	r4, r8
 8009a54:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8009a58:	b16b      	cbz	r3, 8009a76 <ai_platform_inputs_get+0xf6>
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8009a60:	6828      	ldr	r0, [r5, #0]
 8009a62:	6058      	str	r0, [r3, #4]
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d058      	beq.n	8009b1a <ai_platform_inputs_get+0x19a>
 8009a68:	8840      	ldrh	r0, [r0, #2]
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d055      	beq.n	8009b1a <ai_platform_inputs_get+0x19a>
 8009a6e:	2001      	movs	r0, #1
 8009a70:	f84a 0002 	str.w	r0, [sl, r2]
 8009a74:	69a8      	ldr	r0, [r5, #24]
 8009a76:	6842      	ldr	r2, [r0, #4]
 8009a78:	6122      	str	r2, [r4, #16]
 8009a7a:	f04f 0001 	mov.w	r0, #1
 8009a7e:	7520      	strb	r0, [r4, #20]
 8009a80:	9a01      	ldr	r2, [sp, #4]
 8009a82:	6960      	ldr	r0, [r4, #20]
 8009a84:	60a3      	str	r3, [r4, #8]
 8009a86:	f362 201f 	bfi	r0, r2, #8, #24
 8009a8a:	e9c4 1e00 	strd	r1, lr, [r4]
 8009a8e:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8009a92:	2300      	movs	r3, #0
 8009a94:	60e3      	str	r3, [r4, #12]
 8009a96:	8830      	ldrh	r0, [r6, #0]
 8009a98:	f109 0301 	add.w	r3, r9, #1
 8009a9c:	4283      	cmp	r3, r0
 8009a9e:	4699      	mov	r9, r3
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	d207      	bcs.n	8009ab4 <ai_platform_inputs_get+0x134>
 8009aa4:	6870      	ldr	r0, [r6, #4]
 8009aa6:	b128      	cbz	r0, 8009ab4 <ai_platform_inputs_get+0x134>
 8009aa8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8009aac:	f108 081c 	add.w	r8, r8, #28
 8009ab0:	2d00      	cmp	r5, #0
 8009ab2:	d1b9      	bne.n	8009a28 <ai_platform_inputs_get+0xa8>
 8009ab4:	465f      	mov	r7, fp
 8009ab6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009aba:	b322      	cbz	r2, 8009b06 <ai_platform_inputs_get+0x186>
 8009abc:	68b3      	ldr	r3, [r6, #8]
 8009abe:	6858      	ldr	r0, [r3, #4]
 8009ac0:	f1bb 0f00 	cmp.w	fp, #0
 8009ac4:	d026      	beq.n	8009b14 <ai_platform_inputs_get+0x194>
 8009ac6:	f8ab 2000 	strh.w	r2, [fp]
 8009aca:	e023      	b.n	8009b14 <ai_platform_inputs_get+0x194>
 8009acc:	e7fe      	b.n	8009acc <ai_platform_inputs_get+0x14c>
 8009ace:	4a1e      	ldr	r2, [pc, #120]	; (8009b48 <ai_platform_inputs_get+0x1c8>)
 8009ad0:	6813      	ldr	r3, [r2, #0]
 8009ad2:	f023 0301 	bic.w	r3, r3, #1
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	f7ff fe2c 	bl	8009734 <_ai_platform_acquire_crc>
 8009adc:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <ai_platform_inputs_get+0x1cc>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae8:	d01a      	beq.n	8009b20 <ai_platform_inputs_get+0x1a0>
 8009aea:	4b19      	ldr	r3, [pc, #100]	; (8009b50 <ai_platform_inputs_get+0x1d0>)
 8009aec:	2201      	movs	r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d1fc      	bne.n	8009af0 <ai_platform_inputs_get+0x170>
 8009af6:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <ai_platform_inputs_get+0x1d4>)
 8009af8:	4a17      	ldr	r2, [pc, #92]	; (8009b58 <ai_platform_inputs_get+0x1d8>)
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b17      	ldr	r3, [pc, #92]	; (8009b5c <ai_platform_inputs_get+0x1dc>)
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d01b      	beq.n	8009b3c <ai_platform_inputs_get+0x1bc>
 8009b04:	e7fe      	b.n	8009b04 <ai_platform_inputs_get+0x184>
 8009b06:	f107 0010 	add.w	r0, r7, #16
 8009b0a:	2218      	movs	r2, #24
 8009b0c:	2111      	movs	r1, #17
 8009b0e:	f000 fe91 	bl	800a834 <core_set_error>
 8009b12:	2000      	movs	r0, #0
 8009b14:	b005      	add	sp, #20
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1a:	69a8      	ldr	r0, [r5, #24]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e7aa      	b.n	8009a76 <ai_platform_inputs_get+0xf6>
 8009b20:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <ai_platform_inputs_get+0x1e0>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	d1fc      	bne.n	8009b26 <ai_platform_inputs_get+0x1a6>
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <ai_platform_inputs_get+0x1e4>)
 8009b2e:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <ai_platform_inputs_get+0x1d8>)
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <ai_platform_inputs_get+0x1dc>)
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d000      	beq.n	8009b3c <ai_platform_inputs_get+0x1bc>
 8009b3a:	e7fe      	b.n	8009b3a <ai_platform_inputs_get+0x1ba>
 8009b3c:	f7ff fdfc 	bl	8009738 <_ai_platform_release_crc>
 8009b40:	2000      	movs	r0, #0
 8009b42:	e7e7      	b.n	8009b14 <ai_platform_inputs_get+0x194>
 8009b44:	a1c00100 	.word	0xa1c00100
 8009b48:	e0002000 	.word	0xe0002000
 8009b4c:	e0042000 	.word	0xe0042000
 8009b50:	58024c08 	.word	0x58024c08
 8009b54:	58024c00 	.word	0x58024c00
 8009b58:	f407a5c2 	.word	0xf407a5c2
 8009b5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009b60:	40023008 	.word	0x40023008
 8009b64:	40023000 	.word	0x40023000

08009b68 <ai_platform_outputs_get>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	f000 80a9 	beq.w	8009cc6 <ai_platform_outputs_get+0x15e>
 8009b74:	4b70      	ldr	r3, [pc, #448]	; (8009d38 <ai_platform_outputs_get+0x1d0>)
 8009b76:	6802      	ldr	r2, [r0, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	f040 80a3 	bne.w	8009cc6 <ai_platform_outputs_get+0x15e>
 8009b80:	4a6e      	ldr	r2, [pc, #440]	; (8009d3c <ai_platform_outputs_get+0x1d4>)
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	f023 0301 	bic.w	r3, r3, #1
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	468b      	mov	fp, r1
 8009b8c:	f7ff fdd2 	bl	8009734 <_ai_platform_acquire_crc>
 8009b90:	4b6b      	ldr	r3, [pc, #428]	; (8009d40 <ai_platform_outputs_get+0x1d8>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b9c:	d00d      	beq.n	8009bba <ai_platform_outputs_get+0x52>
 8009b9e:	4b69      	ldr	r3, [pc, #420]	; (8009d44 <ai_platform_outputs_get+0x1dc>)
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	d1fc      	bne.n	8009ba4 <ai_platform_outputs_get+0x3c>
 8009baa:	4b67      	ldr	r3, [pc, #412]	; (8009d48 <ai_platform_outputs_get+0x1e0>)
 8009bac:	4a67      	ldr	r2, [pc, #412]	; (8009d4c <ai_platform_outputs_get+0x1e4>)
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b67      	ldr	r3, [pc, #412]	; (8009d50 <ai_platform_outputs_get+0x1e8>)
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d00d      	beq.n	8009bd4 <ai_platform_outputs_get+0x6c>
 8009bb8:	e7fe      	b.n	8009bb8 <ai_platform_outputs_get+0x50>
 8009bba:	4b66      	ldr	r3, [pc, #408]	; (8009d54 <ai_platform_outputs_get+0x1ec>)
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	d1fc      	bne.n	8009bc0 <ai_platform_outputs_get+0x58>
 8009bc6:	4b64      	ldr	r3, [pc, #400]	; (8009d58 <ai_platform_outputs_get+0x1f0>)
 8009bc8:	4a60      	ldr	r2, [pc, #384]	; (8009d4c <ai_platform_outputs_get+0x1e4>)
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b60      	ldr	r3, [pc, #384]	; (8009d50 <ai_platform_outputs_get+0x1e8>)
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d177      	bne.n	8009cc4 <ai_platform_outputs_get+0x15c>
 8009bd4:	f7ff fdb0 	bl	8009738 <_ai_platform_release_crc>
 8009bd8:	f1bb 0f00 	cmp.w	fp, #0
 8009bdc:	d002      	beq.n	8009be4 <ai_platform_outputs_get+0x7c>
 8009bde:	2300      	movs	r3, #0
 8009be0:	f8ab 3000 	strh.w	r3, [fp]
 8009be4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	f240 809a 	bls.w	8009d20 <ai_platform_outputs_get+0x1b8>
 8009bec:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8009bee:	f116 0f0c 	cmn.w	r6, #12
 8009bf2:	f000 8095 	beq.w	8009d20 <ai_platform_outputs_get+0x1b8>
 8009bf6:	89b3      	ldrh	r3, [r6, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8091 	beq.w	8009d20 <ai_platform_outputs_get+0x1b8>
 8009bfe:	6933      	ldr	r3, [r6, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 808d 	beq.w	8009d20 <ai_platform_outputs_get+0x1b8>
 8009c06:	681d      	ldr	r5, [r3, #0]
 8009c08:	2d00      	cmp	r5, #0
 8009c0a:	f000 8089 	beq.w	8009d20 <ai_platform_outputs_get+0x1b8>
 8009c0e:	f04f 0800 	mov.w	r8, #0
 8009c12:	f8cd b008 	str.w	fp, [sp, #8]
 8009c16:	46c1      	mov	r9, r8
 8009c18:	46bb      	mov	fp, r7
 8009c1a:	6970      	ldr	r0, [r6, #20]
 8009c1c:	69aa      	ldr	r2, [r5, #24]
 8009c1e:	68ab      	ldr	r3, [r5, #8]
 8009c20:	6844      	ldr	r4, [r0, #4]
 8009c22:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8009c26:	6810      	ldr	r0, [r2, #0]
 8009c28:	68ef      	ldr	r7, [r5, #12]
 8009c2a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009c2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c32:	9301      	str	r3, [sp, #4]
 8009c34:	9203      	str	r2, [sp, #12]
 8009c36:	f002 fd77 	bl	800c728 <ai_array_to_buffer_fmt>
 8009c3a:	9a03      	ldr	r2, [sp, #12]
 8009c3c:	4601      	mov	r1, r0
 8009c3e:	69a8      	ldr	r0, [r5, #24]
 8009c40:	eb0a 0302 	add.w	r3, sl, r2
 8009c44:	4444      	add	r4, r8
 8009c46:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8009c4a:	b16b      	cbz	r3, 8009c68 <ai_platform_outputs_get+0x100>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8009c52:	6828      	ldr	r0, [r5, #0]
 8009c54:	6058      	str	r0, [r3, #4]
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d051      	beq.n	8009cfe <ai_platform_outputs_get+0x196>
 8009c5a:	8840      	ldrh	r0, [r0, #2]
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d04e      	beq.n	8009cfe <ai_platform_outputs_get+0x196>
 8009c60:	2001      	movs	r0, #1
 8009c62:	f84a 0002 	str.w	r0, [sl, r2]
 8009c66:	69a8      	ldr	r0, [r5, #24]
 8009c68:	6842      	ldr	r2, [r0, #4]
 8009c6a:	6122      	str	r2, [r4, #16]
 8009c6c:	f04f 0001 	mov.w	r0, #1
 8009c70:	7520      	strb	r0, [r4, #20]
 8009c72:	9a01      	ldr	r2, [sp, #4]
 8009c74:	6960      	ldr	r0, [r4, #20]
 8009c76:	60a3      	str	r3, [r4, #8]
 8009c78:	f362 201f 	bfi	r0, r2, #8, #24
 8009c7c:	e9c4 1e00 	strd	r1, lr, [r4]
 8009c80:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8009c84:	2300      	movs	r3, #0
 8009c86:	60e3      	str	r3, [r4, #12]
 8009c88:	89b0      	ldrh	r0, [r6, #12]
 8009c8a:	f109 0301 	add.w	r3, r9, #1
 8009c8e:	4283      	cmp	r3, r0
 8009c90:	4699      	mov	r9, r3
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	d207      	bcs.n	8009ca6 <ai_platform_outputs_get+0x13e>
 8009c96:	6930      	ldr	r0, [r6, #16]
 8009c98:	b128      	cbz	r0, 8009ca6 <ai_platform_outputs_get+0x13e>
 8009c9a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8009c9e:	f108 081c 	add.w	r8, r8, #28
 8009ca2:	2d00      	cmp	r5, #0
 8009ca4:	d1b9      	bne.n	8009c1a <ai_platform_outputs_get+0xb2>
 8009ca6:	465f      	mov	r7, fp
 8009ca8:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009cac:	2a00      	cmp	r2, #0
 8009cae:	d037      	beq.n	8009d20 <ai_platform_outputs_get+0x1b8>
 8009cb0:	6973      	ldr	r3, [r6, #20]
 8009cb2:	6858      	ldr	r0, [r3, #4]
 8009cb4:	f1bb 0f00 	cmp.w	fp, #0
 8009cb8:	d001      	beq.n	8009cbe <ai_platform_outputs_get+0x156>
 8009cba:	f8ab 2000 	strh.w	r2, [fp]
 8009cbe:	b005      	add	sp, #20
 8009cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc4:	e7fe      	b.n	8009cc4 <ai_platform_outputs_get+0x15c>
 8009cc6:	4a1d      	ldr	r2, [pc, #116]	; (8009d3c <ai_platform_outputs_get+0x1d4>)
 8009cc8:	6813      	ldr	r3, [r2, #0]
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	f7ff fd30 	bl	8009734 <_ai_platform_acquire_crc>
 8009cd4:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <ai_platform_outputs_get+0x1d8>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ce0:	d010      	beq.n	8009d04 <ai_platform_outputs_get+0x19c>
 8009ce2:	4b18      	ldr	r3, [pc, #96]	; (8009d44 <ai_platform_outputs_get+0x1dc>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	2a00      	cmp	r2, #0
 8009cec:	d1fc      	bne.n	8009ce8 <ai_platform_outputs_get+0x180>
 8009cee:	4b16      	ldr	r3, [pc, #88]	; (8009d48 <ai_platform_outputs_get+0x1e0>)
 8009cf0:	4a16      	ldr	r2, [pc, #88]	; (8009d4c <ai_platform_outputs_get+0x1e4>)
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <ai_platform_outputs_get+0x1e8>)
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d019      	beq.n	8009d30 <ai_platform_outputs_get+0x1c8>
 8009cfc:	e7fe      	b.n	8009cfc <ai_platform_outputs_get+0x194>
 8009cfe:	69a8      	ldr	r0, [r5, #24]
 8009d00:	2300      	movs	r3, #0
 8009d02:	e7b1      	b.n	8009c68 <ai_platform_outputs_get+0x100>
 8009d04:	4b13      	ldr	r3, [pc, #76]	; (8009d54 <ai_platform_outputs_get+0x1ec>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d1fc      	bne.n	8009d0a <ai_platform_outputs_get+0x1a2>
 8009d10:	4b11      	ldr	r3, [pc, #68]	; (8009d58 <ai_platform_outputs_get+0x1f0>)
 8009d12:	4a0e      	ldr	r2, [pc, #56]	; (8009d4c <ai_platform_outputs_get+0x1e4>)
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	4b0d      	ldr	r3, [pc, #52]	; (8009d50 <ai_platform_outputs_get+0x1e8>)
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d008      	beq.n	8009d30 <ai_platform_outputs_get+0x1c8>
 8009d1e:	e7fe      	b.n	8009d1e <ai_platform_outputs_get+0x1b6>
 8009d20:	f107 0010 	add.w	r0, r7, #16
 8009d24:	2218      	movs	r2, #24
 8009d26:	2111      	movs	r1, #17
 8009d28:	f000 fd84 	bl	800a834 <core_set_error>
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e7c6      	b.n	8009cbe <ai_platform_outputs_get+0x156>
 8009d30:	f7ff fd02 	bl	8009738 <_ai_platform_release_crc>
 8009d34:	2000      	movs	r0, #0
 8009d36:	e7c2      	b.n	8009cbe <ai_platform_outputs_get+0x156>
 8009d38:	a1c00100 	.word	0xa1c00100
 8009d3c:	e0002000 	.word	0xe0002000
 8009d40:	e0042000 	.word	0xe0042000
 8009d44:	58024c08 	.word	0x58024c08
 8009d48:	58024c00 	.word	0x58024c00
 8009d4c:	f407a5c2 	.word	0xf407a5c2
 8009d50:	b5e8b5cd 	.word	0xb5e8b5cd
 8009d54:	40023008 	.word	0x40023008
 8009d58:	40023000 	.word	0x40023000

08009d5c <ai_platform_network_create>:
 8009d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d60:	b083      	sub	sp, #12
 8009d62:	4606      	mov	r6, r0
 8009d64:	4615      	mov	r5, r2
 8009d66:	461f      	mov	r7, r3
 8009d68:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8009d6c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8009d70:	f7ff fce0 	bl	8009734 <_ai_platform_acquire_crc>
 8009d74:	b178      	cbz	r0, 8009d96 <ai_platform_network_create+0x3a>
 8009d76:	4b5f      	ldr	r3, [pc, #380]	; (8009ef4 <ai_platform_network_create+0x198>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d82:	4602      	mov	r2, r0
 8009d84:	d00d      	beq.n	8009da2 <ai_platform_network_create+0x46>
 8009d86:	4b5c      	ldr	r3, [pc, #368]	; (8009ef8 <ai_platform_network_create+0x19c>)
 8009d88:	2118      	movs	r1, #24
 8009d8a:	6019      	str	r1, [r3, #0]
 8009d8c:	6819      	ldr	r1, [r3, #0]
 8009d8e:	2918      	cmp	r1, #24
 8009d90:	d01a      	beq.n	8009dc8 <ai_platform_network_create+0x6c>
 8009d92:	f7ff fcd1 	bl	8009738 <_ai_platform_release_crc>
 8009d96:	f244 1333 	movw	r3, #16691	; 0x4133
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	b003      	add	sp, #12
 8009d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009da2:	4b56      	ldr	r3, [pc, #344]	; (8009efc <ai_platform_network_create+0x1a0>)
 8009da4:	2101      	movs	r1, #1
 8009da6:	6019      	str	r1, [r3, #0]
 8009da8:	2114      	movs	r1, #20
 8009daa:	e001      	b.n	8009db0 <ai_platform_network_create+0x54>
 8009dac:	3901      	subs	r1, #1
 8009dae:	d002      	beq.n	8009db6 <ai_platform_network_create+0x5a>
 8009db0:	6818      	ldr	r0, [r3, #0]
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d1fa      	bne.n	8009dac <ai_platform_network_create+0x50>
 8009db6:	4b51      	ldr	r3, [pc, #324]	; (8009efc <ai_platform_network_create+0x1a0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	b91b      	cbnz	r3, 8009dc4 <ai_platform_network_create+0x68>
 8009dbc:	4b50      	ldr	r3, [pc, #320]	; (8009f00 <ai_platform_network_create+0x1a4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	d006      	beq.n	8009dd2 <ai_platform_network_create+0x76>
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	e7e4      	b.n	8009d92 <ai_platform_network_create+0x36>
 8009dc8:	2101      	movs	r1, #1
 8009dca:	6019      	str	r1, [r3, #0]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	2900      	cmp	r1, #0
 8009dd0:	d1fc      	bne.n	8009dcc <ai_platform_network_create+0x70>
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	f7ff fcb0 	bl	8009738 <_ai_platform_release_crc>
 8009dd8:	4a4a      	ldr	r2, [pc, #296]	; (8009f04 <ai_platform_network_create+0x1a8>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	f023 0301 	bic.w	r3, r3, #1
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	f7ff fca7 	bl	8009734 <_ai_platform_acquire_crc>
 8009de6:	4b43      	ldr	r3, [pc, #268]	; (8009ef4 <ai_platform_network_create+0x198>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df2:	d00d      	beq.n	8009e10 <ai_platform_network_create+0xb4>
 8009df4:	4b40      	ldr	r3, [pc, #256]	; (8009ef8 <ai_platform_network_create+0x19c>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	d1fc      	bne.n	8009dfa <ai_platform_network_create+0x9e>
 8009e00:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <ai_platform_network_create+0x1ac>)
 8009e02:	4a42      	ldr	r2, [pc, #264]	; (8009f0c <ai_platform_network_create+0x1b0>)
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b41      	ldr	r3, [pc, #260]	; (8009f10 <ai_platform_network_create+0x1b4>)
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d00e      	beq.n	8009e2c <ai_platform_network_create+0xd0>
 8009e0e:	e7fe      	b.n	8009e0e <ai_platform_network_create+0xb2>
 8009e10:	4b3a      	ldr	r3, [pc, #232]	; (8009efc <ai_platform_network_create+0x1a0>)
 8009e12:	2201      	movs	r2, #1
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	d1fc      	bne.n	8009e16 <ai_platform_network_create+0xba>
 8009e1c:	4b38      	ldr	r3, [pc, #224]	; (8009f00 <ai_platform_network_create+0x1a4>)
 8009e1e:	4a3b      	ldr	r2, [pc, #236]	; (8009f0c <ai_platform_network_create+0x1b0>)
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	4b3a      	ldr	r3, [pc, #232]	; (8009f10 <ai_platform_network_create+0x1b4>)
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d000      	beq.n	8009e2c <ai_platform_network_create+0xd0>
 8009e2a:	e7fe      	b.n	8009e2a <ai_platform_network_create+0xce>
 8009e2c:	f7ff fc84 	bl	8009738 <_ai_platform_release_crc>
 8009e30:	b1ae      	cbz	r6, 8009e5e <ai_platform_network_create+0x102>
 8009e32:	4b38      	ldr	r3, [pc, #224]	; (8009f14 <ai_platform_network_create+0x1b8>)
 8009e34:	602b      	str	r3, [r5, #0]
 8009e36:	6035      	str	r5, [r6, #0]
 8009e38:	f000 fcf4 	bl	800a824 <core_init>
 8009e3c:	b990      	cbnz	r0, 8009e64 <ai_platform_network_create+0x108>
 8009e3e:	2430      	movs	r4, #48	; 0x30
 8009e40:	2300      	movs	r3, #0
 8009e42:	6033      	str	r3, [r6, #0]
 8009e44:	2610      	movs	r6, #16
 8009e46:	464a      	mov	r2, r9
 8009e48:	4641      	mov	r1, r8
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f002 fc52 	bl	800c6f4 <ai_version_get>
 8009e50:	2300      	movs	r3, #0
 8009e52:	f364 0307 	bfi	r3, r4, #0, #8
 8009e56:	6468      	str	r0, [r5, #68]	; 0x44
 8009e58:	f366 231f 	bfi	r3, r6, #8, #24
 8009e5c:	e79d      	b.n	8009d9a <ai_platform_network_create+0x3e>
 8009e5e:	f241 0310 	movw	r3, #4112	; 0x1010
 8009e62:	e79a      	b.n	8009d9a <ai_platform_network_create+0x3e>
 8009e64:	4a27      	ldr	r2, [pc, #156]	; (8009f04 <ai_platform_network_create+0x1a8>)
 8009e66:	6813      	ldr	r3, [r2, #0]
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	f7ff fc61 	bl	8009734 <_ai_platform_acquire_crc>
 8009e72:	4b20      	ldr	r3, [pc, #128]	; (8009ef4 <ai_platform_network_create+0x198>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e7e:	d00d      	beq.n	8009e9c <ai_platform_network_create+0x140>
 8009e80:	4b1d      	ldr	r3, [pc, #116]	; (8009ef8 <ai_platform_network_create+0x19c>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	d1fc      	bne.n	8009e86 <ai_platform_network_create+0x12a>
 8009e8c:	4b1e      	ldr	r3, [pc, #120]	; (8009f08 <ai_platform_network_create+0x1ac>)
 8009e8e:	4a1f      	ldr	r2, [pc, #124]	; (8009f0c <ai_platform_network_create+0x1b0>)
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b1e      	ldr	r3, [pc, #120]	; (8009f10 <ai_platform_network_create+0x1b4>)
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d00e      	beq.n	8009eb8 <ai_platform_network_create+0x15c>
 8009e9a:	e7fe      	b.n	8009e9a <ai_platform_network_create+0x13e>
 8009e9c:	4b17      	ldr	r3, [pc, #92]	; (8009efc <ai_platform_network_create+0x1a0>)
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	d1fc      	bne.n	8009ea2 <ai_platform_network_create+0x146>
 8009ea8:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <ai_platform_network_create+0x1a4>)
 8009eaa:	4a18      	ldr	r2, [pc, #96]	; (8009f0c <ai_platform_network_create+0x1b0>)
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	4b17      	ldr	r3, [pc, #92]	; (8009f10 <ai_platform_network_create+0x1b4>)
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d000      	beq.n	8009eb8 <ai_platform_network_create+0x15c>
 8009eb6:	e7fe      	b.n	8009eb6 <ai_platform_network_create+0x15a>
 8009eb8:	f7ff fc3e 	bl	8009738 <_ai_platform_release_crc>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4641      	mov	r1, r8
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f002 fc17 	bl	800c6f4 <ai_version_get>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	4604      	mov	r4, r0
 8009eca:	2105      	movs	r1, #5
 8009ecc:	2001      	movs	r0, #1
 8009ece:	f002 fc11 	bl	800c6f4 <ai_version_get>
 8009ed2:	4284      	cmp	r4, r0
 8009ed4:	d001      	beq.n	8009eda <ai_platform_network_create+0x17e>
 8009ed6:	2401      	movs	r4, #1
 8009ed8:	e7b2      	b.n	8009e40 <ai_platform_network_create+0xe4>
 8009eda:	a802      	add	r0, sp, #8
 8009edc:	4b0e      	ldr	r3, [pc, #56]	; (8009f18 <ai_platform_network_create+0x1bc>)
 8009ede:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009ee2:	f002 fb4b 	bl	800c57c <ai_check_custom_types>
 8009ee6:	b110      	cbz	r0, 8009eee <ai_platform_network_create+0x192>
 8009ee8:	2600      	movs	r6, #0
 8009eea:	4634      	mov	r4, r6
 8009eec:	e7ab      	b.n	8009e46 <ai_platform_network_create+0xea>
 8009eee:	2402      	movs	r4, #2
 8009ef0:	e7a6      	b.n	8009e40 <ai_platform_network_create+0xe4>
 8009ef2:	bf00      	nop
 8009ef4:	e0042000 	.word	0xe0042000
 8009ef8:	58024c08 	.word	0x58024c08
 8009efc:	40023008 	.word	0x40023008
 8009f00:	40023000 	.word	0x40023000
 8009f04:	e0002000 	.word	0xe0002000
 8009f08:	58024c00 	.word	0x58024c00
 8009f0c:	f407a5c2 	.word	0xf407a5c2
 8009f10:	b5e8b5cd 	.word	0xb5e8b5cd
 8009f14:	a1c00100 	.word	0xa1c00100
 8009f18:	84048403 	.word	0x84048403

08009f1c <ai_platform_network_destroy>:
 8009f1c:	b510      	push	{r4, lr}
 8009f1e:	4604      	mov	r4, r0
 8009f20:	b118      	cbz	r0, 8009f2a <ai_platform_network_destroy+0xe>
 8009f22:	4b31      	ldr	r3, [pc, #196]	; (8009fe8 <ai_platform_network_destroy+0xcc>)
 8009f24:	6802      	ldr	r2, [r0, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d02d      	beq.n	8009f86 <ai_platform_network_destroy+0x6a>
 8009f2a:	4a30      	ldr	r2, [pc, #192]	; (8009fec <ai_platform_network_destroy+0xd0>)
 8009f2c:	6813      	ldr	r3, [r2, #0]
 8009f2e:	f023 0301 	bic.w	r3, r3, #1
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	f7ff fbfe 	bl	8009734 <_ai_platform_acquire_crc>
 8009f38:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <ai_platform_network_destroy+0xd4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f44:	d00d      	beq.n	8009f62 <ai_platform_network_destroy+0x46>
 8009f46:	4b2b      	ldr	r3, [pc, #172]	; (8009ff4 <ai_platform_network_destroy+0xd8>)
 8009f48:	2201      	movs	r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	d1fc      	bne.n	8009f4c <ai_platform_network_destroy+0x30>
 8009f52:	4b29      	ldr	r3, [pc, #164]	; (8009ff8 <ai_platform_network_destroy+0xdc>)
 8009f54:	4a29      	ldr	r2, [pc, #164]	; (8009ffc <ai_platform_network_destroy+0xe0>)
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	4b29      	ldr	r3, [pc, #164]	; (800a000 <ai_platform_network_destroy+0xe4>)
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d00e      	beq.n	8009f7e <ai_platform_network_destroy+0x62>
 8009f60:	e7fe      	b.n	8009f60 <ai_platform_network_destroy+0x44>
 8009f62:	4b28      	ldr	r3, [pc, #160]	; (800a004 <ai_platform_network_destroy+0xe8>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	d1fc      	bne.n	8009f68 <ai_platform_network_destroy+0x4c>
 8009f6e:	4b26      	ldr	r3, [pc, #152]	; (800a008 <ai_platform_network_destroy+0xec>)
 8009f70:	4a22      	ldr	r2, [pc, #136]	; (8009ffc <ai_platform_network_destroy+0xe0>)
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4b22      	ldr	r3, [pc, #136]	; (800a000 <ai_platform_network_destroy+0xe4>)
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d000      	beq.n	8009f7e <ai_platform_network_destroy+0x62>
 8009f7c:	e7fe      	b.n	8009f7c <ai_platform_network_destroy+0x60>
 8009f7e:	f7ff fbdb 	bl	8009738 <_ai_platform_release_crc>
 8009f82:	4620      	mov	r0, r4
 8009f84:	bd10      	pop	{r4, pc}
 8009f86:	4a19      	ldr	r2, [pc, #100]	; (8009fec <ai_platform_network_destroy+0xd0>)
 8009f88:	6813      	ldr	r3, [r2, #0]
 8009f8a:	f023 0301 	bic.w	r3, r3, #1
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	f7ff fbd0 	bl	8009734 <_ai_platform_acquire_crc>
 8009f94:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <ai_platform_network_destroy+0xd4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa0:	d00d      	beq.n	8009fbe <ai_platform_network_destroy+0xa2>
 8009fa2:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <ai_platform_network_destroy+0xd8>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	d1fc      	bne.n	8009fa8 <ai_platform_network_destroy+0x8c>
 8009fae:	4b12      	ldr	r3, [pc, #72]	; (8009ff8 <ai_platform_network_destroy+0xdc>)
 8009fb0:	4a12      	ldr	r2, [pc, #72]	; (8009ffc <ai_platform_network_destroy+0xe0>)
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	4b12      	ldr	r3, [pc, #72]	; (800a000 <ai_platform_network_destroy+0xe4>)
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d00e      	beq.n	8009fda <ai_platform_network_destroy+0xbe>
 8009fbc:	e7fe      	b.n	8009fbc <ai_platform_network_destroy+0xa0>
 8009fbe:	4b11      	ldr	r3, [pc, #68]	; (800a004 <ai_platform_network_destroy+0xe8>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	d1fc      	bne.n	8009fc4 <ai_platform_network_destroy+0xa8>
 8009fca:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <ai_platform_network_destroy+0xec>)
 8009fcc:	4a0b      	ldr	r2, [pc, #44]	; (8009ffc <ai_platform_network_destroy+0xe0>)
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <ai_platform_network_destroy+0xe4>)
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d000      	beq.n	8009fda <ai_platform_network_destroy+0xbe>
 8009fd8:	e7fe      	b.n	8009fd8 <ai_platform_network_destroy+0xbc>
 8009fda:	f7ff fbad 	bl	8009738 <_ai_platform_release_crc>
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f002 fb70 	bl	800c6c4 <ai_layers_destroy_all>
 8009fe4:	2400      	movs	r4, #0
 8009fe6:	e7cc      	b.n	8009f82 <ai_platform_network_destroy+0x66>
 8009fe8:	a1c00100 	.word	0xa1c00100
 8009fec:	e0002000 	.word	0xe0002000
 8009ff0:	e0042000 	.word	0xe0042000
 8009ff4:	58024c08 	.word	0x58024c08
 8009ff8:	58024c00 	.word	0x58024c00
 8009ffc:	f407a5c2 	.word	0xf407a5c2
 800a000:	b5e8b5cd 	.word	0xb5e8b5cd
 800a004:	40023008 	.word	0x40023008
 800a008:	40023000 	.word	0x40023000

0800a00c <ai_platform_network_init>:
 800a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a010:	2800      	cmp	r0, #0
 800a012:	d04b      	beq.n	800a0ac <ai_platform_network_init+0xa0>
 800a014:	4b79      	ldr	r3, [pc, #484]	; (800a1fc <ai_platform_network_init+0x1f0>)
 800a016:	6802      	ldr	r2, [r0, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	4604      	mov	r4, r0
 800a01c:	d146      	bne.n	800a0ac <ai_platform_network_init+0xa0>
 800a01e:	4a78      	ldr	r2, [pc, #480]	; (800a200 <ai_platform_network_init+0x1f4>)
 800a020:	6813      	ldr	r3, [r2, #0]
 800a022:	f023 0301 	bic.w	r3, r3, #1
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	460e      	mov	r6, r1
 800a02a:	f7ff fb83 	bl	8009734 <_ai_platform_acquire_crc>
 800a02e:	4b75      	ldr	r3, [pc, #468]	; (800a204 <ai_platform_network_init+0x1f8>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a03a:	d00d      	beq.n	800a058 <ai_platform_network_init+0x4c>
 800a03c:	4b72      	ldr	r3, [pc, #456]	; (800a208 <ai_platform_network_init+0x1fc>)
 800a03e:	2201      	movs	r2, #1
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	2a00      	cmp	r2, #0
 800a046:	d1fc      	bne.n	800a042 <ai_platform_network_init+0x36>
 800a048:	4b70      	ldr	r3, [pc, #448]	; (800a20c <ai_platform_network_init+0x200>)
 800a04a:	4a71      	ldr	r2, [pc, #452]	; (800a210 <ai_platform_network_init+0x204>)
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	4b70      	ldr	r3, [pc, #448]	; (800a214 <ai_platform_network_init+0x208>)
 800a052:	429a      	cmp	r2, r3
 800a054:	d00d      	beq.n	800a072 <ai_platform_network_init+0x66>
 800a056:	e7fe      	b.n	800a056 <ai_platform_network_init+0x4a>
 800a058:	4b6f      	ldr	r3, [pc, #444]	; (800a218 <ai_platform_network_init+0x20c>)
 800a05a:	2201      	movs	r2, #1
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	2a00      	cmp	r2, #0
 800a062:	d1fc      	bne.n	800a05e <ai_platform_network_init+0x52>
 800a064:	4b6d      	ldr	r3, [pc, #436]	; (800a21c <ai_platform_network_init+0x210>)
 800a066:	4a6a      	ldr	r2, [pc, #424]	; (800a210 <ai_platform_network_init+0x204>)
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	4b69      	ldr	r3, [pc, #420]	; (800a214 <ai_platform_network_init+0x208>)
 800a06e:	429a      	cmp	r2, r3
 800a070:	d11b      	bne.n	800a0aa <ai_platform_network_init+0x9e>
 800a072:	f7ff fb61 	bl	8009738 <_ai_platform_release_crc>
 800a076:	2e00      	cmp	r6, #0
 800a078:	d034      	beq.n	800a0e4 <ai_platform_network_init+0xd8>
 800a07a:	4b69      	ldr	r3, [pc, #420]	; (800a220 <ai_platform_network_init+0x214>)
 800a07c:	6832      	ldr	r2, [r6, #0]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d149      	bne.n	800a116 <ai_platform_network_init+0x10a>
 800a082:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800a086:	6930      	ldr	r0, [r6, #16]
 800a088:	89b3      	ldrh	r3, [r6, #12]
 800a08a:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 800a08e:	62a0      	str	r0, [r4, #40]	; 0x28
 800a090:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800a094:	2203      	movs	r2, #3
 800a096:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800a09a:	84a3      	strh	r3, [r4, #36]	; 0x24
 800a09c:	60e2      	str	r2, [r4, #12]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f002 fa96 	bl	800c5d0 <ai_layers_init_all>
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0aa:	e7fe      	b.n	800a0aa <ai_platform_network_init+0x9e>
 800a0ac:	4a54      	ldr	r2, [pc, #336]	; (800a200 <ai_platform_network_init+0x1f4>)
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	6013      	str	r3, [r2, #0]
 800a0b6:	f7ff fb3d 	bl	8009734 <_ai_platform_acquire_crc>
 800a0ba:	4b52      	ldr	r3, [pc, #328]	; (800a204 <ai_platform_network_init+0x1f8>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0c6:	d015      	beq.n	800a0f4 <ai_platform_network_init+0xe8>
 800a0c8:	4b4f      	ldr	r3, [pc, #316]	; (800a208 <ai_platform_network_init+0x1fc>)
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	2a00      	cmp	r2, #0
 800a0d2:	d1fc      	bne.n	800a0ce <ai_platform_network_init+0xc2>
 800a0d4:	4b4d      	ldr	r3, [pc, #308]	; (800a20c <ai_platform_network_init+0x200>)
 800a0d6:	4a4e      	ldr	r2, [pc, #312]	; (800a210 <ai_platform_network_init+0x204>)
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4b4d      	ldr	r3, [pc, #308]	; (800a214 <ai_platform_network_init+0x208>)
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d015      	beq.n	800a10e <ai_platform_network_init+0x102>
 800a0e2:	e7fe      	b.n	800a0e2 <ai_platform_network_init+0xd6>
 800a0e4:	f104 0010 	add.w	r0, r4, #16
 800a0e8:	2211      	movs	r2, #17
 800a0ea:	2110      	movs	r1, #16
 800a0ec:	4634      	mov	r4, r6
 800a0ee:	f000 fba1 	bl	800a834 <core_set_error>
 800a0f2:	e7d7      	b.n	800a0a4 <ai_platform_network_init+0x98>
 800a0f4:	4b48      	ldr	r3, [pc, #288]	; (800a218 <ai_platform_network_init+0x20c>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	2a00      	cmp	r2, #0
 800a0fe:	d1fc      	bne.n	800a0fa <ai_platform_network_init+0xee>
 800a100:	4b46      	ldr	r3, [pc, #280]	; (800a21c <ai_platform_network_init+0x210>)
 800a102:	4a43      	ldr	r2, [pc, #268]	; (800a210 <ai_platform_network_init+0x204>)
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b42      	ldr	r3, [pc, #264]	; (800a214 <ai_platform_network_init+0x208>)
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d16d      	bne.n	800a1ea <ai_platform_network_init+0x1de>
 800a10e:	f7ff fb13 	bl	8009738 <_ai_platform_release_crc>
 800a112:	2400      	movs	r4, #0
 800a114:	e7c6      	b.n	800a0a4 <ai_platform_network_init+0x98>
 800a116:	4630      	mov	r0, r6
 800a118:	2101      	movs	r1, #1
 800a11a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800a11e:	f7ff facf 	bl	80096c0 <ai_buffer_get_size>
 800a122:	4635      	mov	r5, r6
 800a124:	f106 071c 	add.w	r7, r6, #28
 800a128:	2101      	movs	r1, #1
 800a12a:	4606      	mov	r6, r0
 800a12c:	4638      	mov	r0, r7
 800a12e:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a132:	f7ff fac5 	bl	80096c0 <ai_buffer_get_size>
 800a136:	2e00      	cmp	r6, #0
 800a138:	bf0a      	itet	eq
 800a13a:	46b6      	moveq	lr, r6
 800a13c:	f04f 0e01 	movne.w	lr, #1
 800a140:	4635      	moveq	r5, r6
 800a142:	2800      	cmp	r0, #0
 800a144:	d14b      	bne.n	800a1de <ai_platform_network_init+0x1d2>
 800a146:	4607      	mov	r7, r0
 800a148:	4684      	mov	ip, r0
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	d023      	beq.n	800a198 <ai_platform_network_init+0x18c>
 800a150:	8be3      	ldrh	r3, [r4, #30]
 800a152:	4573      	cmp	r3, lr
 800a154:	d207      	bcs.n	800a166 <ai_platform_network_init+0x15a>
 800a156:	f104 0010 	add.w	r0, r4, #16
 800a15a:	2212      	movs	r2, #18
 800a15c:	2116      	movs	r1, #22
 800a15e:	f000 fb69 	bl	800a834 <core_set_error>
 800a162:	2400      	movs	r4, #0
 800a164:	e79e      	b.n	800a0a4 <ai_platform_network_init+0x98>
 800a166:	f1be 0f00 	cmp.w	lr, #0
 800a16a:	d006      	beq.n	800a17a <ai_platform_network_init+0x16e>
 800a16c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a16e:	6a26      	ldr	r6, [r4, #32]
 800a170:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a172:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a176:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a17a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a17c:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800a180:	2600      	movs	r6, #0
 800a182:	4563      	cmp	r3, ip
 800a184:	83a6      	strh	r6, [r4, #28]
 800a186:	d211      	bcs.n	800a1ac <ai_platform_network_init+0x1a0>
 800a188:	f104 0010 	add.w	r0, r4, #16
 800a18c:	2213      	movs	r2, #19
 800a18e:	2116      	movs	r1, #22
 800a190:	f000 fb50 	bl	800a834 <core_set_error>
 800a194:	4634      	mov	r4, r6
 800a196:	e785      	b.n	800a0a4 <ai_platform_network_init+0x98>
 800a198:	2e00      	cmp	r6, #0
 800a19a:	d0d9      	beq.n	800a150 <ai_platform_network_init+0x144>
 800a19c:	f104 0010 	add.w	r0, r4, #16
 800a1a0:	2212      	movs	r2, #18
 800a1a2:	2110      	movs	r1, #16
 800a1a4:	4644      	mov	r4, r8
 800a1a6:	f000 fb45 	bl	800a834 <core_set_error>
 800a1aa:	e77b      	b.n	800a0a4 <ai_platform_network_init+0x98>
 800a1ac:	f1bc 0f00 	cmp.w	ip, #0
 800a1b0:	d013      	beq.n	800a1da <ai_platform_network_init+0x1ce>
 800a1b2:	f04f 081c 	mov.w	r8, #28
 800a1b6:	fb08 f80c 	mul.w	r8, r8, ip
 800a1ba:	eb07 0e06 	add.w	lr, r7, r6
 800a1be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a1c2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a1c4:	4435      	add	r5, r6
 800a1c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1c8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a1cc:	361c      	adds	r6, #28
 800a1ce:	4546      	cmp	r6, r8
 800a1d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a1d4:	d1f1      	bne.n	800a1ba <ai_platform_network_init+0x1ae>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e75c      	b.n	800a094 <ai_platform_network_init+0x88>
 800a1da:	4663      	mov	r3, ip
 800a1dc:	e75a      	b.n	800a094 <ai_platform_network_init+0x88>
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	d003      	beq.n	800a1ec <ai_platform_network_init+0x1e0>
 800a1e4:	f04f 0c01 	mov.w	ip, #1
 800a1e8:	e7af      	b.n	800a14a <ai_platform_network_init+0x13e>
 800a1ea:	e7fe      	b.n	800a1ea <ai_platform_network_init+0x1de>
 800a1ec:	f104 0010 	add.w	r0, r4, #16
 800a1f0:	2213      	movs	r2, #19
 800a1f2:	2110      	movs	r1, #16
 800a1f4:	464c      	mov	r4, r9
 800a1f6:	f000 fb1d 	bl	800a834 <core_set_error>
 800a1fa:	e753      	b.n	800a0a4 <ai_platform_network_init+0x98>
 800a1fc:	a1c00100 	.word	0xa1c00100
 800a200:	e0002000 	.word	0xe0002000
 800a204:	e0042000 	.word	0xe0042000
 800a208:	58024c08 	.word	0x58024c08
 800a20c:	58024c00 	.word	0x58024c00
 800a210:	f407a5c2 	.word	0xf407a5c2
 800a214:	b5e8b5cd 	.word	0xb5e8b5cd
 800a218:	40023008 	.word	0x40023008
 800a21c:	40023000 	.word	0x40023000
 800a220:	a1facade 	.word	0xa1facade

0800a224 <ai_platform_network_post_init>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	b120      	cbz	r0, 800a232 <ai_platform_network_post_init+0xe>
 800a228:	4b3f      	ldr	r3, [pc, #252]	; (800a328 <ai_platform_network_post_init+0x104>)
 800a22a:	6802      	ldr	r2, [r0, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	4604      	mov	r4, r0
 800a230:	d02d      	beq.n	800a28e <ai_platform_network_post_init+0x6a>
 800a232:	4a3e      	ldr	r2, [pc, #248]	; (800a32c <ai_platform_network_post_init+0x108>)
 800a234:	6813      	ldr	r3, [r2, #0]
 800a236:	f023 0301 	bic.w	r3, r3, #1
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	f7ff fa7a 	bl	8009734 <_ai_platform_acquire_crc>
 800a240:	4b3b      	ldr	r3, [pc, #236]	; (800a330 <ai_platform_network_post_init+0x10c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a24c:	d00d      	beq.n	800a26a <ai_platform_network_post_init+0x46>
 800a24e:	4b39      	ldr	r3, [pc, #228]	; (800a334 <ai_platform_network_post_init+0x110>)
 800a250:	2201      	movs	r2, #1
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	2a00      	cmp	r2, #0
 800a258:	d1fc      	bne.n	800a254 <ai_platform_network_post_init+0x30>
 800a25a:	4b37      	ldr	r3, [pc, #220]	; (800a338 <ai_platform_network_post_init+0x114>)
 800a25c:	4a37      	ldr	r2, [pc, #220]	; (800a33c <ai_platform_network_post_init+0x118>)
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4b37      	ldr	r3, [pc, #220]	; (800a340 <ai_platform_network_post_init+0x11c>)
 800a264:	429a      	cmp	r2, r3
 800a266:	d00d      	beq.n	800a284 <ai_platform_network_post_init+0x60>
 800a268:	e7fe      	b.n	800a268 <ai_platform_network_post_init+0x44>
 800a26a:	4b36      	ldr	r3, [pc, #216]	; (800a344 <ai_platform_network_post_init+0x120>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	2a00      	cmp	r2, #0
 800a274:	d1fc      	bne.n	800a270 <ai_platform_network_post_init+0x4c>
 800a276:	4b34      	ldr	r3, [pc, #208]	; (800a348 <ai_platform_network_post_init+0x124>)
 800a278:	4a30      	ldr	r2, [pc, #192]	; (800a33c <ai_platform_network_post_init+0x118>)
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b30      	ldr	r3, [pc, #192]	; (800a340 <ai_platform_network_post_init+0x11c>)
 800a280:	429a      	cmp	r2, r3
 800a282:	d103      	bne.n	800a28c <ai_platform_network_post_init+0x68>
 800a284:	f7ff fa58 	bl	8009738 <_ai_platform_release_crc>
 800a288:	2000      	movs	r0, #0
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	e7fe      	b.n	800a28c <ai_platform_network_post_init+0x68>
 800a28e:	4a27      	ldr	r2, [pc, #156]	; (800a32c <ai_platform_network_post_init+0x108>)
 800a290:	6813      	ldr	r3, [r2, #0]
 800a292:	f023 0301 	bic.w	r3, r3, #1
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	f7ff fa4c 	bl	8009734 <_ai_platform_acquire_crc>
 800a29c:	4b24      	ldr	r3, [pc, #144]	; (800a330 <ai_platform_network_post_init+0x10c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2a8:	d00d      	beq.n	800a2c6 <ai_platform_network_post_init+0xa2>
 800a2aa:	4b22      	ldr	r3, [pc, #136]	; (800a334 <ai_platform_network_post_init+0x110>)
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	d1fc      	bne.n	800a2b0 <ai_platform_network_post_init+0x8c>
 800a2b6:	4b20      	ldr	r3, [pc, #128]	; (800a338 <ai_platform_network_post_init+0x114>)
 800a2b8:	4a20      	ldr	r2, [pc, #128]	; (800a33c <ai_platform_network_post_init+0x118>)
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	4b20      	ldr	r3, [pc, #128]	; (800a340 <ai_platform_network_post_init+0x11c>)
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d00e      	beq.n	800a2e2 <ai_platform_network_post_init+0xbe>
 800a2c4:	e7fe      	b.n	800a2c4 <ai_platform_network_post_init+0xa0>
 800a2c6:	4b1f      	ldr	r3, [pc, #124]	; (800a344 <ai_platform_network_post_init+0x120>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	d1fc      	bne.n	800a2cc <ai_platform_network_post_init+0xa8>
 800a2d2:	4b1d      	ldr	r3, [pc, #116]	; (800a348 <ai_platform_network_post_init+0x124>)
 800a2d4:	4a19      	ldr	r2, [pc, #100]	; (800a33c <ai_platform_network_post_init+0x118>)
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	4b19      	ldr	r3, [pc, #100]	; (800a340 <ai_platform_network_post_init+0x11c>)
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d000      	beq.n	800a2e2 <ai_platform_network_post_init+0xbe>
 800a2e0:	e7fe      	b.n	800a2e0 <ai_platform_network_post_init+0xbc>
 800a2e2:	f7ff fa29 	bl	8009738 <_ai_platform_release_crc>
 800a2e6:	68e3      	ldr	r3, [r4, #12]
 800a2e8:	f013 0502 	ands.w	r5, r3, #2
 800a2ec:	d011      	beq.n	800a312 <ai_platform_network_post_init+0xee>
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f002 f982 	bl	800c5f8 <ai_layers_post_init_all>
 800a2f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2f6:	b1a3      	cbz	r3, 800a322 <ai_platform_network_post_init+0xfe>
 800a2f8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a2fa:	b195      	cbz	r5, 800a322 <ai_platform_network_post_init+0xfe>
 800a2fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a2fe:	4629      	mov	r1, r5
 800a300:	2000      	movs	r0, #0
 800a302:	4798      	blx	r3
 800a304:	692b      	ldr	r3, [r5, #16]
 800a306:	42ab      	cmp	r3, r5
 800a308:	d00b      	beq.n	800a322 <ai_platform_network_post_init+0xfe>
 800a30a:	461d      	mov	r5, r3
 800a30c:	b14b      	cbz	r3, 800a322 <ai_platform_network_post_init+0xfe>
 800a30e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a310:	e7f4      	b.n	800a2fc <ai_platform_network_post_init+0xd8>
 800a312:	f104 0010 	add.w	r0, r4, #16
 800a316:	2210      	movs	r2, #16
 800a318:	2111      	movs	r1, #17
 800a31a:	f000 fa8b 	bl	800a834 <core_set_error>
 800a31e:	4628      	mov	r0, r5
 800a320:	bd38      	pop	{r3, r4, r5, pc}
 800a322:	2001      	movs	r0, #1
 800a324:	bd38      	pop	{r3, r4, r5, pc}
 800a326:	bf00      	nop
 800a328:	a1c00100 	.word	0xa1c00100
 800a32c:	e0002000 	.word	0xe0002000
 800a330:	e0042000 	.word	0xe0042000
 800a334:	58024c08 	.word	0x58024c08
 800a338:	58024c00 	.word	0x58024c00
 800a33c:	f407a5c2 	.word	0xf407a5c2
 800a340:	b5e8b5cd 	.word	0xb5e8b5cd
 800a344:	40023008 	.word	0x40023008
 800a348:	40023000 	.word	0x40023000

0800a34c <ai_platform_network_process>:
 800a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a350:	b085      	sub	sp, #20
 800a352:	460d      	mov	r5, r1
 800a354:	9202      	str	r2, [sp, #8]
 800a356:	4604      	mov	r4, r0
 800a358:	b120      	cbz	r0, 800a364 <ai_platform_network_process+0x18>
 800a35a:	4b73      	ldr	r3, [pc, #460]	; (800a528 <ai_platform_network_process+0x1dc>)
 800a35c:	6802      	ldr	r2, [r0, #0]
 800a35e:	429a      	cmp	r2, r3
 800a360:	bf18      	it	ne
 800a362:	2400      	movne	r4, #0
 800a364:	4a71      	ldr	r2, [pc, #452]	; (800a52c <ai_platform_network_process+0x1e0>)
 800a366:	6813      	ldr	r3, [r2, #0]
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	f7ff f9e1 	bl	8009734 <_ai_platform_acquire_crc>
 800a372:	4b6f      	ldr	r3, [pc, #444]	; (800a530 <ai_platform_network_process+0x1e4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a37a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a37e:	d00d      	beq.n	800a39c <ai_platform_network_process+0x50>
 800a380:	4b6c      	ldr	r3, [pc, #432]	; (800a534 <ai_platform_network_process+0x1e8>)
 800a382:	2201      	movs	r2, #1
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	2a00      	cmp	r2, #0
 800a38a:	d1fc      	bne.n	800a386 <ai_platform_network_process+0x3a>
 800a38c:	4b6a      	ldr	r3, [pc, #424]	; (800a538 <ai_platform_network_process+0x1ec>)
 800a38e:	4a6b      	ldr	r2, [pc, #428]	; (800a53c <ai_platform_network_process+0x1f0>)
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	4b6a      	ldr	r3, [pc, #424]	; (800a540 <ai_platform_network_process+0x1f4>)
 800a396:	429a      	cmp	r2, r3
 800a398:	d00e      	beq.n	800a3b8 <ai_platform_network_process+0x6c>
 800a39a:	e7fe      	b.n	800a39a <ai_platform_network_process+0x4e>
 800a39c:	4b69      	ldr	r3, [pc, #420]	; (800a544 <ai_platform_network_process+0x1f8>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	d1fc      	bne.n	800a3a2 <ai_platform_network_process+0x56>
 800a3a8:	4b67      	ldr	r3, [pc, #412]	; (800a548 <ai_platform_network_process+0x1fc>)
 800a3aa:	4a64      	ldr	r2, [pc, #400]	; (800a53c <ai_platform_network_process+0x1f0>)
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	4b63      	ldr	r3, [pc, #396]	; (800a540 <ai_platform_network_process+0x1f4>)
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d000      	beq.n	800a3b8 <ai_platform_network_process+0x6c>
 800a3b6:	e7fe      	b.n	800a3b6 <ai_platform_network_process+0x6a>
 800a3b8:	f7ff f9be 	bl	8009738 <_ai_platform_release_crc>
 800a3bc:	2c00      	cmp	r4, #0
 800a3be:	f000 8089 	beq.w	800a4d4 <ai_platform_network_process+0x188>
 800a3c2:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800a3c4:	2f00      	cmp	r7, #0
 800a3c6:	f040 822b 	bne.w	800a820 <ai_platform_network_process+0x4d4>
 800a3ca:	68e3      	ldr	r3, [r4, #12]
 800a3cc:	f003 0303 	and.w	r3, r3, #3
 800a3d0:	2600      	movs	r6, #0
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	6166      	str	r6, [r4, #20]
 800a3d6:	f040 821b 	bne.w	800a810 <ai_platform_network_process+0x4c4>
 800a3da:	2d00      	cmp	r5, #0
 800a3dc:	f000 809c 	beq.w	800a518 <ai_platform_network_process+0x1cc>
 800a3e0:	2f00      	cmp	r7, #0
 800a3e2:	f000 8099 	beq.w	800a518 <ai_platform_network_process+0x1cc>
 800a3e6:	883b      	ldrh	r3, [r7, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 8095 	beq.w	800a518 <ai_platform_network_process+0x1cc>
 800a3ee:	69aa      	ldr	r2, [r5, #24]
 800a3f0:	9401      	str	r4, [sp, #4]
 800a3f2:	f8d2 8000 	ldr.w	r8, [r2]
 800a3f6:	429e      	cmp	r6, r3
 800a3f8:	f080 80a8 	bcs.w	800a54c <ai_platform_network_process+0x200>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80a4 	beq.w	800a54c <ai_platform_network_process+0x200>
 800a404:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a408:	2c00      	cmp	r4, #0
 800a40a:	f000 809f 	beq.w	800a54c <ai_platform_network_process+0x200>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f8d3 b000 	ldr.w	fp, [r3]
 800a414:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800a418:	eb1b 0a09 	adds.w	sl, fp, r9
 800a41c:	d07b      	beq.n	800a516 <ai_platform_network_process+0x1ca>
 800a41e:	69a3      	ldr	r3, [r4, #24]
 800a420:	2101      	movs	r1, #1
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	9303      	str	r3, [sp, #12]
 800a426:	4628      	mov	r0, r5
 800a428:	f7ff f94a 	bl	80096c0 <ai_buffer_get_size>
 800a42c:	9b03      	ldr	r3, [sp, #12]
 800a42e:	4283      	cmp	r3, r0
 800a430:	d368      	bcc.n	800a504 <ai_platform_network_process+0x1b8>
 800a432:	68e0      	ldr	r0, [r4, #12]
 800a434:	69a9      	ldr	r1, [r5, #24]
 800a436:	68c2      	ldr	r2, [r0, #12]
 800a438:	68cb      	ldr	r3, [r1, #12]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d162      	bne.n	800a504 <ai_platform_network_process+0x1b8>
 800a43e:	6882      	ldr	r2, [r0, #8]
 800a440:	688b      	ldr	r3, [r1, #8]
 800a442:	429a      	cmp	r2, r3
 800a444:	d15e      	bne.n	800a504 <ai_platform_network_process+0x1b8>
 800a446:	6842      	ldr	r2, [r0, #4]
 800a448:	684b      	ldr	r3, [r1, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d15a      	bne.n	800a504 <ai_platform_network_process+0x1b8>
 800a44e:	69a3      	ldr	r3, [r4, #24]
 800a450:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a454:	f002 f9e2 	bl	800c81c <ai_array_get_data_byte_size>
 800a458:	9003      	str	r0, [sp, #12]
 800a45a:	4620      	mov	r0, r4
 800a45c:	f002 f950 	bl	800c700 <get_tensor_byte_size>
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	4283      	cmp	r3, r0
 800a464:	d34e      	bcc.n	800a504 <ai_platform_network_process+0x1b8>
 800a466:	69a3      	ldr	r3, [r4, #24]
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f002 f95d 	bl	800c728 <ai_array_to_buffer_fmt>
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	4043      	eors	r3, r0
 800a472:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a476:	d13c      	bne.n	800a4f2 <ai_platform_network_process+0x1a6>
 800a478:	686b      	ldr	r3, [r5, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d04b      	beq.n	800a516 <ai_platform_network_process+0x1ca>
 800a47e:	69ab      	ldr	r3, [r5, #24]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	b362      	cbz	r2, 800a4de <ai_platform_network_process+0x192>
 800a484:	4620      	mov	r0, r4
 800a486:	9203      	str	r2, [sp, #12]
 800a488:	f002 f93a 	bl	800c700 <get_tensor_byte_size>
 800a48c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a490:	69ab      	ldr	r3, [r5, #24]
 800a492:	9a03      	ldr	r2, [sp, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	fb03 f000 	mul.w	r0, r3, r0
 800a49a:	f8ca 000c 	str.w	r0, [sl, #12]
 800a49e:	6869      	ldr	r1, [r5, #4]
 800a4a0:	f8ca 1004 	str.w	r1, [sl, #4]
 800a4a4:	686b      	ldr	r3, [r5, #4]
 800a4a6:	4403      	add	r3, r0
 800a4a8:	f84b 3009 	str.w	r3, [fp, r9]
 800a4ac:	69a0      	ldr	r0, [r4, #24]
 800a4ae:	6803      	ldr	r3, [r0, #0]
 800a4b0:	4590      	cmp	r8, r2
 800a4b2:	bf38      	it	cc
 800a4b4:	4690      	movcc	r8, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	d408      	bmi.n	800a4cc <ai_platform_network_process+0x180>
 800a4ba:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a4be:	1a9b      	subs	r3, r3, r2
 800a4c0:	4419      	add	r1, r3
 800a4c2:	6081      	str	r1, [r0, #8]
 800a4c4:	69a3      	ldr	r3, [r4, #24]
 800a4c6:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a4ca:	60da      	str	r2, [r3, #12]
 800a4cc:	883b      	ldrh	r3, [r7, #0]
 800a4ce:	3601      	adds	r6, #1
 800a4d0:	351c      	adds	r5, #28
 800a4d2:	e790      	b.n	800a3f6 <ai_platform_network_process+0xaa>
 800a4d4:	4623      	mov	r3, r4
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	b005      	add	sp, #20
 800a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	9c01      	ldr	r4, [sp, #4]
 800a4e0:	4692      	mov	sl, r2
 800a4e2:	f104 0010 	add.w	r0, r4, #16
 800a4e6:	2221      	movs	r2, #33	; 0x21
 800a4e8:	2112      	movs	r1, #18
 800a4ea:	f000 f9a3 	bl	800a834 <core_set_error>
 800a4ee:	4653      	mov	r3, sl
 800a4f0:	e7f1      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a4f2:	9c01      	ldr	r4, [sp, #4]
 800a4f4:	2219      	movs	r2, #25
 800a4f6:	f104 0010 	add.w	r0, r4, #16
 800a4fa:	2112      	movs	r1, #18
 800a4fc:	f000 f99a 	bl	800a834 <core_set_error>
 800a500:	2300      	movs	r3, #0
 800a502:	e7e8      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a504:	9c01      	ldr	r4, [sp, #4]
 800a506:	2218      	movs	r2, #24
 800a508:	f104 0010 	add.w	r0, r4, #16
 800a50c:	2112      	movs	r1, #18
 800a50e:	f000 f991 	bl	800a834 <core_set_error>
 800a512:	2300      	movs	r3, #0
 800a514:	e7df      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a516:	9c01      	ldr	r4, [sp, #4]
 800a518:	f104 0010 	add.w	r0, r4, #16
 800a51c:	2217      	movs	r2, #23
 800a51e:	2112      	movs	r1, #18
 800a520:	f000 f988 	bl	800a834 <core_set_error>
 800a524:	2300      	movs	r3, #0
 800a526:	e7d6      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a528:	a1c00100 	.word	0xa1c00100
 800a52c:	e0002000 	.word	0xe0002000
 800a530:	e0042000 	.word	0xe0042000
 800a534:	58024c08 	.word	0x58024c08
 800a538:	58024c00 	.word	0x58024c00
 800a53c:	f407a5c2 	.word	0xf407a5c2
 800a540:	b5e8b5cd 	.word	0xb5e8b5cd
 800a544:	40023008 	.word	0x40023008
 800a548:	40023000 	.word	0x40023000
 800a54c:	9c01      	ldr	r4, [sp, #4]
 800a54e:	9a02      	ldr	r2, [sp, #8]
 800a550:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a552:	2a00      	cmp	r2, #0
 800a554:	f000 80ab 	beq.w	800a6ae <ai_platform_network_process+0x362>
 800a558:	2b01      	cmp	r3, #1
 800a55a:	f240 809e 	bls.w	800a69a <ai_platform_network_process+0x34e>
 800a55e:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800a562:	f119 0f0c 	cmn.w	r9, #12
 800a566:	f000 8098 	beq.w	800a69a <ai_platform_network_process+0x34e>
 800a56a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 8093 	beq.w	800a69a <ai_platform_network_process+0x34e>
 800a574:	9d02      	ldr	r5, [sp, #8]
 800a576:	9401      	str	r4, [sp, #4]
 800a578:	2700      	movs	r7, #0
 800a57a:	429f      	cmp	r7, r3
 800a57c:	f080 8095 	bcs.w	800a6aa <ai_platform_network_process+0x35e>
 800a580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 8090 	beq.w	800a6aa <ai_platform_network_process+0x35e>
 800a58a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a58e:	2c00      	cmp	r4, #0
 800a590:	f000 808b 	beq.w	800a6aa <ai_platform_network_process+0x35e>
 800a594:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a598:	f8d3 b000 	ldr.w	fp, [r3]
 800a59c:	013e      	lsls	r6, r7, #4
 800a59e:	eb1b 0a06 	adds.w	sl, fp, r6
 800a5a2:	f000 812c 	beq.w	800a7fe <ai_platform_network_process+0x4b2>
 800a5a6:	69a3      	ldr	r3, [r4, #24]
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	9302      	str	r3, [sp, #8]
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f7ff f886 	bl	80096c0 <ai_buffer_get_size>
 800a5b4:	9b02      	ldr	r3, [sp, #8]
 800a5b6:	4283      	cmp	r3, r0
 800a5b8:	d36e      	bcc.n	800a698 <ai_platform_network_process+0x34c>
 800a5ba:	68e0      	ldr	r0, [r4, #12]
 800a5bc:	69a9      	ldr	r1, [r5, #24]
 800a5be:	68c2      	ldr	r2, [r0, #12]
 800a5c0:	68cb      	ldr	r3, [r1, #12]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d168      	bne.n	800a698 <ai_platform_network_process+0x34c>
 800a5c6:	6882      	ldr	r2, [r0, #8]
 800a5c8:	688b      	ldr	r3, [r1, #8]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d164      	bne.n	800a698 <ai_platform_network_process+0x34c>
 800a5ce:	6842      	ldr	r2, [r0, #4]
 800a5d0:	684b      	ldr	r3, [r1, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d160      	bne.n	800a698 <ai_platform_network_process+0x34c>
 800a5d6:	69a3      	ldr	r3, [r4, #24]
 800a5d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5dc:	f002 f91e 	bl	800c81c <ai_array_get_data_byte_size>
 800a5e0:	9002      	str	r0, [sp, #8]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f002 f88c 	bl	800c700 <get_tensor_byte_size>
 800a5e8:	9b02      	ldr	r3, [sp, #8]
 800a5ea:	4283      	cmp	r3, r0
 800a5ec:	d354      	bcc.n	800a698 <ai_platform_network_process+0x34c>
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	f002 f899 	bl	800c728 <ai_array_to_buffer_fmt>
 800a5f6:	682b      	ldr	r3, [r5, #0]
 800a5f8:	4043      	eors	r3, r0
 800a5fa:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a5fe:	d142      	bne.n	800a686 <ai_platform_network_process+0x33a>
 800a600:	686b      	ldr	r3, [r5, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d035      	beq.n	800a672 <ai_platform_network_process+0x326>
 800a606:	69ab      	ldr	r3, [r5, #24]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	b342      	cbz	r2, 800a65e <ai_platform_network_process+0x312>
 800a60c:	4620      	mov	r0, r4
 800a60e:	9202      	str	r2, [sp, #8]
 800a610:	f002 f876 	bl	800c700 <get_tensor_byte_size>
 800a614:	f8ca 0008 	str.w	r0, [sl, #8]
 800a618:	69ab      	ldr	r3, [r5, #24]
 800a61a:	9a02      	ldr	r2, [sp, #8]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	fb03 f000 	mul.w	r0, r3, r0
 800a622:	f8ca 000c 	str.w	r0, [sl, #12]
 800a626:	6869      	ldr	r1, [r5, #4]
 800a628:	f8ca 1004 	str.w	r1, [sl, #4]
 800a62c:	686b      	ldr	r3, [r5, #4]
 800a62e:	4403      	add	r3, r0
 800a630:	f84b 3006 	str.w	r3, [fp, r6]
 800a634:	69a0      	ldr	r0, [r4, #24]
 800a636:	6803      	ldr	r3, [r0, #0]
 800a638:	4590      	cmp	r8, r2
 800a63a:	bf38      	it	cc
 800a63c:	4690      	movcc	r8, r2
 800a63e:	009e      	lsls	r6, r3, #2
 800a640:	d408      	bmi.n	800a654 <ai_platform_network_process+0x308>
 800a642:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a646:	1a9b      	subs	r3, r3, r2
 800a648:	4419      	add	r1, r3
 800a64a:	6081      	str	r1, [r0, #8]
 800a64c:	69a3      	ldr	r3, [r4, #24]
 800a64e:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a652:	60da      	str	r2, [r3, #12]
 800a654:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a658:	3701      	adds	r7, #1
 800a65a:	351c      	adds	r5, #28
 800a65c:	e78d      	b.n	800a57a <ai_platform_network_process+0x22e>
 800a65e:	9c01      	ldr	r4, [sp, #4]
 800a660:	4692      	mov	sl, r2
 800a662:	f104 0010 	add.w	r0, r4, #16
 800a666:	2221      	movs	r2, #33	; 0x21
 800a668:	2113      	movs	r1, #19
 800a66a:	f000 f8e3 	bl	800a834 <core_set_error>
 800a66e:	4653      	mov	r3, sl
 800a670:	e731      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a672:	9c01      	ldr	r4, [sp, #4]
 800a674:	469a      	mov	sl, r3
 800a676:	f104 0010 	add.w	r0, r4, #16
 800a67a:	2217      	movs	r2, #23
 800a67c:	2113      	movs	r1, #19
 800a67e:	f000 f8d9 	bl	800a834 <core_set_error>
 800a682:	4653      	mov	r3, sl
 800a684:	e727      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a686:	9c01      	ldr	r4, [sp, #4]
 800a688:	2219      	movs	r2, #25
 800a68a:	f104 0010 	add.w	r0, r4, #16
 800a68e:	2113      	movs	r1, #19
 800a690:	f000 f8d0 	bl	800a834 <core_set_error>
 800a694:	2300      	movs	r3, #0
 800a696:	e71e      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a698:	9c01      	ldr	r4, [sp, #4]
 800a69a:	f104 0010 	add.w	r0, r4, #16
 800a69e:	2218      	movs	r2, #24
 800a6a0:	2113      	movs	r1, #19
 800a6a2:	f000 f8c7 	bl	800a834 <core_set_error>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e715      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a6aa:	9c01      	ldr	r4, [sp, #4]
 800a6ac:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a6ae:	f8a4 8014 	strh.w	r8, [r4, #20]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 80a0 	beq.w	800a7f8 <ai_platform_network_process+0x4ac>
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800a6bc:	f240 809a 	bls.w	800a7f4 <ai_platform_network_process+0x4a8>
 800a6c0:	f105 070c 	add.w	r7, r5, #12
 800a6c4:	8ae3      	ldrh	r3, [r4, #22]
 800a6c6:	8aa2      	ldrh	r2, [r4, #20]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	f67f af04 	bls.w	800a4d6 <ai_platform_network_process+0x18a>
 800a6ce:	46a3      	mov	fp, r4
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	d036      	beq.n	800a742 <ai_platform_network_process+0x3f6>
 800a6d4:	882b      	ldrh	r3, [r5, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d033      	beq.n	800a742 <ai_platform_network_process+0x3f6>
 800a6da:	686b      	ldr	r3, [r5, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d030      	beq.n	800a742 <ai_platform_network_process+0x3f6>
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f04f 0800 	mov.w	r8, #0
 800a6e6:	b9db      	cbnz	r3, 800a720 <ai_platform_network_process+0x3d4>
 800a6e8:	e02b      	b.n	800a742 <ai_platform_network_process+0x3f6>
 800a6ea:	68d4      	ldr	r4, [r2, #12]
 800a6ec:	1b00      	subs	r0, r0, r4
 800a6ee:	4401      	add	r1, r0
 800a6f0:	6091      	str	r1, [r2, #8]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	6872      	ldr	r2, [r6, #4]
 800a6f6:	60da      	str	r2, [r3, #12]
 800a6f8:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a6fc:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a700:	440b      	add	r3, r1
 800a702:	4293      	cmp	r3, r2
 800a704:	bf24      	itt	cs
 800a706:	68f3      	ldrcs	r3, [r6, #12]
 800a708:	1ad3      	subcs	r3, r2, r3
 800a70a:	6073      	str	r3, [r6, #4]
 800a70c:	882b      	ldrh	r3, [r5, #0]
 800a70e:	f108 0801 	add.w	r8, r8, #1
 800a712:	4598      	cmp	r8, r3
 800a714:	d215      	bcs.n	800a742 <ai_platform_network_process+0x3f6>
 800a716:	686b      	ldr	r3, [r5, #4]
 800a718:	b19b      	cbz	r3, 800a742 <ai_platform_network_process+0x3f6>
 800a71a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a71e:	b183      	cbz	r3, 800a742 <ai_platform_network_process+0x3f6>
 800a720:	68a9      	ldr	r1, [r5, #8]
 800a722:	699a      	ldr	r2, [r3, #24]
 800a724:	f8d1 a000 	ldr.w	sl, [r1]
 800a728:	6814      	ldr	r4, [r2, #0]
 800a72a:	6890      	ldr	r0, [r2, #8]
 800a72c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a730:	eb0a 0609 	add.w	r6, sl, r9
 800a734:	00a4      	lsls	r4, r4, #2
 800a736:	6871      	ldr	r1, [r6, #4]
 800a738:	d5d7      	bpl.n	800a6ea <ai_platform_network_process+0x39e>
 800a73a:	68b2      	ldr	r2, [r6, #8]
 800a73c:	f005 fe18 	bl	8010370 <memcpy>
 800a740:	e7da      	b.n	800a6f8 <ai_platform_network_process+0x3ac>
 800a742:	4658      	mov	r0, fp
 800a744:	f001 ff70 	bl	800c628 <ai_layers_forward_all>
 800a748:	2f00      	cmp	r7, #0
 800a74a:	d047      	beq.n	800a7dc <ai_platform_network_process+0x490>
 800a74c:	883b      	ldrh	r3, [r7, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d044      	beq.n	800a7dc <ai_platform_network_process+0x490>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d041      	beq.n	800a7dc <ai_platform_network_process+0x490>
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d03e      	beq.n	800a7dc <ai_platform_network_process+0x490>
 800a75e:	f04f 0800 	mov.w	r8, #0
 800a762:	e019      	b.n	800a798 <ai_platform_network_process+0x44c>
 800a764:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a768:	4293      	cmp	r3, r2
 800a76a:	bf24      	itt	cs
 800a76c:	68f3      	ldrcs	r3, [r6, #12]
 800a76e:	1ad3      	subcs	r3, r2, r3
 800a770:	6073      	str	r3, [r6, #4]
 800a772:	6981      	ldr	r1, [r0, #24]
 800a774:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800a778:	1b12      	subs	r2, r2, r4
 800a77a:	4413      	add	r3, r2
 800a77c:	608b      	str	r3, [r1, #8]
 800a77e:	6983      	ldr	r3, [r0, #24]
 800a780:	6872      	ldr	r2, [r6, #4]
 800a782:	60da      	str	r2, [r3, #12]
 800a784:	883b      	ldrh	r3, [r7, #0]
 800a786:	f108 0801 	add.w	r8, r8, #1
 800a78a:	4598      	cmp	r8, r3
 800a78c:	d226      	bcs.n	800a7dc <ai_platform_network_process+0x490>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	b323      	cbz	r3, 800a7dc <ai_platform_network_process+0x490>
 800a792:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a796:	b308      	cbz	r0, 800a7dc <ai_platform_network_process+0x490>
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	6981      	ldr	r1, [r0, #24]
 800a79c:	f8d3 a000 	ldr.w	sl, [r3]
 800a7a0:	680c      	ldr	r4, [r1, #0]
 800a7a2:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a7a6:	eb0a 0609 	add.w	r6, sl, r9
 800a7aa:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800a7ae:	00a4      	lsls	r4, r4, #2
 800a7b0:	eb0c 0302 	add.w	r3, ip, r2
 800a7b4:	d5d6      	bpl.n	800a764 <ai_platform_network_process+0x418>
 800a7b6:	6889      	ldr	r1, [r1, #8]
 800a7b8:	4660      	mov	r0, ip
 800a7ba:	f005 fdd9 	bl	8010370 <memcpy>
 800a7be:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a7c2:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a7c6:	440b      	add	r3, r1
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	bf24      	itt	cs
 800a7cc:	68f3      	ldrcs	r3, [r6, #12]
 800a7ce:	1ad3      	subcs	r3, r2, r3
 800a7d0:	6073      	str	r3, [r6, #4]
 800a7d2:	883b      	ldrh	r3, [r7, #0]
 800a7d4:	f108 0801 	add.w	r8, r8, #1
 800a7d8:	4598      	cmp	r8, r3
 800a7da:	d3d8      	bcc.n	800a78e <ai_platform_network_process+0x442>
 800a7dc:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800a7e0:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	f8ab 3016 	strh.w	r3, [fp, #22]
 800a7ee:	f63f af6f 	bhi.w	800a6d0 <ai_platform_network_process+0x384>
 800a7f2:	e670      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a7f4:	2700      	movs	r7, #0
 800a7f6:	e765      	b.n	800a6c4 <ai_platform_network_process+0x378>
 800a7f8:	461d      	mov	r5, r3
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	e762      	b.n	800a6c4 <ai_platform_network_process+0x378>
 800a7fe:	9c01      	ldr	r4, [sp, #4]
 800a800:	2217      	movs	r2, #23
 800a802:	f104 0010 	add.w	r0, r4, #16
 800a806:	2113      	movs	r1, #19
 800a808:	f000 f814 	bl	800a834 <core_set_error>
 800a80c:	4653      	mov	r3, sl
 800a80e:	e662      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a810:	f104 0010 	add.w	r0, r4, #16
 800a814:	2230      	movs	r2, #48	; 0x30
 800a816:	2111      	movs	r1, #17
 800a818:	f000 f80c 	bl	800a834 <core_set_error>
 800a81c:	4633      	mov	r3, r6
 800a81e:	e65a      	b.n	800a4d6 <ai_platform_network_process+0x18a>
 800a820:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800a822:	e5d2      	b.n	800a3ca <ai_platform_network_process+0x7e>

0800a824 <core_init>:
 800a824:	2001      	movs	r0, #1
 800a826:	4770      	bx	lr

0800a828 <core_get_error>:
 800a828:	4603      	mov	r3, r0
 800a82a:	2200      	movs	r2, #0
 800a82c:	6800      	ldr	r0, [r0, #0]
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop

0800a834 <core_set_error>:
 800a834:	7803      	ldrb	r3, [r0, #0]
 800a836:	b933      	cbnz	r3, 800a846 <core_set_error+0x12>
 800a838:	7001      	strb	r1, [r0, #0]
 800a83a:	6803      	ldr	r3, [r0, #0]
 800a83c:	f362 231f 	bfi	r3, r2, #8, #24
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	2001      	movs	r0, #1
 800a844:	4770      	bx	lr
 800a846:	2000      	movs	r0, #0
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop

0800a84c <func_dummy>:
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop

0800a850 <ai_dict_decompress_f32>:
 800a850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a854:	9f08      	ldr	r7, [sp, #32]
 800a856:	2b04      	cmp	r3, #4
 800a858:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800a85c:	d00e      	beq.n	800a87c <ai_dict_decompress_f32+0x2c>
 800a85e:	2b08      	cmp	r3, #8
 800a860:	d10a      	bne.n	800a878 <ai_dict_decompress_f32+0x28>
 800a862:	42b8      	cmp	r0, r7
 800a864:	d208      	bcs.n	800a878 <ai_dict_decompress_f32+0x28>
 800a866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a86a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f840 3b04 	str.w	r3, [r0], #4
 800a874:	4287      	cmp	r7, r0
 800a876:	d8f6      	bhi.n	800a866 <ai_dict_decompress_f32+0x16>
 800a878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a87c:	9b07      	ldr	r3, [sp, #28]
 800a87e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800a882:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800a886:	f10c 38ff 	add.w	r8, ip, #4294967295
 800a88a:	f003 0e01 	and.w	lr, r3, #1
 800a88e:	42b8      	cmp	r0, r7
 800a890:	d2f2      	bcs.n	800a878 <ai_dict_decompress_f32+0x28>
 800a892:	f1bc 0f00 	cmp.w	ip, #0
 800a896:	d01a      	beq.n	800a8ce <ai_dict_decompress_f32+0x7e>
 800a898:	f100 0508 	add.w	r5, r0, #8
 800a89c:	1e4c      	subs	r4, r1, #1
 800a89e:	eb01 0608 	add.w	r6, r1, r8
 800a8a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a8a6:	091b      	lsrs	r3, r3, #4
 800a8a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8ac:	42a6      	cmp	r6, r4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f845 3c08 	str.w	r3, [r5, #-8]
 800a8b4:	7823      	ldrb	r3, [r4, #0]
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8be:	f105 0508 	add.w	r5, r5, #8
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f845 3c0c 	str.w	r3, [r5, #-12]
 800a8c8:	d1eb      	bne.n	800a8a2 <ai_dict_decompress_f32+0x52>
 800a8ca:	4461      	add	r1, ip
 800a8cc:	4448      	add	r0, r9
 800a8ce:	f1be 0f00 	cmp.w	lr, #0
 800a8d2:	d103      	bne.n	800a8dc <ai_dict_decompress_f32+0x8c>
 800a8d4:	4287      	cmp	r7, r0
 800a8d6:	d8dc      	bhi.n	800a892 <ai_dict_decompress_f32+0x42>
 800a8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8dc:	780b      	ldrb	r3, [r1, #0]
 800a8de:	091b      	lsrs	r3, r3, #4
 800a8e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8e4:	3101      	adds	r1, #1
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6003      	str	r3, [r0, #0]
 800a8ea:	3004      	adds	r0, #4
 800a8ec:	e7cf      	b.n	800a88e <ai_dict_decompress_f32+0x3e>
 800a8ee:	bf00      	nop

0800a8f0 <forward_conv2d>:
 800a8f0:	6983      	ldr	r3, [r0, #24]
 800a8f2:	881a      	ldrh	r2, [r3, #0]
 800a8f4:	2a00      	cmp	r2, #0
 800a8f6:	f000 87c7 	beq.w	800b888 <forward_conv2d+0xf98>
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	6859      	ldr	r1, [r3, #4]
 800a8fe:	b101      	cbz	r1, 800a902 <forward_conv2d+0x12>
 800a900:	6809      	ldr	r1, [r1, #0]
 800a902:	2a01      	cmp	r2, #1
 800a904:	f240 87bd 	bls.w	800b882 <forward_conv2d+0xf92>
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	ed2d 8b10 	vpush	{d8-d15}
 800a910:	b0cb      	sub	sp, #300	; 0x12c
 800a912:	691c      	ldr	r4, [r3, #16]
 800a914:	af02      	add	r7, sp, #8
 800a916:	2c00      	cmp	r4, #0
 800a918:	f000 87af 	beq.w	800b87a <forward_conv2d+0xf8a>
 800a91c:	6824      	ldr	r4, [r4, #0]
 800a91e:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800a922:	2a02      	cmp	r2, #2
 800a924:	f000 87a4 	beq.w	800b870 <forward_conv2d+0xf80>
 800a928:	69dd      	ldr	r5, [r3, #28]
 800a92a:	2d00      	cmp	r5, #0
 800a92c:	f000 8799 	beq.w	800b862 <forward_conv2d+0xf72>
 800a930:	f113 0218 	adds.w	r2, r3, #24
 800a934:	682c      	ldr	r4, [r5, #0]
 800a936:	d004      	beq.n	800a942 <forward_conv2d+0x52>
 800a938:	8b1b      	ldrh	r3, [r3, #24]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	f240 87a6 	bls.w	800b88c <forward_conv2d+0xf9c>
 800a940:	686a      	ldr	r2, [r5, #4]
 800a942:	68ab      	ldr	r3, [r5, #8]
 800a944:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800a948:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800a94c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a950:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a954:	68ce      	ldr	r6, [r1, #12]
 800a956:	69a1      	ldr	r1, [r4, #24]
 800a958:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800a95c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800a960:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800a964:	f8de 1004 	ldr.w	r1, [lr, #4]
 800a968:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800a96c:	f8de 100c 	ldr.w	r1, [lr, #12]
 800a970:	6479      	str	r1, [r7, #68]	; 0x44
 800a972:	f8de 1008 	ldr.w	r1, [lr, #8]
 800a976:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800a97a:	6871      	ldr	r1, [r6, #4]
 800a97c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800a980:	68f1      	ldr	r1, [r6, #12]
 800a982:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800a986:	68b1      	ldr	r1, [r6, #8]
 800a988:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800a98c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a990:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800a994:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a998:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800a99c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a9a0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800a9a2:	6889      	ldr	r1, [r1, #8]
 800a9a4:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800a9a8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a9aa:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800a9ae:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800a9b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a9b4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800a9b8:	69c1      	ldr	r1, [r0, #28]
 800a9ba:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800a9be:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800a9c2:	2a00      	cmp	r2, #0
 800a9c4:	f000 8749 	beq.w	800b85a <forward_conv2d+0xf6a>
 800a9c8:	6992      	ldr	r2, [r2, #24]
 800a9ca:	6892      	ldr	r2, [r2, #8]
 800a9cc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800a9d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a9d4:	6992      	ldr	r2, [r2, #24]
 800a9d6:	6892      	ldr	r2, [r2, #8]
 800a9d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a9dc:	4606      	mov	r6, r0
 800a9de:	6a00      	ldr	r0, [r0, #32]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 872c 	beq.w	800b83e <forward_conv2d+0xf4e>
 800a9e6:	699a      	ldr	r2, [r3, #24]
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	f000 8594 	beq.w	800b516 <forward_conv2d+0xc26>
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a9f6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a9fa:	6893      	ldr	r3, [r2, #8]
 800a9fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa00:	f001 fee8 	bl	800c7d4 <ai_array_get_byte_size>
 800aa04:	69a3      	ldr	r3, [r4, #24]
 800aa06:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800aa0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800aa14:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800aa16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aa1a:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800aa1e:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 800aa22:	fa1f f088 	uxth.w	r0, r8
 800aa26:	4125      	asrs	r5, r4
 800aa28:	3801      	subs	r0, #1
 800aa2a:	1e4c      	subs	r4, r1, #1
 800aa2c:	fb04 1100 	mla	r1, r4, r0, r1
 800aa30:	6439      	str	r1, [r7, #64]	; 0x40
 800aa32:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800aa36:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800add8 <forward_conv2d+0x4e8>
 800aa3a:	fa1f f289 	uxth.w	r2, r9
 800aa3e:	3a01      	subs	r2, #1
 800aa40:	1e48      	subs	r0, r1, #1
 800aa42:	fb00 1102 	mla	r1, r0, r2, r1
 800aa46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa4a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800aa4e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800aa52:	4610      	mov	r0, r2
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	bf08      	it	eq
 800aa58:	4660      	moveq	r0, ip
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	b2ad      	uxth	r5, r5
 800aa5e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800aa62:	f000 8533 	beq.w	800b4cc <forward_conv2d+0xbdc>
 800aa66:	2b08      	cmp	r3, #8
 800aa68:	f000 8530 	beq.w	800b4cc <forward_conv2d+0xbdc>
 800aa6c:	fa1f f38b 	uxth.w	r3, fp
 800aa70:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800aa74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa78:	425b      	negs	r3, r3
 800aa7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	f000 8242 	beq.w	800af08 <forward_conv2d+0x618>
 800aa84:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800aa88:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 800aa8c:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800add4 <forward_conv2d+0x4e4>
 800aa90:	fb00 f305 	mul.w	r3, r0, r5
 800aa94:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800aa98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800aa9c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800aaa0:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800aaa4:	663d      	str	r5, [r7, #96]	; 0x60
 800aaa6:	fa0f f288 	sxth.w	r2, r8
 800aaaa:	fb03 f400 	mul.w	r4, r3, r0
 800aaae:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800aab2:	fa1f f18a 	uxth.w	r1, sl
 800aab6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800aaba:	67bc      	str	r4, [r7, #120]	; 0x78
 800aabc:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800aac0:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800aac4:	4249      	negs	r1, r1
 800aac6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800aaca:	0092      	lsls	r2, r2, #2
 800aacc:	0081      	lsls	r1, r0, #2
 800aace:	4605      	mov	r5, r0
 800aad0:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800aad4:	fb04 f200 	mul.w	r2, r4, r0
 800aad8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800aadc:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800aae0:	fb01 fc00 	mul.w	ip, r1, r0
 800aae4:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800aae8:	fb01 fc03 	mul.w	ip, r1, r3
 800aaec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaee:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aaf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aafc:	fa0f f689 	sxth.w	r6, r9
 800ab00:	469c      	mov	ip, r3
 800ab02:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800ab06:	4633      	mov	r3, r6
 800ab08:	fb0c f606 	mul.w	r6, ip, r6
 800ab0c:	677e      	str	r6, [r7, #116]	; 0x74
 800ab0e:	4666      	mov	r6, ip
 800ab10:	fb04 f606 	mul.w	r6, r4, r6
 800ab14:	4686      	mov	lr, r0
 800ab16:	4620      	mov	r0, r4
 800ab18:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800ab1c:	62be      	str	r6, [r7, #40]	; 0x28
 800ab1e:	fb01 f404 	mul.w	r4, r1, r4
 800ab22:	fb03 f605 	mul.w	r6, r3, r5
 800ab26:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800ab28:	66bc      	str	r4, [r7, #104]	; 0x68
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800ab32:	627e      	str	r6, [r7, #36]	; 0x24
 800ab34:	fb05 f404 	mul.w	r4, r5, r4
 800ab38:	617c      	str	r4, [r7, #20]
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	fb04 f403 	mul.w	r4, r4, r3
 800ab40:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800ab44:	65bc      	str	r4, [r7, #88]	; 0x58
 800ab46:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800ab4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab4e:	fb01 f104 	mul.w	r1, r1, r4
 800ab52:	61b9      	str	r1, [r7, #24]
 800ab54:	0091      	lsls	r1, r2, #2
 800ab56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab5a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ab5c:	fb00 f202 	mul.w	r2, r0, r2
 800ab60:	0081      	lsls	r1, r0, #2
 800ab62:	61f9      	str	r1, [r7, #28]
 800ab64:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800ab68:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800ab6c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800ab70:	011a      	lsls	r2, r3, #4
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab80:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800ab84:	2300      	movs	r3, #0
 800ab86:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ab88:	607a      	str	r2, [r7, #4]
 800ab8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab8c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800ab90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ab98:	2900      	cmp	r1, #0
 800ab9a:	441a      	add	r2, r3
 800ab9c:	bfb4      	ite	lt
 800ab9e:	2100      	movlt	r1, #0
 800aba0:	2300      	movge	r3, #0
 800aba2:	4282      	cmp	r2, r0
 800aba4:	bf28      	it	cs
 800aba6:	4602      	movcs	r2, r0
 800aba8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800abac:	2801      	cmp	r0, #1
 800abae:	f000 8320 	beq.w	800b1f2 <forward_conv2d+0x902>
 800abb2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800abb6:	4281      	cmp	r1, r0
 800abb8:	f000 81c3 	beq.w	800af42 <forward_conv2d+0x652>
 800abbc:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800abc0:	2900      	cmp	r1, #0
 800abc2:	f000 8182 	beq.w	800aeca <forward_conv2d+0x5da>
 800abc6:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800abca:	fb93 f1f0 	sdiv	r1, r3, r0
 800abce:	fb00 3111 	mls	r1, r0, r1, r3
 800abd2:	1a41      	subs	r1, r0, r1
 800abd4:	1ad2      	subs	r2, r2, r3
 800abd6:	fb91 f5f0 	sdiv	r5, r1, r0
 800abda:	fb00 1515 	mls	r5, r0, r5, r1
 800abde:	1b52      	subs	r2, r2, r5
 800abe0:	4601      	mov	r1, r0
 800abe2:	4402      	add	r2, r0
 800abe4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800abe8:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 800abec:	f8c7 b020 	str.w	fp, [r7, #32]
 800abf0:	4604      	mov	r4, r0
 800abf2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800abf6:	fbb4 f4f0 	udiv	r4, r4, r0
 800abfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abfc:	3a01      	subs	r2, #1
 800abfe:	fb92 f8f1 	sdiv	r8, r2, r1
 800ac02:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ac06:	eba0 0c04 	sub.w	ip, r0, r4
 800ac0a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ac0e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800ac12:	4614      	mov	r4, r2
 800ac14:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ac18:	fbb4 f2f2 	udiv	r2, r4, r2
 800ac1c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800ac20:	657a      	str	r2, [r7, #84]	; 0x54
 800ac22:	441d      	add	r5, r3
 800ac24:	fb0e f000 	mul.w	r0, lr, r0
 800ac28:	440b      	add	r3, r1
 800ac2a:	eba6 0608 	sub.w	r6, r6, r8
 800ac2e:	fb04 f505 	mul.w	r5, r4, r5
 800ac32:	3b01      	subs	r3, #1
 800ac34:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800ac38:	fb93 f3f4 	sdiv	r3, r3, r4
 800ac3c:	fb00 f406 	mul.w	r4, r0, r6
 800ac40:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ac44:	66fd      	str	r5, [r7, #108]	; 0x6c
 800ac46:	0091      	lsls	r1, r2, #2
 800ac48:	fb00 f003 	mul.w	r0, r0, r3
 800ac4c:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800ac50:	6538      	str	r0, [r7, #80]	; 0x50
 800ac52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac56:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ac5a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800ac5e:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800ac62:	1ac3      	subs	r3, r0, r3
 800ac64:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800ac68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac6c:	008b      	lsls	r3, r1, #2
 800ac6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac70:	00d3      	lsls	r3, r2, #3
 800ac72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ac80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac84:	2300      	movs	r3, #0
 800ac86:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800ac8a:	673b      	str	r3, [r7, #112]	; 0x70
 800ac8c:	46c2      	mov	sl, r8
 800ac8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac96:	eb03 0c02 	add.w	ip, r3, r2
 800ac9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f2c0 813b 	blt.w	800af1a <forward_conv2d+0x62a>
 800aca4:	2000      	movs	r0, #0
 800aca6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800aca8:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 800acac:	4605      	mov	r5, r0
 800acae:	4606      	mov	r6, r0
 800acb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800acb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800acbc:	4413      	add	r3, r2
 800acbe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800acc2:	440a      	add	r2, r1
 800acc4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800acc8:	428b      	cmp	r3, r1
 800acca:	bf94      	ite	ls
 800accc:	ebc6 0303 	rsbls	r3, r6, r3
 800acd0:	ebc6 0301 	rsbhi	r3, r6, r1
 800acd4:	4415      	add	r5, r2
 800acd6:	1a1b      	subs	r3, r3, r0
 800acd8:	00a4      	lsls	r4, r4, #2
 800acda:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800acde:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800ace2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800ace6:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800ace8:	4602      	mov	r2, r0
 800acea:	2800      	cmp	r0, #0
 800acec:	bf08      	it	eq
 800acee:	4662      	moveq	r2, ip
 800acf0:	f108 31ff 	add.w	r1, r8, #4294967295
 800acf4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800acf8:	fb91 f1f0 	sdiv	r1, r1, r0
 800acfc:	4429      	add	r1, r5
 800acfe:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800ad02:	fb0e 5501 	mla	r5, lr, r1, r5
 800ad06:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800ad0a:	4403      	add	r3, r0
 800ad0c:	fb01 6104 	mla	r1, r1, r4, r6
 800ad10:	3b01      	subs	r3, #1
 800ad12:	fb93 f6f0 	sdiv	r6, r3, r0
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800ad1c:	fb06 3110 	mls	r1, r6, r0, r3
 800ad20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ad24:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800ad28:	4562      	cmp	r2, ip
 800ad2a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ad2e:	bf08      	it	eq
 800ad30:	eeb0 6a48 	vmoveq.f32	s12, s16
 800ad34:	1b9b      	subs	r3, r3, r6
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d076      	beq.n	800ae28 <forward_conv2d+0x538>
 800ad3a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ad3e:	fb0e f803 	mul.w	r8, lr, r3
 800ad42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad44:	fb00 fb01 	mul.w	fp, r0, r1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d06d      	beq.n	800ae28 <forward_conv2d+0x538>
 800ad4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad50:	18d3      	adds	r3, r2, r3
 800ad52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	633b      	str	r3, [r7, #48]	; 0x30
 800ad5e:	2300      	movs	r3, #0
 800ad60:	667b      	str	r3, [r7, #100]	; 0x64
 800ad62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad68:	4413      	add	r3, r2
 800ad6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	4413      	add	r3, r2
 800ad74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ad78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ad7c:	ecf3 7a01 	vldmia	r3!, {s15}
 800ad80:	f1ba 0f00 	cmp.w	sl, #0
 800ad84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ad88:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ad8c:	f340 80c3 	ble.w	800af16 <forward_conv2d+0x626>
 800ad90:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800ad94:	f04f 0c00 	mov.w	ip, #0
 800ad98:	2e00      	cmp	r6, #0
 800ad9a:	dd1f      	ble.n	800addc <forward_conv2d+0x4ec>
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	eb00 040e 	add.w	r4, r0, lr
 800ada2:	4284      	cmp	r4, r0
 800ada4:	d910      	bls.n	800adc8 <forward_conv2d+0x4d8>
 800ada6:	4603      	mov	r3, r0
 800ada8:	462a      	mov	r2, r5
 800adaa:	ecb3 7a01 	vldmia	r3!, {s14}
 800adae:	ecf2 6a01 	vldmia	r2!, {s13}
 800adb2:	429c      	cmp	r4, r3
 800adb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800adb8:	d8f7      	bhi.n	800adaa <forward_conv2d+0x4ba>
 800adba:	43c3      	mvns	r3, r0
 800adbc:	441c      	add	r4, r3
 800adbe:	f024 0403 	bic.w	r4, r4, #3
 800adc2:	3404      	adds	r4, #4
 800adc4:	4425      	add	r5, r4
 800adc6:	4420      	add	r0, r4
 800adc8:	3101      	adds	r1, #1
 800adca:	428e      	cmp	r6, r1
 800adcc:	4448      	add	r0, r9
 800adce:	d1e6      	bne.n	800ad9e <forward_conv2d+0x4ae>
 800add0:	e004      	b.n	800addc <forward_conv2d+0x4ec>
 800add2:	bf00      	nop
 800add4:	00000000 	.word	0x00000000
 800add8:	0800a84d 	.word	0x0800a84d
 800addc:	f10c 0c01 	add.w	ip, ip, #1
 800ade0:	45e2      	cmp	sl, ip
 800ade2:	4458      	add	r0, fp
 800ade4:	4445      	add	r5, r8
 800ade6:	d1d7      	bne.n	800ad98 <forward_conv2d+0x4a8>
 800ade8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800adec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800adf0:	441d      	add	r5, r3
 800adf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800adf6:	ece3 7a01 	vstmia	r3!, {s15}
 800adfa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800adfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d1b8      	bne.n	800ad78 <forward_conv2d+0x488>
 800ae06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ae0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae0e:	4472      	add	r2, lr
 800ae10:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ae14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae16:	1a52      	subs	r2, r2, r1
 800ae18:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800ae1c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ae20:	3301      	adds	r3, #1
 800ae22:	429a      	cmp	r2, r3
 800ae24:	667b      	str	r3, [r7, #100]	; 0x64
 800ae26:	d19c      	bne.n	800ad62 <forward_conv2d+0x472>
 800ae28:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800ae2c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ae30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae32:	4608      	mov	r0, r1
 800ae34:	4410      	add	r0, r2
 800ae36:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800ae3a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800ae3e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ae42:	4401      	add	r1, r0
 800ae44:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800ae48:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ae4c:	1a8a      	subs	r2, r1, r2
 800ae4e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800ae52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800ae56:	3301      	adds	r3, #1
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	673b      	str	r3, [r7, #112]	; 0x70
 800ae5c:	f47f af17 	bne.w	800ac8e <forward_conv2d+0x39e>
 800ae60:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800ae64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ae68:	b37b      	cbz	r3, 800aeca <forward_conv2d+0x5da>
 800ae6a:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800ae6e:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800ae72:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 800ae76:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 800ae7a:	2500      	movs	r5, #0
 800ae7c:	46a2      	mov	sl, r4
 800ae7e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ae82:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800ae86:	f8c2 a008 	str.w	sl, [r2, #8]
 800ae8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ae8e:	4633      	mov	r3, r6
 800ae90:	4641      	mov	r1, r8
 800ae92:	4416      	add	r6, r2
 800ae94:	4640      	mov	r0, r8
 800ae96:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ae9a:	47a0      	blx	r4
 800ae9c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800aea0:	4492      	add	sl, r2
 800aea2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800aea6:	eba6 0309 	sub.w	r3, r6, r9
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	bfa8      	it	ge
 800aeae:	464e      	movge	r6, r9
 800aeb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	42ab      	cmp	r3, r5
 800aeb8:	d1e1      	bne.n	800ae7e <forward_conv2d+0x58e>
 800aeba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800aec4:	4413      	add	r3, r2
 800aec6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aeca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aece:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	609a      	str	r2, [r3, #8]
 800aed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aeda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aedc:	4610      	mov	r0, r2
 800aede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aee2:	4418      	add	r0, r3
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aef0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800aef4:	4413      	add	r3, r2
 800aef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aefa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aefe:	3101      	adds	r1, #1
 800af00:	428b      	cmp	r3, r1
 800af02:	67f9      	str	r1, [r7, #124]	; 0x7c
 800af04:	f47f ae42 	bne.w	800ab8c <forward_conv2d+0x29c>
 800af08:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800af0c:	46bd      	mov	sp, r7
 800af0e:	ecbd 8b10 	vpop	{d8-d15}
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	461a      	mov	r2, r3
 800af18:	e768      	b.n	800adec <forward_conv2d+0x4fc>
 800af1a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800af1e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800af22:	fb90 f3f2 	sdiv	r3, r0, r2
 800af26:	fb02 0313 	mls	r3, r2, r3, r0
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	4605      	mov	r5, r0
 800af2e:	fb93 f0f2 	sdiv	r0, r3, r2
 800af32:	fb02 3010 	mls	r0, r2, r0, r3
 800af36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af38:	462e      	mov	r6, r5
 800af3a:	18c4      	adds	r4, r0, r3
 800af3c:	eb02 0805 	add.w	r8, r2, r5
 800af40:	e6b6      	b.n	800acb0 <forward_conv2d+0x3c0>
 800af42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800af44:	2901      	cmp	r1, #1
 800af46:	f47f ae39 	bne.w	800abbc <forward_conv2d+0x2cc>
 800af4a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800af4e:	2900      	cmp	r1, #0
 800af50:	d0bb      	beq.n	800aeca <forward_conv2d+0x5da>
 800af52:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800af56:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800af5a:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800af5e:	fbb1 f5f0 	udiv	r5, r1, r0
 800af62:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800af66:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800af6a:	633d      	str	r5, [r7, #48]	; 0x30
 800af6c:	1ad2      	subs	r2, r2, r3
 800af6e:	1a8c      	subs	r4, r1, r2
 800af70:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af74:	00b2      	lsls	r2, r6, #2
 800af76:	fb02 f204 	mul.w	r2, r2, r4
 800af7a:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800af7e:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800af82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af84:	0082      	lsls	r2, r0, #2
 800af86:	64fa      	str	r2, [r7, #76]	; 0x4c
 800af88:	00ca      	lsls	r2, r1, #3
 800af8a:	603a      	str	r2, [r7, #0]
 800af8c:	00aa      	lsls	r2, r5, #2
 800af8e:	60ba      	str	r2, [r7, #8]
 800af90:	fb03 f206 	mul.w	r2, r3, r6
 800af94:	673a      	str	r2, [r7, #112]	; 0x70
 800af96:	69fa      	ldr	r2, [r7, #28]
 800af98:	fb02 f303 	mul.w	r3, r2, r3
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
 800af9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afaa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800afae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afb6:	2300      	movs	r3, #0
 800afb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800afbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f2c0 8110 	blt.w	800b1e6 <forward_conv2d+0x8f6>
 800afc6:	2100      	movs	r1, #0
 800afc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afca:	460a      	mov	r2, r1
 800afcc:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800afd0:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800afd4:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800afd8:	4420      	add	r0, r4
 800afda:	4408      	add	r0, r1
 800afdc:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800afe0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800afe4:	190c      	adds	r4, r1, r4
 800afe6:	42ac      	cmp	r4, r5
 800afe8:	bf28      	it	cs
 800afea:	462c      	movcs	r4, r5
 800afec:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800aff0:	0080      	lsls	r0, r0, #2
 800aff2:	1aa4      	subs	r4, r4, r2
 800aff4:	2d00      	cmp	r5, #0
 800aff6:	f000 80e7 	beq.w	800b1c8 <forward_conv2d+0x8d8>
 800affa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800affe:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800b002:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800b006:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b00a:	42b5      	cmp	r5, r6
 800b00c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800b010:	eba3 0204 	sub.w	r2, r3, r4
 800b014:	eba1 0104 	sub.w	r1, r1, r4
 800b018:	bf08      	it	eq
 800b01a:	eef0 3a48 	vmoveq.f32	s7, s16
 800b01e:	462b      	mov	r3, r5
 800b020:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800b022:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800b026:	4428      	add	r0, r5
 800b028:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800b02c:	fb05 6e00 	mla	lr, r5, r0, r6
 800b030:	eb0e 000b 	add.w	r0, lr, fp
 800b034:	4586      	cmp	lr, r0
 800b036:	6238      	str	r0, [r7, #32]
 800b038:	f080 80a5 	bcs.w	800b186 <forward_conv2d+0x896>
 800b03c:	0092      	lsls	r2, r2, #2
 800b03e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b044:	fb0b f101 	mul.w	r1, fp, r1
 800b048:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b04c:	f024 0803 	bic.w	r8, r4, #3
 800b050:	2a00      	cmp	r2, #0
 800b052:	f000 8098 	beq.w	800b186 <forward_conv2d+0x896>
 800b056:	f108 32ff 	add.w	r2, r8, #4294967295
 800b05a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b05c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b060:	0892      	lsrs	r2, r2, #2
 800b062:	3201      	adds	r2, #1
 800b064:	4401      	add	r1, r0
 800b066:	fb02 f00a 	mul.w	r0, r2, sl
 800b06a:	6578      	str	r0, [r7, #84]	; 0x54
 800b06c:	0110      	lsls	r0, r2, #4
 800b06e:	0092      	lsls	r2, r2, #2
 800b070:	653a      	str	r2, [r7, #80]	; 0x50
 800b072:	1aca      	subs	r2, r1, r3
 800b074:	613a      	str	r2, [r7, #16]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	6678      	str	r0, [r7, #100]	; 0x64
 800b07a:	4413      	add	r3, r2
 800b07c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b080:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b086:	4413      	add	r3, r2
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	4413      	add	r3, r2
 800b092:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b098:	ecf3 6a01 	vldmia	r3!, {s13}
 800b09c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b0aa:	dd57      	ble.n	800b15c <forward_conv2d+0x86c>
 800b0ac:	4676      	mov	r6, lr
 800b0ae:	f04f 0c00 	mov.w	ip, #0
 800b0b2:	f1b8 0f00 	cmp.w	r8, #0
 800b0b6:	f340 8085 	ble.w	800b1c4 <forward_conv2d+0x8d4>
 800b0ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b0be:	f109 0310 	add.w	r3, r9, #16
 800b0c2:	18b1      	adds	r1, r6, r2
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	4632      	mov	r2, r6
 800b0c8:	eb02 050b 	add.w	r5, r2, fp
 800b0cc:	ed95 7a00 	vldr	s14, [r5]
 800b0d0:	ed53 7a03 	vldr	s15, [r3, #-12]
 800b0d4:	ed92 4a00 	vldr	s8, [r2]
 800b0d8:	ed53 4a04 	vldr	s9, [r3, #-16]
 800b0dc:	ed91 5a00 	vldr	s10, [r1]
 800b0e0:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b0e4:	ed13 6a01 	vldr	s12, [r3, #-4]
 800b0e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ec:	eb01 050b 	add.w	r5, r1, fp
 800b0f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b0f4:	3004      	adds	r0, #4
 800b0f6:	4540      	cmp	r0, r8
 800b0f8:	ed95 7a00 	vldr	s14, [r5]
 800b0fc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b100:	4452      	add	r2, sl
 800b102:	4451      	add	r1, sl
 800b104:	f103 0310 	add.w	r3, r3, #16
 800b108:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b10c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b110:	dbda      	blt.n	800b0c8 <forward_conv2d+0x7d8>
 800b112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b114:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b116:	441e      	add	r6, r3
 800b118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b11a:	4499      	add	r9, r3
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	da11      	bge.n	800b144 <forward_conv2d+0x854>
 800b120:	4602      	mov	r2, r0
 800b122:	4633      	mov	r3, r6
 800b124:	4649      	mov	r1, r9
 800b126:	edd3 7a00 	vldr	s15, [r3]
 800b12a:	ecb1 7a01 	vldmia	r1!, {s14}
 800b12e:	3201      	adds	r2, #1
 800b130:	42a2      	cmp	r2, r4
 800b132:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b136:	445b      	add	r3, fp
 800b138:	d1f5      	bne.n	800b126 <forward_conv2d+0x836>
 800b13a:	1a20      	subs	r0, r4, r0
 800b13c:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800b140:	fb00 660b 	mla	r6, r0, fp, r6
 800b144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b148:	441e      	add	r6, r3
 800b14a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b14e:	4499      	add	r9, r3
 800b150:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b154:	f10c 0c01 	add.w	ip, ip, #1
 800b158:	4563      	cmp	r3, ip
 800b15a:	d1aa      	bne.n	800b0b2 <forward_conv2d+0x7c2>
 800b15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15e:	4499      	add	r9, r3
 800b160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b162:	ece3 6a01 	vstmia	r3!, {s13}
 800b166:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b168:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d191      	bne.n	800b094 <forward_conv2d+0x7a4>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	f10e 0e04 	add.w	lr, lr, #4
 800b180:	459e      	cmp	lr, r3
 800b182:	f4ff af7d 	bcc.w	800b080 <forward_conv2d+0x790>
 800b186:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b18a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b192:	440a      	add	r2, r1
 800b194:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b198:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800b19c:	4608      	mov	r0, r1
 800b19e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b1a2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b1a6:	4410      	add	r0, r2
 800b1a8:	1a8a      	subs	r2, r1, r2
 800b1aa:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b1ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800b1b2:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1be:	f47f aefd 	bne.w	800afbc <forward_conv2d+0x6cc>
 800b1c2:	e64f      	b.n	800ae64 <forward_conv2d+0x574>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	e7a9      	b.n	800b11c <forward_conv2d+0x82c>
 800b1c8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800b1cc:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800b1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d4:	1b19      	subs	r1, r3, r4
 800b1d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b1da:	eef0 3a48 	vmov.f32	s7, s16
 800b1de:	1b1a      	subs	r2, r3, r4
 800b1e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b1e4:	e71c      	b.n	800b020 <forward_conv2d+0x730>
 800b1e6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b1ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1ec:	460a      	mov	r2, r1
 800b1ee:	440b      	add	r3, r1
 800b1f0:	e6ec      	b.n	800afcc <forward_conv2d+0x6dc>
 800b1f2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b1f4:	2801      	cmp	r0, #1
 800b1f6:	f47f ace1 	bne.w	800abbc <forward_conv2d+0x2cc>
 800b1fa:	1ad2      	subs	r2, r2, r3
 800b1fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b1fe:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800b202:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800b206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b208:	fb00 4101 	mla	r1, r0, r1, r4
 800b20c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800b210:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800b214:	f080 8191 	bcs.w	800b53a <forward_conv2d+0xc4a>
 800b218:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	f43f ae21 	beq.w	800ae64 <forward_conv2d+0x574>
 800b222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b224:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 800b228:	fb02 f303 	mul.w	r3, r2, r3
 800b22c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b22e:	667b      	str	r3, [r7, #100]	; 0x64
 800b230:	1a9b      	subs	r3, r3, r2
 800b232:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b234:	188b      	adds	r3, r1, r2
 800b236:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b238:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b23c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b24c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b250:	2300      	movs	r3, #0
 800b252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8133 	beq.w	800b4c6 <forward_conv2d+0xbd6>
 800b260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b264:	ed93 6a00 	vldr	s12, [r3]
 800b268:	3304      	adds	r3, #4
 800b26a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b26e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 8101 	beq.w	800b47a <forward_conv2d+0xb8a>
 800b278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b280:	eb03 0802 	add.w	r8, r3, r2
 800b284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b294:	673b      	str	r3, [r7, #112]	; 0x70
 800b296:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b29a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b29e:	f04f 0b00 	mov.w	fp, #0
 800b2a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f2c0 8104 	blt.w	800b4b4 <forward_conv2d+0xbc4>
 800b2ac:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b2b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800b2b8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b2bc:	eb02 0c04 	add.w	ip, r2, r4
 800b2c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800b2c4:	4540      	cmp	r0, r8
 800b2c6:	bf94      	ite	ls
 800b2c8:	ebc3 0300 	rsbls	r3, r3, r0
 800b2cc:	ebc3 0308 	rsbhi	r3, r3, r8
 800b2d0:	eba2 0903 	sub.w	r9, r2, r3
 800b2d4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800b2d8:	1ac4      	subs	r4, r0, r3
 800b2da:	fb03 f302 	mul.w	r3, r3, r2
 800b2de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b2e2:	2a00      	cmp	r2, #0
 800b2e4:	f340 80e3 	ble.w	800b4ae <forward_conv2d+0xbbe>
 800b2e8:	f023 050f 	bic.w	r5, r3, #15
 800b2ec:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800b2f0:	1e68      	subs	r0, r5, #1
 800b2f2:	0900      	lsrs	r0, r0, #4
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	fb06 f204 	mul.w	r2, r6, r4
 800b2fa:	657a      	str	r2, [r7, #84]	; 0x54
 800b2fc:	0102      	lsls	r2, r0, #4
 800b2fe:	653a      	str	r2, [r7, #80]	; 0x50
 800b300:	fb06 f909 	mul.w	r9, r6, r9
 800b304:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800b308:	eef0 6a46 	vmov.f32	s13, s12
 800b30c:	f04f 0e00 	mov.w	lr, #0
 800b310:	4662      	mov	r2, ip
 800b312:	2d00      	cmp	r5, #0
 800b314:	f340 80c9 	ble.w	800b4aa <forward_conv2d+0xbba>
 800b318:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800b31c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b320:	2600      	movs	r6, #0
 800b322:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800b326:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800b32a:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800b32e:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800b332:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800b336:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800b33a:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800b33e:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800b342:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800b346:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800b34a:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800b34e:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800b352:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800b356:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800b35a:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800b35e:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800b362:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800b366:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800b36a:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b36e:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800b372:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800b376:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800b37a:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800b37e:	ed50 3a04 	vldr	s7, [r0, #-16]
 800b382:	ed14 4a04 	vldr	s8, [r4, #-16]
 800b386:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b38a:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b38e:	ed50 5a02 	vldr	s11, [r0, #-8]
 800b392:	ed14 7a02 	vldr	s14, [r4, #-8]
 800b396:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800b39a:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800b39e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b3a2:	3610      	adds	r6, #16
 800b3a4:	42ae      	cmp	r6, r5
 800b3a6:	ed14 fa01 	vldr	s30, [r4, #-4]
 800b3aa:	ed50 ea01 	vldr	s29, [r0, #-4]
 800b3ae:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800b3b2:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800b3b6:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800b3ba:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b3be:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b3c2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b3c6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b3ca:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b3ce:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b3d2:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b3d6:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b3da:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b3de:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b3e2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b3e6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b3ea:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b3ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b3f2:	db96      	blt.n	800b322 <forward_conv2d+0xa32>
 800b3f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b3f6:	4451      	add	r1, sl
 800b3f8:	4452      	add	r2, sl
 800b3fa:	4283      	cmp	r3, r0
 800b3fc:	dd0f      	ble.n	800b41e <forward_conv2d+0xb2e>
 800b3fe:	4604      	mov	r4, r0
 800b400:	468c      	mov	ip, r1
 800b402:	4616      	mov	r6, r2
 800b404:	ecb6 7a01 	vldmia	r6!, {s14}
 800b408:	ecfc 7a01 	vldmia	ip!, {s15}
 800b40c:	3401      	adds	r4, #1
 800b40e:	42a3      	cmp	r3, r4
 800b410:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b414:	d1f6      	bne.n	800b404 <forward_conv2d+0xb14>
 800b416:	1a18      	subs	r0, r3, r0
 800b418:	0080      	lsls	r0, r0, #2
 800b41a:	4402      	add	r2, r0
 800b41c:	4401      	add	r1, r0
 800b41e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b420:	4402      	add	r2, r0
 800b422:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b426:	f10e 0e01 	add.w	lr, lr, #1
 800b42a:	4570      	cmp	r0, lr
 800b42c:	4449      	add	r1, r9
 800b42e:	f47f af70 	bne.w	800b312 <forward_conv2d+0xa22>
 800b432:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b438:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b43c:	edc3 6a00 	vstr	s13, [r3]
 800b440:	4608      	mov	r0, r1
 800b442:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b446:	440b      	add	r3, r1
 800b448:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b44c:	673b      	str	r3, [r7, #112]	; 0x70
 800b44e:	4410      	add	r0, r2
 800b450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b452:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800b456:	4608      	mov	r0, r1
 800b458:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b45c:	4418      	add	r0, r3
 800b45e:	1acb      	subs	r3, r1, r3
 800b460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b464:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b468:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800b46c:	f10b 0b01 	add.w	fp, fp, #1
 800b470:	455b      	cmp	r3, fp
 800b472:	eba8 0802 	sub.w	r8, r8, r2
 800b476:	f47f af14 	bne.w	800b2a2 <forward_conv2d+0x9b2>
 800b47a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b47e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b484:	440a      	add	r2, r1
 800b486:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b48a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b48e:	3204      	adds	r2, #4
 800b490:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b494:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b498:	3301      	adds	r3, #1
 800b49a:	429a      	cmp	r2, r3
 800b49c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4a0:	f47f aed9 	bne.w	800b256 <forward_conv2d+0x966>
 800b4a4:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 800b4a8:	e4dc      	b.n	800ae64 <forward_conv2d+0x574>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	e7a5      	b.n	800b3fa <forward_conv2d+0xb0a>
 800b4ae:	eef0 6a46 	vmov.f32	s13, s12
 800b4b2:	e7be      	b.n	800b432 <forward_conv2d+0xb42>
 800b4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b4bc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b4c0:	eba8 0303 	sub.w	r3, r8, r3
 800b4c4:	e6f6      	b.n	800b2b4 <forward_conv2d+0x9c4>
 800b4c6:	eeb0 6a48 	vmov.f32	s12, s16
 800b4ca:	e6d0      	b.n	800b26e <forward_conv2d+0x97e>
 800b4cc:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b4d0:	68ca      	ldr	r2, [r1, #12]
 800b4d2:	2a00      	cmp	r2, #0
 800b4d4:	f43f aaca 	beq.w	800aa6c <forward_conv2d+0x17c>
 800b4d8:	69b3      	ldr	r3, [r6, #24]
 800b4da:	8818      	ldrh	r0, [r3, #0]
 800b4dc:	2803      	cmp	r0, #3
 800b4de:	f240 819f 	bls.w	800b820 <forward_conv2d+0xf30>
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e6:	b32b      	cbz	r3, 800b534 <forward_conv2d+0xc44>
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	b31b      	cbz	r3, 800b534 <forward_conv2d+0xc44>
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	6889      	ldr	r1, [r1, #8]
 800b4f0:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800b4fa:	9000      	str	r0, [sp, #0]
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	4620      	mov	r0, r4
 800b500:	f7ff f9a6 	bl	800a850 <ai_dict_decompress_f32>
 800b504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b508:	2c00      	cmp	r4, #0
 800b50a:	bf18      	it	ne
 800b50c:	4623      	movne	r3, r4
 800b50e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b512:	f7ff baab 	b.w	800aa6c <forward_conv2d+0x17c>
 800b516:	2800      	cmp	r0, #0
 800b518:	f000 8185 	beq.w	800b826 <forward_conv2d+0xf36>
 800b51c:	6883      	ldr	r3, [r0, #8]
 800b51e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b522:	2301      	movs	r3, #1
 800b524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b528:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b52c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b530:	f7ff ba6d 	b.w	800aa0e <forward_conv2d+0x11e>
 800b534:	2300      	movs	r3, #0
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	deff      	udf	#255	; 0xff
 800b53a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b53e:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800b542:	320a      	adds	r2, #10
 800b544:	f022 0207 	bic.w	r2, r2, #7
 800b548:	ebad 0d02 	sub.w	sp, sp, r2
 800b54c:	aa02      	add	r2, sp, #8
 800b54e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b552:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b556:	2a00      	cmp	r2, #0
 800b558:	f000 814d 	beq.w	800b7f6 <forward_conv2d+0xf06>
 800b55c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b55e:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800b562:	fb02 f303 	mul.w	r3, r2, r3
 800b566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b568:	657b      	str	r3, [r7, #84]	; 0x54
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b56e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b572:	4413      	add	r3, r2
 800b574:	637b      	str	r3, [r7, #52]	; 0x34
 800b576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b57a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b57e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b582:	673b      	str	r3, [r7, #112]	; 0x70
 800b584:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b58c:	2300      	movs	r3, #0
 800b58e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b594:	b13b      	cbz	r3, 800b5a6 <forward_conv2d+0xcb6>
 800b596:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b59a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b59e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b5a2:	f004 fee5 	bl	8010370 <memcpy>
 800b5a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 8135 	beq.w	800b81a <forward_conv2d+0xf2a>
 800b5b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5b2:	ed93 6a00 	vldr	s12, [r3]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	673b      	str	r3, [r7, #112]	; 0x70
 800b5ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 8101 	beq.w	800b7c6 <forward_conv2d+0xed6>
 800b5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b5cc:	eb03 0802 	add.w	r8, r3, r2
 800b5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5ea:	f04f 0b00 	mov.w	fp, #0
 800b5ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f2c0 8108 	blt.w	800b808 <forward_conv2d+0xf18>
 800b5f8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b5fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5fe:	2300      	movs	r3, #0
 800b600:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800b604:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b608:	eb02 0c04 	add.w	ip, r2, r4
 800b60c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800b610:	4540      	cmp	r0, r8
 800b612:	bf94      	ite	ls
 800b614:	ebc3 0300 	rsbls	r3, r3, r0
 800b618:	ebc3 0308 	rsbhi	r3, r3, r8
 800b61c:	eba2 0903 	sub.w	r9, r2, r3
 800b620:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800b624:	1ac4      	subs	r4, r0, r3
 800b626:	fb03 f302 	mul.w	r3, r3, r2
 800b62a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b62e:	2a00      	cmp	r2, #0
 800b630:	f340 80e7 	ble.w	800b802 <forward_conv2d+0xf12>
 800b634:	f023 050f 	bic.w	r5, r3, #15
 800b638:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800b63c:	1e68      	subs	r0, r5, #1
 800b63e:	0900      	lsrs	r0, r0, #4
 800b640:	3001      	adds	r0, #1
 800b642:	fb06 f204 	mul.w	r2, r6, r4
 800b646:	653a      	str	r2, [r7, #80]	; 0x50
 800b648:	0102      	lsls	r2, r0, #4
 800b64a:	633a      	str	r2, [r7, #48]	; 0x30
 800b64c:	fb06 f909 	mul.w	r9, r6, r9
 800b650:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800b654:	eef0 6a46 	vmov.f32	s13, s12
 800b658:	f04f 0e00 	mov.w	lr, #0
 800b65c:	4662      	mov	r2, ip
 800b65e:	2d00      	cmp	r5, #0
 800b660:	f340 80cd 	ble.w	800b7fe <forward_conv2d+0xf0e>
 800b664:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800b668:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b66c:	2600      	movs	r6, #0
 800b66e:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800b672:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800b676:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800b67a:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800b67e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800b682:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800b686:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800b68a:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800b68e:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800b692:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800b696:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800b69a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800b69e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800b6a2:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800b6a6:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800b6aa:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800b6ae:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800b6b2:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800b6b6:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b6ba:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800b6be:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800b6c2:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800b6c6:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800b6ca:	ed54 3a04 	vldr	s7, [r4, #-16]
 800b6ce:	ed10 4a04 	vldr	s8, [r0, #-16]
 800b6d2:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b6d6:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b6da:	ed54 5a02 	vldr	s11, [r4, #-8]
 800b6de:	ed10 7a02 	vldr	s14, [r0, #-8]
 800b6e2:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800b6e6:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800b6ea:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b6ee:	3610      	adds	r6, #16
 800b6f0:	42b5      	cmp	r5, r6
 800b6f2:	ed14 fa01 	vldr	s30, [r4, #-4]
 800b6f6:	ed50 ea01 	vldr	s29, [r0, #-4]
 800b6fa:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800b6fe:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800b702:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800b706:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b70a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b70e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b712:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b716:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b71a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b71e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b722:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b726:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b72a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b72e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b732:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b736:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b73a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b73e:	dc96      	bgt.n	800b66e <forward_conv2d+0xd7e>
 800b740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b742:	4451      	add	r1, sl
 800b744:	4452      	add	r2, sl
 800b746:	4283      	cmp	r3, r0
 800b748:	dd0f      	ble.n	800b76a <forward_conv2d+0xe7a>
 800b74a:	4604      	mov	r4, r0
 800b74c:	468c      	mov	ip, r1
 800b74e:	4616      	mov	r6, r2
 800b750:	ecb6 7a01 	vldmia	r6!, {s14}
 800b754:	ecfc 7a01 	vldmia	ip!, {s15}
 800b758:	3401      	adds	r4, #1
 800b75a:	42a3      	cmp	r3, r4
 800b75c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b760:	d1f6      	bne.n	800b750 <forward_conv2d+0xe60>
 800b762:	1a18      	subs	r0, r3, r0
 800b764:	0080      	lsls	r0, r0, #2
 800b766:	4402      	add	r2, r0
 800b768:	4401      	add	r1, r0
 800b76a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b76c:	4402      	add	r2, r0
 800b76e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b772:	f10e 0e01 	add.w	lr, lr, #1
 800b776:	4570      	cmp	r0, lr
 800b778:	4449      	add	r1, r9
 800b77a:	f47f af70 	bne.w	800b65e <forward_conv2d+0xd6e>
 800b77e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b784:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b788:	edc3 6a00 	vstr	s13, [r3]
 800b78c:	4608      	mov	r0, r1
 800b78e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b792:	440b      	add	r3, r1
 800b794:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b79a:	4410      	add	r0, r2
 800b79c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b79e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800b7a2:	4608      	mov	r0, r1
 800b7a4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b7a8:	4418      	add	r0, r3
 800b7aa:	1acb      	subs	r3, r1, r3
 800b7ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b7b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b7b4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800b7b8:	f10b 0b01 	add.w	fp, fp, #1
 800b7bc:	455b      	cmp	r3, fp
 800b7be:	eba8 0802 	sub.w	r8, r8, r2
 800b7c2:	f47f af14 	bne.w	800b5ee <forward_conv2d+0xcfe>
 800b7c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b7ca:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800b7ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b7d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b7dc:	3204      	adds	r2, #4
 800b7de:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b7e2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7ee:	f47f aed0 	bne.w	800b592 <forward_conv2d+0xca2>
 800b7f2:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800b7f6:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800b7fa:	f7ff bb33 	b.w	800ae64 <forward_conv2d+0x574>
 800b7fe:	2000      	movs	r0, #0
 800b800:	e7a1      	b.n	800b746 <forward_conv2d+0xe56>
 800b802:	eef0 6a46 	vmov.f32	s13, s12
 800b806:	e7ba      	b.n	800b77e <forward_conv2d+0xe8e>
 800b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b810:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b814:	eba8 0303 	sub.w	r3, r8, r3
 800b818:	e6f2      	b.n	800b600 <forward_conv2d+0xd10>
 800b81a:	eeb0 6a48 	vmov.f32	s12, s16
 800b81e:	e6cc      	b.n	800b5ba <forward_conv2d+0xcca>
 800b820:	2300      	movs	r3, #0
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	deff      	udf	#255	; 0xff
 800b826:	4603      	mov	r3, r0
 800b828:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b82c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b830:	2301      	movs	r3, #1
 800b832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b83a:	f7ff b8e8 	b.w	800aa0e <forward_conv2d+0x11e>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d0f2      	beq.n	800b828 <forward_conv2d+0xf38>
 800b842:	6882      	ldr	r2, [r0, #8]
 800b844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b848:	2301      	movs	r3, #1
 800b84a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b84e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800b852:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b856:	f7ff b8da 	b.w	800aa0e <forward_conv2d+0x11e>
 800b85a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800b85e:	f7ff b8b7 	b.w	800a9d0 <forward_conv2d+0xe0>
 800b862:	3318      	adds	r3, #24
 800b864:	d007      	beq.n	800b876 <forward_conv2d+0xf86>
 800b866:	462a      	mov	r2, r5
 800b868:	462c      	mov	r4, r5
 800b86a:	462b      	mov	r3, r5
 800b86c:	f7ff b86a 	b.w	800a944 <forward_conv2d+0x54>
 800b870:	2300      	movs	r3, #0
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	deff      	udf	#255	; 0xff
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	deff      	udf	#255	; 0xff
 800b87a:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800b87e:	f7ff b850 	b.w	800a922 <forward_conv2d+0x32>
 800b882:	2300      	movs	r3, #0
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	deff      	udf	#255	; 0xff
 800b888:	6853      	ldr	r3, [r2, #4]
 800b88a:	deff      	udf	#255	; 0xff
 800b88c:	2200      	movs	r2, #0
 800b88e:	f7ff b858 	b.w	800a942 <forward_conv2d+0x52>
 800b892:	bf00      	nop

0800b894 <forward_dense>:
 800b894:	6983      	ldr	r3, [r0, #24]
 800b896:	881a      	ldrh	r2, [r3, #0]
 800b898:	2a00      	cmp	r2, #0
 800b89a:	f000 8193 	beq.w	800bbc4 <forward_dense+0x330>
 800b89e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a2:	ed2d 8b10 	vpush	{d8-d15}
 800b8a6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b8aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b8ae:	b099      	sub	sp, #100	; 0x64
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 8194 	beq.w	800bbde <forward_dense+0x34a>
 800b8b6:	f8d3 8000 	ldr.w	r8, [r3]
 800b8ba:	2a01      	cmp	r2, #1
 800b8bc:	f240 817f 	bls.w	800bbbe <forward_dense+0x32a>
 800b8c0:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800b8c4:	b104      	cbz	r4, 800b8c8 <forward_dense+0x34>
 800b8c6:	6824      	ldr	r4, [r4, #0]
 800b8c8:	2a02      	cmp	r2, #2
 800b8ca:	f000 817d 	beq.w	800bbc8 <forward_dense+0x334>
 800b8ce:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f040 817b 	bne.w	800bbce <forward_dense+0x33a>
 800b8d8:	f11c 0118 	adds.w	r1, ip, #24
 800b8dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b8de:	f000 817c 	beq.w	800bbda <forward_dense+0x346>
 800b8e2:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 800b8e6:	2901      	cmp	r1, #1
 800b8e8:	f240 83ab 	bls.w	800c042 <forward_dense+0x7ae>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f000 8178 	beq.w	800bbe2 <forward_dense+0x34e>
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8f8:	68e7      	ldr	r7, [r4, #12]
 800b8fa:	6998      	ldr	r0, [r3, #24]
 800b8fc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b900:	6803      	ldr	r3, [r0, #0]
 800b902:	6849      	ldr	r1, [r1, #4]
 800b904:	9115      	str	r1, [sp, #84]	; 0x54
 800b906:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 800b90a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800b90e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800b912:	fa4e f101 	asr.w	r1, lr, r1
 800b916:	2a03      	cmp	r2, #3
 800b918:	68ff      	ldr	r7, [r7, #12]
 800b91a:	9113      	str	r1, [sp, #76]	; 0x4c
 800b91c:	fb05 f506 	mul.w	r5, r5, r6
 800b920:	f000 8373 	beq.w	800c00a <forward_dense+0x776>
 800b924:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800b928:	2a00      	cmp	r2, #0
 800b92a:	f000 8371 	beq.w	800c010 <forward_dense+0x77c>
 800b92e:	6812      	ldr	r2, [r2, #0]
 800b930:	2a00      	cmp	r2, #0
 800b932:	f000 836d 	beq.w	800c010 <forward_dense+0x77c>
 800b936:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b940:	f000 836c 	beq.w	800c01c <forward_dense+0x788>
 800b944:	2b08      	cmp	r3, #8
 800b946:	f000 8369 	beq.w	800c01c <forward_dense+0x788>
 800b94a:	f04f 0a00 	mov.w	sl, #0
 800b94e:	69a3      	ldr	r3, [r4, #24]
 800b950:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b954:	6899      	ldr	r1, [r3, #8]
 800b956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b958:	9102      	str	r1, [sp, #8]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	6892      	ldr	r2, [r2, #8]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	9305      	str	r3, [sp, #20]
 800b962:	00ad      	lsls	r5, r5, #2
 800b964:	fb07 1005 	mla	r0, r7, r5, r1
 800b968:	00b4      	lsls	r4, r6, #2
 800b96a:	4281      	cmp	r1, r0
 800b96c:	9011      	str	r0, [sp, #68]	; 0x44
 800b96e:	9410      	str	r4, [sp, #64]	; 0x40
 800b970:	eb01 0804 	add.w	r8, r1, r4
 800b974:	f080 811e 	bcs.w	800bbb4 <forward_dense+0x320>
 800b978:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b97a:	eddf faa0 	vldr	s31, [pc, #640]	; 800bbfc <forward_dense+0x368>
 800b97e:	08e8      	lsrs	r0, r5, #3
 800b980:	0141      	lsls	r1, r0, #5
 800b982:	f025 0301 	bic.w	r3, r5, #1
 800b986:	4606      	mov	r6, r0
 800b988:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 800b98c:	9001      	str	r0, [sp, #4]
 800b98e:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 800b992:	00f7      	lsls	r7, r6, #3
 800b994:	9316      	str	r3, [sp, #88]	; 0x58
 800b996:	0143      	lsls	r3, r0, #5
 800b998:	00b6      	lsls	r6, r6, #2
 800b99a:	f1a5 0410 	sub.w	r4, r5, #16
 800b99e:	9307      	str	r3, [sp, #28]
 800b9a0:	f107 0308 	add.w	r3, r7, #8
 800b9a4:	0924      	lsrs	r4, r4, #4
 800b9a6:	9304      	str	r3, [sp, #16]
 800b9a8:	1d33      	adds	r3, r6, #4
 800b9aa:	3401      	adds	r4, #1
 800b9ac:	930d      	str	r3, [sp, #52]	; 0x34
 800b9ae:	f005 0301 	and.w	r3, r5, #1
 800b9b2:	01a4      	lsls	r4, r4, #6
 800b9b4:	f005 0907 	and.w	r9, r5, #7
 800b9b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ba:	00ab      	lsls	r3, r5, #2
 800b9bc:	9312      	str	r3, [sp, #72]	; 0x48
 800b9be:	9703      	str	r7, [sp, #12]
 800b9c0:	960c      	str	r6, [sp, #48]	; 0x30
 800b9c2:	9417      	str	r4, [sp, #92]	; 0x5c
 800b9c4:	eb02 0b01 	add.w	fp, r2, r1
 800b9c8:	4653      	mov	r3, sl
 800b9ca:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800b9ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9d0:	9907      	ldr	r1, [sp, #28]
 800b9d2:	6992      	ldr	r2, [r2, #24]
 800b9d4:	6894      	ldr	r4, [r2, #8]
 800b9d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9d8:	4459      	add	r1, fp
 800b9da:	9106      	str	r1, [sp, #24]
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	f000 810f 	beq.w	800bc00 <forward_dense+0x36c>
 800b9e2:	6992      	ldr	r2, [r2, #24]
 800b9e4:	6896      	ldr	r6, [r2, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 810e 	beq.w	800bc08 <forward_dense+0x374>
 800b9ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b9ee:	2a04      	cmp	r2, #4
 800b9f0:	f000 821e 	beq.w	800be30 <forward_dense+0x59c>
 800b9f4:	9a02      	ldr	r2, [sp, #8]
 800b9f6:	4590      	cmp	r8, r2
 800b9f8:	f240 80d3 	bls.w	800bba2 <forward_dense+0x30e>
 800b9fc:	4694      	mov	ip, r2
 800b9fe:	9a07      	ldr	r2, [sp, #28]
 800ba00:	f8dd a014 	ldr.w	sl, [sp, #20]
 800ba04:	f102 0e20 	add.w	lr, r2, #32
 800ba08:	46b1      	mov	r9, r6
 800ba0a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ba0c:	44de      	add	lr, fp
 800ba0e:	f1b9 0f00 	cmp.w	r9, #0
 800ba12:	f000 80e8 	beq.w	800bbe6 <forward_dense+0x352>
 800ba16:	9a01      	ldr	r2, [sp, #4]
 800ba18:	edd9 2a00 	vldr	s5, [r9]
 800ba1c:	eddf 6a77 	vldr	s13, [pc, #476]	; 800bbfc <forward_dense+0x368>
 800ba20:	f109 0904 	add.w	r9, r9, #4
 800ba24:	2a00      	cmp	r2, #0
 800ba26:	f000 80e6 	beq.w	800bbf6 <forward_dense+0x362>
 800ba2a:	9904      	ldr	r1, [sp, #16]
 800ba2c:	f104 0208 	add.w	r2, r4, #8
 800ba30:	190f      	adds	r7, r1, r4
 800ba32:	4671      	mov	r1, lr
 800ba34:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800ba38:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800ba3c:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 800ba40:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 800ba44:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800ba48:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 800ba4c:	ed51 3a04 	vldr	s7, [r1, #-16]
 800ba50:	ed51 4a03 	vldr	s9, [r1, #-12]
 800ba54:	ed51 5a02 	vldr	s11, [r1, #-8]
 800ba58:	ed11 6a01 	vldr	s12, [r1, #-4]
 800ba5c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800ba60:	ed95 7a00 	vldr	s14, [r5]
 800ba64:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 800ba68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba70:	ed90 7a00 	vldr	s14, [r0]
 800ba74:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 800ba78:	eee7 7a03 	vfma.f32	s15, s14, s6
 800ba7c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800ba80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ba84:	ed95 3a00 	vldr	s6, [r5]
 800ba88:	ed90 7a00 	vldr	s14, [r0]
 800ba8c:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 800ba90:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800ba94:	eee3 7a04 	vfma.f32	s15, s6, s8
 800ba98:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800ba9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800baa0:	ed95 3a00 	vldr	s6, [r5]
 800baa4:	ed90 4a00 	vldr	s8, [r0]
 800baa8:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 800baac:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800bab0:	eee7 7a05 	vfma.f32	s15, s14, s10
 800bab4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bab8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800babc:	ed95 5a00 	vldr	s10, [r5]
 800bac0:	ed90 7a00 	vldr	s14, [r0]
 800bac4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bac8:	3208      	adds	r2, #8
 800baca:	4297      	cmp	r7, r2
 800bacc:	f101 0120 	add.w	r1, r1, #32
 800bad0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bad4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bad8:	eee7 7a06 	vfma.f32	s15, s14, s12
 800badc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bae0:	d1a8      	bne.n	800ba34 <forward_dense+0x1a0>
 800bae2:	9a03      	ldr	r2, [sp, #12]
 800bae4:	18a1      	adds	r1, r4, r2
 800bae6:	465a      	mov	r2, fp
 800bae8:	2e00      	cmp	r6, #0
 800baea:	d04a      	beq.n	800bb82 <forward_dense+0x2ee>
 800baec:	7808      	ldrb	r0, [r1, #0]
 800baee:	ed92 7a00 	vldr	s14, [r2]
 800baf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800baf6:	edd0 7a00 	vldr	s15, [r0]
 800bafa:	2e01      	cmp	r6, #1
 800bafc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb00:	d03f      	beq.n	800bb82 <forward_dense+0x2ee>
 800bb02:	7848      	ldrb	r0, [r1, #1]
 800bb04:	edd2 7a01 	vldr	s15, [r2, #4]
 800bb08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb0c:	ed90 7a00 	vldr	s14, [r0]
 800bb10:	2e02      	cmp	r6, #2
 800bb12:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb16:	d034      	beq.n	800bb82 <forward_dense+0x2ee>
 800bb18:	7888      	ldrb	r0, [r1, #2]
 800bb1a:	edd2 7a02 	vldr	s15, [r2, #8]
 800bb1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb22:	ed90 7a00 	vldr	s14, [r0]
 800bb26:	2e03      	cmp	r6, #3
 800bb28:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb2c:	d029      	beq.n	800bb82 <forward_dense+0x2ee>
 800bb2e:	78c8      	ldrb	r0, [r1, #3]
 800bb30:	edd2 7a03 	vldr	s15, [r2, #12]
 800bb34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb38:	ed90 7a00 	vldr	s14, [r0]
 800bb3c:	2e04      	cmp	r6, #4
 800bb3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb42:	d01e      	beq.n	800bb82 <forward_dense+0x2ee>
 800bb44:	7908      	ldrb	r0, [r1, #4]
 800bb46:	edd2 7a04 	vldr	s15, [r2, #16]
 800bb4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb4e:	ed90 7a00 	vldr	s14, [r0]
 800bb52:	2e05      	cmp	r6, #5
 800bb54:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb58:	d013      	beq.n	800bb82 <forward_dense+0x2ee>
 800bb5a:	7948      	ldrb	r0, [r1, #5]
 800bb5c:	edd2 7a05 	vldr	s15, [r2, #20]
 800bb60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb64:	ed90 7a00 	vldr	s14, [r0]
 800bb68:	2e06      	cmp	r6, #6
 800bb6a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb6e:	d008      	beq.n	800bb82 <forward_dense+0x2ee>
 800bb70:	7989      	ldrb	r1, [r1, #6]
 800bb72:	edd2 7a06 	vldr	s15, [r2, #24]
 800bb76:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800bb7a:	ed92 7a00 	vldr	s14, [r2]
 800bb7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb82:	4454      	add	r4, sl
 800bb84:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800bb88:	ecec 6a01 	vstmia	ip!, {s13}
 800bb8c:	45c4      	cmp	ip, r8
 800bb8e:	f4ff af3e 	bcc.w	800ba0e <forward_dense+0x17a>
 800bb92:	9902      	ldr	r1, [sp, #8]
 800bb94:	43ca      	mvns	r2, r1
 800bb96:	4442      	add	r2, r8
 800bb98:	f022 0203 	bic.w	r2, r2, #3
 800bb9c:	3204      	adds	r2, #4
 800bb9e:	188a      	adds	r2, r1, r2
 800bba0:	9202      	str	r2, [sp, #8]
 800bba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bba4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bba6:	4490      	add	r8, r2
 800bba8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bbaa:	4493      	add	fp, r2
 800bbac:	9a02      	ldr	r2, [sp, #8]
 800bbae:	428a      	cmp	r2, r1
 800bbb0:	f4ff af0d 	bcc.w	800b9ce <forward_dense+0x13a>
 800bbb4:	b019      	add	sp, #100	; 0x64
 800bbb6:	ecbd 8b10 	vpop	{d8-d15}
 800bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	deff      	udf	#255	; 0xff
 800bbc4:	6853      	ldr	r3, [r2, #4]
 800bbc6:	deff      	udf	#255	; 0xff
 800bbc8:	2300      	movs	r3, #0
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	deff      	udf	#255	; 0xff
 800bbce:	6819      	ldr	r1, [r3, #0]
 800bbd0:	910e      	str	r1, [sp, #56]	; 0x38
 800bbd2:	f11c 0118 	adds.w	r1, ip, #24
 800bbd6:	f47f ae84 	bne.w	800b8e2 <forward_dense+0x4e>
 800bbda:	910f      	str	r1, [sp, #60]	; 0x3c
 800bbdc:	e68b      	b.n	800b8f6 <forward_dense+0x62>
 800bbde:	4698      	mov	r8, r3
 800bbe0:	e66b      	b.n	800b8ba <forward_dense+0x26>
 800bbe2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbe4:	e687      	b.n	800b8f6 <forward_dense+0x62>
 800bbe6:	9a01      	ldr	r2, [sp, #4]
 800bbe8:	eddf 6a04 	vldr	s13, [pc, #16]	; 800bbfc <forward_dense+0x368>
 800bbec:	eef0 2a6f 	vmov.f32	s5, s31
 800bbf0:	2a00      	cmp	r2, #0
 800bbf2:	f47f af1a 	bne.w	800ba2a <forward_dense+0x196>
 800bbf6:	9a06      	ldr	r2, [sp, #24]
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	e775      	b.n	800bae8 <forward_dense+0x254>
 800bbfc:	00000000 	.word	0x00000000
 800bc00:	4616      	mov	r6, r2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f47f aef2 	bne.w	800b9ec <forward_dense+0x158>
 800bc08:	9a02      	ldr	r2, [sp, #8]
 800bc0a:	4590      	cmp	r8, r2
 800bc0c:	d9c9      	bls.n	800bba2 <forward_dense+0x30e>
 800bc0e:	4615      	mov	r5, r2
 800bc10:	9a07      	ldr	r2, [sp, #28]
 800bc12:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bc14:	9308      	str	r3, [sp, #32]
 800bc16:	f102 0740 	add.w	r7, r2, #64	; 0x40
 800bc1a:	9a06      	ldr	r2, [sp, #24]
 800bc1c:	9b05      	ldr	r3, [sp, #20]
 800bc1e:	4610      	mov	r0, r2
 800bc20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc22:	445f      	add	r7, fp
 800bc24:	eb00 0c02 	add.w	ip, r0, r2
 800bc28:	f001 0e0f 	and.w	lr, r1, #15
 800bc2c:	468a      	mov	sl, r1
 800bc2e:	4691      	mov	r9, r2
 800bc30:	2e00      	cmp	r6, #0
 800bc32:	f000 81de 	beq.w	800bff2 <forward_dense+0x75e>
 800bc36:	f1ba 0f0f 	cmp.w	sl, #15
 800bc3a:	ed96 fa00 	vldr	s30, [r6]
 800bc3e:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 800bbfc <forward_dense+0x368>
 800bc42:	f106 0604 	add.w	r6, r6, #4
 800bc46:	f240 81dc 	bls.w	800c002 <forward_dense+0x76e>
 800bc4a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800bc4e:	463a      	mov	r2, r7
 800bc50:	4650      	mov	r0, sl
 800bc52:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 800bc56:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800bc5a:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 800bc5e:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 800bc62:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 800bc66:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 800bc6a:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 800bc6e:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 800bc72:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 800bc76:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 800bc7a:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 800bc7e:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800bc82:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 800bc86:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 800bc8a:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 800bc8e:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 800bc92:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800bc96:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 800bc9a:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800bc9e:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 800bca2:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800bca6:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 800bcaa:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 800bcae:	ed12 4a04 	vldr	s8, [r2, #-16]
 800bcb2:	ed51 4a04 	vldr	s9, [r1, #-16]
 800bcb6:	ed12 5a03 	vldr	s10, [r2, #-12]
 800bcba:	ed51 5a03 	vldr	s11, [r1, #-12]
 800bcbe:	ed12 6a02 	vldr	s12, [r2, #-8]
 800bcc2:	ed11 7a02 	vldr	s14, [r1, #-8]
 800bcc6:	ee67 7aae 	vmul.f32	s15, s15, s29
 800bcca:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 800bcce:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800bcd2:	3810      	subs	r0, #16
 800bcd4:	280f      	cmp	r0, #15
 800bcd6:	ed11 ea01 	vldr	s28, [r1, #-4]
 800bcda:	ed52 da01 	vldr	s27, [r2, #-4]
 800bcde:	eeed 7a2e 	vfma.f32	s15, s26, s29
 800bce2:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800bce6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800bcea:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800bcee:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800bcf2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800bcf6:	eee9 7a89 	vfma.f32	s15, s19, s18
 800bcfa:	eee8 7a88 	vfma.f32	s15, s17, s16
 800bcfe:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bd02:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bd06:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bd0a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bd0e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bd12:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bd16:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd1a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800bd1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bd22:	d896      	bhi.n	800bc52 <forward_dense+0x3be>
 800bd24:	eb04 0009 	add.w	r0, r4, r9
 800bd28:	4672      	mov	r2, lr
 800bd2a:	4661      	mov	r1, ip
 800bd2c:	2a00      	cmp	r2, #0
 800bd2e:	d075      	beq.n	800be1c <forward_dense+0x588>
 800bd30:	ed90 7a00 	vldr	s14, [r0]
 800bd34:	edd1 7a00 	vldr	s15, [r1]
 800bd38:	2a01      	cmp	r2, #1
 800bd3a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd3e:	d06d      	beq.n	800be1c <forward_dense+0x588>
 800bd40:	ed90 7a01 	vldr	s14, [r0, #4]
 800bd44:	edd1 7a01 	vldr	s15, [r1, #4]
 800bd48:	2a02      	cmp	r2, #2
 800bd4a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd4e:	d065      	beq.n	800be1c <forward_dense+0x588>
 800bd50:	ed90 7a02 	vldr	s14, [r0, #8]
 800bd54:	edd1 7a02 	vldr	s15, [r1, #8]
 800bd58:	2a03      	cmp	r2, #3
 800bd5a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd5e:	d05d      	beq.n	800be1c <forward_dense+0x588>
 800bd60:	ed90 7a03 	vldr	s14, [r0, #12]
 800bd64:	edd1 7a03 	vldr	s15, [r1, #12]
 800bd68:	2a04      	cmp	r2, #4
 800bd6a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd6e:	d055      	beq.n	800be1c <forward_dense+0x588>
 800bd70:	ed90 7a04 	vldr	s14, [r0, #16]
 800bd74:	edd1 7a04 	vldr	s15, [r1, #16]
 800bd78:	2a05      	cmp	r2, #5
 800bd7a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd7e:	d04d      	beq.n	800be1c <forward_dense+0x588>
 800bd80:	ed90 7a05 	vldr	s14, [r0, #20]
 800bd84:	edd1 7a05 	vldr	s15, [r1, #20]
 800bd88:	2a06      	cmp	r2, #6
 800bd8a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd8e:	d045      	beq.n	800be1c <forward_dense+0x588>
 800bd90:	ed90 7a06 	vldr	s14, [r0, #24]
 800bd94:	edd1 7a06 	vldr	s15, [r1, #24]
 800bd98:	2a07      	cmp	r2, #7
 800bd9a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd9e:	d03d      	beq.n	800be1c <forward_dense+0x588>
 800bda0:	ed90 7a07 	vldr	s14, [r0, #28]
 800bda4:	edd1 7a07 	vldr	s15, [r1, #28]
 800bda8:	2a08      	cmp	r2, #8
 800bdaa:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bdae:	d035      	beq.n	800be1c <forward_dense+0x588>
 800bdb0:	ed90 7a08 	vldr	s14, [r0, #32]
 800bdb4:	edd1 7a08 	vldr	s15, [r1, #32]
 800bdb8:	2a09      	cmp	r2, #9
 800bdba:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bdbe:	d02d      	beq.n	800be1c <forward_dense+0x588>
 800bdc0:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800bdc4:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800bdc8:	2a0a      	cmp	r2, #10
 800bdca:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bdce:	d025      	beq.n	800be1c <forward_dense+0x588>
 800bdd0:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800bdd4:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800bdd8:	2a0b      	cmp	r2, #11
 800bdda:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bdde:	d01d      	beq.n	800be1c <forward_dense+0x588>
 800bde0:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800bde4:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800bde8:	2a0c      	cmp	r2, #12
 800bdea:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bdee:	d015      	beq.n	800be1c <forward_dense+0x588>
 800bdf0:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800bdf4:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800bdf8:	2a0d      	cmp	r2, #13
 800bdfa:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bdfe:	d00d      	beq.n	800be1c <forward_dense+0x588>
 800be00:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800be04:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800be08:	2a0e      	cmp	r2, #14
 800be0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800be0e:	d005      	beq.n	800be1c <forward_dense+0x588>
 800be10:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800be14:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800be18:	eee7 6a27 	vfma.f32	s13, s14, s15
 800be1c:	441c      	add	r4, r3
 800be1e:	ee7f 6a26 	vadd.f32	s13, s30, s13
 800be22:	ece5 6a01 	vstmia	r5!, {s13}
 800be26:	4545      	cmp	r5, r8
 800be28:	f4ff af02 	bcc.w	800bc30 <forward_dense+0x39c>
 800be2c:	9b08      	ldr	r3, [sp, #32]
 800be2e:	e6b0      	b.n	800bb92 <forward_dense+0x2fe>
 800be30:	9902      	ldr	r1, [sp, #8]
 800be32:	4588      	cmp	r8, r1
 800be34:	f67f aeb5 	bls.w	800bba2 <forward_dense+0x30e>
 800be38:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be3a:	eb02 000b 	add.w	r0, r2, fp
 800be3e:	9a07      	ldr	r2, [sp, #28]
 800be40:	9008      	str	r0, [sp, #32]
 800be42:	3220      	adds	r2, #32
 800be44:	3007      	adds	r0, #7
 800be46:	445a      	add	r2, fp
 800be48:	900b      	str	r0, [sp, #44]	; 0x2c
 800be4a:	920a      	str	r2, [sp, #40]	; 0x28
 800be4c:	4689      	mov	r9, r1
 800be4e:	2e00      	cmp	r6, #0
 800be50:	f000 80b9 	beq.w	800bfc6 <forward_dense+0x732>
 800be54:	9a01      	ldr	r2, [sp, #4]
 800be56:	edd6 2a00 	vldr	s5, [r6]
 800be5a:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 800bbfc <forward_dense+0x368>
 800be5e:	3604      	adds	r6, #4
 800be60:	2a00      	cmp	r2, #0
 800be62:	f000 80b8 	beq.w	800bfd6 <forward_dense+0x742>
 800be66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be68:	1917      	adds	r7, r2, r4
 800be6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be6c:	1d21      	adds	r1, r4, #4
 800be6e:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800be72:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800be76:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800be7a:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 800be7e:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800be82:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800be86:	ed52 4a04 	vldr	s9, [r2, #-16]
 800be8a:	ed12 5a03 	vldr	s10, [r2, #-12]
 800be8e:	ed52 5a02 	vldr	s11, [r2, #-8]
 800be92:	ed12 6a01 	vldr	s12, [r2, #-4]
 800be96:	f005 0e0f 	and.w	lr, r5, #15
 800be9a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800be9e:	ed9e 7a00 	vldr	s14, [lr]
 800bea2:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800bea6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800beaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beae:	ed9c 7a00 	vldr	s14, [ip]
 800beb2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800beb6:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800beba:	eee7 7a03 	vfma.f32	s15, s14, s6
 800bebe:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800bec2:	f000 0c0f 	and.w	ip, r0, #15
 800bec6:	ed9e 7a00 	vldr	s14, [lr]
 800beca:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800bece:	eee7 7a23 	vfma.f32	s15, s14, s7
 800bed2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800bed6:	3104      	adds	r1, #4
 800bed8:	ed9c 7a00 	vldr	s14, [ip]
 800bedc:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800bee0:	eee7 7a04 	vfma.f32	s15, s14, s8
 800bee4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800bee8:	f005 050f 	and.w	r5, r5, #15
 800beec:	ed9c 7a00 	vldr	s14, [ip]
 800bef0:	eee7 7a24 	vfma.f32	s15, s14, s9
 800bef4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bef8:	428f      	cmp	r7, r1
 800befa:	ed95 7a00 	vldr	s14, [r5]
 800befe:	ea4f 1510 	mov.w	r5, r0, lsr #4
 800bf02:	eee7 7a05 	vfma.f32	s15, s14, s10
 800bf06:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bf0a:	f000 000f 	and.w	r0, r0, #15
 800bf0e:	ed95 7a00 	vldr	s14, [r5]
 800bf12:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bf16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf1a:	f102 0220 	add.w	r2, r2, #32
 800bf1e:	ed90 7a00 	vldr	s14, [r0]
 800bf22:	eee7 7a06 	vfma.f32	s15, s14, s12
 800bf26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bf2a:	d1a0      	bne.n	800be6e <forward_dense+0x5da>
 800bf2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf2e:	46de      	mov	lr, fp
 800bf30:	eb04 0a02 	add.w	sl, r4, r2
 800bf34:	9a08      	ldr	r2, [sp, #32]
 800bf36:	4596      	cmp	lr, r2
 800bf38:	d22c      	bcs.n	800bf94 <forward_dense+0x700>
 800bf3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf3c:	f10e 0108 	add.w	r1, lr, #8
 800bf40:	eba2 0c01 	sub.w	ip, r2, r1
 800bf44:	f02c 0207 	bic.w	r2, ip, #7
 800bf48:	f10e 0710 	add.w	r7, lr, #16
 800bf4c:	4417      	add	r7, r2
 800bf4e:	f10a 35ff 	add.w	r5, sl, #4294967295
 800bf52:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800bf56:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bf5a:	ed11 6a02 	vldr	s12, [r1, #-8]
 800bf5e:	f002 000f 	and.w	r0, r2, #15
 800bf62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf66:	ed90 7a00 	vldr	s14, [r0]
 800bf6a:	0912      	lsrs	r2, r2, #4
 800bf6c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800bf70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf74:	ed92 7a00 	vldr	s14, [r2]
 800bf78:	eee7 7a06 	vfma.f32	s15, s14, s12
 800bf7c:	3108      	adds	r1, #8
 800bf7e:	428f      	cmp	r7, r1
 800bf80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bf84:	d1e5      	bne.n	800bf52 <forward_dense+0x6be>
 800bf86:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800bf8a:	f10c 0c01 	add.w	ip, ip, #1
 800bf8e:	44e2      	add	sl, ip
 800bf90:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800bf94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf96:	b312      	cbz	r2, 800bfde <forward_dense+0x74a>
 800bf98:	f89a 2000 	ldrb.w	r2, [sl]
 800bf9c:	edde 7a00 	vldr	s15, [lr]
 800bfa0:	0912      	lsrs	r2, r2, #4
 800bfa2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800bfa6:	ed92 7a00 	vldr	s14, [r2]
 800bfaa:	9a05      	ldr	r2, [sp, #20]
 800bfac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bfb0:	4414      	add	r4, r2
 800bfb2:	ee76 2aa2 	vadd.f32	s5, s13, s5
 800bfb6:	ece9 2a01 	vstmia	r9!, {s5}
 800bfba:	45c8      	cmp	r8, r9
 800bfbc:	f67f ade9 	bls.w	800bb92 <forward_dense+0x2fe>
 800bfc0:	2e00      	cmp	r6, #0
 800bfc2:	f47f af47 	bne.w	800be54 <forward_dense+0x5c0>
 800bfc6:	9a01      	ldr	r2, [sp, #4]
 800bfc8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c048 <forward_dense+0x7b4>
 800bfcc:	eef0 2a6f 	vmov.f32	s5, s31
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	f47f af48 	bne.w	800be66 <forward_dense+0x5d2>
 800bfd6:	f8dd e018 	ldr.w	lr, [sp, #24]
 800bfda:	46a2      	mov	sl, r4
 800bfdc:	e7aa      	b.n	800bf34 <forward_dense+0x6a0>
 800bfde:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800bfe2:	9a05      	ldr	r2, [sp, #20]
 800bfe4:	ece9 6a01 	vstmia	r9!, {s13}
 800bfe8:	45c1      	cmp	r9, r8
 800bfea:	4414      	add	r4, r2
 800bfec:	f4ff af2f 	bcc.w	800be4e <forward_dense+0x5ba>
 800bff0:	e5cf      	b.n	800bb92 <forward_dense+0x2fe>
 800bff2:	f1ba 0f0f 	cmp.w	sl, #15
 800bff6:	eeb0 fa6f 	vmov.f32	s30, s31
 800bffa:	eddf 6a13 	vldr	s13, [pc, #76]	; 800c048 <forward_dense+0x7b4>
 800bffe:	f63f ae24 	bhi.w	800bc4a <forward_dense+0x3b6>
 800c002:	4652      	mov	r2, sl
 800c004:	4620      	mov	r0, r4
 800c006:	9906      	ldr	r1, [sp, #24]
 800c008:	e690      	b.n	800bd2c <forward_dense+0x498>
 800c00a:	2300      	movs	r3, #0
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	deff      	udf	#255	; 0xff
 800c010:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800c014:	2b04      	cmp	r3, #4
 800c016:	4691      	mov	r9, r2
 800c018:	f47f ac94 	bne.w	800b944 <forward_dense+0xb0>
 800c01c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c020:	f1b9 0f00 	cmp.w	r9, #0
 800c024:	f43f ac93 	beq.w	800b94e <forward_dense+0xba>
 800c028:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c02c:	f000 fbd2 	bl	800c7d4 <ai_array_get_byte_size>
 800c030:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c034:	4602      	mov	r2, r0
 800c036:	4651      	mov	r1, sl
 800c038:	4618      	mov	r0, r3
 800c03a:	f004 f999 	bl	8010370 <memcpy>
 800c03e:	4682      	mov	sl, r0
 800c040:	e485      	b.n	800b94e <forward_dense+0xba>
 800c042:	2300      	movs	r3, #0
 800c044:	930f      	str	r3, [sp, #60]	; 0x3c
 800c046:	e456      	b.n	800b8f6 <forward_dense+0x62>
 800c048:	00000000 	.word	0x00000000

0800c04c <nl_func_relu_array_f32>:
 800c04c:	b410      	push	{r4}
 800c04e:	698c      	ldr	r4, [r1, #24]
 800c050:	6981      	ldr	r1, [r0, #24]
 800c052:	68a3      	ldr	r3, [r4, #8]
 800c054:	6889      	ldr	r1, [r1, #8]
 800c056:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c05a:	3a01      	subs	r2, #1
 800c05c:	0092      	lsls	r2, r2, #2
 800c05e:	189b      	adds	r3, r3, r2
 800c060:	d216      	bcs.n	800c090 <nl_func_relu_array_f32+0x44>
 800c062:	3204      	adds	r2, #4
 800c064:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c098 <nl_func_relu_array_f32+0x4c>
 800c068:	4411      	add	r1, r2
 800c06a:	3304      	adds	r3, #4
 800c06c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c078:	bfb8      	it	lt
 800c07a:	eef0 7a47 	vmovlt.f32	s15, s14
 800c07e:	ed61 7a01 	vstmdb	r1!, {s15}
 800c082:	68a0      	ldr	r0, [r4, #8]
 800c084:	f1a3 0208 	sub.w	r2, r3, #8
 800c088:	4290      	cmp	r0, r2
 800c08a:	f1a3 0304 	sub.w	r3, r3, #4
 800c08e:	d9ed      	bls.n	800c06c <nl_func_relu_array_f32+0x20>
 800c090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	00000000 	.word	0x00000000

0800c09c <nl_func_sm_array_f32>:
 800c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a0:	ed2d 8b04 	vpush	{d8-d9}
 800c0a4:	b089      	sub	sp, #36	; 0x24
 800c0a6:	698f      	ldr	r7, [r1, #24]
 800c0a8:	6984      	ldr	r4, [r0, #24]
 800c0aa:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800c0ae:	68bd      	ldr	r5, [r7, #8]
 800c0b0:	9402      	str	r4, [sp, #8]
 800c0b2:	4626      	mov	r6, r4
 800c0b4:	4696      	mov	lr, r2
 800c0b6:	eba2 020c 	sub.w	r2, r2, ip
 800c0ba:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800c0be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	68b6      	ldr	r6, [r6, #8]
 800c0c4:	ebae 0e04 	sub.w	lr, lr, r4
 800c0c8:	4295      	cmp	r5, r2
 800c0ca:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800c0ce:	d354      	bcc.n	800c17a <nl_func_sm_array_f32+0xde>
 800c0d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800c0d4:	f1cc 0200 	rsb	r2, ip, #0
 800c0d8:	00a4      	lsls	r4, r4, #2
 800c0da:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800c0de:	9303      	str	r3, [sp, #12]
 800c0e0:	9204      	str	r2, [sp, #16]
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4262      	negs	r2, r4
 800c0e6:	9205      	str	r2, [sp, #20]
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c0ee:	9b02      	ldr	r3, [sp, #8]
 800c0f0:	9a07      	ldr	r2, [sp, #28]
 800c0f2:	60bd      	str	r5, [r7, #8]
 800c0f4:	609e      	str	r6, [r3, #8]
 800c0f6:	9b06      	ldr	r3, [sp, #24]
 800c0f8:	6992      	ldr	r2, [r2, #24]
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	6894      	ldr	r4, [r2, #8]
 800c0fe:	9a03      	ldr	r2, [sp, #12]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	2a01      	cmp	r2, #1
 800c104:	ed93 8a00 	vldr	s16, [r3]
 800c108:	d940      	bls.n	800c18c <nl_func_sm_array_f32+0xf0>
 800c10a:	9901      	ldr	r1, [sp, #4]
 800c10c:	1d1a      	adds	r2, r3, #4
 800c10e:	eb03 0b01 	add.w	fp, r3, r1
 800c112:	ecf2 7a01 	vldmia	r2!, {s15}
 800c116:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c11e:	bfb8      	it	lt
 800c120:	eeb0 8a67 	vmovlt.f32	s16, s15
 800c124:	4593      	cmp	fp, r2
 800c126:	d1f4      	bne.n	800c112 <nl_func_sm_array_f32+0x76>
 800c128:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800c198 <nl_func_sm_array_f32+0xfc>
 800c12c:	469a      	mov	sl, r3
 800c12e:	46a1      	mov	r9, r4
 800c130:	46a0      	mov	r8, r4
 800c132:	ecba 0a01 	vldmia	sl!, {s0}
 800c136:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c13a:	f001 fe43 	bl	800ddc4 <expf>
 800c13e:	45d3      	cmp	fp, sl
 800c140:	eca8 0a01 	vstmia	r8!, {s0}
 800c144:	ee78 8a80 	vadd.f32	s17, s17, s0
 800c148:	d1f3      	bne.n	800c132 <nl_func_sm_array_f32+0x96>
 800c14a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c152:	d00b      	beq.n	800c16c <nl_func_sm_array_f32+0xd0>
 800c154:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800c158:	9b01      	ldr	r3, [sp, #4]
 800c15a:	441c      	add	r4, r3
 800c15c:	edd9 7a00 	vldr	s15, [r9]
 800c160:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c164:	ece9 7a01 	vstmia	r9!, {s15}
 800c168:	454c      	cmp	r4, r9
 800c16a:	d1f7      	bne.n	800c15c <nl_func_sm_array_f32+0xc0>
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	441d      	add	r5, r3
 800c172:	9b05      	ldr	r3, [sp, #20]
 800c174:	42aa      	cmp	r2, r5
 800c176:	441e      	add	r6, r3
 800c178:	d9b9      	bls.n	800c0ee <nl_func_sm_array_f32+0x52>
 800c17a:	60ba      	str	r2, [r7, #8]
 800c17c:	9a02      	ldr	r2, [sp, #8]
 800c17e:	68d3      	ldr	r3, [r2, #12]
 800c180:	6093      	str	r3, [r2, #8]
 800c182:	b009      	add	sp, #36	; 0x24
 800c184:	ecbd 8b04 	vpop	{d8-d9}
 800c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18c:	2a00      	cmp	r2, #0
 800c18e:	d0ed      	beq.n	800c16c <nl_func_sm_array_f32+0xd0>
 800c190:	9a01      	ldr	r2, [sp, #4]
 800c192:	eb03 0b02 	add.w	fp, r3, r2
 800c196:	e7c7      	b.n	800c128 <nl_func_sm_array_f32+0x8c>
 800c198:	00000000 	.word	0x00000000

0800c19c <nl_func_relu_generic_array_f32>:
 800c19c:	b430      	push	{r4, r5}
 800c19e:	6989      	ldr	r1, [r1, #24]
 800c1a0:	6980      	ldr	r0, [r0, #24]
 800c1a2:	edd3 6a02 	vldr	s13, [r3, #8]
 800c1a6:	688c      	ldr	r4, [r1, #8]
 800c1a8:	6880      	ldr	r0, [r0, #8]
 800c1aa:	ed93 7a00 	vldr	s14, [r3]
 800c1ae:	ed93 6a01 	vldr	s12, [r3, #4]
 800c1b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c1b6:	3a01      	subs	r2, #1
 800c1b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c1bc:	0092      	lsls	r2, r2, #2
 800c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c2:	4410      	add	r0, r2
 800c1c4:	4422      	add	r2, r4
 800c1c6:	d421      	bmi.n	800c20c <nl_func_relu_generic_array_f32+0x70>
 800c1c8:	4294      	cmp	r4, r2
 800c1ca:	d83d      	bhi.n	800c248 <nl_func_relu_generic_array_f32+0xac>
 800c1cc:	1d13      	adds	r3, r2, #4
 800c1ce:	1d02      	adds	r2, r0, #4
 800c1d0:	e010      	b.n	800c1f4 <nl_func_relu_generic_array_f32+0x58>
 800c1d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1da:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c1de:	d501      	bpl.n	800c1e4 <nl_func_relu_generic_array_f32+0x48>
 800c1e0:	ee65 7a86 	vmul.f32	s15, s11, s12
 800c1e4:	ed62 7a01 	vstmdb	r2!, {s15}
 800c1e8:	6888      	ldr	r0, [r1, #8]
 800c1ea:	f1a3 0408 	sub.w	r4, r3, #8
 800c1ee:	4284      	cmp	r4, r0
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	d329      	bcc.n	800c248 <nl_func_relu_generic_array_f32+0xac>
 800c1f4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c1f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c200:	f1a3 0504 	sub.w	r5, r3, #4
 800c204:	d4e5      	bmi.n	800c1d2 <nl_func_relu_generic_array_f32+0x36>
 800c206:	eef0 7a66 	vmov.f32	s15, s13
 800c20a:	e7eb      	b.n	800c1e4 <nl_func_relu_generic_array_f32+0x48>
 800c20c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c214:	d01a      	beq.n	800c24c <nl_func_relu_generic_array_f32+0xb0>
 800c216:	4294      	cmp	r4, r2
 800c218:	d816      	bhi.n	800c248 <nl_func_relu_generic_array_f32+0xac>
 800c21a:	1d13      	adds	r3, r2, #4
 800c21c:	1d02      	adds	r2, r0, #4
 800c21e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c222:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c22a:	f1a3 0408 	sub.w	r4, r3, #8
 800c22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c232:	f1a3 0004 	sub.w	r0, r3, #4
 800c236:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c23a:	4623      	mov	r3, r4
 800c23c:	d51e      	bpl.n	800c27c <nl_func_relu_generic_array_f32+0xe0>
 800c23e:	ed62 6a01 	vstmdb	r2!, {s13}
 800c242:	688b      	ldr	r3, [r1, #8]
 800c244:	42a3      	cmp	r3, r4
 800c246:	d91e      	bls.n	800c286 <nl_func_relu_generic_array_f32+0xea>
 800c248:	bc30      	pop	{r4, r5}
 800c24a:	4770      	bx	lr
 800c24c:	4294      	cmp	r4, r2
 800c24e:	d8fb      	bhi.n	800c248 <nl_func_relu_generic_array_f32+0xac>
 800c250:	1d13      	adds	r3, r2, #4
 800c252:	2500      	movs	r5, #0
 800c254:	1d02      	adds	r2, r0, #4
 800c256:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c25a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c25e:	f1a3 0408 	sub.w	r4, r3, #8
 800c262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c266:	f1a3 0004 	sub.w	r0, r3, #4
 800c26a:	4623      	mov	r3, r4
 800c26c:	db0d      	blt.n	800c28a <nl_func_relu_generic_array_f32+0xee>
 800c26e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c272:	688b      	ldr	r3, [r1, #8]
 800c274:	42a3      	cmp	r3, r4
 800c276:	d8e7      	bhi.n	800c248 <nl_func_relu_generic_array_f32+0xac>
 800c278:	4603      	mov	r3, r0
 800c27a:	e7ec      	b.n	800c256 <nl_func_relu_generic_array_f32+0xba>
 800c27c:	ed62 7a01 	vstmdb	r2!, {s15}
 800c280:	688c      	ldr	r4, [r1, #8]
 800c282:	429c      	cmp	r4, r3
 800c284:	d8e0      	bhi.n	800c248 <nl_func_relu_generic_array_f32+0xac>
 800c286:	4603      	mov	r3, r0
 800c288:	e7c9      	b.n	800c21e <nl_func_relu_generic_array_f32+0x82>
 800c28a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c28e:	688c      	ldr	r4, [r1, #8]
 800c290:	429c      	cmp	r4, r3
 800c292:	d8d9      	bhi.n	800c248 <nl_func_relu_generic_array_f32+0xac>
 800c294:	4603      	mov	r3, r0
 800c296:	e7de      	b.n	800c256 <nl_func_relu_generic_array_f32+0xba>

0800c298 <forward_relu>:
 800c298:	6982      	ldr	r2, [r0, #24]
 800c29a:	8813      	ldrh	r3, [r2, #0]
 800c29c:	b333      	cbz	r3, 800c2ec <forward_relu+0x54>
 800c29e:	6852      	ldr	r2, [r2, #4]
 800c2a0:	6851      	ldr	r1, [r2, #4]
 800c2a2:	b101      	cbz	r1, 800c2a6 <forward_relu+0xe>
 800c2a4:	6809      	ldr	r1, [r1, #0]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d91d      	bls.n	800c2e6 <forward_relu+0x4e>
 800c2aa:	b4f0      	push	{r4, r5, r6, r7}
 800c2ac:	6917      	ldr	r7, [r2, #16]
 800c2ae:	b107      	cbz	r7, 800c2b2 <forward_relu+0x1a>
 800c2b0:	683f      	ldr	r7, [r7, #0]
 800c2b2:	688c      	ldr	r4, [r1, #8]
 800c2b4:	69c3      	ldr	r3, [r0, #28]
 800c2b6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d044      	beq.n	800c348 <forward_relu+0xb0>
 800c2be:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800c2c2:	2d01      	cmp	r5, #1
 800c2c4:	d014      	beq.n	800c2f0 <forward_relu+0x58>
 800c2c6:	2c00      	cmp	r4, #0
 800c2c8:	d074      	beq.n	800c3b4 <forward_relu+0x11c>
 800c2ca:	68ce      	ldr	r6, [r1, #12]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c2d2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2d6:	42a6      	cmp	r6, r4
 800c2d8:	fb05 f202 	mul.w	r2, r5, r2
 800c2dc:	d1f9      	bne.n	800c2d2 <forward_relu+0x3a>
 800c2de:	4638      	mov	r0, r7
 800c2e0:	bcf0      	pop	{r4, r5, r6, r7}
 800c2e2:	f7ff bf5b 	b.w	800c19c <nl_func_relu_generic_array_f32>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	deff      	udf	#255	; 0xff
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	deff      	udf	#255	; 0xff
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	6988      	ldr	r0, [r1, #24]
 800c2f4:	6896      	ldr	r6, [r2, #8]
 800c2f6:	ed93 7a00 	vldr	s14, [r3]
 800c2fa:	6882      	ldr	r2, [r0, #8]
 800c2fc:	b184      	cbz	r4, 800c320 <forward_relu+0x88>
 800c2fe:	68cf      	ldr	r7, [r1, #12]
 800c300:	462b      	mov	r3, r5
 800c302:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800c306:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800c30a:	42a7      	cmp	r7, r4
 800c30c:	fb01 f303 	mul.w	r3, r1, r3
 800c310:	d1f9      	bne.n	800c306 <forward_relu+0x6e>
 800c312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c316:	3b01      	subs	r3, #1
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	18d2      	adds	r2, r2, r3
 800c31c:	441e      	add	r6, r3
 800c31e:	d23f      	bcs.n	800c3a0 <forward_relu+0x108>
 800c320:	1d13      	adds	r3, r2, #4
 800c322:	2500      	movs	r5, #0
 800c324:	1d32      	adds	r2, r6, #4
 800c326:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c32a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c332:	f1a3 0104 	sub.w	r1, r3, #4
 800c336:	d835      	bhi.n	800c3a4 <forward_relu+0x10c>
 800c338:	ed62 7a01 	vstmdb	r2!, {s15}
 800c33c:	6884      	ldr	r4, [r0, #8]
 800c33e:	3b08      	subs	r3, #8
 800c340:	429c      	cmp	r4, r3
 800c342:	d82d      	bhi.n	800c3a0 <forward_relu+0x108>
 800c344:	460b      	mov	r3, r1
 800c346:	e7ee      	b.n	800c326 <forward_relu+0x8e>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	698d      	ldr	r5, [r1, #24]
 800c34c:	6898      	ldr	r0, [r3, #8]
 800c34e:	68ab      	ldr	r3, [r5, #8]
 800c350:	b184      	cbz	r4, 800c374 <forward_relu+0xdc>
 800c352:	68ce      	ldr	r6, [r1, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c35a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800c35e:	42a6      	cmp	r6, r4
 800c360:	fb01 f202 	mul.w	r2, r1, r2
 800c364:	d1f9      	bne.n	800c35a <forward_relu+0xc2>
 800c366:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c36a:	3a01      	subs	r2, #1
 800c36c:	0092      	lsls	r2, r2, #2
 800c36e:	189b      	adds	r3, r3, r2
 800c370:	4410      	add	r0, r2
 800c372:	d215      	bcs.n	800c3a0 <forward_relu+0x108>
 800c374:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c3b8 <forward_relu+0x120>
 800c378:	3304      	adds	r3, #4
 800c37a:	1d01      	adds	r1, r0, #4
 800c37c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c388:	bfb8      	it	lt
 800c38a:	eef0 7a47 	vmovlt.f32	s15, s14
 800c38e:	ed61 7a01 	vstmdb	r1!, {s15}
 800c392:	68a8      	ldr	r0, [r5, #8]
 800c394:	f1a3 0208 	sub.w	r2, r3, #8
 800c398:	4290      	cmp	r0, r2
 800c39a:	f1a3 0304 	sub.w	r3, r3, #4
 800c39e:	d9ed      	bls.n	800c37c <forward_relu+0xe4>
 800c3a0:	bcf0      	pop	{r4, r5, r6, r7}
 800c3a2:	4770      	bx	lr
 800c3a4:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c3a8:	6884      	ldr	r4, [r0, #8]
 800c3aa:	3b08      	subs	r3, #8
 800c3ac:	429c      	cmp	r4, r3
 800c3ae:	d8f7      	bhi.n	800c3a0 <forward_relu+0x108>
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	e7b8      	b.n	800c326 <forward_relu+0x8e>
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	e792      	b.n	800c2de <forward_relu+0x46>
 800c3b8:	00000000 	.word	0x00000000

0800c3bc <forward_sm>:
 800c3bc:	6982      	ldr	r2, [r0, #24]
 800c3be:	8813      	ldrh	r3, [r2, #0]
 800c3c0:	b32b      	cbz	r3, 800c40e <forward_sm+0x52>
 800c3c2:	6852      	ldr	r2, [r2, #4]
 800c3c4:	6851      	ldr	r1, [r2, #4]
 800c3c6:	b101      	cbz	r1, 800c3ca <forward_sm+0xe>
 800c3c8:	6809      	ldr	r1, [r1, #0]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d91c      	bls.n	800c408 <forward_sm+0x4c>
 800c3ce:	6913      	ldr	r3, [r2, #16]
 800c3d0:	b1c3      	cbz	r3, 800c404 <forward_sm+0x48>
 800c3d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	688c      	ldr	r4, [r1, #8]
 800c3d8:	68c3      	ldr	r3, [r0, #12]
 800c3da:	68ce      	ldr	r6, [r1, #12]
 800c3dc:	685f      	ldr	r7, [r3, #4]
 800c3de:	6873      	ldr	r3, [r6, #4]
 800c3e0:	0a24      	lsrs	r4, r4, #8
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	d015      	beq.n	800c412 <forward_sm+0x56>
 800c3e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3f0:	42a6      	cmp	r6, r4
 800c3f2:	fb05 f202 	mul.w	r2, r5, r2
 800c3f6:	d1f9      	bne.n	800c3ec <forward_sm+0x30>
 800c3f8:	e9cd 3700 	strd	r3, r7, [sp]
 800c3fc:	f7ff fe4e 	bl	800c09c <nl_func_sm_array_f32>
 800c400:	b003      	add	sp, #12
 800c402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	deff      	udf	#255	; 0xff
 800c408:	2300      	movs	r3, #0
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	deff      	udf	#255	; 0xff
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	deff      	udf	#255	; 0xff
 800c412:	2201      	movs	r2, #1
 800c414:	e9cd 3700 	strd	r3, r7, [sp]
 800c418:	f7ff fe40 	bl	800c09c <nl_func_sm_array_f32>
 800c41c:	b003      	add	sp, #12
 800c41e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c420 <forward_bn>:
 800c420:	6983      	ldr	r3, [r0, #24]
 800c422:	8819      	ldrh	r1, [r3, #0]
 800c424:	2900      	cmp	r1, #0
 800c426:	d062      	beq.n	800c4ee <forward_bn+0xce>
 800c428:	6858      	ldr	r0, [r3, #4]
 800c42a:	6843      	ldr	r3, [r0, #4]
 800c42c:	b103      	cbz	r3, 800c430 <forward_bn+0x10>
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2901      	cmp	r1, #1
 800c432:	d959      	bls.n	800c4e8 <forward_bn+0xc8>
 800c434:	6902      	ldr	r2, [r0, #16]
 800c436:	b102      	cbz	r2, 800c43a <forward_bn+0x1a>
 800c438:	6812      	ldr	r2, [r2, #0]
 800c43a:	2902      	cmp	r1, #2
 800c43c:	d059      	beq.n	800c4f2 <forward_bn+0xd2>
 800c43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c442:	69c1      	ldr	r1, [r0, #28]
 800c444:	2900      	cmp	r1, #0
 800c446:	f000 8097 	beq.w	800c578 <forward_bn+0x158>
 800c44a:	680c      	ldr	r4, [r1, #0]
 800c44c:	f110 0f18 	cmn.w	r0, #24
 800c450:	d052      	beq.n	800c4f8 <forward_bn+0xd8>
 800c452:	8b00      	ldrh	r0, [r0, #24]
 800c454:	2801      	cmp	r0, #1
 800c456:	d94f      	bls.n	800c4f8 <forward_bn+0xd8>
 800c458:	2900      	cmp	r1, #0
 800c45a:	d04d      	beq.n	800c4f8 <forward_bn+0xd8>
 800c45c:	6996      	ldr	r6, [r2, #24]
 800c45e:	68d8      	ldr	r0, [r3, #12]
 800c460:	699a      	ldr	r2, [r3, #24]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	69a5      	ldr	r5, [r4, #24]
 800c466:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800c46a:	68b4      	ldr	r4, [r6, #8]
 800c46c:	6892      	ldr	r2, [r2, #8]
 800c46e:	68ae      	ldr	r6, [r5, #8]
 800c470:	6845      	ldr	r5, [r0, #4]
 800c472:	0a1b      	lsrs	r3, r3, #8
 800c474:	d075      	beq.n	800c562 <forward_bn+0x142>
 800c476:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c47a:	2701      	movs	r7, #1
 800c47c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c480:	4298      	cmp	r0, r3
 800c482:	fb01 f707 	mul.w	r7, r1, r7
 800c486:	d1f9      	bne.n	800c47c <forward_bn+0x5c>
 800c488:	f1bc 0f00 	cmp.w	ip, #0
 800c48c:	d042      	beq.n	800c514 <forward_bn+0xf4>
 800c48e:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c492:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800c496:	b32f      	cbz	r7, 800c4e4 <forward_bn+0xc4>
 800c498:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800c49c:	eba4 0e08 	sub.w	lr, r4, r8
 800c4a0:	ebc5 7a85 	rsb	sl, r5, r5, lsl #30
 800c4a4:	ebae 0e02 	sub.w	lr, lr, r2
 800c4a8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c4ac:	4442      	add	r2, r8
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	eb05 0c03 	add.w	ip, r5, r3
 800c4b4:	459c      	cmp	ip, r3
 800c4b6:	d911      	bls.n	800c4dc <forward_bn+0xbc>
 800c4b8:	eb0a 0302 	add.w	r3, sl, r2
 800c4bc:	4634      	mov	r4, r6
 800c4be:	4648      	mov	r0, r9
 800c4c0:	eb0e 0102 	add.w	r1, lr, r2
 800c4c4:	ecf3 6a01 	vldmia	r3!, {s13}
 800c4c8:	ecb4 7a01 	vldmia	r4!, {s14}
 800c4cc:	ecf0 7a01 	vldmia	r0!, {s15}
 800c4d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	ece1 7a01 	vstmia	r1!, {s15}
 800c4da:	d1f3      	bne.n	800c4c4 <forward_bn+0xa4>
 800c4dc:	45bc      	cmp	ip, r7
 800c4de:	4663      	mov	r3, ip
 800c4e0:	4442      	add	r2, r8
 800c4e2:	d3e5      	bcc.n	800c4b0 <forward_bn+0x90>
 800c4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	deff      	udf	#255	; 0xff
 800c4ee:	684b      	ldr	r3, [r1, #4]
 800c4f0:	deff      	udf	#255	; 0xff
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	deff      	udf	#255	; 0xff
 800c4f8:	6995      	ldr	r5, [r2, #24]
 800c4fa:	68d8      	ldr	r0, [r3, #12]
 800c4fc:	699a      	ldr	r2, [r3, #24]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	69a1      	ldr	r1, [r4, #24]
 800c502:	6892      	ldr	r2, [r2, #8]
 800c504:	68ac      	ldr	r4, [r5, #8]
 800c506:	688e      	ldr	r6, [r1, #8]
 800c508:	6845      	ldr	r5, [r0, #4]
 800c50a:	0a1b      	lsrs	r3, r3, #8
 800c50c:	d032      	beq.n	800c574 <forward_bn+0x154>
 800c50e:	f04f 0c00 	mov.w	ip, #0
 800c512:	e7b0      	b.n	800c476 <forward_bn+0x56>
 800c514:	2f00      	cmp	r7, #0
 800c516:	d0e5      	beq.n	800c4e4 <forward_bn+0xc4>
 800c518:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800c51c:	eba4 0408 	sub.w	r4, r4, r8
 800c520:	ebc5 7e85 	rsb	lr, r5, r5, lsl #30
 800c524:	eba4 0c02 	sub.w	ip, r4, r2
 800c528:	eb02 0008 	add.w	r0, r2, r8
 800c52c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800c530:	2300      	movs	r3, #0
 800c532:	18ec      	adds	r4, r5, r3
 800c534:	429c      	cmp	r4, r3
 800c536:	d90e      	bls.n	800c556 <forward_bn+0x136>
 800c538:	eb0e 0300 	add.w	r3, lr, r0
 800c53c:	4631      	mov	r1, r6
 800c53e:	eb00 020c 	add.w	r2, r0, ip
 800c542:	ecf3 7a01 	vldmia	r3!, {s15}
 800c546:	ecb1 7a01 	vldmia	r1!, {s14}
 800c54a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c54e:	4298      	cmp	r0, r3
 800c550:	ece2 7a01 	vstmia	r2!, {s15}
 800c554:	d1f5      	bne.n	800c542 <forward_bn+0x122>
 800c556:	42bc      	cmp	r4, r7
 800c558:	4623      	mov	r3, r4
 800c55a:	4440      	add	r0, r8
 800c55c:	d3e9      	bcc.n	800c532 <forward_bn+0x112>
 800c55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c562:	f1bc 0f00 	cmp.w	ip, #0
 800c566:	d005      	beq.n	800c574 <forward_bn+0x154>
 800c568:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c56c:	2701      	movs	r7, #1
 800c56e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800c572:	e791      	b.n	800c498 <forward_bn+0x78>
 800c574:	2701      	movs	r7, #1
 800c576:	e7cf      	b.n	800c518 <forward_bn+0xf8>
 800c578:	460c      	mov	r4, r1
 800c57a:	e767      	b.n	800c44c <forward_bn+0x2c>

0800c57c <ai_check_custom_types>:
 800c57c:	4b13      	ldr	r3, [pc, #76]	; (800c5cc <ai_check_custom_types+0x50>)
 800c57e:	b082      	sub	sp, #8
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	b118      	cbz	r0, 800c58e <ai_check_custom_types+0x12>
 800c586:	7803      	ldrb	r3, [r0, #0]
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d002      	beq.n	800c592 <ai_check_custom_types+0x16>
 800c58c:	2000      	movs	r0, #0
 800c58e:	b002      	add	sp, #8
 800c590:	4770      	bx	lr
 800c592:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c596:	4293      	cmp	r3, r2
 800c598:	d004      	beq.n	800c5a4 <ai_check_custom_types+0x28>
 800c59a:	2001      	movs	r0, #1
 800c59c:	f080 0001 	eor.w	r0, r0, #1
 800c5a0:	b002      	add	sp, #8
 800c5a2:	4770      	bx	lr
 800c5a4:	7842      	ldrb	r2, [r0, #1]
 800c5a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	f100 0001 	add.w	r0, r0, #1
 800c5b0:	d1f3      	bne.n	800c59a <ai_check_custom_types+0x1e>
 800c5b2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c5b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d1ed      	bne.n	800c59a <ai_check_custom_types+0x1e>
 800c5be:	7842      	ldrb	r2, [r0, #1]
 800c5c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d1e8      	bne.n	800c59a <ai_check_custom_types+0x1e>
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	e7e7      	b.n	800c59c <ai_check_custom_types+0x20>
 800c5cc:	08010dec 	.word	0x08010dec

0800c5d0 <ai_layers_init_all>:
 800c5d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c5d2:	b17a      	cbz	r2, 800c5f4 <ai_layers_init_all+0x24>
 800c5d4:	6913      	ldr	r3, [r2, #16]
 800c5d6:	60d0      	str	r0, [r2, #12]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	f04f 0201 	mov.w	r2, #1
 800c5de:	d009      	beq.n	800c5f4 <ai_layers_init_all+0x24>
 800c5e0:	b143      	cbz	r3, 800c5f4 <ai_layers_init_all+0x24>
 800c5e2:	6919      	ldr	r1, [r3, #16]
 800c5e4:	60d8      	str	r0, [r3, #12]
 800c5e6:	4299      	cmp	r1, r3
 800c5e8:	f102 0201 	add.w	r2, r2, #1
 800c5ec:	d002      	beq.n	800c5f4 <ai_layers_init_all+0x24>
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1f6      	bne.n	800c5e2 <ai_layers_init_all+0x12>
 800c5f4:	4610      	mov	r0, r2
 800c5f6:	4770      	bx	lr

0800c5f8 <ai_layers_post_init_all>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c5fc:	b18c      	cbz	r4, 800c622 <ai_layers_post_init_all+0x2a>
 800c5fe:	2500      	movs	r5, #0
 800c600:	6863      	ldr	r3, [r4, #4]
 800c602:	f013 0f01 	tst.w	r3, #1
 800c606:	4620      	mov	r0, r4
 800c608:	d003      	beq.n	800c612 <ai_layers_post_init_all+0x1a>
 800c60a:	6a23      	ldr	r3, [r4, #32]
 800c60c:	b10b      	cbz	r3, 800c612 <ai_layers_post_init_all+0x1a>
 800c60e:	4798      	blx	r3
 800c610:	3501      	adds	r5, #1
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	42a3      	cmp	r3, r4
 800c616:	d002      	beq.n	800c61e <ai_layers_post_init_all+0x26>
 800c618:	461c      	mov	r4, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1f0      	bne.n	800c600 <ai_layers_post_init_all+0x8>
 800c61e:	4628      	mov	r0, r5
 800c620:	bd38      	pop	{r3, r4, r5, pc}
 800c622:	4625      	mov	r5, r4
 800c624:	e7fb      	b.n	800c61e <ai_layers_post_init_all+0x26>
 800c626:	bf00      	nop

0800c628 <ai_layers_forward_all>:
 800c628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800c62e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c630:	4604      	mov	r4, r0
 800c632:	2f00      	cmp	r7, #0
 800c634:	d02c      	beq.n	800c690 <ai_layers_forward_all+0x68>
 800c636:	2d00      	cmp	r5, #0
 800c638:	d03f      	beq.n	800c6ba <ai_layers_forward_all+0x92>
 800c63a:	6385      	str	r5, [r0, #56]	; 0x38
 800c63c:	4629      	mov	r1, r5
 800c63e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c640:	2001      	movs	r0, #1
 800c642:	47b8      	blx	r7
 800c644:	2600      	movs	r6, #0
 800c646:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c648:	46b0      	mov	r8, r6
 800c64a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c64c:	2002      	movs	r0, #2
 800c64e:	47b8      	blx	r7
 800c650:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800c652:	696b      	ldr	r3, [r5, #20]
 800c654:	4628      	mov	r0, r5
 800c656:	4798      	blx	r3
 800c658:	692b      	ldr	r3, [r5, #16]
 800c65a:	429d      	cmp	r5, r3
 800c65c:	f04f 0003 	mov.w	r0, #3
 800c660:	4619      	mov	r1, r3
 800c662:	d009      	beq.n	800c678 <ai_layers_forward_all+0x50>
 800c664:	63a3      	str	r3, [r4, #56]	; 0x38
 800c666:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c668:	47b8      	blx	r7
 800c66a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c66c:	3601      	adds	r6, #1
 800c66e:	2900      	cmp	r1, #0
 800c670:	d1eb      	bne.n	800c64a <ai_layers_forward_all+0x22>
 800c672:	4630      	mov	r0, r6
 800c674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c678:	2100      	movs	r1, #0
 800c67a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800c67e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c680:	47b8      	blx	r7
 800c682:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c684:	3601      	adds	r6, #1
 800c686:	2900      	cmp	r1, #0
 800c688:	d1df      	bne.n	800c64a <ai_layers_forward_all+0x22>
 800c68a:	4630      	mov	r0, r6
 800c68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c690:	b19d      	cbz	r5, 800c6ba <ai_layers_forward_all+0x92>
 800c692:	6385      	str	r5, [r0, #56]	; 0x38
 800c694:	463e      	mov	r6, r7
 800c696:	696b      	ldr	r3, [r5, #20]
 800c698:	4628      	mov	r0, r5
 800c69a:	4798      	blx	r3
 800c69c:	692b      	ldr	r3, [r5, #16]
 800c69e:	42ab      	cmp	r3, r5
 800c6a0:	f106 0601 	add.w	r6, r6, #1
 800c6a4:	d004      	beq.n	800c6b0 <ai_layers_forward_all+0x88>
 800c6a6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c6a8:	461d      	mov	r5, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f3      	bne.n	800c696 <ai_layers_forward_all+0x6e>
 800c6ae:	e7e0      	b.n	800c672 <ai_layers_forward_all+0x4a>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ba:	462e      	mov	r6, r5
 800c6bc:	4630      	mov	r0, r6
 800c6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c2:	bf00      	nop

0800c6c4 <ai_layers_destroy_all>:
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c6c8:	b18c      	cbz	r4, 800c6ee <ai_layers_destroy_all+0x2a>
 800c6ca:	2500      	movs	r5, #0
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	f013 0f04 	tst.w	r3, #4
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	d003      	beq.n	800c6de <ai_layers_destroy_all+0x1a>
 800c6d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c6d8:	b10b      	cbz	r3, 800c6de <ai_layers_destroy_all+0x1a>
 800c6da:	4798      	blx	r3
 800c6dc:	3501      	adds	r5, #1
 800c6de:	6923      	ldr	r3, [r4, #16]
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d002      	beq.n	800c6ea <ai_layers_destroy_all+0x26>
 800c6e4:	461c      	mov	r4, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1f0      	bne.n	800c6cc <ai_layers_destroy_all+0x8>
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	bd38      	pop	{r3, r4, r5, pc}
 800c6ee:	4625      	mov	r5, r4
 800c6f0:	e7fb      	b.n	800c6ea <ai_layers_destroy_all+0x26>
 800c6f2:	bf00      	nop

0800c6f4 <ai_version_get>:
 800c6f4:	0212      	lsls	r2, r2, #8
 800c6f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c6fa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c6fe:	4770      	bx	lr

0800c700 <get_tensor_byte_size>:
 800c700:	6983      	ldr	r3, [r0, #24]
 800c702:	68c1      	ldr	r1, [r0, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6940      	ldr	r0, [r0, #20]
 800c708:	4a06      	ldr	r2, [pc, #24]	; (800c724 <get_tensor_byte_size+0x24>)
 800c70a:	68c9      	ldr	r1, [r1, #12]
 800c70c:	68c0      	ldr	r0, [r0, #12]
 800c70e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800c712:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c716:	fb00 f001 	mul.w	r0, r0, r1
 800c71a:	4293      	cmp	r3, r2
 800c71c:	bf04      	itt	eq
 800c71e:	3007      	addeq	r0, #7
 800c720:	08c0      	lsreq	r0, r0, #3
 800c722:	4770      	bx	lr
 800c724:	000400c0 	.word	0x000400c0

0800c728 <ai_array_to_buffer_fmt>:
 800c728:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d036      	beq.n	800c79e <ai_array_to_buffer_fmt+0x76>
 800c730:	4a21      	ldr	r2, [pc, #132]	; (800c7b8 <ai_array_to_buffer_fmt+0x90>)
 800c732:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800c736:	4293      	cmp	r3, r2
 800c738:	d00f      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c73a:	dd12      	ble.n	800c762 <ai_array_to_buffer_fmt+0x3a>
 800c73c:	4a1f      	ldr	r2, [pc, #124]	; (800c7bc <ai_array_to_buffer_fmt+0x94>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d00b      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c742:	dd1e      	ble.n	800c782 <ai_array_to_buffer_fmt+0x5a>
 800c744:	4a1e      	ldr	r2, [pc, #120]	; (800c7c0 <ai_array_to_buffer_fmt+0x98>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d007      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c74a:	dd30      	ble.n	800c7ae <ai_array_to_buffer_fmt+0x86>
 800c74c:	4a1d      	ldr	r2, [pc, #116]	; (800c7c4 <ai_array_to_buffer_fmt+0x9c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d003      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c752:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800c756:	4293      	cmp	r3, r2
 800c758:	d11f      	bne.n	800c79a <ai_array_to_buffer_fmt+0x72>
 800c75a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c75e:	4318      	orrs	r0, r3
 800c760:	4770      	bx	lr
 800c762:	4a19      	ldr	r2, [pc, #100]	; (800c7c8 <ai_array_to_buffer_fmt+0xa0>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d0f8      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c768:	dd0b      	ble.n	800c782 <ai_array_to_buffer_fmt+0x5a>
 800c76a:	4a18      	ldr	r2, [pc, #96]	; (800c7cc <ai_array_to_buffer_fmt+0xa4>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d0f4      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c770:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800c774:	4293      	cmp	r3, r2
 800c776:	d0f0      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c778:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d10c      	bne.n	800c79a <ai_array_to_buffer_fmt+0x72>
 800c780:	e7eb      	b.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c782:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800c786:	4293      	cmp	r3, r2
 800c788:	d0e7      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c78a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800c78e:	4293      	cmp	r3, r2
 800c790:	d0e3      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c792:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800c796:	4293      	cmp	r3, r2
 800c798:	d0df      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c79a:	2340      	movs	r3, #64	; 0x40
 800c79c:	e7dd      	b.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c79e:	4b0c      	ldr	r3, [pc, #48]	; (800c7d0 <ai_array_to_buffer_fmt+0xa8>)
 800c7a0:	4003      	ands	r3, r0
 800c7a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c7aa:	4318      	orrs	r0, r3
 800c7ac:	4770      	bx	lr
 800c7ae:	3a0f      	subs	r2, #15
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d0d2      	beq.n	800c75a <ai_array_to_buffer_fmt+0x32>
 800c7b4:	e7f1      	b.n	800c79a <ai_array_to_buffer_fmt+0x72>
 800c7b6:	bf00      	nop
 800c7b8:	00060440 	.word	0x00060440
 800c7bc:	00840447 	.word	0x00840447
 800c7c0:	0084084f 	.word	0x0084084f
 800c7c4:	00841040 	.word	0x00841040
 800c7c8:	00040447 	.word	0x00040447
 800c7cc:	0004084f 	.word	0x0004084f
 800c7d0:	00803fff 	.word	0x00803fff

0800c7d4 <ai_array_get_byte_size>:
 800c7d4:	b1c1      	cbz	r1, 800c808 <ai_array_get_byte_size+0x34>
 800c7d6:	11c3      	asrs	r3, r0, #7
 800c7d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7dc:	fb01 f102 	mul.w	r1, r1, r2
 800c7e0:	3107      	adds	r1, #7
 800c7e2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800c7e6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800c7ea:	f021 0107 	bic.w	r1, r1, #7
 800c7ee:	2804      	cmp	r0, #4
 800c7f0:	fa21 f102 	lsr.w	r1, r1, r2
 800c7f4:	d00a      	beq.n	800c80c <ai_array_get_byte_size+0x38>
 800c7f6:	2808      	cmp	r0, #8
 800c7f8:	d103      	bne.n	800c802 <ai_array_get_byte_size+0x2e>
 800c7fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7fe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c802:	3107      	adds	r1, #7
 800c804:	08c8      	lsrs	r0, r1, #3
 800c806:	4770      	bx	lr
 800c808:	4608      	mov	r0, r1
 800c80a:	4770      	bx	lr
 800c80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c810:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800c814:	3107      	adds	r1, #7
 800c816:	08c8      	lsrs	r0, r1, #3
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop

0800c81c <ai_array_get_data_byte_size>:
 800c81c:	b161      	cbz	r1, 800c838 <ai_array_get_data_byte_size+0x1c>
 800c81e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c822:	fb01 f103 	mul.w	r1, r1, r3
 800c826:	3107      	adds	r1, #7
 800c828:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800c82c:	f021 0107 	bic.w	r1, r1, #7
 800c830:	40c1      	lsrs	r1, r0
 800c832:	3107      	adds	r1, #7
 800c834:	08c8      	lsrs	r0, r1, #3
 800c836:	4770      	bx	lr
 800c838:	4608      	mov	r0, r1
 800c83a:	4770      	bx	lr

0800c83c <arm_copy_q7>:
 800c83c:	0893      	lsrs	r3, r2, #2
 800c83e:	d050      	beq.n	800c8e2 <arm_copy_q7+0xa6>
 800c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	f101 0408 	add.w	r4, r1, #8
 800c848:	f100 0708 	add.w	r7, r0, #8
 800c84c:	4625      	mov	r5, r4
 800c84e:	42b9      	cmp	r1, r7
 800c850:	bf38      	it	cc
 800c852:	42a8      	cmpcc	r0, r5
 800c854:	ea41 0600 	orr.w	r6, r1, r0
 800c858:	463c      	mov	r4, r7
 800c85a:	bf2c      	ite	cs
 800c85c:	2401      	movcs	r4, #1
 800c85e:	2400      	movcc	r4, #0
 800c860:	f016 0f07 	tst.w	r6, #7
 800c864:	bf18      	it	ne
 800c866:	2400      	movne	r4, #0
 800c868:	b384      	cbz	r4, 800c8cc <arm_copy_q7+0x90>
 800c86a:	1e5c      	subs	r4, r3, #1
 800c86c:	2c0b      	cmp	r4, #11
 800c86e:	d92d      	bls.n	800c8cc <arm_copy_q7+0x90>
 800c870:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
 800c874:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 800c878:	eb01 080c 	add.w	r8, r1, ip
 800c87c:	f1a0 0508 	sub.w	r5, r0, #8
 800c880:	460c      	mov	r4, r1
 800c882:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 800c886:	e8e4 6702 	strd	r6, r7, [r4], #8
 800c88a:	4544      	cmp	r4, r8
 800c88c:	d1f9      	bne.n	800c882 <arm_copy_q7+0x46>
 800c88e:	eb00 040c 	add.w	r4, r0, ip
 800c892:	ebb3 0f4e 	cmp.w	r3, lr, lsl #1
 800c896:	bf1b      	ittet	ne
 800c898:	6824      	ldrne	r4, [r4, #0]
 800c89a:	f841 403e 	strne.w	r4, [r1, lr, lsl #3]
 800c89e:	ea4f 03ce 	moveq.w	r3, lr, lsl #3
 800c8a2:	009b      	lslne	r3, r3, #2
 800c8a4:	f012 0203 	ands.w	r2, r2, #3
 800c8a8:	4418      	add	r0, r3
 800c8aa:	4419      	add	r1, r3
 800c8ac:	d00c      	beq.n	800c8c8 <arm_copy_q7+0x8c>
 800c8ae:	f990 3000 	ldrsb.w	r3, [r0]
 800c8b2:	700b      	strb	r3, [r1, #0]
 800c8b4:	3a01      	subs	r2, #1
 800c8b6:	d007      	beq.n	800c8c8 <arm_copy_q7+0x8c>
 800c8b8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c8bc:	704b      	strb	r3, [r1, #1]
 800c8be:	2a01      	cmp	r2, #1
 800c8c0:	bf1c      	itt	ne
 800c8c2:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800c8c6:	708b      	strbne	r3, [r1, #2]
 800c8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	18c7      	adds	r7, r0, r3
 800c8d0:	460d      	mov	r5, r1
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	f854 6b04 	ldr.w	r6, [r4], #4
 800c8d8:	f845 6b04 	str.w	r6, [r5], #4
 800c8dc:	42bc      	cmp	r4, r7
 800c8de:	d1f9      	bne.n	800c8d4 <arm_copy_q7+0x98>
 800c8e0:	e7e0      	b.n	800c8a4 <arm_copy_q7+0x68>
 800c8e2:	f012 0203 	ands.w	r2, r2, #3
 800c8e6:	d00d      	beq.n	800c904 <arm_copy_q7+0xc8>
 800c8e8:	f990 3000 	ldrsb.w	r3, [r0]
 800c8ec:	700b      	strb	r3, [r1, #0]
 800c8ee:	3a01      	subs	r2, #1
 800c8f0:	d008      	beq.n	800c904 <arm_copy_q7+0xc8>
 800c8f2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c8f6:	704b      	strb	r3, [r1, #1]
 800c8f8:	2a01      	cmp	r2, #1
 800c8fa:	d003      	beq.n	800c904 <arm_copy_q7+0xc8>
 800c8fc:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800c900:	708b      	strb	r3, [r1, #2]
 800c902:	4770      	bx	lr
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop

0800c908 <arm_rfft_32_fast_init_f32>:
 800c908:	b178      	cbz	r0, 800c92a <arm_rfft_32_fast_init_f32+0x22>
 800c90a:	b430      	push	{r4, r5}
 800c90c:	4908      	ldr	r1, [pc, #32]	; (800c930 <arm_rfft_32_fast_init_f32+0x28>)
 800c90e:	4a09      	ldr	r2, [pc, #36]	; (800c934 <arm_rfft_32_fast_init_f32+0x2c>)
 800c910:	2310      	movs	r3, #16
 800c912:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c916:	8003      	strh	r3, [r0, #0]
 800c918:	2520      	movs	r5, #32
 800c91a:	2414      	movs	r4, #20
 800c91c:	4b06      	ldr	r3, [pc, #24]	; (800c938 <arm_rfft_32_fast_init_f32+0x30>)
 800c91e:	8205      	strh	r5, [r0, #16]
 800c920:	8184      	strh	r4, [r0, #12]
 800c922:	6143      	str	r3, [r0, #20]
 800c924:	bc30      	pop	{r4, r5}
 800c926:	2000      	movs	r0, #0
 800c928:	4770      	bx	lr
 800c92a:	f04f 30ff 	mov.w	r0, #4294967295
 800c92e:	4770      	bx	lr
 800c930:	080559e4 	.word	0x080559e4
 800c934:	0805a31c 	.word	0x0805a31c
 800c938:	0806309c 	.word	0x0806309c

0800c93c <arm_rfft_64_fast_init_f32>:
 800c93c:	b178      	cbz	r0, 800c95e <arm_rfft_64_fast_init_f32+0x22>
 800c93e:	b430      	push	{r4, r5}
 800c940:	4908      	ldr	r1, [pc, #32]	; (800c964 <arm_rfft_64_fast_init_f32+0x28>)
 800c942:	4a09      	ldr	r2, [pc, #36]	; (800c968 <arm_rfft_64_fast_init_f32+0x2c>)
 800c944:	2320      	movs	r3, #32
 800c946:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c94a:	8003      	strh	r3, [r0, #0]
 800c94c:	2540      	movs	r5, #64	; 0x40
 800c94e:	2430      	movs	r4, #48	; 0x30
 800c950:	4b06      	ldr	r3, [pc, #24]	; (800c96c <arm_rfft_64_fast_init_f32+0x30>)
 800c952:	8205      	strh	r5, [r0, #16]
 800c954:	8184      	strh	r4, [r0, #12]
 800c956:	6143      	str	r3, [r0, #20]
 800c958:	bc30      	pop	{r4, r5}
 800c95a:	2000      	movs	r0, #0
 800c95c:	4770      	bx	lr
 800c95e:	f04f 30ff 	mov.w	r0, #4294967295
 800c962:	4770      	bx	lr
 800c964:	08057b3c 	.word	0x08057b3c
 800c968:	0805eb9c 	.word	0x0805eb9c
 800c96c:	0806791c 	.word	0x0806791c

0800c970 <arm_rfft_256_fast_init_f32>:
 800c970:	b180      	cbz	r0, 800c994 <arm_rfft_256_fast_init_f32+0x24>
 800c972:	b430      	push	{r4, r5}
 800c974:	4909      	ldr	r1, [pc, #36]	; (800c99c <arm_rfft_256_fast_init_f32+0x2c>)
 800c976:	4a0a      	ldr	r2, [pc, #40]	; (800c9a0 <arm_rfft_256_fast_init_f32+0x30>)
 800c978:	2380      	movs	r3, #128	; 0x80
 800c97a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c97e:	8003      	strh	r3, [r0, #0]
 800c980:	f44f 7580 	mov.w	r5, #256	; 0x100
 800c984:	24d0      	movs	r4, #208	; 0xd0
 800c986:	4b07      	ldr	r3, [pc, #28]	; (800c9a4 <arm_rfft_256_fast_init_f32+0x34>)
 800c988:	8205      	strh	r5, [r0, #16]
 800c98a:	8184      	strh	r4, [r0, #12]
 800c98c:	6143      	str	r3, [r0, #20]
 800c98e:	bc30      	pop	{r4, r5}
 800c990:	2000      	movs	r0, #0
 800c992:	4770      	bx	lr
 800c994:	f04f 30ff 	mov.w	r0, #4294967295
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	08055844 	.word	0x08055844
 800c9a0:	08059f1c 	.word	0x08059f1c
 800c9a4:	08062c9c 	.word	0x08062c9c

0800c9a8 <arm_rfft_512_fast_init_f32>:
 800c9a8:	b190      	cbz	r0, 800c9d0 <arm_rfft_512_fast_init_f32+0x28>
 800c9aa:	b430      	push	{r4, r5}
 800c9ac:	490a      	ldr	r1, [pc, #40]	; (800c9d8 <arm_rfft_512_fast_init_f32+0x30>)
 800c9ae:	4a0b      	ldr	r2, [pc, #44]	; (800c9dc <arm_rfft_512_fast_init_f32+0x34>)
 800c9b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9b4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c9b8:	8003      	strh	r3, [r0, #0]
 800c9ba:	f44f 7500 	mov.w	r5, #512	; 0x200
 800c9be:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800c9c2:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <arm_rfft_512_fast_init_f32+0x38>)
 800c9c4:	8205      	strh	r5, [r0, #16]
 800c9c6:	8184      	strh	r4, [r0, #12]
 800c9c8:	6143      	str	r3, [r0, #20]
 800c9ca:	bc30      	pop	{r4, r5}
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	4770      	bx	lr
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	080577cc 	.word	0x080577cc
 800c9dc:	0805e39c 	.word	0x0805e39c
 800c9e0:	0806711c 	.word	0x0806711c

0800c9e4 <arm_rfft_1024_fast_init_f32>:
 800c9e4:	b190      	cbz	r0, 800ca0c <arm_rfft_1024_fast_init_f32+0x28>
 800c9e6:	b430      	push	{r4, r5}
 800c9e8:	490a      	ldr	r1, [pc, #40]	; (800ca14 <arm_rfft_1024_fast_init_f32+0x30>)
 800c9ea:	4a0b      	ldr	r2, [pc, #44]	; (800ca18 <arm_rfft_1024_fast_init_f32+0x34>)
 800c9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9f0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c9f4:	8003      	strh	r3, [r0, #0]
 800c9f6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800c9fa:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800c9fe:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <arm_rfft_1024_fast_init_f32+0x38>)
 800ca00:	8205      	strh	r5, [r0, #16]
 800ca02:	8184      	strh	r4, [r0, #12]
 800ca04:	6143      	str	r3, [r0, #20]
 800ca06:	bc30      	pop	{r4, r5}
 800ca08:	2000      	movs	r0, #0
 800ca0a:	4770      	bx	lr
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	08057b9c 	.word	0x08057b9c
 800ca18:	0805ec9c 	.word	0x0805ec9c
 800ca1c:	0805fc9c 	.word	0x0805fc9c

0800ca20 <arm_rfft_2048_fast_init_f32>:
 800ca20:	b190      	cbz	r0, 800ca48 <arm_rfft_2048_fast_init_f32+0x28>
 800ca22:	b430      	push	{r4, r5}
 800ca24:	490a      	ldr	r1, [pc, #40]	; (800ca50 <arm_rfft_2048_fast_init_f32+0x30>)
 800ca26:	4a0b      	ldr	r2, [pc, #44]	; (800ca54 <arm_rfft_2048_fast_init_f32+0x34>)
 800ca28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca2c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ca30:	8003      	strh	r3, [r0, #0]
 800ca32:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800ca36:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800ca3a:	4b07      	ldr	r3, [pc, #28]	; (800ca58 <arm_rfft_2048_fast_init_f32+0x38>)
 800ca3c:	8205      	strh	r5, [r0, #16]
 800ca3e:	8184      	strh	r4, [r0, #12]
 800ca40:	6143      	str	r3, [r0, #20]
 800ca42:	bc30      	pop	{r4, r5}
 800ca44:	2000      	movs	r0, #0
 800ca46:	4770      	bx	lr
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	08054a34 	.word	0x08054a34
 800ca54:	08057f1c 	.word	0x08057f1c
 800ca58:	08060c9c 	.word	0x08060c9c

0800ca5c <arm_rfft_4096_fast_init_f32>:
 800ca5c:	b190      	cbz	r0, 800ca84 <arm_rfft_4096_fast_init_f32+0x28>
 800ca5e:	b430      	push	{r4, r5}
 800ca60:	490a      	ldr	r1, [pc, #40]	; (800ca8c <arm_rfft_4096_fast_init_f32+0x30>)
 800ca62:	4a0b      	ldr	r2, [pc, #44]	; (800ca90 <arm_rfft_4096_fast_init_f32+0x34>)
 800ca64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca68:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ca6c:	8003      	strh	r3, [r0, #0]
 800ca6e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800ca72:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800ca76:	4b07      	ldr	r3, [pc, #28]	; (800ca94 <arm_rfft_4096_fast_init_f32+0x38>)
 800ca78:	8205      	strh	r5, [r0, #16]
 800ca7a:	8184      	strh	r4, [r0, #12]
 800ca7c:	6143      	str	r3, [r0, #20]
 800ca7e:	bc30      	pop	{r4, r5}
 800ca80:	2000      	movs	r0, #0
 800ca82:	4770      	bx	lr
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	08055a0c 	.word	0x08055a0c
 800ca90:	0805a39c 	.word	0x0805a39c
 800ca94:	0806311c 	.word	0x0806311c

0800ca98 <arm_rfft_fast_init_f32>:
 800ca98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ca9c:	d01f      	beq.n	800cade <arm_rfft_fast_init_f32+0x46>
 800ca9e:	d90b      	bls.n	800cab8 <arm_rfft_fast_init_f32+0x20>
 800caa0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800caa4:	d019      	beq.n	800cada <arm_rfft_fast_init_f32+0x42>
 800caa6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800caaa:	d012      	beq.n	800cad2 <arm_rfft_fast_init_f32+0x3a>
 800caac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cab0:	d00d      	beq.n	800cace <arm_rfft_fast_init_f32+0x36>
 800cab2:	f04f 30ff 	mov.w	r0, #4294967295
 800cab6:	4770      	bx	lr
 800cab8:	2940      	cmp	r1, #64	; 0x40
 800caba:	d00c      	beq.n	800cad6 <arm_rfft_fast_init_f32+0x3e>
 800cabc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800cac0:	d003      	beq.n	800caca <arm_rfft_fast_init_f32+0x32>
 800cac2:	2920      	cmp	r1, #32
 800cac4:	d1f5      	bne.n	800cab2 <arm_rfft_fast_init_f32+0x1a>
 800cac6:	4b07      	ldr	r3, [pc, #28]	; (800cae4 <arm_rfft_fast_init_f32+0x4c>)
 800cac8:	4718      	bx	r3
 800caca:	4b07      	ldr	r3, [pc, #28]	; (800cae8 <arm_rfft_fast_init_f32+0x50>)
 800cacc:	4718      	bx	r3
 800cace:	4b07      	ldr	r3, [pc, #28]	; (800caec <arm_rfft_fast_init_f32+0x54>)
 800cad0:	4718      	bx	r3
 800cad2:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <arm_rfft_fast_init_f32+0x58>)
 800cad4:	4718      	bx	r3
 800cad6:	4b07      	ldr	r3, [pc, #28]	; (800caf4 <arm_rfft_fast_init_f32+0x5c>)
 800cad8:	e7f6      	b.n	800cac8 <arm_rfft_fast_init_f32+0x30>
 800cada:	4b07      	ldr	r3, [pc, #28]	; (800caf8 <arm_rfft_fast_init_f32+0x60>)
 800cadc:	e7f4      	b.n	800cac8 <arm_rfft_fast_init_f32+0x30>
 800cade:	4b07      	ldr	r3, [pc, #28]	; (800cafc <arm_rfft_fast_init_f32+0x64>)
 800cae0:	e7f2      	b.n	800cac8 <arm_rfft_fast_init_f32+0x30>
 800cae2:	bf00      	nop
 800cae4:	0800c909 	.word	0x0800c909
 800cae8:	0800c971 	.word	0x0800c971
 800caec:	0800c9e5 	.word	0x0800c9e5
 800caf0:	0800ca5d 	.word	0x0800ca5d
 800caf4:	0800c93d 	.word	0x0800c93d
 800caf8:	0800ca21 	.word	0x0800ca21
 800cafc:	0800c9a9 	.word	0x0800c9a9

0800cb00 <stage_rfft_f32>:
 800cb00:	b410      	push	{r4}
 800cb02:	edd1 7a00 	vldr	s15, [r1]
 800cb06:	ed91 7a01 	vldr	s14, [r1, #4]
 800cb0a:	8804      	ldrh	r4, [r0, #0]
 800cb0c:	6940      	ldr	r0, [r0, #20]
 800cb0e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cb12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb16:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800cb1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cb1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb22:	3c01      	subs	r4, #1
 800cb24:	ee26 7a84 	vmul.f32	s14, s13, s8
 800cb28:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cb2c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800cb30:	ed82 7a00 	vstr	s14, [r2]
 800cb34:	edc2 7a01 	vstr	s15, [r2, #4]
 800cb38:	3010      	adds	r0, #16
 800cb3a:	3210      	adds	r2, #16
 800cb3c:	3b08      	subs	r3, #8
 800cb3e:	3110      	adds	r1, #16
 800cb40:	ed11 5a02 	vldr	s10, [r1, #-8]
 800cb44:	ed93 7a02 	vldr	s14, [r3, #8]
 800cb48:	ed50 6a02 	vldr	s13, [r0, #-8]
 800cb4c:	edd3 4a03 	vldr	s9, [r3, #12]
 800cb50:	ed51 7a01 	vldr	s15, [r1, #-4]
 800cb54:	ed10 6a01 	vldr	s12, [r0, #-4]
 800cb58:	ee77 5a45 	vsub.f32	s11, s14, s10
 800cb5c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cb60:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800cb64:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800cb68:	ee66 5a25 	vmul.f32	s11, s12, s11
 800cb6c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800cb70:	ee37 7a23 	vadd.f32	s14, s14, s7
 800cb74:	ee66 6a85 	vmul.f32	s13, s13, s10
 800cb78:	ee26 6a05 	vmul.f32	s12, s12, s10
 800cb7c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800cb80:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cb84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cb88:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cb8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cb90:	3c01      	subs	r4, #1
 800cb92:	ed02 7a02 	vstr	s14, [r2, #-8]
 800cb96:	ed42 7a01 	vstr	s15, [r2, #-4]
 800cb9a:	f1a3 0308 	sub.w	r3, r3, #8
 800cb9e:	f101 0108 	add.w	r1, r1, #8
 800cba2:	f100 0008 	add.w	r0, r0, #8
 800cba6:	f102 0208 	add.w	r2, r2, #8
 800cbaa:	d1c9      	bne.n	800cb40 <stage_rfft_f32+0x40>
 800cbac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop

0800cbb4 <merge_rfft_f32>:
 800cbb4:	b410      	push	{r4}
 800cbb6:	edd1 7a00 	vldr	s15, [r1]
 800cbba:	edd1 6a01 	vldr	s13, [r1, #4]
 800cbbe:	8804      	ldrh	r4, [r0, #0]
 800cbc0:	6940      	ldr	r0, [r0, #20]
 800cbc2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cbc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cbca:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800cbce:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cbd2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cbd6:	3c01      	subs	r4, #1
 800cbd8:	ed82 7a00 	vstr	s14, [r2]
 800cbdc:	edc2 7a01 	vstr	s15, [r2, #4]
 800cbe0:	b3dc      	cbz	r4, 800cc5a <merge_rfft_f32+0xa6>
 800cbe2:	00e3      	lsls	r3, r4, #3
 800cbe4:	3b08      	subs	r3, #8
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3010      	adds	r0, #16
 800cbea:	3210      	adds	r2, #16
 800cbec:	3110      	adds	r1, #16
 800cbee:	ed11 5a02 	vldr	s10, [r1, #-8]
 800cbf2:	ed93 7a02 	vldr	s14, [r3, #8]
 800cbf6:	ed50 6a02 	vldr	s13, [r0, #-8]
 800cbfa:	edd3 4a03 	vldr	s9, [r3, #12]
 800cbfe:	ed51 7a01 	vldr	s15, [r1, #-4]
 800cc02:	ed10 6a01 	vldr	s12, [r0, #-4]
 800cc06:	ee75 5a47 	vsub.f32	s11, s10, s14
 800cc0a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cc0e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800cc12:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800cc16:	ee66 5a25 	vmul.f32	s11, s12, s11
 800cc1a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800cc1e:	ee37 7a63 	vsub.f32	s14, s14, s7
 800cc22:	ee66 6a85 	vmul.f32	s13, s13, s10
 800cc26:	ee26 6a05 	vmul.f32	s12, s12, s10
 800cc2a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800cc2e:	ee37 7a46 	vsub.f32	s14, s14, s12
 800cc32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cc36:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cc3a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cc3e:	3c01      	subs	r4, #1
 800cc40:	ed02 7a02 	vstr	s14, [r2, #-8]
 800cc44:	ed42 7a01 	vstr	s15, [r2, #-4]
 800cc48:	f1a3 0308 	sub.w	r3, r3, #8
 800cc4c:	f101 0108 	add.w	r1, r1, #8
 800cc50:	f100 0008 	add.w	r0, r0, #8
 800cc54:	f102 0208 	add.w	r2, r2, #8
 800cc58:	d1c9      	bne.n	800cbee <merge_rfft_f32+0x3a>
 800cc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <arm_rfft_fast_f32>:
 800cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc64:	8a05      	ldrh	r5, [r0, #16]
 800cc66:	086d      	lsrs	r5, r5, #1
 800cc68:	8005      	strh	r5, [r0, #0]
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	4616      	mov	r6, r2
 800cc6e:	461d      	mov	r5, r3
 800cc70:	b14b      	cbz	r3, 800cc86 <arm_rfft_fast_f32+0x26>
 800cc72:	f7ff ff9f 	bl	800cbb4 <merge_rfft_f32>
 800cc76:	462a      	mov	r2, r5
 800cc78:	4631      	mov	r1, r6
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc82:	f000 bb33 	b.w	800d2ec <arm_cfft_f32>
 800cc86:	460f      	mov	r7, r1
 800cc88:	461a      	mov	r2, r3
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	f000 fb2e 	bl	800d2ec <arm_cfft_f32>
 800cc90:	4632      	mov	r2, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	4620      	mov	r0, r4
 800cc96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9a:	f7ff bf31 	b.w	800cb00 <stage_rfft_f32>
 800cc9e:	bf00      	nop

0800cca0 <arm_cfft_radix8by2_f32>:
 800cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca4:	ed2d 8b08 	vpush	{d8-d11}
 800cca8:	4607      	mov	r7, r0
 800ccaa:	4608      	mov	r0, r1
 800ccac:	f8b7 c000 	ldrh.w	ip, [r7]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800ccb6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800ccba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ccbe:	f000 80b0 	beq.w	800ce22 <arm_cfft_radix8by2_f32+0x182>
 800ccc2:	008c      	lsls	r4, r1, #2
 800ccc4:	3410      	adds	r4, #16
 800ccc6:	f100 0310 	add.w	r3, r0, #16
 800ccca:	1906      	adds	r6, r0, r4
 800cccc:	3210      	adds	r2, #16
 800ccce:	4444      	add	r4, r8
 800ccd0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ccd4:	f108 0510 	add.w	r5, r8, #16
 800ccd8:	ed15 2a04 	vldr	s4, [r5, #-16]
 800ccdc:	ed55 2a03 	vldr	s5, [r5, #-12]
 800cce0:	ed54 4a04 	vldr	s9, [r4, #-16]
 800cce4:	ed14 4a03 	vldr	s8, [r4, #-12]
 800cce8:	ed14 6a02 	vldr	s12, [r4, #-8]
 800ccec:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ccf0:	ed53 3a04 	vldr	s7, [r3, #-16]
 800ccf4:	ed15 0a02 	vldr	s0, [r5, #-8]
 800ccf8:	ed55 0a01 	vldr	s1, [r5, #-4]
 800ccfc:	ed56 6a04 	vldr	s13, [r6, #-16]
 800cd00:	ed16 3a03 	vldr	s6, [r6, #-12]
 800cd04:	ed13 7a03 	vldr	s14, [r3, #-12]
 800cd08:	ed13 5a02 	vldr	s10, [r3, #-8]
 800cd0c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800cd10:	ed16 1a02 	vldr	s2, [r6, #-8]
 800cd14:	ed56 1a01 	vldr	s3, [r6, #-4]
 800cd18:	ee73 ba82 	vadd.f32	s23, s7, s4
 800cd1c:	ee37 ba22 	vadd.f32	s22, s14, s5
 800cd20:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800cd24:	ee33 9a04 	vadd.f32	s18, s6, s8
 800cd28:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800cd2c:	ee75 aa00 	vadd.f32	s21, s10, s0
 800cd30:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800cd34:	ee71 8a06 	vadd.f32	s17, s2, s12
 800cd38:	ed43 ba04 	vstr	s23, [r3, #-16]
 800cd3c:	ed03 ba03 	vstr	s22, [r3, #-12]
 800cd40:	ed43 aa02 	vstr	s21, [r3, #-8]
 800cd44:	ed03 aa01 	vstr	s20, [r3, #-4]
 800cd48:	ed06 8a01 	vstr	s16, [r6, #-4]
 800cd4c:	ed46 9a04 	vstr	s19, [r6, #-16]
 800cd50:	ed06 9a03 	vstr	s18, [r6, #-12]
 800cd54:	ed46 8a02 	vstr	s17, [r6, #-8]
 800cd58:	ee37 7a62 	vsub.f32	s14, s14, s5
 800cd5c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800cd60:	ee34 4a43 	vsub.f32	s8, s8, s6
 800cd64:	ed52 6a03 	vldr	s13, [r2, #-12]
 800cd68:	ed12 3a04 	vldr	s6, [r2, #-16]
 800cd6c:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800cd70:	ee27 8a26 	vmul.f32	s16, s14, s13
 800cd74:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800cd78:	ee23 2a83 	vmul.f32	s4, s7, s6
 800cd7c:	ee64 4a83 	vmul.f32	s9, s9, s6
 800cd80:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800cd84:	ee27 7a03 	vmul.f32	s14, s14, s6
 800cd88:	ee64 6a26 	vmul.f32	s13, s8, s13
 800cd8c:	ee24 4a03 	vmul.f32	s8, s8, s6
 800cd90:	ee37 7a63 	vsub.f32	s14, s14, s7
 800cd94:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cd98:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800cd9c:	ee32 3a08 	vadd.f32	s6, s4, s16
 800cda0:	ed05 7a03 	vstr	s14, [r5, #-12]
 800cda4:	ed05 3a04 	vstr	s6, [r5, #-16]
 800cda8:	ed04 4a04 	vstr	s8, [r4, #-16]
 800cdac:	ed44 6a03 	vstr	s13, [r4, #-12]
 800cdb0:	ed12 7a01 	vldr	s14, [r2, #-4]
 800cdb4:	ee76 6a41 	vsub.f32	s13, s12, s2
 800cdb8:	ee35 5a40 	vsub.f32	s10, s10, s0
 800cdbc:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800cdc0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cdc4:	ed52 5a02 	vldr	s11, [r2, #-8]
 800cdc8:	ee67 3a87 	vmul.f32	s7, s15, s14
 800cdcc:	ee66 4a87 	vmul.f32	s9, s13, s14
 800cdd0:	ee25 4a25 	vmul.f32	s8, s10, s11
 800cdd4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cdd8:	ee25 5a07 	vmul.f32	s10, s10, s14
 800cddc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800cde0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800cde4:	ee26 6a25 	vmul.f32	s12, s12, s11
 800cde8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800cdec:	ee74 5a23 	vadd.f32	s11, s8, s7
 800cdf0:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800cdf4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cdf8:	3310      	adds	r3, #16
 800cdfa:	4563      	cmp	r3, ip
 800cdfc:	ed45 5a02 	vstr	s11, [r5, #-8]
 800ce00:	f106 0610 	add.w	r6, r6, #16
 800ce04:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ce08:	f102 0210 	add.w	r2, r2, #16
 800ce0c:	ed04 6a02 	vstr	s12, [r4, #-8]
 800ce10:	ed04 7a01 	vstr	s14, [r4, #-4]
 800ce14:	f105 0510 	add.w	r5, r5, #16
 800ce18:	f104 0410 	add.w	r4, r4, #16
 800ce1c:	f47f af5c 	bne.w	800ccd8 <arm_cfft_radix8by2_f32+0x38>
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	b28c      	uxth	r4, r1
 800ce24:	4621      	mov	r1, r4
 800ce26:	2302      	movs	r3, #2
 800ce28:	f000 faf8 	bl	800d41c <arm_radix8_butterfly_f32>
 800ce2c:	ecbd 8b08 	vpop	{d8-d11}
 800ce30:	4621      	mov	r1, r4
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	4640      	mov	r0, r8
 800ce36:	2302      	movs	r3, #2
 800ce38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	f000 baee 	b.w	800d41c <arm_radix8_butterfly_f32>

0800ce40 <arm_cfft_radix8by4_f32>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	ed2d 8b0a 	vpush	{d8-d12}
 800ce48:	b08d      	sub	sp, #52	; 0x34
 800ce4a:	460d      	mov	r5, r1
 800ce4c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce4e:	8801      	ldrh	r1, [r0, #0]
 800ce50:	6842      	ldr	r2, [r0, #4]
 800ce52:	900a      	str	r0, [sp, #40]	; 0x28
 800ce54:	0849      	lsrs	r1, r1, #1
 800ce56:	008b      	lsls	r3, r1, #2
 800ce58:	18ee      	adds	r6, r5, r3
 800ce5a:	18f0      	adds	r0, r6, r3
 800ce5c:	edd0 5a00 	vldr	s11, [r0]
 800ce60:	edd5 7a00 	vldr	s15, [r5]
 800ce64:	ed96 7a00 	vldr	s14, [r6]
 800ce68:	edd0 3a01 	vldr	s7, [r0, #4]
 800ce6c:	ed96 4a01 	vldr	s8, [r6, #4]
 800ce70:	ed95 5a01 	vldr	s10, [r5, #4]
 800ce74:	9008      	str	r0, [sp, #32]
 800ce76:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800ce7a:	18c7      	adds	r7, r0, r3
 800ce7c:	edd7 4a00 	vldr	s9, [r7]
 800ce80:	ed97 3a01 	vldr	s6, [r7, #4]
 800ce84:	9701      	str	r7, [sp, #4]
 800ce86:	ee77 6a06 	vadd.f32	s13, s14, s12
 800ce8a:	462c      	mov	r4, r5
 800ce8c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ce90:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ce94:	ee16 ca90 	vmov	ip, s13
 800ce98:	f844 cb08 	str.w	ip, [r4], #8
 800ce9c:	ee75 6a23 	vadd.f32	s13, s10, s7
 800cea0:	edd6 5a01 	vldr	s11, [r6, #4]
 800cea4:	edd7 2a01 	vldr	s5, [r7, #4]
 800cea8:	9404      	str	r4, [sp, #16]
 800ceaa:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ceae:	ee74 3a27 	vadd.f32	s7, s8, s15
 800ceb2:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ceb6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800ceba:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800cebe:	0849      	lsrs	r1, r1, #1
 800cec0:	f102 0e08 	add.w	lr, r2, #8
 800cec4:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800cec8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800cecc:	9109      	str	r1, [sp, #36]	; 0x24
 800cece:	ee35 4a47 	vsub.f32	s8, s10, s14
 800ced2:	f1a1 0902 	sub.w	r9, r1, #2
 800ced6:	f8cd e00c 	str.w	lr, [sp, #12]
 800ceda:	4631      	mov	r1, r6
 800cedc:	ee13 ea90 	vmov	lr, s7
 800cee0:	ee36 6a64 	vsub.f32	s12, s12, s9
 800cee4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800cee8:	4604      	mov	r4, r0
 800ceea:	edc5 5a01 	vstr	s11, [r5, #4]
 800ceee:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cef2:	f841 eb08 	str.w	lr, [r1], #8
 800cef6:	ee34 5a24 	vadd.f32	s10, s8, s9
 800cefa:	ee16 ea10 	vmov	lr, s12
 800cefe:	ed86 5a01 	vstr	s10, [r6, #4]
 800cf02:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800cf06:	f844 eb08 	str.w	lr, [r4], #8
 800cf0a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800cf0e:	edc0 6a01 	vstr	s13, [r0, #4]
 800cf12:	9405      	str	r4, [sp, #20]
 800cf14:	4604      	mov	r4, r0
 800cf16:	ee17 0a90 	vmov	r0, s15
 800cf1a:	9106      	str	r1, [sp, #24]
 800cf1c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cf20:	f102 0110 	add.w	r1, r2, #16
 800cf24:	46bc      	mov	ip, r7
 800cf26:	9100      	str	r1, [sp, #0]
 800cf28:	f847 0b08 	str.w	r0, [r7], #8
 800cf2c:	f102 0118 	add.w	r1, r2, #24
 800cf30:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800cf34:	9102      	str	r1, [sp, #8]
 800cf36:	ed8c 7a01 	vstr	s14, [ip, #4]
 800cf3a:	9007      	str	r0, [sp, #28]
 800cf3c:	f000 8134 	beq.w	800d1a8 <arm_cfft_radix8by4_f32+0x368>
 800cf40:	f102 0920 	add.w	r9, r2, #32
 800cf44:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800cf48:	9a01      	ldr	r2, [sp, #4]
 800cf4a:	f8dd a000 	ldr.w	sl, [sp]
 800cf4e:	3b0c      	subs	r3, #12
 800cf50:	4683      	mov	fp, r0
 800cf52:	4463      	add	r3, ip
 800cf54:	f105 0e10 	add.w	lr, r5, #16
 800cf58:	f1a4 010c 	sub.w	r1, r4, #12
 800cf5c:	f104 0510 	add.w	r5, r4, #16
 800cf60:	f1a6 0c0c 	sub.w	ip, r6, #12
 800cf64:	f1a2 040c 	sub.w	r4, r2, #12
 800cf68:	f106 0010 	add.w	r0, r6, #16
 800cf6c:	3210      	adds	r2, #16
 800cf6e:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800cf72:	ed55 5a02 	vldr	s11, [r5, #-8]
 800cf76:	ed50 7a02 	vldr	s15, [r0, #-8]
 800cf7a:	ed52 1a02 	vldr	s3, [r2, #-8]
 800cf7e:	ed55 6a01 	vldr	s13, [r5, #-4]
 800cf82:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800cf86:	ed12 1a01 	vldr	s2, [r2, #-4]
 800cf8a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800cf8e:	ee35 4a25 	vadd.f32	s8, s10, s11
 800cf92:	ee30 6a26 	vadd.f32	s12, s0, s13
 800cf96:	ee37 7a84 	vadd.f32	s14, s15, s8
 800cf9a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800cf9e:	ee37 7a21 	vadd.f32	s14, s14, s3
 800cfa2:	ee75 5a65 	vsub.f32	s11, s10, s11
 800cfa6:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800cfaa:	ed10 7a01 	vldr	s14, [r0, #-4]
 800cfae:	ed52 6a01 	vldr	s13, [r2, #-4]
 800cfb2:	ee36 7a07 	vadd.f32	s14, s12, s14
 800cfb6:	ee78 aa25 	vadd.f32	s21, s16, s11
 800cfba:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cfbe:	ee70 3a67 	vsub.f32	s7, s0, s15
 800cfc2:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800cfc6:	ed94 7a02 	vldr	s14, [r4, #8]
 800cfca:	ed9c 2a02 	vldr	s4, [ip, #8]
 800cfce:	ed91 ba02 	vldr	s22, [r1, #8]
 800cfd2:	edd3 9a02 	vldr	s19, [r3, #8]
 800cfd6:	edd4 2a01 	vldr	s5, [r4, #4]
 800cfda:	ed9c 9a01 	vldr	s18, [ip, #4]
 800cfde:	ed93 5a01 	vldr	s10, [r3, #4]
 800cfe2:	edd1 0a01 	vldr	s1, [r1, #4]
 800cfe6:	ee72 6a07 	vadd.f32	s13, s4, s14
 800cfea:	ee32 2a47 	vsub.f32	s4, s4, s14
 800cfee:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800cff2:	ee79 4a22 	vadd.f32	s9, s18, s5
 800cff6:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800cffa:	ee79 2a62 	vsub.f32	s5, s18, s5
 800cffe:	ed8c 7a02 	vstr	s14, [ip, #8]
 800d002:	ed91 7a01 	vldr	s14, [r1, #4]
 800d006:	edd3 8a01 	vldr	s17, [r3, #4]
 800d00a:	ee34 7a87 	vadd.f32	s14, s9, s14
 800d00e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800d012:	ee37 7a28 	vadd.f32	s14, s14, s17
 800d016:	ee32 9a60 	vsub.f32	s18, s4, s1
 800d01a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800d01e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800d022:	ed1a aa02 	vldr	s20, [sl, #-8]
 800d026:	ee73 8a22 	vadd.f32	s17, s6, s5
 800d02a:	ee39 9a05 	vadd.f32	s18, s18, s10
 800d02e:	ee7a aac1 	vsub.f32	s21, s21, s2
 800d032:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d036:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800d03a:	ee69 ba07 	vmul.f32	s23, s18, s14
 800d03e:	ee6a aa87 	vmul.f32	s21, s21, s14
 800d042:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800d046:	ee63 ca87 	vmul.f32	s25, s7, s14
 800d04a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800d04e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800d052:	ee68 8a87 	vmul.f32	s17, s17, s14
 800d056:	ee73 3aea 	vsub.f32	s7, s7, s21
 800d05a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800d05e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800d062:	ee3b aaca 	vsub.f32	s20, s23, s20
 800d066:	ee34 4a67 	vsub.f32	s8, s8, s15
 800d06a:	ee76 6acb 	vsub.f32	s13, s13, s22
 800d06e:	ee36 6a48 	vsub.f32	s12, s12, s16
 800d072:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800d076:	ed00 7a02 	vstr	s14, [r0, #-8]
 800d07a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800d07e:	edc1 8a01 	vstr	s17, [r1, #4]
 800d082:	ed81 aa02 	vstr	s20, [r1, #8]
 800d086:	ed59 3a04 	vldr	s7, [r9, #-16]
 800d08a:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800d08e:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800d092:	ed59 6a03 	vldr	s13, [r9, #-12]
 800d096:	ee34 4a61 	vsub.f32	s8, s8, s3
 800d09a:	ee36 6a41 	vsub.f32	s12, s12, s2
 800d09e:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800d0a2:	ee66 9a26 	vmul.f32	s19, s12, s13
 800d0a6:	ee24 9a23 	vmul.f32	s18, s8, s7
 800d0aa:	ee26 6a23 	vmul.f32	s12, s12, s7
 800d0ae:	ee24 4a26 	vmul.f32	s8, s8, s13
 800d0b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d0b6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800d0ba:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800d0be:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d0c2:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d0c6:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800d0ca:	ee79 3a29 	vadd.f32	s7, s18, s19
 800d0ce:	ee75 6a60 	vsub.f32	s13, s10, s1
 800d0d2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800d0d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d0da:	ed45 3a02 	vstr	s7, [r5, #-8]
 800d0de:	ed05 6a01 	vstr	s12, [r5, #-4]
 800d0e2:	ed84 7a01 	vstr	s14, [r4, #4]
 800d0e6:	ed84 4a02 	vstr	s8, [r4, #8]
 800d0ea:	ee35 6a81 	vadd.f32	s12, s11, s2
 800d0ee:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800d0f2:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800d0f6:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800d0fa:	ee33 3a62 	vsub.f32	s6, s6, s5
 800d0fe:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800d102:	ee67 2a26 	vmul.f32	s5, s14, s13
 800d106:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800d10a:	ee26 5a25 	vmul.f32	s10, s12, s11
 800d10e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d112:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d116:	ee27 7a25 	vmul.f32	s14, s14, s11
 800d11a:	ee63 6a26 	vmul.f32	s13, s6, s13
 800d11e:	ee23 3a25 	vmul.f32	s6, s6, s11
 800d122:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d126:	ee75 5a24 	vadd.f32	s11, s10, s9
 800d12a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d12e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d132:	f1bb 0b01 	subs.w	fp, fp, #1
 800d136:	ed42 5a02 	vstr	s11, [r2, #-8]
 800d13a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800d13e:	f10e 0e08 	add.w	lr, lr, #8
 800d142:	ed83 3a02 	vstr	s6, [r3, #8]
 800d146:	ed83 7a01 	vstr	s14, [r3, #4]
 800d14a:	f1ac 0c08 	sub.w	ip, ip, #8
 800d14e:	f10a 0a08 	add.w	sl, sl, #8
 800d152:	f100 0008 	add.w	r0, r0, #8
 800d156:	f1a1 0108 	sub.w	r1, r1, #8
 800d15a:	f109 0910 	add.w	r9, r9, #16
 800d15e:	f105 0508 	add.w	r5, r5, #8
 800d162:	f1a4 0408 	sub.w	r4, r4, #8
 800d166:	f108 0818 	add.w	r8, r8, #24
 800d16a:	f102 0208 	add.w	r2, r2, #8
 800d16e:	f1a3 0308 	sub.w	r3, r3, #8
 800d172:	f47f aefc 	bne.w	800cf6e <arm_cfft_radix8by4_f32+0x12e>
 800d176:	9907      	ldr	r1, [sp, #28]
 800d178:	9800      	ldr	r0, [sp, #0]
 800d17a:	00cb      	lsls	r3, r1, #3
 800d17c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d180:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800d184:	9100      	str	r1, [sp, #0]
 800d186:	9904      	ldr	r1, [sp, #16]
 800d188:	4419      	add	r1, r3
 800d18a:	9104      	str	r1, [sp, #16]
 800d18c:	9903      	ldr	r1, [sp, #12]
 800d18e:	4419      	add	r1, r3
 800d190:	9103      	str	r1, [sp, #12]
 800d192:	9906      	ldr	r1, [sp, #24]
 800d194:	4419      	add	r1, r3
 800d196:	9106      	str	r1, [sp, #24]
 800d198:	9905      	ldr	r1, [sp, #20]
 800d19a:	441f      	add	r7, r3
 800d19c:	4419      	add	r1, r3
 800d19e:	9b02      	ldr	r3, [sp, #8]
 800d1a0:	9105      	str	r1, [sp, #20]
 800d1a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1a6:	9302      	str	r3, [sp, #8]
 800d1a8:	9904      	ldr	r1, [sp, #16]
 800d1aa:	9805      	ldr	r0, [sp, #20]
 800d1ac:	ed91 4a00 	vldr	s8, [r1]
 800d1b0:	edd0 6a00 	vldr	s13, [r0]
 800d1b4:	9b06      	ldr	r3, [sp, #24]
 800d1b6:	ed97 3a00 	vldr	s6, [r7]
 800d1ba:	edd3 7a00 	vldr	s15, [r3]
 800d1be:	edd0 4a01 	vldr	s9, [r0, #4]
 800d1c2:	edd1 3a01 	vldr	s7, [r1, #4]
 800d1c6:	ed97 2a01 	vldr	s4, [r7, #4]
 800d1ca:	ed93 7a01 	vldr	s14, [r3, #4]
 800d1ce:	9a03      	ldr	r2, [sp, #12]
 800d1d0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800d1d4:	ee34 6a26 	vadd.f32	s12, s8, s13
 800d1d8:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800d1dc:	ee37 5a86 	vadd.f32	s10, s15, s12
 800d1e0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800d1e4:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d1e8:	ee74 6a66 	vsub.f32	s13, s8, s13
 800d1ec:	ed81 5a00 	vstr	s10, [r1]
 800d1f0:	ed93 5a01 	vldr	s10, [r3, #4]
 800d1f4:	edd7 4a01 	vldr	s9, [r7, #4]
 800d1f8:	ee35 5a85 	vadd.f32	s10, s11, s10
 800d1fc:	ee37 4a26 	vadd.f32	s8, s14, s13
 800d200:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d204:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800d208:	ed81 5a01 	vstr	s10, [r1, #4]
 800d20c:	edd2 1a00 	vldr	s3, [r2]
 800d210:	edd2 2a01 	vldr	s5, [r2, #4]
 800d214:	ee34 5a83 	vadd.f32	s10, s9, s6
 800d218:	ee34 4a42 	vsub.f32	s8, s8, s4
 800d21c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d220:	ee64 4a21 	vmul.f32	s9, s8, s3
 800d224:	ee24 4a22 	vmul.f32	s8, s8, s5
 800d228:	ee65 2a22 	vmul.f32	s5, s10, s5
 800d22c:	ee25 5a21 	vmul.f32	s10, s10, s3
 800d230:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800d234:	ee35 5a44 	vsub.f32	s10, s10, s8
 800d238:	edc3 2a00 	vstr	s5, [r3]
 800d23c:	ed83 5a01 	vstr	s10, [r3, #4]
 800d240:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800d244:	9b00      	ldr	r3, [sp, #0]
 800d246:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d24a:	ed93 4a01 	vldr	s8, [r3, #4]
 800d24e:	ed93 5a00 	vldr	s10, [r3]
 800d252:	9b02      	ldr	r3, [sp, #8]
 800d254:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800d258:	ee66 4a05 	vmul.f32	s9, s12, s10
 800d25c:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d260:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d264:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d268:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d26c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800d270:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d274:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d278:	ed80 6a01 	vstr	s12, [r0, #4]
 800d27c:	edc0 5a00 	vstr	s11, [r0]
 800d280:	edd3 5a01 	vldr	s11, [r3, #4]
 800d284:	edd3 6a00 	vldr	s13, [r3]
 800d288:	ee37 7a02 	vadd.f32	s14, s14, s4
 800d28c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d290:	ee27 6a26 	vmul.f32	s12, s14, s13
 800d294:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d298:	ee27 7a25 	vmul.f32	s14, s14, s11
 800d29c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d2a0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d2a4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d2a8:	ed87 7a01 	vstr	s14, [r7, #4]
 800d2ac:	edc7 7a00 	vstr	s15, [r7]
 800d2b0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	686a      	ldr	r2, [r5, #4]
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	f000 f8af 	bl	800d41c <arm_radix8_butterfly_f32>
 800d2be:	4630      	mov	r0, r6
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	686a      	ldr	r2, [r5, #4]
 800d2c4:	2304      	movs	r3, #4
 800d2c6:	f000 f8a9 	bl	800d41c <arm_radix8_butterfly_f32>
 800d2ca:	9808      	ldr	r0, [sp, #32]
 800d2cc:	686a      	ldr	r2, [r5, #4]
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	2304      	movs	r3, #4
 800d2d2:	f000 f8a3 	bl	800d41c <arm_radix8_butterfly_f32>
 800d2d6:	686a      	ldr	r2, [r5, #4]
 800d2d8:	9801      	ldr	r0, [sp, #4]
 800d2da:	4621      	mov	r1, r4
 800d2dc:	2304      	movs	r3, #4
 800d2de:	b00d      	add	sp, #52	; 0x34
 800d2e0:	ecbd 8b0a 	vpop	{d8-d12}
 800d2e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	f000 b898 	b.w	800d41c <arm_radix8_butterfly_f32>

0800d2ec <arm_cfft_f32>:
 800d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f0:	2a01      	cmp	r2, #1
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	4617      	mov	r7, r2
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	4698      	mov	r8, r3
 800d2fa:	8805      	ldrh	r5, [r0, #0]
 800d2fc:	d056      	beq.n	800d3ac <arm_cfft_f32+0xc0>
 800d2fe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800d302:	d063      	beq.n	800d3cc <arm_cfft_f32+0xe0>
 800d304:	d916      	bls.n	800d334 <arm_cfft_f32+0x48>
 800d306:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d30a:	d01a      	beq.n	800d342 <arm_cfft_f32+0x56>
 800d30c:	d947      	bls.n	800d39e <arm_cfft_f32+0xb2>
 800d30e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800d312:	d05b      	beq.n	800d3cc <arm_cfft_f32+0xe0>
 800d314:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800d318:	d105      	bne.n	800d326 <arm_cfft_f32+0x3a>
 800d31a:	2301      	movs	r3, #1
 800d31c:	6872      	ldr	r2, [r6, #4]
 800d31e:	4629      	mov	r1, r5
 800d320:	4620      	mov	r0, r4
 800d322:	f000 f87b 	bl	800d41c <arm_radix8_butterfly_f32>
 800d326:	f1b8 0f00 	cmp.w	r8, #0
 800d32a:	d111      	bne.n	800d350 <arm_cfft_f32+0x64>
 800d32c:	2f01      	cmp	r7, #1
 800d32e:	d016      	beq.n	800d35e <arm_cfft_f32+0x72>
 800d330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d334:	2d20      	cmp	r5, #32
 800d336:	d049      	beq.n	800d3cc <arm_cfft_f32+0xe0>
 800d338:	d935      	bls.n	800d3a6 <arm_cfft_f32+0xba>
 800d33a:	2d40      	cmp	r5, #64	; 0x40
 800d33c:	d0ed      	beq.n	800d31a <arm_cfft_f32+0x2e>
 800d33e:	2d80      	cmp	r5, #128	; 0x80
 800d340:	d1f1      	bne.n	800d326 <arm_cfft_f32+0x3a>
 800d342:	4621      	mov	r1, r4
 800d344:	4630      	mov	r0, r6
 800d346:	f7ff fcab 	bl	800cca0 <arm_cfft_radix8by2_f32>
 800d34a:	f1b8 0f00 	cmp.w	r8, #0
 800d34e:	d0ed      	beq.n	800d32c <arm_cfft_f32+0x40>
 800d350:	68b2      	ldr	r2, [r6, #8]
 800d352:	89b1      	ldrh	r1, [r6, #12]
 800d354:	4620      	mov	r0, r4
 800d356:	f000 f841 	bl	800d3dc <arm_bitreversal_32>
 800d35a:	2f01      	cmp	r7, #1
 800d35c:	d1e8      	bne.n	800d330 <arm_cfft_f32+0x44>
 800d35e:	ee07 5a90 	vmov	s15, r5
 800d362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d36a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d36e:	2d00      	cmp	r5, #0
 800d370:	d0de      	beq.n	800d330 <arm_cfft_f32+0x44>
 800d372:	f104 0108 	add.w	r1, r4, #8
 800d376:	2300      	movs	r3, #0
 800d378:	3301      	adds	r3, #1
 800d37a:	429d      	cmp	r5, r3
 800d37c:	f101 0108 	add.w	r1, r1, #8
 800d380:	ed11 7a04 	vldr	s14, [r1, #-16]
 800d384:	ed51 7a03 	vldr	s15, [r1, #-12]
 800d388:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d38c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d390:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d394:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d398:	d1ee      	bne.n	800d378 <arm_cfft_f32+0x8c>
 800d39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d3a2:	d0ba      	beq.n	800d31a <arm_cfft_f32+0x2e>
 800d3a4:	e7bf      	b.n	800d326 <arm_cfft_f32+0x3a>
 800d3a6:	2d10      	cmp	r5, #16
 800d3a8:	d0cb      	beq.n	800d342 <arm_cfft_f32+0x56>
 800d3aa:	e7bc      	b.n	800d326 <arm_cfft_f32+0x3a>
 800d3ac:	b19d      	cbz	r5, 800d3d6 <arm_cfft_f32+0xea>
 800d3ae:	f101 030c 	add.w	r3, r1, #12
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	ed53 7a02 	vldr	s15, [r3, #-8]
 800d3b8:	3201      	adds	r2, #1
 800d3ba:	eef1 7a67 	vneg.f32	s15, s15
 800d3be:	4295      	cmp	r5, r2
 800d3c0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800d3c4:	f103 0308 	add.w	r3, r3, #8
 800d3c8:	d1f4      	bne.n	800d3b4 <arm_cfft_f32+0xc8>
 800d3ca:	e798      	b.n	800d2fe <arm_cfft_f32+0x12>
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f7ff fd36 	bl	800ce40 <arm_cfft_radix8by4_f32>
 800d3d4:	e7a7      	b.n	800d326 <arm_cfft_f32+0x3a>
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d0aa      	beq.n	800d330 <arm_cfft_f32+0x44>
 800d3da:	e7b9      	b.n	800d350 <arm_cfft_f32+0x64>

0800d3dc <arm_bitreversal_32>:
 800d3dc:	b1e9      	cbz	r1, 800d41a <arm_bitreversal_32+0x3e>
 800d3de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e0:	2500      	movs	r5, #0
 800d3e2:	f102 0e02 	add.w	lr, r2, #2
 800d3e6:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800d3ea:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800d3ee:	08a4      	lsrs	r4, r4, #2
 800d3f0:	089b      	lsrs	r3, r3, #2
 800d3f2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800d3f6:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800d3fa:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800d3fe:	00a6      	lsls	r6, r4, #2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800d406:	3304      	adds	r3, #4
 800d408:	1d34      	adds	r4, r6, #4
 800d40a:	3502      	adds	r5, #2
 800d40c:	58c6      	ldr	r6, [r0, r3]
 800d40e:	5907      	ldr	r7, [r0, r4]
 800d410:	50c7      	str	r7, [r0, r3]
 800d412:	428d      	cmp	r5, r1
 800d414:	5106      	str	r6, [r0, r4]
 800d416:	d3e6      	bcc.n	800d3e6 <arm_bitreversal_32+0xa>
 800d418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d41a:	4770      	bx	lr

0800d41c <arm_radix8_butterfly_f32>:
 800d41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d420:	ed2d 8b10 	vpush	{d8-d15}
 800d424:	b095      	sub	sp, #84	; 0x54
 800d426:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800d42a:	4603      	mov	r3, r0
 800d42c:	3304      	adds	r3, #4
 800d42e:	ed9f bab9 	vldr	s22, [pc, #740]	; 800d714 <arm_radix8_butterfly_f32+0x2f8>
 800d432:	9012      	str	r0, [sp, #72]	; 0x48
 800d434:	468b      	mov	fp, r1
 800d436:	9313      	str	r3, [sp, #76]	; 0x4c
 800d438:	4689      	mov	r9, r1
 800d43a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800d43e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d440:	960f      	str	r6, [sp, #60]	; 0x3c
 800d442:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800d446:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800d44a:	eb03 0508 	add.w	r5, r3, r8
 800d44e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d452:	eb05 040e 	add.w	r4, r5, lr
 800d456:	0137      	lsls	r7, r6, #4
 800d458:	eba6 030a 	sub.w	r3, r6, sl
 800d45c:	eb04 000e 	add.w	r0, r4, lr
 800d460:	44b2      	add	sl, r6
 800d462:	1d3a      	adds	r2, r7, #4
 800d464:	9702      	str	r7, [sp, #8]
 800d466:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d46a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800d46e:	ebae 0c06 	sub.w	ip, lr, r6
 800d472:	9703      	str	r7, [sp, #12]
 800d474:	eb03 0708 	add.w	r7, r3, r8
 800d478:	9701      	str	r7, [sp, #4]
 800d47a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800d47e:	9706      	str	r7, [sp, #24]
 800d480:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d482:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800d486:	f10e 0104 	add.w	r1, lr, #4
 800d48a:	4439      	add	r1, r7
 800d48c:	443a      	add	r2, r7
 800d48e:	0137      	lsls	r7, r6, #4
 800d490:	00f6      	lsls	r6, r6, #3
 800d492:	9704      	str	r7, [sp, #16]
 800d494:	9605      	str	r6, [sp, #20]
 800d496:	9f01      	ldr	r7, [sp, #4]
 800d498:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d49a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800d49e:	f04f 0c00 	mov.w	ip, #0
 800d4a2:	edd4 6a00 	vldr	s13, [r4]
 800d4a6:	edd7 1a00 	vldr	s3, [r7]
 800d4aa:	ed16 aa01 	vldr	s20, [r6, #-4]
 800d4ae:	edd5 5a00 	vldr	s11, [r5]
 800d4b2:	ed52 9a01 	vldr	s19, [r2, #-4]
 800d4b6:	ed90 6a00 	vldr	s12, [r0]
 800d4ba:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d4be:	ed93 3a00 	vldr	s6, [r3]
 800d4c2:	ee39 0a86 	vadd.f32	s0, s19, s12
 800d4c6:	ee33 2a21 	vadd.f32	s4, s6, s3
 800d4ca:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800d4ce:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800d4d2:	ee35 7a02 	vadd.f32	s14, s10, s4
 800d4d6:	ee34 4a80 	vadd.f32	s8, s9, s0
 800d4da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4de:	ee74 6a07 	vadd.f32	s13, s8, s14
 800d4e2:	ee34 4a47 	vsub.f32	s8, s8, s14
 800d4e6:	ed46 6a01 	vstr	s13, [r6, #-4]
 800d4ea:	ed85 4a00 	vstr	s8, [r5]
 800d4ee:	edd1 6a00 	vldr	s13, [r1]
 800d4f2:	ed94 9a01 	vldr	s18, [r4, #4]
 800d4f6:	edd3 2a01 	vldr	s5, [r3, #4]
 800d4fa:	edd7 8a01 	vldr	s17, [r7, #4]
 800d4fe:	edd6 0a00 	vldr	s1, [r6]
 800d502:	edd5 3a01 	vldr	s7, [r5, #4]
 800d506:	ed90 8a01 	vldr	s16, [r0, #4]
 800d50a:	ed92 7a00 	vldr	s14, [r2]
 800d50e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d512:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800d516:	ee72 aae8 	vsub.f32	s21, s5, s17
 800d51a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800d51e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800d522:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d526:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800d52a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800d52e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800d532:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800d536:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800d53a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800d53e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800d542:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d546:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800d54a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800d54e:	ee76 6a89 	vadd.f32	s13, s13, s18
 800d552:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800d556:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d55a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d55e:	ee35 5a42 	vsub.f32	s10, s10, s4
 800d562:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800d566:	ee33 2a20 	vadd.f32	s4, s6, s1
 800d56a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800d56e:	ee33 3a60 	vsub.f32	s6, s6, s1
 800d572:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800d576:	ee77 0a01 	vadd.f32	s1, s14, s2
 800d57a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d57e:	ee37 7a41 	vsub.f32	s14, s14, s2
 800d582:	ee73 1a84 	vadd.f32	s3, s7, s8
 800d586:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d58a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800d58e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d592:	ee32 8a00 	vadd.f32	s16, s4, s0
 800d596:	ee33 1a45 	vsub.f32	s2, s6, s10
 800d59a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800d59e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d5a2:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800d5a6:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800d5aa:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d5ae:	ee34 6a67 	vsub.f32	s12, s8, s15
 800d5b2:	ee75 4a87 	vadd.f32	s9, s11, s14
 800d5b6:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800d5ba:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800d5be:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d5c2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800d5c6:	44dc      	add	ip, fp
 800d5c8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d5cc:	45e1      	cmp	r9, ip
 800d5ce:	ed86 8a00 	vstr	s16, [r6]
 800d5d2:	ed85 2a01 	vstr	s4, [r5, #4]
 800d5d6:	4456      	add	r6, sl
 800d5d8:	ed02 0a01 	vstr	s0, [r2, #-4]
 800d5dc:	4455      	add	r5, sl
 800d5de:	edc0 6a00 	vstr	s13, [r0]
 800d5e2:	ed82 1a00 	vstr	s2, [r2]
 800d5e6:	ed80 5a01 	vstr	s10, [r0, #4]
 800d5ea:	4452      	add	r2, sl
 800d5ec:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d5f0:	4450      	add	r0, sl
 800d5f2:	edc7 2a00 	vstr	s5, [r7]
 800d5f6:	edc4 4a00 	vstr	s9, [r4]
 800d5fa:	ed83 7a00 	vstr	s14, [r3]
 800d5fe:	edc1 5a00 	vstr	s11, [r1]
 800d602:	edc7 3a01 	vstr	s7, [r7, #4]
 800d606:	4451      	add	r1, sl
 800d608:	ed84 6a01 	vstr	s12, [r4, #4]
 800d60c:	4457      	add	r7, sl
 800d60e:	edc3 7a01 	vstr	s15, [r3, #4]
 800d612:	4454      	add	r4, sl
 800d614:	4453      	add	r3, sl
 800d616:	f63f af44 	bhi.w	800d4a2 <arm_radix8_butterfly_f32+0x86>
 800d61a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d61c:	2b07      	cmp	r3, #7
 800d61e:	f240 81b7 	bls.w	800d990 <arm_radix8_butterfly_f32+0x574>
 800d622:	9b06      	ldr	r3, [sp, #24]
 800d624:	9903      	ldr	r1, [sp, #12]
 800d626:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d628:	9e05      	ldr	r6, [sp, #20]
 800d62a:	9a04      	ldr	r2, [sp, #16]
 800d62c:	f103 0c08 	add.w	ip, r3, #8
 800d630:	9b02      	ldr	r3, [sp, #8]
 800d632:	3108      	adds	r1, #8
 800d634:	f108 0808 	add.w	r8, r8, #8
 800d638:	1841      	adds	r1, r0, r1
 800d63a:	3608      	adds	r6, #8
 800d63c:	330c      	adds	r3, #12
 800d63e:	4604      	mov	r4, r0
 800d640:	4444      	add	r4, r8
 800d642:	18c3      	adds	r3, r0, r3
 800d644:	9109      	str	r1, [sp, #36]	; 0x24
 800d646:	1981      	adds	r1, r0, r6
 800d648:	f10e 0e08 	add.w	lr, lr, #8
 800d64c:	3208      	adds	r2, #8
 800d64e:	940b      	str	r4, [sp, #44]	; 0x2c
 800d650:	9107      	str	r1, [sp, #28]
 800d652:	4604      	mov	r4, r0
 800d654:	4601      	mov	r1, r0
 800d656:	9304      	str	r3, [sp, #16]
 800d658:	f100 030c 	add.w	r3, r0, #12
 800d65c:	4474      	add	r4, lr
 800d65e:	f04f 0801 	mov.w	r8, #1
 800d662:	1882      	adds	r2, r0, r2
 800d664:	4461      	add	r1, ip
 800d666:	9305      	str	r3, [sp, #20]
 800d668:	464b      	mov	r3, r9
 800d66a:	940a      	str	r4, [sp, #40]	; 0x28
 800d66c:	46c1      	mov	r9, r8
 800d66e:	9208      	str	r2, [sp, #32]
 800d670:	46d8      	mov	r8, fp
 800d672:	9106      	str	r1, [sp, #24]
 800d674:	f04f 0e00 	mov.w	lr, #0
 800d678:	469b      	mov	fp, r3
 800d67a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d67c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d67e:	449e      	add	lr, r3
 800d680:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800d684:	441a      	add	r2, r3
 800d686:	920e      	str	r2, [sp, #56]	; 0x38
 800d688:	441a      	add	r2, r3
 800d68a:	18d4      	adds	r4, r2, r3
 800d68c:	18e5      	adds	r5, r4, r3
 800d68e:	18ee      	adds	r6, r5, r3
 800d690:	18f7      	adds	r7, r6, r3
 800d692:	eb07 0c03 	add.w	ip, r7, r3
 800d696:	920d      	str	r2, [sp, #52]	; 0x34
 800d698:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800d69c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800d6a0:	910c      	str	r1, [sp, #48]	; 0x30
 800d6a2:	4419      	add	r1, r3
 800d6a4:	9103      	str	r1, [sp, #12]
 800d6a6:	4419      	add	r1, r3
 800d6a8:	18ca      	adds	r2, r1, r3
 800d6aa:	9202      	str	r2, [sp, #8]
 800d6ac:	441a      	add	r2, r3
 800d6ae:	18d0      	adds	r0, r2, r3
 800d6b0:	ed92 ea01 	vldr	s28, [r2, #4]
 800d6b4:	9a02      	ldr	r2, [sp, #8]
 800d6b6:	edd4 7a00 	vldr	s15, [r4]
 800d6ba:	edd2 da01 	vldr	s27, [r2, #4]
 800d6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6c0:	ed91 da01 	vldr	s26, [r1, #4]
 800d6c4:	ed92 ca01 	vldr	s24, [r2, #4]
 800d6c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6ca:	9903      	ldr	r1, [sp, #12]
 800d6cc:	edcd 7a03 	vstr	s15, [sp, #12]
 800d6d0:	edd2 7a00 	vldr	s15, [r2]
 800d6d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6d6:	edcd 7a02 	vstr	s15, [sp, #8]
 800d6da:	edd2 7a00 	vldr	s15, [r2]
 800d6de:	edd0 ea01 	vldr	s29, [r0, #4]
 800d6e2:	edd1 ca01 	vldr	s25, [r1, #4]
 800d6e6:	eddc ba00 	vldr	s23, [ip]
 800d6ea:	edd7 aa00 	vldr	s21, [r7]
 800d6ee:	ed96 aa00 	vldr	s20, [r6]
 800d6f2:	edd5 9a00 	vldr	s19, [r5]
 800d6f6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d6fa:	4403      	add	r3, r0
 800d6fc:	ed93 fa01 	vldr	s30, [r3, #4]
 800d700:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800d704:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800d708:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d70c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d710:	46cc      	mov	ip, r9
 800d712:	e001      	b.n	800d718 <arm_radix8_butterfly_f32+0x2fc>
 800d714:	3f3504f3 	.word	0x3f3504f3
 800d718:	ed91 6a00 	vldr	s12, [r1]
 800d71c:	ed93 5a00 	vldr	s10, [r3]
 800d720:	edd0 fa00 	vldr	s31, [r0]
 800d724:	edd4 7a00 	vldr	s15, [r4]
 800d728:	ed95 7a00 	vldr	s14, [r5]
 800d72c:	ed56 3a01 	vldr	s7, [r6, #-4]
 800d730:	ed17 3a01 	vldr	s6, [r7, #-4]
 800d734:	ed92 2a00 	vldr	s4, [r2]
 800d738:	ed96 0a00 	vldr	s0, [r6]
 800d73c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d740:	ee32 1a06 	vadd.f32	s2, s4, s12
 800d744:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800d748:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d74c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800d750:	ee71 6a24 	vadd.f32	s13, s2, s9
 800d754:	ee32 2a46 	vsub.f32	s4, s4, s12
 800d758:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800d75c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d760:	ed06 6a01 	vstr	s12, [r6, #-4]
 800d764:	edd4 8a01 	vldr	s17, [r4, #4]
 800d768:	ed92 9a01 	vldr	s18, [r2, #4]
 800d76c:	edd7 0a00 	vldr	s1, [r7]
 800d770:	edd1 2a01 	vldr	s5, [r1, #4]
 800d774:	ed95 7a01 	vldr	s14, [r5, #4]
 800d778:	ed93 6a01 	vldr	s12, [r3, #4]
 800d77c:	edd0 5a01 	vldr	s11, [r0, #4]
 800d780:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800d784:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800d788:	ee39 5a62 	vsub.f32	s10, s18, s5
 800d78c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800d790:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d794:	ee38 7a87 	vadd.f32	s14, s17, s14
 800d798:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800d79c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800d7a0:	ee32 9a27 	vadd.f32	s18, s4, s15
 800d7a4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800d7a8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800d7ac:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800d7b0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d7b4:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800d7b8:	ee32 1a08 	vadd.f32	s2, s4, s16
 800d7bc:	ee72 fa87 	vadd.f32	s31, s5, s14
 800d7c0:	ee32 2a48 	vsub.f32	s4, s4, s16
 800d7c4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800d7c8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800d7cc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d7d0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800d7d4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800d7d8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800d7dc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800d7e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d7e4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800d7e8:	ee74 0a22 	vadd.f32	s1, s8, s5
 800d7ec:	ee36 0a28 	vadd.f32	s0, s12, s17
 800d7f0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d7f4:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d7f8:	ee32 4a64 	vsub.f32	s8, s4, s9
 800d7fc:	ee73 8a09 	vadd.f32	s17, s6, s18
 800d800:	ee74 4a82 	vadd.f32	s9, s9, s4
 800d804:	ee33 9a49 	vsub.f32	s18, s6, s18
 800d808:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800d80c:	ee35 3a85 	vadd.f32	s6, s11, s10
 800d810:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d814:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800d818:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d81c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800d820:	ee30 7a68 	vsub.f32	s14, s0, s17
 800d824:	ee35 8a03 	vadd.f32	s16, s10, s6
 800d828:	ee38 0a80 	vadd.f32	s0, s17, s0
 800d82c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d830:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800d834:	ed9d 2a01 	vldr	s4, [sp, #4]
 800d838:	eddd 1a02 	vldr	s3, [sp, #8]
 800d83c:	ee35 5a43 	vsub.f32	s10, s10, s6
 800d840:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800d844:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800d848:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800d84c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d850:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800d854:	ee76 5a49 	vsub.f32	s11, s12, s18
 800d858:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800d85c:	ee39 6a06 	vadd.f32	s12, s18, s12
 800d860:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800d864:	ee21 4a84 	vmul.f32	s8, s3, s8
 800d868:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800d86c:	ee22 7a07 	vmul.f32	s14, s4, s14
 800d870:	ee22 2a08 	vmul.f32	s4, s4, s16
 800d874:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d878:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800d87c:	ee31 1a09 	vadd.f32	s2, s2, s18
 800d880:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800d884:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800d888:	ee74 0a60 	vsub.f32	s1, s8, s1
 800d88c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d890:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800d894:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800d898:	ee72 1a21 	vadd.f32	s3, s4, s3
 800d89c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800d8a0:	ee38 2a89 	vadd.f32	s4, s17, s18
 800d8a4:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d8a8:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d8ac:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d8b0:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d8b4:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d8b8:	eddd 5a03 	vldr	s11, [sp, #12]
 800d8bc:	edc6 fa00 	vstr	s31, [r6]
 800d8c0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d8c4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d8c8:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d8cc:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d8d0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d8d4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d8d8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d8dc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d8e0:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d8e4:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d8e8:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d8ec:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d8f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d8f4:	44c4      	add	ip, r8
 800d8f6:	45e3      	cmp	fp, ip
 800d8f8:	edc3 3a00 	vstr	s7, [r3]
 800d8fc:	edc3 6a01 	vstr	s13, [r3, #4]
 800d900:	4456      	add	r6, sl
 800d902:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d906:	edc7 0a00 	vstr	s1, [r7]
 800d90a:	4453      	add	r3, sl
 800d90c:	ed80 2a00 	vstr	s4, [r0]
 800d910:	edc0 2a01 	vstr	s5, [r0, #4]
 800d914:	4457      	add	r7, sl
 800d916:	edc2 1a00 	vstr	s3, [r2]
 800d91a:	ed82 7a01 	vstr	s14, [r2, #4]
 800d91e:	4450      	add	r0, sl
 800d920:	ed85 8a00 	vstr	s16, [r5]
 800d924:	ed85 0a01 	vstr	s0, [r5, #4]
 800d928:	4452      	add	r2, sl
 800d92a:	edc1 4a00 	vstr	s9, [r1]
 800d92e:	4455      	add	r5, sl
 800d930:	ed81 3a01 	vstr	s6, [r1, #4]
 800d934:	edc4 8a00 	vstr	s17, [r4]
 800d938:	ed84 6a01 	vstr	s12, [r4, #4]
 800d93c:	4451      	add	r1, sl
 800d93e:	4454      	add	r4, sl
 800d940:	f63f aeea 	bhi.w	800d718 <arm_radix8_butterfly_f32+0x2fc>
 800d944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d946:	3308      	adds	r3, #8
 800d948:	930b      	str	r3, [sp, #44]	; 0x2c
 800d94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d94c:	3308      	adds	r3, #8
 800d94e:	930a      	str	r3, [sp, #40]	; 0x28
 800d950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d952:	3308      	adds	r3, #8
 800d954:	9309      	str	r3, [sp, #36]	; 0x24
 800d956:	9b08      	ldr	r3, [sp, #32]
 800d958:	3308      	adds	r3, #8
 800d95a:	9308      	str	r3, [sp, #32]
 800d95c:	9b07      	ldr	r3, [sp, #28]
 800d95e:	3308      	adds	r3, #8
 800d960:	9307      	str	r3, [sp, #28]
 800d962:	9b06      	ldr	r3, [sp, #24]
 800d964:	3308      	adds	r3, #8
 800d966:	9306      	str	r3, [sp, #24]
 800d968:	9b05      	ldr	r3, [sp, #20]
 800d96a:	3308      	adds	r3, #8
 800d96c:	9305      	str	r3, [sp, #20]
 800d96e:	9b04      	ldr	r3, [sp, #16]
 800d970:	3308      	adds	r3, #8
 800d972:	9304      	str	r3, [sp, #16]
 800d974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d976:	f109 0901 	add.w	r9, r9, #1
 800d97a:	454b      	cmp	r3, r9
 800d97c:	f47f ae7d 	bne.w	800d67a <arm_radix8_butterfly_f32+0x25e>
 800d980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d982:	00db      	lsls	r3, r3, #3
 800d984:	b29b      	uxth	r3, r3
 800d986:	46d9      	mov	r9, fp
 800d988:	9310      	str	r3, [sp, #64]	; 0x40
 800d98a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800d98e:	e554      	b.n	800d43a <arm_radix8_butterfly_f32+0x1e>
 800d990:	b015      	add	sp, #84	; 0x54
 800d992:	ecbd 8b10 	vpop	{d8-d15}
 800d996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99a:	bf00      	nop

0800d99c <_ZdlPvj>:
 800d99c:	f000 b815 	b.w	800d9ca <_ZdlPv>

0800d9a0 <_ZdaPv>:
 800d9a0:	f000 b813 	b.w	800d9ca <_ZdlPv>

0800d9a4 <_Znwj>:
 800d9a4:	2801      	cmp	r0, #1
 800d9a6:	bf38      	it	cc
 800d9a8:	2001      	movcc	r0, #1
 800d9aa:	b510      	push	{r4, lr}
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f002 fcce 	bl	8010350 <malloc>
 800d9b4:	b930      	cbnz	r0, 800d9c4 <_Znwj+0x20>
 800d9b6:	f000 f80b 	bl	800d9d0 <_ZSt15get_new_handlerv>
 800d9ba:	b908      	cbnz	r0, 800d9c0 <_Znwj+0x1c>
 800d9bc:	f002 fc8e 	bl	80102dc <abort>
 800d9c0:	4780      	blx	r0
 800d9c2:	e7f4      	b.n	800d9ae <_Znwj+0xa>
 800d9c4:	bd10      	pop	{r4, pc}

0800d9c6 <_Znaj>:
 800d9c6:	f7ff bfed 	b.w	800d9a4 <_Znwj>

0800d9ca <_ZdlPv>:
 800d9ca:	f002 bcc9 	b.w	8010360 <free>
	...

0800d9d0 <_ZSt15get_new_handlerv>:
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <_ZSt15get_new_handlerv+0xc>)
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	f3bf 8f5b 	dmb	ish
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	20001068 	.word	0x20001068

0800d9e0 <ceil>:
 800d9e0:	ec51 0b10 	vmov	r0, r1, d0
 800d9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d9ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d9f0:	2e13      	cmp	r6, #19
 800d9f2:	ee10 5a10 	vmov	r5, s0
 800d9f6:	ee10 8a10 	vmov	r8, s0
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	dc30      	bgt.n	800da60 <ceil+0x80>
 800d9fe:	2e00      	cmp	r6, #0
 800da00:	da12      	bge.n	800da28 <ceil+0x48>
 800da02:	a335      	add	r3, pc, #212	; (adr r3, 800dad8 <ceil+0xf8>)
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	f7f2 fc40 	bl	800028c <__adddf3>
 800da0c:	2200      	movs	r2, #0
 800da0e:	2300      	movs	r3, #0
 800da10:	f7f3 f882 	bl	8000b18 <__aeabi_dcmpgt>
 800da14:	b128      	cbz	r0, 800da22 <ceil+0x42>
 800da16:	2c00      	cmp	r4, #0
 800da18:	db55      	blt.n	800dac6 <ceil+0xe6>
 800da1a:	432c      	orrs	r4, r5
 800da1c:	d057      	beq.n	800dace <ceil+0xee>
 800da1e:	4c30      	ldr	r4, [pc, #192]	; (800dae0 <ceil+0x100>)
 800da20:	2500      	movs	r5, #0
 800da22:	4621      	mov	r1, r4
 800da24:	4628      	mov	r0, r5
 800da26:	e025      	b.n	800da74 <ceil+0x94>
 800da28:	4f2e      	ldr	r7, [pc, #184]	; (800dae4 <ceil+0x104>)
 800da2a:	4137      	asrs	r7, r6
 800da2c:	ea01 0307 	and.w	r3, r1, r7
 800da30:	4303      	orrs	r3, r0
 800da32:	d01f      	beq.n	800da74 <ceil+0x94>
 800da34:	a328      	add	r3, pc, #160	; (adr r3, 800dad8 <ceil+0xf8>)
 800da36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3a:	f7f2 fc27 	bl	800028c <__adddf3>
 800da3e:	2200      	movs	r2, #0
 800da40:	2300      	movs	r3, #0
 800da42:	f7f3 f869 	bl	8000b18 <__aeabi_dcmpgt>
 800da46:	2800      	cmp	r0, #0
 800da48:	d0eb      	beq.n	800da22 <ceil+0x42>
 800da4a:	2c00      	cmp	r4, #0
 800da4c:	bfc2      	ittt	gt
 800da4e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800da52:	fa43 f606 	asrgt.w	r6, r3, r6
 800da56:	19a4      	addgt	r4, r4, r6
 800da58:	ea24 0407 	bic.w	r4, r4, r7
 800da5c:	2500      	movs	r5, #0
 800da5e:	e7e0      	b.n	800da22 <ceil+0x42>
 800da60:	2e33      	cmp	r6, #51	; 0x33
 800da62:	dd0b      	ble.n	800da7c <ceil+0x9c>
 800da64:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800da68:	d104      	bne.n	800da74 <ceil+0x94>
 800da6a:	ee10 2a10 	vmov	r2, s0
 800da6e:	460b      	mov	r3, r1
 800da70:	f7f2 fc0c 	bl	800028c <__adddf3>
 800da74:	ec41 0b10 	vmov	d0, r0, r1
 800da78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da7c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800da80:	f04f 33ff 	mov.w	r3, #4294967295
 800da84:	fa23 f707 	lsr.w	r7, r3, r7
 800da88:	4207      	tst	r7, r0
 800da8a:	d0f3      	beq.n	800da74 <ceil+0x94>
 800da8c:	a312      	add	r3, pc, #72	; (adr r3, 800dad8 <ceil+0xf8>)
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	f7f2 fbfb 	bl	800028c <__adddf3>
 800da96:	2200      	movs	r2, #0
 800da98:	2300      	movs	r3, #0
 800da9a:	f7f3 f83d 	bl	8000b18 <__aeabi_dcmpgt>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d0bf      	beq.n	800da22 <ceil+0x42>
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	dd02      	ble.n	800daac <ceil+0xcc>
 800daa6:	2e14      	cmp	r6, #20
 800daa8:	d103      	bne.n	800dab2 <ceil+0xd2>
 800daaa:	3401      	adds	r4, #1
 800daac:	ea25 0507 	bic.w	r5, r5, r7
 800dab0:	e7b7      	b.n	800da22 <ceil+0x42>
 800dab2:	2301      	movs	r3, #1
 800dab4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dab8:	fa03 f606 	lsl.w	r6, r3, r6
 800dabc:	4435      	add	r5, r6
 800dabe:	4545      	cmp	r5, r8
 800dac0:	bf38      	it	cc
 800dac2:	18e4      	addcc	r4, r4, r3
 800dac4:	e7f2      	b.n	800daac <ceil+0xcc>
 800dac6:	2500      	movs	r5, #0
 800dac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dacc:	e7a9      	b.n	800da22 <ceil+0x42>
 800dace:	4625      	mov	r5, r4
 800dad0:	e7a7      	b.n	800da22 <ceil+0x42>
 800dad2:	bf00      	nop
 800dad4:	f3af 8000 	nop.w
 800dad8:	8800759c 	.word	0x8800759c
 800dadc:	7e37e43c 	.word	0x7e37e43c
 800dae0:	3ff00000 	.word	0x3ff00000
 800dae4:	000fffff 	.word	0x000fffff

0800dae8 <cos>:
 800dae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daea:	ec53 2b10 	vmov	r2, r3, d0
 800daee:	4824      	ldr	r0, [pc, #144]	; (800db80 <cos+0x98>)
 800daf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800daf4:	4281      	cmp	r1, r0
 800daf6:	dc06      	bgt.n	800db06 <cos+0x1e>
 800daf8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800db78 <cos+0x90>
 800dafc:	f001 fd64 	bl	800f5c8 <__kernel_cos>
 800db00:	ec51 0b10 	vmov	r0, r1, d0
 800db04:	e007      	b.n	800db16 <cos+0x2e>
 800db06:	481f      	ldr	r0, [pc, #124]	; (800db84 <cos+0x9c>)
 800db08:	4281      	cmp	r1, r0
 800db0a:	dd09      	ble.n	800db20 <cos+0x38>
 800db0c:	ee10 0a10 	vmov	r0, s0
 800db10:	4619      	mov	r1, r3
 800db12:	f7f2 fbb9 	bl	8000288 <__aeabi_dsub>
 800db16:	ec41 0b10 	vmov	d0, r0, r1
 800db1a:	b005      	add	sp, #20
 800db1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800db20:	4668      	mov	r0, sp
 800db22:	f001 f8c9 	bl	800ecb8 <__ieee754_rem_pio2>
 800db26:	f000 0003 	and.w	r0, r0, #3
 800db2a:	2801      	cmp	r0, #1
 800db2c:	d007      	beq.n	800db3e <cos+0x56>
 800db2e:	2802      	cmp	r0, #2
 800db30:	d012      	beq.n	800db58 <cos+0x70>
 800db32:	b9c0      	cbnz	r0, 800db66 <cos+0x7e>
 800db34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db38:	ed9d 0b00 	vldr	d0, [sp]
 800db3c:	e7de      	b.n	800dafc <cos+0x14>
 800db3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db42:	ed9d 0b00 	vldr	d0, [sp]
 800db46:	f002 f947 	bl	800fdd8 <__kernel_sin>
 800db4a:	ec53 2b10 	vmov	r2, r3, d0
 800db4e:	ee10 0a10 	vmov	r0, s0
 800db52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db56:	e7de      	b.n	800db16 <cos+0x2e>
 800db58:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db5c:	ed9d 0b00 	vldr	d0, [sp]
 800db60:	f001 fd32 	bl	800f5c8 <__kernel_cos>
 800db64:	e7f1      	b.n	800db4a <cos+0x62>
 800db66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db6a:	ed9d 0b00 	vldr	d0, [sp]
 800db6e:	2001      	movs	r0, #1
 800db70:	f002 f932 	bl	800fdd8 <__kernel_sin>
 800db74:	e7c4      	b.n	800db00 <cos+0x18>
 800db76:	bf00      	nop
	...
 800db80:	3fe921fb 	.word	0x3fe921fb
 800db84:	7fefffff 	.word	0x7fefffff

0800db88 <roundf>:
 800db88:	ee10 0a10 	vmov	r0, s0
 800db8c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800db90:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800db94:	2a16      	cmp	r2, #22
 800db96:	dc15      	bgt.n	800dbc4 <roundf+0x3c>
 800db98:	2a00      	cmp	r2, #0
 800db9a:	da08      	bge.n	800dbae <roundf+0x26>
 800db9c:	3201      	adds	r2, #1
 800db9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800dba2:	d101      	bne.n	800dba8 <roundf+0x20>
 800dba4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800dba8:	ee00 3a10 	vmov	s0, r3
 800dbac:	4770      	bx	lr
 800dbae:	4908      	ldr	r1, [pc, #32]	; (800dbd0 <roundf+0x48>)
 800dbb0:	4111      	asrs	r1, r2
 800dbb2:	4208      	tst	r0, r1
 800dbb4:	d0fa      	beq.n	800dbac <roundf+0x24>
 800dbb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dbba:	4113      	asrs	r3, r2
 800dbbc:	4403      	add	r3, r0
 800dbbe:	ea23 0301 	bic.w	r3, r3, r1
 800dbc2:	e7f1      	b.n	800dba8 <roundf+0x20>
 800dbc4:	2a80      	cmp	r2, #128	; 0x80
 800dbc6:	d1f1      	bne.n	800dbac <roundf+0x24>
 800dbc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	007fffff 	.word	0x007fffff
 800dbd4:	00000000 	.word	0x00000000

0800dbd8 <log>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	ed2d 8b02 	vpush	{d8}
 800dbde:	ec55 4b10 	vmov	r4, r5, d0
 800dbe2:	f000 f989 	bl	800def8 <__ieee754_log>
 800dbe6:	4b1e      	ldr	r3, [pc, #120]	; (800dc60 <log+0x88>)
 800dbe8:	eeb0 8a40 	vmov.f32	s16, s0
 800dbec:	eef0 8a60 	vmov.f32	s17, s1
 800dbf0:	f993 3000 	ldrsb.w	r3, [r3]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	d01a      	beq.n	800dc2e <log+0x56>
 800dbf8:	4622      	mov	r2, r4
 800dbfa:	462b      	mov	r3, r5
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 ff94 	bl	8000b2c <__aeabi_dcmpun>
 800dc04:	b998      	cbnz	r0, 800dc2e <log+0x56>
 800dc06:	2200      	movs	r2, #0
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	f7f2 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 800dc12:	b960      	cbnz	r0, 800dc2e <log+0x56>
 800dc14:	2200      	movs	r2, #0
 800dc16:	2300      	movs	r3, #0
 800dc18:	4620      	mov	r0, r4
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	f7f2 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc20:	b160      	cbz	r0, 800dc3c <log+0x64>
 800dc22:	f002 fb6b 	bl	80102fc <__errno>
 800dc26:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800dc58 <log+0x80>
 800dc2a:	2322      	movs	r3, #34	; 0x22
 800dc2c:	6003      	str	r3, [r0, #0]
 800dc2e:	eeb0 0a48 	vmov.f32	s0, s16
 800dc32:	eef0 0a68 	vmov.f32	s1, s17
 800dc36:	ecbd 8b02 	vpop	{d8}
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	f002 fb5e 	bl	80102fc <__errno>
 800dc40:	ecbd 8b02 	vpop	{d8}
 800dc44:	2321      	movs	r3, #33	; 0x21
 800dc46:	6003      	str	r3, [r0, #0]
 800dc48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc4c:	4805      	ldr	r0, [pc, #20]	; (800dc64 <log+0x8c>)
 800dc4e:	f002 ba17 	b.w	8010080 <nan>
 800dc52:	bf00      	nop
 800dc54:	f3af 8000 	nop.w
 800dc58:	00000000 	.word	0x00000000
 800dc5c:	fff00000 	.word	0xfff00000
 800dc60:	20000c24 	.word	0x20000c24
 800dc64:	08067c55 	.word	0x08067c55

0800dc68 <pow>:
 800dc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc6c:	ec59 8b10 	vmov	r8, r9, d0
 800dc70:	ec57 6b11 	vmov	r6, r7, d1
 800dc74:	f000 fafc 	bl	800e270 <__ieee754_pow>
 800dc78:	4b4e      	ldr	r3, [pc, #312]	; (800ddb4 <pow+0x14c>)
 800dc7a:	f993 3000 	ldrsb.w	r3, [r3]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	ec55 4b10 	vmov	r4, r5, d0
 800dc84:	d015      	beq.n	800dcb2 <pow+0x4a>
 800dc86:	4632      	mov	r2, r6
 800dc88:	463b      	mov	r3, r7
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	f7f2 ff4d 	bl	8000b2c <__aeabi_dcmpun>
 800dc92:	b970      	cbnz	r0, 800dcb2 <pow+0x4a>
 800dc94:	4642      	mov	r2, r8
 800dc96:	464b      	mov	r3, r9
 800dc98:	4640      	mov	r0, r8
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	f7f2 ff46 	bl	8000b2c <__aeabi_dcmpun>
 800dca0:	2200      	movs	r2, #0
 800dca2:	2300      	movs	r3, #0
 800dca4:	b148      	cbz	r0, 800dcba <pow+0x52>
 800dca6:	4630      	mov	r0, r6
 800dca8:	4639      	mov	r1, r7
 800dcaa:	f7f2 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d17d      	bne.n	800ddae <pow+0x146>
 800dcb2:	ec45 4b10 	vmov	d0, r4, r5
 800dcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcba:	4640      	mov	r0, r8
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	f7f2 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcc2:	b1e0      	cbz	r0, 800dcfe <pow+0x96>
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	4630      	mov	r0, r6
 800dcca:	4639      	mov	r1, r7
 800dccc:	f7f2 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d16c      	bne.n	800ddae <pow+0x146>
 800dcd4:	ec47 6b10 	vmov	d0, r6, r7
 800dcd8:	f002 f945 	bl	800ff66 <finite>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	d0e8      	beq.n	800dcb2 <pow+0x4a>
 800dce0:	2200      	movs	r2, #0
 800dce2:	2300      	movs	r3, #0
 800dce4:	4630      	mov	r0, r6
 800dce6:	4639      	mov	r1, r7
 800dce8:	f7f2 fef8 	bl	8000adc <__aeabi_dcmplt>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d0e0      	beq.n	800dcb2 <pow+0x4a>
 800dcf0:	f002 fb04 	bl	80102fc <__errno>
 800dcf4:	2321      	movs	r3, #33	; 0x21
 800dcf6:	6003      	str	r3, [r0, #0]
 800dcf8:	2400      	movs	r4, #0
 800dcfa:	4d2f      	ldr	r5, [pc, #188]	; (800ddb8 <pow+0x150>)
 800dcfc:	e7d9      	b.n	800dcb2 <pow+0x4a>
 800dcfe:	ec45 4b10 	vmov	d0, r4, r5
 800dd02:	f002 f930 	bl	800ff66 <finite>
 800dd06:	bbb8      	cbnz	r0, 800dd78 <pow+0x110>
 800dd08:	ec49 8b10 	vmov	d0, r8, r9
 800dd0c:	f002 f92b 	bl	800ff66 <finite>
 800dd10:	b390      	cbz	r0, 800dd78 <pow+0x110>
 800dd12:	ec47 6b10 	vmov	d0, r6, r7
 800dd16:	f002 f926 	bl	800ff66 <finite>
 800dd1a:	b368      	cbz	r0, 800dd78 <pow+0x110>
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	462b      	mov	r3, r5
 800dd20:	4620      	mov	r0, r4
 800dd22:	4629      	mov	r1, r5
 800dd24:	f7f2 ff02 	bl	8000b2c <__aeabi_dcmpun>
 800dd28:	b160      	cbz	r0, 800dd44 <pow+0xdc>
 800dd2a:	f002 fae7 	bl	80102fc <__errno>
 800dd2e:	2321      	movs	r3, #33	; 0x21
 800dd30:	6003      	str	r3, [r0, #0]
 800dd32:	2200      	movs	r2, #0
 800dd34:	2300      	movs	r3, #0
 800dd36:	4610      	mov	r0, r2
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f7f2 fd87 	bl	800084c <__aeabi_ddiv>
 800dd3e:	4604      	mov	r4, r0
 800dd40:	460d      	mov	r5, r1
 800dd42:	e7b6      	b.n	800dcb2 <pow+0x4a>
 800dd44:	f002 fada 	bl	80102fc <__errno>
 800dd48:	2322      	movs	r3, #34	; 0x22
 800dd4a:	6003      	str	r3, [r0, #0]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	2300      	movs	r3, #0
 800dd50:	4640      	mov	r0, r8
 800dd52:	4649      	mov	r1, r9
 800dd54:	f7f2 fec2 	bl	8000adc <__aeabi_dcmplt>
 800dd58:	2400      	movs	r4, #0
 800dd5a:	b158      	cbz	r0, 800dd74 <pow+0x10c>
 800dd5c:	ec47 6b10 	vmov	d0, r6, r7
 800dd60:	f002 f996 	bl	8010090 <rint>
 800dd64:	4632      	mov	r2, r6
 800dd66:	ec51 0b10 	vmov	r0, r1, d0
 800dd6a:	463b      	mov	r3, r7
 800dd6c:	f7f2 feac 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d0c2      	beq.n	800dcfa <pow+0x92>
 800dd74:	4d11      	ldr	r5, [pc, #68]	; (800ddbc <pow+0x154>)
 800dd76:	e79c      	b.n	800dcb2 <pow+0x4a>
 800dd78:	2200      	movs	r2, #0
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7f2 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d094      	beq.n	800dcb2 <pow+0x4a>
 800dd88:	ec49 8b10 	vmov	d0, r8, r9
 800dd8c:	f002 f8eb 	bl	800ff66 <finite>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d08e      	beq.n	800dcb2 <pow+0x4a>
 800dd94:	ec47 6b10 	vmov	d0, r6, r7
 800dd98:	f002 f8e5 	bl	800ff66 <finite>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d088      	beq.n	800dcb2 <pow+0x4a>
 800dda0:	f002 faac 	bl	80102fc <__errno>
 800dda4:	2322      	movs	r3, #34	; 0x22
 800dda6:	6003      	str	r3, [r0, #0]
 800dda8:	2400      	movs	r4, #0
 800ddaa:	2500      	movs	r5, #0
 800ddac:	e781      	b.n	800dcb2 <pow+0x4a>
 800ddae:	4d04      	ldr	r5, [pc, #16]	; (800ddc0 <pow+0x158>)
 800ddb0:	2400      	movs	r4, #0
 800ddb2:	e77e      	b.n	800dcb2 <pow+0x4a>
 800ddb4:	20000c24 	.word	0x20000c24
 800ddb8:	fff00000 	.word	0xfff00000
 800ddbc:	7ff00000 	.word	0x7ff00000
 800ddc0:	3ff00000 	.word	0x3ff00000

0800ddc4 <expf>:
 800ddc4:	b508      	push	{r3, lr}
 800ddc6:	ed2d 8b02 	vpush	{d8}
 800ddca:	eef0 8a40 	vmov.f32	s17, s0
 800ddce:	f001 fa31 	bl	800f234 <__ieee754_expf>
 800ddd2:	4b16      	ldr	r3, [pc, #88]	; (800de2c <expf+0x68>)
 800ddd4:	f993 3000 	ldrsb.w	r3, [r3]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	eeb0 8a40 	vmov.f32	s16, s0
 800ddde:	d011      	beq.n	800de04 <expf+0x40>
 800dde0:	eeb0 0a68 	vmov.f32	s0, s17
 800dde4:	f002 fa66 	bl	80102b4 <finitef>
 800dde8:	b160      	cbz	r0, 800de04 <expf+0x40>
 800ddea:	eddf 7a11 	vldr	s15, [pc, #68]	; 800de30 <expf+0x6c>
 800ddee:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ddf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf6:	dd0a      	ble.n	800de0e <expf+0x4a>
 800ddf8:	f002 fa80 	bl	80102fc <__errno>
 800ddfc:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800de34 <expf+0x70>
 800de00:	2322      	movs	r3, #34	; 0x22
 800de02:	6003      	str	r3, [r0, #0]
 800de04:	eeb0 0a48 	vmov.f32	s0, s16
 800de08:	ecbd 8b02 	vpop	{d8}
 800de0c:	bd08      	pop	{r3, pc}
 800de0e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800de38 <expf+0x74>
 800de12:	eef4 8ae7 	vcmpe.f32	s17, s15
 800de16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1a:	d5f3      	bpl.n	800de04 <expf+0x40>
 800de1c:	f002 fa6e 	bl	80102fc <__errno>
 800de20:	2322      	movs	r3, #34	; 0x22
 800de22:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800de3c <expf+0x78>
 800de26:	6003      	str	r3, [r0, #0]
 800de28:	e7ec      	b.n	800de04 <expf+0x40>
 800de2a:	bf00      	nop
 800de2c:	20000c24 	.word	0x20000c24
 800de30:	42b17180 	.word	0x42b17180
 800de34:	7f800000 	.word	0x7f800000
 800de38:	c2cff1b5 	.word	0xc2cff1b5
 800de3c:	00000000 	.word	0x00000000

0800de40 <logf>:
 800de40:	b508      	push	{r3, lr}
 800de42:	ed2d 8b02 	vpush	{d8}
 800de46:	eeb0 8a40 	vmov.f32	s16, s0
 800de4a:	f001 fac7 	bl	800f3dc <__ieee754_logf>
 800de4e:	4b14      	ldr	r3, [pc, #80]	; (800dea0 <logf+0x60>)
 800de50:	f993 3000 	ldrsb.w	r3, [r3]
 800de54:	3301      	adds	r3, #1
 800de56:	d014      	beq.n	800de82 <logf+0x42>
 800de58:	eeb4 8a48 	vcmp.f32	s16, s16
 800de5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de60:	d60f      	bvs.n	800de82 <logf+0x42>
 800de62:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800de66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6a:	dc0a      	bgt.n	800de82 <logf+0x42>
 800de6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de74:	d108      	bne.n	800de88 <logf+0x48>
 800de76:	f002 fa41 	bl	80102fc <__errno>
 800de7a:	2322      	movs	r3, #34	; 0x22
 800de7c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800dea4 <logf+0x64>
 800de80:	6003      	str	r3, [r0, #0]
 800de82:	ecbd 8b02 	vpop	{d8}
 800de86:	bd08      	pop	{r3, pc}
 800de88:	f002 fa38 	bl	80102fc <__errno>
 800de8c:	ecbd 8b02 	vpop	{d8}
 800de90:	2321      	movs	r3, #33	; 0x21
 800de92:	6003      	str	r3, [r0, #0]
 800de94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de98:	4803      	ldr	r0, [pc, #12]	; (800dea8 <logf+0x68>)
 800de9a:	f002 ba19 	b.w	80102d0 <nanf>
 800de9e:	bf00      	nop
 800dea0:	20000c24 	.word	0x20000c24
 800dea4:	ff800000 	.word	0xff800000
 800dea8:	08067c55 	.word	0x08067c55

0800deac <sqrtf>:
 800deac:	b508      	push	{r3, lr}
 800deae:	ed2d 8b02 	vpush	{d8}
 800deb2:	eeb0 8a40 	vmov.f32	s16, s0
 800deb6:	f001 fb81 	bl	800f5bc <__ieee754_sqrtf>
 800deba:	4b0d      	ldr	r3, [pc, #52]	; (800def0 <sqrtf+0x44>)
 800debc:	f993 3000 	ldrsb.w	r3, [r3]
 800dec0:	3301      	adds	r3, #1
 800dec2:	d011      	beq.n	800dee8 <sqrtf+0x3c>
 800dec4:	eeb4 8a48 	vcmp.f32	s16, s16
 800dec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800decc:	d60c      	bvs.n	800dee8 <sqrtf+0x3c>
 800dece:	eddf 8a09 	vldr	s17, [pc, #36]	; 800def4 <sqrtf+0x48>
 800ded2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ded6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deda:	d505      	bpl.n	800dee8 <sqrtf+0x3c>
 800dedc:	f002 fa0e 	bl	80102fc <__errno>
 800dee0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dee4:	2321      	movs	r3, #33	; 0x21
 800dee6:	6003      	str	r3, [r0, #0]
 800dee8:	ecbd 8b02 	vpop	{d8}
 800deec:	bd08      	pop	{r3, pc}
 800deee:	bf00      	nop
 800def0:	20000c24 	.word	0x20000c24
 800def4:	00000000 	.word	0x00000000

0800def8 <__ieee754_log>:
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	ec51 0b10 	vmov	r0, r1, d0
 800df00:	ed2d 8b04 	vpush	{d8-d9}
 800df04:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800df08:	b083      	sub	sp, #12
 800df0a:	460d      	mov	r5, r1
 800df0c:	da29      	bge.n	800df62 <__ieee754_log+0x6a>
 800df0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df12:	4303      	orrs	r3, r0
 800df14:	ee10 2a10 	vmov	r2, s0
 800df18:	d10c      	bne.n	800df34 <__ieee754_log+0x3c>
 800df1a:	49cf      	ldr	r1, [pc, #828]	; (800e258 <__ieee754_log+0x360>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	2300      	movs	r3, #0
 800df20:	2000      	movs	r0, #0
 800df22:	f7f2 fc93 	bl	800084c <__aeabi_ddiv>
 800df26:	ec41 0b10 	vmov	d0, r0, r1
 800df2a:	b003      	add	sp, #12
 800df2c:	ecbd 8b04 	vpop	{d8-d9}
 800df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df34:	2900      	cmp	r1, #0
 800df36:	da05      	bge.n	800df44 <__ieee754_log+0x4c>
 800df38:	460b      	mov	r3, r1
 800df3a:	f7f2 f9a5 	bl	8000288 <__aeabi_dsub>
 800df3e:	2200      	movs	r2, #0
 800df40:	2300      	movs	r3, #0
 800df42:	e7ee      	b.n	800df22 <__ieee754_log+0x2a>
 800df44:	4bc5      	ldr	r3, [pc, #788]	; (800e25c <__ieee754_log+0x364>)
 800df46:	2200      	movs	r2, #0
 800df48:	f7f2 fb56 	bl	80005f8 <__aeabi_dmul>
 800df4c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800df50:	460d      	mov	r5, r1
 800df52:	4ac3      	ldr	r2, [pc, #780]	; (800e260 <__ieee754_log+0x368>)
 800df54:	4295      	cmp	r5, r2
 800df56:	dd06      	ble.n	800df66 <__ieee754_log+0x6e>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	f7f2 f996 	bl	800028c <__adddf3>
 800df60:	e7e1      	b.n	800df26 <__ieee754_log+0x2e>
 800df62:	2300      	movs	r3, #0
 800df64:	e7f5      	b.n	800df52 <__ieee754_log+0x5a>
 800df66:	152c      	asrs	r4, r5, #20
 800df68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800df6c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800df70:	441c      	add	r4, r3
 800df72:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800df76:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800df7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df7e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800df82:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800df86:	ea42 0105 	orr.w	r1, r2, r5
 800df8a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800df8e:	2200      	movs	r2, #0
 800df90:	4bb4      	ldr	r3, [pc, #720]	; (800e264 <__ieee754_log+0x36c>)
 800df92:	f7f2 f979 	bl	8000288 <__aeabi_dsub>
 800df96:	1cab      	adds	r3, r5, #2
 800df98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	4682      	mov	sl, r0
 800dfa0:	468b      	mov	fp, r1
 800dfa2:	f04f 0200 	mov.w	r2, #0
 800dfa6:	dc53      	bgt.n	800e050 <__ieee754_log+0x158>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f7f2 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfae:	b1d0      	cbz	r0, 800dfe6 <__ieee754_log+0xee>
 800dfb0:	2c00      	cmp	r4, #0
 800dfb2:	f000 8122 	beq.w	800e1fa <__ieee754_log+0x302>
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f7f2 fab4 	bl	8000524 <__aeabi_i2d>
 800dfbc:	a390      	add	r3, pc, #576	; (adr r3, 800e200 <__ieee754_log+0x308>)
 800dfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	460f      	mov	r7, r1
 800dfc6:	f7f2 fb17 	bl	80005f8 <__aeabi_dmul>
 800dfca:	a38f      	add	r3, pc, #572	; (adr r3, 800e208 <__ieee754_log+0x310>)
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	4639      	mov	r1, r7
 800dfd8:	f7f2 fb0e 	bl	80005f8 <__aeabi_dmul>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	e7ba      	b.n	800df5c <__ieee754_log+0x64>
 800dfe6:	a38a      	add	r3, pc, #552	; (adr r3, 800e210 <__ieee754_log+0x318>)
 800dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfec:	4650      	mov	r0, sl
 800dfee:	4659      	mov	r1, fp
 800dff0:	f7f2 fb02 	bl	80005f8 <__aeabi_dmul>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	2000      	movs	r0, #0
 800dffa:	499b      	ldr	r1, [pc, #620]	; (800e268 <__ieee754_log+0x370>)
 800dffc:	f7f2 f944 	bl	8000288 <__aeabi_dsub>
 800e000:	4652      	mov	r2, sl
 800e002:	4606      	mov	r6, r0
 800e004:	460f      	mov	r7, r1
 800e006:	465b      	mov	r3, fp
 800e008:	4650      	mov	r0, sl
 800e00a:	4659      	mov	r1, fp
 800e00c:	f7f2 faf4 	bl	80005f8 <__aeabi_dmul>
 800e010:	4602      	mov	r2, r0
 800e012:	460b      	mov	r3, r1
 800e014:	4630      	mov	r0, r6
 800e016:	4639      	mov	r1, r7
 800e018:	f7f2 faee 	bl	80005f8 <__aeabi_dmul>
 800e01c:	4606      	mov	r6, r0
 800e01e:	460f      	mov	r7, r1
 800e020:	b914      	cbnz	r4, 800e028 <__ieee754_log+0x130>
 800e022:	4632      	mov	r2, r6
 800e024:	463b      	mov	r3, r7
 800e026:	e0a2      	b.n	800e16e <__ieee754_log+0x276>
 800e028:	4620      	mov	r0, r4
 800e02a:	f7f2 fa7b 	bl	8000524 <__aeabi_i2d>
 800e02e:	a374      	add	r3, pc, #464	; (adr r3, 800e200 <__ieee754_log+0x308>)
 800e030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e034:	4680      	mov	r8, r0
 800e036:	4689      	mov	r9, r1
 800e038:	f7f2 fade 	bl	80005f8 <__aeabi_dmul>
 800e03c:	a372      	add	r3, pc, #456	; (adr r3, 800e208 <__ieee754_log+0x310>)
 800e03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e042:	4604      	mov	r4, r0
 800e044:	460d      	mov	r5, r1
 800e046:	4640      	mov	r0, r8
 800e048:	4649      	mov	r1, r9
 800e04a:	f7f2 fad5 	bl	80005f8 <__aeabi_dmul>
 800e04e:	e0a7      	b.n	800e1a0 <__ieee754_log+0x2a8>
 800e050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e054:	f7f2 f91a 	bl	800028c <__adddf3>
 800e058:	4602      	mov	r2, r0
 800e05a:	460b      	mov	r3, r1
 800e05c:	4650      	mov	r0, sl
 800e05e:	4659      	mov	r1, fp
 800e060:	f7f2 fbf4 	bl	800084c <__aeabi_ddiv>
 800e064:	ec41 0b18 	vmov	d8, r0, r1
 800e068:	4620      	mov	r0, r4
 800e06a:	f7f2 fa5b 	bl	8000524 <__aeabi_i2d>
 800e06e:	ec53 2b18 	vmov	r2, r3, d8
 800e072:	ec41 0b19 	vmov	d9, r0, r1
 800e076:	ec51 0b18 	vmov	r0, r1, d8
 800e07a:	f7f2 fabd 	bl	80005f8 <__aeabi_dmul>
 800e07e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e082:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e086:	9301      	str	r3, [sp, #4]
 800e088:	4602      	mov	r2, r0
 800e08a:	460b      	mov	r3, r1
 800e08c:	4680      	mov	r8, r0
 800e08e:	4689      	mov	r9, r1
 800e090:	f7f2 fab2 	bl	80005f8 <__aeabi_dmul>
 800e094:	a360      	add	r3, pc, #384	; (adr r3, 800e218 <__ieee754_log+0x320>)
 800e096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09a:	4606      	mov	r6, r0
 800e09c:	460f      	mov	r7, r1
 800e09e:	f7f2 faab 	bl	80005f8 <__aeabi_dmul>
 800e0a2:	a35f      	add	r3, pc, #380	; (adr r3, 800e220 <__ieee754_log+0x328>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	f7f2 f8f0 	bl	800028c <__adddf3>
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	f7f2 faa2 	bl	80005f8 <__aeabi_dmul>
 800e0b4:	a35c      	add	r3, pc, #368	; (adr r3, 800e228 <__ieee754_log+0x330>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	f7f2 f8e7 	bl	800028c <__adddf3>
 800e0be:	4632      	mov	r2, r6
 800e0c0:	463b      	mov	r3, r7
 800e0c2:	f7f2 fa99 	bl	80005f8 <__aeabi_dmul>
 800e0c6:	a35a      	add	r3, pc, #360	; (adr r3, 800e230 <__ieee754_log+0x338>)
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f7f2 f8de 	bl	800028c <__adddf3>
 800e0d0:	4642      	mov	r2, r8
 800e0d2:	464b      	mov	r3, r9
 800e0d4:	f7f2 fa90 	bl	80005f8 <__aeabi_dmul>
 800e0d8:	a357      	add	r3, pc, #348	; (adr r3, 800e238 <__ieee754_log+0x340>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	4680      	mov	r8, r0
 800e0e0:	4689      	mov	r9, r1
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	4639      	mov	r1, r7
 800e0e6:	f7f2 fa87 	bl	80005f8 <__aeabi_dmul>
 800e0ea:	a355      	add	r3, pc, #340	; (adr r3, 800e240 <__ieee754_log+0x348>)
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f7f2 f8cc 	bl	800028c <__adddf3>
 800e0f4:	4632      	mov	r2, r6
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	f7f2 fa7e 	bl	80005f8 <__aeabi_dmul>
 800e0fc:	a352      	add	r3, pc, #328	; (adr r3, 800e248 <__ieee754_log+0x350>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f7f2 f8c3 	bl	800028c <__adddf3>
 800e106:	4632      	mov	r2, r6
 800e108:	463b      	mov	r3, r7
 800e10a:	f7f2 fa75 	bl	80005f8 <__aeabi_dmul>
 800e10e:	460b      	mov	r3, r1
 800e110:	4602      	mov	r2, r0
 800e112:	4649      	mov	r1, r9
 800e114:	4640      	mov	r0, r8
 800e116:	f7f2 f8b9 	bl	800028c <__adddf3>
 800e11a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e11e:	9b01      	ldr	r3, [sp, #4]
 800e120:	3551      	adds	r5, #81	; 0x51
 800e122:	431d      	orrs	r5, r3
 800e124:	2d00      	cmp	r5, #0
 800e126:	4680      	mov	r8, r0
 800e128:	4689      	mov	r9, r1
 800e12a:	dd48      	ble.n	800e1be <__ieee754_log+0x2c6>
 800e12c:	4b4e      	ldr	r3, [pc, #312]	; (800e268 <__ieee754_log+0x370>)
 800e12e:	2200      	movs	r2, #0
 800e130:	4650      	mov	r0, sl
 800e132:	4659      	mov	r1, fp
 800e134:	f7f2 fa60 	bl	80005f8 <__aeabi_dmul>
 800e138:	4652      	mov	r2, sl
 800e13a:	465b      	mov	r3, fp
 800e13c:	f7f2 fa5c 	bl	80005f8 <__aeabi_dmul>
 800e140:	4602      	mov	r2, r0
 800e142:	460b      	mov	r3, r1
 800e144:	4606      	mov	r6, r0
 800e146:	460f      	mov	r7, r1
 800e148:	4640      	mov	r0, r8
 800e14a:	4649      	mov	r1, r9
 800e14c:	f7f2 f89e 	bl	800028c <__adddf3>
 800e150:	ec53 2b18 	vmov	r2, r3, d8
 800e154:	f7f2 fa50 	bl	80005f8 <__aeabi_dmul>
 800e158:	4680      	mov	r8, r0
 800e15a:	4689      	mov	r9, r1
 800e15c:	b964      	cbnz	r4, 800e178 <__ieee754_log+0x280>
 800e15e:	4602      	mov	r2, r0
 800e160:	460b      	mov	r3, r1
 800e162:	4630      	mov	r0, r6
 800e164:	4639      	mov	r1, r7
 800e166:	f7f2 f88f 	bl	8000288 <__aeabi_dsub>
 800e16a:	4602      	mov	r2, r0
 800e16c:	460b      	mov	r3, r1
 800e16e:	4650      	mov	r0, sl
 800e170:	4659      	mov	r1, fp
 800e172:	f7f2 f889 	bl	8000288 <__aeabi_dsub>
 800e176:	e6d6      	b.n	800df26 <__ieee754_log+0x2e>
 800e178:	a321      	add	r3, pc, #132	; (adr r3, 800e200 <__ieee754_log+0x308>)
 800e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17e:	ec51 0b19 	vmov	r0, r1, d9
 800e182:	f7f2 fa39 	bl	80005f8 <__aeabi_dmul>
 800e186:	a320      	add	r3, pc, #128	; (adr r3, 800e208 <__ieee754_log+0x310>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	4604      	mov	r4, r0
 800e18e:	460d      	mov	r5, r1
 800e190:	ec51 0b19 	vmov	r0, r1, d9
 800e194:	f7f2 fa30 	bl	80005f8 <__aeabi_dmul>
 800e198:	4642      	mov	r2, r8
 800e19a:	464b      	mov	r3, r9
 800e19c:	f7f2 f876 	bl	800028c <__adddf3>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	4639      	mov	r1, r7
 800e1a8:	f7f2 f86e 	bl	8000288 <__aeabi_dsub>
 800e1ac:	4652      	mov	r2, sl
 800e1ae:	465b      	mov	r3, fp
 800e1b0:	f7f2 f86a 	bl	8000288 <__aeabi_dsub>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	e7d9      	b.n	800e172 <__ieee754_log+0x27a>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4650      	mov	r0, sl
 800e1c4:	4659      	mov	r1, fp
 800e1c6:	f7f2 f85f 	bl	8000288 <__aeabi_dsub>
 800e1ca:	ec53 2b18 	vmov	r2, r3, d8
 800e1ce:	f7f2 fa13 	bl	80005f8 <__aeabi_dmul>
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	460f      	mov	r7, r1
 800e1d6:	2c00      	cmp	r4, #0
 800e1d8:	f43f af23 	beq.w	800e022 <__ieee754_log+0x12a>
 800e1dc:	a308      	add	r3, pc, #32	; (adr r3, 800e200 <__ieee754_log+0x308>)
 800e1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e2:	ec51 0b19 	vmov	r0, r1, d9
 800e1e6:	f7f2 fa07 	bl	80005f8 <__aeabi_dmul>
 800e1ea:	a307      	add	r3, pc, #28	; (adr r3, 800e208 <__ieee754_log+0x310>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	ec51 0b19 	vmov	r0, r1, d9
 800e1f8:	e727      	b.n	800e04a <__ieee754_log+0x152>
 800e1fa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e250 <__ieee754_log+0x358>
 800e1fe:	e694      	b.n	800df2a <__ieee754_log+0x32>
 800e200:	fee00000 	.word	0xfee00000
 800e204:	3fe62e42 	.word	0x3fe62e42
 800e208:	35793c76 	.word	0x35793c76
 800e20c:	3dea39ef 	.word	0x3dea39ef
 800e210:	55555555 	.word	0x55555555
 800e214:	3fd55555 	.word	0x3fd55555
 800e218:	df3e5244 	.word	0xdf3e5244
 800e21c:	3fc2f112 	.word	0x3fc2f112
 800e220:	96cb03de 	.word	0x96cb03de
 800e224:	3fc74664 	.word	0x3fc74664
 800e228:	94229359 	.word	0x94229359
 800e22c:	3fd24924 	.word	0x3fd24924
 800e230:	55555593 	.word	0x55555593
 800e234:	3fe55555 	.word	0x3fe55555
 800e238:	d078c69f 	.word	0xd078c69f
 800e23c:	3fc39a09 	.word	0x3fc39a09
 800e240:	1d8e78af 	.word	0x1d8e78af
 800e244:	3fcc71c5 	.word	0x3fcc71c5
 800e248:	9997fa04 	.word	0x9997fa04
 800e24c:	3fd99999 	.word	0x3fd99999
	...
 800e258:	c3500000 	.word	0xc3500000
 800e25c:	43500000 	.word	0x43500000
 800e260:	7fefffff 	.word	0x7fefffff
 800e264:	3ff00000 	.word	0x3ff00000
 800e268:	3fe00000 	.word	0x3fe00000
 800e26c:	00000000 	.word	0x00000000

0800e270 <__ieee754_pow>:
 800e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e274:	ed2d 8b06 	vpush	{d8-d10}
 800e278:	b08d      	sub	sp, #52	; 0x34
 800e27a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e27e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e282:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e286:	ea56 0100 	orrs.w	r1, r6, r0
 800e28a:	ec53 2b10 	vmov	r2, r3, d0
 800e28e:	f000 84d1 	beq.w	800ec34 <__ieee754_pow+0x9c4>
 800e292:	497f      	ldr	r1, [pc, #508]	; (800e490 <__ieee754_pow+0x220>)
 800e294:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e298:	428c      	cmp	r4, r1
 800e29a:	ee10 8a10 	vmov	r8, s0
 800e29e:	4699      	mov	r9, r3
 800e2a0:	dc09      	bgt.n	800e2b6 <__ieee754_pow+0x46>
 800e2a2:	d103      	bne.n	800e2ac <__ieee754_pow+0x3c>
 800e2a4:	b97a      	cbnz	r2, 800e2c6 <__ieee754_pow+0x56>
 800e2a6:	42a6      	cmp	r6, r4
 800e2a8:	dd02      	ble.n	800e2b0 <__ieee754_pow+0x40>
 800e2aa:	e00c      	b.n	800e2c6 <__ieee754_pow+0x56>
 800e2ac:	428e      	cmp	r6, r1
 800e2ae:	dc02      	bgt.n	800e2b6 <__ieee754_pow+0x46>
 800e2b0:	428e      	cmp	r6, r1
 800e2b2:	d110      	bne.n	800e2d6 <__ieee754_pow+0x66>
 800e2b4:	b178      	cbz	r0, 800e2d6 <__ieee754_pow+0x66>
 800e2b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2be:	ea54 0308 	orrs.w	r3, r4, r8
 800e2c2:	f000 84b7 	beq.w	800ec34 <__ieee754_pow+0x9c4>
 800e2c6:	4873      	ldr	r0, [pc, #460]	; (800e494 <__ieee754_pow+0x224>)
 800e2c8:	b00d      	add	sp, #52	; 0x34
 800e2ca:	ecbd 8b06 	vpop	{d8-d10}
 800e2ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d2:	f001 bed5 	b.w	8010080 <nan>
 800e2d6:	f1b9 0f00 	cmp.w	r9, #0
 800e2da:	da36      	bge.n	800e34a <__ieee754_pow+0xda>
 800e2dc:	496e      	ldr	r1, [pc, #440]	; (800e498 <__ieee754_pow+0x228>)
 800e2de:	428e      	cmp	r6, r1
 800e2e0:	dc51      	bgt.n	800e386 <__ieee754_pow+0x116>
 800e2e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e2e6:	428e      	cmp	r6, r1
 800e2e8:	f340 84af 	ble.w	800ec4a <__ieee754_pow+0x9da>
 800e2ec:	1531      	asrs	r1, r6, #20
 800e2ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e2f2:	2914      	cmp	r1, #20
 800e2f4:	dd0f      	ble.n	800e316 <__ieee754_pow+0xa6>
 800e2f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e2fa:	fa20 fc01 	lsr.w	ip, r0, r1
 800e2fe:	fa0c f101 	lsl.w	r1, ip, r1
 800e302:	4281      	cmp	r1, r0
 800e304:	f040 84a1 	bne.w	800ec4a <__ieee754_pow+0x9da>
 800e308:	f00c 0c01 	and.w	ip, ip, #1
 800e30c:	f1cc 0102 	rsb	r1, ip, #2
 800e310:	9100      	str	r1, [sp, #0]
 800e312:	b180      	cbz	r0, 800e336 <__ieee754_pow+0xc6>
 800e314:	e059      	b.n	800e3ca <__ieee754_pow+0x15a>
 800e316:	2800      	cmp	r0, #0
 800e318:	d155      	bne.n	800e3c6 <__ieee754_pow+0x156>
 800e31a:	f1c1 0114 	rsb	r1, r1, #20
 800e31e:	fa46 fc01 	asr.w	ip, r6, r1
 800e322:	fa0c f101 	lsl.w	r1, ip, r1
 800e326:	42b1      	cmp	r1, r6
 800e328:	f040 848c 	bne.w	800ec44 <__ieee754_pow+0x9d4>
 800e32c:	f00c 0c01 	and.w	ip, ip, #1
 800e330:	f1cc 0102 	rsb	r1, ip, #2
 800e334:	9100      	str	r1, [sp, #0]
 800e336:	4959      	ldr	r1, [pc, #356]	; (800e49c <__ieee754_pow+0x22c>)
 800e338:	428e      	cmp	r6, r1
 800e33a:	d12d      	bne.n	800e398 <__ieee754_pow+0x128>
 800e33c:	2f00      	cmp	r7, #0
 800e33e:	da79      	bge.n	800e434 <__ieee754_pow+0x1c4>
 800e340:	4956      	ldr	r1, [pc, #344]	; (800e49c <__ieee754_pow+0x22c>)
 800e342:	2000      	movs	r0, #0
 800e344:	f7f2 fa82 	bl	800084c <__aeabi_ddiv>
 800e348:	e016      	b.n	800e378 <__ieee754_pow+0x108>
 800e34a:	2100      	movs	r1, #0
 800e34c:	9100      	str	r1, [sp, #0]
 800e34e:	2800      	cmp	r0, #0
 800e350:	d13b      	bne.n	800e3ca <__ieee754_pow+0x15a>
 800e352:	494f      	ldr	r1, [pc, #316]	; (800e490 <__ieee754_pow+0x220>)
 800e354:	428e      	cmp	r6, r1
 800e356:	d1ee      	bne.n	800e336 <__ieee754_pow+0xc6>
 800e358:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e35c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e360:	ea53 0308 	orrs.w	r3, r3, r8
 800e364:	f000 8466 	beq.w	800ec34 <__ieee754_pow+0x9c4>
 800e368:	4b4d      	ldr	r3, [pc, #308]	; (800e4a0 <__ieee754_pow+0x230>)
 800e36a:	429c      	cmp	r4, r3
 800e36c:	dd0d      	ble.n	800e38a <__ieee754_pow+0x11a>
 800e36e:	2f00      	cmp	r7, #0
 800e370:	f280 8464 	bge.w	800ec3c <__ieee754_pow+0x9cc>
 800e374:	2000      	movs	r0, #0
 800e376:	2100      	movs	r1, #0
 800e378:	ec41 0b10 	vmov	d0, r0, r1
 800e37c:	b00d      	add	sp, #52	; 0x34
 800e37e:	ecbd 8b06 	vpop	{d8-d10}
 800e382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e386:	2102      	movs	r1, #2
 800e388:	e7e0      	b.n	800e34c <__ieee754_pow+0xdc>
 800e38a:	2f00      	cmp	r7, #0
 800e38c:	daf2      	bge.n	800e374 <__ieee754_pow+0x104>
 800e38e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e392:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e396:	e7ef      	b.n	800e378 <__ieee754_pow+0x108>
 800e398:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e39c:	d104      	bne.n	800e3a8 <__ieee754_pow+0x138>
 800e39e:	4610      	mov	r0, r2
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	f7f2 f929 	bl	80005f8 <__aeabi_dmul>
 800e3a6:	e7e7      	b.n	800e378 <__ieee754_pow+0x108>
 800e3a8:	493e      	ldr	r1, [pc, #248]	; (800e4a4 <__ieee754_pow+0x234>)
 800e3aa:	428f      	cmp	r7, r1
 800e3ac:	d10d      	bne.n	800e3ca <__ieee754_pow+0x15a>
 800e3ae:	f1b9 0f00 	cmp.w	r9, #0
 800e3b2:	db0a      	blt.n	800e3ca <__ieee754_pow+0x15a>
 800e3b4:	ec43 2b10 	vmov	d0, r2, r3
 800e3b8:	b00d      	add	sp, #52	; 0x34
 800e3ba:	ecbd 8b06 	vpop	{d8-d10}
 800e3be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c2:	f000 be83 	b.w	800f0cc <__ieee754_sqrt>
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	9100      	str	r1, [sp, #0]
 800e3ca:	ec43 2b10 	vmov	d0, r2, r3
 800e3ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3d2:	f001 fdbf 	bl	800ff54 <fabs>
 800e3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3da:	ec51 0b10 	vmov	r0, r1, d0
 800e3de:	f1b8 0f00 	cmp.w	r8, #0
 800e3e2:	d12a      	bne.n	800e43a <__ieee754_pow+0x1ca>
 800e3e4:	b12c      	cbz	r4, 800e3f2 <__ieee754_pow+0x182>
 800e3e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e49c <__ieee754_pow+0x22c>
 800e3ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e3ee:	45e6      	cmp	lr, ip
 800e3f0:	d123      	bne.n	800e43a <__ieee754_pow+0x1ca>
 800e3f2:	2f00      	cmp	r7, #0
 800e3f4:	da05      	bge.n	800e402 <__ieee754_pow+0x192>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	4927      	ldr	r1, [pc, #156]	; (800e49c <__ieee754_pow+0x22c>)
 800e3fe:	f7f2 fa25 	bl	800084c <__aeabi_ddiv>
 800e402:	f1b9 0f00 	cmp.w	r9, #0
 800e406:	dab7      	bge.n	800e378 <__ieee754_pow+0x108>
 800e408:	9b00      	ldr	r3, [sp, #0]
 800e40a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e40e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e412:	4323      	orrs	r3, r4
 800e414:	d108      	bne.n	800e428 <__ieee754_pow+0x1b8>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4610      	mov	r0, r2
 800e41c:	4619      	mov	r1, r3
 800e41e:	f7f1 ff33 	bl	8000288 <__aeabi_dsub>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	e78d      	b.n	800e344 <__ieee754_pow+0xd4>
 800e428:	9b00      	ldr	r3, [sp, #0]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d1a4      	bne.n	800e378 <__ieee754_pow+0x108>
 800e42e:	4602      	mov	r2, r0
 800e430:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e434:	4610      	mov	r0, r2
 800e436:	4619      	mov	r1, r3
 800e438:	e79e      	b.n	800e378 <__ieee754_pow+0x108>
 800e43a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e43e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e442:	950a      	str	r5, [sp, #40]	; 0x28
 800e444:	9d00      	ldr	r5, [sp, #0]
 800e446:	46ac      	mov	ip, r5
 800e448:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e44a:	ea5c 0505 	orrs.w	r5, ip, r5
 800e44e:	d0e4      	beq.n	800e41a <__ieee754_pow+0x1aa>
 800e450:	4b15      	ldr	r3, [pc, #84]	; (800e4a8 <__ieee754_pow+0x238>)
 800e452:	429e      	cmp	r6, r3
 800e454:	f340 80fc 	ble.w	800e650 <__ieee754_pow+0x3e0>
 800e458:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e45c:	429e      	cmp	r6, r3
 800e45e:	4b10      	ldr	r3, [pc, #64]	; (800e4a0 <__ieee754_pow+0x230>)
 800e460:	dd07      	ble.n	800e472 <__ieee754_pow+0x202>
 800e462:	429c      	cmp	r4, r3
 800e464:	dc0a      	bgt.n	800e47c <__ieee754_pow+0x20c>
 800e466:	2f00      	cmp	r7, #0
 800e468:	da84      	bge.n	800e374 <__ieee754_pow+0x104>
 800e46a:	a307      	add	r3, pc, #28	; (adr r3, 800e488 <__ieee754_pow+0x218>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	e795      	b.n	800e39e <__ieee754_pow+0x12e>
 800e472:	429c      	cmp	r4, r3
 800e474:	dbf7      	blt.n	800e466 <__ieee754_pow+0x1f6>
 800e476:	4b09      	ldr	r3, [pc, #36]	; (800e49c <__ieee754_pow+0x22c>)
 800e478:	429c      	cmp	r4, r3
 800e47a:	dd17      	ble.n	800e4ac <__ieee754_pow+0x23c>
 800e47c:	2f00      	cmp	r7, #0
 800e47e:	dcf4      	bgt.n	800e46a <__ieee754_pow+0x1fa>
 800e480:	e778      	b.n	800e374 <__ieee754_pow+0x104>
 800e482:	bf00      	nop
 800e484:	f3af 8000 	nop.w
 800e488:	8800759c 	.word	0x8800759c
 800e48c:	7e37e43c 	.word	0x7e37e43c
 800e490:	7ff00000 	.word	0x7ff00000
 800e494:	08067c55 	.word	0x08067c55
 800e498:	433fffff 	.word	0x433fffff
 800e49c:	3ff00000 	.word	0x3ff00000
 800e4a0:	3fefffff 	.word	0x3fefffff
 800e4a4:	3fe00000 	.word	0x3fe00000
 800e4a8:	41e00000 	.word	0x41e00000
 800e4ac:	4b64      	ldr	r3, [pc, #400]	; (800e640 <__ieee754_pow+0x3d0>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f7f1 feea 	bl	8000288 <__aeabi_dsub>
 800e4b4:	a356      	add	r3, pc, #344	; (adr r3, 800e610 <__ieee754_pow+0x3a0>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	460d      	mov	r5, r1
 800e4be:	f7f2 f89b 	bl	80005f8 <__aeabi_dmul>
 800e4c2:	a355      	add	r3, pc, #340	; (adr r3, 800e618 <__ieee754_pow+0x3a8>)
 800e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c8:	4606      	mov	r6, r0
 800e4ca:	460f      	mov	r7, r1
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	f7f2 f892 	bl	80005f8 <__aeabi_dmul>
 800e4d4:	4b5b      	ldr	r3, [pc, #364]	; (800e644 <__ieee754_pow+0x3d4>)
 800e4d6:	4682      	mov	sl, r0
 800e4d8:	468b      	mov	fp, r1
 800e4da:	2200      	movs	r2, #0
 800e4dc:	4620      	mov	r0, r4
 800e4de:	4629      	mov	r1, r5
 800e4e0:	f7f2 f88a 	bl	80005f8 <__aeabi_dmul>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	a14d      	add	r1, pc, #308	; (adr r1, 800e620 <__ieee754_pow+0x3b0>)
 800e4ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4ee:	f7f1 fecb 	bl	8000288 <__aeabi_dsub>
 800e4f2:	4622      	mov	r2, r4
 800e4f4:	462b      	mov	r3, r5
 800e4f6:	f7f2 f87f 	bl	80005f8 <__aeabi_dmul>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	2000      	movs	r0, #0
 800e500:	4951      	ldr	r1, [pc, #324]	; (800e648 <__ieee754_pow+0x3d8>)
 800e502:	f7f1 fec1 	bl	8000288 <__aeabi_dsub>
 800e506:	4622      	mov	r2, r4
 800e508:	4680      	mov	r8, r0
 800e50a:	4689      	mov	r9, r1
 800e50c:	462b      	mov	r3, r5
 800e50e:	4620      	mov	r0, r4
 800e510:	4629      	mov	r1, r5
 800e512:	f7f2 f871 	bl	80005f8 <__aeabi_dmul>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4640      	mov	r0, r8
 800e51c:	4649      	mov	r1, r9
 800e51e:	f7f2 f86b 	bl	80005f8 <__aeabi_dmul>
 800e522:	a341      	add	r3, pc, #260	; (adr r3, 800e628 <__ieee754_pow+0x3b8>)
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	f7f2 f866 	bl	80005f8 <__aeabi_dmul>
 800e52c:	4602      	mov	r2, r0
 800e52e:	460b      	mov	r3, r1
 800e530:	4650      	mov	r0, sl
 800e532:	4659      	mov	r1, fp
 800e534:	f7f1 fea8 	bl	8000288 <__aeabi_dsub>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	4680      	mov	r8, r0
 800e53e:	4689      	mov	r9, r1
 800e540:	4630      	mov	r0, r6
 800e542:	4639      	mov	r1, r7
 800e544:	f7f1 fea2 	bl	800028c <__adddf3>
 800e548:	2400      	movs	r4, #0
 800e54a:	4632      	mov	r2, r6
 800e54c:	463b      	mov	r3, r7
 800e54e:	4620      	mov	r0, r4
 800e550:	460d      	mov	r5, r1
 800e552:	f7f1 fe99 	bl	8000288 <__aeabi_dsub>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	4640      	mov	r0, r8
 800e55c:	4649      	mov	r1, r9
 800e55e:	f7f1 fe93 	bl	8000288 <__aeabi_dsub>
 800e562:	9b00      	ldr	r3, [sp, #0]
 800e564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e566:	3b01      	subs	r3, #1
 800e568:	4313      	orrs	r3, r2
 800e56a:	4682      	mov	sl, r0
 800e56c:	468b      	mov	fp, r1
 800e56e:	f040 81f1 	bne.w	800e954 <__ieee754_pow+0x6e4>
 800e572:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e630 <__ieee754_pow+0x3c0>
 800e576:	eeb0 8a47 	vmov.f32	s16, s14
 800e57a:	eef0 8a67 	vmov.f32	s17, s15
 800e57e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e582:	2600      	movs	r6, #0
 800e584:	4632      	mov	r2, r6
 800e586:	463b      	mov	r3, r7
 800e588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e58c:	f7f1 fe7c 	bl	8000288 <__aeabi_dsub>
 800e590:	4622      	mov	r2, r4
 800e592:	462b      	mov	r3, r5
 800e594:	f7f2 f830 	bl	80005f8 <__aeabi_dmul>
 800e598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e59c:	4680      	mov	r8, r0
 800e59e:	4689      	mov	r9, r1
 800e5a0:	4650      	mov	r0, sl
 800e5a2:	4659      	mov	r1, fp
 800e5a4:	f7f2 f828 	bl	80005f8 <__aeabi_dmul>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	4640      	mov	r0, r8
 800e5ae:	4649      	mov	r1, r9
 800e5b0:	f7f1 fe6c 	bl	800028c <__adddf3>
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	463b      	mov	r3, r7
 800e5b8:	4680      	mov	r8, r0
 800e5ba:	4689      	mov	r9, r1
 800e5bc:	4620      	mov	r0, r4
 800e5be:	4629      	mov	r1, r5
 800e5c0:	f7f2 f81a 	bl	80005f8 <__aeabi_dmul>
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	4649      	mov	r1, r9
 800e5ce:	4640      	mov	r0, r8
 800e5d0:	f7f1 fe5c 	bl	800028c <__adddf3>
 800e5d4:	4b1d      	ldr	r3, [pc, #116]	; (800e64c <__ieee754_pow+0x3dc>)
 800e5d6:	4299      	cmp	r1, r3
 800e5d8:	ec45 4b19 	vmov	d9, r4, r5
 800e5dc:	4606      	mov	r6, r0
 800e5de:	460f      	mov	r7, r1
 800e5e0:	468b      	mov	fp, r1
 800e5e2:	f340 82fe 	ble.w	800ebe2 <__ieee754_pow+0x972>
 800e5e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e5ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e5ee:	4303      	orrs	r3, r0
 800e5f0:	f000 81f0 	beq.w	800e9d4 <__ieee754_pow+0x764>
 800e5f4:	a310      	add	r3, pc, #64	; (adr r3, 800e638 <__ieee754_pow+0x3c8>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	ec51 0b18 	vmov	r0, r1, d8
 800e5fe:	f7f1 fffb 	bl	80005f8 <__aeabi_dmul>
 800e602:	a30d      	add	r3, pc, #52	; (adr r3, 800e638 <__ieee754_pow+0x3c8>)
 800e604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e608:	e6cb      	b.n	800e3a2 <__ieee754_pow+0x132>
 800e60a:	bf00      	nop
 800e60c:	f3af 8000 	nop.w
 800e610:	60000000 	.word	0x60000000
 800e614:	3ff71547 	.word	0x3ff71547
 800e618:	f85ddf44 	.word	0xf85ddf44
 800e61c:	3e54ae0b 	.word	0x3e54ae0b
 800e620:	55555555 	.word	0x55555555
 800e624:	3fd55555 	.word	0x3fd55555
 800e628:	652b82fe 	.word	0x652b82fe
 800e62c:	3ff71547 	.word	0x3ff71547
 800e630:	00000000 	.word	0x00000000
 800e634:	bff00000 	.word	0xbff00000
 800e638:	8800759c 	.word	0x8800759c
 800e63c:	7e37e43c 	.word	0x7e37e43c
 800e640:	3ff00000 	.word	0x3ff00000
 800e644:	3fd00000 	.word	0x3fd00000
 800e648:	3fe00000 	.word	0x3fe00000
 800e64c:	408fffff 	.word	0x408fffff
 800e650:	4bd7      	ldr	r3, [pc, #860]	; (800e9b0 <__ieee754_pow+0x740>)
 800e652:	ea03 0309 	and.w	r3, r3, r9
 800e656:	2200      	movs	r2, #0
 800e658:	b92b      	cbnz	r3, 800e666 <__ieee754_pow+0x3f6>
 800e65a:	4bd6      	ldr	r3, [pc, #856]	; (800e9b4 <__ieee754_pow+0x744>)
 800e65c:	f7f1 ffcc 	bl	80005f8 <__aeabi_dmul>
 800e660:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e664:	460c      	mov	r4, r1
 800e666:	1523      	asrs	r3, r4, #20
 800e668:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e66c:	4413      	add	r3, r2
 800e66e:	9309      	str	r3, [sp, #36]	; 0x24
 800e670:	4bd1      	ldr	r3, [pc, #836]	; (800e9b8 <__ieee754_pow+0x748>)
 800e672:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e676:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e67a:	429c      	cmp	r4, r3
 800e67c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e680:	dd08      	ble.n	800e694 <__ieee754_pow+0x424>
 800e682:	4bce      	ldr	r3, [pc, #824]	; (800e9bc <__ieee754_pow+0x74c>)
 800e684:	429c      	cmp	r4, r3
 800e686:	f340 8163 	ble.w	800e950 <__ieee754_pow+0x6e0>
 800e68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e68c:	3301      	adds	r3, #1
 800e68e:	9309      	str	r3, [sp, #36]	; 0x24
 800e690:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e694:	2400      	movs	r4, #0
 800e696:	00e3      	lsls	r3, r4, #3
 800e698:	930b      	str	r3, [sp, #44]	; 0x2c
 800e69a:	4bc9      	ldr	r3, [pc, #804]	; (800e9c0 <__ieee754_pow+0x750>)
 800e69c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6a0:	ed93 7b00 	vldr	d7, [r3]
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	ec53 2b17 	vmov	r2, r3, d7
 800e6aa:	eeb0 8a47 	vmov.f32	s16, s14
 800e6ae:	eef0 8a67 	vmov.f32	s17, s15
 800e6b2:	4682      	mov	sl, r0
 800e6b4:	f7f1 fde8 	bl	8000288 <__aeabi_dsub>
 800e6b8:	4652      	mov	r2, sl
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	460f      	mov	r7, r1
 800e6be:	462b      	mov	r3, r5
 800e6c0:	ec51 0b18 	vmov	r0, r1, d8
 800e6c4:	f7f1 fde2 	bl	800028c <__adddf3>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	49bd      	ldr	r1, [pc, #756]	; (800e9c4 <__ieee754_pow+0x754>)
 800e6d0:	f7f2 f8bc 	bl	800084c <__aeabi_ddiv>
 800e6d4:	ec41 0b19 	vmov	d9, r0, r1
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4630      	mov	r0, r6
 800e6de:	4639      	mov	r1, r7
 800e6e0:	f7f1 ff8a 	bl	80005f8 <__aeabi_dmul>
 800e6e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e6e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e6f8:	46ab      	mov	fp, r5
 800e6fa:	106d      	asrs	r5, r5, #1
 800e6fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e700:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e704:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e708:	2200      	movs	r2, #0
 800e70a:	4640      	mov	r0, r8
 800e70c:	4649      	mov	r1, r9
 800e70e:	4614      	mov	r4, r2
 800e710:	461d      	mov	r5, r3
 800e712:	f7f1 ff71 	bl	80005f8 <__aeabi_dmul>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	4630      	mov	r0, r6
 800e71c:	4639      	mov	r1, r7
 800e71e:	f7f1 fdb3 	bl	8000288 <__aeabi_dsub>
 800e722:	ec53 2b18 	vmov	r2, r3, d8
 800e726:	4606      	mov	r6, r0
 800e728:	460f      	mov	r7, r1
 800e72a:	4620      	mov	r0, r4
 800e72c:	4629      	mov	r1, r5
 800e72e:	f7f1 fdab 	bl	8000288 <__aeabi_dsub>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4650      	mov	r0, sl
 800e738:	4659      	mov	r1, fp
 800e73a:	f7f1 fda5 	bl	8000288 <__aeabi_dsub>
 800e73e:	4642      	mov	r2, r8
 800e740:	464b      	mov	r3, r9
 800e742:	f7f1 ff59 	bl	80005f8 <__aeabi_dmul>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	4630      	mov	r0, r6
 800e74c:	4639      	mov	r1, r7
 800e74e:	f7f1 fd9b 	bl	8000288 <__aeabi_dsub>
 800e752:	ec53 2b19 	vmov	r2, r3, d9
 800e756:	f7f1 ff4f 	bl	80005f8 <__aeabi_dmul>
 800e75a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e75e:	ec41 0b18 	vmov	d8, r0, r1
 800e762:	4610      	mov	r0, r2
 800e764:	4619      	mov	r1, r3
 800e766:	f7f1 ff47 	bl	80005f8 <__aeabi_dmul>
 800e76a:	a37d      	add	r3, pc, #500	; (adr r3, 800e960 <__ieee754_pow+0x6f0>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	4604      	mov	r4, r0
 800e772:	460d      	mov	r5, r1
 800e774:	f7f1 ff40 	bl	80005f8 <__aeabi_dmul>
 800e778:	a37b      	add	r3, pc, #492	; (adr r3, 800e968 <__ieee754_pow+0x6f8>)
 800e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77e:	f7f1 fd85 	bl	800028c <__adddf3>
 800e782:	4622      	mov	r2, r4
 800e784:	462b      	mov	r3, r5
 800e786:	f7f1 ff37 	bl	80005f8 <__aeabi_dmul>
 800e78a:	a379      	add	r3, pc, #484	; (adr r3, 800e970 <__ieee754_pow+0x700>)
 800e78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e790:	f7f1 fd7c 	bl	800028c <__adddf3>
 800e794:	4622      	mov	r2, r4
 800e796:	462b      	mov	r3, r5
 800e798:	f7f1 ff2e 	bl	80005f8 <__aeabi_dmul>
 800e79c:	a376      	add	r3, pc, #472	; (adr r3, 800e978 <__ieee754_pow+0x708>)
 800e79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a2:	f7f1 fd73 	bl	800028c <__adddf3>
 800e7a6:	4622      	mov	r2, r4
 800e7a8:	462b      	mov	r3, r5
 800e7aa:	f7f1 ff25 	bl	80005f8 <__aeabi_dmul>
 800e7ae:	a374      	add	r3, pc, #464	; (adr r3, 800e980 <__ieee754_pow+0x710>)
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	f7f1 fd6a 	bl	800028c <__adddf3>
 800e7b8:	4622      	mov	r2, r4
 800e7ba:	462b      	mov	r3, r5
 800e7bc:	f7f1 ff1c 	bl	80005f8 <__aeabi_dmul>
 800e7c0:	a371      	add	r3, pc, #452	; (adr r3, 800e988 <__ieee754_pow+0x718>)
 800e7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c6:	f7f1 fd61 	bl	800028c <__adddf3>
 800e7ca:	4622      	mov	r2, r4
 800e7cc:	4606      	mov	r6, r0
 800e7ce:	460f      	mov	r7, r1
 800e7d0:	462b      	mov	r3, r5
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	f7f1 ff0f 	bl	80005f8 <__aeabi_dmul>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	460b      	mov	r3, r1
 800e7de:	4630      	mov	r0, r6
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	f7f1 ff09 	bl	80005f8 <__aeabi_dmul>
 800e7e6:	4642      	mov	r2, r8
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	460d      	mov	r5, r1
 800e7ec:	464b      	mov	r3, r9
 800e7ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7f2:	f7f1 fd4b 	bl	800028c <__adddf3>
 800e7f6:	ec53 2b18 	vmov	r2, r3, d8
 800e7fa:	f7f1 fefd 	bl	80005f8 <__aeabi_dmul>
 800e7fe:	4622      	mov	r2, r4
 800e800:	462b      	mov	r3, r5
 800e802:	f7f1 fd43 	bl	800028c <__adddf3>
 800e806:	4642      	mov	r2, r8
 800e808:	4682      	mov	sl, r0
 800e80a:	468b      	mov	fp, r1
 800e80c:	464b      	mov	r3, r9
 800e80e:	4640      	mov	r0, r8
 800e810:	4649      	mov	r1, r9
 800e812:	f7f1 fef1 	bl	80005f8 <__aeabi_dmul>
 800e816:	4b6c      	ldr	r3, [pc, #432]	; (800e9c8 <__ieee754_pow+0x758>)
 800e818:	2200      	movs	r2, #0
 800e81a:	4606      	mov	r6, r0
 800e81c:	460f      	mov	r7, r1
 800e81e:	f7f1 fd35 	bl	800028c <__adddf3>
 800e822:	4652      	mov	r2, sl
 800e824:	465b      	mov	r3, fp
 800e826:	f7f1 fd31 	bl	800028c <__adddf3>
 800e82a:	9c04      	ldr	r4, [sp, #16]
 800e82c:	460d      	mov	r5, r1
 800e82e:	4622      	mov	r2, r4
 800e830:	460b      	mov	r3, r1
 800e832:	4640      	mov	r0, r8
 800e834:	4649      	mov	r1, r9
 800e836:	f7f1 fedf 	bl	80005f8 <__aeabi_dmul>
 800e83a:	4b63      	ldr	r3, [pc, #396]	; (800e9c8 <__ieee754_pow+0x758>)
 800e83c:	4680      	mov	r8, r0
 800e83e:	4689      	mov	r9, r1
 800e840:	2200      	movs	r2, #0
 800e842:	4620      	mov	r0, r4
 800e844:	4629      	mov	r1, r5
 800e846:	f7f1 fd1f 	bl	8000288 <__aeabi_dsub>
 800e84a:	4632      	mov	r2, r6
 800e84c:	463b      	mov	r3, r7
 800e84e:	f7f1 fd1b 	bl	8000288 <__aeabi_dsub>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4650      	mov	r0, sl
 800e858:	4659      	mov	r1, fp
 800e85a:	f7f1 fd15 	bl	8000288 <__aeabi_dsub>
 800e85e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e862:	f7f1 fec9 	bl	80005f8 <__aeabi_dmul>
 800e866:	4622      	mov	r2, r4
 800e868:	4606      	mov	r6, r0
 800e86a:	460f      	mov	r7, r1
 800e86c:	462b      	mov	r3, r5
 800e86e:	ec51 0b18 	vmov	r0, r1, d8
 800e872:	f7f1 fec1 	bl	80005f8 <__aeabi_dmul>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	4630      	mov	r0, r6
 800e87c:	4639      	mov	r1, r7
 800e87e:	f7f1 fd05 	bl	800028c <__adddf3>
 800e882:	4606      	mov	r6, r0
 800e884:	460f      	mov	r7, r1
 800e886:	4602      	mov	r2, r0
 800e888:	460b      	mov	r3, r1
 800e88a:	4640      	mov	r0, r8
 800e88c:	4649      	mov	r1, r9
 800e88e:	f7f1 fcfd 	bl	800028c <__adddf3>
 800e892:	9c04      	ldr	r4, [sp, #16]
 800e894:	a33e      	add	r3, pc, #248	; (adr r3, 800e990 <__ieee754_pow+0x720>)
 800e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89a:	4620      	mov	r0, r4
 800e89c:	460d      	mov	r5, r1
 800e89e:	f7f1 feab 	bl	80005f8 <__aeabi_dmul>
 800e8a2:	4642      	mov	r2, r8
 800e8a4:	ec41 0b18 	vmov	d8, r0, r1
 800e8a8:	464b      	mov	r3, r9
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	f7f1 fceb 	bl	8000288 <__aeabi_dsub>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	4639      	mov	r1, r7
 800e8ba:	f7f1 fce5 	bl	8000288 <__aeabi_dsub>
 800e8be:	a336      	add	r3, pc, #216	; (adr r3, 800e998 <__ieee754_pow+0x728>)
 800e8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c4:	f7f1 fe98 	bl	80005f8 <__aeabi_dmul>
 800e8c8:	a335      	add	r3, pc, #212	; (adr r3, 800e9a0 <__ieee754_pow+0x730>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	460f      	mov	r7, r1
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	4629      	mov	r1, r5
 800e8d6:	f7f1 fe8f 	bl	80005f8 <__aeabi_dmul>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4630      	mov	r0, r6
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	f7f1 fcd3 	bl	800028c <__adddf3>
 800e8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8e8:	4b38      	ldr	r3, [pc, #224]	; (800e9cc <__ieee754_pow+0x75c>)
 800e8ea:	4413      	add	r3, r2
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	f7f1 fccc 	bl	800028c <__adddf3>
 800e8f4:	4682      	mov	sl, r0
 800e8f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8f8:	468b      	mov	fp, r1
 800e8fa:	f7f1 fe13 	bl	8000524 <__aeabi_i2d>
 800e8fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e900:	4b33      	ldr	r3, [pc, #204]	; (800e9d0 <__ieee754_pow+0x760>)
 800e902:	4413      	add	r3, r2
 800e904:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e908:	4606      	mov	r6, r0
 800e90a:	460f      	mov	r7, r1
 800e90c:	4652      	mov	r2, sl
 800e90e:	465b      	mov	r3, fp
 800e910:	ec51 0b18 	vmov	r0, r1, d8
 800e914:	f7f1 fcba 	bl	800028c <__adddf3>
 800e918:	4642      	mov	r2, r8
 800e91a:	464b      	mov	r3, r9
 800e91c:	f7f1 fcb6 	bl	800028c <__adddf3>
 800e920:	4632      	mov	r2, r6
 800e922:	463b      	mov	r3, r7
 800e924:	f7f1 fcb2 	bl	800028c <__adddf3>
 800e928:	9c04      	ldr	r4, [sp, #16]
 800e92a:	4632      	mov	r2, r6
 800e92c:	463b      	mov	r3, r7
 800e92e:	4620      	mov	r0, r4
 800e930:	460d      	mov	r5, r1
 800e932:	f7f1 fca9 	bl	8000288 <__aeabi_dsub>
 800e936:	4642      	mov	r2, r8
 800e938:	464b      	mov	r3, r9
 800e93a:	f7f1 fca5 	bl	8000288 <__aeabi_dsub>
 800e93e:	ec53 2b18 	vmov	r2, r3, d8
 800e942:	f7f1 fca1 	bl	8000288 <__aeabi_dsub>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4650      	mov	r0, sl
 800e94c:	4659      	mov	r1, fp
 800e94e:	e606      	b.n	800e55e <__ieee754_pow+0x2ee>
 800e950:	2401      	movs	r4, #1
 800e952:	e6a0      	b.n	800e696 <__ieee754_pow+0x426>
 800e954:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e9a8 <__ieee754_pow+0x738>
 800e958:	e60d      	b.n	800e576 <__ieee754_pow+0x306>
 800e95a:	bf00      	nop
 800e95c:	f3af 8000 	nop.w
 800e960:	4a454eef 	.word	0x4a454eef
 800e964:	3fca7e28 	.word	0x3fca7e28
 800e968:	93c9db65 	.word	0x93c9db65
 800e96c:	3fcd864a 	.word	0x3fcd864a
 800e970:	a91d4101 	.word	0xa91d4101
 800e974:	3fd17460 	.word	0x3fd17460
 800e978:	518f264d 	.word	0x518f264d
 800e97c:	3fd55555 	.word	0x3fd55555
 800e980:	db6fabff 	.word	0xdb6fabff
 800e984:	3fdb6db6 	.word	0x3fdb6db6
 800e988:	33333303 	.word	0x33333303
 800e98c:	3fe33333 	.word	0x3fe33333
 800e990:	e0000000 	.word	0xe0000000
 800e994:	3feec709 	.word	0x3feec709
 800e998:	dc3a03fd 	.word	0xdc3a03fd
 800e99c:	3feec709 	.word	0x3feec709
 800e9a0:	145b01f5 	.word	0x145b01f5
 800e9a4:	be3e2fe0 	.word	0xbe3e2fe0
 800e9a8:	00000000 	.word	0x00000000
 800e9ac:	3ff00000 	.word	0x3ff00000
 800e9b0:	7ff00000 	.word	0x7ff00000
 800e9b4:	43400000 	.word	0x43400000
 800e9b8:	0003988e 	.word	0x0003988e
 800e9bc:	000bb679 	.word	0x000bb679
 800e9c0:	08067a20 	.word	0x08067a20
 800e9c4:	3ff00000 	.word	0x3ff00000
 800e9c8:	40080000 	.word	0x40080000
 800e9cc:	08067a40 	.word	0x08067a40
 800e9d0:	08067a30 	.word	0x08067a30
 800e9d4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ecac <__ieee754_pow+0xa3c>)
 800e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9da:	4640      	mov	r0, r8
 800e9dc:	4649      	mov	r1, r9
 800e9de:	f7f1 fc55 	bl	800028c <__adddf3>
 800e9e2:	4622      	mov	r2, r4
 800e9e4:	ec41 0b1a 	vmov	d10, r0, r1
 800e9e8:	462b      	mov	r3, r5
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	f7f1 fc4b 	bl	8000288 <__aeabi_dsub>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	ec51 0b1a 	vmov	r0, r1, d10
 800e9fa:	f7f2 f88d 	bl	8000b18 <__aeabi_dcmpgt>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	f47f adf8 	bne.w	800e5f4 <__ieee754_pow+0x384>
 800ea04:	4aa4      	ldr	r2, [pc, #656]	; (800ec98 <__ieee754_pow+0xa28>)
 800ea06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	f340 810b 	ble.w	800ec26 <__ieee754_pow+0x9b6>
 800ea10:	151b      	asrs	r3, r3, #20
 800ea12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ea16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ea1a:	fa4a f303 	asr.w	r3, sl, r3
 800ea1e:	445b      	add	r3, fp
 800ea20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ea24:	4e9d      	ldr	r6, [pc, #628]	; (800ec9c <__ieee754_pow+0xa2c>)
 800ea26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ea2a:	4116      	asrs	r6, r2
 800ea2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ea30:	2000      	movs	r0, #0
 800ea32:	ea23 0106 	bic.w	r1, r3, r6
 800ea36:	f1c2 0214 	rsb	r2, r2, #20
 800ea3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ea3e:	fa4a fa02 	asr.w	sl, sl, r2
 800ea42:	f1bb 0f00 	cmp.w	fp, #0
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	bfb8      	it	lt
 800ea50:	f1ca 0a00 	rsblt	sl, sl, #0
 800ea54:	f7f1 fc18 	bl	8000288 <__aeabi_dsub>
 800ea58:	ec41 0b19 	vmov	d9, r0, r1
 800ea5c:	4642      	mov	r2, r8
 800ea5e:	464b      	mov	r3, r9
 800ea60:	ec51 0b19 	vmov	r0, r1, d9
 800ea64:	f7f1 fc12 	bl	800028c <__adddf3>
 800ea68:	2400      	movs	r4, #0
 800ea6a:	a379      	add	r3, pc, #484	; (adr r3, 800ec50 <__ieee754_pow+0x9e0>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	4620      	mov	r0, r4
 800ea72:	460d      	mov	r5, r1
 800ea74:	f7f1 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ea78:	ec53 2b19 	vmov	r2, r3, d9
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	460f      	mov	r7, r1
 800ea80:	4620      	mov	r0, r4
 800ea82:	4629      	mov	r1, r5
 800ea84:	f7f1 fc00 	bl	8000288 <__aeabi_dsub>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	4649      	mov	r1, r9
 800ea90:	f7f1 fbfa 	bl	8000288 <__aeabi_dsub>
 800ea94:	a370      	add	r3, pc, #448	; (adr r3, 800ec58 <__ieee754_pow+0x9e8>)
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	f7f1 fdad 	bl	80005f8 <__aeabi_dmul>
 800ea9e:	a370      	add	r3, pc, #448	; (adr r3, 800ec60 <__ieee754_pow+0x9f0>)
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	4680      	mov	r8, r0
 800eaa6:	4689      	mov	r9, r1
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	4629      	mov	r1, r5
 800eaac:	f7f1 fda4 	bl	80005f8 <__aeabi_dmul>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4640      	mov	r0, r8
 800eab6:	4649      	mov	r1, r9
 800eab8:	f7f1 fbe8 	bl	800028c <__adddf3>
 800eabc:	4604      	mov	r4, r0
 800eabe:	460d      	mov	r5, r1
 800eac0:	4602      	mov	r2, r0
 800eac2:	460b      	mov	r3, r1
 800eac4:	4630      	mov	r0, r6
 800eac6:	4639      	mov	r1, r7
 800eac8:	f7f1 fbe0 	bl	800028c <__adddf3>
 800eacc:	4632      	mov	r2, r6
 800eace:	463b      	mov	r3, r7
 800ead0:	4680      	mov	r8, r0
 800ead2:	4689      	mov	r9, r1
 800ead4:	f7f1 fbd8 	bl	8000288 <__aeabi_dsub>
 800ead8:	4602      	mov	r2, r0
 800eada:	460b      	mov	r3, r1
 800eadc:	4620      	mov	r0, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	f7f1 fbd2 	bl	8000288 <__aeabi_dsub>
 800eae4:	4642      	mov	r2, r8
 800eae6:	4606      	mov	r6, r0
 800eae8:	460f      	mov	r7, r1
 800eaea:	464b      	mov	r3, r9
 800eaec:	4640      	mov	r0, r8
 800eaee:	4649      	mov	r1, r9
 800eaf0:	f7f1 fd82 	bl	80005f8 <__aeabi_dmul>
 800eaf4:	a35c      	add	r3, pc, #368	; (adr r3, 800ec68 <__ieee754_pow+0x9f8>)
 800eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafa:	4604      	mov	r4, r0
 800eafc:	460d      	mov	r5, r1
 800eafe:	f7f1 fd7b 	bl	80005f8 <__aeabi_dmul>
 800eb02:	a35b      	add	r3, pc, #364	; (adr r3, 800ec70 <__ieee754_pow+0xa00>)
 800eb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb08:	f7f1 fbbe 	bl	8000288 <__aeabi_dsub>
 800eb0c:	4622      	mov	r2, r4
 800eb0e:	462b      	mov	r3, r5
 800eb10:	f7f1 fd72 	bl	80005f8 <__aeabi_dmul>
 800eb14:	a358      	add	r3, pc, #352	; (adr r3, 800ec78 <__ieee754_pow+0xa08>)
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	f7f1 fbb7 	bl	800028c <__adddf3>
 800eb1e:	4622      	mov	r2, r4
 800eb20:	462b      	mov	r3, r5
 800eb22:	f7f1 fd69 	bl	80005f8 <__aeabi_dmul>
 800eb26:	a356      	add	r3, pc, #344	; (adr r3, 800ec80 <__ieee754_pow+0xa10>)
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	f7f1 fbac 	bl	8000288 <__aeabi_dsub>
 800eb30:	4622      	mov	r2, r4
 800eb32:	462b      	mov	r3, r5
 800eb34:	f7f1 fd60 	bl	80005f8 <__aeabi_dmul>
 800eb38:	a353      	add	r3, pc, #332	; (adr r3, 800ec88 <__ieee754_pow+0xa18>)
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f7f1 fba5 	bl	800028c <__adddf3>
 800eb42:	4622      	mov	r2, r4
 800eb44:	462b      	mov	r3, r5
 800eb46:	f7f1 fd57 	bl	80005f8 <__aeabi_dmul>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	4640      	mov	r0, r8
 800eb50:	4649      	mov	r1, r9
 800eb52:	f7f1 fb99 	bl	8000288 <__aeabi_dsub>
 800eb56:	4604      	mov	r4, r0
 800eb58:	460d      	mov	r5, r1
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4640      	mov	r0, r8
 800eb60:	4649      	mov	r1, r9
 800eb62:	f7f1 fd49 	bl	80005f8 <__aeabi_dmul>
 800eb66:	2200      	movs	r2, #0
 800eb68:	ec41 0b19 	vmov	d9, r0, r1
 800eb6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eb70:	4620      	mov	r0, r4
 800eb72:	4629      	mov	r1, r5
 800eb74:	f7f1 fb88 	bl	8000288 <__aeabi_dsub>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	ec51 0b19 	vmov	r0, r1, d9
 800eb80:	f7f1 fe64 	bl	800084c <__aeabi_ddiv>
 800eb84:	4632      	mov	r2, r6
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	463b      	mov	r3, r7
 800eb8c:	4640      	mov	r0, r8
 800eb8e:	4649      	mov	r1, r9
 800eb90:	f7f1 fd32 	bl	80005f8 <__aeabi_dmul>
 800eb94:	4632      	mov	r2, r6
 800eb96:	463b      	mov	r3, r7
 800eb98:	f7f1 fb78 	bl	800028c <__adddf3>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	460b      	mov	r3, r1
 800eba0:	4620      	mov	r0, r4
 800eba2:	4629      	mov	r1, r5
 800eba4:	f7f1 fb70 	bl	8000288 <__aeabi_dsub>
 800eba8:	4642      	mov	r2, r8
 800ebaa:	464b      	mov	r3, r9
 800ebac:	f7f1 fb6c 	bl	8000288 <__aeabi_dsub>
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	493a      	ldr	r1, [pc, #232]	; (800eca0 <__ieee754_pow+0xa30>)
 800ebb6:	2000      	movs	r0, #0
 800ebb8:	f7f1 fb66 	bl	8000288 <__aeabi_dsub>
 800ebbc:	e9cd 0100 	strd	r0, r1, [sp]
 800ebc0:	9b01      	ldr	r3, [sp, #4]
 800ebc2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ebc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebca:	da2f      	bge.n	800ec2c <__ieee754_pow+0x9bc>
 800ebcc:	4650      	mov	r0, sl
 800ebce:	ed9d 0b00 	vldr	d0, [sp]
 800ebd2:	f001 fae9 	bl	80101a8 <scalbn>
 800ebd6:	ec51 0b10 	vmov	r0, r1, d0
 800ebda:	ec53 2b18 	vmov	r2, r3, d8
 800ebde:	f7ff bbe0 	b.w	800e3a2 <__ieee754_pow+0x132>
 800ebe2:	4b30      	ldr	r3, [pc, #192]	; (800eca4 <__ieee754_pow+0xa34>)
 800ebe4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ebe8:	429e      	cmp	r6, r3
 800ebea:	f77f af0b 	ble.w	800ea04 <__ieee754_pow+0x794>
 800ebee:	4b2e      	ldr	r3, [pc, #184]	; (800eca8 <__ieee754_pow+0xa38>)
 800ebf0:	440b      	add	r3, r1
 800ebf2:	4303      	orrs	r3, r0
 800ebf4:	d00b      	beq.n	800ec0e <__ieee754_pow+0x99e>
 800ebf6:	a326      	add	r3, pc, #152	; (adr r3, 800ec90 <__ieee754_pow+0xa20>)
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	ec51 0b18 	vmov	r0, r1, d8
 800ec00:	f7f1 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ec04:	a322      	add	r3, pc, #136	; (adr r3, 800ec90 <__ieee754_pow+0xa20>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	f7ff bbca 	b.w	800e3a2 <__ieee754_pow+0x132>
 800ec0e:	4622      	mov	r2, r4
 800ec10:	462b      	mov	r3, r5
 800ec12:	f7f1 fb39 	bl	8000288 <__aeabi_dsub>
 800ec16:	4642      	mov	r2, r8
 800ec18:	464b      	mov	r3, r9
 800ec1a:	f7f1 ff73 	bl	8000b04 <__aeabi_dcmpge>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f43f aef0 	beq.w	800ea04 <__ieee754_pow+0x794>
 800ec24:	e7e7      	b.n	800ebf6 <__ieee754_pow+0x986>
 800ec26:	f04f 0a00 	mov.w	sl, #0
 800ec2a:	e717      	b.n	800ea5c <__ieee754_pow+0x7ec>
 800ec2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec30:	4619      	mov	r1, r3
 800ec32:	e7d2      	b.n	800ebda <__ieee754_pow+0x96a>
 800ec34:	491a      	ldr	r1, [pc, #104]	; (800eca0 <__ieee754_pow+0xa30>)
 800ec36:	2000      	movs	r0, #0
 800ec38:	f7ff bb9e 	b.w	800e378 <__ieee754_pow+0x108>
 800ec3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec40:	f7ff bb9a 	b.w	800e378 <__ieee754_pow+0x108>
 800ec44:	9000      	str	r0, [sp, #0]
 800ec46:	f7ff bb76 	b.w	800e336 <__ieee754_pow+0xc6>
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	f7ff bb60 	b.w	800e310 <__ieee754_pow+0xa0>
 800ec50:	00000000 	.word	0x00000000
 800ec54:	3fe62e43 	.word	0x3fe62e43
 800ec58:	fefa39ef 	.word	0xfefa39ef
 800ec5c:	3fe62e42 	.word	0x3fe62e42
 800ec60:	0ca86c39 	.word	0x0ca86c39
 800ec64:	be205c61 	.word	0xbe205c61
 800ec68:	72bea4d0 	.word	0x72bea4d0
 800ec6c:	3e663769 	.word	0x3e663769
 800ec70:	c5d26bf1 	.word	0xc5d26bf1
 800ec74:	3ebbbd41 	.word	0x3ebbbd41
 800ec78:	af25de2c 	.word	0xaf25de2c
 800ec7c:	3f11566a 	.word	0x3f11566a
 800ec80:	16bebd93 	.word	0x16bebd93
 800ec84:	3f66c16c 	.word	0x3f66c16c
 800ec88:	5555553e 	.word	0x5555553e
 800ec8c:	3fc55555 	.word	0x3fc55555
 800ec90:	c2f8f359 	.word	0xc2f8f359
 800ec94:	01a56e1f 	.word	0x01a56e1f
 800ec98:	3fe00000 	.word	0x3fe00000
 800ec9c:	000fffff 	.word	0x000fffff
 800eca0:	3ff00000 	.word	0x3ff00000
 800eca4:	4090cbff 	.word	0x4090cbff
 800eca8:	3f6f3400 	.word	0x3f6f3400
 800ecac:	652b82fe 	.word	0x652b82fe
 800ecb0:	3c971547 	.word	0x3c971547
 800ecb4:	00000000 	.word	0x00000000

0800ecb8 <__ieee754_rem_pio2>:
 800ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecbc:	ed2d 8b02 	vpush	{d8}
 800ecc0:	ec55 4b10 	vmov	r4, r5, d0
 800ecc4:	4bca      	ldr	r3, [pc, #808]	; (800eff0 <__ieee754_rem_pio2+0x338>)
 800ecc6:	b08b      	sub	sp, #44	; 0x2c
 800ecc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800eccc:	4598      	cmp	r8, r3
 800ecce:	4682      	mov	sl, r0
 800ecd0:	9502      	str	r5, [sp, #8]
 800ecd2:	dc08      	bgt.n	800ece6 <__ieee754_rem_pio2+0x2e>
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	ed80 0b00 	vstr	d0, [r0]
 800ecdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ece0:	f04f 0b00 	mov.w	fp, #0
 800ece4:	e028      	b.n	800ed38 <__ieee754_rem_pio2+0x80>
 800ece6:	4bc3      	ldr	r3, [pc, #780]	; (800eff4 <__ieee754_rem_pio2+0x33c>)
 800ece8:	4598      	cmp	r8, r3
 800ecea:	dc78      	bgt.n	800edde <__ieee754_rem_pio2+0x126>
 800ecec:	9b02      	ldr	r3, [sp, #8]
 800ecee:	4ec2      	ldr	r6, [pc, #776]	; (800eff8 <__ieee754_rem_pio2+0x340>)
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	ee10 0a10 	vmov	r0, s0
 800ecf6:	a3b0      	add	r3, pc, #704	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x300>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	dd39      	ble.n	800ed74 <__ieee754_rem_pio2+0xbc>
 800ed00:	f7f1 fac2 	bl	8000288 <__aeabi_dsub>
 800ed04:	45b0      	cmp	r8, r6
 800ed06:	4604      	mov	r4, r0
 800ed08:	460d      	mov	r5, r1
 800ed0a:	d01b      	beq.n	800ed44 <__ieee754_rem_pio2+0x8c>
 800ed0c:	a3ac      	add	r3, pc, #688	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x308>)
 800ed0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed12:	f7f1 fab9 	bl	8000288 <__aeabi_dsub>
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	e9ca 2300 	strd	r2, r3, [sl]
 800ed1e:	4620      	mov	r0, r4
 800ed20:	4629      	mov	r1, r5
 800ed22:	f7f1 fab1 	bl	8000288 <__aeabi_dsub>
 800ed26:	a3a6      	add	r3, pc, #664	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x308>)
 800ed28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2c:	f7f1 faac 	bl	8000288 <__aeabi_dsub>
 800ed30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed34:	f04f 0b01 	mov.w	fp, #1
 800ed38:	4658      	mov	r0, fp
 800ed3a:	b00b      	add	sp, #44	; 0x2c
 800ed3c:	ecbd 8b02 	vpop	{d8}
 800ed40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed44:	a3a0      	add	r3, pc, #640	; (adr r3, 800efc8 <__ieee754_rem_pio2+0x310>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f7f1 fa9d 	bl	8000288 <__aeabi_dsub>
 800ed4e:	a3a0      	add	r3, pc, #640	; (adr r3, 800efd0 <__ieee754_rem_pio2+0x318>)
 800ed50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed54:	4604      	mov	r4, r0
 800ed56:	460d      	mov	r5, r1
 800ed58:	f7f1 fa96 	bl	8000288 <__aeabi_dsub>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	e9ca 2300 	strd	r2, r3, [sl]
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 fa8e 	bl	8000288 <__aeabi_dsub>
 800ed6c:	a398      	add	r3, pc, #608	; (adr r3, 800efd0 <__ieee754_rem_pio2+0x318>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	e7db      	b.n	800ed2c <__ieee754_rem_pio2+0x74>
 800ed74:	f7f1 fa8a 	bl	800028c <__adddf3>
 800ed78:	45b0      	cmp	r8, r6
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	460d      	mov	r5, r1
 800ed7e:	d016      	beq.n	800edae <__ieee754_rem_pio2+0xf6>
 800ed80:	a38f      	add	r3, pc, #572	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x308>)
 800ed82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed86:	f7f1 fa81 	bl	800028c <__adddf3>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	e9ca 2300 	strd	r2, r3, [sl]
 800ed92:	4620      	mov	r0, r4
 800ed94:	4629      	mov	r1, r5
 800ed96:	f7f1 fa77 	bl	8000288 <__aeabi_dsub>
 800ed9a:	a389      	add	r3, pc, #548	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x308>)
 800ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda0:	f7f1 fa74 	bl	800028c <__adddf3>
 800eda4:	f04f 3bff 	mov.w	fp, #4294967295
 800eda8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edac:	e7c4      	b.n	800ed38 <__ieee754_rem_pio2+0x80>
 800edae:	a386      	add	r3, pc, #536	; (adr r3, 800efc8 <__ieee754_rem_pio2+0x310>)
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	f7f1 fa6a 	bl	800028c <__adddf3>
 800edb8:	a385      	add	r3, pc, #532	; (adr r3, 800efd0 <__ieee754_rem_pio2+0x318>)
 800edba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbe:	4604      	mov	r4, r0
 800edc0:	460d      	mov	r5, r1
 800edc2:	f7f1 fa63 	bl	800028c <__adddf3>
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	e9ca 2300 	strd	r2, r3, [sl]
 800edce:	4620      	mov	r0, r4
 800edd0:	4629      	mov	r1, r5
 800edd2:	f7f1 fa59 	bl	8000288 <__aeabi_dsub>
 800edd6:	a37e      	add	r3, pc, #504	; (adr r3, 800efd0 <__ieee754_rem_pio2+0x318>)
 800edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eddc:	e7e0      	b.n	800eda0 <__ieee754_rem_pio2+0xe8>
 800edde:	4b87      	ldr	r3, [pc, #540]	; (800effc <__ieee754_rem_pio2+0x344>)
 800ede0:	4598      	cmp	r8, r3
 800ede2:	f300 80d9 	bgt.w	800ef98 <__ieee754_rem_pio2+0x2e0>
 800ede6:	f001 f8b5 	bl	800ff54 <fabs>
 800edea:	ec55 4b10 	vmov	r4, r5, d0
 800edee:	ee10 0a10 	vmov	r0, s0
 800edf2:	a379      	add	r3, pc, #484	; (adr r3, 800efd8 <__ieee754_rem_pio2+0x320>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	4629      	mov	r1, r5
 800edfa:	f7f1 fbfd 	bl	80005f8 <__aeabi_dmul>
 800edfe:	4b80      	ldr	r3, [pc, #512]	; (800f000 <__ieee754_rem_pio2+0x348>)
 800ee00:	2200      	movs	r2, #0
 800ee02:	f7f1 fa43 	bl	800028c <__adddf3>
 800ee06:	f7f1 fea7 	bl	8000b58 <__aeabi_d2iz>
 800ee0a:	4683      	mov	fp, r0
 800ee0c:	f7f1 fb8a 	bl	8000524 <__aeabi_i2d>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	ec43 2b18 	vmov	d8, r2, r3
 800ee18:	a367      	add	r3, pc, #412	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x300>)
 800ee1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1e:	f7f1 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	4620      	mov	r0, r4
 800ee28:	4629      	mov	r1, r5
 800ee2a:	f7f1 fa2d 	bl	8000288 <__aeabi_dsub>
 800ee2e:	a364      	add	r3, pc, #400	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x308>)
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	4606      	mov	r6, r0
 800ee36:	460f      	mov	r7, r1
 800ee38:	ec51 0b18 	vmov	r0, r1, d8
 800ee3c:	f7f1 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ee40:	f1bb 0f1f 	cmp.w	fp, #31
 800ee44:	4604      	mov	r4, r0
 800ee46:	460d      	mov	r5, r1
 800ee48:	dc0d      	bgt.n	800ee66 <__ieee754_rem_pio2+0x1ae>
 800ee4a:	4b6e      	ldr	r3, [pc, #440]	; (800f004 <__ieee754_rem_pio2+0x34c>)
 800ee4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ee50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee54:	4543      	cmp	r3, r8
 800ee56:	d006      	beq.n	800ee66 <__ieee754_rem_pio2+0x1ae>
 800ee58:	4622      	mov	r2, r4
 800ee5a:	462b      	mov	r3, r5
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	4639      	mov	r1, r7
 800ee60:	f7f1 fa12 	bl	8000288 <__aeabi_dsub>
 800ee64:	e00f      	b.n	800ee86 <__ieee754_rem_pio2+0x1ce>
 800ee66:	462b      	mov	r3, r5
 800ee68:	4622      	mov	r2, r4
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	4639      	mov	r1, r7
 800ee6e:	f7f1 fa0b 	bl	8000288 <__aeabi_dsub>
 800ee72:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ee76:	9303      	str	r3, [sp, #12]
 800ee78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ee80:	f1b8 0f10 	cmp.w	r8, #16
 800ee84:	dc02      	bgt.n	800ee8c <__ieee754_rem_pio2+0x1d4>
 800ee86:	e9ca 0100 	strd	r0, r1, [sl]
 800ee8a:	e039      	b.n	800ef00 <__ieee754_rem_pio2+0x248>
 800ee8c:	a34e      	add	r3, pc, #312	; (adr r3, 800efc8 <__ieee754_rem_pio2+0x310>)
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	ec51 0b18 	vmov	r0, r1, d8
 800ee96:	f7f1 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	460d      	mov	r5, r1
 800ee9e:	4602      	mov	r2, r0
 800eea0:	460b      	mov	r3, r1
 800eea2:	4630      	mov	r0, r6
 800eea4:	4639      	mov	r1, r7
 800eea6:	f7f1 f9ef 	bl	8000288 <__aeabi_dsub>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	460b      	mov	r3, r1
 800eeae:	4680      	mov	r8, r0
 800eeb0:	4689      	mov	r9, r1
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	4639      	mov	r1, r7
 800eeb6:	f7f1 f9e7 	bl	8000288 <__aeabi_dsub>
 800eeba:	4622      	mov	r2, r4
 800eebc:	462b      	mov	r3, r5
 800eebe:	f7f1 f9e3 	bl	8000288 <__aeabi_dsub>
 800eec2:	a343      	add	r3, pc, #268	; (adr r3, 800efd0 <__ieee754_rem_pio2+0x318>)
 800eec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	ec51 0b18 	vmov	r0, r1, d8
 800eed0:	f7f1 fb92 	bl	80005f8 <__aeabi_dmul>
 800eed4:	4622      	mov	r2, r4
 800eed6:	462b      	mov	r3, r5
 800eed8:	f7f1 f9d6 	bl	8000288 <__aeabi_dsub>
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	4604      	mov	r4, r0
 800eee2:	460d      	mov	r5, r1
 800eee4:	4640      	mov	r0, r8
 800eee6:	4649      	mov	r1, r9
 800eee8:	f7f1 f9ce 	bl	8000288 <__aeabi_dsub>
 800eeec:	9a03      	ldr	r2, [sp, #12]
 800eeee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	2b31      	cmp	r3, #49	; 0x31
 800eef6:	dc24      	bgt.n	800ef42 <__ieee754_rem_pio2+0x28a>
 800eef8:	e9ca 0100 	strd	r0, r1, [sl]
 800eefc:	4646      	mov	r6, r8
 800eefe:	464f      	mov	r7, r9
 800ef00:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef04:	4630      	mov	r0, r6
 800ef06:	4642      	mov	r2, r8
 800ef08:	464b      	mov	r3, r9
 800ef0a:	4639      	mov	r1, r7
 800ef0c:	f7f1 f9bc 	bl	8000288 <__aeabi_dsub>
 800ef10:	462b      	mov	r3, r5
 800ef12:	4622      	mov	r2, r4
 800ef14:	f7f1 f9b8 	bl	8000288 <__aeabi_dsub>
 800ef18:	9b02      	ldr	r3, [sp, #8]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef20:	f6bf af0a 	bge.w	800ed38 <__ieee754_rem_pio2+0x80>
 800ef24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef28:	f8ca 3004 	str.w	r3, [sl, #4]
 800ef2c:	f8ca 8000 	str.w	r8, [sl]
 800ef30:	f8ca 0008 	str.w	r0, [sl, #8]
 800ef34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef38:	f8ca 300c 	str.w	r3, [sl, #12]
 800ef3c:	f1cb 0b00 	rsb	fp, fp, #0
 800ef40:	e6fa      	b.n	800ed38 <__ieee754_rem_pio2+0x80>
 800ef42:	a327      	add	r3, pc, #156	; (adr r3, 800efe0 <__ieee754_rem_pio2+0x328>)
 800ef44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef48:	ec51 0b18 	vmov	r0, r1, d8
 800ef4c:	f7f1 fb54 	bl	80005f8 <__aeabi_dmul>
 800ef50:	4604      	mov	r4, r0
 800ef52:	460d      	mov	r5, r1
 800ef54:	4602      	mov	r2, r0
 800ef56:	460b      	mov	r3, r1
 800ef58:	4640      	mov	r0, r8
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	f7f1 f994 	bl	8000288 <__aeabi_dsub>
 800ef60:	4602      	mov	r2, r0
 800ef62:	460b      	mov	r3, r1
 800ef64:	4606      	mov	r6, r0
 800ef66:	460f      	mov	r7, r1
 800ef68:	4640      	mov	r0, r8
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	f7f1 f98c 	bl	8000288 <__aeabi_dsub>
 800ef70:	4622      	mov	r2, r4
 800ef72:	462b      	mov	r3, r5
 800ef74:	f7f1 f988 	bl	8000288 <__aeabi_dsub>
 800ef78:	a31b      	add	r3, pc, #108	; (adr r3, 800efe8 <__ieee754_rem_pio2+0x330>)
 800ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7e:	4604      	mov	r4, r0
 800ef80:	460d      	mov	r5, r1
 800ef82:	ec51 0b18 	vmov	r0, r1, d8
 800ef86:	f7f1 fb37 	bl	80005f8 <__aeabi_dmul>
 800ef8a:	4622      	mov	r2, r4
 800ef8c:	462b      	mov	r3, r5
 800ef8e:	f7f1 f97b 	bl	8000288 <__aeabi_dsub>
 800ef92:	4604      	mov	r4, r0
 800ef94:	460d      	mov	r5, r1
 800ef96:	e75f      	b.n	800ee58 <__ieee754_rem_pio2+0x1a0>
 800ef98:	4b1b      	ldr	r3, [pc, #108]	; (800f008 <__ieee754_rem_pio2+0x350>)
 800ef9a:	4598      	cmp	r8, r3
 800ef9c:	dd36      	ble.n	800f00c <__ieee754_rem_pio2+0x354>
 800ef9e:	ee10 2a10 	vmov	r2, s0
 800efa2:	462b      	mov	r3, r5
 800efa4:	4620      	mov	r0, r4
 800efa6:	4629      	mov	r1, r5
 800efa8:	f7f1 f96e 	bl	8000288 <__aeabi_dsub>
 800efac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800efb0:	e9ca 0100 	strd	r0, r1, [sl]
 800efb4:	e694      	b.n	800ece0 <__ieee754_rem_pio2+0x28>
 800efb6:	bf00      	nop
 800efb8:	54400000 	.word	0x54400000
 800efbc:	3ff921fb 	.word	0x3ff921fb
 800efc0:	1a626331 	.word	0x1a626331
 800efc4:	3dd0b461 	.word	0x3dd0b461
 800efc8:	1a600000 	.word	0x1a600000
 800efcc:	3dd0b461 	.word	0x3dd0b461
 800efd0:	2e037073 	.word	0x2e037073
 800efd4:	3ba3198a 	.word	0x3ba3198a
 800efd8:	6dc9c883 	.word	0x6dc9c883
 800efdc:	3fe45f30 	.word	0x3fe45f30
 800efe0:	2e000000 	.word	0x2e000000
 800efe4:	3ba3198a 	.word	0x3ba3198a
 800efe8:	252049c1 	.word	0x252049c1
 800efec:	397b839a 	.word	0x397b839a
 800eff0:	3fe921fb 	.word	0x3fe921fb
 800eff4:	4002d97b 	.word	0x4002d97b
 800eff8:	3ff921fb 	.word	0x3ff921fb
 800effc:	413921fb 	.word	0x413921fb
 800f000:	3fe00000 	.word	0x3fe00000
 800f004:	08067a50 	.word	0x08067a50
 800f008:	7fefffff 	.word	0x7fefffff
 800f00c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f010:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f014:	ee10 0a10 	vmov	r0, s0
 800f018:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f01c:	ee10 6a10 	vmov	r6, s0
 800f020:	460f      	mov	r7, r1
 800f022:	f7f1 fd99 	bl	8000b58 <__aeabi_d2iz>
 800f026:	f7f1 fa7d 	bl	8000524 <__aeabi_i2d>
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	4630      	mov	r0, r6
 800f030:	4639      	mov	r1, r7
 800f032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f036:	f7f1 f927 	bl	8000288 <__aeabi_dsub>
 800f03a:	4b22      	ldr	r3, [pc, #136]	; (800f0c4 <__ieee754_rem_pio2+0x40c>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	f7f1 fadb 	bl	80005f8 <__aeabi_dmul>
 800f042:	460f      	mov	r7, r1
 800f044:	4606      	mov	r6, r0
 800f046:	f7f1 fd87 	bl	8000b58 <__aeabi_d2iz>
 800f04a:	f7f1 fa6b 	bl	8000524 <__aeabi_i2d>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	4630      	mov	r0, r6
 800f054:	4639      	mov	r1, r7
 800f056:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f05a:	f7f1 f915 	bl	8000288 <__aeabi_dsub>
 800f05e:	4b19      	ldr	r3, [pc, #100]	; (800f0c4 <__ieee754_rem_pio2+0x40c>)
 800f060:	2200      	movs	r2, #0
 800f062:	f7f1 fac9 	bl	80005f8 <__aeabi_dmul>
 800f066:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f06a:	ad04      	add	r5, sp, #16
 800f06c:	f04f 0803 	mov.w	r8, #3
 800f070:	46a9      	mov	r9, r5
 800f072:	2600      	movs	r6, #0
 800f074:	2700      	movs	r7, #0
 800f076:	4632      	mov	r2, r6
 800f078:	463b      	mov	r3, r7
 800f07a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f07e:	46c3      	mov	fp, r8
 800f080:	3d08      	subs	r5, #8
 800f082:	f108 38ff 	add.w	r8, r8, #4294967295
 800f086:	f7f1 fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	d1f3      	bne.n	800f076 <__ieee754_rem_pio2+0x3be>
 800f08e:	4b0e      	ldr	r3, [pc, #56]	; (800f0c8 <__ieee754_rem_pio2+0x410>)
 800f090:	9301      	str	r3, [sp, #4]
 800f092:	2302      	movs	r3, #2
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	4622      	mov	r2, r4
 800f098:	465b      	mov	r3, fp
 800f09a:	4651      	mov	r1, sl
 800f09c:	4648      	mov	r0, r9
 800f09e:	f000 fb5b 	bl	800f758 <__kernel_rem_pio2>
 800f0a2:	9b02      	ldr	r3, [sp, #8]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	4683      	mov	fp, r0
 800f0a8:	f6bf ae46 	bge.w	800ed38 <__ieee754_rem_pio2+0x80>
 800f0ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f0b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f0b4:	f8ca 3004 	str.w	r3, [sl, #4]
 800f0b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f0bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f0c0:	e73a      	b.n	800ef38 <__ieee754_rem_pio2+0x280>
 800f0c2:	bf00      	nop
 800f0c4:	41700000 	.word	0x41700000
 800f0c8:	08067ad0 	.word	0x08067ad0

0800f0cc <__ieee754_sqrt>:
 800f0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d0:	ec55 4b10 	vmov	r4, r5, d0
 800f0d4:	4e56      	ldr	r6, [pc, #344]	; (800f230 <__ieee754_sqrt+0x164>)
 800f0d6:	43ae      	bics	r6, r5
 800f0d8:	ee10 0a10 	vmov	r0, s0
 800f0dc:	ee10 3a10 	vmov	r3, s0
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	462a      	mov	r2, r5
 800f0e4:	d110      	bne.n	800f108 <__ieee754_sqrt+0x3c>
 800f0e6:	ee10 2a10 	vmov	r2, s0
 800f0ea:	462b      	mov	r3, r5
 800f0ec:	f7f1 fa84 	bl	80005f8 <__aeabi_dmul>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	4629      	mov	r1, r5
 800f0f8:	f7f1 f8c8 	bl	800028c <__adddf3>
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	460d      	mov	r5, r1
 800f100:	ec45 4b10 	vmov	d0, r4, r5
 800f104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f108:	2d00      	cmp	r5, #0
 800f10a:	dc10      	bgt.n	800f12e <__ieee754_sqrt+0x62>
 800f10c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f110:	4330      	orrs	r0, r6
 800f112:	d0f5      	beq.n	800f100 <__ieee754_sqrt+0x34>
 800f114:	b15d      	cbz	r5, 800f12e <__ieee754_sqrt+0x62>
 800f116:	ee10 2a10 	vmov	r2, s0
 800f11a:	462b      	mov	r3, r5
 800f11c:	ee10 0a10 	vmov	r0, s0
 800f120:	f7f1 f8b2 	bl	8000288 <__aeabi_dsub>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	f7f1 fb90 	bl	800084c <__aeabi_ddiv>
 800f12c:	e7e6      	b.n	800f0fc <__ieee754_sqrt+0x30>
 800f12e:	1509      	asrs	r1, r1, #20
 800f130:	d076      	beq.n	800f220 <__ieee754_sqrt+0x154>
 800f132:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f136:	07ce      	lsls	r6, r1, #31
 800f138:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800f13c:	bf5e      	ittt	pl
 800f13e:	0fda      	lsrpl	r2, r3, #31
 800f140:	005b      	lslpl	r3, r3, #1
 800f142:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800f146:	0fda      	lsrs	r2, r3, #31
 800f148:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800f14c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f150:	2000      	movs	r0, #0
 800f152:	106d      	asrs	r5, r5, #1
 800f154:	005b      	lsls	r3, r3, #1
 800f156:	f04f 0e16 	mov.w	lr, #22
 800f15a:	4684      	mov	ip, r0
 800f15c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f160:	eb0c 0401 	add.w	r4, ip, r1
 800f164:	4294      	cmp	r4, r2
 800f166:	bfde      	ittt	le
 800f168:	1b12      	suble	r2, r2, r4
 800f16a:	eb04 0c01 	addle.w	ip, r4, r1
 800f16e:	1840      	addle	r0, r0, r1
 800f170:	0052      	lsls	r2, r2, #1
 800f172:	f1be 0e01 	subs.w	lr, lr, #1
 800f176:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f17a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f17e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f182:	d1ed      	bne.n	800f160 <__ieee754_sqrt+0x94>
 800f184:	4671      	mov	r1, lr
 800f186:	2720      	movs	r7, #32
 800f188:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f18c:	4562      	cmp	r2, ip
 800f18e:	eb04 060e 	add.w	r6, r4, lr
 800f192:	dc02      	bgt.n	800f19a <__ieee754_sqrt+0xce>
 800f194:	d113      	bne.n	800f1be <__ieee754_sqrt+0xf2>
 800f196:	429e      	cmp	r6, r3
 800f198:	d811      	bhi.n	800f1be <__ieee754_sqrt+0xf2>
 800f19a:	2e00      	cmp	r6, #0
 800f19c:	eb06 0e04 	add.w	lr, r6, r4
 800f1a0:	da43      	bge.n	800f22a <__ieee754_sqrt+0x15e>
 800f1a2:	f1be 0f00 	cmp.w	lr, #0
 800f1a6:	db40      	blt.n	800f22a <__ieee754_sqrt+0x15e>
 800f1a8:	f10c 0801 	add.w	r8, ip, #1
 800f1ac:	eba2 020c 	sub.w	r2, r2, ip
 800f1b0:	429e      	cmp	r6, r3
 800f1b2:	bf88      	it	hi
 800f1b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f1b8:	1b9b      	subs	r3, r3, r6
 800f1ba:	4421      	add	r1, r4
 800f1bc:	46c4      	mov	ip, r8
 800f1be:	0052      	lsls	r2, r2, #1
 800f1c0:	3f01      	subs	r7, #1
 800f1c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f1c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f1ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f1ce:	d1dd      	bne.n	800f18c <__ieee754_sqrt+0xc0>
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	d006      	beq.n	800f1e2 <__ieee754_sqrt+0x116>
 800f1d4:	1c4c      	adds	r4, r1, #1
 800f1d6:	bf13      	iteet	ne
 800f1d8:	3101      	addne	r1, #1
 800f1da:	3001      	addeq	r0, #1
 800f1dc:	4639      	moveq	r1, r7
 800f1de:	f021 0101 	bicne.w	r1, r1, #1
 800f1e2:	1043      	asrs	r3, r0, #1
 800f1e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f1e8:	0849      	lsrs	r1, r1, #1
 800f1ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f1ee:	07c2      	lsls	r2, r0, #31
 800f1f0:	bf48      	it	mi
 800f1f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f1f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	463d      	mov	r5, r7
 800f1fe:	e77f      	b.n	800f100 <__ieee754_sqrt+0x34>
 800f200:	0ada      	lsrs	r2, r3, #11
 800f202:	3815      	subs	r0, #21
 800f204:	055b      	lsls	r3, r3, #21
 800f206:	2a00      	cmp	r2, #0
 800f208:	d0fa      	beq.n	800f200 <__ieee754_sqrt+0x134>
 800f20a:	02d7      	lsls	r7, r2, #11
 800f20c:	d50a      	bpl.n	800f224 <__ieee754_sqrt+0x158>
 800f20e:	f1c1 0420 	rsb	r4, r1, #32
 800f212:	fa23 f404 	lsr.w	r4, r3, r4
 800f216:	1e4d      	subs	r5, r1, #1
 800f218:	408b      	lsls	r3, r1
 800f21a:	4322      	orrs	r2, r4
 800f21c:	1b41      	subs	r1, r0, r5
 800f21e:	e788      	b.n	800f132 <__ieee754_sqrt+0x66>
 800f220:	4608      	mov	r0, r1
 800f222:	e7f0      	b.n	800f206 <__ieee754_sqrt+0x13a>
 800f224:	0052      	lsls	r2, r2, #1
 800f226:	3101      	adds	r1, #1
 800f228:	e7ef      	b.n	800f20a <__ieee754_sqrt+0x13e>
 800f22a:	46e0      	mov	r8, ip
 800f22c:	e7be      	b.n	800f1ac <__ieee754_sqrt+0xe0>
 800f22e:	bf00      	nop
 800f230:	7ff00000 	.word	0x7ff00000

0800f234 <__ieee754_expf>:
 800f234:	ee10 2a10 	vmov	r2, s0
 800f238:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f23c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f240:	d902      	bls.n	800f248 <__ieee754_expf+0x14>
 800f242:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f246:	4770      	bx	lr
 800f248:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800f24c:	d106      	bne.n	800f25c <__ieee754_expf+0x28>
 800f24e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800f394 <__ieee754_expf+0x160>
 800f252:	2b00      	cmp	r3, #0
 800f254:	bf18      	it	ne
 800f256:	eeb0 0a67 	vmovne.f32	s0, s15
 800f25a:	4770      	bx	lr
 800f25c:	484e      	ldr	r0, [pc, #312]	; (800f398 <__ieee754_expf+0x164>)
 800f25e:	4282      	cmp	r2, r0
 800f260:	dd04      	ble.n	800f26c <__ieee754_expf+0x38>
 800f262:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800f39c <__ieee754_expf+0x168>
 800f266:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f26a:	4770      	bx	lr
 800f26c:	2a00      	cmp	r2, #0
 800f26e:	da03      	bge.n	800f278 <__ieee754_expf+0x44>
 800f270:	4a4b      	ldr	r2, [pc, #300]	; (800f3a0 <__ieee754_expf+0x16c>)
 800f272:	4291      	cmp	r1, r2
 800f274:	f200 808a 	bhi.w	800f38c <__ieee754_expf+0x158>
 800f278:	4a4a      	ldr	r2, [pc, #296]	; (800f3a4 <__ieee754_expf+0x170>)
 800f27a:	4291      	cmp	r1, r2
 800f27c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f280:	d954      	bls.n	800f32c <__ieee754_expf+0xf8>
 800f282:	4a49      	ldr	r2, [pc, #292]	; (800f3a8 <__ieee754_expf+0x174>)
 800f284:	4291      	cmp	r1, r2
 800f286:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f28a:	d836      	bhi.n	800f2fa <__ieee754_expf+0xc6>
 800f28c:	4947      	ldr	r1, [pc, #284]	; (800f3ac <__ieee754_expf+0x178>)
 800f28e:	4411      	add	r1, r2
 800f290:	ed91 7a00 	vldr	s14, [r1]
 800f294:	4946      	ldr	r1, [pc, #280]	; (800f3b0 <__ieee754_expf+0x17c>)
 800f296:	440a      	add	r2, r1
 800f298:	edd2 7a00 	vldr	s15, [r2]
 800f29c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800f2a0:	f1c3 0201 	rsb	r2, r3, #1
 800f2a4:	1ad2      	subs	r2, r2, r3
 800f2a6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800f2aa:	ee60 6a00 	vmul.f32	s13, s0, s0
 800f2ae:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f3b4 <__ieee754_expf+0x180>
 800f2b2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800f3b8 <__ieee754_expf+0x184>
 800f2b6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800f2ba:	eddf 5a40 	vldr	s11, [pc, #256]	; 800f3bc <__ieee754_expf+0x188>
 800f2be:	eee5 5a26 	vfma.f32	s11, s10, s13
 800f2c2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800f3c0 <__ieee754_expf+0x18c>
 800f2c6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800f2ca:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f3c4 <__ieee754_expf+0x190>
 800f2ce:	eee5 5a26 	vfma.f32	s11, s10, s13
 800f2d2:	eeb0 5a40 	vmov.f32	s10, s0
 800f2d6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800f2da:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f2de:	eef0 6a45 	vmov.f32	s13, s10
 800f2e2:	ee20 5a05 	vmul.f32	s10, s0, s10
 800f2e6:	bb92      	cbnz	r2, 800f34e <__ieee754_expf+0x11a>
 800f2e8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800f2ec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800f2f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f2f4:	ee36 0a40 	vsub.f32	s0, s12, s0
 800f2f8:	4770      	bx	lr
 800f2fa:	4b33      	ldr	r3, [pc, #204]	; (800f3c8 <__ieee754_expf+0x194>)
 800f2fc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f3cc <__ieee754_expf+0x198>
 800f300:	4413      	add	r3, r2
 800f302:	edd3 7a00 	vldr	s15, [r3]
 800f306:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f30a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f3d0 <__ieee754_expf+0x19c>
 800f30e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f312:	ee17 2a90 	vmov	r2, s15
 800f316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f31a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f31e:	eeb0 7a40 	vmov.f32	s14, s0
 800f322:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f3d4 <__ieee754_expf+0x1a0>
 800f326:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f32a:	e7bc      	b.n	800f2a6 <__ieee754_expf+0x72>
 800f32c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800f330:	d20b      	bcs.n	800f34a <__ieee754_expf+0x116>
 800f332:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800f39c <__ieee754_expf+0x168>
 800f336:	ee70 6a26 	vadd.f32	s13, s0, s13
 800f33a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800f33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f342:	dd02      	ble.n	800f34a <__ieee754_expf+0x116>
 800f344:	ee30 0a06 	vadd.f32	s0, s0, s12
 800f348:	4770      	bx	lr
 800f34a:	2200      	movs	r2, #0
 800f34c:	e7ad      	b.n	800f2aa <__ieee754_expf+0x76>
 800f34e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800f352:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800f356:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800f35a:	bfb8      	it	lt
 800f35c:	3264      	addlt	r2, #100	; 0x64
 800f35e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f362:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f366:	ee76 7a40 	vsub.f32	s15, s12, s0
 800f36a:	ee17 3a90 	vmov	r3, s15
 800f36e:	bfab      	itete	ge
 800f370:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f374:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f378:	ee00 3a10 	vmovge	s0, r3
 800f37c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800f3d8 <__ieee754_expf+0x1a4>
 800f380:	bfbc      	itt	lt
 800f382:	ee00 3a10 	vmovlt	s0, r3
 800f386:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f38a:	4770      	bx	lr
 800f38c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f394 <__ieee754_expf+0x160>
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	00000000 	.word	0x00000000
 800f398:	42b17217 	.word	0x42b17217
 800f39c:	7149f2ca 	.word	0x7149f2ca
 800f3a0:	42cff1b5 	.word	0x42cff1b5
 800f3a4:	3eb17218 	.word	0x3eb17218
 800f3a8:	3f851591 	.word	0x3f851591
 800f3ac:	08067be0 	.word	0x08067be0
 800f3b0:	08067be8 	.word	0x08067be8
 800f3b4:	3331bb4c 	.word	0x3331bb4c
 800f3b8:	b5ddea0e 	.word	0xb5ddea0e
 800f3bc:	388ab355 	.word	0x388ab355
 800f3c0:	bb360b61 	.word	0xbb360b61
 800f3c4:	3e2aaaab 	.word	0x3e2aaaab
 800f3c8:	08067bd8 	.word	0x08067bd8
 800f3cc:	3fb8aa3b 	.word	0x3fb8aa3b
 800f3d0:	3f317180 	.word	0x3f317180
 800f3d4:	3717f7d1 	.word	0x3717f7d1
 800f3d8:	0d800000 	.word	0x0d800000

0800f3dc <__ieee754_logf>:
 800f3dc:	ee10 3a10 	vmov	r3, s0
 800f3e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f3e4:	d106      	bne.n	800f3f4 <__ieee754_logf+0x18>
 800f3e6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f57c <__ieee754_logf+0x1a0>
 800f3ea:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f580 <__ieee754_logf+0x1a4>
 800f3ee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f3f2:	4770      	bx	lr
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	da02      	bge.n	800f3fe <__ieee754_logf+0x22>
 800f3f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f3fc:	e7f5      	b.n	800f3ea <__ieee754_logf+0xe>
 800f3fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f402:	db02      	blt.n	800f40a <__ieee754_logf+0x2e>
 800f404:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f408:	4770      	bx	lr
 800f40a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f40e:	bfb8      	it	lt
 800f410:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f584 <__ieee754_logf+0x1a8>
 800f414:	485c      	ldr	r0, [pc, #368]	; (800f588 <__ieee754_logf+0x1ac>)
 800f416:	bfbe      	ittt	lt
 800f418:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f41c:	f06f 0118 	mvnlt.w	r1, #24
 800f420:	ee17 3a90 	vmovlt	r3, s15
 800f424:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f428:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f42c:	4418      	add	r0, r3
 800f42e:	bfa8      	it	ge
 800f430:	2100      	movge	r1, #0
 800f432:	3a7f      	subs	r2, #127	; 0x7f
 800f434:	440a      	add	r2, r1
 800f436:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f43a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f43e:	4319      	orrs	r1, r3
 800f440:	ee00 1a10 	vmov	s0, r1
 800f444:	4951      	ldr	r1, [pc, #324]	; (800f58c <__ieee754_logf+0x1b0>)
 800f446:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f44a:	f103 000f 	add.w	r0, r3, #15
 800f44e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f452:	4001      	ands	r1, r0
 800f454:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f458:	bb89      	cbnz	r1, 800f4be <__ieee754_logf+0xe2>
 800f45a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f462:	d10f      	bne.n	800f484 <__ieee754_logf+0xa8>
 800f464:	2a00      	cmp	r2, #0
 800f466:	f000 8085 	beq.w	800f574 <__ieee754_logf+0x198>
 800f46a:	ee07 2a90 	vmov	s15, r2
 800f46e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f590 <__ieee754_logf+0x1b4>
 800f472:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f594 <__ieee754_logf+0x1b8>
 800f476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f47a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f47e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f482:	4770      	bx	lr
 800f484:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f598 <__ieee754_logf+0x1bc>
 800f488:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f48c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f490:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f498:	b912      	cbnz	r2, 800f4a0 <__ieee754_logf+0xc4>
 800f49a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f49e:	4770      	bx	lr
 800f4a0:	ee07 2a90 	vmov	s15, r2
 800f4a4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f590 <__ieee754_logf+0x1b4>
 800f4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4ac:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f4b0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f4b4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f594 <__ieee754_logf+0x1b8>
 800f4b8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f4bc:	4770      	bx	lr
 800f4be:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f4c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f4c6:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f59c <__ieee754_logf+0x1c0>
 800f4ca:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f5a0 <__ieee754_logf+0x1c4>
 800f4ce:	4935      	ldr	r1, [pc, #212]	; (800f5a4 <__ieee754_logf+0x1c8>)
 800f4d0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f4d4:	4419      	add	r1, r3
 800f4d6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f4da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f4de:	430b      	orrs	r3, r1
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	ee07 2a90 	vmov	s15, r2
 800f4e6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f4ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f4ee:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f4f2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f5a8 <__ieee754_logf+0x1cc>
 800f4f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f4fa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f5ac <__ieee754_logf+0x1d0>
 800f4fe:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f502:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f5b0 <__ieee754_logf+0x1d4>
 800f506:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f50a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f5b4 <__ieee754_logf+0x1d8>
 800f50e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f512:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f5b8 <__ieee754_logf+0x1dc>
 800f516:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f51a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f51e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f522:	dd1c      	ble.n	800f55e <__ieee754_logf+0x182>
 800f524:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f528:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f52c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f530:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f534:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f538:	b922      	cbnz	r2, 800f544 <__ieee754_logf+0x168>
 800f53a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f53e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f542:	4770      	bx	lr
 800f544:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f590 <__ieee754_logf+0x1b4>
 800f548:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f54c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f550:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f554:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f594 <__ieee754_logf+0x1b8>
 800f558:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f55c:	4770      	bx	lr
 800f55e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f562:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f566:	2a00      	cmp	r2, #0
 800f568:	d0e9      	beq.n	800f53e <__ieee754_logf+0x162>
 800f56a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f590 <__ieee754_logf+0x1b4>
 800f56e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f572:	e7ed      	b.n	800f550 <__ieee754_logf+0x174>
 800f574:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f580 <__ieee754_logf+0x1a4>
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	cc000000 	.word	0xcc000000
 800f580:	00000000 	.word	0x00000000
 800f584:	4c000000 	.word	0x4c000000
 800f588:	004afb20 	.word	0x004afb20
 800f58c:	007ffff0 	.word	0x007ffff0
 800f590:	3717f7d1 	.word	0x3717f7d1
 800f594:	3f317180 	.word	0x3f317180
 800f598:	3eaaaaab 	.word	0x3eaaaaab
 800f59c:	3e1cd04f 	.word	0x3e1cd04f
 800f5a0:	3e178897 	.word	0x3e178897
 800f5a4:	ffcf5c30 	.word	0xffcf5c30
 800f5a8:	3e638e29 	.word	0x3e638e29
 800f5ac:	3ecccccd 	.word	0x3ecccccd
 800f5b0:	3e3a3325 	.word	0x3e3a3325
 800f5b4:	3e924925 	.word	0x3e924925
 800f5b8:	3f2aaaab 	.word	0x3f2aaaab

0800f5bc <__ieee754_sqrtf>:
 800f5bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f5c0:	4770      	bx	lr
 800f5c2:	0000      	movs	r0, r0
 800f5c4:	0000      	movs	r0, r0
	...

0800f5c8 <__kernel_cos>:
 800f5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5cc:	ec57 6b10 	vmov	r6, r7, d0
 800f5d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f5d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f5d8:	ed8d 1b00 	vstr	d1, [sp]
 800f5dc:	da07      	bge.n	800f5ee <__kernel_cos+0x26>
 800f5de:	ee10 0a10 	vmov	r0, s0
 800f5e2:	4639      	mov	r1, r7
 800f5e4:	f7f1 fab8 	bl	8000b58 <__aeabi_d2iz>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	f000 8088 	beq.w	800f6fe <__kernel_cos+0x136>
 800f5ee:	4632      	mov	r2, r6
 800f5f0:	463b      	mov	r3, r7
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	4639      	mov	r1, r7
 800f5f6:	f7f0 ffff 	bl	80005f8 <__aeabi_dmul>
 800f5fa:	4b51      	ldr	r3, [pc, #324]	; (800f740 <__kernel_cos+0x178>)
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	4604      	mov	r4, r0
 800f600:	460d      	mov	r5, r1
 800f602:	f7f0 fff9 	bl	80005f8 <__aeabi_dmul>
 800f606:	a340      	add	r3, pc, #256	; (adr r3, 800f708 <__kernel_cos+0x140>)
 800f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60c:	4682      	mov	sl, r0
 800f60e:	468b      	mov	fp, r1
 800f610:	4620      	mov	r0, r4
 800f612:	4629      	mov	r1, r5
 800f614:	f7f0 fff0 	bl	80005f8 <__aeabi_dmul>
 800f618:	a33d      	add	r3, pc, #244	; (adr r3, 800f710 <__kernel_cos+0x148>)
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	f7f0 fe35 	bl	800028c <__adddf3>
 800f622:	4622      	mov	r2, r4
 800f624:	462b      	mov	r3, r5
 800f626:	f7f0 ffe7 	bl	80005f8 <__aeabi_dmul>
 800f62a:	a33b      	add	r3, pc, #236	; (adr r3, 800f718 <__kernel_cos+0x150>)
 800f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f630:	f7f0 fe2a 	bl	8000288 <__aeabi_dsub>
 800f634:	4622      	mov	r2, r4
 800f636:	462b      	mov	r3, r5
 800f638:	f7f0 ffde 	bl	80005f8 <__aeabi_dmul>
 800f63c:	a338      	add	r3, pc, #224	; (adr r3, 800f720 <__kernel_cos+0x158>)
 800f63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f642:	f7f0 fe23 	bl	800028c <__adddf3>
 800f646:	4622      	mov	r2, r4
 800f648:	462b      	mov	r3, r5
 800f64a:	f7f0 ffd5 	bl	80005f8 <__aeabi_dmul>
 800f64e:	a336      	add	r3, pc, #216	; (adr r3, 800f728 <__kernel_cos+0x160>)
 800f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f654:	f7f0 fe18 	bl	8000288 <__aeabi_dsub>
 800f658:	4622      	mov	r2, r4
 800f65a:	462b      	mov	r3, r5
 800f65c:	f7f0 ffcc 	bl	80005f8 <__aeabi_dmul>
 800f660:	a333      	add	r3, pc, #204	; (adr r3, 800f730 <__kernel_cos+0x168>)
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	f7f0 fe11 	bl	800028c <__adddf3>
 800f66a:	4622      	mov	r2, r4
 800f66c:	462b      	mov	r3, r5
 800f66e:	f7f0 ffc3 	bl	80005f8 <__aeabi_dmul>
 800f672:	4622      	mov	r2, r4
 800f674:	462b      	mov	r3, r5
 800f676:	f7f0 ffbf 	bl	80005f8 <__aeabi_dmul>
 800f67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f67e:	4604      	mov	r4, r0
 800f680:	460d      	mov	r5, r1
 800f682:	4630      	mov	r0, r6
 800f684:	4639      	mov	r1, r7
 800f686:	f7f0 ffb7 	bl	80005f8 <__aeabi_dmul>
 800f68a:	460b      	mov	r3, r1
 800f68c:	4602      	mov	r2, r0
 800f68e:	4629      	mov	r1, r5
 800f690:	4620      	mov	r0, r4
 800f692:	f7f0 fdf9 	bl	8000288 <__aeabi_dsub>
 800f696:	4b2b      	ldr	r3, [pc, #172]	; (800f744 <__kernel_cos+0x17c>)
 800f698:	4598      	cmp	r8, r3
 800f69a:	4606      	mov	r6, r0
 800f69c:	460f      	mov	r7, r1
 800f69e:	dc10      	bgt.n	800f6c2 <__kernel_cos+0xfa>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4650      	mov	r0, sl
 800f6a6:	4659      	mov	r1, fp
 800f6a8:	f7f0 fdee 	bl	8000288 <__aeabi_dsub>
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	4926      	ldr	r1, [pc, #152]	; (800f748 <__kernel_cos+0x180>)
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	f7f0 fde8 	bl	8000288 <__aeabi_dsub>
 800f6b8:	ec41 0b10 	vmov	d0, r0, r1
 800f6bc:	b003      	add	sp, #12
 800f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c2:	4b22      	ldr	r3, [pc, #136]	; (800f74c <__kernel_cos+0x184>)
 800f6c4:	4920      	ldr	r1, [pc, #128]	; (800f748 <__kernel_cos+0x180>)
 800f6c6:	4598      	cmp	r8, r3
 800f6c8:	bfcc      	ite	gt
 800f6ca:	4d21      	ldrgt	r5, [pc, #132]	; (800f750 <__kernel_cos+0x188>)
 800f6cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f6d0:	2400      	movs	r4, #0
 800f6d2:	4622      	mov	r2, r4
 800f6d4:	462b      	mov	r3, r5
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	f7f0 fdd6 	bl	8000288 <__aeabi_dsub>
 800f6dc:	4622      	mov	r2, r4
 800f6de:	4680      	mov	r8, r0
 800f6e0:	4689      	mov	r9, r1
 800f6e2:	462b      	mov	r3, r5
 800f6e4:	4650      	mov	r0, sl
 800f6e6:	4659      	mov	r1, fp
 800f6e8:	f7f0 fdce 	bl	8000288 <__aeabi_dsub>
 800f6ec:	4632      	mov	r2, r6
 800f6ee:	463b      	mov	r3, r7
 800f6f0:	f7f0 fdca 	bl	8000288 <__aeabi_dsub>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	4640      	mov	r0, r8
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	e7da      	b.n	800f6b4 <__kernel_cos+0xec>
 800f6fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f738 <__kernel_cos+0x170>
 800f702:	e7db      	b.n	800f6bc <__kernel_cos+0xf4>
 800f704:	f3af 8000 	nop.w
 800f708:	be8838d4 	.word	0xbe8838d4
 800f70c:	bda8fae9 	.word	0xbda8fae9
 800f710:	bdb4b1c4 	.word	0xbdb4b1c4
 800f714:	3e21ee9e 	.word	0x3e21ee9e
 800f718:	809c52ad 	.word	0x809c52ad
 800f71c:	3e927e4f 	.word	0x3e927e4f
 800f720:	19cb1590 	.word	0x19cb1590
 800f724:	3efa01a0 	.word	0x3efa01a0
 800f728:	16c15177 	.word	0x16c15177
 800f72c:	3f56c16c 	.word	0x3f56c16c
 800f730:	5555554c 	.word	0x5555554c
 800f734:	3fa55555 	.word	0x3fa55555
 800f738:	00000000 	.word	0x00000000
 800f73c:	3ff00000 	.word	0x3ff00000
 800f740:	3fe00000 	.word	0x3fe00000
 800f744:	3fd33332 	.word	0x3fd33332
 800f748:	3ff00000 	.word	0x3ff00000
 800f74c:	3fe90000 	.word	0x3fe90000
 800f750:	3fd20000 	.word	0x3fd20000
 800f754:	00000000 	.word	0x00000000

0800f758 <__kernel_rem_pio2>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	ed2d 8b02 	vpush	{d8}
 800f760:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f764:	f112 0f14 	cmn.w	r2, #20
 800f768:	9308      	str	r3, [sp, #32]
 800f76a:	9101      	str	r1, [sp, #4]
 800f76c:	4bc6      	ldr	r3, [pc, #792]	; (800fa88 <__kernel_rem_pio2+0x330>)
 800f76e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f770:	9009      	str	r0, [sp, #36]	; 0x24
 800f772:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f776:	9304      	str	r3, [sp, #16]
 800f778:	9b08      	ldr	r3, [sp, #32]
 800f77a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f77e:	bfa8      	it	ge
 800f780:	1ed4      	subge	r4, r2, #3
 800f782:	9306      	str	r3, [sp, #24]
 800f784:	bfb2      	itee	lt
 800f786:	2400      	movlt	r4, #0
 800f788:	2318      	movge	r3, #24
 800f78a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f78e:	f06f 0317 	mvn.w	r3, #23
 800f792:	fb04 3303 	mla	r3, r4, r3, r3
 800f796:	eb03 0a02 	add.w	sl, r3, r2
 800f79a:	9b04      	ldr	r3, [sp, #16]
 800f79c:	9a06      	ldr	r2, [sp, #24]
 800f79e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800fa78 <__kernel_rem_pio2+0x320>
 800f7a2:	eb03 0802 	add.w	r8, r3, r2
 800f7a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f7a8:	1aa7      	subs	r7, r4, r2
 800f7aa:	ae20      	add	r6, sp, #128	; 0x80
 800f7ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f7b0:	2500      	movs	r5, #0
 800f7b2:	4545      	cmp	r5, r8
 800f7b4:	dd18      	ble.n	800f7e8 <__kernel_rem_pio2+0x90>
 800f7b6:	9b08      	ldr	r3, [sp, #32]
 800f7b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f7bc:	aa20      	add	r2, sp, #128	; 0x80
 800f7be:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800fa78 <__kernel_rem_pio2+0x320>
 800f7c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f7c6:	f1c3 0301 	rsb	r3, r3, #1
 800f7ca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f7ce:	9307      	str	r3, [sp, #28]
 800f7d0:	9b07      	ldr	r3, [sp, #28]
 800f7d2:	9a04      	ldr	r2, [sp, #16]
 800f7d4:	4443      	add	r3, r8
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	db2f      	blt.n	800f83a <__kernel_rem_pio2+0xe2>
 800f7da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f7de:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f7e2:	462f      	mov	r7, r5
 800f7e4:	2600      	movs	r6, #0
 800f7e6:	e01b      	b.n	800f820 <__kernel_rem_pio2+0xc8>
 800f7e8:	42ef      	cmn	r7, r5
 800f7ea:	d407      	bmi.n	800f7fc <__kernel_rem_pio2+0xa4>
 800f7ec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f7f0:	f7f0 fe98 	bl	8000524 <__aeabi_i2d>
 800f7f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f7f8:	3501      	adds	r5, #1
 800f7fa:	e7da      	b.n	800f7b2 <__kernel_rem_pio2+0x5a>
 800f7fc:	ec51 0b18 	vmov	r0, r1, d8
 800f800:	e7f8      	b.n	800f7f4 <__kernel_rem_pio2+0x9c>
 800f802:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f806:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f80a:	f7f0 fef5 	bl	80005f8 <__aeabi_dmul>
 800f80e:	4602      	mov	r2, r0
 800f810:	460b      	mov	r3, r1
 800f812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f816:	f7f0 fd39 	bl	800028c <__adddf3>
 800f81a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f81e:	3601      	adds	r6, #1
 800f820:	9b06      	ldr	r3, [sp, #24]
 800f822:	429e      	cmp	r6, r3
 800f824:	f1a7 0708 	sub.w	r7, r7, #8
 800f828:	ddeb      	ble.n	800f802 <__kernel_rem_pio2+0xaa>
 800f82a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f82e:	3508      	adds	r5, #8
 800f830:	ecab 7b02 	vstmia	fp!, {d7}
 800f834:	f108 0801 	add.w	r8, r8, #1
 800f838:	e7ca      	b.n	800f7d0 <__kernel_rem_pio2+0x78>
 800f83a:	9b04      	ldr	r3, [sp, #16]
 800f83c:	aa0c      	add	r2, sp, #48	; 0x30
 800f83e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f842:	930b      	str	r3, [sp, #44]	; 0x2c
 800f844:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f846:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f84a:	9c04      	ldr	r4, [sp, #16]
 800f84c:	930a      	str	r3, [sp, #40]	; 0x28
 800f84e:	ab98      	add	r3, sp, #608	; 0x260
 800f850:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f854:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f858:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f85c:	f8cd b008 	str.w	fp, [sp, #8]
 800f860:	4625      	mov	r5, r4
 800f862:	2d00      	cmp	r5, #0
 800f864:	dc78      	bgt.n	800f958 <__kernel_rem_pio2+0x200>
 800f866:	ec47 6b10 	vmov	d0, r6, r7
 800f86a:	4650      	mov	r0, sl
 800f86c:	f000 fc9c 	bl	80101a8 <scalbn>
 800f870:	ec57 6b10 	vmov	r6, r7, d0
 800f874:	2200      	movs	r2, #0
 800f876:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f87a:	ee10 0a10 	vmov	r0, s0
 800f87e:	4639      	mov	r1, r7
 800f880:	f7f0 feba 	bl	80005f8 <__aeabi_dmul>
 800f884:	ec41 0b10 	vmov	d0, r0, r1
 800f888:	f000 fb7a 	bl	800ff80 <floor>
 800f88c:	4b7f      	ldr	r3, [pc, #508]	; (800fa8c <__kernel_rem_pio2+0x334>)
 800f88e:	ec51 0b10 	vmov	r0, r1, d0
 800f892:	2200      	movs	r2, #0
 800f894:	f7f0 feb0 	bl	80005f8 <__aeabi_dmul>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	4630      	mov	r0, r6
 800f89e:	4639      	mov	r1, r7
 800f8a0:	f7f0 fcf2 	bl	8000288 <__aeabi_dsub>
 800f8a4:	460f      	mov	r7, r1
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	f7f1 f956 	bl	8000b58 <__aeabi_d2iz>
 800f8ac:	9007      	str	r0, [sp, #28]
 800f8ae:	f7f0 fe39 	bl	8000524 <__aeabi_i2d>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	4639      	mov	r1, r7
 800f8ba:	f7f0 fce5 	bl	8000288 <__aeabi_dsub>
 800f8be:	f1ba 0f00 	cmp.w	sl, #0
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	460f      	mov	r7, r1
 800f8c6:	dd70      	ble.n	800f9aa <__kernel_rem_pio2+0x252>
 800f8c8:	1e62      	subs	r2, r4, #1
 800f8ca:	ab0c      	add	r3, sp, #48	; 0x30
 800f8cc:	9d07      	ldr	r5, [sp, #28]
 800f8ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f8d2:	f1ca 0118 	rsb	r1, sl, #24
 800f8d6:	fa40 f301 	asr.w	r3, r0, r1
 800f8da:	441d      	add	r5, r3
 800f8dc:	408b      	lsls	r3, r1
 800f8de:	1ac0      	subs	r0, r0, r3
 800f8e0:	ab0c      	add	r3, sp, #48	; 0x30
 800f8e2:	9507      	str	r5, [sp, #28]
 800f8e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f8e8:	f1ca 0317 	rsb	r3, sl, #23
 800f8ec:	fa40 f303 	asr.w	r3, r0, r3
 800f8f0:	9302      	str	r3, [sp, #8]
 800f8f2:	9b02      	ldr	r3, [sp, #8]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd66      	ble.n	800f9c6 <__kernel_rem_pio2+0x26e>
 800f8f8:	9b07      	ldr	r3, [sp, #28]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	9307      	str	r3, [sp, #28]
 800f900:	4615      	mov	r5, r2
 800f902:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f906:	4294      	cmp	r4, r2
 800f908:	f300 8099 	bgt.w	800fa3e <__kernel_rem_pio2+0x2e6>
 800f90c:	f1ba 0f00 	cmp.w	sl, #0
 800f910:	dd07      	ble.n	800f922 <__kernel_rem_pio2+0x1ca>
 800f912:	f1ba 0f01 	cmp.w	sl, #1
 800f916:	f000 80a5 	beq.w	800fa64 <__kernel_rem_pio2+0x30c>
 800f91a:	f1ba 0f02 	cmp.w	sl, #2
 800f91e:	f000 80c1 	beq.w	800faa4 <__kernel_rem_pio2+0x34c>
 800f922:	9b02      	ldr	r3, [sp, #8]
 800f924:	2b02      	cmp	r3, #2
 800f926:	d14e      	bne.n	800f9c6 <__kernel_rem_pio2+0x26e>
 800f928:	4632      	mov	r2, r6
 800f92a:	463b      	mov	r3, r7
 800f92c:	4958      	ldr	r1, [pc, #352]	; (800fa90 <__kernel_rem_pio2+0x338>)
 800f92e:	2000      	movs	r0, #0
 800f930:	f7f0 fcaa 	bl	8000288 <__aeabi_dsub>
 800f934:	4606      	mov	r6, r0
 800f936:	460f      	mov	r7, r1
 800f938:	2d00      	cmp	r5, #0
 800f93a:	d044      	beq.n	800f9c6 <__kernel_rem_pio2+0x26e>
 800f93c:	4650      	mov	r0, sl
 800f93e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800fa80 <__kernel_rem_pio2+0x328>
 800f942:	f000 fc31 	bl	80101a8 <scalbn>
 800f946:	4630      	mov	r0, r6
 800f948:	4639      	mov	r1, r7
 800f94a:	ec53 2b10 	vmov	r2, r3, d0
 800f94e:	f7f0 fc9b 	bl	8000288 <__aeabi_dsub>
 800f952:	4606      	mov	r6, r0
 800f954:	460f      	mov	r7, r1
 800f956:	e036      	b.n	800f9c6 <__kernel_rem_pio2+0x26e>
 800f958:	4b4e      	ldr	r3, [pc, #312]	; (800fa94 <__kernel_rem_pio2+0x33c>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	4630      	mov	r0, r6
 800f95e:	4639      	mov	r1, r7
 800f960:	f7f0 fe4a 	bl	80005f8 <__aeabi_dmul>
 800f964:	f7f1 f8f8 	bl	8000b58 <__aeabi_d2iz>
 800f968:	f7f0 fddc 	bl	8000524 <__aeabi_i2d>
 800f96c:	4b4a      	ldr	r3, [pc, #296]	; (800fa98 <__kernel_rem_pio2+0x340>)
 800f96e:	2200      	movs	r2, #0
 800f970:	4680      	mov	r8, r0
 800f972:	4689      	mov	r9, r1
 800f974:	f7f0 fe40 	bl	80005f8 <__aeabi_dmul>
 800f978:	4602      	mov	r2, r0
 800f97a:	460b      	mov	r3, r1
 800f97c:	4630      	mov	r0, r6
 800f97e:	4639      	mov	r1, r7
 800f980:	f7f0 fc82 	bl	8000288 <__aeabi_dsub>
 800f984:	f7f1 f8e8 	bl	8000b58 <__aeabi_d2iz>
 800f988:	9b02      	ldr	r3, [sp, #8]
 800f98a:	f843 0b04 	str.w	r0, [r3], #4
 800f98e:	3d01      	subs	r5, #1
 800f990:	9302      	str	r3, [sp, #8]
 800f992:	ab70      	add	r3, sp, #448	; 0x1c0
 800f994:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99c:	4640      	mov	r0, r8
 800f99e:	4649      	mov	r1, r9
 800f9a0:	f7f0 fc74 	bl	800028c <__adddf3>
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	460f      	mov	r7, r1
 800f9a8:	e75b      	b.n	800f862 <__kernel_rem_pio2+0x10a>
 800f9aa:	d105      	bne.n	800f9b8 <__kernel_rem_pio2+0x260>
 800f9ac:	1e63      	subs	r3, r4, #1
 800f9ae:	aa0c      	add	r2, sp, #48	; 0x30
 800f9b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f9b4:	15c3      	asrs	r3, r0, #23
 800f9b6:	e79b      	b.n	800f8f0 <__kernel_rem_pio2+0x198>
 800f9b8:	4b38      	ldr	r3, [pc, #224]	; (800fa9c <__kernel_rem_pio2+0x344>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f7f1 f8a2 	bl	8000b04 <__aeabi_dcmpge>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d139      	bne.n	800fa38 <__kernel_rem_pio2+0x2e0>
 800f9c4:	9002      	str	r0, [sp, #8]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	4639      	mov	r1, r7
 800f9ce:	f7f1 f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	f000 80b4 	beq.w	800fb40 <__kernel_rem_pio2+0x3e8>
 800f9d8:	f104 3bff 	add.w	fp, r4, #4294967295
 800f9dc:	465b      	mov	r3, fp
 800f9de:	2200      	movs	r2, #0
 800f9e0:	9904      	ldr	r1, [sp, #16]
 800f9e2:	428b      	cmp	r3, r1
 800f9e4:	da65      	bge.n	800fab2 <__kernel_rem_pio2+0x35a>
 800f9e6:	2a00      	cmp	r2, #0
 800f9e8:	d07b      	beq.n	800fae2 <__kernel_rem_pio2+0x38a>
 800f9ea:	ab0c      	add	r3, sp, #48	; 0x30
 800f9ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800f9f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f000 80a0 	beq.w	800fb3a <__kernel_rem_pio2+0x3e2>
 800f9fa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800fa80 <__kernel_rem_pio2+0x328>
 800f9fe:	4650      	mov	r0, sl
 800fa00:	f000 fbd2 	bl	80101a8 <scalbn>
 800fa04:	4f23      	ldr	r7, [pc, #140]	; (800fa94 <__kernel_rem_pio2+0x33c>)
 800fa06:	ec55 4b10 	vmov	r4, r5, d0
 800fa0a:	46d8      	mov	r8, fp
 800fa0c:	2600      	movs	r6, #0
 800fa0e:	f1b8 0f00 	cmp.w	r8, #0
 800fa12:	f280 80cf 	bge.w	800fbb4 <__kernel_rem_pio2+0x45c>
 800fa16:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800fa78 <__kernel_rem_pio2+0x320>
 800fa1a:	465f      	mov	r7, fp
 800fa1c:	f04f 0800 	mov.w	r8, #0
 800fa20:	2f00      	cmp	r7, #0
 800fa22:	f2c0 80fd 	blt.w	800fc20 <__kernel_rem_pio2+0x4c8>
 800fa26:	ab70      	add	r3, sp, #448	; 0x1c0
 800fa28:	f8df a074 	ldr.w	sl, [pc, #116]	; 800faa0 <__kernel_rem_pio2+0x348>
 800fa2c:	ec55 4b18 	vmov	r4, r5, d8
 800fa30:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800fa34:	2600      	movs	r6, #0
 800fa36:	e0e5      	b.n	800fc04 <__kernel_rem_pio2+0x4ac>
 800fa38:	2302      	movs	r3, #2
 800fa3a:	9302      	str	r3, [sp, #8]
 800fa3c:	e75c      	b.n	800f8f8 <__kernel_rem_pio2+0x1a0>
 800fa3e:	f8db 3000 	ldr.w	r3, [fp]
 800fa42:	b955      	cbnz	r5, 800fa5a <__kernel_rem_pio2+0x302>
 800fa44:	b123      	cbz	r3, 800fa50 <__kernel_rem_pio2+0x2f8>
 800fa46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fa4a:	f8cb 3000 	str.w	r3, [fp]
 800fa4e:	2301      	movs	r3, #1
 800fa50:	3201      	adds	r2, #1
 800fa52:	f10b 0b04 	add.w	fp, fp, #4
 800fa56:	461d      	mov	r5, r3
 800fa58:	e755      	b.n	800f906 <__kernel_rem_pio2+0x1ae>
 800fa5a:	1acb      	subs	r3, r1, r3
 800fa5c:	f8cb 3000 	str.w	r3, [fp]
 800fa60:	462b      	mov	r3, r5
 800fa62:	e7f5      	b.n	800fa50 <__kernel_rem_pio2+0x2f8>
 800fa64:	1e62      	subs	r2, r4, #1
 800fa66:	ab0c      	add	r3, sp, #48	; 0x30
 800fa68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fa70:	a90c      	add	r1, sp, #48	; 0x30
 800fa72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fa76:	e754      	b.n	800f922 <__kernel_rem_pio2+0x1ca>
	...
 800fa84:	3ff00000 	.word	0x3ff00000
 800fa88:	08067c30 	.word	0x08067c30
 800fa8c:	40200000 	.word	0x40200000
 800fa90:	3ff00000 	.word	0x3ff00000
 800fa94:	3e700000 	.word	0x3e700000
 800fa98:	41700000 	.word	0x41700000
 800fa9c:	3fe00000 	.word	0x3fe00000
 800faa0:	08067bf0 	.word	0x08067bf0
 800faa4:	1e62      	subs	r2, r4, #1
 800faa6:	ab0c      	add	r3, sp, #48	; 0x30
 800faa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fab0:	e7de      	b.n	800fa70 <__kernel_rem_pio2+0x318>
 800fab2:	a90c      	add	r1, sp, #48	; 0x30
 800fab4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fab8:	3b01      	subs	r3, #1
 800faba:	430a      	orrs	r2, r1
 800fabc:	e790      	b.n	800f9e0 <__kernel_rem_pio2+0x288>
 800fabe:	3301      	adds	r3, #1
 800fac0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fac4:	2900      	cmp	r1, #0
 800fac6:	d0fa      	beq.n	800fabe <__kernel_rem_pio2+0x366>
 800fac8:	9a08      	ldr	r2, [sp, #32]
 800faca:	18e3      	adds	r3, r4, r3
 800facc:	18a6      	adds	r6, r4, r2
 800face:	aa20      	add	r2, sp, #128	; 0x80
 800fad0:	1c65      	adds	r5, r4, #1
 800fad2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fad6:	9302      	str	r3, [sp, #8]
 800fad8:	9b02      	ldr	r3, [sp, #8]
 800fada:	42ab      	cmp	r3, r5
 800fadc:	da04      	bge.n	800fae8 <__kernel_rem_pio2+0x390>
 800fade:	461c      	mov	r4, r3
 800fae0:	e6b5      	b.n	800f84e <__kernel_rem_pio2+0xf6>
 800fae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fae4:	2301      	movs	r3, #1
 800fae6:	e7eb      	b.n	800fac0 <__kernel_rem_pio2+0x368>
 800fae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800faee:	f7f0 fd19 	bl	8000524 <__aeabi_i2d>
 800faf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800faf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf8:	46b3      	mov	fp, r6
 800fafa:	461c      	mov	r4, r3
 800fafc:	2700      	movs	r7, #0
 800fafe:	f04f 0800 	mov.w	r8, #0
 800fb02:	f04f 0900 	mov.w	r9, #0
 800fb06:	9b06      	ldr	r3, [sp, #24]
 800fb08:	429f      	cmp	r7, r3
 800fb0a:	dd06      	ble.n	800fb1a <__kernel_rem_pio2+0x3c2>
 800fb0c:	ab70      	add	r3, sp, #448	; 0x1c0
 800fb0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fb12:	e9c3 8900 	strd	r8, r9, [r3]
 800fb16:	3501      	adds	r5, #1
 800fb18:	e7de      	b.n	800fad8 <__kernel_rem_pio2+0x380>
 800fb1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fb1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fb22:	f7f0 fd69 	bl	80005f8 <__aeabi_dmul>
 800fb26:	4602      	mov	r2, r0
 800fb28:	460b      	mov	r3, r1
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	4649      	mov	r1, r9
 800fb2e:	f7f0 fbad 	bl	800028c <__adddf3>
 800fb32:	3701      	adds	r7, #1
 800fb34:	4680      	mov	r8, r0
 800fb36:	4689      	mov	r9, r1
 800fb38:	e7e5      	b.n	800fb06 <__kernel_rem_pio2+0x3ae>
 800fb3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb3e:	e754      	b.n	800f9ea <__kernel_rem_pio2+0x292>
 800fb40:	ec47 6b10 	vmov	d0, r6, r7
 800fb44:	f1ca 0000 	rsb	r0, sl, #0
 800fb48:	f000 fb2e 	bl	80101a8 <scalbn>
 800fb4c:	ec57 6b10 	vmov	r6, r7, d0
 800fb50:	4b9f      	ldr	r3, [pc, #636]	; (800fdd0 <__kernel_rem_pio2+0x678>)
 800fb52:	ee10 0a10 	vmov	r0, s0
 800fb56:	2200      	movs	r2, #0
 800fb58:	4639      	mov	r1, r7
 800fb5a:	f7f0 ffd3 	bl	8000b04 <__aeabi_dcmpge>
 800fb5e:	b300      	cbz	r0, 800fba2 <__kernel_rem_pio2+0x44a>
 800fb60:	4b9c      	ldr	r3, [pc, #624]	; (800fdd4 <__kernel_rem_pio2+0x67c>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	4630      	mov	r0, r6
 800fb66:	4639      	mov	r1, r7
 800fb68:	f7f0 fd46 	bl	80005f8 <__aeabi_dmul>
 800fb6c:	f7f0 fff4 	bl	8000b58 <__aeabi_d2iz>
 800fb70:	4605      	mov	r5, r0
 800fb72:	f7f0 fcd7 	bl	8000524 <__aeabi_i2d>
 800fb76:	4b96      	ldr	r3, [pc, #600]	; (800fdd0 <__kernel_rem_pio2+0x678>)
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f7f0 fd3d 	bl	80005f8 <__aeabi_dmul>
 800fb7e:	460b      	mov	r3, r1
 800fb80:	4602      	mov	r2, r0
 800fb82:	4639      	mov	r1, r7
 800fb84:	4630      	mov	r0, r6
 800fb86:	f7f0 fb7f 	bl	8000288 <__aeabi_dsub>
 800fb8a:	f7f0 ffe5 	bl	8000b58 <__aeabi_d2iz>
 800fb8e:	f104 0b01 	add.w	fp, r4, #1
 800fb92:	ab0c      	add	r3, sp, #48	; 0x30
 800fb94:	f10a 0a18 	add.w	sl, sl, #24
 800fb98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fb9c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800fba0:	e72b      	b.n	800f9fa <__kernel_rem_pio2+0x2a2>
 800fba2:	4630      	mov	r0, r6
 800fba4:	4639      	mov	r1, r7
 800fba6:	f7f0 ffd7 	bl	8000b58 <__aeabi_d2iz>
 800fbaa:	ab0c      	add	r3, sp, #48	; 0x30
 800fbac:	46a3      	mov	fp, r4
 800fbae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fbb2:	e722      	b.n	800f9fa <__kernel_rem_pio2+0x2a2>
 800fbb4:	ab70      	add	r3, sp, #448	; 0x1c0
 800fbb6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800fbba:	ab0c      	add	r3, sp, #48	; 0x30
 800fbbc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fbc0:	f7f0 fcb0 	bl	8000524 <__aeabi_i2d>
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	462b      	mov	r3, r5
 800fbc8:	f7f0 fd16 	bl	80005f8 <__aeabi_dmul>
 800fbcc:	4632      	mov	r2, r6
 800fbce:	e9c9 0100 	strd	r0, r1, [r9]
 800fbd2:	463b      	mov	r3, r7
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f7f0 fd0e 	bl	80005f8 <__aeabi_dmul>
 800fbdc:	f108 38ff 	add.w	r8, r8, #4294967295
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	460d      	mov	r5, r1
 800fbe4:	e713      	b.n	800fa0e <__kernel_rem_pio2+0x2b6>
 800fbe6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800fbea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800fbee:	f7f0 fd03 	bl	80005f8 <__aeabi_dmul>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	f7f0 fb47 	bl	800028c <__adddf3>
 800fbfe:	3601      	adds	r6, #1
 800fc00:	4604      	mov	r4, r0
 800fc02:	460d      	mov	r5, r1
 800fc04:	9b04      	ldr	r3, [sp, #16]
 800fc06:	429e      	cmp	r6, r3
 800fc08:	dc01      	bgt.n	800fc0e <__kernel_rem_pio2+0x4b6>
 800fc0a:	45b0      	cmp	r8, r6
 800fc0c:	daeb      	bge.n	800fbe6 <__kernel_rem_pio2+0x48e>
 800fc0e:	ab48      	add	r3, sp, #288	; 0x120
 800fc10:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fc14:	e9c3 4500 	strd	r4, r5, [r3]
 800fc18:	3f01      	subs	r7, #1
 800fc1a:	f108 0801 	add.w	r8, r8, #1
 800fc1e:	e6ff      	b.n	800fa20 <__kernel_rem_pio2+0x2c8>
 800fc20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	dc0b      	bgt.n	800fc3e <__kernel_rem_pio2+0x4e6>
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	dc6e      	bgt.n	800fd08 <__kernel_rem_pio2+0x5b0>
 800fc2a:	d045      	beq.n	800fcb8 <__kernel_rem_pio2+0x560>
 800fc2c:	9b07      	ldr	r3, [sp, #28]
 800fc2e:	f003 0007 	and.w	r0, r3, #7
 800fc32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fc36:	ecbd 8b02 	vpop	{d8}
 800fc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	d1f3      	bne.n	800fc2c <__kernel_rem_pio2+0x4d4>
 800fc44:	ab48      	add	r3, sp, #288	; 0x120
 800fc46:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800fc4a:	46d0      	mov	r8, sl
 800fc4c:	46d9      	mov	r9, fp
 800fc4e:	f1b9 0f00 	cmp.w	r9, #0
 800fc52:	f1a8 0808 	sub.w	r8, r8, #8
 800fc56:	dc64      	bgt.n	800fd22 <__kernel_rem_pio2+0x5ca>
 800fc58:	465c      	mov	r4, fp
 800fc5a:	2c01      	cmp	r4, #1
 800fc5c:	f1aa 0a08 	sub.w	sl, sl, #8
 800fc60:	dc7e      	bgt.n	800fd60 <__kernel_rem_pio2+0x608>
 800fc62:	2000      	movs	r0, #0
 800fc64:	2100      	movs	r1, #0
 800fc66:	f1bb 0f01 	cmp.w	fp, #1
 800fc6a:	f300 8097 	bgt.w	800fd9c <__kernel_rem_pio2+0x644>
 800fc6e:	9b02      	ldr	r3, [sp, #8]
 800fc70:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800fc74:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f040 8099 	bne.w	800fdb0 <__kernel_rem_pio2+0x658>
 800fc7e:	9b01      	ldr	r3, [sp, #4]
 800fc80:	e9c3 5600 	strd	r5, r6, [r3]
 800fc84:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fc88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fc8c:	e7ce      	b.n	800fc2c <__kernel_rem_pio2+0x4d4>
 800fc8e:	ab48      	add	r3, sp, #288	; 0x120
 800fc90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	f7f0 faf8 	bl	800028c <__adddf3>
 800fc9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fca0:	f1bb 0f00 	cmp.w	fp, #0
 800fca4:	daf3      	bge.n	800fc8e <__kernel_rem_pio2+0x536>
 800fca6:	9b02      	ldr	r3, [sp, #8]
 800fca8:	b113      	cbz	r3, 800fcb0 <__kernel_rem_pio2+0x558>
 800fcaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcae:	4619      	mov	r1, r3
 800fcb0:	9b01      	ldr	r3, [sp, #4]
 800fcb2:	e9c3 0100 	strd	r0, r1, [r3]
 800fcb6:	e7b9      	b.n	800fc2c <__kernel_rem_pio2+0x4d4>
 800fcb8:	2000      	movs	r0, #0
 800fcba:	2100      	movs	r1, #0
 800fcbc:	e7f0      	b.n	800fca0 <__kernel_rem_pio2+0x548>
 800fcbe:	ab48      	add	r3, sp, #288	; 0x120
 800fcc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	f7f0 fae0 	bl	800028c <__adddf3>
 800fccc:	3c01      	subs	r4, #1
 800fcce:	2c00      	cmp	r4, #0
 800fcd0:	daf5      	bge.n	800fcbe <__kernel_rem_pio2+0x566>
 800fcd2:	9b02      	ldr	r3, [sp, #8]
 800fcd4:	b1e3      	cbz	r3, 800fd10 <__kernel_rem_pio2+0x5b8>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcdc:	9c01      	ldr	r4, [sp, #4]
 800fcde:	e9c4 2300 	strd	r2, r3, [r4]
 800fce2:	4602      	mov	r2, r0
 800fce4:	460b      	mov	r3, r1
 800fce6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800fcea:	f7f0 facd 	bl	8000288 <__aeabi_dsub>
 800fcee:	ad4a      	add	r5, sp, #296	; 0x128
 800fcf0:	2401      	movs	r4, #1
 800fcf2:	45a3      	cmp	fp, r4
 800fcf4:	da0f      	bge.n	800fd16 <__kernel_rem_pio2+0x5be>
 800fcf6:	9b02      	ldr	r3, [sp, #8]
 800fcf8:	b113      	cbz	r3, 800fd00 <__kernel_rem_pio2+0x5a8>
 800fcfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fcfe:	4619      	mov	r1, r3
 800fd00:	9b01      	ldr	r3, [sp, #4]
 800fd02:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fd06:	e791      	b.n	800fc2c <__kernel_rem_pio2+0x4d4>
 800fd08:	465c      	mov	r4, fp
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	e7de      	b.n	800fcce <__kernel_rem_pio2+0x576>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	e7e2      	b.n	800fcdc <__kernel_rem_pio2+0x584>
 800fd16:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fd1a:	f7f0 fab7 	bl	800028c <__adddf3>
 800fd1e:	3401      	adds	r4, #1
 800fd20:	e7e7      	b.n	800fcf2 <__kernel_rem_pio2+0x59a>
 800fd22:	e9d8 4500 	ldrd	r4, r5, [r8]
 800fd26:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	4632      	mov	r2, r6
 800fd2e:	463b      	mov	r3, r7
 800fd30:	4629      	mov	r1, r5
 800fd32:	f7f0 faab 	bl	800028c <__adddf3>
 800fd36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4620      	mov	r0, r4
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7f0 faa1 	bl	8000288 <__aeabi_dsub>
 800fd46:	4632      	mov	r2, r6
 800fd48:	463b      	mov	r3, r7
 800fd4a:	f7f0 fa9f 	bl	800028c <__adddf3>
 800fd4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fd52:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800fd56:	ed88 7b00 	vstr	d7, [r8]
 800fd5a:	f109 39ff 	add.w	r9, r9, #4294967295
 800fd5e:	e776      	b.n	800fc4e <__kernel_rem_pio2+0x4f6>
 800fd60:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd64:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fd68:	4640      	mov	r0, r8
 800fd6a:	4632      	mov	r2, r6
 800fd6c:	463b      	mov	r3, r7
 800fd6e:	4649      	mov	r1, r9
 800fd70:	f7f0 fa8c 	bl	800028c <__adddf3>
 800fd74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd78:	4602      	mov	r2, r0
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	4640      	mov	r0, r8
 800fd7e:	4649      	mov	r1, r9
 800fd80:	f7f0 fa82 	bl	8000288 <__aeabi_dsub>
 800fd84:	4632      	mov	r2, r6
 800fd86:	463b      	mov	r3, r7
 800fd88:	f7f0 fa80 	bl	800028c <__adddf3>
 800fd8c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fd90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd94:	ed8a 7b00 	vstr	d7, [sl]
 800fd98:	3c01      	subs	r4, #1
 800fd9a:	e75e      	b.n	800fc5a <__kernel_rem_pio2+0x502>
 800fd9c:	ab48      	add	r3, sp, #288	; 0x120
 800fd9e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda6:	f7f0 fa71 	bl	800028c <__adddf3>
 800fdaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fdae:	e75a      	b.n	800fc66 <__kernel_rem_pio2+0x50e>
 800fdb0:	9b01      	ldr	r3, [sp, #4]
 800fdb2:	9a01      	ldr	r2, [sp, #4]
 800fdb4:	601d      	str	r5, [r3, #0]
 800fdb6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fdba:	605c      	str	r4, [r3, #4]
 800fdbc:	609f      	str	r7, [r3, #8]
 800fdbe:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fdc2:	60d3      	str	r3, [r2, #12]
 800fdc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdc8:	6110      	str	r0, [r2, #16]
 800fdca:	6153      	str	r3, [r2, #20]
 800fdcc:	e72e      	b.n	800fc2c <__kernel_rem_pio2+0x4d4>
 800fdce:	bf00      	nop
 800fdd0:	41700000 	.word	0x41700000
 800fdd4:	3e700000 	.word	0x3e700000

0800fdd8 <__kernel_sin>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	ed2d 8b04 	vpush	{d8-d9}
 800fde0:	eeb0 8a41 	vmov.f32	s16, s2
 800fde4:	eef0 8a61 	vmov.f32	s17, s3
 800fde8:	ec55 4b10 	vmov	r4, r5, d0
 800fdec:	b083      	sub	sp, #12
 800fdee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fdf2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fdf6:	9001      	str	r0, [sp, #4]
 800fdf8:	da06      	bge.n	800fe08 <__kernel_sin+0x30>
 800fdfa:	ee10 0a10 	vmov	r0, s0
 800fdfe:	4629      	mov	r1, r5
 800fe00:	f7f0 feaa 	bl	8000b58 <__aeabi_d2iz>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d051      	beq.n	800feac <__kernel_sin+0xd4>
 800fe08:	4622      	mov	r2, r4
 800fe0a:	462b      	mov	r3, r5
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	4629      	mov	r1, r5
 800fe10:	f7f0 fbf2 	bl	80005f8 <__aeabi_dmul>
 800fe14:	4682      	mov	sl, r0
 800fe16:	468b      	mov	fp, r1
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	4629      	mov	r1, r5
 800fe20:	f7f0 fbea 	bl	80005f8 <__aeabi_dmul>
 800fe24:	a341      	add	r3, pc, #260	; (adr r3, 800ff2c <__kernel_sin+0x154>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	4680      	mov	r8, r0
 800fe2c:	4689      	mov	r9, r1
 800fe2e:	4650      	mov	r0, sl
 800fe30:	4659      	mov	r1, fp
 800fe32:	f7f0 fbe1 	bl	80005f8 <__aeabi_dmul>
 800fe36:	a33f      	add	r3, pc, #252	; (adr r3, 800ff34 <__kernel_sin+0x15c>)
 800fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3c:	f7f0 fa24 	bl	8000288 <__aeabi_dsub>
 800fe40:	4652      	mov	r2, sl
 800fe42:	465b      	mov	r3, fp
 800fe44:	f7f0 fbd8 	bl	80005f8 <__aeabi_dmul>
 800fe48:	a33c      	add	r3, pc, #240	; (adr r3, 800ff3c <__kernel_sin+0x164>)
 800fe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4e:	f7f0 fa1d 	bl	800028c <__adddf3>
 800fe52:	4652      	mov	r2, sl
 800fe54:	465b      	mov	r3, fp
 800fe56:	f7f0 fbcf 	bl	80005f8 <__aeabi_dmul>
 800fe5a:	a33a      	add	r3, pc, #232	; (adr r3, 800ff44 <__kernel_sin+0x16c>)
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	f7f0 fa12 	bl	8000288 <__aeabi_dsub>
 800fe64:	4652      	mov	r2, sl
 800fe66:	465b      	mov	r3, fp
 800fe68:	f7f0 fbc6 	bl	80005f8 <__aeabi_dmul>
 800fe6c:	a337      	add	r3, pc, #220	; (adr r3, 800ff4c <__kernel_sin+0x174>)
 800fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe72:	f7f0 fa0b 	bl	800028c <__adddf3>
 800fe76:	9b01      	ldr	r3, [sp, #4]
 800fe78:	4606      	mov	r6, r0
 800fe7a:	460f      	mov	r7, r1
 800fe7c:	b9eb      	cbnz	r3, 800feba <__kernel_sin+0xe2>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	460b      	mov	r3, r1
 800fe82:	4650      	mov	r0, sl
 800fe84:	4659      	mov	r1, fp
 800fe86:	f7f0 fbb7 	bl	80005f8 <__aeabi_dmul>
 800fe8a:	a325      	add	r3, pc, #148	; (adr r3, 800ff20 <__kernel_sin+0x148>)
 800fe8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe90:	f7f0 f9fa 	bl	8000288 <__aeabi_dsub>
 800fe94:	4642      	mov	r2, r8
 800fe96:	464b      	mov	r3, r9
 800fe98:	f7f0 fbae 	bl	80005f8 <__aeabi_dmul>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	4620      	mov	r0, r4
 800fea2:	4629      	mov	r1, r5
 800fea4:	f7f0 f9f2 	bl	800028c <__adddf3>
 800fea8:	4604      	mov	r4, r0
 800feaa:	460d      	mov	r5, r1
 800feac:	ec45 4b10 	vmov	d0, r4, r5
 800feb0:	b003      	add	sp, #12
 800feb2:	ecbd 8b04 	vpop	{d8-d9}
 800feb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feba:	4b1b      	ldr	r3, [pc, #108]	; (800ff28 <__kernel_sin+0x150>)
 800febc:	ec51 0b18 	vmov	r0, r1, d8
 800fec0:	2200      	movs	r2, #0
 800fec2:	f7f0 fb99 	bl	80005f8 <__aeabi_dmul>
 800fec6:	4632      	mov	r2, r6
 800fec8:	ec41 0b19 	vmov	d9, r0, r1
 800fecc:	463b      	mov	r3, r7
 800fece:	4640      	mov	r0, r8
 800fed0:	4649      	mov	r1, r9
 800fed2:	f7f0 fb91 	bl	80005f8 <__aeabi_dmul>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	ec51 0b19 	vmov	r0, r1, d9
 800fede:	f7f0 f9d3 	bl	8000288 <__aeabi_dsub>
 800fee2:	4652      	mov	r2, sl
 800fee4:	465b      	mov	r3, fp
 800fee6:	f7f0 fb87 	bl	80005f8 <__aeabi_dmul>
 800feea:	ec53 2b18 	vmov	r2, r3, d8
 800feee:	f7f0 f9cb 	bl	8000288 <__aeabi_dsub>
 800fef2:	a30b      	add	r3, pc, #44	; (adr r3, 800ff20 <__kernel_sin+0x148>)
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	4606      	mov	r6, r0
 800fefa:	460f      	mov	r7, r1
 800fefc:	4640      	mov	r0, r8
 800fefe:	4649      	mov	r1, r9
 800ff00:	f7f0 fb7a 	bl	80005f8 <__aeabi_dmul>
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	4630      	mov	r0, r6
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	f7f0 f9be 	bl	800028c <__adddf3>
 800ff10:	4602      	mov	r2, r0
 800ff12:	460b      	mov	r3, r1
 800ff14:	4620      	mov	r0, r4
 800ff16:	4629      	mov	r1, r5
 800ff18:	f7f0 f9b6 	bl	8000288 <__aeabi_dsub>
 800ff1c:	e7c4      	b.n	800fea8 <__kernel_sin+0xd0>
 800ff1e:	bf00      	nop
 800ff20:	55555549 	.word	0x55555549
 800ff24:	3fc55555 	.word	0x3fc55555
 800ff28:	3fe00000 	.word	0x3fe00000
 800ff2c:	5acfd57c 	.word	0x5acfd57c
 800ff30:	3de5d93a 	.word	0x3de5d93a
 800ff34:	8a2b9ceb 	.word	0x8a2b9ceb
 800ff38:	3e5ae5e6 	.word	0x3e5ae5e6
 800ff3c:	57b1fe7d 	.word	0x57b1fe7d
 800ff40:	3ec71de3 	.word	0x3ec71de3
 800ff44:	19c161d5 	.word	0x19c161d5
 800ff48:	3f2a01a0 	.word	0x3f2a01a0
 800ff4c:	1110f8a6 	.word	0x1110f8a6
 800ff50:	3f811111 	.word	0x3f811111

0800ff54 <fabs>:
 800ff54:	ec51 0b10 	vmov	r0, r1, d0
 800ff58:	ee10 2a10 	vmov	r2, s0
 800ff5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff60:	ec43 2b10 	vmov	d0, r2, r3
 800ff64:	4770      	bx	lr

0800ff66 <finite>:
 800ff66:	b082      	sub	sp, #8
 800ff68:	ed8d 0b00 	vstr	d0, [sp]
 800ff6c:	9801      	ldr	r0, [sp, #4]
 800ff6e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff76:	0fc0      	lsrs	r0, r0, #31
 800ff78:	b002      	add	sp, #8
 800ff7a:	4770      	bx	lr
 800ff7c:	0000      	movs	r0, r0
	...

0800ff80 <floor>:
 800ff80:	ec51 0b10 	vmov	r0, r1, d0
 800ff84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ff8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ff90:	2e13      	cmp	r6, #19
 800ff92:	ee10 5a10 	vmov	r5, s0
 800ff96:	ee10 8a10 	vmov	r8, s0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	dc32      	bgt.n	8010004 <floor+0x84>
 800ff9e:	2e00      	cmp	r6, #0
 800ffa0:	da14      	bge.n	800ffcc <floor+0x4c>
 800ffa2:	a333      	add	r3, pc, #204	; (adr r3, 8010070 <floor+0xf0>)
 800ffa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa8:	f7f0 f970 	bl	800028c <__adddf3>
 800ffac:	2200      	movs	r2, #0
 800ffae:	2300      	movs	r3, #0
 800ffb0:	f7f0 fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 800ffb4:	b138      	cbz	r0, 800ffc6 <floor+0x46>
 800ffb6:	2c00      	cmp	r4, #0
 800ffb8:	da57      	bge.n	801006a <floor+0xea>
 800ffba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ffbe:	431d      	orrs	r5, r3
 800ffc0:	d001      	beq.n	800ffc6 <floor+0x46>
 800ffc2:	4c2d      	ldr	r4, [pc, #180]	; (8010078 <floor+0xf8>)
 800ffc4:	2500      	movs	r5, #0
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4628      	mov	r0, r5
 800ffca:	e025      	b.n	8010018 <floor+0x98>
 800ffcc:	4f2b      	ldr	r7, [pc, #172]	; (801007c <floor+0xfc>)
 800ffce:	4137      	asrs	r7, r6
 800ffd0:	ea01 0307 	and.w	r3, r1, r7
 800ffd4:	4303      	orrs	r3, r0
 800ffd6:	d01f      	beq.n	8010018 <floor+0x98>
 800ffd8:	a325      	add	r3, pc, #148	; (adr r3, 8010070 <floor+0xf0>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	f7f0 f955 	bl	800028c <__adddf3>
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	f7f0 fd97 	bl	8000b18 <__aeabi_dcmpgt>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d0eb      	beq.n	800ffc6 <floor+0x46>
 800ffee:	2c00      	cmp	r4, #0
 800fff0:	bfbe      	ittt	lt
 800fff2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fff6:	fa43 f606 	asrlt.w	r6, r3, r6
 800fffa:	19a4      	addlt	r4, r4, r6
 800fffc:	ea24 0407 	bic.w	r4, r4, r7
 8010000:	2500      	movs	r5, #0
 8010002:	e7e0      	b.n	800ffc6 <floor+0x46>
 8010004:	2e33      	cmp	r6, #51	; 0x33
 8010006:	dd0b      	ble.n	8010020 <floor+0xa0>
 8010008:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801000c:	d104      	bne.n	8010018 <floor+0x98>
 801000e:	ee10 2a10 	vmov	r2, s0
 8010012:	460b      	mov	r3, r1
 8010014:	f7f0 f93a 	bl	800028c <__adddf3>
 8010018:	ec41 0b10 	vmov	d0, r0, r1
 801001c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010020:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010024:	f04f 33ff 	mov.w	r3, #4294967295
 8010028:	fa23 f707 	lsr.w	r7, r3, r7
 801002c:	4207      	tst	r7, r0
 801002e:	d0f3      	beq.n	8010018 <floor+0x98>
 8010030:	a30f      	add	r3, pc, #60	; (adr r3, 8010070 <floor+0xf0>)
 8010032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010036:	f7f0 f929 	bl	800028c <__adddf3>
 801003a:	2200      	movs	r2, #0
 801003c:	2300      	movs	r3, #0
 801003e:	f7f0 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8010042:	2800      	cmp	r0, #0
 8010044:	d0bf      	beq.n	800ffc6 <floor+0x46>
 8010046:	2c00      	cmp	r4, #0
 8010048:	da02      	bge.n	8010050 <floor+0xd0>
 801004a:	2e14      	cmp	r6, #20
 801004c:	d103      	bne.n	8010056 <floor+0xd6>
 801004e:	3401      	adds	r4, #1
 8010050:	ea25 0507 	bic.w	r5, r5, r7
 8010054:	e7b7      	b.n	800ffc6 <floor+0x46>
 8010056:	2301      	movs	r3, #1
 8010058:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801005c:	fa03 f606 	lsl.w	r6, r3, r6
 8010060:	4435      	add	r5, r6
 8010062:	4545      	cmp	r5, r8
 8010064:	bf38      	it	cc
 8010066:	18e4      	addcc	r4, r4, r3
 8010068:	e7f2      	b.n	8010050 <floor+0xd0>
 801006a:	2500      	movs	r5, #0
 801006c:	462c      	mov	r4, r5
 801006e:	e7aa      	b.n	800ffc6 <floor+0x46>
 8010070:	8800759c 	.word	0x8800759c
 8010074:	7e37e43c 	.word	0x7e37e43c
 8010078:	bff00000 	.word	0xbff00000
 801007c:	000fffff 	.word	0x000fffff

08010080 <nan>:
 8010080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010088 <nan+0x8>
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop
 8010088:	00000000 	.word	0x00000000
 801008c:	7ff80000 	.word	0x7ff80000

08010090 <rint>:
 8010090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010092:	ec51 0b10 	vmov	r0, r1, d0
 8010096:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801009a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801009e:	2e13      	cmp	r6, #19
 80100a0:	ee10 4a10 	vmov	r4, s0
 80100a4:	460b      	mov	r3, r1
 80100a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80100aa:	dc58      	bgt.n	801015e <rint+0xce>
 80100ac:	2e00      	cmp	r6, #0
 80100ae:	da2b      	bge.n	8010108 <rint+0x78>
 80100b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80100b4:	4302      	orrs	r2, r0
 80100b6:	d023      	beq.n	8010100 <rint+0x70>
 80100b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80100bc:	4302      	orrs	r2, r0
 80100be:	4254      	negs	r4, r2
 80100c0:	4314      	orrs	r4, r2
 80100c2:	0c4b      	lsrs	r3, r1, #17
 80100c4:	0b24      	lsrs	r4, r4, #12
 80100c6:	045b      	lsls	r3, r3, #17
 80100c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80100cc:	ea44 0103 	orr.w	r1, r4, r3
 80100d0:	4b32      	ldr	r3, [pc, #200]	; (801019c <rint+0x10c>)
 80100d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80100d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	4630      	mov	r0, r6
 80100e0:	4639      	mov	r1, r7
 80100e2:	f7f0 f8d3 	bl	800028c <__adddf3>
 80100e6:	e9cd 0100 	strd	r0, r1, [sp]
 80100ea:	463b      	mov	r3, r7
 80100ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100f0:	4632      	mov	r2, r6
 80100f2:	f7f0 f8c9 	bl	8000288 <__aeabi_dsub>
 80100f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80100fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80100fe:	4639      	mov	r1, r7
 8010100:	ec41 0b10 	vmov	d0, r0, r1
 8010104:	b003      	add	sp, #12
 8010106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010108:	4a25      	ldr	r2, [pc, #148]	; (80101a0 <rint+0x110>)
 801010a:	4132      	asrs	r2, r6
 801010c:	ea01 0702 	and.w	r7, r1, r2
 8010110:	4307      	orrs	r7, r0
 8010112:	d0f5      	beq.n	8010100 <rint+0x70>
 8010114:	0851      	lsrs	r1, r2, #1
 8010116:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801011a:	4314      	orrs	r4, r2
 801011c:	d00c      	beq.n	8010138 <rint+0xa8>
 801011e:	ea23 0201 	bic.w	r2, r3, r1
 8010122:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010126:	2e13      	cmp	r6, #19
 8010128:	fa43 f606 	asr.w	r6, r3, r6
 801012c:	bf0c      	ite	eq
 801012e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8010132:	2400      	movne	r4, #0
 8010134:	ea42 0306 	orr.w	r3, r2, r6
 8010138:	4918      	ldr	r1, [pc, #96]	; (801019c <rint+0x10c>)
 801013a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801013e:	4622      	mov	r2, r4
 8010140:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010144:	4620      	mov	r0, r4
 8010146:	4629      	mov	r1, r5
 8010148:	f7f0 f8a0 	bl	800028c <__adddf3>
 801014c:	e9cd 0100 	strd	r0, r1, [sp]
 8010150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010154:	4622      	mov	r2, r4
 8010156:	462b      	mov	r3, r5
 8010158:	f7f0 f896 	bl	8000288 <__aeabi_dsub>
 801015c:	e7d0      	b.n	8010100 <rint+0x70>
 801015e:	2e33      	cmp	r6, #51	; 0x33
 8010160:	dd07      	ble.n	8010172 <rint+0xe2>
 8010162:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010166:	d1cb      	bne.n	8010100 <rint+0x70>
 8010168:	ee10 2a10 	vmov	r2, s0
 801016c:	f7f0 f88e 	bl	800028c <__adddf3>
 8010170:	e7c6      	b.n	8010100 <rint+0x70>
 8010172:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8010176:	f04f 36ff 	mov.w	r6, #4294967295
 801017a:	40d6      	lsrs	r6, r2
 801017c:	4230      	tst	r0, r6
 801017e:	d0bf      	beq.n	8010100 <rint+0x70>
 8010180:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8010184:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8010188:	bf1f      	itttt	ne
 801018a:	ea24 0101 	bicne.w	r1, r4, r1
 801018e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8010192:	fa44 f202 	asrne.w	r2, r4, r2
 8010196:	ea41 0402 	orrne.w	r4, r1, r2
 801019a:	e7cd      	b.n	8010138 <rint+0xa8>
 801019c:	08067c40 	.word	0x08067c40
 80101a0:	000fffff 	.word	0x000fffff
 80101a4:	00000000 	.word	0x00000000

080101a8 <scalbn>:
 80101a8:	b570      	push	{r4, r5, r6, lr}
 80101aa:	ec55 4b10 	vmov	r4, r5, d0
 80101ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80101b2:	4606      	mov	r6, r0
 80101b4:	462b      	mov	r3, r5
 80101b6:	b99a      	cbnz	r2, 80101e0 <scalbn+0x38>
 80101b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101bc:	4323      	orrs	r3, r4
 80101be:	d036      	beq.n	801022e <scalbn+0x86>
 80101c0:	4b39      	ldr	r3, [pc, #228]	; (80102a8 <scalbn+0x100>)
 80101c2:	4629      	mov	r1, r5
 80101c4:	ee10 0a10 	vmov	r0, s0
 80101c8:	2200      	movs	r2, #0
 80101ca:	f7f0 fa15 	bl	80005f8 <__aeabi_dmul>
 80101ce:	4b37      	ldr	r3, [pc, #220]	; (80102ac <scalbn+0x104>)
 80101d0:	429e      	cmp	r6, r3
 80101d2:	4604      	mov	r4, r0
 80101d4:	460d      	mov	r5, r1
 80101d6:	da10      	bge.n	80101fa <scalbn+0x52>
 80101d8:	a32b      	add	r3, pc, #172	; (adr r3, 8010288 <scalbn+0xe0>)
 80101da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101de:	e03a      	b.n	8010256 <scalbn+0xae>
 80101e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80101e4:	428a      	cmp	r2, r1
 80101e6:	d10c      	bne.n	8010202 <scalbn+0x5a>
 80101e8:	ee10 2a10 	vmov	r2, s0
 80101ec:	4620      	mov	r0, r4
 80101ee:	4629      	mov	r1, r5
 80101f0:	f7f0 f84c 	bl	800028c <__adddf3>
 80101f4:	4604      	mov	r4, r0
 80101f6:	460d      	mov	r5, r1
 80101f8:	e019      	b.n	801022e <scalbn+0x86>
 80101fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80101fe:	460b      	mov	r3, r1
 8010200:	3a36      	subs	r2, #54	; 0x36
 8010202:	4432      	add	r2, r6
 8010204:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010208:	428a      	cmp	r2, r1
 801020a:	dd08      	ble.n	801021e <scalbn+0x76>
 801020c:	2d00      	cmp	r5, #0
 801020e:	a120      	add	r1, pc, #128	; (adr r1, 8010290 <scalbn+0xe8>)
 8010210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010214:	da1c      	bge.n	8010250 <scalbn+0xa8>
 8010216:	a120      	add	r1, pc, #128	; (adr r1, 8010298 <scalbn+0xf0>)
 8010218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801021c:	e018      	b.n	8010250 <scalbn+0xa8>
 801021e:	2a00      	cmp	r2, #0
 8010220:	dd08      	ble.n	8010234 <scalbn+0x8c>
 8010222:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801022a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801022e:	ec45 4b10 	vmov	d0, r4, r5
 8010232:	bd70      	pop	{r4, r5, r6, pc}
 8010234:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010238:	da19      	bge.n	801026e <scalbn+0xc6>
 801023a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801023e:	429e      	cmp	r6, r3
 8010240:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010244:	dd0a      	ble.n	801025c <scalbn+0xb4>
 8010246:	a112      	add	r1, pc, #72	; (adr r1, 8010290 <scalbn+0xe8>)
 8010248:	e9d1 0100 	ldrd	r0, r1, [r1]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d1e2      	bne.n	8010216 <scalbn+0x6e>
 8010250:	a30f      	add	r3, pc, #60	; (adr r3, 8010290 <scalbn+0xe8>)
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	f7f0 f9cf 	bl	80005f8 <__aeabi_dmul>
 801025a:	e7cb      	b.n	80101f4 <scalbn+0x4c>
 801025c:	a10a      	add	r1, pc, #40	; (adr r1, 8010288 <scalbn+0xe0>)
 801025e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d0b8      	beq.n	80101d8 <scalbn+0x30>
 8010266:	a10e      	add	r1, pc, #56	; (adr r1, 80102a0 <scalbn+0xf8>)
 8010268:	e9d1 0100 	ldrd	r0, r1, [r1]
 801026c:	e7b4      	b.n	80101d8 <scalbn+0x30>
 801026e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010272:	3236      	adds	r2, #54	; 0x36
 8010274:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010278:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801027c:	4620      	mov	r0, r4
 801027e:	4b0c      	ldr	r3, [pc, #48]	; (80102b0 <scalbn+0x108>)
 8010280:	2200      	movs	r2, #0
 8010282:	e7e8      	b.n	8010256 <scalbn+0xae>
 8010284:	f3af 8000 	nop.w
 8010288:	c2f8f359 	.word	0xc2f8f359
 801028c:	01a56e1f 	.word	0x01a56e1f
 8010290:	8800759c 	.word	0x8800759c
 8010294:	7e37e43c 	.word	0x7e37e43c
 8010298:	8800759c 	.word	0x8800759c
 801029c:	fe37e43c 	.word	0xfe37e43c
 80102a0:	c2f8f359 	.word	0xc2f8f359
 80102a4:	81a56e1f 	.word	0x81a56e1f
 80102a8:	43500000 	.word	0x43500000
 80102ac:	ffff3cb0 	.word	0xffff3cb0
 80102b0:	3c900000 	.word	0x3c900000

080102b4 <finitef>:
 80102b4:	b082      	sub	sp, #8
 80102b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80102ba:	9801      	ldr	r0, [sp, #4]
 80102bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80102c0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80102c4:	bfac      	ite	ge
 80102c6:	2000      	movge	r0, #0
 80102c8:	2001      	movlt	r0, #1
 80102ca:	b002      	add	sp, #8
 80102cc:	4770      	bx	lr
	...

080102d0 <nanf>:
 80102d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80102d8 <nanf+0x8>
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	7fc00000 	.word	0x7fc00000

080102dc <abort>:
 80102dc:	b508      	push	{r3, lr}
 80102de:	2006      	movs	r0, #6
 80102e0:	f000 f94e 	bl	8010580 <raise>
 80102e4:	2001      	movs	r0, #1
 80102e6:	f7f3 fe83 	bl	8003ff0 <_exit>
	...

080102ec <calloc>:
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <calloc+0xc>)
 80102ee:	460a      	mov	r2, r1
 80102f0:	4601      	mov	r1, r0
 80102f2:	6818      	ldr	r0, [r3, #0]
 80102f4:	f000 b852 	b.w	801039c <_calloc_r>
 80102f8:	20000c28 	.word	0x20000c28

080102fc <__errno>:
 80102fc:	4b01      	ldr	r3, [pc, #4]	; (8010304 <__errno+0x8>)
 80102fe:	6818      	ldr	r0, [r3, #0]
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	20000c28 	.word	0x20000c28

08010308 <__libc_init_array>:
 8010308:	b570      	push	{r4, r5, r6, lr}
 801030a:	4d0d      	ldr	r5, [pc, #52]	; (8010340 <__libc_init_array+0x38>)
 801030c:	4c0d      	ldr	r4, [pc, #52]	; (8010344 <__libc_init_array+0x3c>)
 801030e:	1b64      	subs	r4, r4, r5
 8010310:	10a4      	asrs	r4, r4, #2
 8010312:	2600      	movs	r6, #0
 8010314:	42a6      	cmp	r6, r4
 8010316:	d109      	bne.n	801032c <__libc_init_array+0x24>
 8010318:	4d0b      	ldr	r5, [pc, #44]	; (8010348 <__libc_init_array+0x40>)
 801031a:	4c0c      	ldr	r4, [pc, #48]	; (801034c <__libc_init_array+0x44>)
 801031c:	f000 fcba 	bl	8010c94 <_init>
 8010320:	1b64      	subs	r4, r4, r5
 8010322:	10a4      	asrs	r4, r4, #2
 8010324:	2600      	movs	r6, #0
 8010326:	42a6      	cmp	r6, r4
 8010328:	d105      	bne.n	8010336 <__libc_init_array+0x2e>
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010330:	4798      	blx	r3
 8010332:	3601      	adds	r6, #1
 8010334:	e7ee      	b.n	8010314 <__libc_init_array+0xc>
 8010336:	f855 3b04 	ldr.w	r3, [r5], #4
 801033a:	4798      	blx	r3
 801033c:	3601      	adds	r6, #1
 801033e:	e7f2      	b.n	8010326 <__libc_init_array+0x1e>
 8010340:	08067c8c 	.word	0x08067c8c
 8010344:	08067c8c 	.word	0x08067c8c
 8010348:	08067c8c 	.word	0x08067c8c
 801034c:	08067c90 	.word	0x08067c90

08010350 <malloc>:
 8010350:	4b02      	ldr	r3, [pc, #8]	; (801035c <malloc+0xc>)
 8010352:	4601      	mov	r1, r0
 8010354:	6818      	ldr	r0, [r3, #0]
 8010356:	f000 b881 	b.w	801045c <_malloc_r>
 801035a:	bf00      	nop
 801035c:	20000c28 	.word	0x20000c28

08010360 <free>:
 8010360:	4b02      	ldr	r3, [pc, #8]	; (801036c <free+0xc>)
 8010362:	4601      	mov	r1, r0
 8010364:	6818      	ldr	r0, [r3, #0]
 8010366:	f000 b829 	b.w	80103bc <_free_r>
 801036a:	bf00      	nop
 801036c:	20000c28 	.word	0x20000c28

08010370 <memcpy>:
 8010370:	440a      	add	r2, r1
 8010372:	4291      	cmp	r1, r2
 8010374:	f100 33ff 	add.w	r3, r0, #4294967295
 8010378:	d100      	bne.n	801037c <memcpy+0xc>
 801037a:	4770      	bx	lr
 801037c:	b510      	push	{r4, lr}
 801037e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010386:	4291      	cmp	r1, r2
 8010388:	d1f9      	bne.n	801037e <memcpy+0xe>
 801038a:	bd10      	pop	{r4, pc}

0801038c <memset>:
 801038c:	4402      	add	r2, r0
 801038e:	4603      	mov	r3, r0
 8010390:	4293      	cmp	r3, r2
 8010392:	d100      	bne.n	8010396 <memset+0xa>
 8010394:	4770      	bx	lr
 8010396:	f803 1b01 	strb.w	r1, [r3], #1
 801039a:	e7f9      	b.n	8010390 <memset+0x4>

0801039c <_calloc_r>:
 801039c:	b513      	push	{r0, r1, r4, lr}
 801039e:	434a      	muls	r2, r1
 80103a0:	4611      	mov	r1, r2
 80103a2:	9201      	str	r2, [sp, #4]
 80103a4:	f000 f85a 	bl	801045c <_malloc_r>
 80103a8:	4604      	mov	r4, r0
 80103aa:	b118      	cbz	r0, 80103b4 <_calloc_r+0x18>
 80103ac:	9a01      	ldr	r2, [sp, #4]
 80103ae:	2100      	movs	r1, #0
 80103b0:	f7ff ffec 	bl	801038c <memset>
 80103b4:	4620      	mov	r0, r4
 80103b6:	b002      	add	sp, #8
 80103b8:	bd10      	pop	{r4, pc}
	...

080103bc <_free_r>:
 80103bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103be:	2900      	cmp	r1, #0
 80103c0:	d048      	beq.n	8010454 <_free_r+0x98>
 80103c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103c6:	9001      	str	r0, [sp, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f1a1 0404 	sub.w	r4, r1, #4
 80103ce:	bfb8      	it	lt
 80103d0:	18e4      	addlt	r4, r4, r3
 80103d2:	f000 f919 	bl	8010608 <__malloc_lock>
 80103d6:	4a20      	ldr	r2, [pc, #128]	; (8010458 <_free_r+0x9c>)
 80103d8:	9801      	ldr	r0, [sp, #4]
 80103da:	6813      	ldr	r3, [r2, #0]
 80103dc:	4615      	mov	r5, r2
 80103de:	b933      	cbnz	r3, 80103ee <_free_r+0x32>
 80103e0:	6063      	str	r3, [r4, #4]
 80103e2:	6014      	str	r4, [r2, #0]
 80103e4:	b003      	add	sp, #12
 80103e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103ea:	f000 b913 	b.w	8010614 <__malloc_unlock>
 80103ee:	42a3      	cmp	r3, r4
 80103f0:	d90b      	bls.n	801040a <_free_r+0x4e>
 80103f2:	6821      	ldr	r1, [r4, #0]
 80103f4:	1862      	adds	r2, r4, r1
 80103f6:	4293      	cmp	r3, r2
 80103f8:	bf04      	itt	eq
 80103fa:	681a      	ldreq	r2, [r3, #0]
 80103fc:	685b      	ldreq	r3, [r3, #4]
 80103fe:	6063      	str	r3, [r4, #4]
 8010400:	bf04      	itt	eq
 8010402:	1852      	addeq	r2, r2, r1
 8010404:	6022      	streq	r2, [r4, #0]
 8010406:	602c      	str	r4, [r5, #0]
 8010408:	e7ec      	b.n	80103e4 <_free_r+0x28>
 801040a:	461a      	mov	r2, r3
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	b10b      	cbz	r3, 8010414 <_free_r+0x58>
 8010410:	42a3      	cmp	r3, r4
 8010412:	d9fa      	bls.n	801040a <_free_r+0x4e>
 8010414:	6811      	ldr	r1, [r2, #0]
 8010416:	1855      	adds	r5, r2, r1
 8010418:	42a5      	cmp	r5, r4
 801041a:	d10b      	bne.n	8010434 <_free_r+0x78>
 801041c:	6824      	ldr	r4, [r4, #0]
 801041e:	4421      	add	r1, r4
 8010420:	1854      	adds	r4, r2, r1
 8010422:	42a3      	cmp	r3, r4
 8010424:	6011      	str	r1, [r2, #0]
 8010426:	d1dd      	bne.n	80103e4 <_free_r+0x28>
 8010428:	681c      	ldr	r4, [r3, #0]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	6053      	str	r3, [r2, #4]
 801042e:	4421      	add	r1, r4
 8010430:	6011      	str	r1, [r2, #0]
 8010432:	e7d7      	b.n	80103e4 <_free_r+0x28>
 8010434:	d902      	bls.n	801043c <_free_r+0x80>
 8010436:	230c      	movs	r3, #12
 8010438:	6003      	str	r3, [r0, #0]
 801043a:	e7d3      	b.n	80103e4 <_free_r+0x28>
 801043c:	6825      	ldr	r5, [r4, #0]
 801043e:	1961      	adds	r1, r4, r5
 8010440:	428b      	cmp	r3, r1
 8010442:	bf04      	itt	eq
 8010444:	6819      	ldreq	r1, [r3, #0]
 8010446:	685b      	ldreq	r3, [r3, #4]
 8010448:	6063      	str	r3, [r4, #4]
 801044a:	bf04      	itt	eq
 801044c:	1949      	addeq	r1, r1, r5
 801044e:	6021      	streq	r1, [r4, #0]
 8010450:	6054      	str	r4, [r2, #4]
 8010452:	e7c7      	b.n	80103e4 <_free_r+0x28>
 8010454:	b003      	add	sp, #12
 8010456:	bd30      	pop	{r4, r5, pc}
 8010458:	2000106c 	.word	0x2000106c

0801045c <_malloc_r>:
 801045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801045e:	1ccd      	adds	r5, r1, #3
 8010460:	f025 0503 	bic.w	r5, r5, #3
 8010464:	3508      	adds	r5, #8
 8010466:	2d0c      	cmp	r5, #12
 8010468:	bf38      	it	cc
 801046a:	250c      	movcc	r5, #12
 801046c:	2d00      	cmp	r5, #0
 801046e:	4606      	mov	r6, r0
 8010470:	db01      	blt.n	8010476 <_malloc_r+0x1a>
 8010472:	42a9      	cmp	r1, r5
 8010474:	d903      	bls.n	801047e <_malloc_r+0x22>
 8010476:	230c      	movs	r3, #12
 8010478:	6033      	str	r3, [r6, #0]
 801047a:	2000      	movs	r0, #0
 801047c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801047e:	f000 f8c3 	bl	8010608 <__malloc_lock>
 8010482:	4921      	ldr	r1, [pc, #132]	; (8010508 <_malloc_r+0xac>)
 8010484:	680a      	ldr	r2, [r1, #0]
 8010486:	4614      	mov	r4, r2
 8010488:	b99c      	cbnz	r4, 80104b2 <_malloc_r+0x56>
 801048a:	4f20      	ldr	r7, [pc, #128]	; (801050c <_malloc_r+0xb0>)
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	b923      	cbnz	r3, 801049a <_malloc_r+0x3e>
 8010490:	4621      	mov	r1, r4
 8010492:	4630      	mov	r0, r6
 8010494:	f000 f83c 	bl	8010510 <_sbrk_r>
 8010498:	6038      	str	r0, [r7, #0]
 801049a:	4629      	mov	r1, r5
 801049c:	4630      	mov	r0, r6
 801049e:	f000 f837 	bl	8010510 <_sbrk_r>
 80104a2:	1c43      	adds	r3, r0, #1
 80104a4:	d123      	bne.n	80104ee <_malloc_r+0x92>
 80104a6:	230c      	movs	r3, #12
 80104a8:	6033      	str	r3, [r6, #0]
 80104aa:	4630      	mov	r0, r6
 80104ac:	f000 f8b2 	bl	8010614 <__malloc_unlock>
 80104b0:	e7e3      	b.n	801047a <_malloc_r+0x1e>
 80104b2:	6823      	ldr	r3, [r4, #0]
 80104b4:	1b5b      	subs	r3, r3, r5
 80104b6:	d417      	bmi.n	80104e8 <_malloc_r+0x8c>
 80104b8:	2b0b      	cmp	r3, #11
 80104ba:	d903      	bls.n	80104c4 <_malloc_r+0x68>
 80104bc:	6023      	str	r3, [r4, #0]
 80104be:	441c      	add	r4, r3
 80104c0:	6025      	str	r5, [r4, #0]
 80104c2:	e004      	b.n	80104ce <_malloc_r+0x72>
 80104c4:	6863      	ldr	r3, [r4, #4]
 80104c6:	42a2      	cmp	r2, r4
 80104c8:	bf0c      	ite	eq
 80104ca:	600b      	streq	r3, [r1, #0]
 80104cc:	6053      	strne	r3, [r2, #4]
 80104ce:	4630      	mov	r0, r6
 80104d0:	f000 f8a0 	bl	8010614 <__malloc_unlock>
 80104d4:	f104 000b 	add.w	r0, r4, #11
 80104d8:	1d23      	adds	r3, r4, #4
 80104da:	f020 0007 	bic.w	r0, r0, #7
 80104de:	1ac2      	subs	r2, r0, r3
 80104e0:	d0cc      	beq.n	801047c <_malloc_r+0x20>
 80104e2:	1a1b      	subs	r3, r3, r0
 80104e4:	50a3      	str	r3, [r4, r2]
 80104e6:	e7c9      	b.n	801047c <_malloc_r+0x20>
 80104e8:	4622      	mov	r2, r4
 80104ea:	6864      	ldr	r4, [r4, #4]
 80104ec:	e7cc      	b.n	8010488 <_malloc_r+0x2c>
 80104ee:	1cc4      	adds	r4, r0, #3
 80104f0:	f024 0403 	bic.w	r4, r4, #3
 80104f4:	42a0      	cmp	r0, r4
 80104f6:	d0e3      	beq.n	80104c0 <_malloc_r+0x64>
 80104f8:	1a21      	subs	r1, r4, r0
 80104fa:	4630      	mov	r0, r6
 80104fc:	f000 f808 	bl	8010510 <_sbrk_r>
 8010500:	3001      	adds	r0, #1
 8010502:	d1dd      	bne.n	80104c0 <_malloc_r+0x64>
 8010504:	e7cf      	b.n	80104a6 <_malloc_r+0x4a>
 8010506:	bf00      	nop
 8010508:	2000106c 	.word	0x2000106c
 801050c:	20001070 	.word	0x20001070

08010510 <_sbrk_r>:
 8010510:	b538      	push	{r3, r4, r5, lr}
 8010512:	4d06      	ldr	r5, [pc, #24]	; (801052c <_sbrk_r+0x1c>)
 8010514:	2300      	movs	r3, #0
 8010516:	4604      	mov	r4, r0
 8010518:	4608      	mov	r0, r1
 801051a:	602b      	str	r3, [r5, #0]
 801051c:	f7f3 fd72 	bl	8004004 <_sbrk>
 8010520:	1c43      	adds	r3, r0, #1
 8010522:	d102      	bne.n	801052a <_sbrk_r+0x1a>
 8010524:	682b      	ldr	r3, [r5, #0]
 8010526:	b103      	cbz	r3, 801052a <_sbrk_r+0x1a>
 8010528:	6023      	str	r3, [r4, #0]
 801052a:	bd38      	pop	{r3, r4, r5, pc}
 801052c:	20001108 	.word	0x20001108

08010530 <_raise_r>:
 8010530:	291f      	cmp	r1, #31
 8010532:	b538      	push	{r3, r4, r5, lr}
 8010534:	4604      	mov	r4, r0
 8010536:	460d      	mov	r5, r1
 8010538:	d904      	bls.n	8010544 <_raise_r+0x14>
 801053a:	2316      	movs	r3, #22
 801053c:	6003      	str	r3, [r0, #0]
 801053e:	f04f 30ff 	mov.w	r0, #4294967295
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010546:	b112      	cbz	r2, 801054e <_raise_r+0x1e>
 8010548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801054c:	b94b      	cbnz	r3, 8010562 <_raise_r+0x32>
 801054e:	4620      	mov	r0, r4
 8010550:	f000 f830 	bl	80105b4 <_getpid_r>
 8010554:	462a      	mov	r2, r5
 8010556:	4601      	mov	r1, r0
 8010558:	4620      	mov	r0, r4
 801055a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801055e:	f000 b817 	b.w	8010590 <_kill_r>
 8010562:	2b01      	cmp	r3, #1
 8010564:	d00a      	beq.n	801057c <_raise_r+0x4c>
 8010566:	1c59      	adds	r1, r3, #1
 8010568:	d103      	bne.n	8010572 <_raise_r+0x42>
 801056a:	2316      	movs	r3, #22
 801056c:	6003      	str	r3, [r0, #0]
 801056e:	2001      	movs	r0, #1
 8010570:	e7e7      	b.n	8010542 <_raise_r+0x12>
 8010572:	2400      	movs	r4, #0
 8010574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010578:	4628      	mov	r0, r5
 801057a:	4798      	blx	r3
 801057c:	2000      	movs	r0, #0
 801057e:	e7e0      	b.n	8010542 <_raise_r+0x12>

08010580 <raise>:
 8010580:	4b02      	ldr	r3, [pc, #8]	; (801058c <raise+0xc>)
 8010582:	4601      	mov	r1, r0
 8010584:	6818      	ldr	r0, [r3, #0]
 8010586:	f7ff bfd3 	b.w	8010530 <_raise_r>
 801058a:	bf00      	nop
 801058c:	20000c28 	.word	0x20000c28

08010590 <_kill_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d07      	ldr	r5, [pc, #28]	; (80105b0 <_kill_r+0x20>)
 8010594:	2300      	movs	r3, #0
 8010596:	4604      	mov	r4, r0
 8010598:	4608      	mov	r0, r1
 801059a:	4611      	mov	r1, r2
 801059c:	602b      	str	r3, [r5, #0]
 801059e:	f7f3 fd17 	bl	8003fd0 <_kill>
 80105a2:	1c43      	adds	r3, r0, #1
 80105a4:	d102      	bne.n	80105ac <_kill_r+0x1c>
 80105a6:	682b      	ldr	r3, [r5, #0]
 80105a8:	b103      	cbz	r3, 80105ac <_kill_r+0x1c>
 80105aa:	6023      	str	r3, [r4, #0]
 80105ac:	bd38      	pop	{r3, r4, r5, pc}
 80105ae:	bf00      	nop
 80105b0:	20001108 	.word	0x20001108

080105b4 <_getpid_r>:
 80105b4:	f7f3 bd04 	b.w	8003fc0 <_getpid>

080105b8 <siprintf>:
 80105b8:	b40e      	push	{r1, r2, r3}
 80105ba:	b500      	push	{lr}
 80105bc:	b09c      	sub	sp, #112	; 0x70
 80105be:	ab1d      	add	r3, sp, #116	; 0x74
 80105c0:	9002      	str	r0, [sp, #8]
 80105c2:	9006      	str	r0, [sp, #24]
 80105c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105c8:	4809      	ldr	r0, [pc, #36]	; (80105f0 <siprintf+0x38>)
 80105ca:	9107      	str	r1, [sp, #28]
 80105cc:	9104      	str	r1, [sp, #16]
 80105ce:	4909      	ldr	r1, [pc, #36]	; (80105f4 <siprintf+0x3c>)
 80105d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105d4:	9105      	str	r1, [sp, #20]
 80105d6:	6800      	ldr	r0, [r0, #0]
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	a902      	add	r1, sp, #8
 80105dc:	f000 f8a2 	bl	8010724 <_svfiprintf_r>
 80105e0:	9b02      	ldr	r3, [sp, #8]
 80105e2:	2200      	movs	r2, #0
 80105e4:	701a      	strb	r2, [r3, #0]
 80105e6:	b01c      	add	sp, #112	; 0x70
 80105e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80105ec:	b003      	add	sp, #12
 80105ee:	4770      	bx	lr
 80105f0:	20000c28 	.word	0x20000c28
 80105f4:	ffff0208 	.word	0xffff0208

080105f8 <strcpy>:
 80105f8:	4603      	mov	r3, r0
 80105fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105fe:	f803 2b01 	strb.w	r2, [r3], #1
 8010602:	2a00      	cmp	r2, #0
 8010604:	d1f9      	bne.n	80105fa <strcpy+0x2>
 8010606:	4770      	bx	lr

08010608 <__malloc_lock>:
 8010608:	4801      	ldr	r0, [pc, #4]	; (8010610 <__malloc_lock+0x8>)
 801060a:	f000 bb1f 	b.w	8010c4c <__retarget_lock_acquire_recursive>
 801060e:	bf00      	nop
 8010610:	20001110 	.word	0x20001110

08010614 <__malloc_unlock>:
 8010614:	4801      	ldr	r0, [pc, #4]	; (801061c <__malloc_unlock+0x8>)
 8010616:	f000 bb1a 	b.w	8010c4e <__retarget_lock_release_recursive>
 801061a:	bf00      	nop
 801061c:	20001110 	.word	0x20001110

08010620 <_realloc_r>:
 8010620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010622:	4607      	mov	r7, r0
 8010624:	4614      	mov	r4, r2
 8010626:	460e      	mov	r6, r1
 8010628:	b921      	cbnz	r1, 8010634 <_realloc_r+0x14>
 801062a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801062e:	4611      	mov	r1, r2
 8010630:	f7ff bf14 	b.w	801045c <_malloc_r>
 8010634:	b922      	cbnz	r2, 8010640 <_realloc_r+0x20>
 8010636:	f7ff fec1 	bl	80103bc <_free_r>
 801063a:	4625      	mov	r5, r4
 801063c:	4628      	mov	r0, r5
 801063e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010640:	f000 fb20 	bl	8010c84 <_malloc_usable_size_r>
 8010644:	42a0      	cmp	r0, r4
 8010646:	d20f      	bcs.n	8010668 <_realloc_r+0x48>
 8010648:	4621      	mov	r1, r4
 801064a:	4638      	mov	r0, r7
 801064c:	f7ff ff06 	bl	801045c <_malloc_r>
 8010650:	4605      	mov	r5, r0
 8010652:	2800      	cmp	r0, #0
 8010654:	d0f2      	beq.n	801063c <_realloc_r+0x1c>
 8010656:	4631      	mov	r1, r6
 8010658:	4622      	mov	r2, r4
 801065a:	f7ff fe89 	bl	8010370 <memcpy>
 801065e:	4631      	mov	r1, r6
 8010660:	4638      	mov	r0, r7
 8010662:	f7ff feab 	bl	80103bc <_free_r>
 8010666:	e7e9      	b.n	801063c <_realloc_r+0x1c>
 8010668:	4635      	mov	r5, r6
 801066a:	e7e7      	b.n	801063c <_realloc_r+0x1c>

0801066c <__ssputs_r>:
 801066c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010670:	688e      	ldr	r6, [r1, #8]
 8010672:	429e      	cmp	r6, r3
 8010674:	4682      	mov	sl, r0
 8010676:	460c      	mov	r4, r1
 8010678:	4690      	mov	r8, r2
 801067a:	461f      	mov	r7, r3
 801067c:	d838      	bhi.n	80106f0 <__ssputs_r+0x84>
 801067e:	898a      	ldrh	r2, [r1, #12]
 8010680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010684:	d032      	beq.n	80106ec <__ssputs_r+0x80>
 8010686:	6825      	ldr	r5, [r4, #0]
 8010688:	6909      	ldr	r1, [r1, #16]
 801068a:	eba5 0901 	sub.w	r9, r5, r1
 801068e:	6965      	ldr	r5, [r4, #20]
 8010690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010698:	3301      	adds	r3, #1
 801069a:	444b      	add	r3, r9
 801069c:	106d      	asrs	r5, r5, #1
 801069e:	429d      	cmp	r5, r3
 80106a0:	bf38      	it	cc
 80106a2:	461d      	movcc	r5, r3
 80106a4:	0553      	lsls	r3, r2, #21
 80106a6:	d531      	bpl.n	801070c <__ssputs_r+0xa0>
 80106a8:	4629      	mov	r1, r5
 80106aa:	f7ff fed7 	bl	801045c <_malloc_r>
 80106ae:	4606      	mov	r6, r0
 80106b0:	b950      	cbnz	r0, 80106c8 <__ssputs_r+0x5c>
 80106b2:	230c      	movs	r3, #12
 80106b4:	f8ca 3000 	str.w	r3, [sl]
 80106b8:	89a3      	ldrh	r3, [r4, #12]
 80106ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106be:	81a3      	strh	r3, [r4, #12]
 80106c0:	f04f 30ff 	mov.w	r0, #4294967295
 80106c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106c8:	6921      	ldr	r1, [r4, #16]
 80106ca:	464a      	mov	r2, r9
 80106cc:	f7ff fe50 	bl	8010370 <memcpy>
 80106d0:	89a3      	ldrh	r3, [r4, #12]
 80106d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80106d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106da:	81a3      	strh	r3, [r4, #12]
 80106dc:	6126      	str	r6, [r4, #16]
 80106de:	6165      	str	r5, [r4, #20]
 80106e0:	444e      	add	r6, r9
 80106e2:	eba5 0509 	sub.w	r5, r5, r9
 80106e6:	6026      	str	r6, [r4, #0]
 80106e8:	60a5      	str	r5, [r4, #8]
 80106ea:	463e      	mov	r6, r7
 80106ec:	42be      	cmp	r6, r7
 80106ee:	d900      	bls.n	80106f2 <__ssputs_r+0x86>
 80106f0:	463e      	mov	r6, r7
 80106f2:	4632      	mov	r2, r6
 80106f4:	6820      	ldr	r0, [r4, #0]
 80106f6:	4641      	mov	r1, r8
 80106f8:	f000 faaa 	bl	8010c50 <memmove>
 80106fc:	68a3      	ldr	r3, [r4, #8]
 80106fe:	6822      	ldr	r2, [r4, #0]
 8010700:	1b9b      	subs	r3, r3, r6
 8010702:	4432      	add	r2, r6
 8010704:	60a3      	str	r3, [r4, #8]
 8010706:	6022      	str	r2, [r4, #0]
 8010708:	2000      	movs	r0, #0
 801070a:	e7db      	b.n	80106c4 <__ssputs_r+0x58>
 801070c:	462a      	mov	r2, r5
 801070e:	f7ff ff87 	bl	8010620 <_realloc_r>
 8010712:	4606      	mov	r6, r0
 8010714:	2800      	cmp	r0, #0
 8010716:	d1e1      	bne.n	80106dc <__ssputs_r+0x70>
 8010718:	6921      	ldr	r1, [r4, #16]
 801071a:	4650      	mov	r0, sl
 801071c:	f7ff fe4e 	bl	80103bc <_free_r>
 8010720:	e7c7      	b.n	80106b2 <__ssputs_r+0x46>
	...

08010724 <_svfiprintf_r>:
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	4698      	mov	r8, r3
 801072a:	898b      	ldrh	r3, [r1, #12]
 801072c:	061b      	lsls	r3, r3, #24
 801072e:	b09d      	sub	sp, #116	; 0x74
 8010730:	4607      	mov	r7, r0
 8010732:	460d      	mov	r5, r1
 8010734:	4614      	mov	r4, r2
 8010736:	d50e      	bpl.n	8010756 <_svfiprintf_r+0x32>
 8010738:	690b      	ldr	r3, [r1, #16]
 801073a:	b963      	cbnz	r3, 8010756 <_svfiprintf_r+0x32>
 801073c:	2140      	movs	r1, #64	; 0x40
 801073e:	f7ff fe8d 	bl	801045c <_malloc_r>
 8010742:	6028      	str	r0, [r5, #0]
 8010744:	6128      	str	r0, [r5, #16]
 8010746:	b920      	cbnz	r0, 8010752 <_svfiprintf_r+0x2e>
 8010748:	230c      	movs	r3, #12
 801074a:	603b      	str	r3, [r7, #0]
 801074c:	f04f 30ff 	mov.w	r0, #4294967295
 8010750:	e0d1      	b.n	80108f6 <_svfiprintf_r+0x1d2>
 8010752:	2340      	movs	r3, #64	; 0x40
 8010754:	616b      	str	r3, [r5, #20]
 8010756:	2300      	movs	r3, #0
 8010758:	9309      	str	r3, [sp, #36]	; 0x24
 801075a:	2320      	movs	r3, #32
 801075c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010760:	f8cd 800c 	str.w	r8, [sp, #12]
 8010764:	2330      	movs	r3, #48	; 0x30
 8010766:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010910 <_svfiprintf_r+0x1ec>
 801076a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801076e:	f04f 0901 	mov.w	r9, #1
 8010772:	4623      	mov	r3, r4
 8010774:	469a      	mov	sl, r3
 8010776:	f813 2b01 	ldrb.w	r2, [r3], #1
 801077a:	b10a      	cbz	r2, 8010780 <_svfiprintf_r+0x5c>
 801077c:	2a25      	cmp	r2, #37	; 0x25
 801077e:	d1f9      	bne.n	8010774 <_svfiprintf_r+0x50>
 8010780:	ebba 0b04 	subs.w	fp, sl, r4
 8010784:	d00b      	beq.n	801079e <_svfiprintf_r+0x7a>
 8010786:	465b      	mov	r3, fp
 8010788:	4622      	mov	r2, r4
 801078a:	4629      	mov	r1, r5
 801078c:	4638      	mov	r0, r7
 801078e:	f7ff ff6d 	bl	801066c <__ssputs_r>
 8010792:	3001      	adds	r0, #1
 8010794:	f000 80aa 	beq.w	80108ec <_svfiprintf_r+0x1c8>
 8010798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801079a:	445a      	add	r2, fp
 801079c:	9209      	str	r2, [sp, #36]	; 0x24
 801079e:	f89a 3000 	ldrb.w	r3, [sl]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 80a2 	beq.w	80108ec <_svfiprintf_r+0x1c8>
 80107a8:	2300      	movs	r3, #0
 80107aa:	f04f 32ff 	mov.w	r2, #4294967295
 80107ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107b2:	f10a 0a01 	add.w	sl, sl, #1
 80107b6:	9304      	str	r3, [sp, #16]
 80107b8:	9307      	str	r3, [sp, #28]
 80107ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107be:	931a      	str	r3, [sp, #104]	; 0x68
 80107c0:	4654      	mov	r4, sl
 80107c2:	2205      	movs	r2, #5
 80107c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107c8:	4851      	ldr	r0, [pc, #324]	; (8010910 <_svfiprintf_r+0x1ec>)
 80107ca:	f7ef fd09 	bl	80001e0 <memchr>
 80107ce:	9a04      	ldr	r2, [sp, #16]
 80107d0:	b9d8      	cbnz	r0, 801080a <_svfiprintf_r+0xe6>
 80107d2:	06d0      	lsls	r0, r2, #27
 80107d4:	bf44      	itt	mi
 80107d6:	2320      	movmi	r3, #32
 80107d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107dc:	0711      	lsls	r1, r2, #28
 80107de:	bf44      	itt	mi
 80107e0:	232b      	movmi	r3, #43	; 0x2b
 80107e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107e6:	f89a 3000 	ldrb.w	r3, [sl]
 80107ea:	2b2a      	cmp	r3, #42	; 0x2a
 80107ec:	d015      	beq.n	801081a <_svfiprintf_r+0xf6>
 80107ee:	9a07      	ldr	r2, [sp, #28]
 80107f0:	4654      	mov	r4, sl
 80107f2:	2000      	movs	r0, #0
 80107f4:	f04f 0c0a 	mov.w	ip, #10
 80107f8:	4621      	mov	r1, r4
 80107fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107fe:	3b30      	subs	r3, #48	; 0x30
 8010800:	2b09      	cmp	r3, #9
 8010802:	d94e      	bls.n	80108a2 <_svfiprintf_r+0x17e>
 8010804:	b1b0      	cbz	r0, 8010834 <_svfiprintf_r+0x110>
 8010806:	9207      	str	r2, [sp, #28]
 8010808:	e014      	b.n	8010834 <_svfiprintf_r+0x110>
 801080a:	eba0 0308 	sub.w	r3, r0, r8
 801080e:	fa09 f303 	lsl.w	r3, r9, r3
 8010812:	4313      	orrs	r3, r2
 8010814:	9304      	str	r3, [sp, #16]
 8010816:	46a2      	mov	sl, r4
 8010818:	e7d2      	b.n	80107c0 <_svfiprintf_r+0x9c>
 801081a:	9b03      	ldr	r3, [sp, #12]
 801081c:	1d19      	adds	r1, r3, #4
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	9103      	str	r1, [sp, #12]
 8010822:	2b00      	cmp	r3, #0
 8010824:	bfbb      	ittet	lt
 8010826:	425b      	neglt	r3, r3
 8010828:	f042 0202 	orrlt.w	r2, r2, #2
 801082c:	9307      	strge	r3, [sp, #28]
 801082e:	9307      	strlt	r3, [sp, #28]
 8010830:	bfb8      	it	lt
 8010832:	9204      	strlt	r2, [sp, #16]
 8010834:	7823      	ldrb	r3, [r4, #0]
 8010836:	2b2e      	cmp	r3, #46	; 0x2e
 8010838:	d10c      	bne.n	8010854 <_svfiprintf_r+0x130>
 801083a:	7863      	ldrb	r3, [r4, #1]
 801083c:	2b2a      	cmp	r3, #42	; 0x2a
 801083e:	d135      	bne.n	80108ac <_svfiprintf_r+0x188>
 8010840:	9b03      	ldr	r3, [sp, #12]
 8010842:	1d1a      	adds	r2, r3, #4
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	9203      	str	r2, [sp, #12]
 8010848:	2b00      	cmp	r3, #0
 801084a:	bfb8      	it	lt
 801084c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010850:	3402      	adds	r4, #2
 8010852:	9305      	str	r3, [sp, #20]
 8010854:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010920 <_svfiprintf_r+0x1fc>
 8010858:	7821      	ldrb	r1, [r4, #0]
 801085a:	2203      	movs	r2, #3
 801085c:	4650      	mov	r0, sl
 801085e:	f7ef fcbf 	bl	80001e0 <memchr>
 8010862:	b140      	cbz	r0, 8010876 <_svfiprintf_r+0x152>
 8010864:	2340      	movs	r3, #64	; 0x40
 8010866:	eba0 000a 	sub.w	r0, r0, sl
 801086a:	fa03 f000 	lsl.w	r0, r3, r0
 801086e:	9b04      	ldr	r3, [sp, #16]
 8010870:	4303      	orrs	r3, r0
 8010872:	3401      	adds	r4, #1
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801087a:	4826      	ldr	r0, [pc, #152]	; (8010914 <_svfiprintf_r+0x1f0>)
 801087c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010880:	2206      	movs	r2, #6
 8010882:	f7ef fcad 	bl	80001e0 <memchr>
 8010886:	2800      	cmp	r0, #0
 8010888:	d038      	beq.n	80108fc <_svfiprintf_r+0x1d8>
 801088a:	4b23      	ldr	r3, [pc, #140]	; (8010918 <_svfiprintf_r+0x1f4>)
 801088c:	bb1b      	cbnz	r3, 80108d6 <_svfiprintf_r+0x1b2>
 801088e:	9b03      	ldr	r3, [sp, #12]
 8010890:	3307      	adds	r3, #7
 8010892:	f023 0307 	bic.w	r3, r3, #7
 8010896:	3308      	adds	r3, #8
 8010898:	9303      	str	r3, [sp, #12]
 801089a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801089c:	4433      	add	r3, r6
 801089e:	9309      	str	r3, [sp, #36]	; 0x24
 80108a0:	e767      	b.n	8010772 <_svfiprintf_r+0x4e>
 80108a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80108a6:	460c      	mov	r4, r1
 80108a8:	2001      	movs	r0, #1
 80108aa:	e7a5      	b.n	80107f8 <_svfiprintf_r+0xd4>
 80108ac:	2300      	movs	r3, #0
 80108ae:	3401      	adds	r4, #1
 80108b0:	9305      	str	r3, [sp, #20]
 80108b2:	4619      	mov	r1, r3
 80108b4:	f04f 0c0a 	mov.w	ip, #10
 80108b8:	4620      	mov	r0, r4
 80108ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108be:	3a30      	subs	r2, #48	; 0x30
 80108c0:	2a09      	cmp	r2, #9
 80108c2:	d903      	bls.n	80108cc <_svfiprintf_r+0x1a8>
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d0c5      	beq.n	8010854 <_svfiprintf_r+0x130>
 80108c8:	9105      	str	r1, [sp, #20]
 80108ca:	e7c3      	b.n	8010854 <_svfiprintf_r+0x130>
 80108cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80108d0:	4604      	mov	r4, r0
 80108d2:	2301      	movs	r3, #1
 80108d4:	e7f0      	b.n	80108b8 <_svfiprintf_r+0x194>
 80108d6:	ab03      	add	r3, sp, #12
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	462a      	mov	r2, r5
 80108dc:	4b0f      	ldr	r3, [pc, #60]	; (801091c <_svfiprintf_r+0x1f8>)
 80108de:	a904      	add	r1, sp, #16
 80108e0:	4638      	mov	r0, r7
 80108e2:	f3af 8000 	nop.w
 80108e6:	1c42      	adds	r2, r0, #1
 80108e8:	4606      	mov	r6, r0
 80108ea:	d1d6      	bne.n	801089a <_svfiprintf_r+0x176>
 80108ec:	89ab      	ldrh	r3, [r5, #12]
 80108ee:	065b      	lsls	r3, r3, #25
 80108f0:	f53f af2c 	bmi.w	801074c <_svfiprintf_r+0x28>
 80108f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108f6:	b01d      	add	sp, #116	; 0x74
 80108f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fc:	ab03      	add	r3, sp, #12
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	462a      	mov	r2, r5
 8010902:	4b06      	ldr	r3, [pc, #24]	; (801091c <_svfiprintf_r+0x1f8>)
 8010904:	a904      	add	r1, sp, #16
 8010906:	4638      	mov	r0, r7
 8010908:	f000 f87a 	bl	8010a00 <_printf_i>
 801090c:	e7eb      	b.n	80108e6 <_svfiprintf_r+0x1c2>
 801090e:	bf00      	nop
 8010910:	08067c50 	.word	0x08067c50
 8010914:	08067c5a 	.word	0x08067c5a
 8010918:	00000000 	.word	0x00000000
 801091c:	0801066d 	.word	0x0801066d
 8010920:	08067c56 	.word	0x08067c56

08010924 <_printf_common>:
 8010924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010928:	4616      	mov	r6, r2
 801092a:	4699      	mov	r9, r3
 801092c:	688a      	ldr	r2, [r1, #8]
 801092e:	690b      	ldr	r3, [r1, #16]
 8010930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010934:	4293      	cmp	r3, r2
 8010936:	bfb8      	it	lt
 8010938:	4613      	movlt	r3, r2
 801093a:	6033      	str	r3, [r6, #0]
 801093c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010940:	4607      	mov	r7, r0
 8010942:	460c      	mov	r4, r1
 8010944:	b10a      	cbz	r2, 801094a <_printf_common+0x26>
 8010946:	3301      	adds	r3, #1
 8010948:	6033      	str	r3, [r6, #0]
 801094a:	6823      	ldr	r3, [r4, #0]
 801094c:	0699      	lsls	r1, r3, #26
 801094e:	bf42      	ittt	mi
 8010950:	6833      	ldrmi	r3, [r6, #0]
 8010952:	3302      	addmi	r3, #2
 8010954:	6033      	strmi	r3, [r6, #0]
 8010956:	6825      	ldr	r5, [r4, #0]
 8010958:	f015 0506 	ands.w	r5, r5, #6
 801095c:	d106      	bne.n	801096c <_printf_common+0x48>
 801095e:	f104 0a19 	add.w	sl, r4, #25
 8010962:	68e3      	ldr	r3, [r4, #12]
 8010964:	6832      	ldr	r2, [r6, #0]
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	42ab      	cmp	r3, r5
 801096a:	dc26      	bgt.n	80109ba <_printf_common+0x96>
 801096c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010970:	1e13      	subs	r3, r2, #0
 8010972:	6822      	ldr	r2, [r4, #0]
 8010974:	bf18      	it	ne
 8010976:	2301      	movne	r3, #1
 8010978:	0692      	lsls	r2, r2, #26
 801097a:	d42b      	bmi.n	80109d4 <_printf_common+0xb0>
 801097c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010980:	4649      	mov	r1, r9
 8010982:	4638      	mov	r0, r7
 8010984:	47c0      	blx	r8
 8010986:	3001      	adds	r0, #1
 8010988:	d01e      	beq.n	80109c8 <_printf_common+0xa4>
 801098a:	6823      	ldr	r3, [r4, #0]
 801098c:	68e5      	ldr	r5, [r4, #12]
 801098e:	6832      	ldr	r2, [r6, #0]
 8010990:	f003 0306 	and.w	r3, r3, #6
 8010994:	2b04      	cmp	r3, #4
 8010996:	bf08      	it	eq
 8010998:	1aad      	subeq	r5, r5, r2
 801099a:	68a3      	ldr	r3, [r4, #8]
 801099c:	6922      	ldr	r2, [r4, #16]
 801099e:	bf0c      	ite	eq
 80109a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109a4:	2500      	movne	r5, #0
 80109a6:	4293      	cmp	r3, r2
 80109a8:	bfc4      	itt	gt
 80109aa:	1a9b      	subgt	r3, r3, r2
 80109ac:	18ed      	addgt	r5, r5, r3
 80109ae:	2600      	movs	r6, #0
 80109b0:	341a      	adds	r4, #26
 80109b2:	42b5      	cmp	r5, r6
 80109b4:	d11a      	bne.n	80109ec <_printf_common+0xc8>
 80109b6:	2000      	movs	r0, #0
 80109b8:	e008      	b.n	80109cc <_printf_common+0xa8>
 80109ba:	2301      	movs	r3, #1
 80109bc:	4652      	mov	r2, sl
 80109be:	4649      	mov	r1, r9
 80109c0:	4638      	mov	r0, r7
 80109c2:	47c0      	blx	r8
 80109c4:	3001      	adds	r0, #1
 80109c6:	d103      	bne.n	80109d0 <_printf_common+0xac>
 80109c8:	f04f 30ff 	mov.w	r0, #4294967295
 80109cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d0:	3501      	adds	r5, #1
 80109d2:	e7c6      	b.n	8010962 <_printf_common+0x3e>
 80109d4:	18e1      	adds	r1, r4, r3
 80109d6:	1c5a      	adds	r2, r3, #1
 80109d8:	2030      	movs	r0, #48	; 0x30
 80109da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109de:	4422      	add	r2, r4
 80109e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109e8:	3302      	adds	r3, #2
 80109ea:	e7c7      	b.n	801097c <_printf_common+0x58>
 80109ec:	2301      	movs	r3, #1
 80109ee:	4622      	mov	r2, r4
 80109f0:	4649      	mov	r1, r9
 80109f2:	4638      	mov	r0, r7
 80109f4:	47c0      	blx	r8
 80109f6:	3001      	adds	r0, #1
 80109f8:	d0e6      	beq.n	80109c8 <_printf_common+0xa4>
 80109fa:	3601      	adds	r6, #1
 80109fc:	e7d9      	b.n	80109b2 <_printf_common+0x8e>
	...

08010a00 <_printf_i>:
 8010a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a04:	460c      	mov	r4, r1
 8010a06:	4691      	mov	r9, r2
 8010a08:	7e27      	ldrb	r7, [r4, #24]
 8010a0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a0c:	2f78      	cmp	r7, #120	; 0x78
 8010a0e:	4680      	mov	r8, r0
 8010a10:	469a      	mov	sl, r3
 8010a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a16:	d807      	bhi.n	8010a28 <_printf_i+0x28>
 8010a18:	2f62      	cmp	r7, #98	; 0x62
 8010a1a:	d80a      	bhi.n	8010a32 <_printf_i+0x32>
 8010a1c:	2f00      	cmp	r7, #0
 8010a1e:	f000 80d8 	beq.w	8010bd2 <_printf_i+0x1d2>
 8010a22:	2f58      	cmp	r7, #88	; 0x58
 8010a24:	f000 80a3 	beq.w	8010b6e <_printf_i+0x16e>
 8010a28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a30:	e03a      	b.n	8010aa8 <_printf_i+0xa8>
 8010a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a36:	2b15      	cmp	r3, #21
 8010a38:	d8f6      	bhi.n	8010a28 <_printf_i+0x28>
 8010a3a:	a001      	add	r0, pc, #4	; (adr r0, 8010a40 <_printf_i+0x40>)
 8010a3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010a40:	08010a99 	.word	0x08010a99
 8010a44:	08010aad 	.word	0x08010aad
 8010a48:	08010a29 	.word	0x08010a29
 8010a4c:	08010a29 	.word	0x08010a29
 8010a50:	08010a29 	.word	0x08010a29
 8010a54:	08010a29 	.word	0x08010a29
 8010a58:	08010aad 	.word	0x08010aad
 8010a5c:	08010a29 	.word	0x08010a29
 8010a60:	08010a29 	.word	0x08010a29
 8010a64:	08010a29 	.word	0x08010a29
 8010a68:	08010a29 	.word	0x08010a29
 8010a6c:	08010bb9 	.word	0x08010bb9
 8010a70:	08010add 	.word	0x08010add
 8010a74:	08010b9b 	.word	0x08010b9b
 8010a78:	08010a29 	.word	0x08010a29
 8010a7c:	08010a29 	.word	0x08010a29
 8010a80:	08010bdb 	.word	0x08010bdb
 8010a84:	08010a29 	.word	0x08010a29
 8010a88:	08010add 	.word	0x08010add
 8010a8c:	08010a29 	.word	0x08010a29
 8010a90:	08010a29 	.word	0x08010a29
 8010a94:	08010ba3 	.word	0x08010ba3
 8010a98:	680b      	ldr	r3, [r1, #0]
 8010a9a:	1d1a      	adds	r2, r3, #4
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	600a      	str	r2, [r1, #0]
 8010aa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e0a3      	b.n	8010bf4 <_printf_i+0x1f4>
 8010aac:	6825      	ldr	r5, [r4, #0]
 8010aae:	6808      	ldr	r0, [r1, #0]
 8010ab0:	062e      	lsls	r6, r5, #24
 8010ab2:	f100 0304 	add.w	r3, r0, #4
 8010ab6:	d50a      	bpl.n	8010ace <_printf_i+0xce>
 8010ab8:	6805      	ldr	r5, [r0, #0]
 8010aba:	600b      	str	r3, [r1, #0]
 8010abc:	2d00      	cmp	r5, #0
 8010abe:	da03      	bge.n	8010ac8 <_printf_i+0xc8>
 8010ac0:	232d      	movs	r3, #45	; 0x2d
 8010ac2:	426d      	negs	r5, r5
 8010ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ac8:	485e      	ldr	r0, [pc, #376]	; (8010c44 <_printf_i+0x244>)
 8010aca:	230a      	movs	r3, #10
 8010acc:	e019      	b.n	8010b02 <_printf_i+0x102>
 8010ace:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010ad2:	6805      	ldr	r5, [r0, #0]
 8010ad4:	600b      	str	r3, [r1, #0]
 8010ad6:	bf18      	it	ne
 8010ad8:	b22d      	sxthne	r5, r5
 8010ada:	e7ef      	b.n	8010abc <_printf_i+0xbc>
 8010adc:	680b      	ldr	r3, [r1, #0]
 8010ade:	6825      	ldr	r5, [r4, #0]
 8010ae0:	1d18      	adds	r0, r3, #4
 8010ae2:	6008      	str	r0, [r1, #0]
 8010ae4:	0628      	lsls	r0, r5, #24
 8010ae6:	d501      	bpl.n	8010aec <_printf_i+0xec>
 8010ae8:	681d      	ldr	r5, [r3, #0]
 8010aea:	e002      	b.n	8010af2 <_printf_i+0xf2>
 8010aec:	0669      	lsls	r1, r5, #25
 8010aee:	d5fb      	bpl.n	8010ae8 <_printf_i+0xe8>
 8010af0:	881d      	ldrh	r5, [r3, #0]
 8010af2:	4854      	ldr	r0, [pc, #336]	; (8010c44 <_printf_i+0x244>)
 8010af4:	2f6f      	cmp	r7, #111	; 0x6f
 8010af6:	bf0c      	ite	eq
 8010af8:	2308      	moveq	r3, #8
 8010afa:	230a      	movne	r3, #10
 8010afc:	2100      	movs	r1, #0
 8010afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b02:	6866      	ldr	r6, [r4, #4]
 8010b04:	60a6      	str	r6, [r4, #8]
 8010b06:	2e00      	cmp	r6, #0
 8010b08:	bfa2      	ittt	ge
 8010b0a:	6821      	ldrge	r1, [r4, #0]
 8010b0c:	f021 0104 	bicge.w	r1, r1, #4
 8010b10:	6021      	strge	r1, [r4, #0]
 8010b12:	b90d      	cbnz	r5, 8010b18 <_printf_i+0x118>
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	d04d      	beq.n	8010bb4 <_printf_i+0x1b4>
 8010b18:	4616      	mov	r6, r2
 8010b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8010b22:	5dc7      	ldrb	r7, [r0, r7]
 8010b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010b28:	462f      	mov	r7, r5
 8010b2a:	42bb      	cmp	r3, r7
 8010b2c:	460d      	mov	r5, r1
 8010b2e:	d9f4      	bls.n	8010b1a <_printf_i+0x11a>
 8010b30:	2b08      	cmp	r3, #8
 8010b32:	d10b      	bne.n	8010b4c <_printf_i+0x14c>
 8010b34:	6823      	ldr	r3, [r4, #0]
 8010b36:	07df      	lsls	r7, r3, #31
 8010b38:	d508      	bpl.n	8010b4c <_printf_i+0x14c>
 8010b3a:	6923      	ldr	r3, [r4, #16]
 8010b3c:	6861      	ldr	r1, [r4, #4]
 8010b3e:	4299      	cmp	r1, r3
 8010b40:	bfde      	ittt	le
 8010b42:	2330      	movle	r3, #48	; 0x30
 8010b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010b48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010b4c:	1b92      	subs	r2, r2, r6
 8010b4e:	6122      	str	r2, [r4, #16]
 8010b50:	f8cd a000 	str.w	sl, [sp]
 8010b54:	464b      	mov	r3, r9
 8010b56:	aa03      	add	r2, sp, #12
 8010b58:	4621      	mov	r1, r4
 8010b5a:	4640      	mov	r0, r8
 8010b5c:	f7ff fee2 	bl	8010924 <_printf_common>
 8010b60:	3001      	adds	r0, #1
 8010b62:	d14c      	bne.n	8010bfe <_printf_i+0x1fe>
 8010b64:	f04f 30ff 	mov.w	r0, #4294967295
 8010b68:	b004      	add	sp, #16
 8010b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b6e:	4835      	ldr	r0, [pc, #212]	; (8010c44 <_printf_i+0x244>)
 8010b70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010b74:	6823      	ldr	r3, [r4, #0]
 8010b76:	680e      	ldr	r6, [r1, #0]
 8010b78:	061f      	lsls	r7, r3, #24
 8010b7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8010b7e:	600e      	str	r6, [r1, #0]
 8010b80:	d514      	bpl.n	8010bac <_printf_i+0x1ac>
 8010b82:	07d9      	lsls	r1, r3, #31
 8010b84:	bf44      	itt	mi
 8010b86:	f043 0320 	orrmi.w	r3, r3, #32
 8010b8a:	6023      	strmi	r3, [r4, #0]
 8010b8c:	b91d      	cbnz	r5, 8010b96 <_printf_i+0x196>
 8010b8e:	6823      	ldr	r3, [r4, #0]
 8010b90:	f023 0320 	bic.w	r3, r3, #32
 8010b94:	6023      	str	r3, [r4, #0]
 8010b96:	2310      	movs	r3, #16
 8010b98:	e7b0      	b.n	8010afc <_printf_i+0xfc>
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	f043 0320 	orr.w	r3, r3, #32
 8010ba0:	6023      	str	r3, [r4, #0]
 8010ba2:	2378      	movs	r3, #120	; 0x78
 8010ba4:	4828      	ldr	r0, [pc, #160]	; (8010c48 <_printf_i+0x248>)
 8010ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010baa:	e7e3      	b.n	8010b74 <_printf_i+0x174>
 8010bac:	065e      	lsls	r6, r3, #25
 8010bae:	bf48      	it	mi
 8010bb0:	b2ad      	uxthmi	r5, r5
 8010bb2:	e7e6      	b.n	8010b82 <_printf_i+0x182>
 8010bb4:	4616      	mov	r6, r2
 8010bb6:	e7bb      	b.n	8010b30 <_printf_i+0x130>
 8010bb8:	680b      	ldr	r3, [r1, #0]
 8010bba:	6826      	ldr	r6, [r4, #0]
 8010bbc:	6960      	ldr	r0, [r4, #20]
 8010bbe:	1d1d      	adds	r5, r3, #4
 8010bc0:	600d      	str	r5, [r1, #0]
 8010bc2:	0635      	lsls	r5, r6, #24
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	d501      	bpl.n	8010bcc <_printf_i+0x1cc>
 8010bc8:	6018      	str	r0, [r3, #0]
 8010bca:	e002      	b.n	8010bd2 <_printf_i+0x1d2>
 8010bcc:	0671      	lsls	r1, r6, #25
 8010bce:	d5fb      	bpl.n	8010bc8 <_printf_i+0x1c8>
 8010bd0:	8018      	strh	r0, [r3, #0]
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	6123      	str	r3, [r4, #16]
 8010bd6:	4616      	mov	r6, r2
 8010bd8:	e7ba      	b.n	8010b50 <_printf_i+0x150>
 8010bda:	680b      	ldr	r3, [r1, #0]
 8010bdc:	1d1a      	adds	r2, r3, #4
 8010bde:	600a      	str	r2, [r1, #0]
 8010be0:	681e      	ldr	r6, [r3, #0]
 8010be2:	6862      	ldr	r2, [r4, #4]
 8010be4:	2100      	movs	r1, #0
 8010be6:	4630      	mov	r0, r6
 8010be8:	f7ef fafa 	bl	80001e0 <memchr>
 8010bec:	b108      	cbz	r0, 8010bf2 <_printf_i+0x1f2>
 8010bee:	1b80      	subs	r0, r0, r6
 8010bf0:	6060      	str	r0, [r4, #4]
 8010bf2:	6863      	ldr	r3, [r4, #4]
 8010bf4:	6123      	str	r3, [r4, #16]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bfc:	e7a8      	b.n	8010b50 <_printf_i+0x150>
 8010bfe:	6923      	ldr	r3, [r4, #16]
 8010c00:	4632      	mov	r2, r6
 8010c02:	4649      	mov	r1, r9
 8010c04:	4640      	mov	r0, r8
 8010c06:	47d0      	blx	sl
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d0ab      	beq.n	8010b64 <_printf_i+0x164>
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	079b      	lsls	r3, r3, #30
 8010c10:	d413      	bmi.n	8010c3a <_printf_i+0x23a>
 8010c12:	68e0      	ldr	r0, [r4, #12]
 8010c14:	9b03      	ldr	r3, [sp, #12]
 8010c16:	4298      	cmp	r0, r3
 8010c18:	bfb8      	it	lt
 8010c1a:	4618      	movlt	r0, r3
 8010c1c:	e7a4      	b.n	8010b68 <_printf_i+0x168>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	4632      	mov	r2, r6
 8010c22:	4649      	mov	r1, r9
 8010c24:	4640      	mov	r0, r8
 8010c26:	47d0      	blx	sl
 8010c28:	3001      	adds	r0, #1
 8010c2a:	d09b      	beq.n	8010b64 <_printf_i+0x164>
 8010c2c:	3501      	adds	r5, #1
 8010c2e:	68e3      	ldr	r3, [r4, #12]
 8010c30:	9903      	ldr	r1, [sp, #12]
 8010c32:	1a5b      	subs	r3, r3, r1
 8010c34:	42ab      	cmp	r3, r5
 8010c36:	dcf2      	bgt.n	8010c1e <_printf_i+0x21e>
 8010c38:	e7eb      	b.n	8010c12 <_printf_i+0x212>
 8010c3a:	2500      	movs	r5, #0
 8010c3c:	f104 0619 	add.w	r6, r4, #25
 8010c40:	e7f5      	b.n	8010c2e <_printf_i+0x22e>
 8010c42:	bf00      	nop
 8010c44:	08067c61 	.word	0x08067c61
 8010c48:	08067c72 	.word	0x08067c72

08010c4c <__retarget_lock_acquire_recursive>:
 8010c4c:	4770      	bx	lr

08010c4e <__retarget_lock_release_recursive>:
 8010c4e:	4770      	bx	lr

08010c50 <memmove>:
 8010c50:	4288      	cmp	r0, r1
 8010c52:	b510      	push	{r4, lr}
 8010c54:	eb01 0402 	add.w	r4, r1, r2
 8010c58:	d902      	bls.n	8010c60 <memmove+0x10>
 8010c5a:	4284      	cmp	r4, r0
 8010c5c:	4623      	mov	r3, r4
 8010c5e:	d807      	bhi.n	8010c70 <memmove+0x20>
 8010c60:	1e43      	subs	r3, r0, #1
 8010c62:	42a1      	cmp	r1, r4
 8010c64:	d008      	beq.n	8010c78 <memmove+0x28>
 8010c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c6e:	e7f8      	b.n	8010c62 <memmove+0x12>
 8010c70:	4402      	add	r2, r0
 8010c72:	4601      	mov	r1, r0
 8010c74:	428a      	cmp	r2, r1
 8010c76:	d100      	bne.n	8010c7a <memmove+0x2a>
 8010c78:	bd10      	pop	{r4, pc}
 8010c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c82:	e7f7      	b.n	8010c74 <memmove+0x24>

08010c84 <_malloc_usable_size_r>:
 8010c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c88:	1f18      	subs	r0, r3, #4
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	bfbc      	itt	lt
 8010c8e:	580b      	ldrlt	r3, [r1, r0]
 8010c90:	18c0      	addlt	r0, r0, r3
 8010c92:	4770      	bx	lr

08010c94 <_init>:
 8010c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c96:	bf00      	nop
 8010c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c9a:	bc08      	pop	{r3}
 8010c9c:	469e      	mov	lr, r3
 8010c9e:	4770      	bx	lr

08010ca0 <_fini>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	bf00      	nop
 8010ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ca6:	bc08      	pop	{r3}
 8010ca8:	469e      	mov	lr, r3
 8010caa:	4770      	bx	lr
