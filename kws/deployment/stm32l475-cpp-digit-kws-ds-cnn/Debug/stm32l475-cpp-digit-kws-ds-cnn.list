
stm32l475-cpp-digit-kws-ds-cnn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00056fc4  08010900  08010900  00020900  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080678c4  080678c4  00080c8c  2**0
                  CONTENTS
  4 .ARM          00000008  080678c4  080678c4  000778c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080678cc  080678cc  00080c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080678cc  080678cc  000778cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080678d0  080678d0  000778d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c8c  20000000  080678d4  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000c8c  08068560  00080c8c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001118  08068560  00081118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080c8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039516  00000000  00000000  00080cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000659e  00000000  00000000  000ba1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  000c0770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  000c2210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000305a7  00000000  00000000  000c3a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e48  00000000  00000000  000f3ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e020  00000000  00000000  00117e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000143  00000000  00000000  00225e5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad4  00000000  00000000  00225fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003121  00000000  00000000  0022da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c8c 	.word	0x20000c8c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080108dc 	.word	0x080108dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c90 	.word	0x20000c90
 80001cc:	080108dc 	.word	0x080108dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f4e:	f00c fc57 	bl	800d800 <roundf>
 8000f52:	eef0 7a40 	vmov.f32	s15, s0
 8000f56:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 8000f6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f6e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f9c <_ZN4MFCC8MelScaleEf+0x3c>
 8000f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f82:	f00c fd99 	bl	800dab8 <logf>
 8000f86:	eef0 7a40 	vmov.f32	s15, s0
 8000f8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fa0 <_ZN4MFCC8MelScaleEf+0x40>
 8000f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	442f0000 	.word	0x442f0000
 8000fa0:	448ce000 	.word	0x448ce000

08000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fab9 	bl	8000524 <__aeabi_i2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	ec43 2b10 	vmov	d0, r2, r3
 8000fba:	f00c fc49 	bl	800d850 <log>
 8000fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc2:	eef0 7a60 	vmov.f32	s15, s1
 8000fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fca:	eef0 0a67 	vmov.f32	s1, s15
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff fa9f 	bl	8000524 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	ed97 1b00 	vldr	d1, [r7]
 8000fee:	ec43 2b10 	vmov	d0, r2, r3
 8000ff2:	f00c fc75 	bl	800d8e0 <pow>
 8000ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8000ffa:	eef0 7a60 	vmov.f32	s15, s1
    }
 8000ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8001002:	eef0 0a67 	vmov.f32	s1, s15
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0000      	movs	r0, r0
	...

08001010 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffb7 	bl	8000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001036:	ec55 4b10 	vmov	r4, r5, d0
 800103a:	2002      	movs	r0, #2
 800103c:	f7ff ffb2 	bl	8000fa4 <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001040:	ec53 2b10 	vmov	r2, r3, d0
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff fc00 	bl	800084c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	ec43 2b17 	vmov	d7, r2, r3
 8001054:	eeb0 0a47 	vmov.f32	s0, s14
 8001058:	eef0 0a67 	vmov.f32	s1, s15
 800105c:	f00c fafc 	bl	800d658 <ceil>
 8001060:	eeb0 7a40 	vmov.f32	s14, s0
 8001064:	eef0 7a60 	vmov.f32	s15, s1
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	2002      	movs	r0, #2
 8001072:	f7ff ffaf 	bl	8000fd4 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001076:	ec53 2b10 	vmov	r2, r3, d0
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fd6b 	bl	8000b58 <__aeabi_d2iz>
 8001082:	4602      	mov	r2, r0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001090:	4293      	cmp	r3, r2
 8001092:	d201      	bcs.n	8001098 <_ZN4MFCCC1Eiii+0x88>
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	e001      	b.n	800109c <_ZN4MFCCC1Eiii+0x8c>
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	f00c face 	bl	800d63e <_Znaj>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d201      	bcs.n	80010ba <_ZN4MFCCC1Eiii+0xaa>
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	e001      	b.n	80010be <_ZN4MFCCC1Eiii+0xae>
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c fabd 	bl	800d63e <_Znaj>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 80010cc:	20a0      	movs	r0, #160	; 0xa0
 80010ce:	f00c fab6 	bl	800d63e <_Znaj>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d201      	bcs.n	80010e8 <_ZN4MFCCC1Eiii+0xd8>
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	e001      	b.n	80010ec <_ZN4MFCCC1Eiii+0xdc>
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00c faa6 	bl	800d63e <_Znaj>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	da3b      	bge.n	800117e <_ZN4MFCCC1Eiii+0x16e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001110:	ee17 0a90 	vmov	r0, s15
 8001114:	f7ff fa18 	bl	8000548 <__aeabi_f2d>
 8001118:	a332      	add	r3, pc, #200	; (adr r3, 80011e4 <_ZN4MFCCC1Eiii+0x1d4>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4614      	mov	r4, r2
 8001128:	461d      	mov	r5, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff f9fa 	bl	8000524 <__aeabi_i2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff fb88 	bl	800084c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <_ZN4MFCCC1Eiii+0x1d0>)
 800114a:	f7ff fa55 	bl	80005f8 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4922      	ldr	r1, [pc, #136]	; (80011e0 <_ZN4MFCCC1Eiii+0x1d0>)
 8001158:	f7ff f896 	bl	8000288 <__aeabi_dsub>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	69da      	ldr	r2, [r3, #28]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	18d4      	adds	r4, r2, r3
 800116e:	f7ff fd1b 	bl	8000ba8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < frame_len; i++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e7bf      	b.n	80010fe <_ZN4MFCCC1Eiii+0xee>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 800117e:	20a0      	movs	r0, #160	; 0xa0
 8001180:	f00c fa5d 	bl	800d63e <_Znaj>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 800118c:	20a0      	movs	r0, #160	; 0xa0
 800118e:	f00c fa56 	bl	800d63e <_Znaj>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f942 	bl	8001424 <_ZN4MFCC16create_mel_fbankEv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	2128      	movs	r1, #40	; 0x28
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 f88c 	bl	80012c8 <_ZN4MFCC17create_dct_matrixEll>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80011b6:	2018      	movs	r0, #24
 80011b8:	f00c fa30 	bl	800d61c <_Znwj>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f00b fa9d 	bl	800c710 <arm_rfft_fast_init_f32>

}
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	3fe00000 	.word	0x3fe00000
 80011e4:	54442d18 	.word	0x54442d18
 80011e8:	401921fb 	.word	0x401921fb

080011ec <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  delete []frame;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <_ZN4MFCCD1Ev+0x1a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	4618      	mov	r0, r3
 8001202:	f00c fa09 	bl	800d618 <_ZdaPv>
  delete [] buffer;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <_ZN4MFCCD1Ev+0x2c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4618      	mov	r0, r3
 8001214:	f00c fa00 	bl	800d618 <_ZdaPv>
  delete []mel_energies;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <_ZN4MFCCD1Ev+0x3e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4618      	mov	r0, r3
 8001226:	f00c f9f7 	bl	800d618 <_ZdaPv>
  delete []window_func;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <_ZN4MFCCD1Ev+0x50>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4618      	mov	r0, r3
 8001238:	f00c f9ee 	bl	800d618 <_ZdaPv>
  delete []fbank_filter_first;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <_ZN4MFCCD1Ev+0x62>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4618      	mov	r0, r3
 800124a:	f00c f9e5 	bl	800d618 <_ZdaPv>
  delete []fbank_filter_last;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <_ZN4MFCCD1Ev+0x74>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	4618      	mov	r0, r3
 800125c:	f00c f9dc 	bl	800d618 <_ZdaPv>
  delete []dct_matrix;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <_ZN4MFCCD1Ev+0x86>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	4618      	mov	r0, r3
 800126e:	f00c f9d3 	bl	800d618 <_ZdaPv>
  delete rfft;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <_ZN4MFCCD1Ev+0x96>
 800127a:	2118      	movs	r1, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f00c f9c9 	bl	800d614 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b27      	cmp	r3, #39	; 0x27
 800128a:	dc0f      	bgt.n	80012ac <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <_ZN4MFCCD1Ev+0xb8>
 800129c:	2104      	movs	r1, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f00c f9b8 	bl	800d614 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e7ec      	b.n	8001286 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <_ZN4MFCCD1Ev+0xd0>
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00c f9ac 	bl	800d614 <_ZdlPvj>
}
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80012c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012cc:	b08a      	sub	sp, #40	; 0x28
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d201      	bcs.n	80012ea <_ZN4MFCC17create_dct_matrixEll+0x22>
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	e001      	b.n	80012ee <_ZN4MFCC17create_dct_matrixEll+0x26>
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00c f9a5 	bl	800d63e <_Znaj>
 80012f4:	4603      	mov	r3, r0
 80012f6:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130a:	edc7 7a06 	vstr	s15, [r7, #24]
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001314:	edd7 7a06 	vldr	s15, [r7, #24]
 8001318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	db09      	blt.n	8001336 <_ZN4MFCC17create_dct_matrixEll+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001322:	ed97 0a06 	vldr	s0, [r7, #24]
 8001326:	f00c fbfd 	bl	800db24 <sqrtf>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001334:	e004      	b.n	8001340 <_ZN4MFCC17create_dct_matrixEll+0x78>
    }
    else
    {
      *pOut = 0.0f;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800133e:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	da5d      	bge.n	8001408 <_ZN4MFCC17create_dct_matrixEll+0x140>
    for (n = 0; n < input_length; n++) {
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	429a      	cmp	r2, r3
 8001356:	da53      	bge.n	8001400 <_ZN4MFCC17create_dct_matrixEll+0x138>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8f4 	bl	8000548 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff f8dd 	bl	8000524 <__aeabi_i2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	a12b      	add	r1, pc, #172	; (adr r1, 800141c <_ZN4MFCC17create_dct_matrixEll+0x154>)
 8001370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001374:	f7ff fa6a 	bl	800084c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4690      	mov	r8, r2
 800137e:	4699      	mov	r9, r3
 8001380:	6a38      	ldr	r0, [r7, #32]
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_i2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <_ZN4MFCC17create_dct_matrixEll+0x150>)
 800138c:	f7fe ff7e 	bl	800028c <__adddf3>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4640      	mov	r0, r8
 8001396:	4649      	mov	r1, r9
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4640      	mov	r0, r8
 80013b0:	4649      	mov	r1, r9
 80013b2:	f7ff f921 	bl	80005f8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	ec43 2b17 	vmov	d7, r2, r3
 80013be:	eeb0 0a47 	vmov.f32	s0, s14
 80013c2:	eef0 0a67 	vmov.f32	s1, s15
 80013c6:	f00c f9cb 	bl	800d760 <cos>
 80013ca:	ec53 2b10 	vmov	r2, r3, d0
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	18d4      	adds	r4, r2, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	6023      	str	r3, [r4, #0]
    for (n = 0; n < input_length; n++) {
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	3301      	adds	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	e7a7      	b.n	8001350 <_ZN4MFCC17create_dct_matrixEll+0x88>
  for (k = 0; k < coefficient_count; k++) {
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	3301      	adds	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	e79d      	b.n	8001344 <_ZN4MFCC17create_dct_matrixEll+0x7c>
    }
  }
  return M;
 8001408:	69fb      	ldr	r3, [r7, #28]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	3fe00000 	.word	0x3fe00000
 800141c:	54442d18 	.word	0x54442d18
 8001420:	400921fb 	.word	0x400921fb

08001424 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b095      	sub	sp, #84	; 0x54
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	0fda      	lsrs	r2, r3, #31
 8001432:	4413      	add	r3, r2
 8001434:	105b      	asrs	r3, r3, #1
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001444:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001690 <_ZN4MFCC16create_mel_fbankEv+0x26c>
 8001448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8001450:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001454:	f7ff fd84 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001458:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 800145c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001694 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8001460:	f7ff fd7e 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001464:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8001468:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800146c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001474:	eddf 6a88 	vldr	s13, [pc, #544]	; 8001698 <_ZN4MFCC16create_mel_fbankEv+0x274>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8001480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001482:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8001486:	4293      	cmp	r3, r2
 8001488:	d201      	bcs.n	800148e <_ZN4MFCC16create_mel_fbankEv+0x6a>
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	e001      	b.n	8001492 <_ZN4MFCC16create_mel_fbankEv+0x6e>
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	4618      	mov	r0, r3
 8001494:	f00c f8d3 	bl	800d63e <_Znaj>
 8001498:	4603      	mov	r3, r0
 800149a:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 800149c:	20a0      	movs	r0, #160	; 0xa0
 800149e:	f00c f8ce 	bl	800d63e <_Znaj>
 80014a2:	4603      	mov	r3, r0
 80014a4:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ac:	2b27      	cmp	r3, #39	; 0x27
 80014ae:	f300 80e4 	bgt.w	800167a <_ZN4MFCC16create_mel_fbankEv+0x256>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 80014b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 80014d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d2:	3301      	adds	r3, #1
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 80014f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f2:	3302      	adds	r3, #2
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001524:	429a      	cmp	r2, r3
 8001526:	da65      	bge.n	80015f4 <_ZN4MFCC16create_mel_fbankEv+0x1d0>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8001528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 800153e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001542:	f7ff fd0d 	bl	8000f60 <_ZN4MFCC8MelScaleEf>
 8001546:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 800154a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	4413      	add	r3, r2
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8001558:	ed97 7a02 	vldr	s14, [r7, #8]
 800155c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	dd40      	ble.n	80015ec <_ZN4MFCC16create_mel_fbankEv+0x1c8>
 800156a:	ed97 7a02 	vldr	s14, [r7, #8]
 800156e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d537      	bpl.n	80015ec <_ZN4MFCC16create_mel_fbankEv+0x1c8>
        float weight;
        if (mel <= center_mel) {
 800157c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001580:	edd7 7a05 	vldr	s15, [r7, #20]
 8001584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d810      	bhi.n	80015b0 <_ZN4MFCC16create_mel_fbankEv+0x18c>
          weight = (mel - left_mel) / (center_mel - left_mel);
 800158e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001592:	edd7 7a06 	vldr	s15, [r7, #24]
 8001596:	ee77 6a67 	vsub.f32	s13, s14, s15
 800159a:	ed97 7a05 	vldr	s14, [r7, #20]
 800159e:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80015ae:	e00f      	b.n	80015d0 <_ZN4MFCC16create_mel_fbankEv+0x1ac>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 80015b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80015c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 80015d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	6a3a      	ldr	r2, [r7, #32]
 80015d6:	4413      	add	r3, r2
 80015d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015da:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e2:	d101      	bne.n	80015e8 <_ZN4MFCC16create_mel_fbankEv+0x1c4>
          first_index = i;
 80015e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 80015e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 80015ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ee:	3301      	adds	r3, #1
 80015f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80015f2:	e795      	b.n	8001520 <_ZN4MFCC16create_mel_fbankEv+0xfc>
      }
    }

    fbank_filter_first[bin] = first_index;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001600:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800160e:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8001610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800161c:	4293      	cmp	r3, r2
 800161e:	d201      	bcs.n	8001624 <_ZN4MFCC16create_mel_fbankEv+0x200>
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	e001      	b.n	8001628 <_ZN4MFCC16create_mel_fbankEv+0x204>
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	69f9      	ldr	r1, [r7, #28]
 800162e:	188c      	adds	r4, r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f00c f804 	bl	800d63e <_Znaj>
 8001636:	4603      	mov	r3, r0
 8001638:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 800163e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001640:	64bb      	str	r3, [r7, #72]	; 0x48
 8001642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001646:	429a      	cmp	r2, r3
 8001648:	dc13      	bgt.n	8001672 <_ZN4MFCC16create_mel_fbankEv+0x24e>
      mel_fbank[bin][j++] = this_bin[i];
 800164a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	441a      	add	r2, r3
 8001652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	69f9      	ldr	r1, [r7, #28]
 8001658:	440b      	add	r3, r1
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165e:	1c58      	adds	r0, r3, #1
 8001660:	63b8      	str	r0, [r7, #56]	; 0x38
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 800166a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800166c:	3301      	adds	r3, #1
 800166e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001670:	e7e7      	b.n	8001642 <_ZN4MFCC16create_mel_fbankEv+0x21e>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8001672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001674:	3301      	adds	r3, #1
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001678:	e717      	b.n	80014aa <_ZN4MFCC16create_mel_fbankEv+0x86>
    }
  }
  delete []this_bin;
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <_ZN4MFCC16create_mel_fbankEv+0x262>
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f00b ffc9 	bl	800d618 <_ZdaPv>
  return mel_fbank;
 8001686:	69fb      	ldr	r3, [r7, #28]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3754      	adds	r7, #84	; 0x54
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	467a0000 	.word	0x467a0000
 8001694:	457a0000 	.word	0x457a0000
 8001698:	42240000 	.word	0x42240000

0800169c <_ZN4MFCC12mfcc_computeEPKsPf>:

void MFCC::mfcc_compute(const int16_t * audio_data, float* mfcc_out) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	; 0x50
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016b2:	429a      	cmp	r2, r3
 80016b4:	da18      	bge.n	80016e8 <_ZN4MFCC12mfcc_computeEPKsPf+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8001978 <_ZN4MFCC12mfcc_computeEPKsPf+0x2dc>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 80016e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e2:	3301      	adds	r3, #1
 80016e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e6:	e7e1      	b.n	80016ac <_ZN4MFCC12mfcc_computeEPKsPf+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	18d0      	adds	r0, r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	461a      	mov	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f00e fc76 	bl	800fff4 <memset>

  for (i = 0; i < frame_len; i++) {
 8001708:	2300      	movs	r3, #0
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001712:	429a      	cmp	r2, r3
 8001714:	da1a      	bge.n	800174c <_ZN4MFCC12mfcc_computeEPKsPf+0xb0>
    frame[i] *= window_func[i];
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8001744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001746:	3301      	adds	r3, #1
 8001748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174a:	e7df      	b.n	800170c <_ZN4MFCC12mfcc_computeEPKsPf+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6919      	ldr	r1, [r3, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	2300      	movs	r3, #0
 800175a:	f00b f8bd 	bl	800c8d8 <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0fda      	lsrs	r2, r3, #31
 8001764:	4413      	add	r3, r2
 8001766:	105b      	asrs	r3, r3, #1
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	3304      	adds	r3, #4
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	3304      	adds	r3, #4
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 800179e:	2301      	movs	r3, #1
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	429a      	cmp	r2, r3
 80017a8:	da23      	bge.n	80017f2 <_ZN4MFCC12mfcc_computeEPKsPf+0x156>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	3304      	adds	r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 80017c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e6:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 80017ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ec:	3301      	adds	r3, #1
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017f0:	e7d7      	b.n	80017a2 <_ZN4MFCC12mfcc_computeEPKsPf+0x106>
  }
  buffer[0] = first_energy;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f8:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001806:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800180e:	2b27      	cmp	r3, #39	; 0x27
 8001810:	dc6d      	bgt.n	80018ee <_ZN4MFCC12mfcc_computeEPKsPf+0x252>
    j = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800183c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	dc3a      	bgt.n	80018ba <_ZN4MFCC12mfcc_computeEPKsPf+0x21e>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8001858:	edd7 7a07 	vldr	s15, [r7, #28]
 800185c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	db09      	blt.n	800187a <_ZN4MFCC12mfcc_computeEPKsPf+0x1de>
      *pOut = sqrtf(in);
 8001866:	ed97 0a07 	vldr	s0, [r7, #28]
 800186a:	f00c f95b 	bl	800db24 <sqrtf>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001878:	e004      	b.n	8001884 <_ZN4MFCC12mfcc_computeEPKsPf+0x1e8>
      *pOut = 0.0f;
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001882:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001892:	1c59      	adds	r1, r3, #1
 8001894:	64b9      	str	r1, [r7, #72]	; 0x48
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 80018b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b4:	3301      	adds	r3, #1
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b8:	e7c0      	b.n	800183c <_ZN4MFCC12mfcc_computeEPKsPf+0x1a0>
    }
    mel_energies[bin] = mel_energy;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018c6:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 80018c8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d107      	bne.n	80018e6 <_ZN4MFCC12mfcc_computeEPKsPf+0x24a>
      mel_energies[bin] = FLT_MIN;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018e4:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 80018e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e8:	3301      	adds	r3, #1
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
 80018ec:	e78e      	b.n	800180c <_ZN4MFCC12mfcc_computeEPKsPf+0x170>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
 80018f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f4:	2b27      	cmp	r3, #39	; 0x27
 80018f6:	dc0f      	bgt.n	8001918 <_ZN4MFCC12mfcc_computeEPKsPf+0x27c>
    mel_energies[bin] = (mel_energies[bin]);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	441a      	add	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6999      	ldr	r1, [r3, #24]
 8001906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8001910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001912:	3301      	adds	r3, #1
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
 8001916:	e7ec      	b.n	80018f2 <_ZN4MFCC12mfcc_computeEPKsPf+0x256>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001922:	429a      	cmp	r2, r3
 8001924:	da6c      	bge.n	8001a00 <_ZN4MFCC12mfcc_computeEPKsPf+0x364>
    float sum = 0.0;
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800192c:	2300      	movs	r3, #0
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001932:	2b27      	cmp	r3, #39	; 0x27
 8001934:	dc24      	bgt.n	8001980 <_ZN4MFCC12mfcc_computeEPKsPf+0x2e4>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	461a      	mov	r2, r3
 8001946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	ed93 7a00 	vldr	s14, [r3]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001972:	3301      	adds	r3, #1
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
 8001976:	e7db      	b.n	8001930 <_ZN4MFCC12mfcc_computeEPKsPf+0x294>
 8001978:	47000000 	.word	0x47000000
 800197c:	42fe0000 	.word	0x42fe0000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2201      	movs	r2, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001992:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 800199e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80019a2:	f7ff facd 	bl	8000f40 <_ZSt5roundf>
 80019a6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80019aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019ae:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 800197c <_ZN4MFCC12mfcc_computeEPKsPf+0x2e0>
 80019b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	db06      	blt.n	80019ca <_ZN4MFCC12mfcc_computeEPKsPf+0x32e>
      mfcc_out[i] = 127;
 80019bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <_ZN4MFCC12mfcc_computeEPKsPf+0x36c>)
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e016      	b.n	80019f8 <_ZN4MFCC12mfcc_computeEPKsPf+0x35c>
    else if(sum <= -128)
 80019ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a0c <_ZN4MFCC12mfcc_computeEPKsPf+0x370>
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d807      	bhi.n	80019ec <_ZN4MFCC12mfcc_computeEPKsPf+0x350>
      mfcc_out[i] = -128;
 80019dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e005      	b.n	80019f8 <_ZN4MFCC12mfcc_computeEPKsPf+0x35c>
    else
      mfcc_out[i] = sum; 
 80019ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019f6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 80019f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fa:	3301      	adds	r3, #1
 80019fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019fe:	e78d      	b.n	800191c <_ZN4MFCC12mfcc_computeEPKsPf+0x280>
  }

}
 8001a00:	bf00      	nop
 8001a02:	3750      	adds	r7, #80	; 0x50
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	42fe0000 	.word	0x42fe0000
 8001a0c:	c3000000 	.word	0xc3000000

08001a10 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>

// constructor
AudioPlayer::AudioPlayer(DAC_HandleTypeDef *hdac)
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
: hdac(hdac)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	611a      	str	r2, [r3, #16]
{
	dac_stop_flag = 1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	731a      	strb	r2, [r3, #12]
}
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
}
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af02      	add	r7, sp, #8
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	609a      	str	r2, [r3, #8]
	played_samples = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
	converted_samples = 0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]

	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001a66:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001a6a:	f00b fde8 	bl	800d63e <_Znaj>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	605a      	str	r2, [r3, #4]
	dac_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001a76:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001a7a:	f00b fde0 	bl	800d63e <_Znaj>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]


	// initial full read
	update_dac_buffer(0, PLAY_BUFFER_LENGTH);
 8001a86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f833 	bl	8001af8 <_ZN11AudioPlayer17update_dac_bufferEmm>

	// Start DAC in circular mode
	dac_stop_flag = 0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	731a      	strb	r2, [r3, #12]
	if (HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, PLAY_BUFFER_LENGTH, DAC_ALIGN_12B_R) == HAL_ERROR) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6918      	ldr	r0, [r3, #16]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f002 fc75 	bl	8004398 <HAL_DAC_Start_DMA>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
		Error_Handler();
 8001abe:	f001 f9a9 	bl	8002e14 <Error_Handler>
	}
	while(!dac_stop_flag);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7b1b      	ldrb	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d100      	bne.n	8001acc <_ZN11AudioPlayer10play_audioEP8WaveData+0x82>
 8001aca:	e7fa      	b.n	8001ac2 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
	delete [] dac_buffer;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <_ZN11AudioPlayer10play_audioEP8WaveData+0x94>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00b fd9d 	bl	800d618 <_ZdaPv>
	delete [] conversion_buffer;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <_ZN11AudioPlayer10play_audioEP8WaveData+0xa6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00b fd94 	bl	800d618 <_ZdaPv>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_ZN11AudioPlayer17update_dac_bufferEmm>:

// update buffer. Method called by dac callbacks functions.
void AudioPlayer::update_dac_buffer(uint32_t offset, uint32_t data_length) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001b0c:	617b      	str	r3, [r7, #20]
	uint32_t read_length = data_length;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61fb      	str	r3, [r7, #28]
	if (read_length >= remaining_samples) {
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d301      	bcc.n	8001b1e <_ZN11AudioPlayer17update_dac_bufferEmm+0x26>
		read_length = remaining_samples;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	61fb      	str	r3, [r7, #28]
	}
	if (read_length > 0) {
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d046      	beq.n	8001bb2 <_ZN11AudioPlayer17update_dac_bufferEmm+0xba>
		qspi_read((uint8_t*)conversion_buffer, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6858      	ldr	r0, [r3, #4]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	18d1      	adds	r1, r2, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f001 f978 	bl	8002e30 <_Z9qspi_readPhmm>
		for (uint32_t i = 0; i < read_length; i++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d220      	bcs.n	8001b8e <_ZN11AudioPlayer17update_dac_bufferEmm+0x96>
			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_DAC_SCALE_FACTOR + WAVE_TO_DAC_BIAS);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b60:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001bbc <_ZN11AudioPlayer17update_dac_bufferEmm+0xc4>
 8001b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b68:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bc0 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc8>
 8001b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7e:	ee17 2a90 	vmov	r2, s15
 8001b82:	b292      	uxth	r2, r2
 8001b84:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < read_length; i++){
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e7da      	b.n	8001b44 <_ZN11AudioPlayer17update_dac_bufferEmm+0x4c>
		}
		converted_samples += read_length;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	441a      	add	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	619a      	str	r2, [r3, #24]
		memcpy(dac_buffer + offset, conversion_buffer, read_length * DAC_DATA_WIDTH);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	18d0      	adds	r0, r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	461a      	mov	r2, r3
 8001bae:	f00e fa13 	bl	800ffd8 <memcpy>
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	3d7ff100 	.word	0x3d7ff100
 8001bc0:	44fff100 	.word	0x44fff100

08001bc4 <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	731a      	strb	r2, [r3, #12]
}
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
}
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 8001c2e:	2008      	movs	r0, #8
 8001c30:	f00b fcf4 	bl	800d61c <_Znwj>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461c      	mov	r4, r3
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff ffc2 	bl	8001bc4 <_ZN8WaveDataC1Em>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 8001c44:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001c48:	f00b fcf9 	bl	800d63e <_Znaj>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 8001c54:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001c58:	f00b fcf1 	bl	800d63e <_Znaj>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6918      	ldr	r0, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c76:	4619      	mov	r1, r3
 8001c78:	f003 f82e 	bl	8004cd8 <HAL_DFSDM_FilterRegularStart_DMA>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 8001c8c:	f001 f8c2 	bl	8002e14 <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <_ZN13AudioRecorder12record_audioEm+0xb8>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 8001c98:	f000 f968 	bl	8001f6c <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 8001c9c:	f002 f830 	bl	8003d00 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7b1b      	ldrb	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d100      	bne.n	8001caa <_ZN13AudioRecorder12record_audioEm+0x86>
 8001ca8:	e7fa      	b.n	8001ca0 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <_ZN13AudioRecorder12record_audioEm+0x98>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f00b fcae 	bl	800d618 <_ZdaPv>
	delete [] wave_buffer;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <_ZN13AudioRecorder12record_audioEm+0xaa>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00b fca5 	bl	800d618 <_ZdaPv>
	return cur_data;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001cf6:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d301      	bcc.n	8001d08 <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d213      	bcs.n	8001d3c <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	440b      	add	r3, r1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1419      	asrs	r1, r3, #16
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	b20a      	sxth	r2, r1
 8001d32:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e7e7      	b.n	8001d0c <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6858      	ldr	r0, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	18d1      	adds	r1, r2, r3
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	461a      	mov	r2, r3
 8001d56:	f001 f884 	bl	8002e62 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	440a      	add	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <_Z13get_top_classPf>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(float* nn_output) {
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8001d80:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001d84:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <_Z13get_top_classPf+0x70>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d220      	bcs.n	8001dd6 <_Z13get_top_classPf+0x62>
		if (nn_output[i] > max_value) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	dd0c      	ble.n	8001dce <_Z13get_top_classPf+0x5a>
			max_index = i;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc8:	ee17 3a90 	vmov	r3, s15
 8001dcc:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e7d9      	b.n	8001d8a <_Z13get_top_classPf+0x16>
		}
	}
	return max_index;
 8001dd6:	697b      	ldr	r3, [r7, #20]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	20000000 	.word	0x20000000

08001de8 <_Z19average_predictionsPfS_mm>:

void average_predictions(float *average_out, float* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 8001de8:	b4b0      	push	{r4, r5, r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
		sum[i] = 0;
		for (uint32_t j = 0; j < num_predictions; j++) {
			sum[i] += average_window_head[j * num_output_classes + i];
		}
		average_out[i] = sum[i] / (float) num_predictions;
	}
 8001df6:	466b      	mov	r3, sp
 8001df8:	461d      	mov	r5, r3
	float sum[num_output_classes];
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	1e5c      	subs	r4, r3, #1
 8001dfe:	617c      	str	r4, [r7, #20]
 8001e00:	4623      	mov	r3, r4
 8001e02:	3301      	adds	r3, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	014b      	lsls	r3, r1, #5
 8001e14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e18:	0142      	lsls	r2, r0, #5
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	014b      	lsls	r3, r1, #5
 8001e2e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e32:	0142      	lsls	r2, r0, #5
 8001e34:	4623      	mov	r3, r4
 8001e36:	3301      	adds	r3, #1
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	08db      	lsrs	r3, r3, #3
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	ebad 0d03 	sub.w	sp, sp, r3
 8001e44:	466b      	mov	r3, sp
 8001e46:	3303      	adds	r3, #3
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d240      	bcs.n	8001edc <_Z19average_predictionsPfS_mm+0xf4>
		sum[i] = 0;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d21c      	bcs.n	8001eae <_Z19average_predictionsPfS_mm+0xc6>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	ed93 7a00 	vldr	s14, [r3]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	fb02 f203 	mul.w	r2, r2, r3
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	4413      	add	r3, r2
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	e7de      	b.n	8001e6c <_Z19average_predictionsPfS_mm+0x84>
		average_out[i] = sum[i] / (float) num_predictions;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	edd3 6a00 	vldr	s13, [r3]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e7ba      	b.n	8001e52 <_Z19average_predictionsPfS_mm+0x6a>
 8001edc:	46ad      	mov	sp, r5
}
 8001ede:	bf00      	nop
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bcb0      	pop	{r4, r5, r7}
 8001ee6:	4770      	bx	lr

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db12      	blt.n	8001f5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	490a      	ldr	r1, [pc, #40]	; (8001f68 <__NVIC_DisableIRQ+0x44>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	3320      	adds	r3, #32
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f50:	f3bf 8f4f 	dsb	sy
}
 8001f54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f56:	f3bf 8f6f 	isb	sy
}
 8001f5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001f70:	f001 feb4 	bl	8003cdc <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001f74:	201c      	movs	r0, #28
 8001f76:	f7ff ffd5 	bl	8001f24 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f7a:	201a      	movs	r0, #26
 8001f7c:	f7ff ffd2 	bl	8001f24 <__NVIC_DisableIRQ>
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f80:	2101      	movs	r1, #1
 8001f82:	2000      	movs	r0, #0
 8001f84:	f003 fd76 	bl	8005a74 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001f88:	201c      	movs	r0, #28
 8001f8a:	f7ff ffad 	bl	8001ee8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f8e:	201a      	movs	r0, #26
 8001f90:	f7ff ffaa 	bl	8001ee8 <__NVIC_EnableIRQ>
	HAL_ResumeTick();
 8001f94:	f001 feb4 	bl	8003d00 <HAL_ResumeTick>
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b5b0      	push	{r4, r5, r7, lr}
 8001f9e:	b0be      	sub	sp, #248	; 0xf8
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa2:	f001 ffae 	bl	8003f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa6:	f000 fb5d 	bl	8002664 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001faa:	f000 fd75 	bl	8002a98 <_ZL12MX_GPIO_Initv>
  MX_QUADSPI_Init();
 8001fae:	f000 fc93 	bl	80028d8 <_ZL15MX_QUADSPI_Initv>
  MX_DMA_Init();
 8001fb2:	f000 fd4b 	bl	8002a4c <_ZL11MX_DMA_Initv>
  MX_DAC1_Init();
 8001fb6:	f000 fbdf 	bl	8002778 <_ZL12MX_DAC1_Initv>
  MX_DFSDM1_Init();
 8001fba:	f000 fc19 	bl	80027f0 <_ZL14MX_DFSDM1_Initv>
  MX_TIM2_Init();
 8001fbe:	f000 fcb5 	bl	800292c <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8001fc2:	f000 fd0f 	bl	80029e4 <_ZL19MX_USART1_UART_Initv>
  MX_CRC_Init();
 8001fc6:	f000 fbaf 	bl	8002728 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  qspi_init();
 8001fca:	f000 ff63 	bl	8002e94 <_Z9qspi_initv>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fce:	48df      	ldr	r0, [pc, #892]	; (800234c <main+0x3b0>)
 8001fd0:	f005 fe42 	bl	8007c58 <HAL_TIM_Base_Start_IT>
  main_state = SETUP;
 8001fd4:	4bde      	ldr	r3, [pc, #888]	; (8002350 <main+0x3b4>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"zero", "one","two","three","four","five","six","seven","eight","nine","unknown","silence"};
 8001fda:	4ade      	ldr	r2, [pc, #888]	; (8002354 <main+0x3b8>)
 8001fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	2260      	movs	r2, #96	; 0x60
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00d fff7 	bl	800ffd8 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	switch(main_state) {
 8001fea:	4bd9      	ldr	r3, [pc, #868]	; (8002350 <main+0x3b4>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d8fa      	bhi.n	8001fea <main+0x4e>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <main+0x60>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002611 	.word	0x08002611
 8002000:	08002011 	.word	0x08002011
 8002004:	08002055 	.word	0x08002055
 8002008:	080020cd 	.word	0x080020cd
 800200c:	080025c3 	.word	0x080025c3
  	case SETUP:
  	{
  		ITM_Port32(31) = 1;
 8002010:	4bd1      	ldr	r3, [pc, #836]	; (8002358 <main+0x3bc>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]
  		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800201c:	48cf      	ldr	r0, [pc, #828]	; (800235c <main+0x3c0>)
 800201e:	f003 fcf9 	bl	8005a14 <HAL_GPIO_WritePin>

  		// To indicate to user, don't do nothing when red light
  		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2108      	movs	r1, #8
 8002026:	48ce      	ldr	r0, [pc, #824]	; (8002360 <main+0x3c4>)
 8002028:	f003 fcf4 	bl	8005a14 <HAL_GPIO_WritePin>
  		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 800202c:	2106      	movs	r1, #6
 800202e:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8002032:	f000 ff40 	bl	8002eb6 <_Z17qspi_erase_blocksmm>

  		ITM_Port32(31) = 2;
 8002036:	4bc8      	ldr	r3, [pc, #800]	; (8002358 <main+0x3bc>)
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
  		print("Press the blue button and say a keyword\r\n");
 800203c:	48c9      	ldr	r0, [pc, #804]	; (8002364 <main+0x3c8>)
 800203e:	f000 febd 	bl	8002dbc <print>
  		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2108      	movs	r1, #8
 8002046:	48c6      	ldr	r0, [pc, #792]	; (8002360 <main+0x3c4>)
 8002048:	f003 fce4 	bl	8005a14 <HAL_GPIO_WritePin>
  	  	main_state = READY;
 800204c:	4bc0      	ldr	r3, [pc, #768]	; (8002350 <main+0x3b4>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
  		break;
 8002052:	e2e9      	b.n	8002628 <main+0x68c>
  	}
  	case RECORDING:
  	{
  		ITM_Port32(31) = 3;
 8002054:	4bc0      	ldr	r3, [pc, #768]	; (8002358 <main+0x3bc>)
 8002056:	2203      	movs	r2, #3
 8002058:	601a      	str	r2, [r3, #0]
  		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002060:	48be      	ldr	r0, [pc, #760]	; (800235c <main+0x3c0>)
 8002062:	f003 fcd7 	bl	8005a14 <HAL_GPIO_WritePin>
  		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 8002066:	2014      	movs	r0, #20
 8002068:	f00b fad8 	bl	800d61c <_Znwj>
 800206c:	4603      	mov	r3, r0
 800206e:	461c      	mov	r4, r3
 8002070:	49bd      	ldr	r1, [pc, #756]	; (8002368 <main+0x3cc>)
 8002072:	4620      	mov	r0, r4
 8002074:	f7ff fdb8 	bl	8001be8 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8002078:	4bbc      	ldr	r3, [pc, #752]	; (800236c <main+0x3d0>)
 800207a:	601c      	str	r4, [r3, #0]
  		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 800207c:	4bbb      	ldr	r3, [pc, #748]	; (800236c <main+0x3d0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fdcd 	bl	8001c24 <_ZN13AudioRecorder12record_audioEm>
 800208a:	4603      	mov	r3, r0
 800208c:	4ab8      	ldr	r2, [pc, #736]	; (8002370 <main+0x3d4>)
 800208e:	6013      	str	r3, [r2, #0]

  		ITM_Port32(31) = 4;
 8002090:	4bb1      	ldr	r3, [pc, #708]	; (8002358 <main+0x3bc>)
 8002092:	2204      	movs	r2, #4
 8002094:	601a      	str	r2, [r3, #0]
  		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800209c:	48af      	ldr	r0, [pc, #700]	; (800235c <main+0x3c0>)
 800209e:	f003 fcb9 	bl	8005a14 <HAL_GPIO_WritePin>
  		main_state = NN;
 80020a2:	4bab      	ldr	r3, [pc, #684]	; (8002350 <main+0x3b4>)
 80020a4:	2203      	movs	r2, #3
 80020a6:	701a      	strb	r2, [r3, #0]
  		audio_recorder->~AudioRecorder();
 80020a8:	4bb0      	ldr	r3, [pc, #704]	; (800236c <main+0x3d0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fdad 	bl	8001c0c <_ZN13AudioRecorderD1Ev>
  		delete audio_recorder;
 80020b2:	4bae      	ldr	r3, [pc, #696]	; (800236c <main+0x3d0>)
 80020b4:	681c      	ldr	r4, [r3, #0]
 80020b6:	2c00      	cmp	r4, #0
 80020b8:	f000 82b1 	beq.w	800261e <main+0x682>
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff fda5 	bl	8001c0c <_ZN13AudioRecorderD1Ev>
 80020c2:	2114      	movs	r1, #20
 80020c4:	4620      	mov	r0, r4
 80020c6:	f00b faa5 	bl	800d614 <_ZdlPvj>
//  		main_state = AUDIO_TEST;
  		break;
 80020ca:	e2a8      	b.n	800261e <main+0x682>
  	}
  	case NN:
  	{
  		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2108      	movs	r1, #8
 80020d0:	48a3      	ldr	r0, [pc, #652]	; (8002360 <main+0x3c4>)
 80020d2:	f003 fc9f 	bl	8005a14 <HAL_GPIO_WritePin>

  		// input buffer
  		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 80020d6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80020da:	f00b fab0 	bl	800d63e <_Znaj>
 80020de:	4603      	mov	r3, r0
 80020e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  		// mfcc coefficients
  		ai_float *mfcc_out = new ai_float[NUM_FRAMES * NUM_MFCC_COEFFS];
 80020e4:	f44f 60f5 	mov.w	r0, #1960	; 0x7a8
 80020e8:	f00b faa9 	bl	800d63e <_Znaj>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  		// output buffer
  		ai_float *predictions = new ai_float[NUM_PREDICTIONS * NUM_OUTPUT_CLASSES];
 80020f2:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 80020f6:	f00b faa2 	bl	800d63e <_Znaj>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

  		// average predictions
  		ai_float *average = new ai_float[NUM_OUTPUT_CLASSES];
 8002100:	2030      	movs	r0, #48	; 0x30
 8002102:	f00b fa9c 	bl	800d63e <_Znaj>
 8002106:	4603      	mov	r3, r0
 8002108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  		uint32_t pred_index;

  		ai_float *mfcc_head;

  		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 800210c:	2034      	movs	r0, #52	; 0x34
 800210e:	f00b fa85 	bl	800d61c <_Znwj>
 8002112:	4603      	mov	r3, r0
 8002114:	461c      	mov	r4, r3
 8002116:	2302      	movs	r3, #2
 8002118:	f44f 7220 	mov.w	r2, #640	; 0x280
 800211c:	210a      	movs	r1, #10
 800211e:	4620      	mov	r0, r4
 8002120:	f7fe ff76 	bl	8001010 <_ZN4MFCCC1Eiii>
 8002124:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
  		// Build NN layers with pretrained weights
		ai_error ai_err;
		ai_i32 nbatch;

		// Chunk of memory used to hold intermediate values for the NN
		AI_ALIGNED(4) ai_u8* activations = new ai_u8[AI_CNN_MODEL_DATA_ACTIVATIONS_SIZE];//[AI_CNN_MODEL_DATA_ACTIVATIONS_SIZE];
 8002128:	f647 40d8 	movw	r0, #31960	; 0x7cd8
 800212c:	f00b fa87 	bl	800d63e <_Znaj>
 8002130:	4603      	mov	r3, r0
 8002132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		// Buffers used to store input and output tensors
		AI_ALIGNED(4) ai_i8* in_data = new ai_i8[AI_CNN_MODEL_IN_1_SIZE_BYTES];
 8002136:	f44f 60f5 	mov.w	r0, #1960	; 0x7a8
 800213a:	f00b fa80 	bl	800d63e <_Znaj>
 800213e:	4603      	mov	r3, r0
 8002140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		AI_ALIGNED(4) ai_i8* out_data = new ai_i8[AI_CNN_MODEL_OUT_1_SIZE_BYTES];
 8002144:	2030      	movs	r0, #48	; 0x30
 8002146:	f00b fa7a 	bl	800d63e <_Znaj>
 800214a:	4603      	mov	r3, r0
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		// Pointer to our model
		ai_handle cnn_model = AI_HANDLE_NULL;
 8002150:	2300      	movs	r3, #0
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38

		// Initialize wrapper structs that hold pointers to data and info about
		ai_buffer* ai_input = new ai_buffer[AI_CNN_MODEL_IN_NUM];
 8002154:	201c      	movs	r0, #28
 8002156:	f00b fa72 	bl	800d63e <_Znaj>
 800215a:	4603      	mov	r3, r0
 800215c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		ai_buffer* ai_output = new ai_buffer[AI_CNN_MODEL_OUT_NUM];
 8002160:	201c      	movs	r0, #28
 8002162:	f00b fa6c 	bl	800d63e <_Znaj>
 8002166:	4603      	mov	r3, r0
 8002168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		ai_input[0] = *AI_CNN_MODEL_IN;
 800216c:	2100      	movs	r1, #0
 800216e:	2000      	movs	r0, #0
 8002170:	f007 f8b4 	bl	80092dc <ai_cnn_model_inputs_get>
 8002174:	4602      	mov	r2, r0
 8002176:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800217a:	461c      	mov	r4, r3
 800217c:	4615      	mov	r5, r2
 800217e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002182:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002186:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ai_output[0] = *AI_CNN_MODEL_OUT;
 800218a:	2100      	movs	r1, #0
 800218c:	2000      	movs	r0, #0
 800218e:	f007 f8bf 	bl	8009310 <ai_cnn_model_outputs_get>
 8002192:	4602      	mov	r2, r0
 8002194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002198:	461c      	mov	r4, r3
 800219a:	4615      	mov	r5, r2
 800219c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}


		// Set working memory and get weights/biases from model
		ai_network_params ai_params = AI_NETWORK_PARAMS_INIT(
 80021a8:	f007 f982 	bl	80094b0 <ai_cnn_model_data_weights_get>
 80021ac:	4602      	mov	r2, r0
 80021ae:	463b      	mov	r3, r7
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f007 f946 	bl	8009444 <ai_cnn_model_data_weights_buffer_get>
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80021c0:	4618      	mov	r0, r3
 80021c2:	f007 f90b 	bl	80093dc <ai_cnn_model_data_activations_buffer_get>
		);


		// Set pointers wrapper structs to our data buffers
		//ai_input[0].n_batches = 1;
		ai_input[0].data = AI_HANDLE_PTR(in_data);
 80021c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ca:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021ce:	605a      	str	r2, [r3, #4]
		ai_output[0].data = AI_HANDLE_PTR(out_data);
 80021d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d8:	605a      	str	r2, [r3, #4]

		//ITM_Port32(31) = 7;
		// create instance of neural network
		ai_err = ai_cnn_model_create(&cnn_model, AI_CNN_MODEL_DATA_CONFIG);
 80021da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f007 f865 	bl	80092b0 <ai_cnn_model_create>
 80021e6:	4603      	mov	r3, r0
 80021e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (ai_err.type != AI_ERROR_NONE)
 80021ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <main+0x25a>
		{
			// error creating model
			Error_Handler();
 80021f2:	f000 fe0f 	bl	8002e14 <Error_Handler>
		}

		if(!ai_cnn_model_init(cnn_model, &ai_params))
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	463a      	mov	r2, r7
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f007 f8a1 	bl	8009344 <ai_cnn_model_init>
 8002202:	4603      	mov	r3, r0
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <main+0x282>
		{
			ai_err = ai_cnn_model_get_error(cnn_model);
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	4618      	mov	r0, r3
 8002212:	f007 f841 	bl	8009298 <ai_cnn_model_get_error>
 8002216:	4603      	mov	r3, r0
 8002218:	63fb      	str	r3, [r7, #60]	; 0x3c
			Error_Handler();
 800221a:	f000 fdfb 	bl	8002e14 <Error_Handler>
		}

		///////////

  		bool keyword_detected = false;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3

  		ai_float *average_window_head = predictions;
 8002224:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002228:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002236:	2b08      	cmp	r3, #8
 8002238:	f200 815e 	bhi.w	80024f8 <main+0x55c>
  				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 800223c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002240:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 800224c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002250:	4619      	mov	r1, r3
 8002252:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002256:	f000 fdeb 	bl	8002e30 <_Z9qspi_readPhmm>
  				// move old data to the left
  				arm_copy_f32(&mfcc_out[RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS], mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 800225a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800225e:	33c8      	adds	r3, #200	; 0xc8
 8002260:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8002264:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002268:	4618      	mov	r0, r3
 800226a:	f00a f959 	bl	800c520 <arm_copy_f32>
  				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 800226e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002272:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8002276:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

  				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002284:	2b04      	cmp	r3, #4
 8002286:	d81b      	bhi.n	80022c0 <main+0x324>
  					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8002288:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	01db      	lsls	r3, r3, #7
 8002294:	461a      	mov	r2, r3
 8002296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800229a:	4413      	add	r3, r2
 800229c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80022a0:	4619      	mov	r1, r3
 80022a2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80022a6:	f7ff f9f9 	bl	800169c <_ZN4MFCC12mfcc_computeEPKsPf>
  					mfcc_head += NUM_MFCC_COEFFS;
 80022aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ae:	3328      	adds	r3, #40	; 0x28
 80022b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 80022b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b8:	3301      	adds	r3, #1
 80022ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022be:	e7df      	b.n	8002280 <main+0x2e4>
  				}

  				ai_float* nn_out = &predictions[i * NUM_OUTPUT_CLASSES];
 80022c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	461a      	mov	r2, r3
 80022ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022d2:	4413      	add	r3, r2
 80022d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  				// Fill input buffer
				for (uint32_t i = 0; i < AI_CNN_MODEL_IN_1_SIZE; i++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e2:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80022e6:	d247      	bcs.n	8002378 <main+0x3dc>
					uint32_t row_index = (uint32_t) (i / NUM_MFCC_COEFFS);
 80022e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ec:	4a21      	ldr	r2, [pc, #132]	; (8002374 <main+0x3d8>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					uint32_t col_index = i % NUM_MFCC_COEFFS;
 80022f8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <main+0x3d8>)
 80022fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002302:	08d9      	lsrs	r1, r3, #3
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

					((ai_float*)in_data)[i] = mfcc_out[row_index*NUM_MFCC_COEFFS+col_index];
 8002312:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	461a      	mov	r2, r3
 8002320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800232c:	441a      	add	r2, r3
 800232e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8002338:	440b      	add	r3, r1
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	601a      	str	r2, [r3, #0]
				for (uint32_t i = 0; i < AI_CNN_MODEL_IN_1_SIZE; i++) {
 800233e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002342:	3301      	adds	r3, #1
 8002344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002348:	e7c9      	b.n	80022de <main+0x342>
 800234a:	bf00      	nop
 800234c:	20000e40 	.word	0x20000e40
 8002350:	20000f10 	.word	0x20000f10
 8002354:	0801099c 	.word	0x0801099c
 8002358:	e000007c 	.word	0xe000007c
 800235c:	48000400 	.word	0x48000400
 8002360:	48001000 	.word	0x48001000
 8002364:	08010900 	.word	0x08010900
 8002368:	20000d28 	.word	0x20000d28
 800236c:	20000f78 	.word	0x20000f78
 8002370:	20000f7c 	.word	0x20000f7c
 8002374:	cccccccd 	.word	0xcccccccd
//				print("\n");
//				print_mfcc(((ai_float*)in_data));
//				print("\n");

				// forward MFCC matrix to the NN
				nbatch = ai_cnn_model_run(cnn_model, ai_input, ai_output);
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800237e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002382:	4618      	mov	r0, r3
 8002384:	f007 f81a 	bl	80093bc <ai_cnn_model_run>
 8002388:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
				if (nbatch != 1) {
 800238c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002390:	2b01      	cmp	r3, #1
 8002392:	d001      	beq.n	8002398 <main+0x3fc>
					// could not run inference
					Error_Handler();
 8002394:	f000 fd3e 	bl	8002e14 <Error_Handler>
				}

				// extract output data
				for (uint32_t i = 0; i < NUM_OUTPUT_CLASSES; i++) {
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800239e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a2:	2b0b      	cmp	r3, #11
 80023a4:	d813      	bhi.n	80023ce <main+0x432>
					nn_out[i] = ((ai_float*)out_data)[i];
 80023a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b0:	441a      	add	r2, r3
 80023b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80023bc:	440b      	add	r3, r1
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	601a      	str	r2, [r3, #0]
				for (uint32_t i = 0; i < NUM_OUTPUT_CLASSES; i++) {
 80023c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80023cc:	e7e7      	b.n	800239e <main+0x402>
				}

  				// get prediction for each recording window
  				if (DEBUG_MODE) {
 80023ce:	4b97      	ldr	r3, [pc, #604]	; (800262c <main+0x690>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01f      	beq.n	8002416 <main+0x47a>
  					pred_index = get_top_class(nn_out);
 80023d6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80023da:	f7ff fccb 	bl	8001d74 <_Z13get_top_classPf>
 80023de:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], (int)nn_out[pred_index]);
 80023e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80023e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	18d1      	adds	r1, r2, r3
 80023ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023f8:	4413      	add	r3, r2
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002402:	ee17 3a90 	vmov	r3, s15
 8002406:	460a      	mov	r2, r1
 8002408:	4989      	ldr	r1, [pc, #548]	; (8002630 <main+0x694>)
 800240a:	488a      	ldr	r0, [pc, #552]	; (8002634 <main+0x698>)
 800240c:	f00d fef8 	bl	8010200 <siprintf>
  					print(uart_buffer);
 8002410:	4888      	ldr	r0, [pc, #544]	; (8002634 <main+0x698>)
 8002412:	f000 fcd3 	bl	8002dbc <print>
  				}

  				// increment average window pointer
  				if (i >= AVERAGE_WINDOW_LENGTH) {
 8002416:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800241a:	2b02      	cmp	r3, #2
 800241c:	d904      	bls.n	8002428 <main+0x48c>
  					average_window_head += NUM_OUTPUT_CLASSES;
 800241e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002422:	3330      	adds	r3, #48	; 0x30
 8002424:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  				}
  				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 8002428:	230c      	movs	r3, #12
 800242a:	2203      	movs	r2, #3
 800242c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002430:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8002434:	f7ff fcd8 	bl	8001de8 <_Z19average_predictionsPfS_mm>
  				pred_index = get_top_class(average);
 8002438:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800243c:	f7ff fc9a 	bl	8001d74 <_Z13get_top_classPf>
 8002440:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

  				if (DEBUG_MODE) {
 8002444:	4b79      	ldr	r3, [pc, #484]	; (800262c <main+0x690>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d019      	beq.n	8002480 <main+0x4e4>
  					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], (int)average[pred_index]);
 800244c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002450:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	18d1      	adds	r1, r2, r3
 8002458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002462:	4413      	add	r3, r2
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246c:	ee17 3a90 	vmov	r3, s15
 8002470:	460a      	mov	r2, r1
 8002472:	4971      	ldr	r1, [pc, #452]	; (8002638 <main+0x69c>)
 8002474:	486f      	ldr	r0, [pc, #444]	; (8002634 <main+0x698>)
 8002476:	f00d fec3 	bl	8010200 <siprintf>
  					print(uart_buffer);
 800247a:	486e      	ldr	r0, [pc, #440]	; (8002634 <main+0x698>)
 800247c:	f000 fc9e 	bl	8002dbc <print>
  				}

  				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 8002480:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800248a:	4413      	add	r3, r2
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f85a 	bl	8000548 <__aeabi_f2d>
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <main+0x6a0>)
 800249a:	f7fe f9d7 	bl	800084c <__aeabi_ddiv>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	4b65      	ldr	r3, [pc, #404]	; (8002640 <main+0x6a4>)
 80024ac:	f7fe f8a4 	bl	80005f8 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <main+0x6a8>)
 80024be:	f7fe fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d011      	beq.n	80024ec <main+0x550>
  					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 80024c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80024cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	495c      	ldr	r1, [pc, #368]	; (8002648 <main+0x6ac>)
 80024d8:	4856      	ldr	r0, [pc, #344]	; (8002634 <main+0x698>)
 80024da:	f00d fe91 	bl	8010200 <siprintf>
  					print(uart_buffer);
 80024de:	4855      	ldr	r0, [pc, #340]	; (8002634 <main+0x698>)
 80024e0:	f000 fc6c 	bl	8002dbc <print>
  					keyword_detected = true;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  					break;
 80024ea:	e005      	b.n	80024f8 <main+0x55c>
  		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 80024ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024f0:	3301      	adds	r3, #1
 80024f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024f6:	e69c      	b.n	8002232 <main+0x296>
  				}
  		}

  		if (!keyword_detected) {
 80024f8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <main+0x570>
  			print("No keyword detected.");
 8002506:	4851      	ldr	r0, [pc, #324]	; (800264c <main+0x6b0>)
 8002508:	f000 fc58 	bl	8002dbc <print>
  		}

  		mfcc->~MFCC();
 800250c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002510:	f7fe fe6c 	bl	80011ec <_ZN4MFCCD1Ev>
  		delete mfcc;
 8002514:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8002518:	2c00      	cmp	r4, #0
 800251a:	d006      	beq.n	800252a <main+0x58e>
 800251c:	4620      	mov	r0, r4
 800251e:	f7fe fe65 	bl	80011ec <_ZN4MFCCD1Ev>
 8002522:	2134      	movs	r1, #52	; 0x34
 8002524:	4620      	mov	r0, r4
 8002526:	f00b f875 	bl	800d614 <_ZdlPvj>

  		// free allocated memory
  		delete [] mfcc_out;
 800252a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <main+0x59e>
 8002532:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002536:	f00b f86f 	bl	800d618 <_ZdaPv>
  		delete [] predictions;
 800253a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <main+0x5ae>
 8002542:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002546:	f00b f867 	bl	800d618 <_ZdaPv>
  		delete [] average;
 800254a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <main+0x5be>
 8002552:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8002556:	f00b f85f 	bl	800d618 <_ZdaPv>
  		delete [] audio_buffer;
 800255a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <main+0x5ce>
 8002562:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002566:	f00b f857 	bl	800d618 <_ZdaPv>
  		delete [] activations;
 800256a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <main+0x5de>
 8002572:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002576:	f00b f84f 	bl	800d618 <_ZdaPv>
  		delete [] ai_input;
 800257a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <main+0x5ee>
 8002582:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002586:	f00b f847 	bl	800d618 <_ZdaPv>
  		delete [] ai_output;
 800258a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <main+0x5fe>
 8002592:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002596:	f00b f83f 	bl	800d618 <_ZdaPv>
  		delete [] in_data;
 800259a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <main+0x60e>
 80025a2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80025a6:	f00b f837 	bl	800d618 <_ZdaPv>
  		delete [] out_data;
 80025aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <main+0x61e>
 80025b2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80025b6:	f00b f82f 	bl	800d618 <_ZdaPv>
//		if(ai_cnn_model_destroy(cnn_model) != AI_HANDLE_NULL){
//			Error_Handler();
//		};


  		main_state = SETUP;
 80025ba:	4b25      	ldr	r3, [pc, #148]	; (8002650 <main+0x6b4>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
  		break;
 80025c0:	e032      	b.n	8002628 <main+0x68c>
  	}
  	case AUDIO_TEST:
  	{
  		audio_player = new AudioPlayer(&hdac1);
 80025c2:	201c      	movs	r0, #28
 80025c4:	f00b f82a 	bl	800d61c <_Znwj>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461c      	mov	r4, r3
 80025cc:	4921      	ldr	r1, [pc, #132]	; (8002654 <main+0x6b8>)
 80025ce:	4620      	mov	r0, r4
 80025d0:	f7ff fa1e 	bl	8001a10 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <main+0x6bc>)
 80025d6:	601c      	str	r4, [r3, #0]
  		audio_player->play_audio(wave_data);
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <main+0x6bc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <main+0x6c0>)
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fa31 	bl	8001a4a <_ZN11AudioPlayer10play_audioEP8WaveData>

  //		audio_recorder->print_data(wave_data);
  		main_state = NN;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <main+0x6b4>)
 80025ea:	2203      	movs	r2, #3
 80025ec:	701a      	strb	r2, [r3, #0]
  //		main_state = SETUP;
  		audio_player->~AudioPlayer();
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <main+0x6bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fa1e 	bl	8001a34 <_ZN11AudioPlayerD1Ev>
  		delete audio_player;
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <main+0x6bc>)
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	2c00      	cmp	r4, #0
 80025fe:	d010      	beq.n	8002622 <main+0x686>
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff fa17 	bl	8001a34 <_ZN11AudioPlayerD1Ev>
 8002606:	211c      	movs	r1, #28
 8002608:	4620      	mov	r0, r4
 800260a:	f00b f803 	bl	800d614 <_ZdlPvj>
  		break;
 800260e:	e008      	b.n	8002622 <main+0x686>
  	}
  	case READY:
  	{
  		if (LOW_POWER_MODE)
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <main+0x6c4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <main+0x68a>
  			enter_sleep_mode();
 8002618:	f7ff fca8 	bl	8001f6c <_Z16enter_sleep_modev>
  		break;
 800261c:	e003      	b.n	8002626 <main+0x68a>
  		break;
 800261e:	bf00      	nop
 8002620:	e4e3      	b.n	8001fea <main+0x4e>
  		break;
 8002622:	bf00      	nop
 8002624:	e4e1      	b.n	8001fea <main+0x4e>
  		break;
 8002626:	bf00      	nop
  	}
  	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002628:	e4df      	b.n	8001fea <main+0x4e>
 800262a:	bf00      	nop
 800262c:	20000005 	.word	0x20000005
 8002630:	0801092c 	.word	0x0801092c
 8002634:	20000f14 	.word	0x20000f14
 8002638:	0801094c 	.word	0x0801094c
 800263c:	40600000 	.word	0x40600000
 8002640:	40590000 	.word	0x40590000
 8002644:	40418000 	.word	0x40418000
 8002648:	08010968 	.word	0x08010968
 800264c:	08010984 	.word	0x08010984
 8002650:	20000f10 	.word	0x20000f10
 8002654:	20000ccc 	.word	0x20000ccc
 8002658:	20000f80 	.word	0x20000f80
 800265c:	20000f7c 	.word	0x20000f7c
 8002660:	20000004 	.word	0x20000004

08002664 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b096      	sub	sp, #88	; 0x58
 8002668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	2244      	movs	r2, #68	; 0x44
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f00d fcbe 	bl	800fff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800268a:	f003 fa35 	bl	8005af8 <HAL_PWREx_ControlVoltageScaling>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800269e:	f000 fbb9 	bl	8002e14 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026a2:	2310      	movs	r3, #16
 80026a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026ae:	2360      	movs	r3, #96	; 0x60
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b2:	2302      	movs	r3, #2
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80026b6:	2301      	movs	r3, #1
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80026be:	2328      	movs	r3, #40	; 0x28
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026c2:	2307      	movs	r3, #7
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026c6:	2302      	movs	r3, #2
 80026c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026ca:	2302      	movs	r3, #2
 80026cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 ff8e 	bl	80065f4 <HAL_RCC_OscConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80026e8:	f000 fb94 	bl	8002e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ec:	230f      	movs	r3, #15
 80026ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f0:	2303      	movs	r3, #3
 80026f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002700:	463b      	mov	r3, r7
 8002702:	2104      	movs	r1, #4
 8002704:	4618      	mov	r0, r3
 8002706:	f004 fb5b 	bl	8006dc0 <HAL_RCC_ClockConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800271a:	f000 fb7b 	bl	8002e14 <Error_Handler>
  }
}
 800271e:	bf00      	nop
 8002720:	3758      	adds	r7, #88	; 0x58
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <_ZL11MX_CRC_Initv+0x48>)
 800272e:	4a11      	ldr	r2, [pc, #68]	; (8002774 <_ZL11MX_CRC_Initv+0x4c>)
 8002730:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <_ZL11MX_CRC_Initv+0x48>)
 8002734:	2200      	movs	r2, #0
 8002736:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <_ZL11MX_CRC_Initv+0x48>)
 800273a:	2200      	movs	r2, #0
 800273c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <_ZL11MX_CRC_Initv+0x48>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <_ZL11MX_CRC_Initv+0x48>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <_ZL11MX_CRC_Initv+0x48>)
 800274c:	2201      	movs	r2, #1
 800274e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002750:	4807      	ldr	r0, [pc, #28]	; (8002770 <_ZL11MX_CRC_Initv+0x48>)
 8002752:	f001 fd15 	bl	8004180 <HAL_CRC_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8002766:	f000 fb55 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000ca8 	.word	0x20000ca8
 8002774:	40023000 	.word	0x40023000

08002778 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2224      	movs	r2, #36	; 0x24
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f00d fc35 	bl	800fff4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <_ZL12MX_DAC1_Initv+0x70>)
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <_ZL12MX_DAC1_Initv+0x74>)
 800278e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002790:	4815      	ldr	r0, [pc, #84]	; (80027e8 <_ZL12MX_DAC1_Initv+0x70>)
 8002792:	f001 fddf 	bl	8004354 <HAL_DAC_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 80027a6:	f000 fb35 	bl	8002e14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80027ae:	2324      	movs	r3, #36	; 0x24
 80027b0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <_ZL12MX_DAC1_Initv+0x70>)
 80027c6:	f001 ff02 	bl	80045ce <HAL_DAC_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 80027da:	f000 fb1b 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000ccc 	.word	0x20000ccc
 80027ec:	40007400 	.word	0x40007400

080027f0 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80027f4:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80027f6:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <_ZL14MX_DFSDM1_Initv+0xd8>)
 80027f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002802:	2201      	movs	r2, #1
 8002804:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002808:	2201      	movs	r2, #1
 800280a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 800280e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002812:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 200;
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002816:	22c8      	movs	r2, #200	; 0xc8
 8002818:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 800281c:	2201      	movs	r2, #1
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8002820:	4828      	ldr	r0, [pc, #160]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 8002822:	f002 f939 	bl	8004a98 <HAL_DFSDM_FilterInit>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <_ZL14MX_DFSDM1_Initv+0x4a>
  {
    Error_Handler();
 8002836:	f000 faed 	bl	8002e14 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 800283c:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <_ZL14MX_DFSDM1_Initv+0xe0>)
 800283e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002842:	2201      	movs	r2, #1
 8002844:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 25;
 800284c:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 800284e:	2219      	movs	r2, #25
 8002850:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 800286c:	2204      	movs	r2, #4
 800286e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002878:	2201      	movs	r2, #1
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 800287e:	2200      	movs	r2, #0
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002888:	4810      	ldr	r0, [pc, #64]	; (80028cc <_ZL14MX_DFSDM1_Initv+0xdc>)
 800288a:	f002 f845 	bl	8004918 <HAL_DFSDM_ChannelInit>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <_ZL14MX_DFSDM1_Initv+0xb2>
  {
    Error_Handler();
 800289e:	f000 fab9 	bl	8002e14 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80028a2:	2201      	movs	r2, #1
 80028a4:	490b      	ldr	r1, [pc, #44]	; (80028d4 <_ZL14MX_DFSDM1_Initv+0xe4>)
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <_ZL14MX_DFSDM1_Initv+0xd4>)
 80028a8:	f002 f9d0 	bl	8004c4c <HAL_DFSDM_FilterConfigRegChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <_ZL14MX_DFSDM1_Initv+0xd0>
  {
    Error_Handler();
 80028bc:	f000 faaa 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000d28 	.word	0x20000d28
 80028c8:	40016100 	.word	0x40016100
 80028cc:	20000d7c 	.word	0x20000d7c
 80028d0:	40016040 	.word	0x40016040
 80028d4:	00020004 	.word	0x00020004

080028d8 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <_ZL15MX_QUADSPI_Initv+0x50>)
 80028e0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002906:	4807      	ldr	r0, [pc, #28]	; (8002924 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8002908:	f003 f994 	bl	8005c34 <HAL_QSPI_Init>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf14      	ite	ne
 8002912:	2301      	movne	r3, #1
 8002914:	2300      	moveq	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <_ZL15MX_QUADSPI_Initv+0x48>
  {
    Error_Handler();
 800291c:	f000 fa7a 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000dfc 	.word	0x20000dfc
 8002928:	a0001000 	.word	0xa0001000

0800292c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 800294c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 8002954:	2200      	movs	r2, #0
 8002956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002972:	481b      	ldr	r0, [pc, #108]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 8002974:	f005 f918 	bl	8007ba8 <HAL_TIM_Base_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002988:	f000 fa44 	bl	8002e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002990:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4619      	mov	r1, r3
 8002998:	4811      	ldr	r0, [pc, #68]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 800299a:	f005 faec 	bl	8007f76 <HAL_TIM_ConfigClockSource>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80029ae:	f000 fa31 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029b2:	2320      	movs	r3, #32
 80029b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4808      	ldr	r0, [pc, #32]	; (80029e0 <_ZL12MX_TIM2_Initv+0xb4>)
 80029c0:	f005 fcfe 	bl	80083c0 <HAL_TIMEx_MasterConfigSynchronization>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80029d4:	f000 fa1e 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000e40 	.word	0x20000e40

080029e4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <_ZL19MX_USART1_UART_Initv+0x64>)
 80029ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 80029f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a26:	4807      	ldr	r0, [pc, #28]	; (8002a44 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002a28:	f005 fd70 	bl	800850c <HAL_UART_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf14      	ite	ne
 8002a32:	2301      	movne	r3, #1
 8002a34:	2300      	moveq	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002a3c:	f000 f9ea 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000e8c 	.word	0x20000e8c
 8002a48:	40013800 	.word	0x40013800

08002a4c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <_ZL11MX_DMA_Initv+0x48>)
 8002a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a56:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <_ZL11MX_DMA_Initv+0x48>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6493      	str	r3, [r2, #72]	; 0x48
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <_ZL11MX_DMA_Initv+0x48>)
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	200d      	movs	r0, #13
 8002a70:	f001 fb5c 	bl	800412c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002a74:	200d      	movs	r0, #13
 8002a76:	f001 fb75 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	200e      	movs	r0, #14
 8002a80:	f001 fb54 	bl	800412c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002a84:	200e      	movs	r0, #14
 8002a86:	f001 fb6d 	bl	8004164 <HAL_NVIC_EnableIRQ>

}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	60da      	str	r2, [r3, #12]
 8002aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ab4:	f043 0310 	orr.w	r3, r3, #16
 8002ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac6:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <_ZL12MX_GPIO_Initv+0xfc>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2108      	movs	r1, #8
 8002b12:	4821      	ldr	r0, [pc, #132]	; (8002b98 <_ZL12MX_GPIO_Initv+0x100>)
 8002b14:	f002 ff7e 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b1e:	481f      	ldr	r0, [pc, #124]	; (8002b9c <_ZL12MX_GPIO_Initv+0x104>)
 8002b20:	f002 ff78 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8002b24:	2308      	movs	r3, #8
 8002b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4817      	ldr	r0, [pc, #92]	; (8002b98 <_ZL12MX_GPIO_Initv+0x100>)
 8002b3c:	f002 fccc 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	4812      	ldr	r0, [pc, #72]	; (8002ba0 <_ZL12MX_GPIO_Initv+0x108>)
 8002b58:	f002 fcbe 	bl	80054d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8002b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <_ZL12MX_GPIO_Initv+0x104>)
 8002b76:	f002 fcaf 	bl	80054d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2028      	movs	r0, #40	; 0x28
 8002b80:	f001 fad4 	bl	800412c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b84:	2028      	movs	r0, #40	; 0x28
 8002b86:	f001 faed 	bl	8004164 <HAL_NVIC_EnableIRQ>

}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	; 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	48001000 	.word	0x48001000
 8002b9c:	48000400 	.word	0x48000400
 8002ba0:	48000800 	.word	0x48000800

08002ba4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// callback function of GPIO interrupts
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb4:	d11f      	bne.n	8002bf6 <HAL_GPIO_EXTI_Callback+0x52>
	case BUTTON_Pin:
		switch(main_state) {
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_GPIO_EXTI_Callback+0x60>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d819      	bhi.n	8002bf4 <HAL_GPIO_EXTI_Callback+0x50>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <HAL_GPIO_EXTI_Callback+0x24>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002be1 	.word	0x08002be1
 8002bcc:	08002bf3 	.word	0x08002bf3
 8002bd0:	08002be9 	.word	0x08002be9
 8002bd4:	08002bf3 	.word	0x08002bf3
 8002bd8:	08002bf3 	.word	0x08002bf3
 8002bdc:	08002bf3 	.word	0x08002bf3
		case READY:
			main_state = RECORDING;
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_GPIO_EXTI_Callback+0x60>)
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
			break;
 8002be6:	e005      	b.n	8002bf4 <HAL_GPIO_EXTI_Callback+0x50>
		case RECORDING:
//			dfsdm_stop_flag = 1;
			audio_recorder->dfsdm_stop_flag = 1;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_GPIO_EXTI_Callback+0x64>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	731a      	strb	r2, [r3, #12]
			break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_EXTI_Callback+0x50>
		case SETUP:
		case MFCC_TEST:
		case AUDIO_TEST:
		case NN:
			break;
 8002bf2:	bf00      	nop
		}
		break;
 8002bf4:	bf00      	nop
	}
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000f10 	.word	0x20000f10
 8002c08:	20000f78 	.word	0x20000f78

08002c0c <HAL_DAC_ConvHalfCpltCallbackCh1>:

// DAC Circular DMA callback functions
void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d128      	bne.n	8002c70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002c2c:	615a      	str	r2, [r3, #20]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002c38:	d312      	bcc.n	8002c60 <HAL_DAC_ConvHalfCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 fc77 	bl	8004530 <HAL_DAC_Stop_DMA>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_DAC_ConvHalfCpltCallbackCh1+0x4a>
				Error_Handler();
 8002c52:	f000 f8df 	bl	8002e14 <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002c5e:	e007      	b.n	8002c70 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe ff44 	bl	8001af8 <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40007400 	.word	0x40007400
 8002c7c:	20000f80 	.word	0x20000f80

08002c80 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002c96:	615a      	str	r2, [r3, #20]
	if (hdac->Instance == DAC1) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d121      	bne.n	8002ce6 <HAL_DAC_ConvCpltCallbackCh1+0x66>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002ca2:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002cac:	d312      	bcc.n	8002cd4 <HAL_DAC_ConvCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 8002cae:	2100      	movs	r1, #0
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 fc3d 	bl	8004530 <HAL_DAC_Stop_DMA>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_DAC_ConvCpltCallbackCh1+0x4a>
				Error_Handler();
 8002cc6:	f000 f8a5 	bl	8002e14 <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002cd2:	e008      	b.n	8002ce6 <HAL_DAC_ConvCpltCallbackCh1+0x66>
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002cdc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe ff09 	bl	8001af8 <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000f80 	.word	0x20000f80
 8002cf4:	40007400 	.word	0x40007400

08002cf8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d11f      	bne.n	8002d48 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe ffe4 	bl	8001ce0 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002d24:	d310      	bcc.n	8002d48 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f002 f854 	bl	8004ddc <HAL_DFSDM_FilterRegularStop_DMA>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 8002d44:	f000 f866 	bl	8002e14 <Error_Handler>
			}
		}
	}
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000d28 	.word	0x20000d28
 8002d54:	20000f78 	.word	0x20000f78

08002d58 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d120      	bne.n	8002daa <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d70:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe ffb3 	bl	8001ce0 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002d86:	d310      	bcc.n	8002daa <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f002 f823 	bl	8004ddc <HAL_DFSDM_FilterRegularStop_DMA>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 8002da6:	f000 f835 	bl	8002e14 <Error_Handler>
			}
		}

	}
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000d28 	.word	0x20000d28
 8002db8:	20000f78 	.word	0x20000f78

08002dbc <print>:

void print(const char* txt) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4808      	ldr	r0, [pc, #32]	; (8002de8 <print+0x2c>)
 8002dc8:	f00d fa3a 	bl	8010240 <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fd f9ff 	bl	80001d0 <strlen>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <print+0x2c>)
 8002dda:	4804      	ldr	r0, [pc, #16]	; (8002dec <print+0x30>)
 8002ddc:	f005 fbe4 	bl	80085a8 <HAL_UART_Transmit>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000f14 	.word	0x20000f14
 8002dec:	20000e8c 	.word	0x20000e8c

08002df0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e02:	f001 f897 	bl	8003f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40014800 	.word	0x40014800

08002e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2108      	movs	r1, #8
 8002e1c:	4803      	ldr	r0, [pc, #12]	; (8002e2c <Error_Handler+0x18>)
 8002e1e:	f002 fdf9 	bl	8005a14 <HAL_GPIO_WritePin>
		__BKPT();
 8002e22:	be00      	bkpt	0x0000
  __ASM volatile ("cpsid i" : : : "memory");
 8002e24:	b672      	cpsid	i
}
 8002e26:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <Error_Handler+0x14>
 8002e2a:	bf00      	nop
 8002e2c:	48001000 	.word	0x48001000

08002e30 <_Z9qspi_readPhmm>:
#include "stm32l4xx_hal.h"
#include "stm32l475e_iot01_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f8bf 	bl	8002fc4 <BSP_QSPI_Read>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 8002e56:	f7ff ffdd 	bl	8002e14 <Error_Handler>
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8ec 	bl	8003050 <BSP_QSPI_Write>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 8002e88:	f7ff ffc4 	bl	8002e14 <Error_Handler>
	}
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_Z9qspi_initv>:

void qspi_init() {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 8002e98:	f000 f828 	bl	8002eec <BSP_QSPI_Init>
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f94f 	bl	800314c <BSP_QSPI_Erase_Block>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d90b      	bls.n	8002ee4 <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25R6435F_BLOCK_SIZE);
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ffe2 	bl	8002ea0 <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e7ef      	b.n	8002ec4 <_Z17qspi_erase_blocksmm+0xe>
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002ef4:	4a32      	ldr	r2, [pc, #200]	; (8002fc0 <BSP_QSPI_Init+0xd4>)
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002ef8:	4830      	ldr	r0, [pc, #192]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002efa:	f002 ff11 	bl	8005d20 <HAL_QSPI_DeInit>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e054      	b.n	8002fb2 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8002f08:	f000 f964 	bl	80031d4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f0e:	2202      	movs	r2, #2
 8002f10:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f14:	2204      	movs	r2, #4
 8002f16:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e003      	b.n	8002f42 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8002f42:	3b01      	subs	r3, #1
 8002f44:	461a      	mov	r2, r3
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f48:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002f56:	4819      	ldr	r0, [pc, #100]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f58:	f002 fe6c 	bl	8005c34 <HAL_QSPI_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e025      	b.n	8002fb2 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002f66:	4815      	ldr	r0, [pc, #84]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f68:	f000 f974 	bl	8003254 <QSPI_ResetMemory>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8002f72:	2304      	movs	r3, #4
 8002f74:	e01d      	b.n	8002fb2 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8002f76:	2101      	movs	r1, #1
 8002f78:	4810      	ldr	r0, [pc, #64]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f7a:	f000 fa35 	bl	80033e8 <QSPI_QuadMode>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e014      	b.n	8002fb2 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8002f88:	2101      	movs	r1, #1
 8002f8a:	480c      	ldr	r0, [pc, #48]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f8c:	f000 fad4 	bl	8003538 <QSPI_HighPerfMode>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00b      	b.n	8002fb2 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002fa0:	4806      	ldr	r0, [pc, #24]	; (8002fbc <BSP_QSPI_Init+0xd0>)
 8002fa2:	f002 fe47 	bl	8005c34 <HAL_QSPI_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20001074 	.word	0x20001074
 8002fc0:	a0001000 	.word	0xa0001000

08002fc4 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b092      	sub	sp, #72	; 0x48
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8002fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8002fd6:	23eb      	movs	r3, #235	; 0xeb
 8002fd8:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8002fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8002fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe4:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8002fea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8002ff4:	23aa      	movs	r3, #170	; 0xaa
 8002ff6:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8002ff8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8002ffe:	2304      	movs	r3, #4
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800300a:	2300      	movs	r3, #0
 800300c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 800300e:	2300      	movs	r3, #0
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4619      	mov	r1, r3
 800301c:	480b      	ldr	r0, [pc, #44]	; (800304c <BSP_QSPI_Read+0x88>)
 800301e:	f002 fea3 	bl	8005d68 <HAL_QSPI_Command>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e00b      	b.n	8003044 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <BSP_QSPI_Read+0x88>)
 8003034:	f002 ff8d 	bl	8005f52 <HAL_QSPI_Receive>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3748      	adds	r7, #72	; 0x48
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20001074 	.word	0x20001074

08003050 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b096      	sub	sp, #88	; 0x58
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003064:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8003066:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d901      	bls.n	8003072 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800307e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8003084:	2338      	movs	r3, #56	; 0x38
 8003086:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003088:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800308c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800308e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003092:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003094:	2300      	movs	r3, #0
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8003098:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80030a6:	2300      	movs	r3, #0
 80030a8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80030aa:	2300      	movs	r3, #0
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 80030b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80030b6:	4824      	ldr	r0, [pc, #144]	; (8003148 <BSP_QSPI_Write+0xf8>)
 80030b8:	f000 f910 	bl	80032dc <QSPI_WriteEnable>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e03b      	b.n	800313e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4619      	mov	r1, r3
 80030d0:	481d      	ldr	r0, [pc, #116]	; (8003148 <BSP_QSPI_Write+0xf8>)
 80030d2:	f002 fe49 	bl	8005d68 <HAL_QSPI_Command>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e02e      	b.n	800313e <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	68f9      	ldr	r1, [r7, #12]
 80030e6:	4818      	ldr	r0, [pc, #96]	; (8003148 <BSP_QSPI_Write+0xf8>)
 80030e8:	f002 fe9c 	bl	8005e24 <HAL_QSPI_Transmit>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e023      	b.n	800313e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80030f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80030fa:	4813      	ldr	r0, [pc, #76]	; (8003148 <BSP_QSPI_Write+0xf8>)
 80030fc:	f000 f93a 	bl	8003374 <QSPI_AutoPollingMemReady>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e019      	b.n	800313e <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800310a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800310c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310e:	4413      	add	r3, r2
 8003110:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800311a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800311c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003122:	429a      	cmp	r2, r3
 8003124:	d203      	bcs.n	800312e <BSP_QSPI_Write+0xde>
 8003126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	e001      	b.n	8003132 <BSP_QSPI_Write+0xe2>
 800312e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8003134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	429a      	cmp	r2, r3
 800313a:	d3b8      	bcc.n	80030ae <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3758      	adds	r7, #88	; 0x58
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001074 	.word	0x20001074

0800314c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b090      	sub	sp, #64	; 0x40
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003158:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 800315a:	23d8      	movs	r3, #216	; 0xd8
 800315c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 800315e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003168:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800317e:	2300      	movs	r3, #0
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003182:	2300      	movs	r3, #0
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003186:	4812      	ldr	r0, [pc, #72]	; (80031d0 <BSP_QSPI_Erase_Block+0x84>)
 8003188:	f000 f8a8 	bl	80032dc <QSPI_WriteEnable>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e017      	b.n	80031c6 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4619      	mov	r1, r3
 80031a0:	480b      	ldr	r0, [pc, #44]	; (80031d0 <BSP_QSPI_Erase_Block+0x84>)
 80031a2:	f002 fde1 	bl	8005d68 <HAL_QSPI_Command>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e00a      	b.n	80031c6 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80031b0:	f640 51ac 	movw	r1, #3500	; 0xdac
 80031b4:	4806      	ldr	r0, [pc, #24]	; (80031d0 <BSP_QSPI_Erase_Block+0x84>)
 80031b6:	f000 f8dd 	bl	8003374 <QSPI_AutoPollingMemReady>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3740      	adds	r7, #64	; 0x40
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20001074 	.word	0x20001074

080031d4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <BSP_QSPI_MspInit+0x78>)
 80031dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <BSP_QSPI_MspInit+0x78>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6513      	str	r3, [r2, #80]	; 0x50
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <BSP_QSPI_MspInit+0x78>)
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <BSP_QSPI_MspInit+0x78>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a15      	ldr	r2, [pc, #84]	; (800324c <BSP_QSPI_MspInit+0x78>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <BSP_QSPI_MspInit+0x78>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <BSP_QSPI_MspInit+0x78>)
 8003204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003208:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <BSP_QSPI_MspInit+0x78>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <BSP_QSPI_MspInit+0x78>)
 8003210:	f043 0310 	orr.w	r3, r3, #16
 8003214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <BSP_QSPI_MspInit+0x78>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003222:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003226:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003234:	230a      	movs	r3, #10
 8003236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	4619      	mov	r1, r3
 800323e:	4804      	ldr	r0, [pc, #16]	; (8003250 <BSP_QSPI_MspInit+0x7c>)
 8003240:	f002 f94a 	bl	80054d8 <HAL_GPIO_Init>
}
 8003244:	bf00      	nop
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	48001000 	.word	0x48001000

08003254 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b090      	sub	sp, #64	; 0x40
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800325c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003260:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8003262:	2366      	movs	r3, #102	; 0x66
 8003264:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800326a:	2300      	movs	r3, #0
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 800326e:	2300      	movs	r3, #0
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800327a:	2300      	movs	r3, #0
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800327e:	2300      	movs	r3, #0
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4619      	mov	r1, r3
 800328c:	4812      	ldr	r0, [pc, #72]	; (80032d8 <QSPI_ResetMemory+0x84>)
 800328e:	f002 fd6b 	bl	8005d68 <HAL_QSPI_Command>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e019      	b.n	80032d0 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800329c:	2399      	movs	r3, #153	; 0x99
 800329e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032a0:	f107 0308 	add.w	r3, r7, #8
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4619      	mov	r1, r3
 80032aa:	480b      	ldr	r0, [pc, #44]	; (80032d8 <QSPI_ResetMemory+0x84>)
 80032ac:	f002 fd5c 	bl	8005d68 <HAL_QSPI_Command>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00a      	b.n	80032d0 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80032ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80032be:	4806      	ldr	r0, [pc, #24]	; (80032d8 <QSPI_ResetMemory+0x84>)
 80032c0:	f000 f858 	bl	8003374 <QSPI_AutoPollingMemReady>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3740      	adds	r7, #64	; 0x40
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20001074 	.word	0x20001074

080032dc <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b096      	sub	sp, #88	; 0x58
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80032e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 80032ea:	2306      	movs	r3, #6
 80032ec:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003302:	2300      	movs	r3, #0
 8003304:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003306:	2300      	movs	r3, #0
 8003308:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800330a:	f107 0320 	add.w	r3, r7, #32
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4619      	mov	r1, r3
 8003314:	4816      	ldr	r0, [pc, #88]	; (8003370 <QSPI_WriteEnable+0x94>)
 8003316:	f002 fd27 	bl	8005d68 <HAL_QSPI_Command>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e020      	b.n	8003366 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8003324:	2302      	movs	r3, #2
 8003326:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8003328:	2302      	movs	r3, #2
 800332a:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8003334:	2310      	movs	r3, #16
 8003336:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800333c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800333e:	2305      	movs	r3, #5
 8003340:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8003342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003346:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003348:	f107 0208 	add.w	r2, r7, #8
 800334c:	f107 0120 	add.w	r1, r7, #32
 8003350:	f241 3388 	movw	r3, #5000	; 0x1388
 8003354:	4806      	ldr	r0, [pc, #24]	; (8003370 <QSPI_WriteEnable+0x94>)
 8003356:	f002 fe9e 	bl	8006096 <HAL_QSPI_AutoPolling>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3758      	adds	r7, #88	; 0x58
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20001074 	.word	0x20001074

08003374 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b096      	sub	sp, #88	; 0x58
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800337e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8003384:	2305      	movs	r3, #5
 8003386:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800338c:	2300      	movs	r3, #0
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003394:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800339a:	2300      	movs	r3, #0
 800339c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800339e:	2300      	movs	r3, #0
 80033a0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033a2:	2300      	movs	r3, #0
 80033a4:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 80033aa:	2301      	movs	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80033b6:	2310      	movs	r3, #16
 80033b8:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80033ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033be:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80033c0:	f107 0208 	add.w	r2, r7, #8
 80033c4:	f107 0120 	add.w	r1, r7, #32
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4806      	ldr	r0, [pc, #24]	; (80033e4 <QSPI_AutoPollingMemReady+0x70>)
 80033cc:	f002 fe63 	bl	8006096 <HAL_QSPI_AutoPolling>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3758      	adds	r7, #88	; 0x58
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20001074 	.word	0x20001074

080033e8 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b092      	sub	sp, #72	; 0x48
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80033f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80033fa:	2305      	movs	r3, #5
 80033fc:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003410:	2301      	movs	r3, #1
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003414:	2300      	movs	r3, #0
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003418:	2300      	movs	r3, #0
 800341a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800341c:	2300      	movs	r3, #0
 800341e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003420:	f107 0310 	add.w	r3, r7, #16
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4619      	mov	r1, r3
 800342a:	4842      	ldr	r0, [pc, #264]	; (8003534 <QSPI_QuadMode+0x14c>)
 800342c:	f002 fc9c 	bl	8005d68 <HAL_QSPI_Command>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e077      	b.n	800352a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800343a:	f107 030f 	add.w	r3, r7, #15
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4619      	mov	r1, r3
 8003444:	483b      	ldr	r0, [pc, #236]	; (8003534 <QSPI_QuadMode+0x14c>)
 8003446:	f002 fd84 	bl	8005f52 <HAL_QSPI_Receive>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e06a      	b.n	800352a <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003454:	4837      	ldr	r0, [pc, #220]	; (8003534 <QSPI_QuadMode+0x14c>)
 8003456:	f7ff ff41 	bl	80032dc <QSPI_WriteEnable>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e062      	b.n	800352a <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003470:	b2db      	uxtb	r3, r3
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	e004      	b.n	8003480 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347c:	b2db      	uxtb	r3, r3
 800347e:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4619      	mov	r1, r3
 800348e:	4829      	ldr	r0, [pc, #164]	; (8003534 <QSPI_QuadMode+0x14c>)
 8003490:	f002 fc6a 	bl	8005d68 <HAL_QSPI_Command>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e045      	b.n	800352a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800349e:	f107 030f 	add.w	r3, r7, #15
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4619      	mov	r1, r3
 80034a8:	4822      	ldr	r0, [pc, #136]	; (8003534 <QSPI_QuadMode+0x14c>)
 80034aa:	f002 fcbb 	bl	8005e24 <HAL_QSPI_Transmit>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e038      	b.n	800352a <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80034b8:	f241 3188 	movw	r1, #5000	; 0x1388
 80034bc:	481d      	ldr	r0, [pc, #116]	; (8003534 <QSPI_QuadMode+0x14c>)
 80034be:	f7ff ff59 	bl	8003374 <QSPI_AutoPollingMemReady>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e02e      	b.n	800352a <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80034cc:	2305      	movs	r3, #5
 80034ce:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034d0:	f107 0310 	add.w	r3, r7, #16
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	4619      	mov	r1, r3
 80034da:	4816      	ldr	r0, [pc, #88]	; (8003534 <QSPI_QuadMode+0x14c>)
 80034dc:	f002 fc44 	bl	8005d68 <HAL_QSPI_Command>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e01f      	b.n	800352a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034ea:	f107 030f 	add.w	r3, r7, #15
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4619      	mov	r1, r3
 80034f4:	480f      	ldr	r0, [pc, #60]	; (8003534 <QSPI_QuadMode+0x14c>)
 80034f6:	f002 fd2c 	bl	8005f52 <HAL_QSPI_Receive>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e012      	b.n	800352a <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <QSPI_QuadMode+0x12c>
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3748      	adds	r7, #72	; 0x48
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20001074 	.word	0x20001074

08003538 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b092      	sub	sp, #72	; 0x48
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800354a:	2305      	movs	r3, #5
 800354c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003552:	2300      	movs	r3, #0
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8003556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8003560:	2301      	movs	r3, #1
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003564:	2300      	movs	r3, #0
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003568:	2300      	movs	r3, #0
 800356a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800356c:	2300      	movs	r3, #0
 800356e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003570:	f107 0310 	add.w	r3, r7, #16
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4619      	mov	r1, r3
 800357a:	4853      	ldr	r0, [pc, #332]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 800357c:	f002 fbf4 	bl	8005d68 <HAL_QSPI_Command>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e09a      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4619      	mov	r1, r3
 8003594:	484c      	ldr	r0, [pc, #304]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 8003596:	f002 fcdc 	bl	8005f52 <HAL_QSPI_Receive>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e08d      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80035a4:	2315      	movs	r3, #21
 80035a6:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80035a8:	2302      	movs	r3, #2
 80035aa:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035ac:	f107 0310 	add.w	r3, r7, #16
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4619      	mov	r1, r3
 80035b6:	4844      	ldr	r0, [pc, #272]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 80035b8:	f002 fbd6 	bl	8005d68 <HAL_QSPI_Command>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07c      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	3301      	adds	r3, #1
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4619      	mov	r1, r3
 80035d2:	483d      	ldr	r0, [pc, #244]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 80035d4:	f002 fcbd 	bl	8005f52 <HAL_QSPI_Receive>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e06e      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80035e2:	4839      	ldr	r0, [pc, #228]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 80035e4:	f7ff fe7a 	bl	80032dc <QSPI_WriteEnable>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e066      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80035f8:	7bbb      	ldrb	r3, [r7, #14]
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	73bb      	strb	r3, [r7, #14]
 8003602:	e004      	b.n	800360e <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	f023 0302 	bic.w	r3, r3, #2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800360e:	2301      	movs	r3, #1
 8003610:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8003612:	2303      	movs	r3, #3
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003616:	f107 0310 	add.w	r3, r7, #16
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4619      	mov	r1, r3
 8003620:	4829      	ldr	r0, [pc, #164]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 8003622:	f002 fba1 	bl	8005d68 <HAL_QSPI_Command>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e047      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4619      	mov	r1, r3
 800363a:	4823      	ldr	r0, [pc, #140]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 800363c:	f002 fbf2 	bl	8005e24 <HAL_QSPI_Transmit>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03a      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800364a:	f241 3188 	movw	r1, #5000	; 0x1388
 800364e:	481e      	ldr	r0, [pc, #120]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 8003650:	f7ff fe90 	bl	8003374 <QSPI_AutoPollingMemReady>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e030      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800365e:	2315      	movs	r3, #21
 8003660:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8003662:	2302      	movs	r3, #2
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003666:	f107 0310 	add.w	r3, r7, #16
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4619      	mov	r1, r3
 8003670:	4815      	ldr	r0, [pc, #84]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 8003672:	f002 fb79 	bl	8005d68 <HAL_QSPI_Command>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e01f      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4619      	mov	r1, r3
 800368a:	480f      	ldr	r0, [pc, #60]	; (80036c8 <QSPI_HighPerfMode+0x190>)
 800368c:	f002 fc61 	bl	8005f52 <HAL_QSPI_Receive>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e012      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800369a:	7b7b      	ldrb	r3, [r7, #13]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <QSPI_HighPerfMode+0x172>
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d007      	beq.n	80036ba <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80036aa:	7b7b      	ldrb	r3, [r7, #13]
 80036ac:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3748      	adds	r7, #72	; 0x48
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20001074 	.word	0x20001074

080036cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_MspInit+0x44>)
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <HAL_MspInit+0x44>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6613      	str	r3, [r2, #96]	; 0x60
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <HAL_MspInit+0x44>)
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_MspInit+0x44>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	4a08      	ldr	r2, [pc, #32]	; (8003710 <HAL_MspInit+0x44>)
 80036f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f4:	6593      	str	r3, [r2, #88]	; 0x58
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_MspInit+0x44>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	; (800374c <HAL_CRC_MspInit+0x38>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10b      	bne.n	800373e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_CRC_MspInit+0x3c>)
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_CRC_MspInit+0x3c>)
 800372c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003730:	6493      	str	r3, [r2, #72]	; 0x48
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_CRC_MspInit+0x3c>)
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40023000 	.word	0x40023000
 8003750:	40021000 	.word	0x40021000

08003754 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <HAL_DAC_MspInit+0xcc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d14f      	bne.n	8003816 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_DAC_MspInit+0xd0>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <HAL_DAC_MspInit+0xd0>)
 800377c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003780:	6593      	str	r3, [r2, #88]	; 0x58
 8003782:	4b28      	ldr	r3, [pc, #160]	; (8003824 <HAL_DAC_MspInit+0xd0>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <HAL_DAC_MspInit+0xd0>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	4a24      	ldr	r2, [pc, #144]	; (8003824 <HAL_DAC_MspInit+0xd0>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <HAL_DAC_MspInit+0xd0>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037a6:	2310      	movs	r3, #16
 80037a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037aa:	2303      	movs	r3, #3
 80037ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037bc:	f001 fe8c 	bl	80054d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_DAC_MspInit+0xd8>)
 80037c4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037c8:	2206      	movs	r2, #6
 80037ca:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037ce:	2210      	movs	r2, #16
 80037d0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ec:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037f0:	2220      	movs	r2, #32
 80037f2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80037fa:	480b      	ldr	r0, [pc, #44]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 80037fc:	f001 fc36 	bl	800506c <HAL_DMA_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003806:	f7ff fb05 	bl	8002e14 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a06      	ldr	r2, [pc, #24]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	4a05      	ldr	r2, [pc, #20]	; (8003828 <HAL_DAC_MspInit+0xd4>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003816:	bf00      	nop
 8003818:	3728      	adds	r7, #40	; 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40007400 	.word	0x40007400
 8003824:	40021000 	.word	0x40021000
 8003828:	20000ce0 	.word	0x20000ce0
 800382c:	40020030 	.word	0x40020030

08003830 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b0ac      	sub	sp, #176	; 0xb0
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	2288      	movs	r2, #136	; 0x88
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f00c fbcf 	bl	800fff4 <memset>
  if(DFSDM1_Init == 0)
 8003856:	4b45      	ldr	r3, [pc, #276]	; (800396c <HAL_DFSDM_FilterMspInit+0x13c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d14b      	bne.n	80038f6 <HAL_DFSDM_FilterMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800385e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003864:	2300      	movs	r3, #0
 8003866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800386a:	f107 0314 	add.w	r3, r7, #20
 800386e:	4618      	mov	r0, r3
 8003870:	f003 fcde 	bl	8007230 <HAL_RCCEx_PeriphCLKConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800387a:	f7ff facb 	bl	8002e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800387e:	4b3c      	ldr	r3, [pc, #240]	; (8003970 <HAL_DFSDM_FilterMspInit+0x140>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	4a3a      	ldr	r2, [pc, #232]	; (8003970 <HAL_DFSDM_FilterMspInit+0x140>)
 8003886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003888:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_DFSDM_FilterMspInit+0x140>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10b      	bne.n	80038a8 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003890:	4b38      	ldr	r3, [pc, #224]	; (8003974 <HAL_DFSDM_FilterMspInit+0x144>)
 8003892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003894:	4a37      	ldr	r2, [pc, #220]	; (8003974 <HAL_DFSDM_FilterMspInit+0x144>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6613      	str	r3, [r2, #96]	; 0x60
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <HAL_DFSDM_FilterMspInit+0x144>)
 800389e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_DFSDM_FilterMspInit+0x144>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	4a31      	ldr	r2, [pc, #196]	; (8003974 <HAL_DFSDM_FilterMspInit+0x144>)
 80038ae:	f043 0310 	orr.w	r3, r3, #16
 80038b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b4:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <HAL_DFSDM_FilterMspInit+0x144>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80038c0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80038c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80038da:	2306      	movs	r3, #6
 80038dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038e4:	4619      	mov	r1, r3
 80038e6:	4824      	ldr	r0, [pc, #144]	; (8003978 <HAL_DFSDM_FilterMspInit+0x148>)
 80038e8:	f001 fdf6 	bl	80054d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <HAL_DFSDM_FilterMspInit+0x13c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <HAL_DFSDM_FilterMspInit+0x13c>)
 80038f4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a20      	ldr	r2, [pc, #128]	; (800397c <HAL_DFSDM_FilterMspInit+0x14c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d130      	bne.n	8003962 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003902:	4a20      	ldr	r2, [pc, #128]	; (8003984 <HAL_DFSDM_FilterMspInit+0x154>)
 8003904:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003912:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003914:	2200      	movs	r2, #0
 8003916:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003924:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800392c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003930:	2220      	movs	r2, #32
 8003932:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003936:	2200      	movs	r2, #0
 8003938:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800393a:	4811      	ldr	r0, [pc, #68]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 800393c:	f001 fb96 	bl	800506c <HAL_DMA_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8003946:	f7ff fa65 	bl	8002e14 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <HAL_DFSDM_FilterMspInit+0x150>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8003962:	bf00      	nop
 8003964:	37b0      	adds	r7, #176	; 0xb0
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000f88 	.word	0x20000f88
 8003970:	20000f84 	.word	0x20000f84
 8003974:	40021000 	.word	0x40021000
 8003978:	48001000 	.word	0x48001000
 800397c:	40016100 	.word	0x40016100
 8003980:	20000db4 	.word	0x20000db4
 8003984:	40020044 	.word	0x40020044

08003988 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0ac      	sub	sp, #176	; 0xb0
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2288      	movs	r2, #136	; 0x88
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f00c fb23 	bl	800fff4 <memset>
  if(DFSDM1_Init == 0)
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d14b      	bne.n	8003a4e <HAL_DFSDM_ChannelMspInit+0xc6>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80039b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039c2:	f107 0314 	add.w	r3, r7, #20
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 fc32 	bl	8007230 <HAL_RCCEx_PeriphCLKConfig>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80039d2:	f7ff fa1f 	bl	8002e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80039de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80039e0:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <HAL_DFSDM_ChannelMspInit+0xd4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10b      	bne.n	8003a00 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f2:	6613      	str	r3, [r2, #96]	; 0x60
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003a06:	f043 0310 	orr.w	r3, r3, #16
 8003a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003a18:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a20:	2302      	movs	r3, #2
 8003a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003a32:	2306      	movs	r3, #6
 8003a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4809      	ldr	r0, [pc, #36]	; (8003a64 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8003a40:	f001 fd4a 	bl	80054d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003a4c:	6013      	str	r3, [r2, #0]
  }

}
 8003a4e:	bf00      	nop
 8003a50:	37b0      	adds	r7, #176	; 0xb0
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000f88 	.word	0x20000f88
 8003a5c:	20000f84 	.word	0x20000f84
 8003a60:	40021000 	.word	0x40021000
 8003a64:	48001000 	.word	0x48001000

08003a68 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <HAL_QSPI_MspInit+0x7c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d128      	bne.n	8003adc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003a8a:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <HAL_QSPI_MspInit+0x80>)
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_QSPI_MspInit+0x80>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6513      	str	r3, [r2, #80]	; 0x50
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_QSPI_MspInit+0x80>)
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <HAL_QSPI_MspInit+0x80>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	4a10      	ldr	r2, [pc, #64]	; (8003ae8 <HAL_QSPI_MspInit+0x80>)
 8003aa8:	f043 0310 	orr.w	r3, r3, #16
 8003aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_QSPI_MspInit+0x80>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003aba:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003abe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003acc:	230a      	movs	r3, #10
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4805      	ldr	r0, [pc, #20]	; (8003aec <HAL_QSPI_MspInit+0x84>)
 8003ad8:	f001 fcfe 	bl	80054d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003adc:	bf00      	nop
 8003ade:	3728      	adds	r7, #40	; 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	a0001000 	.word	0xa0001000
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	48001000 	.word	0x48001000

08003af0 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <HAL_QSPI_MspDeInit+0x30>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10a      	bne.n	8003b18 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_QSPI_MspDeInit+0x34>)
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <HAL_QSPI_MspDeInit+0x34>)
 8003b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b0c:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003b0e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8003b12:	4805      	ldr	r0, [pc, #20]	; (8003b28 <HAL_QSPI_MspDeInit+0x38>)
 8003b14:	f001 fe8a 	bl	800582c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	a0001000 	.word	0xa0001000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	48001000 	.word	0x48001000

08003b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d113      	bne.n	8003b66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <HAL_TIM_Base_MspInit+0x44>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <HAL_TIM_Base_MspInit+0x44>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6593      	str	r3, [r2, #88]	; 0x58
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_TIM_Base_MspInit+0x44>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2100      	movs	r1, #0
 8003b5a:	201c      	movs	r0, #28
 8003b5c:	f000 fae6 	bl	800412c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b60:	201c      	movs	r0, #28
 8003b62:	f000 faff 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b0ac      	sub	sp, #176	; 0xb0
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	2288      	movs	r2, #136	; 0x88
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f00c fa2d 	bl	800fff4 <memset>
  if(huart->Instance==USART1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a21      	ldr	r2, [pc, #132]	; (8003c24 <HAL_UART_MspInit+0xb0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d13a      	bne.n	8003c1a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f003 fb3d 	bl	8007230 <HAL_RCCEx_PeriphCLKConfig>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003bbc:	f7ff f92a 	bl	8002e14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_UART_MspInit+0xb4>)
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_UART_MspInit+0xb4>)
 8003bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bca:	6613      	str	r3, [r2, #96]	; 0x60
 8003bcc:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <HAL_UART_MspInit+0xb4>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd8:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <HAL_UART_MspInit+0xb4>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <HAL_UART_MspInit+0xb4>)
 8003bde:	f043 0302 	orr.w	r3, r3, #2
 8003be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_UART_MspInit+0xb4>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bf0:	23c0      	movs	r3, #192	; 0xc0
 8003bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c02:	2303      	movs	r3, #3
 8003c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c08:	2307      	movs	r3, #7
 8003c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c12:	4619      	mov	r1, r3
 8003c14:	4805      	ldr	r0, [pc, #20]	; (8003c2c <HAL_UART_MspInit+0xb8>)
 8003c16:	f001 fc5f 	bl	80054d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c1a:	bf00      	nop
 8003c1c:	37b0      	adds	r7, #176	; 0xb0
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40013800 	.word	0x40013800
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	48000400 	.word	0x48000400

08003c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8003c40:	2200      	movs	r2, #0
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	201a      	movs	r0, #26
 8003c46:	f000 fa71 	bl	800412c <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003c4a:	201a      	movs	r0, #26
 8003c4c:	f000 fa8a 	bl	8004164 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003c50:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_InitTick+0x9c>)
 8003c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c54:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <HAL_InitTick+0x9c>)
 8003c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5a:	6613      	str	r3, [r2, #96]	; 0x60
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_InitTick+0x9c>)
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c68:	f107 0210 	add.w	r2, r7, #16
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 fa4a 	bl	800710c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003c78:	f003 fa32 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 8003c7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <HAL_InitTick+0xa0>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_InitTick+0xa4>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_InitTick+0xa8>)
 8003c90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_InitTick+0xa4>)
 8003c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c98:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <HAL_InitTick+0xa4>)
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_InitTick+0xa4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_InitTick+0xa4>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003cac:	4809      	ldr	r0, [pc, #36]	; (8003cd4 <HAL_InitTick+0xa4>)
 8003cae:	f003 ff7b 	bl	8007ba8 <HAL_TIM_Base_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003cb8:	4806      	ldr	r0, [pc, #24]	; (8003cd4 <HAL_InitTick+0xa4>)
 8003cba:	f003 ffcd 	bl	8007c58 <HAL_TIM_Base_Start_IT>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	e000      	b.n	8003cc4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3730      	adds	r7, #48	; 0x30
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	431bde83 	.word	0x431bde83
 8003cd4:	200010b8 	.word	0x200010b8
 8003cd8:	40014800 	.word	0x40014800

08003cdc <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* Disable TIM17 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim17, TIM_IT_UPDATE);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_SuspendTick+0x20>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_SuspendTick+0x20>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	60da      	str	r2, [r3, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	200010b8 	.word	0x200010b8

08003d00 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM17 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* Enable TIM17 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_ResumeTick+0x20>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_ResumeTick+0x20>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	60da      	str	r2, [r3, #12]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	200010b8 	.word	0x200010b8

08003d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <NMI_Handler+0x4>

08003d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2e:	e7fe      	b.n	8003d2e <HardFault_Handler+0x4>

08003d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <MemManage_Handler+0x4>

08003d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d3a:	e7fe      	b.n	8003d3a <BusFault_Handler+0x4>

08003d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <UsageFault_Handler+0x4>

08003d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <DMA1_Channel3_IRQHandler+0x10>)
 8003d82:	f001 fac9 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000ce0 	.word	0x20000ce0

08003d90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <DMA1_Channel4_IRQHandler+0x10>)
 8003d96:	f001 fabf 	bl	8005318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000db4 	.word	0x20000db4

08003da4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003daa:	f003 ffc5 	bl	8007d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200010b8 	.word	0x200010b8

08003db8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <TIM2_IRQHandler+0x10>)
 8003dbe:	f003 ffbb 	bl	8007d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000e40 	.word	0x20000e40

08003dcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003dd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dd4:	f001 fe36 	bl	8005a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
	return 1;
 8003de0:	2301      	movs	r3, #1
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_kill>:

int _kill(int pid, int sig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003df6:	f00c f8b5 	bl	800ff64 <__errno>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2216      	movs	r2, #22
 8003dfe:	601a      	str	r2, [r3, #0]
	return -1;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_exit>:

void _exit (int status)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ffe7 	bl	8003dec <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e1e:	e7fe      	b.n	8003e1e <_exit+0x12>

08003e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <_sbrk+0x5c>)
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <_sbrk+0x60>)
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <_sbrk+0x64>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <_sbrk+0x64>)
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <_sbrk+0x68>)
 8003e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <_sbrk+0x64>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d207      	bcs.n	8003e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e50:	f00c f888 	bl	800ff64 <__errno>
 8003e54:	4603      	mov	r3, r0
 8003e56:	220c      	movs	r2, #12
 8003e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	e009      	b.n	8003e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <_sbrk+0x64>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <_sbrk+0x64>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <_sbrk+0x64>)
 8003e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20018000 	.word	0x20018000
 8003e80:	00000800 	.word	0x00000800
 8003e84:	20000f8c 	.word	0x20000f8c
 8003e88:	20001118 	.word	0x20001118

08003e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <SystemInit+0x20>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	4a05      	ldr	r2, [pc, #20]	; (8003eac <SystemInit+0x20>)
 8003e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003eb4:	f7ff ffea 	bl	8003e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eb8:	480c      	ldr	r0, [pc, #48]	; (8003eec <LoopForever+0x6>)
  ldr r1, =_edata
 8003eba:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <LoopForever+0xe>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ec0:	e002      	b.n	8003ec8 <LoopCopyDataInit>

08003ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ec6:	3304      	adds	r3, #4

08003ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ecc:	d3f9      	bcc.n	8003ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ece:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ed0:	4c0a      	ldr	r4, [pc, #40]	; (8003efc <LoopForever+0x16>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed4:	e001      	b.n	8003eda <LoopFillZerobss>

08003ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed8:	3204      	adds	r2, #4

08003eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003edc:	d3fb      	bcc.n	8003ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ede:	f00c f847 	bl	800ff70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ee2:	f7fe f85b 	bl	8001f9c <main>

08003ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ee6:	e7fe      	b.n	8003ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ee8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef0:	20000c8c 	.word	0x20000c8c
  ldr r2, =_sidata
 8003ef4:	080678d4 	.word	0x080678d4
  ldr r2, =_sbss
 8003ef8:	20000c8c 	.word	0x20000c8c
  ldr r4, =_ebss
 8003efc:	20001118 	.word	0x20001118

08003f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f00:	e7fe      	b.n	8003f00 <ADC1_2_IRQHandler>

08003f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f000 f902 	bl	8004116 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f12:	200f      	movs	r0, #15
 8003f14:	f7ff fe8c 	bl	8003c30 <HAL_InitTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	71fb      	strb	r3, [r7, #7]
 8003f22:	e001      	b.n	8003f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f24:	f7ff fbd2 	bl	80036cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f28:	79fb      	ldrb	r3, [r7, #7]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_IncTick+0x20>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_IncTick+0x24>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_IncTick+0x24>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000010 	.word	0x20000010
 8003f58:	20001104 	.word	0x20001104

08003f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_GetTick+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20001104 	.word	0x20001104

08003f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f7c:	f7ff ffee 	bl	8003f5c <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d005      	beq.n	8003f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_Delay+0x44>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f9a:	bf00      	nop
 8003f9c:	f7ff ffde 	bl	8003f5c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d8f7      	bhi.n	8003f9c <HAL_Delay+0x28>
  {
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000010 	.word	0x20000010

08003fbc <__NVIC_SetPriorityGrouping>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fee:	4a04      	ldr	r2, [pc, #16]	; (8004000 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	60d3      	str	r3, [r2, #12]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <__NVIC_GetPriorityGrouping>:
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <__NVIC_GetPriorityGrouping+0x18>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 0307 	and.w	r3, r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_EnableIRQ>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	db0b      	blt.n	800404a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 021f 	and.w	r2, r3, #31
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <__NVIC_EnableIRQ+0x38>)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2001      	movs	r0, #1
 8004042:	fa00 f202 	lsl.w	r2, r0, r2
 8004046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000e100 	.word	0xe000e100

0800405c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db0a      	blt.n	8004086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	490c      	ldr	r1, [pc, #48]	; (80040a8 <__NVIC_SetPriority+0x4c>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	440b      	add	r3, r1
 8004080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004084:	e00a      	b.n	800409c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <__NVIC_SetPriority+0x50>)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3b04      	subs	r3, #4
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	440b      	add	r3, r1
 800409a:	761a      	strb	r2, [r3, #24]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000e100 	.word	0xe000e100
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f1c3 0307 	rsb	r3, r3, #7
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf28      	it	cs
 80040ce:	2304      	movcs	r3, #4
 80040d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d902      	bls.n	80040e0 <NVIC_EncodePriority+0x30>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b03      	subs	r3, #3
 80040de:	e000      	b.n	80040e2 <NVIC_EncodePriority+0x32>
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f8:	f04f 31ff 	mov.w	r1, #4294967295
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	43d9      	mvns	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	4313      	orrs	r3, r2
         );
}
 800410a:	4618      	mov	r0, r3
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff4c 	bl	8003fbc <__NVIC_SetPriorityGrouping>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800413e:	f7ff ff61 	bl	8004004 <__NVIC_GetPriorityGrouping>
 8004142:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f7ff ffb1 	bl	80040b0 <NVIC_EncodePriority>
 800414e:	4602      	mov	r2, r0
 8004150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff80 	bl	800405c <__NVIC_SetPriority>
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff54 	bl	8004020 <__NVIC_EnableIRQ>
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e054      	b.n	800423c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7f5b      	ldrb	r3, [r3, #29]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fab6 	bl	8003714 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a22      	ldr	r2, [pc, #136]	; (8004244 <HAL_CRC_Init+0xc4>)
 80041bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0218 	bic.w	r2, r2, #24
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	e00c      	b.n	80041ea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6899      	ldr	r1, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	461a      	mov	r2, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f834 	bl	8004248 <HAL_CRCEx_Polynomial_Set>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e028      	b.n	800423c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	795b      	ldrb	r3, [r3, #5]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	611a      	str	r2, [r3, #16]
 80041fc:	e004      	b.n	8004208 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6912      	ldr	r2, [r2, #16]
 8004206:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	04c11db7 	.word	0x04c11db7

08004248 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004258:	231f      	movs	r3, #31
 800425a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800425c:	bf00      	nop
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	613a      	str	r2, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_CRCEx_Polynomial_Set+0x34>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_CRCEx_Polynomial_Set+0x16>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b18      	cmp	r3, #24
 8004280:	d846      	bhi.n	8004310 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	08004317 	.word	0x08004317
 800428c:	08004311 	.word	0x08004311
 8004290:	08004311 	.word	0x08004311
 8004294:	08004311 	.word	0x08004311
 8004298:	08004311 	.word	0x08004311
 800429c:	08004311 	.word	0x08004311
 80042a0:	08004311 	.word	0x08004311
 80042a4:	08004311 	.word	0x08004311
 80042a8:	08004305 	.word	0x08004305
 80042ac:	08004311 	.word	0x08004311
 80042b0:	08004311 	.word	0x08004311
 80042b4:	08004311 	.word	0x08004311
 80042b8:	08004311 	.word	0x08004311
 80042bc:	08004311 	.word	0x08004311
 80042c0:	08004311 	.word	0x08004311
 80042c4:	08004311 	.word	0x08004311
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	08004311 	.word	0x08004311
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
 80042d8:	08004311 	.word	0x08004311
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004311 	.word	0x08004311
 80042e4:	08004311 	.word	0x08004311
 80042e8:	080042ed 	.word	0x080042ed
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d913      	bls.n	800431a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80042f6:	e010      	b.n	800431a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b07      	cmp	r3, #7
 80042fc:	d90f      	bls.n	800431e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004302:	e00c      	b.n	800431e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d90b      	bls.n	8004322 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800430e:	e008      	b.n	8004322 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
      break;
 8004314:	e006      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004322:	bf00      	nop
  }
  if (status == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f023 0118 	bic.w	r1, r3, #24
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e014      	b.n	8004390 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	791b      	ldrb	r3, [r3, #4]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff f9ec 	bl	8003754 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	795b      	ldrb	r3, [r3, #5]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_DAC_Start_DMA+0x1e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0ab      	b.n	800450e <HAL_DAC_Start_DMA+0x176>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2202      	movs	r2, #2
 80043c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d12f      	bne.n	8004428 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_DAC_Start_DMA+0x180>)
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a51      	ldr	r2, [pc, #324]	; (800451c <HAL_DAC_Start_DMA+0x184>)
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4a50      	ldr	r2, [pc, #320]	; (8004520 <HAL_DAC_Start_DMA+0x188>)
 80043de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d013      	beq.n	800441e <HAL_DAC_Start_DMA+0x86>
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d845      	bhi.n	8004488 <HAL_DAC_Start_DMA+0xf0>
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_DAC_Start_DMA+0x72>
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d005      	beq.n	8004414 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004408:	e03e      	b.n	8004488 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	613b      	str	r3, [r7, #16]
        break;
 8004412:	e03c      	b.n	800448e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	613b      	str	r3, [r7, #16]
        break;
 800441c:	e037      	b.n	800448e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3310      	adds	r3, #16
 8004424:	613b      	str	r3, [r7, #16]
        break;
 8004426:	e032      	b.n	800448e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a3d      	ldr	r2, [pc, #244]	; (8004524 <HAL_DAC_Start_DMA+0x18c>)
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a3c      	ldr	r2, [pc, #240]	; (8004528 <HAL_DAC_Start_DMA+0x190>)
 8004436:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a3b      	ldr	r2, [pc, #236]	; (800452c <HAL_DAC_Start_DMA+0x194>)
 800443e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800444e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b08      	cmp	r3, #8
 8004454:	d013      	beq.n	800447e <HAL_DAC_Start_DMA+0xe6>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2b08      	cmp	r3, #8
 800445a:	d817      	bhi.n	800448c <HAL_DAC_Start_DMA+0xf4>
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_DAC_Start_DMA+0xd2>
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d005      	beq.n	8004474 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004468:	e010      	b.n	800448c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3314      	adds	r3, #20
 8004470:	613b      	str	r3, [r7, #16]
        break;
 8004472:	e00c      	b.n	800448e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3318      	adds	r3, #24
 800447a:	613b      	str	r3, [r7, #16]
        break;
 800447c:	e007      	b.n	800448e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	331c      	adds	r3, #28
 8004484:	613b      	str	r3, [r7, #16]
        break;
 8004486:	e002      	b.n	800448e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004488:	bf00      	nop
 800448a:	e000      	b.n	800448e <HAL_DAC_Start_DMA+0xf6>
        break;
 800448c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d111      	bne.n	80044b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6898      	ldr	r0, [r3, #8]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	f000 fe95 	bl	80051dc <HAL_DMA_Start_IT>
 80044b2:	4603      	mov	r3, r0
 80044b4:	75fb      	strb	r3, [r7, #23]
 80044b6:	e010      	b.n	80044da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80044c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68d8      	ldr	r0, [r3, #12]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	f000 fe83 	bl	80051dc <HAL_DMA_Start_IT>
 80044d6:	4603      	mov	r3, r0
 80044d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e005      	b.n	800450c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	08004803 	.word	0x08004803
 800451c:	08004825 	.word	0x08004825
 8004520:	08004841 	.word	0x08004841
 8004524:	080048ab 	.word	0x080048ab
 8004528:	080048cd 	.word	0x080048cd
 800452c:	080048e9 	.word	0x080048e9

08004530 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43da      	mvns	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	400a      	ands	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6819      	ldr	r1, [r3, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2201      	movs	r2, #1
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43da      	mvns	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	400a      	ands	r2, r1
 8004572:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fe8c 	bl	800529c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e00c      	b.n	80045b0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fe7e 	bl	800529c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80045ae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	795b      	ldrb	r3, [r3, #5]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_DAC_ConfigChannel+0x1c>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e107      	b.n	80047fa <HAL_DAC_ConfigChannel+0x22c>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2202      	movs	r2, #2
 80045f4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d174      	bne.n	80046e8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80045fe:	f7ff fcad 	bl	8003f5c <HAL_GetTick>
 8004602:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d134      	bne.n	8004674 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800460a:	e011      	b.n	8004630 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800460c:	f7ff fca6 	bl	8003f5c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d90a      	bls.n	8004630 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f043 0208 	orr.w	r2, r3, #8
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2203      	movs	r2, #3
 800462a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0e4      	b.n	80047fa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800463e:	2001      	movs	r0, #1
 8004640:	f7ff fc98 	bl	8003f74 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	6992      	ldr	r2, [r2, #24]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
 800464e:	e01e      	b.n	800468e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004650:	f7ff fc84 	bl	8003f5c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d90a      	bls.n	8004674 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f043 0208 	orr.w	r2, r3, #8
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2203      	movs	r2, #3
 800466e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0c2      	b.n	80047fa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	2b00      	cmp	r3, #0
 800467c:	dbe8      	blt.n	8004650 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800467e:	2001      	movs	r0, #1
 8004680:	f7ff fc78 	bl	8003f74 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	6992      	ldr	r2, [r2, #24]
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	ea02 0103 	and.w	r1, r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	409a      	lsls	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	21ff      	movs	r1, #255	; 0xff
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	ea02 0103 	and.w	r1, r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d11d      	bne.n	800472c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	221f      	movs	r2, #31
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2207      	movs	r2, #7
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	431a      	orrs	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43da      	mvns	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	400a      	ands	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	22c0      	movs	r2, #192	; 0xc0
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43da      	mvns	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	400a      	ands	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7fe fa35 	bl	8002c80 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	711a      	strb	r2, [r3, #4]
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7fe f9ea 	bl	8002c0c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004838:	bf00      	nop
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fead 	bl	80045ba <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	711a      	strb	r2, [r3, #4]
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff ffd8 	bl	800486e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	711a      	strb	r2, [r3, #4]
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff ffd1 	bl	8004882 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f043 0204 	orr.w	r2, r3, #4
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff ffc7 	bl	8004896 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	711a      	strb	r2, [r3, #4]
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0ac      	b.n	8004a84 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 faac 	bl	8004e8c <DFSDM_GetChannelFromInstance>
 8004934:	4603      	mov	r3, r0
 8004936:	4a55      	ldr	r2, [pc, #340]	; (8004a8c <HAL_DFSDM_ChannelInit+0x174>)
 8004938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e09f      	b.n	8004a84 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff f81f 	bl	8003988 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800494a:	4b51      	ldr	r3, [pc, #324]	; (8004a90 <HAL_DFSDM_ChannelInit+0x178>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	4a4f      	ldr	r2, [pc, #316]	; (8004a90 <HAL_DFSDM_ChannelInit+0x178>)
 8004952:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004954:	4b4e      	ldr	r3, [pc, #312]	; (8004a90 <HAL_DFSDM_ChannelInit+0x178>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d125      	bne.n	80049a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800495c:	4b4d      	ldr	r3, [pc, #308]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a4c      	ldr	r2, [pc, #304]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 8004962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004966:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004968:	4b4a      	ldr	r3, [pc, #296]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4948      	ldr	r1, [pc, #288]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a46      	ldr	r2, [pc, #280]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 800497c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004980:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	791b      	ldrb	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d108      	bne.n	800499c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800498a:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	3b01      	subs	r3, #1
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	493f      	ldr	r1, [pc, #252]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800499c:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <HAL_DFSDM_ChannelInit+0x17c>)
 80049a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80049b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6819      	ldr	r1, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80049c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80049cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 020f 	bic.w	r2, r2, #15
 80049e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6819      	ldr	r1, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004a0c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6899      	ldr	r1, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 0207 	and.w	r2, r2, #7
 8004a38:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a64:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fa0a 	bl	8004e8c <DFSDM_GetChannelFromInstance>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4904      	ldr	r1, [pc, #16]	; (8004a8c <HAL_DFSDM_ChannelInit+0x174>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000f94 	.word	0x20000f94
 8004a90:	20000f90 	.word	0x20000f90
 8004a94:	40016000 	.word	0x40016000

08004a98 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0ca      	b.n	8004c40 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a66      	ldr	r2, [pc, #408]	; (8004c48 <HAL_DFSDM_FilterInit+0x1b0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d109      	bne.n	8004ac8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d003      	beq.n	8004ac4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0bb      	b.n	8004c40 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fe fea5 	bl	8003830 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004af4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7a1b      	ldrb	r3, [r3, #8]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d108      	bne.n	8004b10 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e007      	b.n	8004b20 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	7a5b      	ldrb	r3, [r3, #9]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d108      	bne.n	8004b3a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e007      	b.n	8004b4a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8004b58:	f023 0308 	bic.w	r3, r3, #8
 8004b5c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d108      	bne.n	8004b78 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	7c1b      	ldrb	r3, [r3, #16]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d108      	bne.n	8004b92 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0210 	orr.w	r2, r2, #16
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	e007      	b.n	8004ba2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0210 	bic.w	r2, r2, #16
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7c5b      	ldrb	r3, [r3, #17]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d108      	bne.n	8004bbc <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0220 	orr.w	r2, r2, #32
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e007      	b.n	8004bcc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0220 	bic.w	r2, r2, #32
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8004bda:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004bde:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6959      	ldr	r1, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004bf2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004bfa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	7c1a      	ldrb	r2, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40016100 	.word	0x40016100

08004c4c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d02e      	beq.n	8004cc4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004c6c:	2bff      	cmp	r3, #255	; 0xff
 8004c6e:	d029      	beq.n	8004cc4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c82:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10d      	bne.n	8004ca6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e00a      	b.n	8004cbc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6819      	ldr	r1, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc2:	e001      	b.n	8004cc8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	75fb      	strb	r3, [r7, #23]
 8004cf8:	e064      	b.n	8004dc4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d08:	d002      	beq.n	8004d10 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
 8004d0e:	e059      	b.n	8004dc4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10e      	bne.n	8004d36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d002      	beq.n	8004d36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	75fb      	strb	r3, [r7, #23]
 8004d34:	e046      	b.n	8004dc4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d102      	bne.n	8004d56 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
 8004d54:	e036      	b.n	8004dc4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d004      	beq.n	8004d6a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d12a      	bne.n	8004dc0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	4a17      	ldr	r2, [pc, #92]	; (8004dd4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8004d78:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d101      	bne.n	8004d88 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8004d84:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8004d86:	e000      	b.n	8004d8a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8004d88:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	331c      	adds	r3, #28
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f000 fa1c 	bl	80051dc <HAL_DMA_Start_IT>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	22ff      	movs	r2, #255	; 0xff
 8004dae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004db6:	e005      	b.n	8004dc4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f8b3 	bl	8004f24 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004dbe:	e001      	b.n	8004dc4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	08004e4d 	.word	0x08004e4d
 8004dd4:	08004e69 	.word	0x08004e69
 8004dd8:	08004e31 	.word	0x08004e31

08004ddc <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d007      	beq.n	8004e02 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d002      	beq.n	8004e02 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
 8004e00:	e007      	b.n	8004e12 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fa48 	bl	800529c <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f8df 	bl	8004fd0 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7fd ff5a 	bl	8002cf8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7fd ff7c 	bl	8002d58 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2203      	movs	r2, #3
 8004e7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff ffcd 	bl	8004e1c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <DFSDM_GetChannelFromInstance+0x7c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d102      	bne.n	8004ea2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e02b      	b.n	8004efa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <DFSDM_GetChannelFromInstance+0x80>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d102      	bne.n	8004eb0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e024      	b.n	8004efa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <DFSDM_GetChannelFromInstance+0x84>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d102      	bne.n	8004ebe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e01d      	b.n	8004efa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <DFSDM_GetChannelFromInstance+0x88>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d102      	bne.n	8004ecc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004ec6:	2304      	movs	r3, #4
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e016      	b.n	8004efa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <DFSDM_GetChannelFromInstance+0x8c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d102      	bne.n	8004eda <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004ed4:	2305      	movs	r3, #5
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e00f      	b.n	8004efa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <DFSDM_GetChannelFromInstance+0x90>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d102      	bne.n	8004ee8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e008      	b.n	8004efa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <DFSDM_GetChannelFromInstance+0x94>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d102      	bne.n	8004ef6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004ef0:	2307      	movs	r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e001      	b.n	8004efa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004efa:	68fb      	ldr	r3, [r7, #12]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40016000 	.word	0x40016000
 8004f0c:	40016020 	.word	0x40016020
 8004f10:	40016040 	.word	0x40016040
 8004f14:	40016080 	.word	0x40016080
 8004f18:	400160a0 	.word	0x400160a0
 8004f1c:	400160c0 	.word	0x400160c0
 8004f20:	400160e0 	.word	0x400160e0

08004f24 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d108      	bne.n	8004f46 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e033      	b.n	8004fae <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004f64:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d116      	bne.n	8004fae <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0202 	orr.w	r2, r2, #2
 8004f96:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <DFSDM_RegConvStart+0x84>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	e000      	b.n	8004faa <DFSDM_RegConvStart+0x86>
 8004fa8:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <DFSDM_RegConvStart+0x98>
 8004fb8:	2202      	movs	r2, #2
 8004fba:	e000      	b.n	8004fbe <DFSDM_RegConvStart+0x9a>
 8004fbc:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005016:	2b04      	cmp	r3, #4
 8005018:	d116      	bne.n	8005048 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0202 	orr.w	r2, r2, #2
 8005030:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8005038:	2b01      	cmp	r3, #1
 800503a:	d102      	bne.n	8005042 <DFSDM_RegConvStop+0x72>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	e000      	b.n	8005044 <DFSDM_RegConvStop+0x74>
 8005042:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800504e:	2b02      	cmp	r3, #2
 8005050:	d101      	bne.n	8005056 <DFSDM_RegConvStop+0x86>
 8005052:	2201      	movs	r2, #1
 8005054:	e000      	b.n	8005058 <DFSDM_RegConvStop+0x88>
 8005056:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e098      	b.n	80051b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	4b4d      	ldr	r3, [pc, #308]	; (80051bc <HAL_DMA_Init+0x150>)
 8005086:	429a      	cmp	r2, r3
 8005088:	d80f      	bhi.n	80050aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	4b4b      	ldr	r3, [pc, #300]	; (80051c0 <HAL_DMA_Init+0x154>)
 8005092:	4413      	add	r3, r2
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_DMA_Init+0x158>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	009a      	lsls	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a48      	ldr	r2, [pc, #288]	; (80051c8 <HAL_DMA_Init+0x15c>)
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
 80050a8:	e00e      	b.n	80050c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b46      	ldr	r3, [pc, #280]	; (80051cc <HAL_DMA_Init+0x160>)
 80050b2:	4413      	add	r3, r2
 80050b4:	4a43      	ldr	r2, [pc, #268]	; (80051c4 <HAL_DMA_Init+0x158>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	009a      	lsls	r2, r3, #2
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a42      	ldr	r2, [pc, #264]	; (80051d0 <HAL_DMA_Init+0x164>)
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80050ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005122:	d039      	beq.n	8005198 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <HAL_DMA_Init+0x15c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d11a      	bne.n	8005164 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800512e:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <HAL_DMA_Init+0x168>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	f003 031c 	and.w	r3, r3, #28
 800513a:	210f      	movs	r1, #15
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	4924      	ldr	r1, [pc, #144]	; (80051d4 <HAL_DMA_Init+0x168>)
 8005144:	4013      	ands	r3, r2
 8005146:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005148:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <HAL_DMA_Init+0x168>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f003 031c 	and.w	r3, r3, #28
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	491d      	ldr	r1, [pc, #116]	; (80051d4 <HAL_DMA_Init+0x168>)
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
 8005162:	e019      	b.n	8005198 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005164:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <HAL_DMA_Init+0x16c>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	f003 031c 	and.w	r3, r3, #28
 8005170:	210f      	movs	r1, #15
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	4917      	ldr	r1, [pc, #92]	; (80051d8 <HAL_DMA_Init+0x16c>)
 800517a:	4013      	ands	r3, r2
 800517c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800517e:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_DMA_Init+0x16c>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6859      	ldr	r1, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f003 031c 	and.w	r3, r3, #28
 800518e:	fa01 f303 	lsl.w	r3, r1, r3
 8005192:	4911      	ldr	r1, [pc, #68]	; (80051d8 <HAL_DMA_Init+0x16c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40020407 	.word	0x40020407
 80051c0:	bffdfff8 	.word	0xbffdfff8
 80051c4:	cccccccd 	.word	0xcccccccd
 80051c8:	40020000 	.word	0x40020000
 80051cc:	bffdfbf8 	.word	0xbffdfbf8
 80051d0:	40020400 	.word	0x40020400
 80051d4:	400200a8 	.word	0x400200a8
 80051d8:	400204a8 	.word	0x400204a8

080051dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_DMA_Start_IT+0x20>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e04b      	b.n	8005294 <HAL_DMA_Start_IT+0xb8>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d13a      	bne.n	8005286 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f91e 	bl	8005476 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 020e 	orr.w	r2, r2, #14
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e00f      	b.n	8005274 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0204 	bic.w	r2, r2, #4
 8005262:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 020a 	orr.w	r2, r2, #10
 8005272:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e005      	b.n	8005292 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800528e:	2302      	movs	r3, #2
 8005290:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d008      	beq.n	80052c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e022      	b.n	800530c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 020e 	bic.w	r2, r2, #14
 80052d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f003 021c 	and.w	r2, r3, #28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2101      	movs	r1, #1
 80052f4:	fa01 f202 	lsl.w	r2, r1, r2
 80052f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	f003 031c 	and.w	r3, r3, #28
 8005338:	2204      	movs	r2, #4
 800533a:	409a      	lsls	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4013      	ands	r3, r2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d026      	beq.n	8005392 <HAL_DMA_IRQHandler+0x7a>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d021      	beq.n	8005392 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f003 021c 	and.w	r2, r3, #28
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	2104      	movs	r1, #4
 800537a:	fa01 f202 	lsl.w	r2, r1, r2
 800537e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d071      	beq.n	800546c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005390:	e06c      	b.n	800546c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f003 031c 	and.w	r3, r3, #28
 800539a:	2202      	movs	r2, #2
 800539c:	409a      	lsls	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d02e      	beq.n	8005404 <HAL_DMA_IRQHandler+0xec>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d029      	beq.n	8005404 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 020a 	bic.w	r2, r2, #10
 80053cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f003 021c 	and.w	r2, r3, #28
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	2102      	movs	r1, #2
 80053e4:	fa01 f202 	lsl.w	r2, r1, r2
 80053e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d038      	beq.n	800546c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005402:	e033      	b.n	800546c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	f003 031c 	and.w	r3, r3, #28
 800540c:	2208      	movs	r2, #8
 800540e:	409a      	lsls	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02a      	beq.n	800546e <HAL_DMA_IRQHandler+0x156>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d025      	beq.n	800546e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 020e 	bic.w	r2, r2, #14
 8005430:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f003 021c 	and.w	r2, r3, #28
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2101      	movs	r1, #1
 8005440:	fa01 f202 	lsl.w	r2, r1, r2
 8005444:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800546c:	bf00      	nop
 800546e:	bf00      	nop
}
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f003 021c 	and.w	r2, r3, #28
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f202 	lsl.w	r2, r1, r2
 8005496:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d108      	bne.n	80054ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054b8:	e007      	b.n	80054ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	60da      	str	r2, [r3, #12]
}
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054e6:	e17f      	b.n	80057e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	2101      	movs	r1, #1
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	4013      	ands	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8171 	beq.w	80057e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d005      	beq.n	8005518 <HAL_GPIO_Init+0x40>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d130      	bne.n	800557a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	2203      	movs	r2, #3
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554e:	2201      	movs	r2, #1
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 0201 	and.w	r2, r3, #1
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b03      	cmp	r3, #3
 8005584:	d118      	bne.n	80055b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800558c:	2201      	movs	r2, #1
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4013      	ands	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	08db      	lsrs	r3, r3, #3
 80055a2:	f003 0201 	and.w	r2, r3, #1
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d017      	beq.n	80055f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	2203      	movs	r2, #3
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4013      	ands	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d123      	bne.n	8005648 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	08da      	lsrs	r2, r3, #3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3208      	adds	r2, #8
 8005608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	220f      	movs	r2, #15
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43db      	mvns	r3, r3
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	08da      	lsrs	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3208      	adds	r2, #8
 8005642:	6939      	ldr	r1, [r7, #16]
 8005644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	2203      	movs	r2, #3
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 0203 	and.w	r2, r3, #3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80ac 	beq.w	80057e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568a:	4b5f      	ldr	r3, [pc, #380]	; (8005808 <HAL_GPIO_Init+0x330>)
 800568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568e:	4a5e      	ldr	r2, [pc, #376]	; (8005808 <HAL_GPIO_Init+0x330>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6613      	str	r3, [r2, #96]	; 0x60
 8005696:	4b5c      	ldr	r3, [pc, #368]	; (8005808 <HAL_GPIO_Init+0x330>)
 8005698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056a2:	4a5a      	ldr	r2, [pc, #360]	; (800580c <HAL_GPIO_Init+0x334>)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	089b      	lsrs	r3, r3, #2
 80056a8:	3302      	adds	r3, #2
 80056aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	220f      	movs	r2, #15
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056cc:	d025      	beq.n	800571a <HAL_GPIO_Init+0x242>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4f      	ldr	r2, [pc, #316]	; (8005810 <HAL_GPIO_Init+0x338>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01f      	beq.n	8005716 <HAL_GPIO_Init+0x23e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a4e      	ldr	r2, [pc, #312]	; (8005814 <HAL_GPIO_Init+0x33c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d019      	beq.n	8005712 <HAL_GPIO_Init+0x23a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a4d      	ldr	r2, [pc, #308]	; (8005818 <HAL_GPIO_Init+0x340>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_GPIO_Init+0x236>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a4c      	ldr	r2, [pc, #304]	; (800581c <HAL_GPIO_Init+0x344>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00d      	beq.n	800570a <HAL_GPIO_Init+0x232>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a4b      	ldr	r2, [pc, #300]	; (8005820 <HAL_GPIO_Init+0x348>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <HAL_GPIO_Init+0x22e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a4a      	ldr	r2, [pc, #296]	; (8005824 <HAL_GPIO_Init+0x34c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d101      	bne.n	8005702 <HAL_GPIO_Init+0x22a>
 80056fe:	2306      	movs	r3, #6
 8005700:	e00c      	b.n	800571c <HAL_GPIO_Init+0x244>
 8005702:	2307      	movs	r3, #7
 8005704:	e00a      	b.n	800571c <HAL_GPIO_Init+0x244>
 8005706:	2305      	movs	r3, #5
 8005708:	e008      	b.n	800571c <HAL_GPIO_Init+0x244>
 800570a:	2304      	movs	r3, #4
 800570c:	e006      	b.n	800571c <HAL_GPIO_Init+0x244>
 800570e:	2303      	movs	r3, #3
 8005710:	e004      	b.n	800571c <HAL_GPIO_Init+0x244>
 8005712:	2302      	movs	r3, #2
 8005714:	e002      	b.n	800571c <HAL_GPIO_Init+0x244>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <HAL_GPIO_Init+0x244>
 800571a:	2300      	movs	r3, #0
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	f002 0203 	and.w	r2, r2, #3
 8005722:	0092      	lsls	r2, r2, #2
 8005724:	4093      	lsls	r3, r2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800572c:	4937      	ldr	r1, [pc, #220]	; (800580c <HAL_GPIO_Init+0x334>)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	089b      	lsrs	r3, r3, #2
 8005732:	3302      	adds	r3, #2
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800573a:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <HAL_GPIO_Init+0x350>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	43db      	mvns	r3, r3
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800575e:	4a32      	ldr	r2, [pc, #200]	; (8005828 <HAL_GPIO_Init+0x350>)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005764:	4b30      	ldr	r3, [pc, #192]	; (8005828 <HAL_GPIO_Init+0x350>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	43db      	mvns	r3, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4013      	ands	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005788:	4a27      	ldr	r2, [pc, #156]	; (8005828 <HAL_GPIO_Init+0x350>)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <HAL_GPIO_Init+0x350>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	43db      	mvns	r3, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057b2:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_GPIO_Init+0x350>)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80057b8:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <HAL_GPIO_Init+0x350>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057dc:	4a12      	ldr	r2, [pc, #72]	; (8005828 <HAL_GPIO_Init+0x350>)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	3301      	adds	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f47f ae78 	bne.w	80054e8 <HAL_GPIO_Init+0x10>
  }
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	40010000 	.word	0x40010000
 8005810:	48000400 	.word	0x48000400
 8005814:	48000800 	.word	0x48000800
 8005818:	48000c00 	.word	0x48000c00
 800581c:	48001000 	.word	0x48001000
 8005820:	48001400 	.word	0x48001400
 8005824:	48001800 	.word	0x48001800
 8005828:	40010400 	.word	0x40010400

0800582c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800583a:	e0cd      	b.n	80059d8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800583c:	2201      	movs	r2, #1
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	4013      	ands	r3, r2
 8005848:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80c0 	beq.w	80059d2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005852:	4a68      	ldr	r2, [pc, #416]	; (80059f4 <HAL_GPIO_DeInit+0x1c8>)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	089b      	lsrs	r3, r3, #2
 8005858:	3302      	adds	r3, #2
 800585a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	220f      	movs	r2, #15
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4013      	ands	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800587a:	d025      	beq.n	80058c8 <HAL_GPIO_DeInit+0x9c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <HAL_GPIO_DeInit+0x1cc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d01f      	beq.n	80058c4 <HAL_GPIO_DeInit+0x98>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a5d      	ldr	r2, [pc, #372]	; (80059fc <HAL_GPIO_DeInit+0x1d0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d019      	beq.n	80058c0 <HAL_GPIO_DeInit+0x94>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a5c      	ldr	r2, [pc, #368]	; (8005a00 <HAL_GPIO_DeInit+0x1d4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <HAL_GPIO_DeInit+0x90>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a5b      	ldr	r2, [pc, #364]	; (8005a04 <HAL_GPIO_DeInit+0x1d8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00d      	beq.n	80058b8 <HAL_GPIO_DeInit+0x8c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a5a      	ldr	r2, [pc, #360]	; (8005a08 <HAL_GPIO_DeInit+0x1dc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <HAL_GPIO_DeInit+0x88>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a59      	ldr	r2, [pc, #356]	; (8005a0c <HAL_GPIO_DeInit+0x1e0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_GPIO_DeInit+0x84>
 80058ac:	2306      	movs	r3, #6
 80058ae:	e00c      	b.n	80058ca <HAL_GPIO_DeInit+0x9e>
 80058b0:	2307      	movs	r3, #7
 80058b2:	e00a      	b.n	80058ca <HAL_GPIO_DeInit+0x9e>
 80058b4:	2305      	movs	r3, #5
 80058b6:	e008      	b.n	80058ca <HAL_GPIO_DeInit+0x9e>
 80058b8:	2304      	movs	r3, #4
 80058ba:	e006      	b.n	80058ca <HAL_GPIO_DeInit+0x9e>
 80058bc:	2303      	movs	r3, #3
 80058be:	e004      	b.n	80058ca <HAL_GPIO_DeInit+0x9e>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e002      	b.n	80058ca <HAL_GPIO_DeInit+0x9e>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <HAL_GPIO_DeInit+0x9e>
 80058c8:	2300      	movs	r3, #0
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	f002 0203 	and.w	r2, r2, #3
 80058d0:	0092      	lsls	r2, r2, #2
 80058d2:	4093      	lsls	r3, r2
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d132      	bne.n	8005940 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80058da:	4b4d      	ldr	r3, [pc, #308]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	494b      	ldr	r1, [pc, #300]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80058e8:	4b49      	ldr	r3, [pc, #292]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	4947      	ldr	r1, [pc, #284]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80058f6:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	4944      	ldr	r1, [pc, #272]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 8005900:	4013      	ands	r3, r2
 8005902:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005904:	4b42      	ldr	r3, [pc, #264]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	43db      	mvns	r3, r3
 800590c:	4940      	ldr	r1, [pc, #256]	; (8005a10 <HAL_GPIO_DeInit+0x1e4>)
 800590e:	4013      	ands	r3, r2
 8005910:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	220f      	movs	r2, #15
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005922:	4a34      	ldr	r2, [pc, #208]	; (80059f4 <HAL_GPIO_DeInit+0x1c8>)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	089b      	lsrs	r3, r3, #2
 8005928:	3302      	adds	r3, #2
 800592a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	43da      	mvns	r2, r3
 8005932:	4830      	ldr	r0, [pc, #192]	; (80059f4 <HAL_GPIO_DeInit+0x1c8>)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	400a      	ands	r2, r1
 800593a:	3302      	adds	r3, #2
 800593c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	2103      	movs	r1, #3
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	08da      	lsrs	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3208      	adds	r2, #8
 800595c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	220f      	movs	r2, #15
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	08d2      	lsrs	r2, r2, #3
 8005974:	4019      	ands	r1, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3208      	adds	r2, #8
 800597a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	2103      	movs	r1, #3
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	43db      	mvns	r3, r3
 800598e:	401a      	ands	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	2101      	movs	r1, #1
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	fa01 f303 	lsl.w	r3, r1, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	401a      	ands	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	2103      	movs	r1, #3
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	43db      	mvns	r3, r3
 80059b8:	401a      	ands	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c2:	2101      	movs	r1, #1
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	401a      	ands	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	3301      	adds	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f47f af2b 	bne.w	800583c <HAL_GPIO_DeInit+0x10>
  }
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40010000 	.word	0x40010000
 80059f8:	48000400 	.word	0x48000400
 80059fc:	48000800 	.word	0x48000800
 8005a00:	48000c00 	.word	0x48000c00
 8005a04:	48001000 	.word	0x48001000
 8005a08:	48001400 	.word	0x48001400
 8005a0c:	48001800 	.word	0x48001800
 8005a10:	40010400 	.word	0x40010400

08005a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	807b      	strh	r3, [r7, #2]
 8005a20:	4613      	mov	r3, r2
 8005a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a24:	787b      	ldrb	r3, [r7, #1]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a30:	e002      	b.n	8005a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fd f89e 	bl	8002ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40010400 	.word	0x40010400

08005a74 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a92:	d10e      	bne.n	8005ab2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005a94:	f000 f896 	bl	8005bc4 <HAL_PWREx_DisableLowPowerRunMode>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8005a9e:	e016      	b.n	8005ace <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aac:	d001      	beq.n	8005ab2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005aae:	f000 f879 	bl	8005ba4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005ac4:	bf30      	wfi
 8005ac6:	e002      	b.n	8005ace <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005ac8:	bf40      	sev
    __WFE();
 8005aca:	bf20      	wfe
    __WFE();
 8005acc:	bf20      	wfe
  }

}
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40007000 	.word	0x40007000
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40007000 	.word	0x40007000

08005af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b06:	d130      	bne.n	8005b6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b14:	d038      	beq.n	8005b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b16:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b26:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2232      	movs	r2, #50	; 0x32
 8005b2c:	fb02 f303 	mul.w	r3, r2, r3
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	0c9b      	lsrs	r3, r3, #18
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b3c:	e002      	b.n	8005b44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b44:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b50:	d102      	bne.n	8005b58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f2      	bne.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d110      	bne.n	8005b88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e00f      	b.n	8005b8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b76:	d007      	beq.n	8005b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b78:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b80:	4a05      	ldr	r2, [pc, #20]	; (8005b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40007000 	.word	0x40007000
 8005b9c:	20000008 	.word	0x20000008
 8005ba0:	431bde83 	.word	0x431bde83

08005ba4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005ba8:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a04      	ldr	r2, [pc, #16]	; (8005bc0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40007000 	.word	0x40007000

08005bc4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005bca:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2232      	movs	r2, #50	; 0x32
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
 8005be0:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	0c9b      	lsrs	r3, r3, #18
 8005be8:	3301      	adds	r3, #1
 8005bea:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005bec:	e002      	b.n	8005bf4 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c00:	d102      	bne.n	8005c08 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f2      	bne.n	8005bee <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c14:	d101      	bne.n	8005c1a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e000      	b.n	8005c1c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40007000 	.word	0x40007000
 8005c2c:	20000008 	.word	0x20000008
 8005c30:	431bde83 	.word	0x431bde83

08005c34 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c3c:	f7fe f98e 	bl	8003f5c <HAL_GetTick>
 8005c40:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e063      	b.n	8005d14 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10b      	bne.n	8005c70 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fd ff01 	bl	8003a68 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005c66:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 faf7 	bl	800625e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	021a      	lsls	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	2120      	movs	r1, #32
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 faef 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005ca0:	7afb      	ldrb	r3, [r7, #11]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d131      	bne.n	8005d0a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cb0:	f023 0310 	bic.w	r3, r3, #16
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6852      	ldr	r2, [r2, #4]
 8005cb8:	0611      	lsls	r1, r2, #24
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68d2      	ldr	r2, [r2, #12]
 8005cbe:	4311      	orrs	r1, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <HAL_QSPI_Init+0xe8>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6912      	ldr	r2, [r2, #16]
 8005cd6:	0411      	lsls	r1, r2, #16
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6952      	ldr	r2, [r2, #20]
 8005cdc:	4311      	orrs	r1, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6992      	ldr	r2, [r2, #24]
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005d12:	7afb      	ldrb	r3, [r7, #11]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	ffe0f8fe 	.word	0xffe0f8fe

08005d20 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e016      	b.n	8005d60 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fd fed4 	bl	8003af0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d74:	f7fe f8f2 	bl	8003f5c <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_QSPI_Command+0x22>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e048      	b.n	8005e1c <HAL_QSPI_Command+0xb4>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d137      	bne.n	8005e0e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2200      	movs	r2, #0
 8005db4:	2120      	movs	r1, #32
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fa5f 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d125      	bne.n	8005e12 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fa8c 	bl	80062e8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d115      	bne.n	8005e04 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2201      	movs	r2, #1
 8005de0:	2102      	movs	r1, #2
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fa49 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10f      	bne.n	8005e12 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2202      	movs	r2, #2
 8005df8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005e02:	e006      	b.n	8005e12 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005e0c:	e001      	b.n	8005e12 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005e34:	f7fe f892 	bl	8003f5c <HAL_GetTick>
 8005e38:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3320      	adds	r3, #32
 8005e40:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_QSPI_Transmit+0x2e>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e07b      	b.n	8005f4a <HAL_QSPI_Transmit+0x126>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d16a      	bne.n	8005f3c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d05b      	beq.n	8005f2a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2212      	movs	r2, #18
 8005e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695a      	ldr	r2, [r3, #20]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005ea6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005ea8:	e01b      	b.n	8005ee2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	2104      	movs	r1, #4
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f9e0 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005ebe:	7ffb      	ldrb	r3, [r7, #31]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d113      	bne.n	8005eec <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	1e5a      	subs	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1df      	bne.n	8005eaa <HAL_QSPI_Transmit+0x86>
 8005eea:	e000      	b.n	8005eee <HAL_QSPI_Transmit+0xca>
          break;
 8005eec:	bf00      	nop
      }

      if (status == HAL_OK)
 8005eee:	7ffb      	ldrb	r3, [r7, #31]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d115      	bne.n	8005f20 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2201      	movs	r2, #1
 8005efc:	2102      	movs	r1, #2
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f9bb 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005f08:	7ffb      	ldrb	r3, [r7, #31]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2202      	movs	r2, #2
 8005f14:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f934 	bl	8006184 <HAL_QSPI_Abort>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005f28:	e00a      	b.n	8005f40 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	f043 0208 	orr.w	r2, r3, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e001      	b.n	8005f40 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08a      	sub	sp, #40	; 0x28
 8005f56:	af02      	add	r7, sp, #8
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005f62:	f7fd fffb 	bl	8003f5c <HAL_GetTick>
 8005f66:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3320      	adds	r3, #32
 8005f76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_QSPI_Receive+0x36>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e082      	b.n	800608e <HAL_QSPI_Receive+0x13c>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d171      	bne.n	8006080 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d062      	beq.n	800606e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2222      	movs	r2, #34	; 0x22
 8005fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005fe0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005fea:	e01c      	b.n	8006026 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2106      	movs	r1, #6
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f93f 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006000:	7ffb      	ldrb	r3, [r7, #31]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d114      	bne.n	8006030 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	7812      	ldrb	r2, [r2, #0]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	1e5a      	subs	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1de      	bne.n	8005fec <HAL_QSPI_Receive+0x9a>
 800602e:	e000      	b.n	8006032 <HAL_QSPI_Receive+0xe0>
          break;
 8006030:	bf00      	nop
      }

      if (status == HAL_OK)
 8006032:	7ffb      	ldrb	r3, [r7, #31]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d115      	bne.n	8006064 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2201      	movs	r2, #1
 8006040:	2102      	movs	r1, #2
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f919 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d108      	bne.n	8006064 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2202      	movs	r2, #2
 8006058:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f892 	bl	8006184 <HAL_QSPI_Abort>
 8006060:	4603      	mov	r3, r0
 8006062:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800606c:	e00a      	b.n	8006084 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	f043 0208 	orr.w	r2, r3, #8
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e001      	b.n	8006084 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006080:	2302      	movs	r3, #2
 8006082:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800608c:	7ffb      	ldrb	r3, [r7, #31]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b088      	sub	sp, #32
 800609a:	af02      	add	r7, sp, #8
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80060a4:	f7fd ff5a 	bl	8003f5c <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_QSPI_AutoPolling+0x24>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e060      	b.n	800617c <HAL_QSPI_AutoPolling+0xe6>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d14f      	bne.n	800616e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2242      	movs	r2, #66	; 0x42
 80060d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2200      	movs	r2, #0
 80060e4:	2120      	movs	r1, #32
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f8c7 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d13d      	bne.n	8006172 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6852      	ldr	r2, [r2, #4]
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6892      	ldr	r2, [r2, #8]
 8006112:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	431a      	orrs	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800612c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006136:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f8d3 	bl	80062e8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2201      	movs	r2, #1
 800614a:	2108      	movs	r1, #8
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f894 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2208      	movs	r2, #8
 8006162:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800616c:	e001      	b.n	8006172 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800616e:	2302      	movs	r3, #2
 8006170:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af02      	add	r7, sp, #8
 800618a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006190:	f7fd fee4 	bl	8003f5c <HAL_GetTick>
 8006194:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800619c:	b2db      	uxtb	r3, r3
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d056      	beq.n	8006254 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0204 	bic.w	r2, r2, #4
 80061ca:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff f863 	bl	800529c <HAL_DMA_Abort>
 80061d6:	4603      	mov	r3, r0
 80061d8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e4:	f043 0204 	orr.w	r2, r3, #4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0202 	orr.w	r2, r2, #2
 80061fa:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2201      	movs	r2, #1
 8006206:	2102      	movs	r1, #2
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f836 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10e      	bne.n	8006236 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2202      	movs	r2, #2
 800621e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2200      	movs	r2, #0
 800622a:	2120      	movs	r1, #32
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f824 	bl	800627a <QSPI_WaitFlagStateUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800624a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800628a:	e01a      	b.n	80062c2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d016      	beq.n	80062c2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006294:	f7fd fe62 	bl	8003f5c <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <QSPI_WaitFlagStateUntilTimeout+0x30>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2204      	movs	r2, #4
 80062ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e00e      	b.n	80062e0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d1d6      	bne.n	800628c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <QSPI_Config+0x28>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006302:	d005      	beq.n	8006310 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3a01      	subs	r2, #1
 800630e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80b9 	beq.w	800648c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d05f      	beq.n	80063e2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	6892      	ldr	r2, [r2, #8]
 800632a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d031      	beq.n	8006398 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	431a      	orrs	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	431a      	orrs	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	431a      	orrs	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	049b      	lsls	r3, r3, #18
 8006350:	431a      	orrs	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	431a      	orrs	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	431a      	orrs	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	431a      	orrs	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	431a      	orrs	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	431a      	orrs	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	ea42 0103 	orr.w	r1, r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	430a      	orrs	r2, r1
 8006380:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006388:	f000 812e 	beq.w	80065e8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	6852      	ldr	r2, [r2, #4]
 8006394:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006396:	e127      	b.n	80065e8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	049b      	lsls	r3, r3, #18
 80063b4:	431a      	orrs	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	ea42 0103 	orr.w	r1, r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	430a      	orrs	r2, r1
 80063de:	615a      	str	r2, [r3, #20]
}
 80063e0:	e102      	b.n	80065e8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d02e      	beq.n	8006448 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	431a      	orrs	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f8:	431a      	orrs	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	431a      	orrs	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	049b      	lsls	r3, r3, #18
 8006406:	431a      	orrs	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	431a      	orrs	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	431a      	orrs	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	431a      	orrs	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	ea42 0103 	orr.w	r1, r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	430a      	orrs	r2, r1
 8006430:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006438:	f000 80d6 	beq.w	80065e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	6852      	ldr	r2, [r2, #4]
 8006444:	619a      	str	r2, [r3, #24]
}
 8006446:	e0cf      	b.n	80065e8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	431a      	orrs	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006456:	431a      	orrs	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	431a      	orrs	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	049b      	lsls	r3, r3, #18
 8006464:	431a      	orrs	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	431a      	orrs	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	431a      	orrs	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	431a      	orrs	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	ea42 0103 	orr.w	r1, r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	430a      	orrs	r2, r1
 8006488:	615a      	str	r2, [r3, #20]
}
 800648a:	e0ad      	b.n	80065e8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d058      	beq.n	8006546 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	6892      	ldr	r2, [r2, #8]
 800649c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d02d      	beq.n	8006502 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	431a      	orrs	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	431a      	orrs	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	049b      	lsls	r3, r3, #18
 80064c2:	431a      	orrs	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	431a      	orrs	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	431a      	orrs	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	ea42 0103 	orr.w	r1, r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064f4:	d078      	beq.n	80065e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	6852      	ldr	r2, [r2, #4]
 80064fe:	619a      	str	r2, [r3, #24]
}
 8006500:	e072      	b.n	80065e8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	431a      	orrs	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006510:	431a      	orrs	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	431a      	orrs	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	049b      	lsls	r3, r3, #18
 800651e:	431a      	orrs	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	431a      	orrs	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	431a      	orrs	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	431a      	orrs	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	ea42 0103 	orr.w	r1, r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	430a      	orrs	r2, r1
 8006542:	615a      	str	r2, [r3, #20]
}
 8006544:	e050      	b.n	80065e8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02a      	beq.n	80065a4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	431a      	orrs	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655c:	431a      	orrs	r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	431a      	orrs	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	049b      	lsls	r3, r3, #18
 800656a:	431a      	orrs	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	431a      	orrs	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	431a      	orrs	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	431a      	orrs	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	ea42 0103 	orr.w	r1, r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	430a      	orrs	r2, r1
 800658e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006596:	d027      	beq.n	80065e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	6852      	ldr	r2, [r2, #4]
 80065a0:	619a      	str	r2, [r3, #24]
}
 80065a2:	e021      	b.n	80065e8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01d      	beq.n	80065e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	431a      	orrs	r2, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	049b      	lsls	r3, r3, #18
 80065c8:	431a      	orrs	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	ea42 0103 	orr.w	r1, r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	615a      	str	r2, [r3, #20]
}
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e3d4      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006606:	4ba1      	ldr	r3, [pc, #644]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006610:	4b9e      	ldr	r3, [pc, #632]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80e4 	beq.w	80067f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_RCC_OscConfig+0x4a>
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b0c      	cmp	r3, #12
 8006632:	f040 808b 	bne.w	800674c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b01      	cmp	r3, #1
 800663a:	f040 8087 	bne.w	800674c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800663e:	4b93      	ldr	r3, [pc, #588]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_RCC_OscConfig+0x62>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e3ac      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	4b8c      	ldr	r3, [pc, #560]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <HAL_RCC_OscConfig+0x7c>
 8006666:	4b89      	ldr	r3, [pc, #548]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800666e:	e005      	b.n	800667c <HAL_RCC_OscConfig+0x88>
 8006670:	4b86      	ldr	r3, [pc, #536]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667c:	4293      	cmp	r3, r2
 800667e:	d223      	bcs.n	80066c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fd73 	bl	8007170 <RCC_SetFlashLatencyFromMSIRange>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e38d      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006694:	4b7d      	ldr	r3, [pc, #500]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a7c      	ldr	r2, [pc, #496]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800669a:	f043 0308 	orr.w	r3, r3, #8
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4b7a      	ldr	r3, [pc, #488]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	4977      	ldr	r1, [pc, #476]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066b2:	4b76      	ldr	r3, [pc, #472]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	4972      	ldr	r1, [pc, #456]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]
 80066c6:	e025      	b.n	8006714 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066c8:	4b70      	ldr	r3, [pc, #448]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a6f      	ldr	r2, [pc, #444]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066ce:	f043 0308 	orr.w	r3, r3, #8
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4b6d      	ldr	r3, [pc, #436]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	496a      	ldr	r1, [pc, #424]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066e6:	4b69      	ldr	r3, [pc, #420]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	4965      	ldr	r1, [pc, #404]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fd33 	bl	8007170 <RCC_SetFlashLatencyFromMSIRange>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e34d      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006714:	f000 fc36 	bl	8006f84 <HAL_RCC_GetSysClockFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b5c      	ldr	r3, [pc, #368]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	495a      	ldr	r1, [pc, #360]	; (8006890 <HAL_RCC_OscConfig+0x29c>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	f003 031f 	and.w	r3, r3, #31
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	4a58      	ldr	r2, [pc, #352]	; (8006894 <HAL_RCC_OscConfig+0x2a0>)
 8006732:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006734:	4b58      	ldr	r3, [pc, #352]	; (8006898 <HAL_RCC_OscConfig+0x2a4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fd fa79 	bl	8003c30 <HAL_InitTick>
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d052      	beq.n	80067ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	e331      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d032      	beq.n	80067ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006754:	4b4d      	ldr	r3, [pc, #308]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a4c      	ldr	r2, [pc, #304]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006760:	f7fd fbfc 	bl	8003f5c <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006768:	f7fd fbf8 	bl	8003f5c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e31a      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800677a:	4b44      	ldr	r3, [pc, #272]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006786:	4b41      	ldr	r3, [pc, #260]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a40      	ldr	r2, [pc, #256]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800678c:	f043 0308 	orr.w	r3, r3, #8
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4b3e      	ldr	r3, [pc, #248]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	493b      	ldr	r1, [pc, #236]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067a4:	4b39      	ldr	r3, [pc, #228]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	4936      	ldr	r1, [pc, #216]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	604b      	str	r3, [r1, #4]
 80067b8:	e01a      	b.n	80067f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067ba:	4b34      	ldr	r3, [pc, #208]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a33      	ldr	r2, [pc, #204]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067c6:	f7fd fbc9 	bl	8003f5c <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067ce:	f7fd fbc5 	bl	8003f5c <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e2e7      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067e0:	4b2a      	ldr	r3, [pc, #168]	; (800688c <HAL_RCC_OscConfig+0x298>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f0      	bne.n	80067ce <HAL_RCC_OscConfig+0x1da>
 80067ec:	e000      	b.n	80067f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d074      	beq.n	80068e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d005      	beq.n	800680e <HAL_RCC_OscConfig+0x21a>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d10e      	bne.n	8006826 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b03      	cmp	r3, #3
 800680c:	d10b      	bne.n	8006826 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800680e:	4b1f      	ldr	r3, [pc, #124]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d064      	beq.n	80068e4 <HAL_RCC_OscConfig+0x2f0>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d160      	bne.n	80068e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e2c4      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682e:	d106      	bne.n	800683e <HAL_RCC_OscConfig+0x24a>
 8006830:	4b16      	ldr	r3, [pc, #88]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a15      	ldr	r2, [pc, #84]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	e01d      	b.n	800687a <HAL_RCC_OscConfig+0x286>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006846:	d10c      	bne.n	8006862 <HAL_RCC_OscConfig+0x26e>
 8006848:	4b10      	ldr	r3, [pc, #64]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0f      	ldr	r2, [pc, #60]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800684e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a0c      	ldr	r2, [pc, #48]	; (800688c <HAL_RCC_OscConfig+0x298>)
 800685a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	e00b      	b.n	800687a <HAL_RCC_OscConfig+0x286>
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a09      	ldr	r2, [pc, #36]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a06      	ldr	r2, [pc, #24]	; (800688c <HAL_RCC_OscConfig+0x298>)
 8006874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006878:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01c      	beq.n	80068bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006882:	f7fd fb6b 	bl	8003f5c <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006888:	e011      	b.n	80068ae <HAL_RCC_OscConfig+0x2ba>
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000
 8006890:	08010a30 	.word	0x08010a30
 8006894:	20000008 	.word	0x20000008
 8006898:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800689c:	f7fd fb5e 	bl	8003f5c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	; 0x64
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e280      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068ae:	4baf      	ldr	r3, [pc, #700]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f0      	beq.n	800689c <HAL_RCC_OscConfig+0x2a8>
 80068ba:	e014      	b.n	80068e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fd fb4e 	bl	8003f5c <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c4:	f7fd fb4a 	bl	8003f5c <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	; 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e26c      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068d6:	4ba5      	ldr	r3, [pc, #660]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x2d0>
 80068e2:	e000      	b.n	80068e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d060      	beq.n	80069b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d005      	beq.n	8006904 <HAL_RCC_OscConfig+0x310>
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b0c      	cmp	r3, #12
 80068fc:	d119      	bne.n	8006932 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d116      	bne.n	8006932 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006904:	4b99      	ldr	r3, [pc, #612]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <HAL_RCC_OscConfig+0x328>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e249      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691c:	4b93      	ldr	r3, [pc, #588]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	4990      	ldr	r1, [pc, #576]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 800692c:	4313      	orrs	r3, r2
 800692e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006930:	e040      	b.n	80069b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d023      	beq.n	8006982 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800693a:	4b8c      	ldr	r3, [pc, #560]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a8b      	ldr	r2, [pc, #556]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006946:	f7fd fb09 	bl	8003f5c <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800694e:	f7fd fb05 	bl	8003f5c <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e227      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006960:	4b82      	ldr	r3, [pc, #520]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f0      	beq.n	800694e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696c:	4b7f      	ldr	r3, [pc, #508]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	497c      	ldr	r1, [pc, #496]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 800697c:	4313      	orrs	r3, r2
 800697e:	604b      	str	r3, [r1, #4]
 8006980:	e018      	b.n	80069b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006982:	4b7a      	ldr	r3, [pc, #488]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a79      	ldr	r2, [pc, #484]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800698c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698e:	f7fd fae5 	bl	8003f5c <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006996:	f7fd fae1 	bl	8003f5c <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e203      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069a8:	4b70      	ldr	r3, [pc, #448]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f0      	bne.n	8006996 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d03c      	beq.n	8006a3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01c      	beq.n	8006a02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069c8:	4b68      	ldr	r3, [pc, #416]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 80069ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ce:	4a67      	ldr	r2, [pc, #412]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d8:	f7fd fac0 	bl	8003f5c <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fd fabc 	bl	8003f5c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e1de      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f2:	4b5e      	ldr	r3, [pc, #376]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 80069f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0ef      	beq.n	80069e0 <HAL_RCC_OscConfig+0x3ec>
 8006a00:	e01b      	b.n	8006a3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a02:	4b5a      	ldr	r3, [pc, #360]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a08:	4a58      	ldr	r2, [pc, #352]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a12:	f7fd faa3 	bl	8003f5c <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a18:	e008      	b.n	8006a2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1a:	f7fd fa9f 	bl	8003f5c <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e1c1      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a2c:	4b4f      	ldr	r3, [pc, #316]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1ef      	bne.n	8006a1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80a6 	beq.w	8006b94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a4c:	4b47      	ldr	r3, [pc, #284]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10d      	bne.n	8006a74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a58:	4b44      	ldr	r3, [pc, #272]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5c:	4a43      	ldr	r2, [pc, #268]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a62:	6593      	str	r3, [r2, #88]	; 0x58
 8006a64:	4b41      	ldr	r3, [pc, #260]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a70:	2301      	movs	r3, #1
 8006a72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a74:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <HAL_RCC_OscConfig+0x57c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d118      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a80:	4b3b      	ldr	r3, [pc, #236]	; (8006b70 <HAL_RCC_OscConfig+0x57c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a3a      	ldr	r2, [pc, #232]	; (8006b70 <HAL_RCC_OscConfig+0x57c>)
 8006a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8c:	f7fd fa66 	bl	8003f5c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a94:	f7fd fa62 	bl	8003f5c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e184      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aa6:	4b32      	ldr	r3, [pc, #200]	; (8006b70 <HAL_RCC_OscConfig+0x57c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d108      	bne.n	8006acc <HAL_RCC_OscConfig+0x4d8>
 8006aba:	4b2c      	ldr	r3, [pc, #176]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac0:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006aca:	e024      	b.n	8006b16 <HAL_RCC_OscConfig+0x522>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b05      	cmp	r3, #5
 8006ad2:	d110      	bne.n	8006af6 <HAL_RCC_OscConfig+0x502>
 8006ad4:	4b25      	ldr	r3, [pc, #148]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	4a24      	ldr	r2, [pc, #144]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006adc:	f043 0304 	orr.w	r3, r3, #4
 8006ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae4:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aea:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006af4:	e00f      	b.n	8006b16 <HAL_RCC_OscConfig+0x522>
 8006af6:	4b1d      	ldr	r3, [pc, #116]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afc:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b06:	4b19      	ldr	r3, [pc, #100]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006b0e:	f023 0304 	bic.w	r3, r3, #4
 8006b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1e:	f7fd fa1d 	bl	8003f5c <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fd fa19 	bl	8003f5c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e139      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <HAL_RCC_OscConfig+0x578>)
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0ed      	beq.n	8006b26 <HAL_RCC_OscConfig+0x532>
 8006b4a:	e01a      	b.n	8006b82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4c:	f7fd fa06 	bl	8003f5c <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b52:	e00f      	b.n	8006b74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b54:	f7fd fa02 	bl	8003f5c <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d906      	bls.n	8006b74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e122      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
 8006b6a:	bf00      	nop
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b74:	4b90      	ldr	r3, [pc, #576]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e8      	bne.n	8006b54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b82:	7ffb      	ldrb	r3, [r7, #31]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d105      	bne.n	8006b94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b88:	4b8b      	ldr	r3, [pc, #556]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8c:	4a8a      	ldr	r2, [pc, #552]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8108 	beq.w	8006dae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	f040 80d0 	bne.w	8006d48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ba8:	4b83      	ldr	r3, [pc, #524]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f003 0203 	and.w	r2, r3, #3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d130      	bne.n	8006c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d127      	bne.n	8006c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d11f      	bne.n	8006c1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006be8:	2a07      	cmp	r2, #7
 8006bea:	bf14      	ite	ne
 8006bec:	2201      	movne	r2, #1
 8006bee:	2200      	moveq	r2, #0
 8006bf0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d113      	bne.n	8006c1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c00:	085b      	lsrs	r3, r3, #1
 8006c02:	3b01      	subs	r3, #1
 8006c04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d109      	bne.n	8006c1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	3b01      	subs	r3, #1
 8006c18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d06e      	beq.n	8006cfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	2b0c      	cmp	r3, #12
 8006c22:	d069      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c24:	4b64      	ldr	r3, [pc, #400]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d105      	bne.n	8006c3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006c30:	4b61      	ldr	r3, [pc, #388]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e0b7      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c40:	4b5d      	ldr	r3, [pc, #372]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a5c      	ldr	r2, [pc, #368]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c4c:	f7fd f986 	bl	8003f5c <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fd f982 	bl	8003f5c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e0a4      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c66:	4b54      	ldr	r3, [pc, #336]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c72:	4b51      	ldr	r3, [pc, #324]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	4b51      	ldr	r3, [pc, #324]	; (8006dbc <HAL_RCC_OscConfig+0x7c8>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c82:	3a01      	subs	r2, #1
 8006c84:	0112      	lsls	r2, r2, #4
 8006c86:	4311      	orrs	r1, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c8c:	0212      	lsls	r2, r2, #8
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c94:	0852      	lsrs	r2, r2, #1
 8006c96:	3a01      	subs	r2, #1
 8006c98:	0552      	lsls	r2, r2, #21
 8006c9a:	4311      	orrs	r1, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ca0:	0852      	lsrs	r2, r2, #1
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	0652      	lsls	r2, r2, #25
 8006ca6:	4311      	orrs	r1, r2
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cac:	0912      	lsrs	r2, r2, #4
 8006cae:	0452      	lsls	r2, r2, #17
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	4941      	ldr	r1, [pc, #260]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006cb8:	4b3f      	ldr	r3, [pc, #252]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3e      	ldr	r2, [pc, #248]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cc4:	4b3c      	ldr	r3, [pc, #240]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a3b      	ldr	r2, [pc, #236]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cd0:	f7fd f944 	bl	8003f5c <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd8:	f7fd f940 	bl	8003f5c <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e062      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cea:	4b33      	ldr	r3, [pc, #204]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f0      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cf6:	e05a      	b.n	8006dae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e059      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cfc:	4b2e      	ldr	r3, [pc, #184]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d152      	bne.n	8006dae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d08:	4b2b      	ldr	r3, [pc, #172]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d14:	4b28      	ldr	r3, [pc, #160]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4a27      	ldr	r2, [pc, #156]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d20:	f7fd f91c 	bl	8003f5c <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d28:	f7fd f918 	bl	8003f5c <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e03a      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d3a:	4b1f      	ldr	r3, [pc, #124]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x734>
 8006d46:	e032      	b.n	8006dae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	d02d      	beq.n	8006daa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006d5a:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d6c:	f023 0303 	bic.w	r3, r3, #3
 8006d70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d72:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d82:	f7fd f8eb 	bl	8003f5c <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8a:	f7fd f8e7 	bl	8003f5c <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e009      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <HAL_RCC_OscConfig+0x7c4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x796>
 8006da8:	e001      	b.n	8006dae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	f99d808c 	.word	0xf99d808c

08006dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0c8      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dd4:	4b66      	ldr	r3, [pc, #408]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d910      	bls.n	8006e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de2:	4b63      	ldr	r3, [pc, #396]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 0207 	bic.w	r2, r3, #7
 8006dea:	4961      	ldr	r1, [pc, #388]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df2:	4b5f      	ldr	r3, [pc, #380]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d001      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0b0      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d04c      	beq.n	8006eaa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d107      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e18:	4b56      	ldr	r3, [pc, #344]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d121      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e09e      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d107      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e30:	4b50      	ldr	r3, [pc, #320]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d115      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e092      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d107      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e48:	4b4a      	ldr	r3, [pc, #296]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e086      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e58:	4b46      	ldr	r3, [pc, #280]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e07e      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e68:	4b42      	ldr	r3, [pc, #264]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f023 0203 	bic.w	r2, r3, #3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	493f      	ldr	r1, [pc, #252]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7a:	f7fd f86f 	bl	8003f5c <HAL_GetTick>
 8006e7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e80:	e00a      	b.n	8006e98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e82:	f7fd f86b 	bl	8003f5c <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e066      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e98:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 020c 	and.w	r2, r3, #12
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d1eb      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	492c      	ldr	r1, [pc, #176]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec8:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d210      	bcs.n	8006ef8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed6:	4b26      	ldr	r3, [pc, #152]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 0207 	bic.w	r2, r3, #7
 8006ede:	4924      	ldr	r1, [pc, #144]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <HAL_RCC_ClockConfig+0x1b0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e036      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f04:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	4918      	ldr	r1, [pc, #96]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4910      	ldr	r1, [pc, #64]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f36:	f000 f825 	bl	8006f84 <HAL_RCC_GetSysClockFreq>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <HAL_RCC_ClockConfig+0x1b4>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	091b      	lsrs	r3, r3, #4
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	490c      	ldr	r1, [pc, #48]	; (8006f78 <HAL_RCC_ClockConfig+0x1b8>)
 8006f48:	5ccb      	ldrb	r3, [r1, r3]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f52:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <HAL_RCC_ClockConfig+0x1c0>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fc fe68 	bl	8003c30 <HAL_InitTick>
 8006f60:	4603      	mov	r3, r0
 8006f62:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40022000 	.word	0x40022000
 8006f74:	40021000 	.word	0x40021000
 8006f78:	08010a30 	.word	0x08010a30
 8006f7c:	20000008 	.word	0x20000008
 8006f80:	2000000c 	.word	0x2000000c

08006f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b089      	sub	sp, #36	; 0x24
 8006f88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f92:	4b3e      	ldr	r3, [pc, #248]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
 8006f9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f9c:	4b3b      	ldr	r3, [pc, #236]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b0c      	cmp	r3, #12
 8006fb0:	d121      	bne.n	8006ff6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d11e      	bne.n	8006ff6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006fb8:	4b34      	ldr	r3, [pc, #208]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d107      	bne.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006fc4:	4b31      	ldr	r3, [pc, #196]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	e005      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006fd4:	4b2d      	ldr	r3, [pc, #180]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	091b      	lsrs	r3, r3, #4
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006fe0:	4a2b      	ldr	r2, [pc, #172]	; (8007090 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10d      	bne.n	800700c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ff4:	e00a      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d102      	bne.n	8007002 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ffc:	4b25      	ldr	r3, [pc, #148]	; (8007094 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	e004      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d101      	bne.n	800700c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007008:	4b23      	ldr	r3, [pc, #140]	; (8007098 <HAL_RCC_GetSysClockFreq+0x114>)
 800700a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b0c      	cmp	r3, #12
 8007010:	d134      	bne.n	800707c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007012:	4b1e      	ldr	r3, [pc, #120]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d003      	beq.n	800702a <HAL_RCC_GetSysClockFreq+0xa6>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d003      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0xac>
 8007028:	e005      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800702a:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <HAL_RCC_GetSysClockFreq+0x110>)
 800702c:	617b      	str	r3, [r7, #20]
      break;
 800702e:	e005      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007030:	4b19      	ldr	r3, [pc, #100]	; (8007098 <HAL_RCC_GetSysClockFreq+0x114>)
 8007032:	617b      	str	r3, [r7, #20]
      break;
 8007034:	e002      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	617b      	str	r3, [r7, #20]
      break;
 800703a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800703c:	4b13      	ldr	r3, [pc, #76]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	3301      	adds	r3, #1
 8007048:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800704a:	4b10      	ldr	r3, [pc, #64]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	fb02 f203 	mul.w	r2, r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007062:	4b0a      	ldr	r3, [pc, #40]	; (800708c <HAL_RCC_GetSysClockFreq+0x108>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	0e5b      	lsrs	r3, r3, #25
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	3301      	adds	r3, #1
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	fbb2 f3f3 	udiv	r3, r2, r3
 800707a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800707c:	69bb      	ldr	r3, [r7, #24]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3724      	adds	r7, #36	; 0x24
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40021000 	.word	0x40021000
 8007090:	08010a48 	.word	0x08010a48
 8007094:	00f42400 	.word	0x00f42400
 8007098:	007a1200 	.word	0x007a1200

0800709c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a0:	4b03      	ldr	r3, [pc, #12]	; (80070b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000008 	.word	0x20000008

080070b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070b8:	f7ff fff0 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	4904      	ldr	r1, [pc, #16]	; (80070dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070ca:	5ccb      	ldrb	r3, [r1, r3]
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40021000 	.word	0x40021000
 80070dc:	08010a40 	.word	0x08010a40

080070e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070e4:	f7ff ffda 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b06      	ldr	r3, [pc, #24]	; (8007104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0adb      	lsrs	r3, r3, #11
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4904      	ldr	r1, [pc, #16]	; (8007108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40021000 	.word	0x40021000
 8007108:	08010a40 	.word	0x08010a40

0800710c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	220f      	movs	r2, #15
 800711a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0203 	and.w	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007128:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007134:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <HAL_RCC_GetClockConfig+0x5c>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	08db      	lsrs	r3, r3, #3
 8007146:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800714e:	4b07      	ldr	r3, [pc, #28]	; (800716c <HAL_RCC_GetClockConfig+0x60>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0207 	and.w	r2, r3, #7
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	601a      	str	r2, [r3, #0]
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40021000 	.word	0x40021000
 800716c:	40022000 	.word	0x40022000

08007170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800717c:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800717e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007188:	f7fe fca8 	bl	8005adc <HAL_PWREx_GetVoltageRange>
 800718c:	6178      	str	r0, [r7, #20]
 800718e:	e014      	b.n	80071ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007190:	4b25      	ldr	r3, [pc, #148]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	4a24      	ldr	r2, [pc, #144]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719a:	6593      	str	r3, [r2, #88]	; 0x58
 800719c:	4b22      	ldr	r3, [pc, #136]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800719e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071a8:	f7fe fc98 	bl	8005adc <HAL_PWREx_GetVoltageRange>
 80071ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071ae:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071c0:	d10b      	bne.n	80071da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b80      	cmp	r3, #128	; 0x80
 80071c6:	d919      	bls.n	80071fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2ba0      	cmp	r3, #160	; 0xa0
 80071cc:	d902      	bls.n	80071d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071ce:	2302      	movs	r3, #2
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	e013      	b.n	80071fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071d4:	2301      	movs	r3, #1
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	e010      	b.n	80071fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b80      	cmp	r3, #128	; 0x80
 80071de:	d902      	bls.n	80071e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80071e0:	2303      	movs	r3, #3
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	e00a      	b.n	80071fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b80      	cmp	r3, #128	; 0x80
 80071ea:	d102      	bne.n	80071f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071ec:	2302      	movs	r3, #2
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	e004      	b.n	80071fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b70      	cmp	r3, #112	; 0x70
 80071f6:	d101      	bne.n	80071fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071f8:	2301      	movs	r3, #1
 80071fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f023 0207 	bic.w	r2, r3, #7
 8007204:	4909      	ldr	r1, [pc, #36]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800720c:	4b07      	ldr	r3, [pc, #28]	; (800722c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	429a      	cmp	r2, r3
 8007218:	d001      	beq.n	800721e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40021000 	.word	0x40021000
 800722c:	40022000 	.word	0x40022000

08007230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007238:	2300      	movs	r3, #0
 800723a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800723c:	2300      	movs	r3, #0
 800723e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007248:	2b00      	cmp	r3, #0
 800724a:	d041      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007254:	d02a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007256:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800725a:	d824      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800725c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007260:	d008      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007266:	d81e      	bhi.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800726c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007270:	d010      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007272:	e018      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007274:	4b86      	ldr	r3, [pc, #536]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a85      	ldr	r2, [pc, #532]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800727e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007280:	e015      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3304      	adds	r3, #4
 8007286:	2100      	movs	r1, #0
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fabb 	bl	8007804 <RCCEx_PLLSAI1_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007292:	e00c      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3320      	adds	r3, #32
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fba6 	bl	80079ec <RCCEx_PLLSAI2_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072a4:	e003      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	74fb      	strb	r3, [r7, #19]
      break;
 80072aa:	e000      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80072ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ae:	7cfb      	ldrb	r3, [r7, #19]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072b4:	4b76      	ldr	r3, [pc, #472]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c2:	4973      	ldr	r1, [pc, #460]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80072ca:	e001      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d041      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072e4:	d02a      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80072e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072ea:	d824      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072f0:	d008      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072f6:	d81e      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80072fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007300:	d010      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007302:	e018      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007304:	4b62      	ldr	r3, [pc, #392]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4a61      	ldr	r2, [pc, #388]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800730e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007310:	e015      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3304      	adds	r3, #4
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fa73 	bl	8007804 <RCCEx_PLLSAI1_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007322:	e00c      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3320      	adds	r3, #32
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fb5e 	bl	80079ec <RCCEx_PLLSAI2_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007334:	e003      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	74fb      	strb	r3, [r7, #19]
      break;
 800733a:	e000      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800733c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800733e:	7cfb      	ldrb	r3, [r7, #19]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10b      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007344:	4b52      	ldr	r3, [pc, #328]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007352:	494f      	ldr	r1, [pc, #316]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800735a:	e001      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	7cfb      	ldrb	r3, [r7, #19]
 800735e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80a0 	beq.w	80074ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800736e:	2300      	movs	r3, #0
 8007370:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007372:	4b47      	ldr	r3, [pc, #284]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00d      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007388:	4b41      	ldr	r3, [pc, #260]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800738a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738c:	4a40      	ldr	r2, [pc, #256]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800738e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007392:	6593      	str	r3, [r2, #88]	; 0x58
 8007394:	4b3e      	ldr	r3, [pc, #248]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073a0:	2301      	movs	r3, #1
 80073a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073a4:	4b3b      	ldr	r3, [pc, #236]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a3a      	ldr	r2, [pc, #232]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073b0:	f7fc fdd4 	bl	8003f5c <HAL_GetTick>
 80073b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073b6:	e009      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b8:	f7fc fdd0 	bl	8003f5c <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d902      	bls.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	74fb      	strb	r3, [r7, #19]
        break;
 80073ca:	e005      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073cc:	4b31      	ldr	r3, [pc, #196]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0ef      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80073d8:	7cfb      	ldrb	r3, [r7, #19]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d15c      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073de:	4b2c      	ldr	r3, [pc, #176]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01f      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d019      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073fc:	4b24      	ldr	r3, [pc, #144]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007406:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007408:	4b21      	ldr	r3, [pc, #132]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740e:	4a20      	ldr	r2, [pc, #128]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007428:	4a19      	ldr	r2, [pc, #100]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743a:	f7fc fd8f 	bl	8003f5c <HAL_GetTick>
 800743e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007440:	e00b      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007442:	f7fc fd8b 	bl	8003f5c <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007450:	4293      	cmp	r3, r2
 8007452:	d902      	bls.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	74fb      	strb	r3, [r7, #19]
            break;
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0ec      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007468:	7cfb      	ldrb	r3, [r7, #19]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800746e:	4b08      	ldr	r3, [pc, #32]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747e:	4904      	ldr	r1, [pc, #16]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007486:	e009      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007488:	7cfb      	ldrb	r3, [r7, #19]
 800748a:	74bb      	strb	r3, [r7, #18]
 800748c:	e006      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800748e:	bf00      	nop
 8007490:	40021000 	.word	0x40021000
 8007494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	7cfb      	ldrb	r3, [r7, #19]
 800749a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800749c:	7c7b      	ldrb	r3, [r7, #17]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d105      	bne.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a2:	4b9e      	ldr	r3, [pc, #632]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a6:	4a9d      	ldr	r2, [pc, #628]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074ba:	4b98      	ldr	r3, [pc, #608]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	f023 0203 	bic.w	r2, r3, #3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	4994      	ldr	r1, [pc, #592]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074dc:	4b8f      	ldr	r3, [pc, #572]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e2:	f023 020c 	bic.w	r2, r3, #12
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ea:	498c      	ldr	r1, [pc, #560]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074fe:	4b87      	ldr	r3, [pc, #540]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	4983      	ldr	r1, [pc, #524]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800750e:	4313      	orrs	r3, r2
 8007510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007520:	4b7e      	ldr	r3, [pc, #504]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752e:	497b      	ldr	r1, [pc, #492]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0310 	and.w	r3, r3, #16
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007542:	4b76      	ldr	r3, [pc, #472]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007550:	4972      	ldr	r1, [pc, #456]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007564:	4b6d      	ldr	r3, [pc, #436]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007572:	496a      	ldr	r1, [pc, #424]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007574:	4313      	orrs	r3, r2
 8007576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007586:	4b65      	ldr	r3, [pc, #404]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007594:	4961      	ldr	r1, [pc, #388]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007596:	4313      	orrs	r3, r2
 8007598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075a8:	4b5c      	ldr	r3, [pc, #368]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b6:	4959      	ldr	r1, [pc, #356]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ca:	4b54      	ldr	r3, [pc, #336]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d8:	4950      	ldr	r1, [pc, #320]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ec:	4b4b      	ldr	r3, [pc, #300]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	4948      	ldr	r1, [pc, #288]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800760e:	4b43      	ldr	r3, [pc, #268]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761c:	493f      	ldr	r1, [pc, #252]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d028      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007630:	4b3a      	ldr	r3, [pc, #232]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800763e:	4937      	ldr	r1, [pc, #220]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800764a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800764e:	d106      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007650:	4b32      	ldr	r3, [pc, #200]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a31      	ldr	r2, [pc, #196]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800765a:	60d3      	str	r3, [r2, #12]
 800765c:	e011      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007666:	d10c      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	2101      	movs	r1, #1
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f8c8 	bl	8007804 <RCCEx_PLLSAI1_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007678:	7cfb      	ldrb	r3, [r7, #19]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800767e:	7cfb      	ldrb	r3, [r7, #19]
 8007680:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d028      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800768e:	4b23      	ldr	r3, [pc, #140]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007694:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769c:	491f      	ldr	r1, [pc, #124]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076ac:	d106      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	4a1a      	ldr	r2, [pc, #104]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076b8:	60d3      	str	r3, [r2, #12]
 80076ba:	e011      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076c4:	d10c      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3304      	adds	r3, #4
 80076ca:	2101      	movs	r1, #1
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f899 	bl	8007804 <RCCEx_PLLSAI1_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076d6:	7cfb      	ldrb	r3, [r7, #19]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80076dc:	7cfb      	ldrb	r3, [r7, #19]
 80076de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d02b      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fa:	4908      	ldr	r1, [pc, #32]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770a:	d109      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800770c:	4b03      	ldr	r3, [pc, #12]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4a02      	ldr	r2, [pc, #8]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007716:	60d3      	str	r3, [r2, #12]
 8007718:	e014      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800771a:	bf00      	nop
 800771c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007724:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007728:	d10c      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3304      	adds	r3, #4
 800772e:	2101      	movs	r1, #1
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f867 	bl	8007804 <RCCEx_PLLSAI1_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800773a:	7cfb      	ldrb	r3, [r7, #19]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007740:	7cfb      	ldrb	r3, [r7, #19]
 8007742:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02f      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007750:	4b2b      	ldr	r3, [pc, #172]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800775e:	4928      	ldr	r1, [pc, #160]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800776e:	d10d      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	2102      	movs	r1, #2
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f844 	bl	8007804 <RCCEx_PLLSAI1_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007780:	7cfb      	ldrb	r3, [r7, #19]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d014      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	74bb      	strb	r3, [r7, #18]
 800778a:	e011      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007794:	d10c      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3320      	adds	r3, #32
 800779a:	2102      	movs	r1, #2
 800779c:	4618      	mov	r0, r3
 800779e:	f000 f925 	bl	80079ec <RCCEx_PLLSAI2_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077a6:	7cfb      	ldrb	r3, [r7, #19]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80077ac:	7cfb      	ldrb	r3, [r7, #19]
 80077ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ca:	490d      	ldr	r1, [pc, #52]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077de:	4b08      	ldr	r3, [pc, #32]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ee:	4904      	ldr	r1, [pc, #16]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80077f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40021000 	.word	0x40021000

08007804 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007812:	4b75      	ldr	r3, [pc, #468]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d018      	beq.n	8007850 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800781e:	4b72      	ldr	r3, [pc, #456]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f003 0203 	and.w	r2, r3, #3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d10d      	bne.n	800784a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
       ||
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007836:	4b6c      	ldr	r3, [pc, #432]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
       ||
 8007846:	429a      	cmp	r2, r3
 8007848:	d047      	beq.n	80078da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
 800784e:	e044      	b.n	80078da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d018      	beq.n	800788a <RCCEx_PLLSAI1_Config+0x86>
 8007858:	2b03      	cmp	r3, #3
 800785a:	d825      	bhi.n	80078a8 <RCCEx_PLLSAI1_Config+0xa4>
 800785c:	2b01      	cmp	r3, #1
 800785e:	d002      	beq.n	8007866 <RCCEx_PLLSAI1_Config+0x62>
 8007860:	2b02      	cmp	r3, #2
 8007862:	d009      	beq.n	8007878 <RCCEx_PLLSAI1_Config+0x74>
 8007864:	e020      	b.n	80078a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007866:	4b60      	ldr	r3, [pc, #384]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d11d      	bne.n	80078ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007876:	e01a      	b.n	80078ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007878:	4b5b      	ldr	r3, [pc, #364]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007880:	2b00      	cmp	r3, #0
 8007882:	d116      	bne.n	80078b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007888:	e013      	b.n	80078b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800788a:	4b57      	ldr	r3, [pc, #348]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007896:	4b54      	ldr	r3, [pc, #336]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078a6:	e006      	b.n	80078b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
      break;
 80078ac:	e004      	b.n	80078b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10d      	bne.n	80078da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80078be:	4b4a      	ldr	r3, [pc, #296]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	430b      	orrs	r3, r1
 80078d4:	4944      	ldr	r1, [pc, #272]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d17d      	bne.n	80079dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80078e0:	4b41      	ldr	r3, [pc, #260]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a40      	ldr	r2, [pc, #256]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ec:	f7fc fb36 	bl	8003f5c <HAL_GetTick>
 80078f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078f2:	e009      	b.n	8007908 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078f4:	f7fc fb32 	bl	8003f5c <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d902      	bls.n	8007908 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
        break;
 8007906:	e005      	b.n	8007914 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007908:	4b37      	ldr	r3, [pc, #220]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1ef      	bne.n	80078f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d160      	bne.n	80079dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d111      	bne.n	8007944 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007920:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	6892      	ldr	r2, [r2, #8]
 8007930:	0211      	lsls	r1, r2, #8
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68d2      	ldr	r2, [r2, #12]
 8007936:	0912      	lsrs	r2, r2, #4
 8007938:	0452      	lsls	r2, r2, #17
 800793a:	430a      	orrs	r2, r1
 800793c:	492a      	ldr	r1, [pc, #168]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]
 8007942:	e027      	b.n	8007994 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d112      	bne.n	8007970 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800794a:	4b27      	ldr	r3, [pc, #156]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007952:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6892      	ldr	r2, [r2, #8]
 800795a:	0211      	lsls	r1, r2, #8
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6912      	ldr	r2, [r2, #16]
 8007960:	0852      	lsrs	r2, r2, #1
 8007962:	3a01      	subs	r2, #1
 8007964:	0552      	lsls	r2, r2, #21
 8007966:	430a      	orrs	r2, r1
 8007968:	491f      	ldr	r1, [pc, #124]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800796a:	4313      	orrs	r3, r2
 800796c:	610b      	str	r3, [r1, #16]
 800796e:	e011      	b.n	8007994 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007970:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6892      	ldr	r2, [r2, #8]
 8007980:	0211      	lsls	r1, r2, #8
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6952      	ldr	r2, [r2, #20]
 8007986:	0852      	lsrs	r2, r2, #1
 8007988:	3a01      	subs	r2, #1
 800798a:	0652      	lsls	r2, r2, #25
 800798c:	430a      	orrs	r2, r1
 800798e:	4916      	ldr	r1, [pc, #88]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007990:	4313      	orrs	r3, r2
 8007992:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007994:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a13      	ldr	r2, [pc, #76]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800799a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800799e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a0:	f7fc fadc 	bl	8003f5c <HAL_GetTick>
 80079a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079a6:	e009      	b.n	80079bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079a8:	f7fc fad8 	bl	8003f5c <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d902      	bls.n	80079bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	73fb      	strb	r3, [r7, #15]
          break;
 80079ba:	e005      	b.n	80079c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079bc:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0ef      	beq.n	80079a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	4904      	ldr	r1, [pc, #16]	; (80079e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40021000 	.word	0x40021000

080079ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079fa:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d018      	beq.n	8007a38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007a06:	4b67      	ldr	r3, [pc, #412]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 0203 	and.w	r2, r3, #3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d10d      	bne.n	8007a32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
       ||
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007a1e:	4b61      	ldr	r3, [pc, #388]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	091b      	lsrs	r3, r3, #4
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
       ||
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d047      	beq.n	8007ac2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
 8007a36:	e044      	b.n	8007ac2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d018      	beq.n	8007a72 <RCCEx_PLLSAI2_Config+0x86>
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d825      	bhi.n	8007a90 <RCCEx_PLLSAI2_Config+0xa4>
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d002      	beq.n	8007a4e <RCCEx_PLLSAI2_Config+0x62>
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d009      	beq.n	8007a60 <RCCEx_PLLSAI2_Config+0x74>
 8007a4c:	e020      	b.n	8007a90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a4e:	4b55      	ldr	r3, [pc, #340]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d11d      	bne.n	8007a96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a5e:	e01a      	b.n	8007a96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a60:	4b50      	ldr	r3, [pc, #320]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d116      	bne.n	8007a9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a70:	e013      	b.n	8007a9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a72:	4b4c      	ldr	r3, [pc, #304]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10f      	bne.n	8007a9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a7e:	4b49      	ldr	r3, [pc, #292]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a8e:	e006      	b.n	8007a9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
      break;
 8007a94:	e004      	b.n	8007aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a96:	bf00      	nop
 8007a98:	e002      	b.n	8007aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a9a:	bf00      	nop
 8007a9c:	e000      	b.n	8007aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10d      	bne.n	8007ac2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007aa6:	4b3f      	ldr	r3, [pc, #252]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6819      	ldr	r1, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	430b      	orrs	r3, r1
 8007abc:	4939      	ldr	r1, [pc, #228]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d167      	bne.n	8007b98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ac8:	4b36      	ldr	r3, [pc, #216]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a35      	ldr	r2, [pc, #212]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ad4:	f7fc fa42 	bl	8003f5c <HAL_GetTick>
 8007ad8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ada:	e009      	b.n	8007af0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007adc:	f7fc fa3e 	bl	8003f5c <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d902      	bls.n	8007af0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	73fb      	strb	r3, [r7, #15]
        break;
 8007aee:	e005      	b.n	8007afc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007af0:	4b2c      	ldr	r3, [pc, #176]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1ef      	bne.n	8007adc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d14a      	bne.n	8007b98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d111      	bne.n	8007b2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b08:	4b26      	ldr	r3, [pc, #152]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6892      	ldr	r2, [r2, #8]
 8007b18:	0211      	lsls	r1, r2, #8
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	68d2      	ldr	r2, [r2, #12]
 8007b1e:	0912      	lsrs	r2, r2, #4
 8007b20:	0452      	lsls	r2, r2, #17
 8007b22:	430a      	orrs	r2, r1
 8007b24:	491f      	ldr	r1, [pc, #124]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	614b      	str	r3, [r1, #20]
 8007b2a:	e011      	b.n	8007b50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b2c:	4b1d      	ldr	r3, [pc, #116]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6892      	ldr	r2, [r2, #8]
 8007b3c:	0211      	lsls	r1, r2, #8
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6912      	ldr	r2, [r2, #16]
 8007b42:	0852      	lsrs	r2, r2, #1
 8007b44:	3a01      	subs	r2, #1
 8007b46:	0652      	lsls	r2, r2, #25
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	4916      	ldr	r1, [pc, #88]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b50:	4b14      	ldr	r3, [pc, #80]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a13      	ldr	r2, [pc, #76]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5c:	f7fc f9fe 	bl	8003f5c <HAL_GetTick>
 8007b60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b62:	e009      	b.n	8007b78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b64:	f7fc f9fa 	bl	8003f5c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d902      	bls.n	8007b78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	73fb      	strb	r3, [r7, #15]
          break;
 8007b76:	e005      	b.n	8007b84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0ef      	beq.n	8007b64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007b8a:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b8c:	695a      	ldr	r2, [r3, #20]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	4904      	ldr	r1, [pc, #16]	; (8007ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40021000 	.word	0x40021000

08007ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e049      	b.n	8007c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fb ffac 	bl	8003b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3304      	adds	r3, #4
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f000 fab6 	bl	8008158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d001      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e04f      	b.n	8007d10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a23      	ldr	r2, [pc, #140]	; (8007d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d01d      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0x76>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9a:	d018      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0x76>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a1f      	ldr	r2, [pc, #124]	; (8007d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d013      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0x76>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00e      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0x76>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1c      	ldr	r2, [pc, #112]	; (8007d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d009      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0x76>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1b      	ldr	r2, [pc, #108]	; (8007d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d004      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0x76>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d115      	bne.n	8007cfa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b06      	cmp	r3, #6
 8007cde:	d015      	beq.n	8007d0c <HAL_TIM_Base_Start_IT+0xb4>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce6:	d011      	beq.n	8007d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0201 	orr.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf8:	e008      	b.n	8007d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0201 	orr.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e000      	b.n	8007d0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	40012c00 	.word	0x40012c00
 8007d20:	40000400 	.word	0x40000400
 8007d24:	40000800 	.word	0x40000800
 8007d28:	40000c00 	.word	0x40000c00
 8007d2c:	40013400 	.word	0x40013400
 8007d30:	40014000 	.word	0x40014000
 8007d34:	00010007 	.word	0x00010007

08007d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d122      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d11b      	bne.n	8007d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0202 	mvn.w	r2, #2
 8007d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9ce 	bl	800811c <HAL_TIM_IC_CaptureCallback>
 8007d80:	e005      	b.n	8007d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9c0 	bl	8008108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f9d1 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d122      	bne.n	8007de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d11b      	bne.n	8007de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0204 	mvn.w	r2, #4
 8007db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f9a4 	bl	800811c <HAL_TIM_IC_CaptureCallback>
 8007dd4:	e005      	b.n	8007de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f996 	bl	8008108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9a7 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d122      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d11b      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f06f 0208 	mvn.w	r2, #8
 8007e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2204      	movs	r2, #4
 8007e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f97a 	bl	800811c <HAL_TIM_IC_CaptureCallback>
 8007e28:	e005      	b.n	8007e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f96c 	bl	8008108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f97d 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d122      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d11b      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0210 	mvn.w	r2, #16
 8007e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2208      	movs	r2, #8
 8007e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f950 	bl	800811c <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f942 	bl	8008108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f953 	bl	8008130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d10e      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d107      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0201 	mvn.w	r2, #1
 8007eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fa ff9a 	bl	8002df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec6:	2b80      	cmp	r3, #128	; 0x80
 8007ec8:	d10e      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed4:	2b80      	cmp	r3, #128	; 0x80
 8007ed6:	d107      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fafe 	bl	80084e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef6:	d10e      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d107      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 faf1 	bl	80084f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f20:	2b40      	cmp	r3, #64	; 0x40
 8007f22:	d10e      	bne.n	8007f42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d107      	bne.n	8007f42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f901 	bl	8008144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d10e      	bne.n	8007f6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	d107      	bne.n	8007f6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f06f 0220 	mvn.w	r2, #32
 8007f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fab1 	bl	80084d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_TIM_ConfigClockSource+0x1c>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e0b6      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x18a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fbc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fce:	d03e      	beq.n	800804e <HAL_TIM_ConfigClockSource+0xd8>
 8007fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd4:	f200 8087 	bhi.w	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 8007fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fdc:	f000 8086 	beq.w	80080ec <HAL_TIM_ConfigClockSource+0x176>
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe4:	d87f      	bhi.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 8007fe6:	2b70      	cmp	r3, #112	; 0x70
 8007fe8:	d01a      	beq.n	8008020 <HAL_TIM_ConfigClockSource+0xaa>
 8007fea:	2b70      	cmp	r3, #112	; 0x70
 8007fec:	d87b      	bhi.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 8007fee:	2b60      	cmp	r3, #96	; 0x60
 8007ff0:	d050      	beq.n	8008094 <HAL_TIM_ConfigClockSource+0x11e>
 8007ff2:	2b60      	cmp	r3, #96	; 0x60
 8007ff4:	d877      	bhi.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 8007ff6:	2b50      	cmp	r3, #80	; 0x50
 8007ff8:	d03c      	beq.n	8008074 <HAL_TIM_ConfigClockSource+0xfe>
 8007ffa:	2b50      	cmp	r3, #80	; 0x50
 8007ffc:	d873      	bhi.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d058      	beq.n	80080b4 <HAL_TIM_ConfigClockSource+0x13e>
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d86f      	bhi.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 8008006:	2b30      	cmp	r3, #48	; 0x30
 8008008:	d064      	beq.n	80080d4 <HAL_TIM_ConfigClockSource+0x15e>
 800800a:	2b30      	cmp	r3, #48	; 0x30
 800800c:	d86b      	bhi.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 800800e:	2b20      	cmp	r3, #32
 8008010:	d060      	beq.n	80080d4 <HAL_TIM_ConfigClockSource+0x15e>
 8008012:	2b20      	cmp	r3, #32
 8008014:	d867      	bhi.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d05c      	beq.n	80080d4 <HAL_TIM_ConfigClockSource+0x15e>
 800801a:	2b10      	cmp	r3, #16
 800801c:	d05a      	beq.n	80080d4 <HAL_TIM_ConfigClockSource+0x15e>
 800801e:	e062      	b.n	80080e6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	6899      	ldr	r1, [r3, #8]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f000 f9a6 	bl	8008380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008042:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	609a      	str	r2, [r3, #8]
      break;
 800804c:	e04f      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6899      	ldr	r1, [r3, #8]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f000 f98f 	bl	8008380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008070:	609a      	str	r2, [r3, #8]
      break;
 8008072:	e03c      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	6859      	ldr	r1, [r3, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	461a      	mov	r2, r3
 8008082:	f000 f903 	bl	800828c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2150      	movs	r1, #80	; 0x50
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f95c 	bl	800834a <TIM_ITRx_SetConfig>
      break;
 8008092:	e02c      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6818      	ldr	r0, [r3, #0]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	6859      	ldr	r1, [r3, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	461a      	mov	r2, r3
 80080a2:	f000 f922 	bl	80082ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2160      	movs	r1, #96	; 0x60
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f94c 	bl	800834a <TIM_ITRx_SetConfig>
      break;
 80080b2:	e01c      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	461a      	mov	r2, r3
 80080c2:	f000 f8e3 	bl	800828c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2140      	movs	r1, #64	; 0x40
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 f93c 	bl	800834a <TIM_ITRx_SetConfig>
      break;
 80080d2:	e00c      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f000 f933 	bl	800834a <TIM_ITRx_SetConfig>
      break;
 80080e4:	e003      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ea:	e000      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x178>
      break;
 80080ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a40      	ldr	r2, [pc, #256]	; (800826c <TIM_Base_SetConfig+0x114>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d013      	beq.n	8008198 <TIM_Base_SetConfig+0x40>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008176:	d00f      	beq.n	8008198 <TIM_Base_SetConfig+0x40>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a3d      	ldr	r2, [pc, #244]	; (8008270 <TIM_Base_SetConfig+0x118>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00b      	beq.n	8008198 <TIM_Base_SetConfig+0x40>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a3c      	ldr	r2, [pc, #240]	; (8008274 <TIM_Base_SetConfig+0x11c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d007      	beq.n	8008198 <TIM_Base_SetConfig+0x40>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a3b      	ldr	r2, [pc, #236]	; (8008278 <TIM_Base_SetConfig+0x120>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d003      	beq.n	8008198 <TIM_Base_SetConfig+0x40>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a3a      	ldr	r2, [pc, #232]	; (800827c <TIM_Base_SetConfig+0x124>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d108      	bne.n	80081aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a2f      	ldr	r2, [pc, #188]	; (800826c <TIM_Base_SetConfig+0x114>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d01f      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b8:	d01b      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a2c      	ldr	r2, [pc, #176]	; (8008270 <TIM_Base_SetConfig+0x118>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d017      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a2b      	ldr	r2, [pc, #172]	; (8008274 <TIM_Base_SetConfig+0x11c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d013      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a2a      	ldr	r2, [pc, #168]	; (8008278 <TIM_Base_SetConfig+0x120>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00f      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a29      	ldr	r2, [pc, #164]	; (800827c <TIM_Base_SetConfig+0x124>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00b      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a28      	ldr	r2, [pc, #160]	; (8008280 <TIM_Base_SetConfig+0x128>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a27      	ldr	r2, [pc, #156]	; (8008284 <TIM_Base_SetConfig+0x12c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d003      	beq.n	80081f2 <TIM_Base_SetConfig+0x9a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a26      	ldr	r2, [pc, #152]	; (8008288 <TIM_Base_SetConfig+0x130>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d108      	bne.n	8008204 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a10      	ldr	r2, [pc, #64]	; (800826c <TIM_Base_SetConfig+0x114>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00f      	beq.n	8008250 <TIM_Base_SetConfig+0xf8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a12      	ldr	r2, [pc, #72]	; (800827c <TIM_Base_SetConfig+0x124>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00b      	beq.n	8008250 <TIM_Base_SetConfig+0xf8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a11      	ldr	r2, [pc, #68]	; (8008280 <TIM_Base_SetConfig+0x128>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <TIM_Base_SetConfig+0xf8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a10      	ldr	r2, [pc, #64]	; (8008284 <TIM_Base_SetConfig+0x12c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_Base_SetConfig+0xf8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a0f      	ldr	r2, [pc, #60]	; (8008288 <TIM_Base_SetConfig+0x130>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d103      	bne.n	8008258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	615a      	str	r2, [r3, #20]
}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40000c00 	.word	0x40000c00
 800827c:	40013400 	.word	0x40013400
 8008280:	40014000 	.word	0x40014000
 8008284:	40014400 	.word	0x40014400
 8008288:	40014800 	.word	0x40014800

0800828c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f023 0201 	bic.w	r2, r3, #1
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	4313      	orrs	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f023 030a 	bic.w	r3, r3, #10
 80082c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	621a      	str	r2, [r3, #32]
}
 80082de:	bf00      	nop
 80082e0:	371c      	adds	r7, #28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b087      	sub	sp, #28
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f023 0210 	bic.w	r2, r3, #16
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	031b      	lsls	r3, r3, #12
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008326:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	621a      	str	r2, [r3, #32]
}
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800834a:	b480      	push	{r7}
 800834c:	b085      	sub	sp, #20
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	f043 0307 	orr.w	r3, r3, #7
 800836c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	609a      	str	r2, [r3, #8]
}
 8008374:	bf00      	nop
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800839a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	021a      	lsls	r2, r3, #8
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	609a      	str	r2, [r3, #8]
}
 80083b4:	bf00      	nop
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e068      	b.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d004      	beq.n	800840c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a2d      	ldr	r2, [pc, #180]	; (80084bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d108      	bne.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	4313      	orrs	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d01d      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844a:	d018      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00e      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d009      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a13      	ldr	r2, [pc, #76]	; (80084bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a14      	ldr	r2, [pc, #80]	; (80084cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d10c      	bne.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4313      	orrs	r3, r2
 800848e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40012c00 	.word	0x40012c00
 80084bc:	40013400 	.word	0x40013400
 80084c0:	40000400 	.word	0x40000400
 80084c4:	40000800 	.word	0x40000800
 80084c8:	40000c00 	.word	0x40000c00
 80084cc:	40014000 	.word	0x40014000

080084d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e040      	b.n	80085a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fb fb20 	bl	8003b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2224      	movs	r2, #36	; 0x24
 8008538:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0201 	bic.w	r2, r2, #1
 8008548:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8c0 	bl	80086d0 <UART_SetConfig>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e022      	b.n	80085a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fb3e 	bl	8008be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fbc5 	bl	8008d28 <UART_CheckIdleState>
 800859e:	4603      	mov	r3, r0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	; 0x28
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	4613      	mov	r3, r2
 80085b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085bc:	2b20      	cmp	r3, #32
 80085be:	f040 8082 	bne.w	80086c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_UART_Transmit+0x26>
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e07a      	b.n	80086c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_UART_Transmit+0x38>
 80085dc:	2302      	movs	r3, #2
 80085de:	e073      	b.n	80086c8 <HAL_UART_Transmit+0x120>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2221      	movs	r2, #33	; 0x21
 80085f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085f6:	f7fb fcb1 	bl	8003f5c <HAL_GetTick>
 80085fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	88fa      	ldrh	r2, [r7, #6]
 8008600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	88fa      	ldrh	r2, [r7, #6]
 8008608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008614:	d108      	bne.n	8008628 <HAL_UART_Transmit+0x80>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d104      	bne.n	8008628 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	61bb      	str	r3, [r7, #24]
 8008626:	e003      	b.n	8008630 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800862c:	2300      	movs	r3, #0
 800862e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008638:	e02d      	b.n	8008696 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2200      	movs	r2, #0
 8008642:	2180      	movs	r1, #128	; 0x80
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 fbb8 	bl	8008dba <UART_WaitOnFlagUntilTimeout>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e039      	b.n	80086c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10b      	bne.n	8008672 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	881a      	ldrh	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008666:	b292      	uxth	r2, r2
 8008668:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	3302      	adds	r3, #2
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	e008      	b.n	8008684 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	b292      	uxth	r2, r2
 800867c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	3301      	adds	r3, #1
 8008682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1cb      	bne.n	800863a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2140      	movs	r1, #64	; 0x40
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fb84 	bl	8008dba <UART_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e005      	b.n	80086c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	e000      	b.n	80086c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80086c6:	2302      	movs	r3, #2
  }
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3720      	adds	r7, #32
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d0:	b5b0      	push	{r4, r5, r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	431a      	orrs	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4bad      	ldr	r3, [pc, #692]	; (80089b0 <UART_SetConfig+0x2e0>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	69f9      	ldr	r1, [r7, #28]
 8008704:	430b      	orrs	r3, r1
 8008706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4aa2      	ldr	r2, [pc, #648]	; (80089b4 <UART_SetConfig+0x2e4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	69fa      	ldr	r2, [r7, #28]
 8008734:	4313      	orrs	r3, r2
 8008736:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	430a      	orrs	r2, r1
 800874a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a99      	ldr	r2, [pc, #612]	; (80089b8 <UART_SetConfig+0x2e8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d121      	bne.n	800879a <UART_SetConfig+0xca>
 8008756:	4b99      	ldr	r3, [pc, #612]	; (80089bc <UART_SetConfig+0x2ec>)
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875c:	f003 0303 	and.w	r3, r3, #3
 8008760:	2b03      	cmp	r3, #3
 8008762:	d817      	bhi.n	8008794 <UART_SetConfig+0xc4>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0x9c>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	0800877d 	.word	0x0800877d
 8008770:	08008789 	.word	0x08008789
 8008774:	08008783 	.word	0x08008783
 8008778:	0800878f 	.word	0x0800878f
 800877c:	2301      	movs	r3, #1
 800877e:	76fb      	strb	r3, [r7, #27]
 8008780:	e0e7      	b.n	8008952 <UART_SetConfig+0x282>
 8008782:	2302      	movs	r3, #2
 8008784:	76fb      	strb	r3, [r7, #27]
 8008786:	e0e4      	b.n	8008952 <UART_SetConfig+0x282>
 8008788:	2304      	movs	r3, #4
 800878a:	76fb      	strb	r3, [r7, #27]
 800878c:	e0e1      	b.n	8008952 <UART_SetConfig+0x282>
 800878e:	2308      	movs	r3, #8
 8008790:	76fb      	strb	r3, [r7, #27]
 8008792:	e0de      	b.n	8008952 <UART_SetConfig+0x282>
 8008794:	2310      	movs	r3, #16
 8008796:	76fb      	strb	r3, [r7, #27]
 8008798:	e0db      	b.n	8008952 <UART_SetConfig+0x282>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a88      	ldr	r2, [pc, #544]	; (80089c0 <UART_SetConfig+0x2f0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d132      	bne.n	800880a <UART_SetConfig+0x13a>
 80087a4:	4b85      	ldr	r3, [pc, #532]	; (80089bc <UART_SetConfig+0x2ec>)
 80087a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087aa:	f003 030c 	and.w	r3, r3, #12
 80087ae:	2b0c      	cmp	r3, #12
 80087b0:	d828      	bhi.n	8008804 <UART_SetConfig+0x134>
 80087b2:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <UART_SetConfig+0xe8>)
 80087b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b8:	080087ed 	.word	0x080087ed
 80087bc:	08008805 	.word	0x08008805
 80087c0:	08008805 	.word	0x08008805
 80087c4:	08008805 	.word	0x08008805
 80087c8:	080087f9 	.word	0x080087f9
 80087cc:	08008805 	.word	0x08008805
 80087d0:	08008805 	.word	0x08008805
 80087d4:	08008805 	.word	0x08008805
 80087d8:	080087f3 	.word	0x080087f3
 80087dc:	08008805 	.word	0x08008805
 80087e0:	08008805 	.word	0x08008805
 80087e4:	08008805 	.word	0x08008805
 80087e8:	080087ff 	.word	0x080087ff
 80087ec:	2300      	movs	r3, #0
 80087ee:	76fb      	strb	r3, [r7, #27]
 80087f0:	e0af      	b.n	8008952 <UART_SetConfig+0x282>
 80087f2:	2302      	movs	r3, #2
 80087f4:	76fb      	strb	r3, [r7, #27]
 80087f6:	e0ac      	b.n	8008952 <UART_SetConfig+0x282>
 80087f8:	2304      	movs	r3, #4
 80087fa:	76fb      	strb	r3, [r7, #27]
 80087fc:	e0a9      	b.n	8008952 <UART_SetConfig+0x282>
 80087fe:	2308      	movs	r3, #8
 8008800:	76fb      	strb	r3, [r7, #27]
 8008802:	e0a6      	b.n	8008952 <UART_SetConfig+0x282>
 8008804:	2310      	movs	r3, #16
 8008806:	76fb      	strb	r3, [r7, #27]
 8008808:	e0a3      	b.n	8008952 <UART_SetConfig+0x282>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a6d      	ldr	r2, [pc, #436]	; (80089c4 <UART_SetConfig+0x2f4>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d120      	bne.n	8008856 <UART_SetConfig+0x186>
 8008814:	4b69      	ldr	r3, [pc, #420]	; (80089bc <UART_SetConfig+0x2ec>)
 8008816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800881e:	2b30      	cmp	r3, #48	; 0x30
 8008820:	d013      	beq.n	800884a <UART_SetConfig+0x17a>
 8008822:	2b30      	cmp	r3, #48	; 0x30
 8008824:	d814      	bhi.n	8008850 <UART_SetConfig+0x180>
 8008826:	2b20      	cmp	r3, #32
 8008828:	d009      	beq.n	800883e <UART_SetConfig+0x16e>
 800882a:	2b20      	cmp	r3, #32
 800882c:	d810      	bhi.n	8008850 <UART_SetConfig+0x180>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <UART_SetConfig+0x168>
 8008832:	2b10      	cmp	r3, #16
 8008834:	d006      	beq.n	8008844 <UART_SetConfig+0x174>
 8008836:	e00b      	b.n	8008850 <UART_SetConfig+0x180>
 8008838:	2300      	movs	r3, #0
 800883a:	76fb      	strb	r3, [r7, #27]
 800883c:	e089      	b.n	8008952 <UART_SetConfig+0x282>
 800883e:	2302      	movs	r3, #2
 8008840:	76fb      	strb	r3, [r7, #27]
 8008842:	e086      	b.n	8008952 <UART_SetConfig+0x282>
 8008844:	2304      	movs	r3, #4
 8008846:	76fb      	strb	r3, [r7, #27]
 8008848:	e083      	b.n	8008952 <UART_SetConfig+0x282>
 800884a:	2308      	movs	r3, #8
 800884c:	76fb      	strb	r3, [r7, #27]
 800884e:	e080      	b.n	8008952 <UART_SetConfig+0x282>
 8008850:	2310      	movs	r3, #16
 8008852:	76fb      	strb	r3, [r7, #27]
 8008854:	e07d      	b.n	8008952 <UART_SetConfig+0x282>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a5b      	ldr	r2, [pc, #364]	; (80089c8 <UART_SetConfig+0x2f8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d120      	bne.n	80088a2 <UART_SetConfig+0x1d2>
 8008860:	4b56      	ldr	r3, [pc, #344]	; (80089bc <UART_SetConfig+0x2ec>)
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800886a:	2bc0      	cmp	r3, #192	; 0xc0
 800886c:	d013      	beq.n	8008896 <UART_SetConfig+0x1c6>
 800886e:	2bc0      	cmp	r3, #192	; 0xc0
 8008870:	d814      	bhi.n	800889c <UART_SetConfig+0x1cc>
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d009      	beq.n	800888a <UART_SetConfig+0x1ba>
 8008876:	2b80      	cmp	r3, #128	; 0x80
 8008878:	d810      	bhi.n	800889c <UART_SetConfig+0x1cc>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <UART_SetConfig+0x1b4>
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d006      	beq.n	8008890 <UART_SetConfig+0x1c0>
 8008882:	e00b      	b.n	800889c <UART_SetConfig+0x1cc>
 8008884:	2300      	movs	r3, #0
 8008886:	76fb      	strb	r3, [r7, #27]
 8008888:	e063      	b.n	8008952 <UART_SetConfig+0x282>
 800888a:	2302      	movs	r3, #2
 800888c:	76fb      	strb	r3, [r7, #27]
 800888e:	e060      	b.n	8008952 <UART_SetConfig+0x282>
 8008890:	2304      	movs	r3, #4
 8008892:	76fb      	strb	r3, [r7, #27]
 8008894:	e05d      	b.n	8008952 <UART_SetConfig+0x282>
 8008896:	2308      	movs	r3, #8
 8008898:	76fb      	strb	r3, [r7, #27]
 800889a:	e05a      	b.n	8008952 <UART_SetConfig+0x282>
 800889c:	2310      	movs	r3, #16
 800889e:	76fb      	strb	r3, [r7, #27]
 80088a0:	e057      	b.n	8008952 <UART_SetConfig+0x282>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a49      	ldr	r2, [pc, #292]	; (80089cc <UART_SetConfig+0x2fc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d125      	bne.n	80088f8 <UART_SetConfig+0x228>
 80088ac:	4b43      	ldr	r3, [pc, #268]	; (80089bc <UART_SetConfig+0x2ec>)
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088ba:	d017      	beq.n	80088ec <UART_SetConfig+0x21c>
 80088bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088c0:	d817      	bhi.n	80088f2 <UART_SetConfig+0x222>
 80088c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c6:	d00b      	beq.n	80088e0 <UART_SetConfig+0x210>
 80088c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088cc:	d811      	bhi.n	80088f2 <UART_SetConfig+0x222>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <UART_SetConfig+0x20a>
 80088d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d6:	d006      	beq.n	80088e6 <UART_SetConfig+0x216>
 80088d8:	e00b      	b.n	80088f2 <UART_SetConfig+0x222>
 80088da:	2300      	movs	r3, #0
 80088dc:	76fb      	strb	r3, [r7, #27]
 80088de:	e038      	b.n	8008952 <UART_SetConfig+0x282>
 80088e0:	2302      	movs	r3, #2
 80088e2:	76fb      	strb	r3, [r7, #27]
 80088e4:	e035      	b.n	8008952 <UART_SetConfig+0x282>
 80088e6:	2304      	movs	r3, #4
 80088e8:	76fb      	strb	r3, [r7, #27]
 80088ea:	e032      	b.n	8008952 <UART_SetConfig+0x282>
 80088ec:	2308      	movs	r3, #8
 80088ee:	76fb      	strb	r3, [r7, #27]
 80088f0:	e02f      	b.n	8008952 <UART_SetConfig+0x282>
 80088f2:	2310      	movs	r3, #16
 80088f4:	76fb      	strb	r3, [r7, #27]
 80088f6:	e02c      	b.n	8008952 <UART_SetConfig+0x282>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a2d      	ldr	r2, [pc, #180]	; (80089b4 <UART_SetConfig+0x2e4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d125      	bne.n	800894e <UART_SetConfig+0x27e>
 8008902:	4b2e      	ldr	r3, [pc, #184]	; (80089bc <UART_SetConfig+0x2ec>)
 8008904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800890c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008910:	d017      	beq.n	8008942 <UART_SetConfig+0x272>
 8008912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008916:	d817      	bhi.n	8008948 <UART_SetConfig+0x278>
 8008918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800891c:	d00b      	beq.n	8008936 <UART_SetConfig+0x266>
 800891e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008922:	d811      	bhi.n	8008948 <UART_SetConfig+0x278>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <UART_SetConfig+0x260>
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892c:	d006      	beq.n	800893c <UART_SetConfig+0x26c>
 800892e:	e00b      	b.n	8008948 <UART_SetConfig+0x278>
 8008930:	2300      	movs	r3, #0
 8008932:	76fb      	strb	r3, [r7, #27]
 8008934:	e00d      	b.n	8008952 <UART_SetConfig+0x282>
 8008936:	2302      	movs	r3, #2
 8008938:	76fb      	strb	r3, [r7, #27]
 800893a:	e00a      	b.n	8008952 <UART_SetConfig+0x282>
 800893c:	2304      	movs	r3, #4
 800893e:	76fb      	strb	r3, [r7, #27]
 8008940:	e007      	b.n	8008952 <UART_SetConfig+0x282>
 8008942:	2308      	movs	r3, #8
 8008944:	76fb      	strb	r3, [r7, #27]
 8008946:	e004      	b.n	8008952 <UART_SetConfig+0x282>
 8008948:	2310      	movs	r3, #16
 800894a:	76fb      	strb	r3, [r7, #27]
 800894c:	e001      	b.n	8008952 <UART_SetConfig+0x282>
 800894e:	2310      	movs	r3, #16
 8008950:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a17      	ldr	r2, [pc, #92]	; (80089b4 <UART_SetConfig+0x2e4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f040 8087 	bne.w	8008a6c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800895e:	7efb      	ldrb	r3, [r7, #27]
 8008960:	2b08      	cmp	r3, #8
 8008962:	d837      	bhi.n	80089d4 <UART_SetConfig+0x304>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <UART_SetConfig+0x29c>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	08008991 	.word	0x08008991
 8008970:	080089d5 	.word	0x080089d5
 8008974:	08008999 	.word	0x08008999
 8008978:	080089d5 	.word	0x080089d5
 800897c:	0800899f 	.word	0x0800899f
 8008980:	080089d5 	.word	0x080089d5
 8008984:	080089d5 	.word	0x080089d5
 8008988:	080089d5 	.word	0x080089d5
 800898c:	080089a7 	.word	0x080089a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008990:	f7fe fb90 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 8008994:	6178      	str	r0, [r7, #20]
        break;
 8008996:	e022      	b.n	80089de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008998:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <UART_SetConfig+0x300>)
 800899a:	617b      	str	r3, [r7, #20]
        break;
 800899c:	e01f      	b.n	80089de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800899e:	f7fe faf1 	bl	8006f84 <HAL_RCC_GetSysClockFreq>
 80089a2:	6178      	str	r0, [r7, #20]
        break;
 80089a4:	e01b      	b.n	80089de <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089aa:	617b      	str	r3, [r7, #20]
        break;
 80089ac:	e017      	b.n	80089de <UART_SetConfig+0x30e>
 80089ae:	bf00      	nop
 80089b0:	efff69f3 	.word	0xefff69f3
 80089b4:	40008000 	.word	0x40008000
 80089b8:	40013800 	.word	0x40013800
 80089bc:	40021000 	.word	0x40021000
 80089c0:	40004400 	.word	0x40004400
 80089c4:	40004800 	.word	0x40004800
 80089c8:	40004c00 	.word	0x40004c00
 80089cc:	40005000 	.word	0x40005000
 80089d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	76bb      	strb	r3, [r7, #26]
        break;
 80089dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80f1 	beq.w	8008bc8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	4413      	add	r3, r2
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d305      	bcc.n	8008a02 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d902      	bls.n	8008a08 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	76bb      	strb	r3, [r7, #26]
 8008a06:	e0df      	b.n	8008bc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f04f 0100 	mov.w	r1, #0
 8008a10:	f04f 0200 	mov.w	r2, #0
 8008a14:	f04f 0300 	mov.w	r3, #0
 8008a18:	020b      	lsls	r3, r1, #8
 8008a1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a1e:	0202      	lsls	r2, r0, #8
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	6849      	ldr	r1, [r1, #4]
 8008a24:	0849      	lsrs	r1, r1, #1
 8008a26:	4608      	mov	r0, r1
 8008a28:	f04f 0100 	mov.w	r1, #0
 8008a2c:	1814      	adds	r4, r2, r0
 8008a2e:	eb43 0501 	adc.w	r5, r3, r1
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f7f8 f902 	bl	8000c48 <__aeabi_uldivmod>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4613      	mov	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a52:	d308      	bcc.n	8008a66 <UART_SetConfig+0x396>
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5a:	d204      	bcs.n	8008a66 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	60da      	str	r2, [r3, #12]
 8008a64:	e0b0      	b.n	8008bc8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	76bb      	strb	r3, [r7, #26]
 8008a6a:	e0ad      	b.n	8008bc8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	69db      	ldr	r3, [r3, #28]
 8008a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a74:	d15b      	bne.n	8008b2e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008a76:	7efb      	ldrb	r3, [r7, #27]
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d828      	bhi.n	8008ace <UART_SetConfig+0x3fe>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x3b4>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008acf 	.word	0x08008acf
 8008a94:	08008abf 	.word	0x08008abf
 8008a98:	08008acf 	.word	0x08008acf
 8008a9c:	08008acf 	.word	0x08008acf
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	08008ac7 	.word	0x08008ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa8:	f7fe fb04 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 8008aac:	6178      	str	r0, [r7, #20]
        break;
 8008aae:	e013      	b.n	8008ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ab0:	f7fe fb16 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 8008ab4:	6178      	str	r0, [r7, #20]
        break;
 8008ab6:	e00f      	b.n	8008ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab8:	4b49      	ldr	r3, [pc, #292]	; (8008be0 <UART_SetConfig+0x510>)
 8008aba:	617b      	str	r3, [r7, #20]
        break;
 8008abc:	e00c      	b.n	8008ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008abe:	f7fe fa61 	bl	8006f84 <HAL_RCC_GetSysClockFreq>
 8008ac2:	6178      	str	r0, [r7, #20]
        break;
 8008ac4:	e008      	b.n	8008ad8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aca:	617b      	str	r3, [r7, #20]
        break;
 8008acc:	e004      	b.n	8008ad8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	76bb      	strb	r3, [r7, #26]
        break;
 8008ad6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d074      	beq.n	8008bc8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	005a      	lsls	r2, r3, #1
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	441a      	add	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	2b0f      	cmp	r3, #15
 8008af8:	d916      	bls.n	8008b28 <UART_SetConfig+0x458>
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b00:	d212      	bcs.n	8008b28 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	f023 030f 	bic.w	r3, r3, #15
 8008b0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	085b      	lsrs	r3, r3, #1
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	89fb      	ldrh	r3, [r7, #14]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	89fa      	ldrh	r2, [r7, #14]
 8008b24:	60da      	str	r2, [r3, #12]
 8008b26:	e04f      	b.n	8008bc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	76bb      	strb	r3, [r7, #26]
 8008b2c:	e04c      	b.n	8008bc8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b2e:	7efb      	ldrb	r3, [r7, #27]
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d828      	bhi.n	8008b86 <UART_SetConfig+0x4b6>
 8008b34:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <UART_SetConfig+0x46c>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b69 	.word	0x08008b69
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	08008b87 	.word	0x08008b87
 8008b4c:	08008b77 	.word	0x08008b77
 8008b50:	08008b87 	.word	0x08008b87
 8008b54:	08008b87 	.word	0x08008b87
 8008b58:	08008b87 	.word	0x08008b87
 8008b5c:	08008b7f 	.word	0x08008b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b60:	f7fe faa8 	bl	80070b4 <HAL_RCC_GetPCLK1Freq>
 8008b64:	6178      	str	r0, [r7, #20]
        break;
 8008b66:	e013      	b.n	8008b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b68:	f7fe faba 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 8008b6c:	6178      	str	r0, [r7, #20]
        break;
 8008b6e:	e00f      	b.n	8008b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b70:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <UART_SetConfig+0x510>)
 8008b72:	617b      	str	r3, [r7, #20]
        break;
 8008b74:	e00c      	b.n	8008b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b76:	f7fe fa05 	bl	8006f84 <HAL_RCC_GetSysClockFreq>
 8008b7a:	6178      	str	r0, [r7, #20]
        break;
 8008b7c:	e008      	b.n	8008b90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b82:	617b      	str	r3, [r7, #20]
        break;
 8008b84:	e004      	b.n	8008b90 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	76bb      	strb	r3, [r7, #26]
        break;
 8008b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d018      	beq.n	8008bc8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	085a      	lsrs	r2, r3, #1
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	441a      	add	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b0f      	cmp	r3, #15
 8008bae:	d909      	bls.n	8008bc4 <UART_SetConfig+0x4f4>
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb6:	d205      	bcs.n	8008bc4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60da      	str	r2, [r3, #12]
 8008bc2:	e001      	b.n	8008bc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008bd4:	7ebb      	ldrb	r3, [r7, #26]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3720      	adds	r7, #32
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bde:	bf00      	nop
 8008be0:	00f42400 	.word	0x00f42400

08008be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00a      	beq.n	8008c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01a      	beq.n	8008cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ce2:	d10a      	bne.n	8008cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d38:	f7fb f910 	bl	8003f5c <HAL_GetTick>
 8008d3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d10e      	bne.n	8008d6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f82d 	bl	8008dba <UART_WaitOnFlagUntilTimeout>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e023      	b.n	8008db2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d10e      	bne.n	8008d96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f817 	bl	8008dba <UART_WaitOnFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e00d      	b.n	8008db2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b09c      	sub	sp, #112	; 0x70
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	603b      	str	r3, [r7, #0]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dca:	e0a5      	b.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd2:	f000 80a1 	beq.w	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd6:	f7fb f8c1 	bl	8003f5c <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d302      	bcc.n	8008dec <UART_WaitOnFlagUntilTimeout+0x32>
 8008de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d13e      	bne.n	8008e6a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e00:	667b      	str	r3, [r7, #100]	; 0x64
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	f023 0301 	bic.w	r3, r3, #1
 8008e34:	663b      	str	r3, [r7, #96]	; 0x60
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2220      	movs	r2, #32
 8008e56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e067      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d04f      	beq.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e86:	d147      	bne.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e90:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e6      	bne.n	8008e92 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f023 0301 	bic.w	r3, r3, #1
 8008eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ee4:	623a      	str	r2, [r7, #32]
 8008ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	69f9      	ldr	r1, [r7, #28]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2220      	movs	r2, #32
 8008f02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e010      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69da      	ldr	r2, [r3, #28]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4013      	ands	r3, r2
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	f43f af4a 	beq.w	8008dcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3770      	adds	r7, #112	; 0x70
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <cnn_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool cnn_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8008f52:	f107 030c 	add.w	r3, r7, #12
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	2101      	movs	r1, #1
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fb40 	bl	80095e0 <ai_platform_get_activations_map>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d043      	beq.n	8008fee <cnn_model_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    conv2d_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 600);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008f6c:	4a25      	ldr	r2, [pc, #148]	; (8009004 <cnn_model_configure_activations+0xc0>)
 8008f6e:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 600);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008f76:	4a23      	ldr	r2, [pc, #140]	; (8009004 <cnn_model_configure_activations+0xc0>)
 8008f78:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_output_array.data = AI_PTR(activations_map[0] + 600);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008f80:	4a21      	ldr	r2, [pc, #132]	; (8009008 <cnn_model_configure_activations+0xc4>)
 8008f82:	6093      	str	r3, [r2, #8]
    batch_normalization_1_output_array.data_start = AI_PTR(activations_map[0] + 600);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8008f8a:	4a1f      	ldr	r2, [pc, #124]	; (8009008 <cnn_model_configure_activations+0xc4>)
 8008f8c:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4a1e      	ldr	r2, [pc, #120]	; (800900c <cnn_model_configure_activations+0xc8>)
 8008f92:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4a1d      	ldr	r2, [pc, #116]	; (800900c <cnn_model_configure_activations+0xc8>)
 8008f98:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_output_array.data = AI_PTR(activations_map[0] + 7680);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8008fa0:	4a1b      	ldr	r2, [pc, #108]	; (8009010 <cnn_model_configure_activations+0xcc>)
 8008fa2:	6093      	str	r3, [r2, #8]
    batch_normalization_2_output_array.data_start = AI_PTR(activations_map[0] + 7680);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8008faa:	4a19      	ldr	r2, [pc, #100]	; (8009010 <cnn_model_configure_activations+0xcc>)
 8008fac:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4a18      	ldr	r2, [pc, #96]	; (8009014 <cnn_model_configure_activations+0xd0>)
 8008fb2:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4a17      	ldr	r2, [pc, #92]	; (8009014 <cnn_model_configure_activations+0xd0>)
 8008fb8:	60d3      	str	r3, [r2, #12]
    dense_2_dense_output_array.data = AI_PTR(activations_map[0] + 64);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3340      	adds	r3, #64	; 0x40
 8008fbe:	4a16      	ldr	r2, [pc, #88]	; (8009018 <cnn_model_configure_activations+0xd4>)
 8008fc0:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3340      	adds	r3, #64	; 0x40
 8008fc6:	4a14      	ldr	r2, [pc, #80]	; (8009018 <cnn_model_configure_activations+0xd4>)
 8008fc8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations_map[0] + 576);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008fd0:	4a12      	ldr	r2, [pc, #72]	; (800901c <cnn_model_configure_activations+0xd8>)
 8008fd2:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations_map[0] + 576);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8008fda:	4a10      	ldr	r2, [pc, #64]	; (800901c <cnn_model_configure_activations+0xd8>)
 8008fdc:	60d3      	str	r3, [r2, #12]
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4a0f      	ldr	r2, [pc, #60]	; (8009020 <cnn_model_configure_activations+0xdc>)
 8008fe2:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4a0e      	ldr	r2, [pc, #56]	; (8009020 <cnn_model_configure_activations+0xdc>)
 8008fe8:	60d3      	str	r3, [r2, #12]
    
    return true;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e005      	b.n	8008ffa <cnn_model_configure_activations+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8008fee:	2213      	movs	r2, #19
 8008ff0:	2130      	movs	r1, #48	; 0x30
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fbc0 	bl	8009778 <ai_platform_network_set_error>
  return false;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000024 	.word	0x20000024
 8009008:	20000034 	.word	0x20000034
 800900c:	20000044 	.word	0x20000044
 8009010:	20000054 	.word	0x20000054
 8009014:	20000064 	.word	0x20000064
 8009018:	20000074 	.word	0x20000074
 800901c:	20000084 	.word	0x20000084
 8009020:	20000094 	.word	0x20000094

08009024 <cnn_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool cnn_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8009032:	f107 030c 	add.w	r3, r7, #12
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	2101      	movs	r1, #1
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fa80 	bl	8009540 <ai_platform_get_weights_map>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 8102 	beq.w	800924c <cnn_model_configure_weights+0x228>
    /* Updating weights (byte) offsets */
    
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8009048:	4b85      	ldr	r3, [pc, #532]	; (8009260 <cnn_model_configure_weights+0x23c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009050:	4a83      	ldr	r2, [pc, #524]	; (8009260 <cnn_model_configure_weights+0x23c>)
 8009052:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4a82      	ldr	r2, [pc, #520]	; (8009260 <cnn_model_configure_weights+0x23c>)
 8009058:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4a80      	ldr	r2, [pc, #512]	; (8009260 <cnn_model_configure_weights+0x23c>)
 800905e:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8009060:	4b80      	ldr	r3, [pc, #512]	; (8009264 <cnn_model_configure_weights+0x240>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009068:	4a7e      	ldr	r2, [pc, #504]	; (8009264 <cnn_model_configure_weights+0x240>)
 800906a:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 4480);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8009072:	4a7c      	ldr	r2, [pc, #496]	; (8009264 <cnn_model_configure_weights+0x240>)
 8009074:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 4480);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800907c:	4a79      	ldr	r2, [pc, #484]	; (8009264 <cnn_model_configure_weights+0x240>)
 800907e:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_scale_array.format |= AI_FMT_FLAG_CONST;
 8009080:	4b79      	ldr	r3, [pc, #484]	; (8009268 <cnn_model_configure_weights+0x244>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009088:	4a77      	ldr	r2, [pc, #476]	; (8009268 <cnn_model_configure_weights+0x244>)
 800908a:	6013      	str	r3, [r2, #0]
    batch_normalization_1_scale_array.data = AI_PTR(weights_map[0] + 4592);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8009092:	3310      	adds	r3, #16
 8009094:	4a74      	ldr	r2, [pc, #464]	; (8009268 <cnn_model_configure_weights+0x244>)
 8009096:	6093      	str	r3, [r2, #8]
    batch_normalization_1_scale_array.data_start = AI_PTR(weights_map[0] + 4592);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 800909e:	3310      	adds	r3, #16
 80090a0:	4a71      	ldr	r2, [pc, #452]	; (8009268 <cnn_model_configure_weights+0x244>)
 80090a2:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80090a4:	4b71      	ldr	r3, [pc, #452]	; (800926c <cnn_model_configure_weights+0x248>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090ac:	4a6f      	ldr	r2, [pc, #444]	; (800926c <cnn_model_configure_weights+0x248>)
 80090ae:	6013      	str	r3, [r2, #0]
    batch_normalization_1_bias_array.data = AI_PTR(weights_map[0] + 4704);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80090b6:	4a6d      	ldr	r2, [pc, #436]	; (800926c <cnn_model_configure_weights+0x248>)
 80090b8:	6093      	str	r3, [r2, #8]
    batch_normalization_1_bias_array.data_start = AI_PTR(weights_map[0] + 4704);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80090c0:	4a6a      	ldr	r2, [pc, #424]	; (800926c <cnn_model_configure_weights+0x248>)
 80090c2:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80090c4:	4b6a      	ldr	r3, [pc, #424]	; (8009270 <cnn_model_configure_weights+0x24c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090cc:	4a68      	ldr	r2, [pc, #416]	; (8009270 <cnn_model_configure_weights+0x24c>)
 80090ce:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 4816);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80090d6:	3310      	adds	r3, #16
 80090d8:	4a65      	ldr	r2, [pc, #404]	; (8009270 <cnn_model_configure_weights+0x24c>)
 80090da:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 4816);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80090e2:	3310      	adds	r3, #16
 80090e4:	4a62      	ldr	r2, [pc, #392]	; (8009270 <cnn_model_configure_weights+0x24c>)
 80090e6:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80090e8:	4b62      	ldr	r3, [pc, #392]	; (8009274 <cnn_model_configure_weights+0x250>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f0:	4a60      	ldr	r2, [pc, #384]	; (8009274 <cnn_model_configure_weights+0x250>)
 80090f2:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 139216);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80090fa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80090fe:	4a5d      	ldr	r2, [pc, #372]	; (8009274 <cnn_model_configure_weights+0x250>)
 8009100:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 139216);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 8009108:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800910c:	4a59      	ldr	r2, [pc, #356]	; (8009274 <cnn_model_configure_weights+0x250>)
 800910e:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 8009110:	4b59      	ldr	r3, [pc, #356]	; (8009278 <cnn_model_configure_weights+0x254>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009118:	4a57      	ldr	r2, [pc, #348]	; (8009278 <cnn_model_configure_weights+0x254>)
 800911a:	6013      	str	r3, [r2, #0]
    batch_normalization_2_scale_array.data = AI_PTR(weights_map[0] + 139336);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8009122:	3348      	adds	r3, #72	; 0x48
 8009124:	4a54      	ldr	r2, [pc, #336]	; (8009278 <cnn_model_configure_weights+0x254>)
 8009126:	6093      	str	r3, [r2, #8]
    batch_normalization_2_scale_array.data_start = AI_PTR(weights_map[0] + 139336);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 800912e:	3348      	adds	r3, #72	; 0x48
 8009130:	4a51      	ldr	r2, [pc, #324]	; (8009278 <cnn_model_configure_weights+0x254>)
 8009132:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8009134:	4b51      	ldr	r3, [pc, #324]	; (800927c <cnn_model_configure_weights+0x258>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800913c:	4a4f      	ldr	r2, [pc, #316]	; (800927c <cnn_model_configure_weights+0x258>)
 800913e:	6013      	str	r3, [r2, #0]
    batch_normalization_2_bias_array.data = AI_PTR(weights_map[0] + 139456);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8009146:	33c0      	adds	r3, #192	; 0xc0
 8009148:	4a4c      	ldr	r2, [pc, #304]	; (800927c <cnn_model_configure_weights+0x258>)
 800914a:	6093      	str	r3, [r2, #8]
    batch_normalization_2_bias_array.data_start = AI_PTR(weights_map[0] + 139456);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8009152:	33c0      	adds	r3, #192	; 0xc0
 8009154:	4a49      	ldr	r2, [pc, #292]	; (800927c <cnn_model_configure_weights+0x258>)
 8009156:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8009158:	4b49      	ldr	r3, [pc, #292]	; (8009280 <cnn_model_configure_weights+0x25c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009160:	4a47      	ldr	r2, [pc, #284]	; (8009280 <cnn_model_configure_weights+0x25c>)
 8009162:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(weights_map[0] + 139576);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 800916a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800916e:	4a44      	ldr	r2, [pc, #272]	; (8009280 <cnn_model_configure_weights+0x25c>)
 8009170:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(weights_map[0] + 139576);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8009178:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800917c:	4a40      	ldr	r2, [pc, #256]	; (8009280 <cnn_model_configure_weights+0x25c>)
 800917e:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8009180:	4b40      	ldr	r3, [pc, #256]	; (8009284 <cnn_model_configure_weights+0x260>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009188:	4a3e      	ldr	r2, [pc, #248]	; (8009284 <cnn_model_configure_weights+0x260>)
 800918a:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(weights_map[0] + 262456);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8009192:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8009196:	4a3b      	ldr	r2, [pc, #236]	; (8009284 <cnn_model_configure_weights+0x260>)
 8009198:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(weights_map[0] + 262456);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80091a0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80091a4:	4a37      	ldr	r2, [pc, #220]	; (8009284 <cnn_model_configure_weights+0x260>)
 80091a6:	60d3      	str	r3, [r2, #12]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80091a8:	4b37      	ldr	r3, [pc, #220]	; (8009288 <cnn_model_configure_weights+0x264>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091b0:	4a35      	ldr	r2, [pc, #212]	; (8009288 <cnn_model_configure_weights+0x264>)
 80091b2:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(weights_map[0] + 262520);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80091ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80091be:	4a32      	ldr	r2, [pc, #200]	; (8009288 <cnn_model_configure_weights+0x264>)
 80091c0:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(weights_map[0] + 262520);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80091c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80091cc:	4a2e      	ldr	r2, [pc, #184]	; (8009288 <cnn_model_configure_weights+0x264>)
 80091ce:	60d3      	str	r3, [r2, #12]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80091d0:	4b2e      	ldr	r3, [pc, #184]	; (800928c <cnn_model_configure_weights+0x268>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091d8:	4a2c      	ldr	r2, [pc, #176]	; (800928c <cnn_model_configure_weights+0x268>)
 80091da:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(weights_map[0] + 270712);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 80091e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80091e6:	4a29      	ldr	r2, [pc, #164]	; (800928c <cnn_model_configure_weights+0x268>)
 80091e8:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(weights_map[0] + 270712);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 80091f0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80091f4:	4a25      	ldr	r2, [pc, #148]	; (800928c <cnn_model_configure_weights+0x268>)
 80091f6:	60d3      	str	r3, [r2, #12]
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80091f8:	4b25      	ldr	r3, [pc, #148]	; (8009290 <cnn_model_configure_weights+0x26c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009200:	4a23      	ldr	r2, [pc, #140]	; (8009290 <cnn_model_configure_weights+0x26c>)
 8009202:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 271224);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 800920a:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800920e:	4a20      	ldr	r2, [pc, #128]	; (8009290 <cnn_model_configure_weights+0x26c>)
 8009210:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 271224);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 8009218:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800921c:	4a1c      	ldr	r2, [pc, #112]	; (8009290 <cnn_model_configure_weights+0x26c>)
 800921e:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8009220:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <cnn_model_configure_weights+0x270>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009228:	4a1a      	ldr	r2, [pc, #104]	; (8009294 <cnn_model_configure_weights+0x270>)
 800922a:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 277368);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
 8009232:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8009236:	4a17      	ldr	r2, [pc, #92]	; (8009294 <cnn_model_configure_weights+0x270>)
 8009238:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 277368);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f503 2387 	add.w	r3, r3, #276480	; 0x43800
 8009240:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8009244:	4a13      	ldr	r2, [pc, #76]	; (8009294 <cnn_model_configure_weights+0x270>)
 8009246:	60d3      	str	r3, [r2, #12]
    return true;
 8009248:	2301      	movs	r3, #1
 800924a:	e005      	b.n	8009258 <cnn_model_configure_weights+0x234>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800924c:	2212      	movs	r2, #18
 800924e:	2130      	movs	r1, #48	; 0x30
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fa91 	bl	8009778 <ai_platform_network_set_error>
  return false;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	200000b4 	.word	0x200000b4
 8009264:	200000c4 	.word	0x200000c4
 8009268:	200000d4 	.word	0x200000d4
 800926c:	200000e4 	.word	0x200000e4
 8009270:	200000f4 	.word	0x200000f4
 8009274:	20000104 	.word	0x20000104
 8009278:	20000114 	.word	0x20000114
 800927c:	20000124 	.word	0x20000124
 8009280:	20000134 	.word	0x20000134
 8009284:	20000144 	.word	0x20000144
 8009288:	20000154 	.word	0x20000154
 800928c:	20000164 	.word	0x20000164
 8009290:	20000174 	.word	0x20000174
 8009294:	20000184 	.word	0x20000184

08009298 <ai_cnn_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_cnn_model_get_error(ai_handle network)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9ef 	bl	8009684 <ai_platform_network_get_error>
 80092a6:	4603      	mov	r3, r0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <ai_cnn_model_create>:

AI_API_ENTRY
ai_error ai_cnn_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80092ba:	2300      	movs	r3, #0
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	2305      	movs	r3, #5
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	2301      	movs	r3, #1
 80092c4:	4a04      	ldr	r2, [pc, #16]	; (80092d8 <ai_cnn_model_create+0x28>)
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fc49 	bl	8009b60 <ai_platform_network_create>
 80092ce:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000b84 	.word	0x20000b84

080092dc <ai_cnn_model_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_cnn_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <ai_cnn_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80092ec:	4b06      	ldr	r3, [pc, #24]	; (8009308 <ai_cnn_model_inputs_get+0x2c>)
 80092ee:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a06      	ldr	r2, [pc, #24]	; (800930c <ai_cnn_model_inputs_get+0x30>)
 80092f4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa43 	bl	8009784 <ai_platform_inputs_get>
 80092fe:	4603      	mov	r3, r0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20000b84 	.word	0x20000b84
 800930c:	a1c00100 	.word	0xa1c00100

08009310 <ai_cnn_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_cnn_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <ai_cnn_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8009320:	4b06      	ldr	r3, [pc, #24]	; (800933c <ai_cnn_model_outputs_get+0x2c>)
 8009322:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a06      	ldr	r2, [pc, #24]	; (8009340 <ai_cnn_model_outputs_get+0x30>)
 8009328:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fb1d 	bl	800996c <ai_platform_outputs_get>
 8009332:	4603      	mov	r3, r0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000b84 	.word	0x20000b84
 8009340:	a1c00100 	.word	0xa1c00100

08009344 <ai_cnn_model_init>:
}

AI_API_ENTRY
ai_bool ai_cnn_model_init(
  ai_handle network, const ai_network_params* params)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fce5 	bl	8009d20 <ai_platform_network_init>
 8009356:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <ai_cnn_model_init+0x1e>
 800935e:	2300      	movs	r3, #0
 8009360:	e028      	b.n	80093b4 <ai_cnn_model_init+0x70>

  ai_bool ok = true;
 8009362:	2301      	movs	r3, #1
 8009364:	72fb      	strb	r3, [r7, #11]
  ok &= cnn_model_configure_weights(net_ctx, params);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7ff fe5b 	bl	8009024 <cnn_model_configure_weights>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	7afb      	ldrb	r3, [r7, #11]
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	bf14      	ite	ne
 800937a:	2301      	movne	r3, #1
 800937c:	2300      	moveq	r3, #0
 800937e:	72fb      	strb	r3, [r7, #11]
  ok &= cnn_model_configure_activations(net_ctx, params);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fdde 	bl	8008f44 <cnn_model_configure_activations>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	4013      	ands	r3, r2
 8009390:	2b00      	cmp	r3, #0
 8009392:	bf14      	ite	ne
 8009394:	2301      	movne	r3, #1
 8009396:	2300      	moveq	r3, #0
 8009398:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fdcc 	bl	8009f38 <ai_platform_network_post_init>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	7afb      	ldrb	r3, [r7, #11]
 80093a6:	4013      	ands	r3, r2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bf14      	ite	ne
 80093ac:	2301      	movne	r3, #1
 80093ae:	2300      	moveq	r3, #0
 80093b0:	72fb      	strb	r3, [r7, #11]

  return ok;
 80093b2:	7afb      	ldrb	r3, [r7, #11]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <ai_cnn_model_run>:


AI_API_ENTRY
ai_i32 ai_cnn_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 fe47 	bl	800a060 <ai_platform_network_process>
 80093d2:	4603      	mov	r3, r0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <ai_cnn_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_cnn_model_data_activations_buffer_get(const ai_handle ptr)
{
 80093dc:	b4b0      	push	{r4, r5, r7}
 80093de:	b08f      	sub	sp, #60	; 0x3c
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80093e6:	4b15      	ldr	r3, [pc, #84]	; (800943c <ai_cnn_model_data_activations_buffer_get+0x60>)
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	623b      	str	r3, [r7, #32]
 80093ee:	2300      	movs	r3, #0
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
 80093f2:	2300      	movs	r3, #0
 80093f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80093f6:	f647 43d8 	movw	r3, #31960	; 0x7cd8
 80093fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	2204      	movs	r2, #4
 8009406:	f362 231f 	bfi	r3, r2, #8, #24
 800940a:	633b      	str	r3, [r7, #48]	; 0x30
 800940c:	4b0c      	ldr	r3, [pc, #48]	; (8009440 <ai_cnn_model_data_activations_buffer_get+0x64>)
 800940e:	f107 040c 	add.w	r4, r7, #12
 8009412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009418:	f107 030c 	add.w	r3, r7, #12
 800941c:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_CNN_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_CNN_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_CNN_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	461d      	mov	r5, r3
 8009422:	f107 041c 	add.w	r4, r7, #28
 8009426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800942a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800942e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	373c      	adds	r7, #60	; 0x3c
 8009436:	46bd      	mov	sp, r7
 8009438:	bcb0      	pop	{r4, r5, r7}
 800943a:	4770      	bx	lr
 800943c:	00040440 	.word	0x00040440
 8009440:	080109fc 	.word	0x080109fc

08009444 <ai_cnn_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_cnn_model_data_weights_buffer_get(const ai_handle ptr)
{
 8009444:	b4b0      	push	{r4, r5, r7}
 8009446:	b08f      	sub	sp, #60	; 0x3c
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <ai_cnn_model_data_weights_buffer_get+0x60>)
 8009450:	61fb      	str	r3, [r7, #28]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	623b      	str	r3, [r7, #32]
 8009456:	2300      	movs	r3, #0
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
 800945a:	2300      	movs	r3, #0
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
 800945e:	4b12      	ldr	r3, [pc, #72]	; (80094a8 <ai_cnn_model_data_weights_buffer_get+0x64>)
 8009460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009462:	2301      	movs	r3, #1
 8009464:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	2204      	movs	r2, #4
 800946c:	f362 231f 	bfi	r3, r2, #8, #24
 8009470:	633b      	str	r3, [r7, #48]	; 0x30
 8009472:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <ai_cnn_model_data_weights_buffer_get+0x68>)
 8009474:	f107 040c 	add.w	r4, r7, #12
 8009478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800947a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800947e:	f107 030c 	add.w	r3, r7, #12
 8009482:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_CNN_MODEL_DATA_WEIGHTS_SIZE, 1, AI_CNN_MODEL_DATA_WEIGHTS_COUNT),
    AI_CNN_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	461d      	mov	r5, r3
 8009488:	f107 041c 	add.w	r4, r7, #28
 800948c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800948e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009490:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009494:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	373c      	adds	r7, #60	; 0x3c
 800949c:	46bd      	mov	sp, r7
 800949e:	bcb0      	pop	{r4, r5, r7}
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	40040440 	.word	0x40040440
 80094a8:	00043ba8 	.word	0x00043ba8
 80094ac:	08010a0c 	.word	0x08010a0c

080094b0 <ai_cnn_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_cnn_model_data_weights_get(void)
{
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_cnn_model_cnn_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_cnn_model_weights_table);
 80094b4:	4b02      	ldr	r3, [pc, #8]	; (80094c0 <ai_cnn_model_data_weights_get+0x10>)

}
 80094b6:	4618      	mov	r0, r3
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	08054668 	.word	0x08054668

080094c4 <ai_buffer_get_size>:
 80094c4:	b358      	cbz	r0, 800951e <ai_buffer_get_size+0x5a>
 80094c6:	b430      	push	{r4, r5}
 80094c8:	6803      	ldr	r3, [r0, #0]
 80094ca:	4d15      	ldr	r5, [pc, #84]	; (8009520 <ai_buffer_get_size+0x5c>)
 80094cc:	6984      	ldr	r4, [r0, #24]
 80094ce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80094d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80094d6:	42ab      	cmp	r3, r5
 80094d8:	6862      	ldr	r2, [r4, #4]
 80094da:	d01a      	beq.n	8009512 <ai_buffer_get_size+0x4e>
 80094dc:	7d03      	ldrb	r3, [r0, #20]
 80094de:	6941      	ldr	r1, [r0, #20]
 80094e0:	f1a3 0301 	sub.w	r3, r3, #1
 80094e4:	fab3 f383 	clz	r3, r3
 80094e8:	095b      	lsrs	r3, r3, #5
 80094ea:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80094ee:	428b      	cmp	r3, r1
 80094f0:	da0b      	bge.n	800950a <ai_buffer_get_size+0x46>
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d102      	bne.n	80094fc <ai_buffer_get_size+0x38>
 80094f6:	2902      	cmp	r1, #2
 80094f8:	d007      	beq.n	800950a <ai_buffer_get_size+0x46>
 80094fa:	2302      	movs	r3, #2
 80094fc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009500:	3301      	adds	r3, #1
 8009502:	428b      	cmp	r3, r1
 8009504:	fb00 f202 	mul.w	r2, r0, r2
 8009508:	d1f3      	bne.n	80094f2 <ai_buffer_get_size+0x2e>
 800950a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800950e:	bc30      	pop	{r4, r5}
 8009510:	4770      	bx	lr
 8009512:	2900      	cmp	r1, #0
 8009514:	d0e2      	beq.n	80094dc <ai_buffer_get_size+0x18>
 8009516:	321f      	adds	r2, #31
 8009518:	f022 021f 	bic.w	r2, r2, #31
 800951c:	e7de      	b.n	80094dc <ai_buffer_get_size+0x18>
 800951e:	4770      	bx	lr
 8009520:	000400c0 	.word	0x000400c0

08009524 <ai_buffer_array_sane>:
 8009524:	b138      	cbz	r0, 8009536 <ai_buffer_array_sane+0x12>
 8009526:	6843      	ldr	r3, [r0, #4]
 8009528:	b123      	cbz	r3, 8009534 <ai_buffer_array_sane+0x10>
 800952a:	8840      	ldrh	r0, [r0, #2]
 800952c:	3000      	adds	r0, #0
 800952e:	bf18      	it	ne
 8009530:	2001      	movne	r0, #1
 8009532:	4770      	bx	lr
 8009534:	4618      	mov	r0, r3
 8009536:	4770      	bx	lr

08009538 <_ai_platform_acquire_crc>:
 8009538:	2001      	movs	r0, #1
 800953a:	4770      	bx	lr

0800953c <_ai_platform_release_crc>:
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop

08009540 <ai_platform_get_weights_map>:
 8009540:	b192      	cbz	r2, 8009568 <ai_platform_get_weights_map+0x28>
 8009542:	b188      	cbz	r0, 8009568 <ai_platform_get_weights_map+0x28>
 8009544:	b181      	cbz	r1, 8009568 <ai_platform_get_weights_map+0x28>
 8009546:	b570      	push	{r4, r5, r6, lr}
 8009548:	4b24      	ldr	r3, [pc, #144]	; (80095dc <ai_platform_get_weights_map+0x9c>)
 800954a:	6814      	ldr	r4, [r2, #0]
 800954c:	429c      	cmp	r4, r3
 800954e:	d00d      	beq.n	800956c <ai_platform_get_weights_map+0x2c>
 8009550:	6854      	ldr	r4, [r2, #4]
 8009552:	b194      	cbz	r4, 800957a <ai_platform_get_weights_map+0x3a>
 8009554:	6825      	ldr	r5, [r4, #0]
 8009556:	429d      	cmp	r5, r3
 8009558:	d027      	beq.n	80095aa <ai_platform_get_weights_map+0x6a>
 800955a:	6004      	str	r4, [r0, #0]
 800955c:	f1a1 0001 	sub.w	r0, r1, #1
 8009560:	fab0 f080 	clz	r0, r0
 8009564:	0940      	lsrs	r0, r0, #5
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	2000      	movs	r0, #0
 800956a:	4770      	bx	lr
 800956c:	4605      	mov	r5, r0
 800956e:	1d10      	adds	r0, r2, #4
 8009570:	4616      	mov	r6, r2
 8009572:	460c      	mov	r4, r1
 8009574:	f7ff ffd6 	bl	8009524 <ai_buffer_array_sane>
 8009578:	b908      	cbnz	r0, 800957e <ai_platform_get_weights_map+0x3e>
 800957a:	2000      	movs	r0, #0
 800957c:	bd70      	pop	{r4, r5, r6, pc}
 800957e:	88f3      	ldrh	r3, [r6, #6]
 8009580:	429c      	cmp	r4, r3
 8009582:	d1fa      	bne.n	800957a <ai_platform_get_weights_map+0x3a>
 8009584:	2100      	movs	r1, #0
 8009586:	1f2b      	subs	r3, r5, #4
 8009588:	4608      	mov	r0, r1
 800958a:	68b2      	ldr	r2, [r6, #8]
 800958c:	440a      	add	r2, r1
 800958e:	311c      	adds	r1, #28
 8009590:	6852      	ldr	r2, [r2, #4]
 8009592:	b12a      	cbz	r2, 80095a0 <ai_platform_get_weights_map+0x60>
 8009594:	3001      	adds	r0, #1
 8009596:	4284      	cmp	r4, r0
 8009598:	f843 2f04 	str.w	r2, [r3, #4]!
 800959c:	d1f5      	bne.n	800958a <ai_platform_get_weights_map+0x4a>
 800959e:	4620      	mov	r0, r4
 80095a0:	1a20      	subs	r0, r4, r0
 80095a2:	fab0 f080 	clz	r0, r0
 80095a6:	0940      	lsrs	r0, r0, #5
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	6863      	ldr	r3, [r4, #4]
 80095ac:	42ab      	cmp	r3, r5
 80095ae:	f104 0404 	add.w	r4, r4, #4
 80095b2:	d0e2      	beq.n	800957a <ai_platform_get_weights_map+0x3a>
 80095b4:	3804      	subs	r0, #4
 80095b6:	4626      	mov	r6, r4
 80095b8:	2200      	movs	r2, #0
 80095ba:	e003      	b.n	80095c4 <ai_platform_get_weights_map+0x84>
 80095bc:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	d0da      	beq.n	800957a <ai_platform_get_weights_map+0x3a>
 80095c4:	3201      	adds	r2, #1
 80095c6:	4291      	cmp	r1, r2
 80095c8:	f840 3f04 	str.w	r3, [r0, #4]!
 80095cc:	d1f6      	bne.n	80095bc <ai_platform_get_weights_map+0x7c>
 80095ce:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80095d2:	4b02      	ldr	r3, [pc, #8]	; (80095dc <ai_platform_get_weights_map+0x9c>)
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d1d0      	bne.n	800957a <ai_platform_get_weights_map+0x3a>
 80095d8:	2001      	movs	r0, #1
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	a1facade 	.word	0xa1facade

080095e0 <ai_platform_get_activations_map>:
 80095e0:	b192      	cbz	r2, 8009608 <ai_platform_get_activations_map+0x28>
 80095e2:	b188      	cbz	r0, 8009608 <ai_platform_get_activations_map+0x28>
 80095e4:	b181      	cbz	r1, 8009608 <ai_platform_get_activations_map+0x28>
 80095e6:	b570      	push	{r4, r5, r6, lr}
 80095e8:	4b25      	ldr	r3, [pc, #148]	; (8009680 <ai_platform_get_activations_map+0xa0>)
 80095ea:	6814      	ldr	r4, [r2, #0]
 80095ec:	429c      	cmp	r4, r3
 80095ee:	d00d      	beq.n	800960c <ai_platform_get_activations_map+0x2c>
 80095f0:	6a14      	ldr	r4, [r2, #32]
 80095f2:	b19c      	cbz	r4, 800961c <ai_platform_get_activations_map+0x3c>
 80095f4:	6825      	ldr	r5, [r4, #0]
 80095f6:	429d      	cmp	r5, r3
 80095f8:	d028      	beq.n	800964c <ai_platform_get_activations_map+0x6c>
 80095fa:	6004      	str	r4, [r0, #0]
 80095fc:	f1a1 0001 	sub.w	r0, r1, #1
 8009600:	fab0 f080 	clz	r0, r0
 8009604:	0940      	lsrs	r0, r0, #5
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	2000      	movs	r0, #0
 800960a:	4770      	bx	lr
 800960c:	4605      	mov	r5, r0
 800960e:	f102 000c 	add.w	r0, r2, #12
 8009612:	4616      	mov	r6, r2
 8009614:	460c      	mov	r4, r1
 8009616:	f7ff ff85 	bl	8009524 <ai_buffer_array_sane>
 800961a:	b908      	cbnz	r0, 8009620 <ai_platform_get_activations_map+0x40>
 800961c:	2000      	movs	r0, #0
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	89f3      	ldrh	r3, [r6, #14]
 8009622:	429c      	cmp	r4, r3
 8009624:	d1fa      	bne.n	800961c <ai_platform_get_activations_map+0x3c>
 8009626:	2100      	movs	r1, #0
 8009628:	1f2b      	subs	r3, r5, #4
 800962a:	4608      	mov	r0, r1
 800962c:	6932      	ldr	r2, [r6, #16]
 800962e:	440a      	add	r2, r1
 8009630:	311c      	adds	r1, #28
 8009632:	6852      	ldr	r2, [r2, #4]
 8009634:	b12a      	cbz	r2, 8009642 <ai_platform_get_activations_map+0x62>
 8009636:	3001      	adds	r0, #1
 8009638:	4284      	cmp	r4, r0
 800963a:	f843 2f04 	str.w	r2, [r3, #4]!
 800963e:	d1f5      	bne.n	800962c <ai_platform_get_activations_map+0x4c>
 8009640:	4620      	mov	r0, r4
 8009642:	1a20      	subs	r0, r4, r0
 8009644:	fab0 f080 	clz	r0, r0
 8009648:	0940      	lsrs	r0, r0, #5
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	42ab      	cmp	r3, r5
 8009650:	f104 0404 	add.w	r4, r4, #4
 8009654:	d0e2      	beq.n	800961c <ai_platform_get_activations_map+0x3c>
 8009656:	3804      	subs	r0, #4
 8009658:	4626      	mov	r6, r4
 800965a:	2200      	movs	r2, #0
 800965c:	e003      	b.n	8009666 <ai_platform_get_activations_map+0x86>
 800965e:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8009662:	42ab      	cmp	r3, r5
 8009664:	d0da      	beq.n	800961c <ai_platform_get_activations_map+0x3c>
 8009666:	3201      	adds	r2, #1
 8009668:	4291      	cmp	r1, r2
 800966a:	f840 3f04 	str.w	r3, [r0, #4]!
 800966e:	d1f6      	bne.n	800965e <ai_platform_get_activations_map+0x7e>
 8009670:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8009674:	4b02      	ldr	r3, [pc, #8]	; (8009680 <ai_platform_get_activations_map+0xa0>)
 8009676:	429a      	cmp	r2, r3
 8009678:	d1d0      	bne.n	800961c <ai_platform_get_activations_map+0x3c>
 800967a:	2001      	movs	r0, #1
 800967c:	bd70      	pop	{r4, r5, r6, pc}
 800967e:	bf00      	nop
 8009680:	a1facade 	.word	0xa1facade

08009684 <ai_platform_network_get_error>:
 8009684:	b510      	push	{r4, lr}
 8009686:	b120      	cbz	r0, 8009692 <ai_platform_network_get_error+0xe>
 8009688:	4b32      	ldr	r3, [pc, #200]	; (8009754 <ai_platform_network_get_error+0xd0>)
 800968a:	6802      	ldr	r2, [r0, #0]
 800968c:	429a      	cmp	r2, r3
 800968e:	4604      	mov	r4, r0
 8009690:	d02e      	beq.n	80096f0 <ai_platform_network_get_error+0x6c>
 8009692:	4a31      	ldr	r2, [pc, #196]	; (8009758 <ai_platform_network_get_error+0xd4>)
 8009694:	6813      	ldr	r3, [r2, #0]
 8009696:	f023 0301 	bic.w	r3, r3, #1
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	f7ff ff4c 	bl	8009538 <_ai_platform_acquire_crc>
 80096a0:	4b2e      	ldr	r3, [pc, #184]	; (800975c <ai_platform_network_get_error+0xd8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ac:	d00d      	beq.n	80096ca <ai_platform_network_get_error+0x46>
 80096ae:	4b2c      	ldr	r3, [pc, #176]	; (8009760 <ai_platform_network_get_error+0xdc>)
 80096b0:	2201      	movs	r2, #1
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	d1fc      	bne.n	80096b4 <ai_platform_network_get_error+0x30>
 80096ba:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <ai_platform_network_get_error+0xe0>)
 80096bc:	4a2a      	ldr	r2, [pc, #168]	; (8009768 <ai_platform_network_get_error+0xe4>)
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b2a      	ldr	r3, [pc, #168]	; (800976c <ai_platform_network_get_error+0xe8>)
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d00d      	beq.n	80096e4 <ai_platform_network_get_error+0x60>
 80096c8:	e7fe      	b.n	80096c8 <ai_platform_network_get_error+0x44>
 80096ca:	4b29      	ldr	r3, [pc, #164]	; (8009770 <ai_platform_network_get_error+0xec>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	d1fc      	bne.n	80096d0 <ai_platform_network_get_error+0x4c>
 80096d6:	4b27      	ldr	r3, [pc, #156]	; (8009774 <ai_platform_network_get_error+0xf0>)
 80096d8:	4a23      	ldr	r2, [pc, #140]	; (8009768 <ai_platform_network_get_error+0xe4>)
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	4b23      	ldr	r3, [pc, #140]	; (800976c <ai_platform_network_get_error+0xe8>)
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d104      	bne.n	80096ee <ai_platform_network_get_error+0x6a>
 80096e4:	f7ff ff2a 	bl	800953c <_ai_platform_release_crc>
 80096e8:	f241 0010 	movw	r0, #4112	; 0x1010
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	e7fe      	b.n	80096ee <ai_platform_network_get_error+0x6a>
 80096f0:	4a19      	ldr	r2, [pc, #100]	; (8009758 <ai_platform_network_get_error+0xd4>)
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	f023 0301 	bic.w	r3, r3, #1
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	f7ff ff1d 	bl	8009538 <_ai_platform_acquire_crc>
 80096fe:	4b17      	ldr	r3, [pc, #92]	; (800975c <ai_platform_network_get_error+0xd8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800970a:	d00d      	beq.n	8009728 <ai_platform_network_get_error+0xa4>
 800970c:	4b14      	ldr	r3, [pc, #80]	; (8009760 <ai_platform_network_get_error+0xdc>)
 800970e:	2201      	movs	r2, #1
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	2a00      	cmp	r2, #0
 8009716:	d1fc      	bne.n	8009712 <ai_platform_network_get_error+0x8e>
 8009718:	4b12      	ldr	r3, [pc, #72]	; (8009764 <ai_platform_network_get_error+0xe0>)
 800971a:	4a13      	ldr	r2, [pc, #76]	; (8009768 <ai_platform_network_get_error+0xe4>)
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <ai_platform_network_get_error+0xe8>)
 8009722:	429a      	cmp	r2, r3
 8009724:	d00e      	beq.n	8009744 <ai_platform_network_get_error+0xc0>
 8009726:	e7fe      	b.n	8009726 <ai_platform_network_get_error+0xa2>
 8009728:	4b11      	ldr	r3, [pc, #68]	; (8009770 <ai_platform_network_get_error+0xec>)
 800972a:	2201      	movs	r2, #1
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	2a00      	cmp	r2, #0
 8009732:	d1fc      	bne.n	800972e <ai_platform_network_get_error+0xaa>
 8009734:	4b0f      	ldr	r3, [pc, #60]	; (8009774 <ai_platform_network_get_error+0xf0>)
 8009736:	4a0c      	ldr	r2, [pc, #48]	; (8009768 <ai_platform_network_get_error+0xe4>)
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	4b0b      	ldr	r3, [pc, #44]	; (800976c <ai_platform_network_get_error+0xe8>)
 800973e:	429a      	cmp	r2, r3
 8009740:	d000      	beq.n	8009744 <ai_platform_network_get_error+0xc0>
 8009742:	e7fe      	b.n	8009742 <ai_platform_network_get_error+0xbe>
 8009744:	f7ff fefa 	bl	800953c <_ai_platform_release_crc>
 8009748:	f104 0010 	add.w	r0, r4, #16
 800974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009750:	f000 bef4 	b.w	800a53c <core_get_error>
 8009754:	a1c00100 	.word	0xa1c00100
 8009758:	e0002000 	.word	0xe0002000
 800975c:	e0042000 	.word	0xe0042000
 8009760:	58024c08 	.word	0x58024c08
 8009764:	58024c00 	.word	0x58024c00
 8009768:	f407a5c2 	.word	0xf407a5c2
 800976c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009770:	40023008 	.word	0x40023008
 8009774:	40023000 	.word	0x40023000

08009778 <ai_platform_network_set_error>:
 8009778:	b110      	cbz	r0, 8009780 <ai_platform_network_set_error+0x8>
 800977a:	3010      	adds	r0, #16
 800977c:	f000 bee4 	b.w	800a548 <core_set_error>
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop

08009784 <ai_platform_inputs_get>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	b085      	sub	sp, #20
 800978a:	2800      	cmp	r0, #0
 800978c:	f000 80a1 	beq.w	80098d2 <ai_platform_inputs_get+0x14e>
 8009790:	4b6d      	ldr	r3, [pc, #436]	; (8009948 <ai_platform_inputs_get+0x1c4>)
 8009792:	6802      	ldr	r2, [r0, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	4607      	mov	r7, r0
 8009798:	f040 809b 	bne.w	80098d2 <ai_platform_inputs_get+0x14e>
 800979c:	4a6b      	ldr	r2, [pc, #428]	; (800994c <ai_platform_inputs_get+0x1c8>)
 800979e:	6813      	ldr	r3, [r2, #0]
 80097a0:	f023 0301 	bic.w	r3, r3, #1
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	468b      	mov	fp, r1
 80097a8:	f7ff fec6 	bl	8009538 <_ai_platform_acquire_crc>
 80097ac:	4b68      	ldr	r3, [pc, #416]	; (8009950 <ai_platform_inputs_get+0x1cc>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b8:	d00d      	beq.n	80097d6 <ai_platform_inputs_get+0x52>
 80097ba:	4b66      	ldr	r3, [pc, #408]	; (8009954 <ai_platform_inputs_get+0x1d0>)
 80097bc:	2201      	movs	r2, #1
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d1fc      	bne.n	80097c0 <ai_platform_inputs_get+0x3c>
 80097c6:	4b64      	ldr	r3, [pc, #400]	; (8009958 <ai_platform_inputs_get+0x1d4>)
 80097c8:	4a64      	ldr	r2, [pc, #400]	; (800995c <ai_platform_inputs_get+0x1d8>)
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b64      	ldr	r3, [pc, #400]	; (8009960 <ai_platform_inputs_get+0x1dc>)
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d00d      	beq.n	80097f0 <ai_platform_inputs_get+0x6c>
 80097d4:	e7fe      	b.n	80097d4 <ai_platform_inputs_get+0x50>
 80097d6:	4b63      	ldr	r3, [pc, #396]	; (8009964 <ai_platform_inputs_get+0x1e0>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	2a00      	cmp	r2, #0
 80097e0:	d1fc      	bne.n	80097dc <ai_platform_inputs_get+0x58>
 80097e2:	4b61      	ldr	r3, [pc, #388]	; (8009968 <ai_platform_inputs_get+0x1e4>)
 80097e4:	4a5d      	ldr	r2, [pc, #372]	; (800995c <ai_platform_inputs_get+0x1d8>)
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	4b5d      	ldr	r3, [pc, #372]	; (8009960 <ai_platform_inputs_get+0x1dc>)
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d16f      	bne.n	80098d0 <ai_platform_inputs_get+0x14c>
 80097f0:	f7ff fea4 	bl	800953c <_ai_platform_release_crc>
 80097f4:	f1bb 0f00 	cmp.w	fp, #0
 80097f8:	d002      	beq.n	8009800 <ai_platform_inputs_get+0x7c>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f8ab 3000 	strh.w	r3, [fp]
 8009800:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8081 	beq.w	800990a <ai_platform_inputs_get+0x186>
 8009808:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800980a:	2e00      	cmp	r6, #0
 800980c:	d07d      	beq.n	800990a <ai_platform_inputs_get+0x186>
 800980e:	8833      	ldrh	r3, [r6, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d07a      	beq.n	800990a <ai_platform_inputs_get+0x186>
 8009814:	6873      	ldr	r3, [r6, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d077      	beq.n	800990a <ai_platform_inputs_get+0x186>
 800981a:	681d      	ldr	r5, [r3, #0]
 800981c:	2d00      	cmp	r5, #0
 800981e:	d074      	beq.n	800990a <ai_platform_inputs_get+0x186>
 8009820:	f04f 0800 	mov.w	r8, #0
 8009824:	f8cd b008 	str.w	fp, [sp, #8]
 8009828:	46c1      	mov	r9, r8
 800982a:	46bb      	mov	fp, r7
 800982c:	68b0      	ldr	r0, [r6, #8]
 800982e:	69aa      	ldr	r2, [r5, #24]
 8009830:	68ab      	ldr	r3, [r5, #8]
 8009832:	6844      	ldr	r4, [r0, #4]
 8009834:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8009838:	6810      	ldr	r0, [r2, #0]
 800983a:	68ef      	ldr	r7, [r5, #12]
 800983c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009840:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	9203      	str	r2, [sp, #12]
 8009848:	f002 fde0 	bl	800c40c <ai_array_to_buffer_fmt>
 800984c:	9a03      	ldr	r2, [sp, #12]
 800984e:	4601      	mov	r1, r0
 8009850:	69a8      	ldr	r0, [r5, #24]
 8009852:	eb0a 0302 	add.w	r3, sl, r2
 8009856:	4444      	add	r4, r8
 8009858:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800985c:	b16b      	cbz	r3, 800987a <ai_platform_inputs_get+0xf6>
 800985e:	2000      	movs	r0, #0
 8009860:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8009864:	6828      	ldr	r0, [r5, #0]
 8009866:	6058      	str	r0, [r3, #4]
 8009868:	2800      	cmp	r0, #0
 800986a:	d058      	beq.n	800991e <ai_platform_inputs_get+0x19a>
 800986c:	8840      	ldrh	r0, [r0, #2]
 800986e:	2800      	cmp	r0, #0
 8009870:	d055      	beq.n	800991e <ai_platform_inputs_get+0x19a>
 8009872:	2001      	movs	r0, #1
 8009874:	f84a 0002 	str.w	r0, [sl, r2]
 8009878:	69a8      	ldr	r0, [r5, #24]
 800987a:	6842      	ldr	r2, [r0, #4]
 800987c:	6122      	str	r2, [r4, #16]
 800987e:	f04f 0001 	mov.w	r0, #1
 8009882:	7520      	strb	r0, [r4, #20]
 8009884:	9a01      	ldr	r2, [sp, #4]
 8009886:	6960      	ldr	r0, [r4, #20]
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	f362 201f 	bfi	r0, r2, #8, #24
 800988e:	e9c4 1e00 	strd	r1, lr, [r4]
 8009892:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8009896:	2300      	movs	r3, #0
 8009898:	60e3      	str	r3, [r4, #12]
 800989a:	8830      	ldrh	r0, [r6, #0]
 800989c:	f109 0301 	add.w	r3, r9, #1
 80098a0:	4283      	cmp	r3, r0
 80098a2:	4699      	mov	r9, r3
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	d207      	bcs.n	80098b8 <ai_platform_inputs_get+0x134>
 80098a8:	6870      	ldr	r0, [r6, #4]
 80098aa:	b128      	cbz	r0, 80098b8 <ai_platform_inputs_get+0x134>
 80098ac:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80098b0:	f108 081c 	add.w	r8, r8, #28
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	d1b9      	bne.n	800982c <ai_platform_inputs_get+0xa8>
 80098b8:	465f      	mov	r7, fp
 80098ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 80098be:	b322      	cbz	r2, 800990a <ai_platform_inputs_get+0x186>
 80098c0:	68b3      	ldr	r3, [r6, #8]
 80098c2:	6858      	ldr	r0, [r3, #4]
 80098c4:	f1bb 0f00 	cmp.w	fp, #0
 80098c8:	d026      	beq.n	8009918 <ai_platform_inputs_get+0x194>
 80098ca:	f8ab 2000 	strh.w	r2, [fp]
 80098ce:	e023      	b.n	8009918 <ai_platform_inputs_get+0x194>
 80098d0:	e7fe      	b.n	80098d0 <ai_platform_inputs_get+0x14c>
 80098d2:	4a1e      	ldr	r2, [pc, #120]	; (800994c <ai_platform_inputs_get+0x1c8>)
 80098d4:	6813      	ldr	r3, [r2, #0]
 80098d6:	f023 0301 	bic.w	r3, r3, #1
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	f7ff fe2c 	bl	8009538 <_ai_platform_acquire_crc>
 80098e0:	4b1b      	ldr	r3, [pc, #108]	; (8009950 <ai_platform_inputs_get+0x1cc>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ec:	d01a      	beq.n	8009924 <ai_platform_inputs_get+0x1a0>
 80098ee:	4b19      	ldr	r3, [pc, #100]	; (8009954 <ai_platform_inputs_get+0x1d0>)
 80098f0:	2201      	movs	r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	d1fc      	bne.n	80098f4 <ai_platform_inputs_get+0x170>
 80098fa:	4b17      	ldr	r3, [pc, #92]	; (8009958 <ai_platform_inputs_get+0x1d4>)
 80098fc:	4a17      	ldr	r2, [pc, #92]	; (800995c <ai_platform_inputs_get+0x1d8>)
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b17      	ldr	r3, [pc, #92]	; (8009960 <ai_platform_inputs_get+0x1dc>)
 8009904:	429a      	cmp	r2, r3
 8009906:	d01b      	beq.n	8009940 <ai_platform_inputs_get+0x1bc>
 8009908:	e7fe      	b.n	8009908 <ai_platform_inputs_get+0x184>
 800990a:	f107 0010 	add.w	r0, r7, #16
 800990e:	2218      	movs	r2, #24
 8009910:	2111      	movs	r1, #17
 8009912:	f000 fe19 	bl	800a548 <core_set_error>
 8009916:	2000      	movs	r0, #0
 8009918:	b005      	add	sp, #20
 800991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991e:	69a8      	ldr	r0, [r5, #24]
 8009920:	2300      	movs	r3, #0
 8009922:	e7aa      	b.n	800987a <ai_platform_inputs_get+0xf6>
 8009924:	4b0f      	ldr	r3, [pc, #60]	; (8009964 <ai_platform_inputs_get+0x1e0>)
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	2a00      	cmp	r2, #0
 800992e:	d1fc      	bne.n	800992a <ai_platform_inputs_get+0x1a6>
 8009930:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <ai_platform_inputs_get+0x1e4>)
 8009932:	4a0a      	ldr	r2, [pc, #40]	; (800995c <ai_platform_inputs_get+0x1d8>)
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b09      	ldr	r3, [pc, #36]	; (8009960 <ai_platform_inputs_get+0x1dc>)
 800993a:	429a      	cmp	r2, r3
 800993c:	d000      	beq.n	8009940 <ai_platform_inputs_get+0x1bc>
 800993e:	e7fe      	b.n	800993e <ai_platform_inputs_get+0x1ba>
 8009940:	f7ff fdfc 	bl	800953c <_ai_platform_release_crc>
 8009944:	2000      	movs	r0, #0
 8009946:	e7e7      	b.n	8009918 <ai_platform_inputs_get+0x194>
 8009948:	a1c00100 	.word	0xa1c00100
 800994c:	e0002000 	.word	0xe0002000
 8009950:	e0042000 	.word	0xe0042000
 8009954:	58024c08 	.word	0x58024c08
 8009958:	58024c00 	.word	0x58024c00
 800995c:	f407a5c2 	.word	0xf407a5c2
 8009960:	b5e8b5cd 	.word	0xb5e8b5cd
 8009964:	40023008 	.word	0x40023008
 8009968:	40023000 	.word	0x40023000

0800996c <ai_platform_outputs_get>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	b085      	sub	sp, #20
 8009972:	2800      	cmp	r0, #0
 8009974:	f000 80a9 	beq.w	8009aca <ai_platform_outputs_get+0x15e>
 8009978:	4b70      	ldr	r3, [pc, #448]	; (8009b3c <ai_platform_outputs_get+0x1d0>)
 800997a:	6802      	ldr	r2, [r0, #0]
 800997c:	429a      	cmp	r2, r3
 800997e:	4607      	mov	r7, r0
 8009980:	f040 80a3 	bne.w	8009aca <ai_platform_outputs_get+0x15e>
 8009984:	4a6e      	ldr	r2, [pc, #440]	; (8009b40 <ai_platform_outputs_get+0x1d4>)
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	f023 0301 	bic.w	r3, r3, #1
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	468b      	mov	fp, r1
 8009990:	f7ff fdd2 	bl	8009538 <_ai_platform_acquire_crc>
 8009994:	4b6b      	ldr	r3, [pc, #428]	; (8009b44 <ai_platform_outputs_get+0x1d8>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800999c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099a0:	d00d      	beq.n	80099be <ai_platform_outputs_get+0x52>
 80099a2:	4b69      	ldr	r3, [pc, #420]	; (8009b48 <ai_platform_outputs_get+0x1dc>)
 80099a4:	2201      	movs	r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	d1fc      	bne.n	80099a8 <ai_platform_outputs_get+0x3c>
 80099ae:	4b67      	ldr	r3, [pc, #412]	; (8009b4c <ai_platform_outputs_get+0x1e0>)
 80099b0:	4a67      	ldr	r2, [pc, #412]	; (8009b50 <ai_platform_outputs_get+0x1e4>)
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4b67      	ldr	r3, [pc, #412]	; (8009b54 <ai_platform_outputs_get+0x1e8>)
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d00d      	beq.n	80099d8 <ai_platform_outputs_get+0x6c>
 80099bc:	e7fe      	b.n	80099bc <ai_platform_outputs_get+0x50>
 80099be:	4b66      	ldr	r3, [pc, #408]	; (8009b58 <ai_platform_outputs_get+0x1ec>)
 80099c0:	2201      	movs	r2, #1
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	d1fc      	bne.n	80099c4 <ai_platform_outputs_get+0x58>
 80099ca:	4b64      	ldr	r3, [pc, #400]	; (8009b5c <ai_platform_outputs_get+0x1f0>)
 80099cc:	4a60      	ldr	r2, [pc, #384]	; (8009b50 <ai_platform_outputs_get+0x1e4>)
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b60      	ldr	r3, [pc, #384]	; (8009b54 <ai_platform_outputs_get+0x1e8>)
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d177      	bne.n	8009ac8 <ai_platform_outputs_get+0x15c>
 80099d8:	f7ff fdb0 	bl	800953c <_ai_platform_release_crc>
 80099dc:	f1bb 0f00 	cmp.w	fp, #0
 80099e0:	d002      	beq.n	80099e8 <ai_platform_outputs_get+0x7c>
 80099e2:	2300      	movs	r3, #0
 80099e4:	f8ab 3000 	strh.w	r3, [fp]
 80099e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	f240 809a 	bls.w	8009b24 <ai_platform_outputs_get+0x1b8>
 80099f0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80099f2:	f116 0f0c 	cmn.w	r6, #12
 80099f6:	f000 8095 	beq.w	8009b24 <ai_platform_outputs_get+0x1b8>
 80099fa:	89b3      	ldrh	r3, [r6, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8091 	beq.w	8009b24 <ai_platform_outputs_get+0x1b8>
 8009a02:	6933      	ldr	r3, [r6, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 808d 	beq.w	8009b24 <ai_platform_outputs_get+0x1b8>
 8009a0a:	681d      	ldr	r5, [r3, #0]
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	f000 8089 	beq.w	8009b24 <ai_platform_outputs_get+0x1b8>
 8009a12:	f04f 0800 	mov.w	r8, #0
 8009a16:	f8cd b008 	str.w	fp, [sp, #8]
 8009a1a:	46c1      	mov	r9, r8
 8009a1c:	46bb      	mov	fp, r7
 8009a1e:	6970      	ldr	r0, [r6, #20]
 8009a20:	69aa      	ldr	r2, [r5, #24]
 8009a22:	68ab      	ldr	r3, [r5, #8]
 8009a24:	6844      	ldr	r4, [r0, #4]
 8009a26:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8009a2a:	6810      	ldr	r0, [r2, #0]
 8009a2c:	68ef      	ldr	r7, [r5, #12]
 8009a2e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8009a32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	9203      	str	r2, [sp, #12]
 8009a3a:	f002 fce7 	bl	800c40c <ai_array_to_buffer_fmt>
 8009a3e:	9a03      	ldr	r2, [sp, #12]
 8009a40:	4601      	mov	r1, r0
 8009a42:	69a8      	ldr	r0, [r5, #24]
 8009a44:	eb0a 0302 	add.w	r3, sl, r2
 8009a48:	4444      	add	r4, r8
 8009a4a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8009a4e:	b16b      	cbz	r3, 8009a6c <ai_platform_outputs_get+0x100>
 8009a50:	2000      	movs	r0, #0
 8009a52:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8009a56:	6828      	ldr	r0, [r5, #0]
 8009a58:	6058      	str	r0, [r3, #4]
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d051      	beq.n	8009b02 <ai_platform_outputs_get+0x196>
 8009a5e:	8840      	ldrh	r0, [r0, #2]
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d04e      	beq.n	8009b02 <ai_platform_outputs_get+0x196>
 8009a64:	2001      	movs	r0, #1
 8009a66:	f84a 0002 	str.w	r0, [sl, r2]
 8009a6a:	69a8      	ldr	r0, [r5, #24]
 8009a6c:	6842      	ldr	r2, [r0, #4]
 8009a6e:	6122      	str	r2, [r4, #16]
 8009a70:	f04f 0001 	mov.w	r0, #1
 8009a74:	7520      	strb	r0, [r4, #20]
 8009a76:	9a01      	ldr	r2, [sp, #4]
 8009a78:	6960      	ldr	r0, [r4, #20]
 8009a7a:	60a3      	str	r3, [r4, #8]
 8009a7c:	f362 201f 	bfi	r0, r2, #8, #24
 8009a80:	e9c4 1e00 	strd	r1, lr, [r4]
 8009a84:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60e3      	str	r3, [r4, #12]
 8009a8c:	89b0      	ldrh	r0, [r6, #12]
 8009a8e:	f109 0301 	add.w	r3, r9, #1
 8009a92:	4283      	cmp	r3, r0
 8009a94:	4699      	mov	r9, r3
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	d207      	bcs.n	8009aaa <ai_platform_outputs_get+0x13e>
 8009a9a:	6930      	ldr	r0, [r6, #16]
 8009a9c:	b128      	cbz	r0, 8009aaa <ai_platform_outputs_get+0x13e>
 8009a9e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8009aa2:	f108 081c 	add.w	r8, r8, #28
 8009aa6:	2d00      	cmp	r5, #0
 8009aa8:	d1b9      	bne.n	8009a1e <ai_platform_outputs_get+0xb2>
 8009aaa:	465f      	mov	r7, fp
 8009aac:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009ab0:	2a00      	cmp	r2, #0
 8009ab2:	d037      	beq.n	8009b24 <ai_platform_outputs_get+0x1b8>
 8009ab4:	6973      	ldr	r3, [r6, #20]
 8009ab6:	6858      	ldr	r0, [r3, #4]
 8009ab8:	f1bb 0f00 	cmp.w	fp, #0
 8009abc:	d001      	beq.n	8009ac2 <ai_platform_outputs_get+0x156>
 8009abe:	f8ab 2000 	strh.w	r2, [fp]
 8009ac2:	b005      	add	sp, #20
 8009ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac8:	e7fe      	b.n	8009ac8 <ai_platform_outputs_get+0x15c>
 8009aca:	4a1d      	ldr	r2, [pc, #116]	; (8009b40 <ai_platform_outputs_get+0x1d4>)
 8009acc:	6813      	ldr	r3, [r2, #0]
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	f7ff fd30 	bl	8009538 <_ai_platform_acquire_crc>
 8009ad8:	4b1a      	ldr	r3, [pc, #104]	; (8009b44 <ai_platform_outputs_get+0x1d8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae4:	d010      	beq.n	8009b08 <ai_platform_outputs_get+0x19c>
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <ai_platform_outputs_get+0x1dc>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	d1fc      	bne.n	8009aec <ai_platform_outputs_get+0x180>
 8009af2:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <ai_platform_outputs_get+0x1e0>)
 8009af4:	4a16      	ldr	r2, [pc, #88]	; (8009b50 <ai_platform_outputs_get+0x1e4>)
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	4b16      	ldr	r3, [pc, #88]	; (8009b54 <ai_platform_outputs_get+0x1e8>)
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d019      	beq.n	8009b34 <ai_platform_outputs_get+0x1c8>
 8009b00:	e7fe      	b.n	8009b00 <ai_platform_outputs_get+0x194>
 8009b02:	69a8      	ldr	r0, [r5, #24]
 8009b04:	2300      	movs	r3, #0
 8009b06:	e7b1      	b.n	8009a6c <ai_platform_outputs_get+0x100>
 8009b08:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <ai_platform_outputs_get+0x1ec>)
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	d1fc      	bne.n	8009b0e <ai_platform_outputs_get+0x1a2>
 8009b14:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <ai_platform_outputs_get+0x1f0>)
 8009b16:	4a0e      	ldr	r2, [pc, #56]	; (8009b50 <ai_platform_outputs_get+0x1e4>)
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	4b0d      	ldr	r3, [pc, #52]	; (8009b54 <ai_platform_outputs_get+0x1e8>)
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d008      	beq.n	8009b34 <ai_platform_outputs_get+0x1c8>
 8009b22:	e7fe      	b.n	8009b22 <ai_platform_outputs_get+0x1b6>
 8009b24:	f107 0010 	add.w	r0, r7, #16
 8009b28:	2218      	movs	r2, #24
 8009b2a:	2111      	movs	r1, #17
 8009b2c:	f000 fd0c 	bl	800a548 <core_set_error>
 8009b30:	2000      	movs	r0, #0
 8009b32:	e7c6      	b.n	8009ac2 <ai_platform_outputs_get+0x156>
 8009b34:	f7ff fd02 	bl	800953c <_ai_platform_release_crc>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e7c2      	b.n	8009ac2 <ai_platform_outputs_get+0x156>
 8009b3c:	a1c00100 	.word	0xa1c00100
 8009b40:	e0002000 	.word	0xe0002000
 8009b44:	e0042000 	.word	0xe0042000
 8009b48:	58024c08 	.word	0x58024c08
 8009b4c:	58024c00 	.word	0x58024c00
 8009b50:	f407a5c2 	.word	0xf407a5c2
 8009b54:	b5e8b5cd 	.word	0xb5e8b5cd
 8009b58:	40023008 	.word	0x40023008
 8009b5c:	40023000 	.word	0x40023000

08009b60 <ai_platform_network_create>:
 8009b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b64:	b083      	sub	sp, #12
 8009b66:	4606      	mov	r6, r0
 8009b68:	4615      	mov	r5, r2
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8009b70:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8009b74:	f7ff fce0 	bl	8009538 <_ai_platform_acquire_crc>
 8009b78:	b178      	cbz	r0, 8009b9a <ai_platform_network_create+0x3a>
 8009b7a:	4b5f      	ldr	r3, [pc, #380]	; (8009cf8 <ai_platform_network_create+0x198>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b86:	4602      	mov	r2, r0
 8009b88:	d00d      	beq.n	8009ba6 <ai_platform_network_create+0x46>
 8009b8a:	4b5c      	ldr	r3, [pc, #368]	; (8009cfc <ai_platform_network_create+0x19c>)
 8009b8c:	2118      	movs	r1, #24
 8009b8e:	6019      	str	r1, [r3, #0]
 8009b90:	6819      	ldr	r1, [r3, #0]
 8009b92:	2918      	cmp	r1, #24
 8009b94:	d01a      	beq.n	8009bcc <ai_platform_network_create+0x6c>
 8009b96:	f7ff fcd1 	bl	800953c <_ai_platform_release_crc>
 8009b9a:	f244 1333 	movw	r3, #16691	; 0x4133
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	b003      	add	sp, #12
 8009ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	4b56      	ldr	r3, [pc, #344]	; (8009d00 <ai_platform_network_create+0x1a0>)
 8009ba8:	2101      	movs	r1, #1
 8009baa:	6019      	str	r1, [r3, #0]
 8009bac:	2114      	movs	r1, #20
 8009bae:	e001      	b.n	8009bb4 <ai_platform_network_create+0x54>
 8009bb0:	3901      	subs	r1, #1
 8009bb2:	d002      	beq.n	8009bba <ai_platform_network_create+0x5a>
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d1fa      	bne.n	8009bb0 <ai_platform_network_create+0x50>
 8009bba:	4b51      	ldr	r3, [pc, #324]	; (8009d00 <ai_platform_network_create+0x1a0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	b91b      	cbnz	r3, 8009bc8 <ai_platform_network_create+0x68>
 8009bc0:	4b50      	ldr	r3, [pc, #320]	; (8009d04 <ai_platform_network_create+0x1a4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	d006      	beq.n	8009bd6 <ai_platform_network_create+0x76>
 8009bc8:	4610      	mov	r0, r2
 8009bca:	e7e4      	b.n	8009b96 <ai_platform_network_create+0x36>
 8009bcc:	2101      	movs	r1, #1
 8009bce:	6019      	str	r1, [r3, #0]
 8009bd0:	6819      	ldr	r1, [r3, #0]
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	d1fc      	bne.n	8009bd0 <ai_platform_network_create+0x70>
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f7ff fcb0 	bl	800953c <_ai_platform_release_crc>
 8009bdc:	4a4a      	ldr	r2, [pc, #296]	; (8009d08 <ai_platform_network_create+0x1a8>)
 8009bde:	6813      	ldr	r3, [r2, #0]
 8009be0:	f023 0301 	bic.w	r3, r3, #1
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	f7ff fca7 	bl	8009538 <_ai_platform_acquire_crc>
 8009bea:	4b43      	ldr	r3, [pc, #268]	; (8009cf8 <ai_platform_network_create+0x198>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf6:	d00d      	beq.n	8009c14 <ai_platform_network_create+0xb4>
 8009bf8:	4b40      	ldr	r3, [pc, #256]	; (8009cfc <ai_platform_network_create+0x19c>)
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	2a00      	cmp	r2, #0
 8009c02:	d1fc      	bne.n	8009bfe <ai_platform_network_create+0x9e>
 8009c04:	4b41      	ldr	r3, [pc, #260]	; (8009d0c <ai_platform_network_create+0x1ac>)
 8009c06:	4a42      	ldr	r2, [pc, #264]	; (8009d10 <ai_platform_network_create+0x1b0>)
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b41      	ldr	r3, [pc, #260]	; (8009d14 <ai_platform_network_create+0x1b4>)
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d00e      	beq.n	8009c30 <ai_platform_network_create+0xd0>
 8009c12:	e7fe      	b.n	8009c12 <ai_platform_network_create+0xb2>
 8009c14:	4b3a      	ldr	r3, [pc, #232]	; (8009d00 <ai_platform_network_create+0x1a0>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d1fc      	bne.n	8009c1a <ai_platform_network_create+0xba>
 8009c20:	4b38      	ldr	r3, [pc, #224]	; (8009d04 <ai_platform_network_create+0x1a4>)
 8009c22:	4a3b      	ldr	r2, [pc, #236]	; (8009d10 <ai_platform_network_create+0x1b0>)
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4b3a      	ldr	r3, [pc, #232]	; (8009d14 <ai_platform_network_create+0x1b4>)
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d000      	beq.n	8009c30 <ai_platform_network_create+0xd0>
 8009c2e:	e7fe      	b.n	8009c2e <ai_platform_network_create+0xce>
 8009c30:	f7ff fc84 	bl	800953c <_ai_platform_release_crc>
 8009c34:	b1ae      	cbz	r6, 8009c62 <ai_platform_network_create+0x102>
 8009c36:	4b38      	ldr	r3, [pc, #224]	; (8009d18 <ai_platform_network_create+0x1b8>)
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	6035      	str	r5, [r6, #0]
 8009c3c:	f000 fc7c 	bl	800a538 <core_init>
 8009c40:	b990      	cbnz	r0, 8009c68 <ai_platform_network_create+0x108>
 8009c42:	2430      	movs	r4, #48	; 0x30
 8009c44:	2300      	movs	r3, #0
 8009c46:	6033      	str	r3, [r6, #0]
 8009c48:	2610      	movs	r6, #16
 8009c4a:	464a      	mov	r2, r9
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f002 fbc2 	bl	800c3d8 <ai_version_get>
 8009c54:	2300      	movs	r3, #0
 8009c56:	f364 0307 	bfi	r3, r4, #0, #8
 8009c5a:	6468      	str	r0, [r5, #68]	; 0x44
 8009c5c:	f366 231f 	bfi	r3, r6, #8, #24
 8009c60:	e79d      	b.n	8009b9e <ai_platform_network_create+0x3e>
 8009c62:	f241 0310 	movw	r3, #4112	; 0x1010
 8009c66:	e79a      	b.n	8009b9e <ai_platform_network_create+0x3e>
 8009c68:	4a27      	ldr	r2, [pc, #156]	; (8009d08 <ai_platform_network_create+0x1a8>)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	f023 0301 	bic.w	r3, r3, #1
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	f7ff fc61 	bl	8009538 <_ai_platform_acquire_crc>
 8009c76:	4b20      	ldr	r3, [pc, #128]	; (8009cf8 <ai_platform_network_create+0x198>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c82:	d00d      	beq.n	8009ca0 <ai_platform_network_create+0x140>
 8009c84:	4b1d      	ldr	r3, [pc, #116]	; (8009cfc <ai_platform_network_create+0x19c>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d1fc      	bne.n	8009c8a <ai_platform_network_create+0x12a>
 8009c90:	4b1e      	ldr	r3, [pc, #120]	; (8009d0c <ai_platform_network_create+0x1ac>)
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <ai_platform_network_create+0x1b0>)
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <ai_platform_network_create+0x1b4>)
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d00e      	beq.n	8009cbc <ai_platform_network_create+0x15c>
 8009c9e:	e7fe      	b.n	8009c9e <ai_platform_network_create+0x13e>
 8009ca0:	4b17      	ldr	r3, [pc, #92]	; (8009d00 <ai_platform_network_create+0x1a0>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	2a00      	cmp	r2, #0
 8009caa:	d1fc      	bne.n	8009ca6 <ai_platform_network_create+0x146>
 8009cac:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <ai_platform_network_create+0x1a4>)
 8009cae:	4a18      	ldr	r2, [pc, #96]	; (8009d10 <ai_platform_network_create+0x1b0>)
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	4b17      	ldr	r3, [pc, #92]	; (8009d14 <ai_platform_network_create+0x1b4>)
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d000      	beq.n	8009cbc <ai_platform_network_create+0x15c>
 8009cba:	e7fe      	b.n	8009cba <ai_platform_network_create+0x15a>
 8009cbc:	f7ff fc3e 	bl	800953c <_ai_platform_release_crc>
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	f002 fb87 	bl	800c3d8 <ai_version_get>
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4604      	mov	r4, r0
 8009cce:	2105      	movs	r1, #5
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	f002 fb81 	bl	800c3d8 <ai_version_get>
 8009cd6:	4284      	cmp	r4, r0
 8009cd8:	d001      	beq.n	8009cde <ai_platform_network_create+0x17e>
 8009cda:	2401      	movs	r4, #1
 8009cdc:	e7b2      	b.n	8009c44 <ai_platform_network_create+0xe4>
 8009cde:	a802      	add	r0, sp, #8
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <ai_platform_network_create+0x1bc>)
 8009ce2:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009ce6:	f002 fad3 	bl	800c290 <ai_check_custom_types>
 8009cea:	b110      	cbz	r0, 8009cf2 <ai_platform_network_create+0x192>
 8009cec:	2600      	movs	r6, #0
 8009cee:	4634      	mov	r4, r6
 8009cf0:	e7ab      	b.n	8009c4a <ai_platform_network_create+0xea>
 8009cf2:	2402      	movs	r4, #2
 8009cf4:	e7a6      	b.n	8009c44 <ai_platform_network_create+0xe4>
 8009cf6:	bf00      	nop
 8009cf8:	e0042000 	.word	0xe0042000
 8009cfc:	58024c08 	.word	0x58024c08
 8009d00:	40023008 	.word	0x40023008
 8009d04:	40023000 	.word	0x40023000
 8009d08:	e0002000 	.word	0xe0002000
 8009d0c:	58024c00 	.word	0x58024c00
 8009d10:	f407a5c2 	.word	0xf407a5c2
 8009d14:	b5e8b5cd 	.word	0xb5e8b5cd
 8009d18:	a1c00100 	.word	0xa1c00100
 8009d1c:	84048403 	.word	0x84048403

08009d20 <ai_platform_network_init>:
 8009d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d04b      	beq.n	8009dc0 <ai_platform_network_init+0xa0>
 8009d28:	4b79      	ldr	r3, [pc, #484]	; (8009f10 <ai_platform_network_init+0x1f0>)
 8009d2a:	6802      	ldr	r2, [r0, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	4604      	mov	r4, r0
 8009d30:	d146      	bne.n	8009dc0 <ai_platform_network_init+0xa0>
 8009d32:	4a78      	ldr	r2, [pc, #480]	; (8009f14 <ai_platform_network_init+0x1f4>)
 8009d34:	6813      	ldr	r3, [r2, #0]
 8009d36:	f023 0301 	bic.w	r3, r3, #1
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	460e      	mov	r6, r1
 8009d3e:	f7ff fbfb 	bl	8009538 <_ai_platform_acquire_crc>
 8009d42:	4b75      	ldr	r3, [pc, #468]	; (8009f18 <ai_platform_network_init+0x1f8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d4e:	d00d      	beq.n	8009d6c <ai_platform_network_init+0x4c>
 8009d50:	4b72      	ldr	r3, [pc, #456]	; (8009f1c <ai_platform_network_init+0x1fc>)
 8009d52:	2201      	movs	r2, #1
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	d1fc      	bne.n	8009d56 <ai_platform_network_init+0x36>
 8009d5c:	4b70      	ldr	r3, [pc, #448]	; (8009f20 <ai_platform_network_init+0x200>)
 8009d5e:	4a71      	ldr	r2, [pc, #452]	; (8009f24 <ai_platform_network_init+0x204>)
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b70      	ldr	r3, [pc, #448]	; (8009f28 <ai_platform_network_init+0x208>)
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d00d      	beq.n	8009d86 <ai_platform_network_init+0x66>
 8009d6a:	e7fe      	b.n	8009d6a <ai_platform_network_init+0x4a>
 8009d6c:	4b6f      	ldr	r3, [pc, #444]	; (8009f2c <ai_platform_network_init+0x20c>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	2a00      	cmp	r2, #0
 8009d76:	d1fc      	bne.n	8009d72 <ai_platform_network_init+0x52>
 8009d78:	4b6d      	ldr	r3, [pc, #436]	; (8009f30 <ai_platform_network_init+0x210>)
 8009d7a:	4a6a      	ldr	r2, [pc, #424]	; (8009f24 <ai_platform_network_init+0x204>)
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	4b69      	ldr	r3, [pc, #420]	; (8009f28 <ai_platform_network_init+0x208>)
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d11b      	bne.n	8009dbe <ai_platform_network_init+0x9e>
 8009d86:	f7ff fbd9 	bl	800953c <_ai_platform_release_crc>
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	d034      	beq.n	8009df8 <ai_platform_network_init+0xd8>
 8009d8e:	4b69      	ldr	r3, [pc, #420]	; (8009f34 <ai_platform_network_init+0x214>)
 8009d90:	6832      	ldr	r2, [r6, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d149      	bne.n	8009e2a <ai_platform_network_init+0x10a>
 8009d96:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8009d9a:	6930      	ldr	r0, [r6, #16]
 8009d9c:	89b3      	ldrh	r3, [r6, #12]
 8009d9e:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8009da2:	62a0      	str	r0, [r4, #40]	; 0x28
 8009da4:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8009da8:	2203      	movs	r2, #3
 8009daa:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8009dae:	84a3      	strh	r3, [r4, #36]	; 0x24
 8009db0:	60e2      	str	r2, [r4, #12]
 8009db2:	4620      	mov	r0, r4
 8009db4:	f002 fa96 	bl	800c2e4 <ai_layers_init_all>
 8009db8:	4620      	mov	r0, r4
 8009dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dbe:	e7fe      	b.n	8009dbe <ai_platform_network_init+0x9e>
 8009dc0:	4a54      	ldr	r2, [pc, #336]	; (8009f14 <ai_platform_network_init+0x1f4>)
 8009dc2:	6813      	ldr	r3, [r2, #0]
 8009dc4:	f023 0301 	bic.w	r3, r3, #1
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	f7ff fbb5 	bl	8009538 <_ai_platform_acquire_crc>
 8009dce:	4b52      	ldr	r3, [pc, #328]	; (8009f18 <ai_platform_network_init+0x1f8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dda:	d015      	beq.n	8009e08 <ai_platform_network_init+0xe8>
 8009ddc:	4b4f      	ldr	r3, [pc, #316]	; (8009f1c <ai_platform_network_init+0x1fc>)
 8009dde:	2201      	movs	r2, #1
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	d1fc      	bne.n	8009de2 <ai_platform_network_init+0xc2>
 8009de8:	4b4d      	ldr	r3, [pc, #308]	; (8009f20 <ai_platform_network_init+0x200>)
 8009dea:	4a4e      	ldr	r2, [pc, #312]	; (8009f24 <ai_platform_network_init+0x204>)
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	4b4d      	ldr	r3, [pc, #308]	; (8009f28 <ai_platform_network_init+0x208>)
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d015      	beq.n	8009e22 <ai_platform_network_init+0x102>
 8009df6:	e7fe      	b.n	8009df6 <ai_platform_network_init+0xd6>
 8009df8:	f104 0010 	add.w	r0, r4, #16
 8009dfc:	2211      	movs	r2, #17
 8009dfe:	2110      	movs	r1, #16
 8009e00:	4634      	mov	r4, r6
 8009e02:	f000 fba1 	bl	800a548 <core_set_error>
 8009e06:	e7d7      	b.n	8009db8 <ai_platform_network_init+0x98>
 8009e08:	4b48      	ldr	r3, [pc, #288]	; (8009f2c <ai_platform_network_init+0x20c>)
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	2a00      	cmp	r2, #0
 8009e12:	d1fc      	bne.n	8009e0e <ai_platform_network_init+0xee>
 8009e14:	4b46      	ldr	r3, [pc, #280]	; (8009f30 <ai_platform_network_init+0x210>)
 8009e16:	4a43      	ldr	r2, [pc, #268]	; (8009f24 <ai_platform_network_init+0x204>)
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	4b42      	ldr	r3, [pc, #264]	; (8009f28 <ai_platform_network_init+0x208>)
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d16d      	bne.n	8009efe <ai_platform_network_init+0x1de>
 8009e22:	f7ff fb8b 	bl	800953c <_ai_platform_release_crc>
 8009e26:	2400      	movs	r4, #0
 8009e28:	e7c6      	b.n	8009db8 <ai_platform_network_init+0x98>
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8009e32:	f7ff fb47 	bl	80094c4 <ai_buffer_get_size>
 8009e36:	4635      	mov	r5, r6
 8009e38:	f106 071c 	add.w	r7, r6, #28
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	4606      	mov	r6, r0
 8009e40:	4638      	mov	r0, r7
 8009e42:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8009e46:	f7ff fb3d 	bl	80094c4 <ai_buffer_get_size>
 8009e4a:	2e00      	cmp	r6, #0
 8009e4c:	bf0a      	itet	eq
 8009e4e:	46b6      	moveq	lr, r6
 8009e50:	f04f 0e01 	movne.w	lr, #1
 8009e54:	4635      	moveq	r5, r6
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d14b      	bne.n	8009ef2 <ai_platform_network_init+0x1d2>
 8009e5a:	4607      	mov	r7, r0
 8009e5c:	4684      	mov	ip, r0
 8009e5e:	f1b8 0f00 	cmp.w	r8, #0
 8009e62:	d023      	beq.n	8009eac <ai_platform_network_init+0x18c>
 8009e64:	8be3      	ldrh	r3, [r4, #30]
 8009e66:	4573      	cmp	r3, lr
 8009e68:	d207      	bcs.n	8009e7a <ai_platform_network_init+0x15a>
 8009e6a:	f104 0010 	add.w	r0, r4, #16
 8009e6e:	2212      	movs	r2, #18
 8009e70:	2116      	movs	r1, #22
 8009e72:	f000 fb69 	bl	800a548 <core_set_error>
 8009e76:	2400      	movs	r4, #0
 8009e78:	e79e      	b.n	8009db8 <ai_platform_network_init+0x98>
 8009e7a:	f1be 0f00 	cmp.w	lr, #0
 8009e7e:	d006      	beq.n	8009e8e <ai_platform_network_init+0x16e>
 8009e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e82:	6a26      	ldr	r6, [r4, #32]
 8009e84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009e86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e8a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009e8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009e90:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8009e94:	2600      	movs	r6, #0
 8009e96:	4563      	cmp	r3, ip
 8009e98:	83a6      	strh	r6, [r4, #28]
 8009e9a:	d211      	bcs.n	8009ec0 <ai_platform_network_init+0x1a0>
 8009e9c:	f104 0010 	add.w	r0, r4, #16
 8009ea0:	2213      	movs	r2, #19
 8009ea2:	2116      	movs	r1, #22
 8009ea4:	f000 fb50 	bl	800a548 <core_set_error>
 8009ea8:	4634      	mov	r4, r6
 8009eaa:	e785      	b.n	8009db8 <ai_platform_network_init+0x98>
 8009eac:	2e00      	cmp	r6, #0
 8009eae:	d0d9      	beq.n	8009e64 <ai_platform_network_init+0x144>
 8009eb0:	f104 0010 	add.w	r0, r4, #16
 8009eb4:	2212      	movs	r2, #18
 8009eb6:	2110      	movs	r1, #16
 8009eb8:	4644      	mov	r4, r8
 8009eba:	f000 fb45 	bl	800a548 <core_set_error>
 8009ebe:	e77b      	b.n	8009db8 <ai_platform_network_init+0x98>
 8009ec0:	f1bc 0f00 	cmp.w	ip, #0
 8009ec4:	d013      	beq.n	8009eee <ai_platform_network_init+0x1ce>
 8009ec6:	f04f 081c 	mov.w	r8, #28
 8009eca:	fb08 f80c 	mul.w	r8, r8, ip
 8009ece:	eb07 0e06 	add.w	lr, r7, r6
 8009ed2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ed6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009ed8:	4435      	add	r5, r6
 8009eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009edc:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8009ee0:	361c      	adds	r6, #28
 8009ee2:	4546      	cmp	r6, r8
 8009ee4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009ee8:	d1f1      	bne.n	8009ece <ai_platform_network_init+0x1ae>
 8009eea:	2300      	movs	r3, #0
 8009eec:	e75c      	b.n	8009da8 <ai_platform_network_init+0x88>
 8009eee:	4663      	mov	r3, ip
 8009ef0:	e75a      	b.n	8009da8 <ai_platform_network_init+0x88>
 8009ef2:	f1b9 0f00 	cmp.w	r9, #0
 8009ef6:	d003      	beq.n	8009f00 <ai_platform_network_init+0x1e0>
 8009ef8:	f04f 0c01 	mov.w	ip, #1
 8009efc:	e7af      	b.n	8009e5e <ai_platform_network_init+0x13e>
 8009efe:	e7fe      	b.n	8009efe <ai_platform_network_init+0x1de>
 8009f00:	f104 0010 	add.w	r0, r4, #16
 8009f04:	2213      	movs	r2, #19
 8009f06:	2110      	movs	r1, #16
 8009f08:	464c      	mov	r4, r9
 8009f0a:	f000 fb1d 	bl	800a548 <core_set_error>
 8009f0e:	e753      	b.n	8009db8 <ai_platform_network_init+0x98>
 8009f10:	a1c00100 	.word	0xa1c00100
 8009f14:	e0002000 	.word	0xe0002000
 8009f18:	e0042000 	.word	0xe0042000
 8009f1c:	58024c08 	.word	0x58024c08
 8009f20:	58024c00 	.word	0x58024c00
 8009f24:	f407a5c2 	.word	0xf407a5c2
 8009f28:	b5e8b5cd 	.word	0xb5e8b5cd
 8009f2c:	40023008 	.word	0x40023008
 8009f30:	40023000 	.word	0x40023000
 8009f34:	a1facade 	.word	0xa1facade

08009f38 <ai_platform_network_post_init>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	b120      	cbz	r0, 8009f46 <ai_platform_network_post_init+0xe>
 8009f3c:	4b3f      	ldr	r3, [pc, #252]	; (800a03c <ai_platform_network_post_init+0x104>)
 8009f3e:	6802      	ldr	r2, [r0, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	4604      	mov	r4, r0
 8009f44:	d02d      	beq.n	8009fa2 <ai_platform_network_post_init+0x6a>
 8009f46:	4a3e      	ldr	r2, [pc, #248]	; (800a040 <ai_platform_network_post_init+0x108>)
 8009f48:	6813      	ldr	r3, [r2, #0]
 8009f4a:	f023 0301 	bic.w	r3, r3, #1
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	f7ff faf2 	bl	8009538 <_ai_platform_acquire_crc>
 8009f54:	4b3b      	ldr	r3, [pc, #236]	; (800a044 <ai_platform_network_post_init+0x10c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f60:	d00d      	beq.n	8009f7e <ai_platform_network_post_init+0x46>
 8009f62:	4b39      	ldr	r3, [pc, #228]	; (800a048 <ai_platform_network_post_init+0x110>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	d1fc      	bne.n	8009f68 <ai_platform_network_post_init+0x30>
 8009f6e:	4b37      	ldr	r3, [pc, #220]	; (800a04c <ai_platform_network_post_init+0x114>)
 8009f70:	4a37      	ldr	r2, [pc, #220]	; (800a050 <ai_platform_network_post_init+0x118>)
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4b37      	ldr	r3, [pc, #220]	; (800a054 <ai_platform_network_post_init+0x11c>)
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d00d      	beq.n	8009f98 <ai_platform_network_post_init+0x60>
 8009f7c:	e7fe      	b.n	8009f7c <ai_platform_network_post_init+0x44>
 8009f7e:	4b36      	ldr	r3, [pc, #216]	; (800a058 <ai_platform_network_post_init+0x120>)
 8009f80:	2201      	movs	r2, #1
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	d1fc      	bne.n	8009f84 <ai_platform_network_post_init+0x4c>
 8009f8a:	4b34      	ldr	r3, [pc, #208]	; (800a05c <ai_platform_network_post_init+0x124>)
 8009f8c:	4a30      	ldr	r2, [pc, #192]	; (800a050 <ai_platform_network_post_init+0x118>)
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b30      	ldr	r3, [pc, #192]	; (800a054 <ai_platform_network_post_init+0x11c>)
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d103      	bne.n	8009fa0 <ai_platform_network_post_init+0x68>
 8009f98:	f7ff fad0 	bl	800953c <_ai_platform_release_crc>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	e7fe      	b.n	8009fa0 <ai_platform_network_post_init+0x68>
 8009fa2:	4a27      	ldr	r2, [pc, #156]	; (800a040 <ai_platform_network_post_init+0x108>)
 8009fa4:	6813      	ldr	r3, [r2, #0]
 8009fa6:	f023 0301 	bic.w	r3, r3, #1
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	f7ff fac4 	bl	8009538 <_ai_platform_acquire_crc>
 8009fb0:	4b24      	ldr	r3, [pc, #144]	; (800a044 <ai_platform_network_post_init+0x10c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fbc:	d00d      	beq.n	8009fda <ai_platform_network_post_init+0xa2>
 8009fbe:	4b22      	ldr	r3, [pc, #136]	; (800a048 <ai_platform_network_post_init+0x110>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	d1fc      	bne.n	8009fc4 <ai_platform_network_post_init+0x8c>
 8009fca:	4b20      	ldr	r3, [pc, #128]	; (800a04c <ai_platform_network_post_init+0x114>)
 8009fcc:	4a20      	ldr	r2, [pc, #128]	; (800a050 <ai_platform_network_post_init+0x118>)
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	4b20      	ldr	r3, [pc, #128]	; (800a054 <ai_platform_network_post_init+0x11c>)
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d00e      	beq.n	8009ff6 <ai_platform_network_post_init+0xbe>
 8009fd8:	e7fe      	b.n	8009fd8 <ai_platform_network_post_init+0xa0>
 8009fda:	4b1f      	ldr	r3, [pc, #124]	; (800a058 <ai_platform_network_post_init+0x120>)
 8009fdc:	2201      	movs	r2, #1
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	d1fc      	bne.n	8009fe0 <ai_platform_network_post_init+0xa8>
 8009fe6:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <ai_platform_network_post_init+0x124>)
 8009fe8:	4a19      	ldr	r2, [pc, #100]	; (800a050 <ai_platform_network_post_init+0x118>)
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	4b19      	ldr	r3, [pc, #100]	; (800a054 <ai_platform_network_post_init+0x11c>)
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d000      	beq.n	8009ff6 <ai_platform_network_post_init+0xbe>
 8009ff4:	e7fe      	b.n	8009ff4 <ai_platform_network_post_init+0xbc>
 8009ff6:	f7ff faa1 	bl	800953c <_ai_platform_release_crc>
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	f013 0502 	ands.w	r5, r3, #2
 800a000:	d011      	beq.n	800a026 <ai_platform_network_post_init+0xee>
 800a002:	4620      	mov	r0, r4
 800a004:	f002 f982 	bl	800c30c <ai_layers_post_init_all>
 800a008:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a00a:	b1a3      	cbz	r3, 800a036 <ai_platform_network_post_init+0xfe>
 800a00c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a00e:	b195      	cbz	r5, 800a036 <ai_platform_network_post_init+0xfe>
 800a010:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a012:	4629      	mov	r1, r5
 800a014:	2000      	movs	r0, #0
 800a016:	4798      	blx	r3
 800a018:	692b      	ldr	r3, [r5, #16]
 800a01a:	42ab      	cmp	r3, r5
 800a01c:	d00b      	beq.n	800a036 <ai_platform_network_post_init+0xfe>
 800a01e:	461d      	mov	r5, r3
 800a020:	b14b      	cbz	r3, 800a036 <ai_platform_network_post_init+0xfe>
 800a022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a024:	e7f4      	b.n	800a010 <ai_platform_network_post_init+0xd8>
 800a026:	f104 0010 	add.w	r0, r4, #16
 800a02a:	2210      	movs	r2, #16
 800a02c:	2111      	movs	r1, #17
 800a02e:	f000 fa8b 	bl	800a548 <core_set_error>
 800a032:	4628      	mov	r0, r5
 800a034:	bd38      	pop	{r3, r4, r5, pc}
 800a036:	2001      	movs	r0, #1
 800a038:	bd38      	pop	{r3, r4, r5, pc}
 800a03a:	bf00      	nop
 800a03c:	a1c00100 	.word	0xa1c00100
 800a040:	e0002000 	.word	0xe0002000
 800a044:	e0042000 	.word	0xe0042000
 800a048:	58024c08 	.word	0x58024c08
 800a04c:	58024c00 	.word	0x58024c00
 800a050:	f407a5c2 	.word	0xf407a5c2
 800a054:	b5e8b5cd 	.word	0xb5e8b5cd
 800a058:	40023008 	.word	0x40023008
 800a05c:	40023000 	.word	0x40023000

0800a060 <ai_platform_network_process>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	b085      	sub	sp, #20
 800a066:	460d      	mov	r5, r1
 800a068:	9202      	str	r2, [sp, #8]
 800a06a:	4604      	mov	r4, r0
 800a06c:	b120      	cbz	r0, 800a078 <ai_platform_network_process+0x18>
 800a06e:	4b73      	ldr	r3, [pc, #460]	; (800a23c <ai_platform_network_process+0x1dc>)
 800a070:	6802      	ldr	r2, [r0, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	bf18      	it	ne
 800a076:	2400      	movne	r4, #0
 800a078:	4a71      	ldr	r2, [pc, #452]	; (800a240 <ai_platform_network_process+0x1e0>)
 800a07a:	6813      	ldr	r3, [r2, #0]
 800a07c:	f023 0301 	bic.w	r3, r3, #1
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	f7ff fa59 	bl	8009538 <_ai_platform_acquire_crc>
 800a086:	4b6f      	ldr	r3, [pc, #444]	; (800a244 <ai_platform_network_process+0x1e4>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a092:	d00d      	beq.n	800a0b0 <ai_platform_network_process+0x50>
 800a094:	4b6c      	ldr	r3, [pc, #432]	; (800a248 <ai_platform_network_process+0x1e8>)
 800a096:	2201      	movs	r2, #1
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	d1fc      	bne.n	800a09a <ai_platform_network_process+0x3a>
 800a0a0:	4b6a      	ldr	r3, [pc, #424]	; (800a24c <ai_platform_network_process+0x1ec>)
 800a0a2:	4a6b      	ldr	r2, [pc, #428]	; (800a250 <ai_platform_network_process+0x1f0>)
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4b6a      	ldr	r3, [pc, #424]	; (800a254 <ai_platform_network_process+0x1f4>)
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d00e      	beq.n	800a0cc <ai_platform_network_process+0x6c>
 800a0ae:	e7fe      	b.n	800a0ae <ai_platform_network_process+0x4e>
 800a0b0:	4b69      	ldr	r3, [pc, #420]	; (800a258 <ai_platform_network_process+0x1f8>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	d1fc      	bne.n	800a0b6 <ai_platform_network_process+0x56>
 800a0bc:	4b67      	ldr	r3, [pc, #412]	; (800a25c <ai_platform_network_process+0x1fc>)
 800a0be:	4a64      	ldr	r2, [pc, #400]	; (800a250 <ai_platform_network_process+0x1f0>)
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	4b63      	ldr	r3, [pc, #396]	; (800a254 <ai_platform_network_process+0x1f4>)
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d000      	beq.n	800a0cc <ai_platform_network_process+0x6c>
 800a0ca:	e7fe      	b.n	800a0ca <ai_platform_network_process+0x6a>
 800a0cc:	f7ff fa36 	bl	800953c <_ai_platform_release_crc>
 800a0d0:	2c00      	cmp	r4, #0
 800a0d2:	f000 8089 	beq.w	800a1e8 <ai_platform_network_process+0x188>
 800a0d6:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800a0d8:	2f00      	cmp	r7, #0
 800a0da:	f040 822b 	bne.w	800a534 <ai_platform_network_process+0x4d4>
 800a0de:	68e3      	ldr	r3, [r4, #12]
 800a0e0:	f003 0303 	and.w	r3, r3, #3
 800a0e4:	2600      	movs	r6, #0
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	6166      	str	r6, [r4, #20]
 800a0ea:	f040 821b 	bne.w	800a524 <ai_platform_network_process+0x4c4>
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	f000 809c 	beq.w	800a22c <ai_platform_network_process+0x1cc>
 800a0f4:	2f00      	cmp	r7, #0
 800a0f6:	f000 8099 	beq.w	800a22c <ai_platform_network_process+0x1cc>
 800a0fa:	883b      	ldrh	r3, [r7, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8095 	beq.w	800a22c <ai_platform_network_process+0x1cc>
 800a102:	69aa      	ldr	r2, [r5, #24]
 800a104:	9401      	str	r4, [sp, #4]
 800a106:	f8d2 8000 	ldr.w	r8, [r2]
 800a10a:	429e      	cmp	r6, r3
 800a10c:	f080 80a8 	bcs.w	800a260 <ai_platform_network_process+0x200>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80a4 	beq.w	800a260 <ai_platform_network_process+0x200>
 800a118:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a11c:	2c00      	cmp	r4, #0
 800a11e:	f000 809f 	beq.w	800a260 <ai_platform_network_process+0x200>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f8d3 b000 	ldr.w	fp, [r3]
 800a128:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800a12c:	eb1b 0a09 	adds.w	sl, fp, r9
 800a130:	d07b      	beq.n	800a22a <ai_platform_network_process+0x1ca>
 800a132:	69a3      	ldr	r3, [r4, #24]
 800a134:	2101      	movs	r1, #1
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	9303      	str	r3, [sp, #12]
 800a13a:	4628      	mov	r0, r5
 800a13c:	f7ff f9c2 	bl	80094c4 <ai_buffer_get_size>
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	4283      	cmp	r3, r0
 800a144:	d368      	bcc.n	800a218 <ai_platform_network_process+0x1b8>
 800a146:	68e0      	ldr	r0, [r4, #12]
 800a148:	69a9      	ldr	r1, [r5, #24]
 800a14a:	68c2      	ldr	r2, [r0, #12]
 800a14c:	68cb      	ldr	r3, [r1, #12]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d162      	bne.n	800a218 <ai_platform_network_process+0x1b8>
 800a152:	6882      	ldr	r2, [r0, #8]
 800a154:	688b      	ldr	r3, [r1, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	d15e      	bne.n	800a218 <ai_platform_network_process+0x1b8>
 800a15a:	6842      	ldr	r2, [r0, #4]
 800a15c:	684b      	ldr	r3, [r1, #4]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d15a      	bne.n	800a218 <ai_platform_network_process+0x1b8>
 800a162:	69a3      	ldr	r3, [r4, #24]
 800a164:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a168:	f002 f9ca 	bl	800c500 <ai_array_get_data_byte_size>
 800a16c:	9003      	str	r0, [sp, #12]
 800a16e:	4620      	mov	r0, r4
 800a170:	f002 f938 	bl	800c3e4 <get_tensor_byte_size>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	4283      	cmp	r3, r0
 800a178:	d34e      	bcc.n	800a218 <ai_platform_network_process+0x1b8>
 800a17a:	69a3      	ldr	r3, [r4, #24]
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f002 f945 	bl	800c40c <ai_array_to_buffer_fmt>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	4043      	eors	r3, r0
 800a186:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a18a:	d13c      	bne.n	800a206 <ai_platform_network_process+0x1a6>
 800a18c:	686b      	ldr	r3, [r5, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d04b      	beq.n	800a22a <ai_platform_network_process+0x1ca>
 800a192:	69ab      	ldr	r3, [r5, #24]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	b362      	cbz	r2, 800a1f2 <ai_platform_network_process+0x192>
 800a198:	4620      	mov	r0, r4
 800a19a:	9203      	str	r2, [sp, #12]
 800a19c:	f002 f922 	bl	800c3e4 <get_tensor_byte_size>
 800a1a0:	f8ca 0008 	str.w	r0, [sl, #8]
 800a1a4:	69ab      	ldr	r3, [r5, #24]
 800a1a6:	9a03      	ldr	r2, [sp, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	fb03 f000 	mul.w	r0, r3, r0
 800a1ae:	f8ca 000c 	str.w	r0, [sl, #12]
 800a1b2:	6869      	ldr	r1, [r5, #4]
 800a1b4:	f8ca 1004 	str.w	r1, [sl, #4]
 800a1b8:	686b      	ldr	r3, [r5, #4]
 800a1ba:	4403      	add	r3, r0
 800a1bc:	f84b 3009 	str.w	r3, [fp, r9]
 800a1c0:	69a0      	ldr	r0, [r4, #24]
 800a1c2:	6803      	ldr	r3, [r0, #0]
 800a1c4:	4590      	cmp	r8, r2
 800a1c6:	bf38      	it	cc
 800a1c8:	4690      	movcc	r8, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	d408      	bmi.n	800a1e0 <ai_platform_network_process+0x180>
 800a1ce:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a1d2:	1a9b      	subs	r3, r3, r2
 800a1d4:	4419      	add	r1, r3
 800a1d6:	6081      	str	r1, [r0, #8]
 800a1d8:	69a3      	ldr	r3, [r4, #24]
 800a1da:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a1de:	60da      	str	r2, [r3, #12]
 800a1e0:	883b      	ldrh	r3, [r7, #0]
 800a1e2:	3601      	adds	r6, #1
 800a1e4:	351c      	adds	r5, #28
 800a1e6:	e790      	b.n	800a10a <ai_platform_network_process+0xaa>
 800a1e8:	4623      	mov	r3, r4
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	b005      	add	sp, #20
 800a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f2:	9c01      	ldr	r4, [sp, #4]
 800a1f4:	4692      	mov	sl, r2
 800a1f6:	f104 0010 	add.w	r0, r4, #16
 800a1fa:	2221      	movs	r2, #33	; 0x21
 800a1fc:	2112      	movs	r1, #18
 800a1fe:	f000 f9a3 	bl	800a548 <core_set_error>
 800a202:	4653      	mov	r3, sl
 800a204:	e7f1      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a206:	9c01      	ldr	r4, [sp, #4]
 800a208:	2219      	movs	r2, #25
 800a20a:	f104 0010 	add.w	r0, r4, #16
 800a20e:	2112      	movs	r1, #18
 800a210:	f000 f99a 	bl	800a548 <core_set_error>
 800a214:	2300      	movs	r3, #0
 800a216:	e7e8      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a218:	9c01      	ldr	r4, [sp, #4]
 800a21a:	2218      	movs	r2, #24
 800a21c:	f104 0010 	add.w	r0, r4, #16
 800a220:	2112      	movs	r1, #18
 800a222:	f000 f991 	bl	800a548 <core_set_error>
 800a226:	2300      	movs	r3, #0
 800a228:	e7df      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a22a:	9c01      	ldr	r4, [sp, #4]
 800a22c:	f104 0010 	add.w	r0, r4, #16
 800a230:	2217      	movs	r2, #23
 800a232:	2112      	movs	r1, #18
 800a234:	f000 f988 	bl	800a548 <core_set_error>
 800a238:	2300      	movs	r3, #0
 800a23a:	e7d6      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a23c:	a1c00100 	.word	0xa1c00100
 800a240:	e0002000 	.word	0xe0002000
 800a244:	e0042000 	.word	0xe0042000
 800a248:	58024c08 	.word	0x58024c08
 800a24c:	58024c00 	.word	0x58024c00
 800a250:	f407a5c2 	.word	0xf407a5c2
 800a254:	b5e8b5cd 	.word	0xb5e8b5cd
 800a258:	40023008 	.word	0x40023008
 800a25c:	40023000 	.word	0x40023000
 800a260:	9c01      	ldr	r4, [sp, #4]
 800a262:	9a02      	ldr	r2, [sp, #8]
 800a264:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a266:	2a00      	cmp	r2, #0
 800a268:	f000 80ab 	beq.w	800a3c2 <ai_platform_network_process+0x362>
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	f240 809e 	bls.w	800a3ae <ai_platform_network_process+0x34e>
 800a272:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800a276:	f119 0f0c 	cmn.w	r9, #12
 800a27a:	f000 8098 	beq.w	800a3ae <ai_platform_network_process+0x34e>
 800a27e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8093 	beq.w	800a3ae <ai_platform_network_process+0x34e>
 800a288:	9d02      	ldr	r5, [sp, #8]
 800a28a:	9401      	str	r4, [sp, #4]
 800a28c:	2700      	movs	r7, #0
 800a28e:	429f      	cmp	r7, r3
 800a290:	f080 8095 	bcs.w	800a3be <ai_platform_network_process+0x35e>
 800a294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 8090 	beq.w	800a3be <ai_platform_network_process+0x35e>
 800a29e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a2a2:	2c00      	cmp	r4, #0
 800a2a4:	f000 808b 	beq.w	800a3be <ai_platform_network_process+0x35e>
 800a2a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a2ac:	f8d3 b000 	ldr.w	fp, [r3]
 800a2b0:	013e      	lsls	r6, r7, #4
 800a2b2:	eb1b 0a06 	adds.w	sl, fp, r6
 800a2b6:	f000 812c 	beq.w	800a512 <ai_platform_network_process+0x4b2>
 800a2ba:	69a3      	ldr	r3, [r4, #24]
 800a2bc:	2101      	movs	r1, #1
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	9302      	str	r3, [sp, #8]
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f7ff f8fe 	bl	80094c4 <ai_buffer_get_size>
 800a2c8:	9b02      	ldr	r3, [sp, #8]
 800a2ca:	4283      	cmp	r3, r0
 800a2cc:	d36e      	bcc.n	800a3ac <ai_platform_network_process+0x34c>
 800a2ce:	68e0      	ldr	r0, [r4, #12]
 800a2d0:	69a9      	ldr	r1, [r5, #24]
 800a2d2:	68c2      	ldr	r2, [r0, #12]
 800a2d4:	68cb      	ldr	r3, [r1, #12]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d168      	bne.n	800a3ac <ai_platform_network_process+0x34c>
 800a2da:	6882      	ldr	r2, [r0, #8]
 800a2dc:	688b      	ldr	r3, [r1, #8]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d164      	bne.n	800a3ac <ai_platform_network_process+0x34c>
 800a2e2:	6842      	ldr	r2, [r0, #4]
 800a2e4:	684b      	ldr	r3, [r1, #4]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d160      	bne.n	800a3ac <ai_platform_network_process+0x34c>
 800a2ea:	69a3      	ldr	r3, [r4, #24]
 800a2ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a2f0:	f002 f906 	bl	800c500 <ai_array_get_data_byte_size>
 800a2f4:	9002      	str	r0, [sp, #8]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f002 f874 	bl	800c3e4 <get_tensor_byte_size>
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	4283      	cmp	r3, r0
 800a300:	d354      	bcc.n	800a3ac <ai_platform_network_process+0x34c>
 800a302:	69a3      	ldr	r3, [r4, #24]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	f002 f881 	bl	800c40c <ai_array_to_buffer_fmt>
 800a30a:	682b      	ldr	r3, [r5, #0]
 800a30c:	4043      	eors	r3, r0
 800a30e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a312:	d142      	bne.n	800a39a <ai_platform_network_process+0x33a>
 800a314:	686b      	ldr	r3, [r5, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d035      	beq.n	800a386 <ai_platform_network_process+0x326>
 800a31a:	69ab      	ldr	r3, [r5, #24]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	b342      	cbz	r2, 800a372 <ai_platform_network_process+0x312>
 800a320:	4620      	mov	r0, r4
 800a322:	9202      	str	r2, [sp, #8]
 800a324:	f002 f85e 	bl	800c3e4 <get_tensor_byte_size>
 800a328:	f8ca 0008 	str.w	r0, [sl, #8]
 800a32c:	69ab      	ldr	r3, [r5, #24]
 800a32e:	9a02      	ldr	r2, [sp, #8]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	fb03 f000 	mul.w	r0, r3, r0
 800a336:	f8ca 000c 	str.w	r0, [sl, #12]
 800a33a:	6869      	ldr	r1, [r5, #4]
 800a33c:	f8ca 1004 	str.w	r1, [sl, #4]
 800a340:	686b      	ldr	r3, [r5, #4]
 800a342:	4403      	add	r3, r0
 800a344:	f84b 3006 	str.w	r3, [fp, r6]
 800a348:	69a0      	ldr	r0, [r4, #24]
 800a34a:	6803      	ldr	r3, [r0, #0]
 800a34c:	4590      	cmp	r8, r2
 800a34e:	bf38      	it	cc
 800a350:	4690      	movcc	r8, r2
 800a352:	009e      	lsls	r6, r3, #2
 800a354:	d408      	bmi.n	800a368 <ai_platform_network_process+0x308>
 800a356:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	4419      	add	r1, r3
 800a35e:	6081      	str	r1, [r0, #8]
 800a360:	69a3      	ldr	r3, [r4, #24]
 800a362:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a366:	60da      	str	r2, [r3, #12]
 800a368:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a36c:	3701      	adds	r7, #1
 800a36e:	351c      	adds	r5, #28
 800a370:	e78d      	b.n	800a28e <ai_platform_network_process+0x22e>
 800a372:	9c01      	ldr	r4, [sp, #4]
 800a374:	4692      	mov	sl, r2
 800a376:	f104 0010 	add.w	r0, r4, #16
 800a37a:	2221      	movs	r2, #33	; 0x21
 800a37c:	2113      	movs	r1, #19
 800a37e:	f000 f8e3 	bl	800a548 <core_set_error>
 800a382:	4653      	mov	r3, sl
 800a384:	e731      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a386:	9c01      	ldr	r4, [sp, #4]
 800a388:	469a      	mov	sl, r3
 800a38a:	f104 0010 	add.w	r0, r4, #16
 800a38e:	2217      	movs	r2, #23
 800a390:	2113      	movs	r1, #19
 800a392:	f000 f8d9 	bl	800a548 <core_set_error>
 800a396:	4653      	mov	r3, sl
 800a398:	e727      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a39a:	9c01      	ldr	r4, [sp, #4]
 800a39c:	2219      	movs	r2, #25
 800a39e:	f104 0010 	add.w	r0, r4, #16
 800a3a2:	2113      	movs	r1, #19
 800a3a4:	f000 f8d0 	bl	800a548 <core_set_error>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e71e      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a3ac:	9c01      	ldr	r4, [sp, #4]
 800a3ae:	f104 0010 	add.w	r0, r4, #16
 800a3b2:	2218      	movs	r2, #24
 800a3b4:	2113      	movs	r1, #19
 800a3b6:	f000 f8c7 	bl	800a548 <core_set_error>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e715      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a3be:	9c01      	ldr	r4, [sp, #4]
 800a3c0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800a3c2:	f8a4 8014 	strh.w	r8, [r4, #20]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 80a0 	beq.w	800a50c <ai_platform_network_process+0x4ac>
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800a3d0:	f240 809a 	bls.w	800a508 <ai_platform_network_process+0x4a8>
 800a3d4:	f105 070c 	add.w	r7, r5, #12
 800a3d8:	8ae3      	ldrh	r3, [r4, #22]
 800a3da:	8aa2      	ldrh	r2, [r4, #20]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	f67f af04 	bls.w	800a1ea <ai_platform_network_process+0x18a>
 800a3e2:	46a3      	mov	fp, r4
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	d036      	beq.n	800a456 <ai_platform_network_process+0x3f6>
 800a3e8:	882b      	ldrh	r3, [r5, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d033      	beq.n	800a456 <ai_platform_network_process+0x3f6>
 800a3ee:	686b      	ldr	r3, [r5, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d030      	beq.n	800a456 <ai_platform_network_process+0x3f6>
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f04f 0800 	mov.w	r8, #0
 800a3fa:	b9db      	cbnz	r3, 800a434 <ai_platform_network_process+0x3d4>
 800a3fc:	e02b      	b.n	800a456 <ai_platform_network_process+0x3f6>
 800a3fe:	68d4      	ldr	r4, [r2, #12]
 800a400:	1b00      	subs	r0, r0, r4
 800a402:	4401      	add	r1, r0
 800a404:	6091      	str	r1, [r2, #8]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	6872      	ldr	r2, [r6, #4]
 800a40a:	60da      	str	r2, [r3, #12]
 800a40c:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a410:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a414:	440b      	add	r3, r1
 800a416:	4293      	cmp	r3, r2
 800a418:	bf24      	itt	cs
 800a41a:	68f3      	ldrcs	r3, [r6, #12]
 800a41c:	1ad3      	subcs	r3, r2, r3
 800a41e:	6073      	str	r3, [r6, #4]
 800a420:	882b      	ldrh	r3, [r5, #0]
 800a422:	f108 0801 	add.w	r8, r8, #1
 800a426:	4598      	cmp	r8, r3
 800a428:	d215      	bcs.n	800a456 <ai_platform_network_process+0x3f6>
 800a42a:	686b      	ldr	r3, [r5, #4]
 800a42c:	b19b      	cbz	r3, 800a456 <ai_platform_network_process+0x3f6>
 800a42e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a432:	b183      	cbz	r3, 800a456 <ai_platform_network_process+0x3f6>
 800a434:	68a9      	ldr	r1, [r5, #8]
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	f8d1 a000 	ldr.w	sl, [r1]
 800a43c:	6814      	ldr	r4, [r2, #0]
 800a43e:	6890      	ldr	r0, [r2, #8]
 800a440:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a444:	eb0a 0609 	add.w	r6, sl, r9
 800a448:	00a4      	lsls	r4, r4, #2
 800a44a:	6871      	ldr	r1, [r6, #4]
 800a44c:	d5d7      	bpl.n	800a3fe <ai_platform_network_process+0x39e>
 800a44e:	68b2      	ldr	r2, [r6, #8]
 800a450:	f005 fdc2 	bl	800ffd8 <memcpy>
 800a454:	e7da      	b.n	800a40c <ai_platform_network_process+0x3ac>
 800a456:	4658      	mov	r0, fp
 800a458:	f001 ff70 	bl	800c33c <ai_layers_forward_all>
 800a45c:	2f00      	cmp	r7, #0
 800a45e:	d047      	beq.n	800a4f0 <ai_platform_network_process+0x490>
 800a460:	883b      	ldrh	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d044      	beq.n	800a4f0 <ai_platform_network_process+0x490>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d041      	beq.n	800a4f0 <ai_platform_network_process+0x490>
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	2800      	cmp	r0, #0
 800a470:	d03e      	beq.n	800a4f0 <ai_platform_network_process+0x490>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	e019      	b.n	800a4ac <ai_platform_network_process+0x44c>
 800a478:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	bf24      	itt	cs
 800a480:	68f3      	ldrcs	r3, [r6, #12]
 800a482:	1ad3      	subcs	r3, r2, r3
 800a484:	6073      	str	r3, [r6, #4]
 800a486:	6981      	ldr	r1, [r0, #24]
 800a488:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800a48c:	1b12      	subs	r2, r2, r4
 800a48e:	4413      	add	r3, r2
 800a490:	608b      	str	r3, [r1, #8]
 800a492:	6983      	ldr	r3, [r0, #24]
 800a494:	6872      	ldr	r2, [r6, #4]
 800a496:	60da      	str	r2, [r3, #12]
 800a498:	883b      	ldrh	r3, [r7, #0]
 800a49a:	f108 0801 	add.w	r8, r8, #1
 800a49e:	4598      	cmp	r8, r3
 800a4a0:	d226      	bcs.n	800a4f0 <ai_platform_network_process+0x490>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	b323      	cbz	r3, 800a4f0 <ai_platform_network_process+0x490>
 800a4a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a4aa:	b308      	cbz	r0, 800a4f0 <ai_platform_network_process+0x490>
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6981      	ldr	r1, [r0, #24]
 800a4b0:	f8d3 a000 	ldr.w	sl, [r3]
 800a4b4:	680c      	ldr	r4, [r1, #0]
 800a4b6:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a4ba:	eb0a 0609 	add.w	r6, sl, r9
 800a4be:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800a4c2:	00a4      	lsls	r4, r4, #2
 800a4c4:	eb0c 0302 	add.w	r3, ip, r2
 800a4c8:	d5d6      	bpl.n	800a478 <ai_platform_network_process+0x418>
 800a4ca:	6889      	ldr	r1, [r1, #8]
 800a4cc:	4660      	mov	r0, ip
 800a4ce:	f005 fd83 	bl	800ffd8 <memcpy>
 800a4d2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800a4d6:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a4da:	440b      	add	r3, r1
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	bf24      	itt	cs
 800a4e0:	68f3      	ldrcs	r3, [r6, #12]
 800a4e2:	1ad3      	subcs	r3, r2, r3
 800a4e4:	6073      	str	r3, [r6, #4]
 800a4e6:	883b      	ldrh	r3, [r7, #0]
 800a4e8:	f108 0801 	add.w	r8, r8, #1
 800a4ec:	4598      	cmp	r8, r3
 800a4ee:	d3d8      	bcc.n	800a4a2 <ai_platform_network_process+0x442>
 800a4f0:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800a4f4:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	f8ab 3016 	strh.w	r3, [fp, #22]
 800a502:	f63f af6f 	bhi.w	800a3e4 <ai_platform_network_process+0x384>
 800a506:	e670      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a508:	2700      	movs	r7, #0
 800a50a:	e765      	b.n	800a3d8 <ai_platform_network_process+0x378>
 800a50c:	461d      	mov	r5, r3
 800a50e:	461f      	mov	r7, r3
 800a510:	e762      	b.n	800a3d8 <ai_platform_network_process+0x378>
 800a512:	9c01      	ldr	r4, [sp, #4]
 800a514:	2217      	movs	r2, #23
 800a516:	f104 0010 	add.w	r0, r4, #16
 800a51a:	2113      	movs	r1, #19
 800a51c:	f000 f814 	bl	800a548 <core_set_error>
 800a520:	4653      	mov	r3, sl
 800a522:	e662      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a524:	f104 0010 	add.w	r0, r4, #16
 800a528:	2230      	movs	r2, #48	; 0x30
 800a52a:	2111      	movs	r1, #17
 800a52c:	f000 f80c 	bl	800a548 <core_set_error>
 800a530:	4633      	mov	r3, r6
 800a532:	e65a      	b.n	800a1ea <ai_platform_network_process+0x18a>
 800a534:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800a536:	e5d2      	b.n	800a0de <ai_platform_network_process+0x7e>

0800a538 <core_init>:
 800a538:	2001      	movs	r0, #1
 800a53a:	4770      	bx	lr

0800a53c <core_get_error>:
 800a53c:	4603      	mov	r3, r0
 800a53e:	2200      	movs	r2, #0
 800a540:	6800      	ldr	r0, [r0, #0]
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop

0800a548 <core_set_error>:
 800a548:	7803      	ldrb	r3, [r0, #0]
 800a54a:	b933      	cbnz	r3, 800a55a <core_set_error+0x12>
 800a54c:	7001      	strb	r1, [r0, #0]
 800a54e:	6803      	ldr	r3, [r0, #0]
 800a550:	f362 231f 	bfi	r3, r2, #8, #24
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	2001      	movs	r0, #1
 800a558:	4770      	bx	lr
 800a55a:	2000      	movs	r0, #0
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop

0800a560 <func_dummy>:
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop

0800a564 <ai_dict_decompress_f32>:
 800a564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a568:	9f08      	ldr	r7, [sp, #32]
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800a570:	d00e      	beq.n	800a590 <ai_dict_decompress_f32+0x2c>
 800a572:	2b08      	cmp	r3, #8
 800a574:	d10a      	bne.n	800a58c <ai_dict_decompress_f32+0x28>
 800a576:	42b8      	cmp	r0, r7
 800a578:	d208      	bcs.n	800a58c <ai_dict_decompress_f32+0x28>
 800a57a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f840 3b04 	str.w	r3, [r0], #4
 800a588:	4287      	cmp	r7, r0
 800a58a:	d8f6      	bhi.n	800a57a <ai_dict_decompress_f32+0x16>
 800a58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a590:	9b07      	ldr	r3, [sp, #28]
 800a592:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800a596:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800a59a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800a59e:	f003 0e01 	and.w	lr, r3, #1
 800a5a2:	42b8      	cmp	r0, r7
 800a5a4:	d2f2      	bcs.n	800a58c <ai_dict_decompress_f32+0x28>
 800a5a6:	f1bc 0f00 	cmp.w	ip, #0
 800a5aa:	d01a      	beq.n	800a5e2 <ai_dict_decompress_f32+0x7e>
 800a5ac:	f100 0508 	add.w	r5, r0, #8
 800a5b0:	1e4c      	subs	r4, r1, #1
 800a5b2:	eb01 0608 	add.w	r6, r1, r8
 800a5b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a5ba:	091b      	lsrs	r3, r3, #4
 800a5bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5c0:	42a6      	cmp	r6, r4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f845 3c08 	str.w	r3, [r5, #-8]
 800a5c8:	7823      	ldrb	r3, [r4, #0]
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5d2:	f105 0508 	add.w	r5, r5, #8
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f845 3c0c 	str.w	r3, [r5, #-12]
 800a5dc:	d1eb      	bne.n	800a5b6 <ai_dict_decompress_f32+0x52>
 800a5de:	4461      	add	r1, ip
 800a5e0:	4448      	add	r0, r9
 800a5e2:	f1be 0f00 	cmp.w	lr, #0
 800a5e6:	d103      	bne.n	800a5f0 <ai_dict_decompress_f32+0x8c>
 800a5e8:	4287      	cmp	r7, r0
 800a5ea:	d8dc      	bhi.n	800a5a6 <ai_dict_decompress_f32+0x42>
 800a5ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5f0:	780b      	ldrb	r3, [r1, #0]
 800a5f2:	091b      	lsrs	r3, r3, #4
 800a5f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5f8:	3101      	adds	r1, #1
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	3004      	adds	r0, #4
 800a600:	e7cf      	b.n	800a5a2 <ai_dict_decompress_f32+0x3e>
 800a602:	bf00      	nop

0800a604 <forward_conv2d>:
 800a604:	6983      	ldr	r3, [r0, #24]
 800a606:	881a      	ldrh	r2, [r3, #0]
 800a608:	2a00      	cmp	r2, #0
 800a60a:	f000 87c7 	beq.w	800b59c <forward_conv2d+0xf98>
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	6859      	ldr	r1, [r3, #4]
 800a612:	b101      	cbz	r1, 800a616 <forward_conv2d+0x12>
 800a614:	6809      	ldr	r1, [r1, #0]
 800a616:	2a01      	cmp	r2, #1
 800a618:	f240 87bd 	bls.w	800b596 <forward_conv2d+0xf92>
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	ed2d 8b10 	vpush	{d8-d15}
 800a624:	b0cb      	sub	sp, #300	; 0x12c
 800a626:	691c      	ldr	r4, [r3, #16]
 800a628:	af02      	add	r7, sp, #8
 800a62a:	2c00      	cmp	r4, #0
 800a62c:	f000 87af 	beq.w	800b58e <forward_conv2d+0xf8a>
 800a630:	6824      	ldr	r4, [r4, #0]
 800a632:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800a636:	2a02      	cmp	r2, #2
 800a638:	f000 87a4 	beq.w	800b584 <forward_conv2d+0xf80>
 800a63c:	69dd      	ldr	r5, [r3, #28]
 800a63e:	2d00      	cmp	r5, #0
 800a640:	f000 8799 	beq.w	800b576 <forward_conv2d+0xf72>
 800a644:	f113 0218 	adds.w	r2, r3, #24
 800a648:	682c      	ldr	r4, [r5, #0]
 800a64a:	d004      	beq.n	800a656 <forward_conv2d+0x52>
 800a64c:	8b1b      	ldrh	r3, [r3, #24]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	f240 87a6 	bls.w	800b5a0 <forward_conv2d+0xf9c>
 800a654:	686a      	ldr	r2, [r5, #4]
 800a656:	68ab      	ldr	r3, [r5, #8]
 800a658:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800a65c:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800a660:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800a664:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800a668:	68ce      	ldr	r6, [r1, #12]
 800a66a:	69a1      	ldr	r1, [r4, #24]
 800a66c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800a670:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800a674:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800a678:	f8de 1004 	ldr.w	r1, [lr, #4]
 800a67c:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800a680:	f8de 100c 	ldr.w	r1, [lr, #12]
 800a684:	6479      	str	r1, [r7, #68]	; 0x44
 800a686:	f8de 1008 	ldr.w	r1, [lr, #8]
 800a68a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800a68e:	6871      	ldr	r1, [r6, #4]
 800a690:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800a694:	68f1      	ldr	r1, [r6, #12]
 800a696:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800a69a:	68b1      	ldr	r1, [r6, #8]
 800a69c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800a6a0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a6a4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800a6a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a6ac:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800a6b0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a6b4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800a6b6:	6889      	ldr	r1, [r1, #8]
 800a6b8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800a6bc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800a6be:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800a6c2:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800a6c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a6c8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800a6cc:	69c1      	ldr	r1, [r0, #28]
 800a6ce:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800a6d2:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800a6d6:	2a00      	cmp	r2, #0
 800a6d8:	f000 8749 	beq.w	800b56e <forward_conv2d+0xf6a>
 800a6dc:	6992      	ldr	r2, [r2, #24]
 800a6de:	6892      	ldr	r2, [r2, #8]
 800a6e0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800a6e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a6e8:	6992      	ldr	r2, [r2, #24]
 800a6ea:	6892      	ldr	r2, [r2, #8]
 800a6ec:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	6a00      	ldr	r0, [r0, #32]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 872c 	beq.w	800b552 <forward_conv2d+0xf4e>
 800a6fa:	699a      	ldr	r2, [r3, #24]
 800a6fc:	2a00      	cmp	r2, #0
 800a6fe:	f000 8594 	beq.w	800b22a <forward_conv2d+0xc26>
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a70a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a70e:	6893      	ldr	r3, [r2, #8]
 800a710:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a714:	f001 fed0 	bl	800c4b8 <ai_array_get_byte_size>
 800a718:	69a3      	ldr	r3, [r4, #24]
 800a71a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800a71e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a728:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a72a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a72e:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800a732:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 800a736:	fa1f f088 	uxth.w	r0, r8
 800a73a:	4125      	asrs	r5, r4
 800a73c:	3801      	subs	r0, #1
 800a73e:	1e4c      	subs	r4, r1, #1
 800a740:	fb04 1100 	mla	r1, r4, r0, r1
 800a744:	6439      	str	r1, [r7, #64]	; 0x40
 800a746:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800a74a:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800aaec <forward_conv2d+0x4e8>
 800a74e:	fa1f f289 	uxth.w	r2, r9
 800a752:	3a01      	subs	r2, #1
 800a754:	1e48      	subs	r0, r1, #1
 800a756:	fb00 1102 	mla	r1, r0, r2, r1
 800a75a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a75e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800a762:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a766:	4610      	mov	r0, r2
 800a768:	2a00      	cmp	r2, #0
 800a76a:	bf08      	it	eq
 800a76c:	4660      	moveq	r0, ip
 800a76e:	2b04      	cmp	r3, #4
 800a770:	b2ad      	uxth	r5, r5
 800a772:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800a776:	f000 8533 	beq.w	800b1e0 <forward_conv2d+0xbdc>
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	f000 8530 	beq.w	800b1e0 <forward_conv2d+0xbdc>
 800a780:	fa1f f38b 	uxth.w	r3, fp
 800a784:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a788:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a78c:	425b      	negs	r3, r3
 800a78e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a792:	2900      	cmp	r1, #0
 800a794:	f000 8242 	beq.w	800ac1c <forward_conv2d+0x618>
 800a798:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800a79c:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 800a7a0:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800aae8 <forward_conv2d+0x4e4>
 800a7a4:	fb00 f305 	mul.w	r3, r0, r5
 800a7a8:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800a7ac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800a7b0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800a7b4:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800a7b8:	663d      	str	r5, [r7, #96]	; 0x60
 800a7ba:	fa0f f288 	sxth.w	r2, r8
 800a7be:	fb03 f400 	mul.w	r4, r3, r0
 800a7c2:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800a7c6:	fa1f f18a 	uxth.w	r1, sl
 800a7ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a7ce:	67bc      	str	r4, [r7, #120]	; 0x78
 800a7d0:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800a7d4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800a7d8:	4249      	negs	r1, r1
 800a7da:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a7de:	0092      	lsls	r2, r2, #2
 800a7e0:	0081      	lsls	r1, r0, #2
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800a7e8:	fb04 f200 	mul.w	r2, r4, r0
 800a7ec:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800a7f0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800a7f4:	fb01 fc00 	mul.w	ip, r1, r0
 800a7f8:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800a7fc:	fb01 fc03 	mul.w	ip, r1, r3
 800a800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a802:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a810:	fa0f f689 	sxth.w	r6, r9
 800a814:	469c      	mov	ip, r3
 800a816:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800a81a:	4633      	mov	r3, r6
 800a81c:	fb0c f606 	mul.w	r6, ip, r6
 800a820:	677e      	str	r6, [r7, #116]	; 0x74
 800a822:	4666      	mov	r6, ip
 800a824:	fb04 f606 	mul.w	r6, r4, r6
 800a828:	4686      	mov	lr, r0
 800a82a:	4620      	mov	r0, r4
 800a82c:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800a830:	62be      	str	r6, [r7, #40]	; 0x28
 800a832:	fb01 f404 	mul.w	r4, r1, r4
 800a836:	fb03 f605 	mul.w	r6, r3, r5
 800a83a:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800a83c:	66bc      	str	r4, [r7, #104]	; 0x68
 800a83e:	460b      	mov	r3, r1
 800a840:	4604      	mov	r4, r0
 800a842:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a846:	627e      	str	r6, [r7, #36]	; 0x24
 800a848:	fb05 f404 	mul.w	r4, r5, r4
 800a84c:	617c      	str	r4, [r7, #20]
 800a84e:	460c      	mov	r4, r1
 800a850:	fb04 f403 	mul.w	r4, r4, r3
 800a854:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800a858:	65bc      	str	r4, [r7, #88]	; 0x58
 800a85a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800a85e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a862:	fb01 f104 	mul.w	r1, r1, r4
 800a866:	61b9      	str	r1, [r7, #24]
 800a868:	0091      	lsls	r1, r2, #2
 800a86a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a86e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a870:	fb00 f202 	mul.w	r2, r0, r2
 800a874:	0081      	lsls	r1, r0, #2
 800a876:	61f9      	str	r1, [r7, #28]
 800a878:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800a87c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800a880:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800a884:	011a      	lsls	r2, r3, #4
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a88c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a894:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800a898:	2300      	movs	r3, #0
 800a89a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a89c:	607a      	str	r2, [r7, #4]
 800a89e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8a0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800a8a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a8a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a8ac:	2900      	cmp	r1, #0
 800a8ae:	441a      	add	r2, r3
 800a8b0:	bfb4      	ite	lt
 800a8b2:	2100      	movlt	r1, #0
 800a8b4:	2300      	movge	r3, #0
 800a8b6:	4282      	cmp	r2, r0
 800a8b8:	bf28      	it	cs
 800a8ba:	4602      	movcs	r2, r0
 800a8bc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800a8c0:	2801      	cmp	r0, #1
 800a8c2:	f000 8320 	beq.w	800af06 <forward_conv2d+0x902>
 800a8c6:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800a8ca:	4281      	cmp	r1, r0
 800a8cc:	f000 81c3 	beq.w	800ac56 <forward_conv2d+0x652>
 800a8d0:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	f000 8182 	beq.w	800abde <forward_conv2d+0x5da>
 800a8da:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800a8de:	fb93 f1f0 	sdiv	r1, r3, r0
 800a8e2:	fb00 3111 	mls	r1, r0, r1, r3
 800a8e6:	1a41      	subs	r1, r0, r1
 800a8e8:	1ad2      	subs	r2, r2, r3
 800a8ea:	fb91 f5f0 	sdiv	r5, r1, r0
 800a8ee:	fb00 1515 	mls	r5, r0, r5, r1
 800a8f2:	1b52      	subs	r2, r2, r5
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	4402      	add	r2, r0
 800a8f8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800a8fc:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 800a900:	f8c7 b020 	str.w	fp, [r7, #32]
 800a904:	4604      	mov	r4, r0
 800a906:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800a90a:	fbb4 f4f0 	udiv	r4, r4, r0
 800a90e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a910:	3a01      	subs	r2, #1
 800a912:	fb92 f8f1 	sdiv	r8, r2, r1
 800a916:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a91a:	eba0 0c04 	sub.w	ip, r0, r4
 800a91e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800a922:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800a926:	4614      	mov	r4, r2
 800a928:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800a92c:	fbb4 f2f2 	udiv	r2, r4, r2
 800a930:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800a934:	657a      	str	r2, [r7, #84]	; 0x54
 800a936:	441d      	add	r5, r3
 800a938:	fb0e f000 	mul.w	r0, lr, r0
 800a93c:	440b      	add	r3, r1
 800a93e:	eba6 0608 	sub.w	r6, r6, r8
 800a942:	fb04 f505 	mul.w	r5, r4, r5
 800a946:	3b01      	subs	r3, #1
 800a948:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800a94c:	fb93 f3f4 	sdiv	r3, r3, r4
 800a950:	fb00 f406 	mul.w	r4, r0, r6
 800a954:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800a958:	66fd      	str	r5, [r7, #108]	; 0x6c
 800a95a:	0091      	lsls	r1, r2, #2
 800a95c:	fb00 f003 	mul.w	r0, r0, r3
 800a960:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800a964:	6538      	str	r0, [r7, #80]	; 0x50
 800a966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a96a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800a96e:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800a972:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800a976:	1ac3      	subs	r3, r0, r3
 800a978:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800a97c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a980:	008b      	lsls	r3, r1, #2
 800a982:	637b      	str	r3, [r7, #52]	; 0x34
 800a984:	00d3      	lsls	r3, r2, #3
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a98c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a990:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a998:	2300      	movs	r3, #0
 800a99a:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800a99e:	673b      	str	r3, [r7, #112]	; 0x70
 800a9a0:	46c2      	mov	sl, r8
 800a9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a9aa:	eb03 0c02 	add.w	ip, r3, r2
 800a9ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f2c0 813b 	blt.w	800ac2e <forward_conv2d+0x62a>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800a9bc:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9cc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9d6:	440a      	add	r2, r1
 800a9d8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a9dc:	428b      	cmp	r3, r1
 800a9de:	bf94      	ite	ls
 800a9e0:	ebc6 0303 	rsbls	r3, r6, r3
 800a9e4:	ebc6 0301 	rsbhi	r3, r6, r1
 800a9e8:	4415      	add	r5, r2
 800a9ea:	1a1b      	subs	r3, r3, r0
 800a9ec:	00a4      	lsls	r4, r4, #2
 800a9ee:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800a9f2:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800a9f6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a9fa:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	bf08      	it	eq
 800aa02:	4662      	moveq	r2, ip
 800aa04:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa08:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800aa0c:	fb91 f1f0 	sdiv	r1, r1, r0
 800aa10:	4429      	add	r1, r5
 800aa12:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800aa16:	fb0e 5501 	mla	r5, lr, r1, r5
 800aa1a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800aa1e:	4403      	add	r3, r0
 800aa20:	fb01 6104 	mla	r1, r1, r4, r6
 800aa24:	3b01      	subs	r3, #1
 800aa26:	fb93 f6f0 	sdiv	r6, r3, r0
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800aa30:	fb06 3110 	mls	r1, r6, r0, r3
 800aa34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aa38:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800aa3c:	4562      	cmp	r2, ip
 800aa3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa42:	bf08      	it	eq
 800aa44:	eeb0 6a48 	vmoveq.f32	s12, s16
 800aa48:	1b9b      	subs	r3, r3, r6
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d076      	beq.n	800ab3c <forward_conv2d+0x538>
 800aa4e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800aa52:	fb0e f803 	mul.w	r8, lr, r3
 800aa56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa58:	fb00 fb01 	mul.w	fp, r0, r1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d06d      	beq.n	800ab3c <forward_conv2d+0x538>
 800aa60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa64:	18d3      	adds	r3, r2, r3
 800aa66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	633b      	str	r3, [r7, #48]	; 0x30
 800aa72:	2300      	movs	r3, #0
 800aa74:	667b      	str	r3, [r7, #100]	; 0x64
 800aa76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7c:	4413      	add	r3, r2
 800aa7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	4413      	add	r3, r2
 800aa88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aa8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aa90:	ecf3 7a01 	vldmia	r3!, {s15}
 800aa94:	f1ba 0f00 	cmp.w	sl, #0
 800aa98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aa9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aaa0:	f340 80c3 	ble.w	800ac2a <forward_conv2d+0x626>
 800aaa4:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800aaa8:	f04f 0c00 	mov.w	ip, #0
 800aaac:	2e00      	cmp	r6, #0
 800aaae:	dd1f      	ble.n	800aaf0 <forward_conv2d+0x4ec>
 800aab0:	2100      	movs	r1, #0
 800aab2:	eb00 040e 	add.w	r4, r0, lr
 800aab6:	4284      	cmp	r4, r0
 800aab8:	d910      	bls.n	800aadc <forward_conv2d+0x4d8>
 800aaba:	4603      	mov	r3, r0
 800aabc:	462a      	mov	r2, r5
 800aabe:	ecb3 7a01 	vldmia	r3!, {s14}
 800aac2:	ecf2 6a01 	vldmia	r2!, {s13}
 800aac6:	429c      	cmp	r4, r3
 800aac8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aacc:	d8f7      	bhi.n	800aabe <forward_conv2d+0x4ba>
 800aace:	43c3      	mvns	r3, r0
 800aad0:	441c      	add	r4, r3
 800aad2:	f024 0403 	bic.w	r4, r4, #3
 800aad6:	3404      	adds	r4, #4
 800aad8:	4425      	add	r5, r4
 800aada:	4420      	add	r0, r4
 800aadc:	3101      	adds	r1, #1
 800aade:	428e      	cmp	r6, r1
 800aae0:	4448      	add	r0, r9
 800aae2:	d1e6      	bne.n	800aab2 <forward_conv2d+0x4ae>
 800aae4:	e004      	b.n	800aaf0 <forward_conv2d+0x4ec>
 800aae6:	bf00      	nop
 800aae8:	00000000 	.word	0x00000000
 800aaec:	0800a561 	.word	0x0800a561
 800aaf0:	f10c 0c01 	add.w	ip, ip, #1
 800aaf4:	45e2      	cmp	sl, ip
 800aaf6:	4458      	add	r0, fp
 800aaf8:	4445      	add	r5, r8
 800aafa:	d1d7      	bne.n	800aaac <forward_conv2d+0x4a8>
 800aafc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ab00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab04:	441d      	add	r5, r3
 800ab06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ab0a:	ece3 7a01 	vstmia	r3!, {s15}
 800ab0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ab12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d1b8      	bne.n	800aa8c <forward_conv2d+0x488>
 800ab1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ab1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab22:	4472      	add	r2, lr
 800ab24:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab2a:	1a52      	subs	r2, r2, r1
 800ab2c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800ab30:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ab34:	3301      	adds	r3, #1
 800ab36:	429a      	cmp	r2, r3
 800ab38:	667b      	str	r3, [r7, #100]	; 0x64
 800ab3a:	d19c      	bne.n	800aa76 <forward_conv2d+0x472>
 800ab3c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800ab40:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ab44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab46:	4608      	mov	r0, r1
 800ab48:	4410      	add	r0, r2
 800ab4a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800ab4e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800ab52:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800ab56:	4401      	add	r1, r0
 800ab58:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800ab5c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ab60:	1a8a      	subs	r2, r1, r2
 800ab62:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800ab66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	673b      	str	r3, [r7, #112]	; 0x70
 800ab70:	f47f af17 	bne.w	800a9a2 <forward_conv2d+0x39e>
 800ab74:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800ab78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab7c:	b37b      	cbz	r3, 800abde <forward_conv2d+0x5da>
 800ab7e:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800ab82:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800ab86:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 800ab8a:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 800ab8e:	2500      	movs	r5, #0
 800ab90:	46a2      	mov	sl, r4
 800ab92:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ab96:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800ab9a:	f8c2 a008 	str.w	sl, [r2, #8]
 800ab9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800aba2:	4633      	mov	r3, r6
 800aba4:	4641      	mov	r1, r8
 800aba6:	4416      	add	r6, r2
 800aba8:	4640      	mov	r0, r8
 800abaa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800abae:	47a0      	blx	r4
 800abb0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800abb4:	4492      	add	sl, r2
 800abb6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800abba:	eba6 0309 	sub.w	r3, r6, r9
 800abbe:	4293      	cmp	r3, r2
 800abc0:	bfa8      	it	ge
 800abc2:	464e      	movge	r6, r9
 800abc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800abc8:	3501      	adds	r5, #1
 800abca:	42ab      	cmp	r3, r5
 800abcc:	d1e1      	bne.n	800ab92 <forward_conv2d+0x58e>
 800abce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd2:	69ba      	ldr	r2, [r7, #24]
 800abd4:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800abd8:	4413      	add	r3, r2
 800abda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abe2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	609a      	str	r2, [r3, #8]
 800abea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abf0:	4610      	mov	r0, r2
 800abf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800abf6:	4418      	add	r0, r3
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac04:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800ac08:	4413      	add	r3, r2
 800ac0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac12:	3101      	adds	r1, #1
 800ac14:	428b      	cmp	r3, r1
 800ac16:	67f9      	str	r1, [r7, #124]	; 0x7c
 800ac18:	f47f ae42 	bne.w	800a8a0 <forward_conv2d+0x29c>
 800ac1c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800ac20:	46bd      	mov	sp, r7
 800ac22:	ecbd 8b10 	vpop	{d8-d15}
 800ac26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	e768      	b.n	800ab00 <forward_conv2d+0x4fc>
 800ac2e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ac32:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800ac36:	fb90 f3f2 	sdiv	r3, r0, r2
 800ac3a:	fb02 0313 	mls	r3, r2, r3, r0
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	4605      	mov	r5, r0
 800ac42:	fb93 f0f2 	sdiv	r0, r3, r2
 800ac46:	fb02 3010 	mls	r0, r2, r0, r3
 800ac4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4c:	462e      	mov	r6, r5
 800ac4e:	18c4      	adds	r4, r0, r3
 800ac50:	eb02 0805 	add.w	r8, r2, r5
 800ac54:	e6b6      	b.n	800a9c4 <forward_conv2d+0x3c0>
 800ac56:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ac58:	2901      	cmp	r1, #1
 800ac5a:	f47f ae39 	bne.w	800a8d0 <forward_conv2d+0x2cc>
 800ac5e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800ac62:	2900      	cmp	r1, #0
 800ac64:	d0bb      	beq.n	800abde <forward_conv2d+0x5da>
 800ac66:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ac6a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800ac6e:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800ac72:	fbb1 f5f0 	udiv	r5, r1, r0
 800ac76:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800ac7a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800ac7e:	633d      	str	r5, [r7, #48]	; 0x30
 800ac80:	1ad2      	subs	r2, r2, r3
 800ac82:	1a8c      	subs	r4, r1, r2
 800ac84:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ac88:	00b2      	lsls	r2, r6, #2
 800ac8a:	fb02 f204 	mul.w	r2, r2, r4
 800ac8e:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800ac92:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800ac96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac98:	0082      	lsls	r2, r0, #2
 800ac9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ac9c:	00ca      	lsls	r2, r1, #3
 800ac9e:	603a      	str	r2, [r7, #0]
 800aca0:	00aa      	lsls	r2, r5, #2
 800aca2:	60ba      	str	r2, [r7, #8]
 800aca4:	fb03 f206 	mul.w	r2, r3, r6
 800aca8:	673a      	str	r2, [r7, #112]	; 0x70
 800acaa:	69fa      	ldr	r2, [r7, #28]
 800acac:	fb02 f303 	mul.w	r3, r2, r3
 800acb0:	637b      	str	r3, [r7, #52]	; 0x34
 800acb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800acb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800acc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800acc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800acca:	2300      	movs	r3, #0
 800accc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800acd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f2c0 8110 	blt.w	800aefa <forward_conv2d+0x8f6>
 800acda:	2100      	movs	r1, #0
 800acdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acde:	460a      	mov	r2, r1
 800ace0:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800ace4:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800ace8:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800acec:	4420      	add	r0, r4
 800acee:	4408      	add	r0, r1
 800acf0:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800acf4:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800acf8:	190c      	adds	r4, r1, r4
 800acfa:	42ac      	cmp	r4, r5
 800acfc:	bf28      	it	cs
 800acfe:	462c      	movcs	r4, r5
 800ad00:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800ad04:	0080      	lsls	r0, r0, #2
 800ad06:	1aa4      	subs	r4, r4, r2
 800ad08:	2d00      	cmp	r5, #0
 800ad0a:	f000 80e7 	beq.w	800aedc <forward_conv2d+0x8d8>
 800ad0e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800ad12:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800ad16:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800ad1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ad1e:	42b5      	cmp	r5, r6
 800ad20:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800ad24:	eba3 0204 	sub.w	r2, r3, r4
 800ad28:	eba1 0104 	sub.w	r1, r1, r4
 800ad2c:	bf08      	it	eq
 800ad2e:	eef0 3a48 	vmoveq.f32	s7, s16
 800ad32:	462b      	mov	r3, r5
 800ad34:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800ad36:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800ad3a:	4428      	add	r0, r5
 800ad3c:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800ad40:	fb05 6e00 	mla	lr, r5, r0, r6
 800ad44:	eb0e 000b 	add.w	r0, lr, fp
 800ad48:	4586      	cmp	lr, r0
 800ad4a:	6238      	str	r0, [r7, #32]
 800ad4c:	f080 80a5 	bcs.w	800ae9a <forward_conv2d+0x896>
 800ad50:	0092      	lsls	r2, r2, #2
 800ad52:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ad56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad58:	fb0b f101 	mul.w	r1, fp, r1
 800ad5c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800ad60:	f024 0803 	bic.w	r8, r4, #3
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	f000 8098 	beq.w	800ae9a <forward_conv2d+0x896>
 800ad6a:	f108 32ff 	add.w	r2, r8, #4294967295
 800ad6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ad70:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ad74:	0892      	lsrs	r2, r2, #2
 800ad76:	3201      	adds	r2, #1
 800ad78:	4401      	add	r1, r0
 800ad7a:	fb02 f00a 	mul.w	r0, r2, sl
 800ad7e:	6578      	str	r0, [r7, #84]	; 0x54
 800ad80:	0110      	lsls	r0, r2, #4
 800ad82:	0092      	lsls	r2, r2, #2
 800ad84:	653a      	str	r2, [r7, #80]	; 0x50
 800ad86:	1aca      	subs	r2, r1, r3
 800ad88:	613a      	str	r2, [r7, #16]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	6678      	str	r0, [r7, #100]	; 0x64
 800ad8e:	4413      	add	r3, r2
 800ad90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	4413      	add	r3, r2
 800ada6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ada8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adac:	ecf3 6a01 	vldmia	r3!, {s13}
 800adb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800adb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adb8:	2b00      	cmp	r3, #0
 800adba:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800adbe:	dd57      	ble.n	800ae70 <forward_conv2d+0x86c>
 800adc0:	4676      	mov	r6, lr
 800adc2:	f04f 0c00 	mov.w	ip, #0
 800adc6:	f1b8 0f00 	cmp.w	r8, #0
 800adca:	f340 8085 	ble.w	800aed8 <forward_conv2d+0x8d4>
 800adce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800add2:	f109 0310 	add.w	r3, r9, #16
 800add6:	18b1      	adds	r1, r6, r2
 800add8:	2000      	movs	r0, #0
 800adda:	4632      	mov	r2, r6
 800addc:	eb02 050b 	add.w	r5, r2, fp
 800ade0:	ed95 7a00 	vldr	s14, [r5]
 800ade4:	ed53 7a03 	vldr	s15, [r3, #-12]
 800ade8:	ed92 4a00 	vldr	s8, [r2]
 800adec:	ed53 4a04 	vldr	s9, [r3, #-16]
 800adf0:	ed91 5a00 	vldr	s10, [r1]
 800adf4:	ed53 5a02 	vldr	s11, [r3, #-8]
 800adf8:	ed13 6a01 	vldr	s12, [r3, #-4]
 800adfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae00:	eb01 050b 	add.w	r5, r1, fp
 800ae04:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ae08:	3004      	adds	r0, #4
 800ae0a:	4540      	cmp	r0, r8
 800ae0c:	ed95 7a00 	vldr	s14, [r5]
 800ae10:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ae14:	4452      	add	r2, sl
 800ae16:	4451      	add	r1, sl
 800ae18:	f103 0310 	add.w	r3, r3, #16
 800ae1c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ae20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ae24:	dbda      	blt.n	800addc <forward_conv2d+0x7d8>
 800ae26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ae2a:	441e      	add	r6, r3
 800ae2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae2e:	4499      	add	r9, r3
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	da11      	bge.n	800ae58 <forward_conv2d+0x854>
 800ae34:	4602      	mov	r2, r0
 800ae36:	4633      	mov	r3, r6
 800ae38:	4649      	mov	r1, r9
 800ae3a:	edd3 7a00 	vldr	s15, [r3]
 800ae3e:	ecb1 7a01 	vldmia	r1!, {s14}
 800ae42:	3201      	adds	r2, #1
 800ae44:	42a2      	cmp	r2, r4
 800ae46:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae4a:	445b      	add	r3, fp
 800ae4c:	d1f5      	bne.n	800ae3a <forward_conv2d+0x836>
 800ae4e:	1a20      	subs	r0, r4, r0
 800ae50:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800ae54:	fb00 660b 	mla	r6, r0, fp, r6
 800ae58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae5c:	441e      	add	r6, r3
 800ae5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae62:	4499      	add	r9, r3
 800ae64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae68:	f10c 0c01 	add.w	ip, ip, #1
 800ae6c:	4563      	cmp	r3, ip
 800ae6e:	d1aa      	bne.n	800adc6 <forward_conv2d+0x7c2>
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	4499      	add	r9, r3
 800ae74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae76:	ece3 6a01 	vstmia	r3!, {s13}
 800ae7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae7c:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d191      	bne.n	800ada8 <forward_conv2d+0x7a4>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	1a9b      	subs	r3, r3, r2
 800ae8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	f10e 0e04 	add.w	lr, lr, #4
 800ae94:	459e      	cmp	lr, r3
 800ae96:	f4ff af7d 	bcc.w	800ad94 <forward_conv2d+0x790>
 800ae9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ae9e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800aea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aea6:	440a      	add	r2, r1
 800aea8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800aeac:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800aeb6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800aeba:	4410      	add	r0, r2
 800aebc:	1a8a      	subs	r2, r1, r2
 800aebe:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800aec2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800aec6:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800aeca:	3301      	adds	r3, #1
 800aecc:	429a      	cmp	r2, r3
 800aece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aed2:	f47f aefd 	bne.w	800acd0 <forward_conv2d+0x6cc>
 800aed6:	e64f      	b.n	800ab78 <forward_conv2d+0x574>
 800aed8:	2000      	movs	r0, #0
 800aeda:	e7a9      	b.n	800ae30 <forward_conv2d+0x82c>
 800aedc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800aee0:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800aee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee8:	1b19      	subs	r1, r3, r4
 800aeea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aeee:	eef0 3a48 	vmov.f32	s7, s16
 800aef2:	1b1a      	subs	r2, r3, r4
 800aef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aef8:	e71c      	b.n	800ad34 <forward_conv2d+0x730>
 800aefa:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800aefe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af00:	460a      	mov	r2, r1
 800af02:	440b      	add	r3, r1
 800af04:	e6ec      	b.n	800ace0 <forward_conv2d+0x6dc>
 800af06:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800af08:	2801      	cmp	r0, #1
 800af0a:	f47f ace1 	bne.w	800a8d0 <forward_conv2d+0x2cc>
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800af12:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800af16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800af1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af1c:	fb00 4101 	mla	r1, r0, r1, r4
 800af20:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800af24:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800af28:	f080 8191 	bcs.w	800b24e <forward_conv2d+0xc4a>
 800af2c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800af30:	2a00      	cmp	r2, #0
 800af32:	f43f ae21 	beq.w	800ab78 <forward_conv2d+0x574>
 800af36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af38:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 800af3c:	fb02 f303 	mul.w	r3, r2, r3
 800af40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af42:	667b      	str	r3, [r7, #100]	; 0x64
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af48:	188b      	adds	r3, r1, r2
 800af4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800af50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af64:	2300      	movs	r3, #0
 800af66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f000 8133 	beq.w	800b1da <forward_conv2d+0xbd6>
 800af74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af78:	ed93 6a00 	vldr	s12, [r3]
 800af7c:	3304      	adds	r3, #4
 800af7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 8101 	beq.w	800b18e <forward_conv2d+0xb8a>
 800af8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af94:	eb03 0802 	add.w	r8, r3, r2
 800af98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afa8:	673b      	str	r3, [r7, #112]	; 0x70
 800afaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afb2:	f04f 0b00 	mov.w	fp, #0
 800afb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f2c0 8104 	blt.w	800b1c8 <forward_conv2d+0xbc4>
 800afc0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800afc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afc6:	2300      	movs	r3, #0
 800afc8:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800afcc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800afd0:	eb02 0c04 	add.w	ip, r2, r4
 800afd4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800afd8:	4540      	cmp	r0, r8
 800afda:	bf94      	ite	ls
 800afdc:	ebc3 0300 	rsbls	r3, r3, r0
 800afe0:	ebc3 0308 	rsbhi	r3, r3, r8
 800afe4:	eba2 0903 	sub.w	r9, r2, r3
 800afe8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800afec:	1ac4      	subs	r4, r0, r3
 800afee:	fb03 f302 	mul.w	r3, r3, r2
 800aff2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	f340 80e3 	ble.w	800b1c2 <forward_conv2d+0xbbe>
 800affc:	f023 050f 	bic.w	r5, r3, #15
 800b000:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800b004:	1e68      	subs	r0, r5, #1
 800b006:	0900      	lsrs	r0, r0, #4
 800b008:	3001      	adds	r0, #1
 800b00a:	fb06 f204 	mul.w	r2, r6, r4
 800b00e:	657a      	str	r2, [r7, #84]	; 0x54
 800b010:	0102      	lsls	r2, r0, #4
 800b012:	653a      	str	r2, [r7, #80]	; 0x50
 800b014:	fb06 f909 	mul.w	r9, r6, r9
 800b018:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800b01c:	eef0 6a46 	vmov.f32	s13, s12
 800b020:	f04f 0e00 	mov.w	lr, #0
 800b024:	4662      	mov	r2, ip
 800b026:	2d00      	cmp	r5, #0
 800b028:	f340 80c9 	ble.w	800b1be <forward_conv2d+0xbba>
 800b02c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800b030:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b034:	2600      	movs	r6, #0
 800b036:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800b03a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800b03e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800b042:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800b046:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800b04a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800b04e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800b052:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800b056:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800b05a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800b05e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800b062:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800b066:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800b06a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800b06e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800b072:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800b076:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800b07a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800b07e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b082:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800b086:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800b08a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800b08e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800b092:	ed50 3a04 	vldr	s7, [r0, #-16]
 800b096:	ed14 4a04 	vldr	s8, [r4, #-16]
 800b09a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b09e:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b0a2:	ed50 5a02 	vldr	s11, [r0, #-8]
 800b0a6:	ed14 7a02 	vldr	s14, [r4, #-8]
 800b0aa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800b0ae:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800b0b2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b0b6:	3610      	adds	r6, #16
 800b0b8:	42ae      	cmp	r6, r5
 800b0ba:	ed14 fa01 	vldr	s30, [r4, #-4]
 800b0be:	ed50 ea01 	vldr	s29, [r0, #-4]
 800b0c2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800b0c6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800b0ca:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800b0ce:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b0d2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b0d6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b0da:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b0de:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b0e2:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b0e6:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b0ea:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b0ee:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b0f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b0f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b0fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b0fe:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b102:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b106:	db96      	blt.n	800b036 <forward_conv2d+0xa32>
 800b108:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b10a:	4451      	add	r1, sl
 800b10c:	4452      	add	r2, sl
 800b10e:	4283      	cmp	r3, r0
 800b110:	dd0f      	ble.n	800b132 <forward_conv2d+0xb2e>
 800b112:	4604      	mov	r4, r0
 800b114:	468c      	mov	ip, r1
 800b116:	4616      	mov	r6, r2
 800b118:	ecb6 7a01 	vldmia	r6!, {s14}
 800b11c:	ecfc 7a01 	vldmia	ip!, {s15}
 800b120:	3401      	adds	r4, #1
 800b122:	42a3      	cmp	r3, r4
 800b124:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b128:	d1f6      	bne.n	800b118 <forward_conv2d+0xb14>
 800b12a:	1a18      	subs	r0, r3, r0
 800b12c:	0080      	lsls	r0, r0, #2
 800b12e:	4402      	add	r2, r0
 800b130:	4401      	add	r1, r0
 800b132:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b134:	4402      	add	r2, r0
 800b136:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b13a:	f10e 0e01 	add.w	lr, lr, #1
 800b13e:	4570      	cmp	r0, lr
 800b140:	4449      	add	r1, r9
 800b142:	f47f af70 	bne.w	800b026 <forward_conv2d+0xa22>
 800b146:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b14a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b14c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b150:	edc3 6a00 	vstr	s13, [r3]
 800b154:	4608      	mov	r0, r1
 800b156:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b15a:	440b      	add	r3, r1
 800b15c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b160:	673b      	str	r3, [r7, #112]	; 0x70
 800b162:	4410      	add	r0, r2
 800b164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b166:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800b16a:	4608      	mov	r0, r1
 800b16c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b170:	4418      	add	r0, r3
 800b172:	1acb      	subs	r3, r1, r3
 800b174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b178:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b17c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800b180:	f10b 0b01 	add.w	fp, fp, #1
 800b184:	455b      	cmp	r3, fp
 800b186:	eba8 0802 	sub.w	r8, r8, r2
 800b18a:	f47f af14 	bne.w	800afb6 <forward_conv2d+0x9b2>
 800b18e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b198:	440a      	add	r2, r1
 800b19a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b19e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b1a2:	3204      	adds	r2, #4
 800b1a4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b1a8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1b4:	f47f aed9 	bne.w	800af6a <forward_conv2d+0x966>
 800b1b8:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 800b1bc:	e4dc      	b.n	800ab78 <forward_conv2d+0x574>
 800b1be:	2000      	movs	r0, #0
 800b1c0:	e7a5      	b.n	800b10e <forward_conv2d+0xb0a>
 800b1c2:	eef0 6a46 	vmov.f32	s13, s12
 800b1c6:	e7be      	b.n	800b146 <forward_conv2d+0xb42>
 800b1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b1d0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b1d4:	eba8 0303 	sub.w	r3, r8, r3
 800b1d8:	e6f6      	b.n	800afc8 <forward_conv2d+0x9c4>
 800b1da:	eeb0 6a48 	vmov.f32	s12, s16
 800b1de:	e6d0      	b.n	800af82 <forward_conv2d+0x97e>
 800b1e0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b1e4:	68ca      	ldr	r2, [r1, #12]
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	f43f aaca 	beq.w	800a780 <forward_conv2d+0x17c>
 800b1ec:	69b3      	ldr	r3, [r6, #24]
 800b1ee:	8818      	ldrh	r0, [r3, #0]
 800b1f0:	2803      	cmp	r0, #3
 800b1f2:	f240 819f 	bls.w	800b534 <forward_conv2d+0xf30>
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fa:	b32b      	cbz	r3, 800b248 <forward_conv2d+0xc44>
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	b31b      	cbz	r3, 800b248 <forward_conv2d+0xc44>
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	6889      	ldr	r1, [r1, #8]
 800b204:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800b20e:	9000      	str	r0, [sp, #0]
 800b210:	462b      	mov	r3, r5
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff f9a6 	bl	800a564 <ai_dict_decompress_f32>
 800b218:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b21c:	2c00      	cmp	r4, #0
 800b21e:	bf18      	it	ne
 800b220:	4623      	movne	r3, r4
 800b222:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b226:	f7ff baab 	b.w	800a780 <forward_conv2d+0x17c>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f000 8185 	beq.w	800b53a <forward_conv2d+0xf36>
 800b230:	6883      	ldr	r3, [r0, #8]
 800b232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b236:	2301      	movs	r3, #1
 800b238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b23c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b244:	f7ff ba6d 	b.w	800a722 <forward_conv2d+0x11e>
 800b248:	2300      	movs	r3, #0
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	deff      	udf	#255	; 0xff
 800b24e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b252:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800b256:	320a      	adds	r2, #10
 800b258:	f022 0207 	bic.w	r2, r2, #7
 800b25c:	ebad 0d02 	sub.w	sp, sp, r2
 800b260:	aa02      	add	r2, sp, #8
 800b262:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b266:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	f000 814d 	beq.w	800b50a <forward_conv2d+0xf06>
 800b270:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b272:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800b276:	fb02 f303 	mul.w	r3, r2, r3
 800b27a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b27c:	657b      	str	r3, [r7, #84]	; 0x54
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b282:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b286:	4413      	add	r3, r2
 800b288:	637b      	str	r3, [r7, #52]	; 0x34
 800b28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b28e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b296:	673b      	str	r3, [r7, #112]	; 0x70
 800b298:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b29c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b2a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2a8:	b13b      	cbz	r3, 800b2ba <forward_conv2d+0xcb6>
 800b2aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b2ae:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b2b2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b2b6:	f004 fe8f 	bl	800ffd8 <memcpy>
 800b2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 8135 	beq.w	800b52e <forward_conv2d+0xf2a>
 800b2c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2c6:	ed93 6a00 	vldr	s12, [r3]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	673b      	str	r3, [r7, #112]	; 0x70
 800b2ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 8101 	beq.w	800b4da <forward_conv2d+0xed6>
 800b2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b2e0:	eb03 0802 	add.w	r8, r3, r2
 800b2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b2fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2fe:	f04f 0b00 	mov.w	fp, #0
 800b302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b306:	2b00      	cmp	r3, #0
 800b308:	f2c0 8108 	blt.w	800b51c <forward_conv2d+0xf18>
 800b30c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b312:	2300      	movs	r3, #0
 800b314:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800b318:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b31c:	eb02 0c04 	add.w	ip, r2, r4
 800b320:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800b324:	4540      	cmp	r0, r8
 800b326:	bf94      	ite	ls
 800b328:	ebc3 0300 	rsbls	r3, r3, r0
 800b32c:	ebc3 0308 	rsbhi	r3, r3, r8
 800b330:	eba2 0903 	sub.w	r9, r2, r3
 800b334:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800b338:	1ac4      	subs	r4, r0, r3
 800b33a:	fb03 f302 	mul.w	r3, r3, r2
 800b33e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b342:	2a00      	cmp	r2, #0
 800b344:	f340 80e7 	ble.w	800b516 <forward_conv2d+0xf12>
 800b348:	f023 050f 	bic.w	r5, r3, #15
 800b34c:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800b350:	1e68      	subs	r0, r5, #1
 800b352:	0900      	lsrs	r0, r0, #4
 800b354:	3001      	adds	r0, #1
 800b356:	fb06 f204 	mul.w	r2, r6, r4
 800b35a:	653a      	str	r2, [r7, #80]	; 0x50
 800b35c:	0102      	lsls	r2, r0, #4
 800b35e:	633a      	str	r2, [r7, #48]	; 0x30
 800b360:	fb06 f909 	mul.w	r9, r6, r9
 800b364:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800b368:	eef0 6a46 	vmov.f32	s13, s12
 800b36c:	f04f 0e00 	mov.w	lr, #0
 800b370:	4662      	mov	r2, ip
 800b372:	2d00      	cmp	r5, #0
 800b374:	f340 80cd 	ble.w	800b512 <forward_conv2d+0xf0e>
 800b378:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800b37c:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b380:	2600      	movs	r6, #0
 800b382:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800b386:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800b38a:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800b38e:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800b392:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800b396:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800b39a:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800b39e:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800b3a2:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800b3a6:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800b3aa:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800b3ae:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800b3b2:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800b3b6:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800b3ba:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800b3be:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800b3c2:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800b3c6:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800b3ca:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b3ce:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800b3d2:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800b3d6:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800b3da:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800b3de:	ed54 3a04 	vldr	s7, [r4, #-16]
 800b3e2:	ed10 4a04 	vldr	s8, [r0, #-16]
 800b3e6:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b3ea:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b3ee:	ed54 5a02 	vldr	s11, [r4, #-8]
 800b3f2:	ed10 7a02 	vldr	s14, [r0, #-8]
 800b3f6:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800b3fa:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800b3fe:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b402:	3610      	adds	r6, #16
 800b404:	42b5      	cmp	r5, r6
 800b406:	ed14 fa01 	vldr	s30, [r4, #-4]
 800b40a:	ed50 ea01 	vldr	s29, [r0, #-4]
 800b40e:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800b412:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800b416:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800b41a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b41e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b422:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b426:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b42a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b42e:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b432:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b436:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b43a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b43e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b442:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b446:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b44a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b44e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b452:	dc96      	bgt.n	800b382 <forward_conv2d+0xd7e>
 800b454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b456:	4451      	add	r1, sl
 800b458:	4452      	add	r2, sl
 800b45a:	4283      	cmp	r3, r0
 800b45c:	dd0f      	ble.n	800b47e <forward_conv2d+0xe7a>
 800b45e:	4604      	mov	r4, r0
 800b460:	468c      	mov	ip, r1
 800b462:	4616      	mov	r6, r2
 800b464:	ecb6 7a01 	vldmia	r6!, {s14}
 800b468:	ecfc 7a01 	vldmia	ip!, {s15}
 800b46c:	3401      	adds	r4, #1
 800b46e:	42a3      	cmp	r3, r4
 800b470:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b474:	d1f6      	bne.n	800b464 <forward_conv2d+0xe60>
 800b476:	1a18      	subs	r0, r3, r0
 800b478:	0080      	lsls	r0, r0, #2
 800b47a:	4402      	add	r2, r0
 800b47c:	4401      	add	r1, r0
 800b47e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b480:	4402      	add	r2, r0
 800b482:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800b486:	f10e 0e01 	add.w	lr, lr, #1
 800b48a:	4570      	cmp	r0, lr
 800b48c:	4449      	add	r1, r9
 800b48e:	f47f af70 	bne.w	800b372 <forward_conv2d+0xd6e>
 800b492:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b498:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b49c:	edc3 6a00 	vstr	s13, [r3]
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b4a6:	440b      	add	r3, r1
 800b4a8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b4ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4ae:	4410      	add	r0, r2
 800b4b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4b2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b4bc:	4418      	add	r0, r3
 800b4be:	1acb      	subs	r3, r1, r3
 800b4c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b4c8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800b4cc:	f10b 0b01 	add.w	fp, fp, #1
 800b4d0:	455b      	cmp	r3, fp
 800b4d2:	eba8 0802 	sub.w	r8, r8, r2
 800b4d6:	f47f af14 	bne.w	800b302 <forward_conv2d+0xcfe>
 800b4da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b4de:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800b4e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4e6:	440a      	add	r2, r1
 800b4e8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b4ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b4f0:	3204      	adds	r2, #4
 800b4f2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b4f6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b502:	f47f aed0 	bne.w	800b2a6 <forward_conv2d+0xca2>
 800b506:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800b50a:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800b50e:	f7ff bb33 	b.w	800ab78 <forward_conv2d+0x574>
 800b512:	2000      	movs	r0, #0
 800b514:	e7a1      	b.n	800b45a <forward_conv2d+0xe56>
 800b516:	eef0 6a46 	vmov.f32	s13, s12
 800b51a:	e7ba      	b.n	800b492 <forward_conv2d+0xe8e>
 800b51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b520:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b524:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800b528:	eba8 0303 	sub.w	r3, r8, r3
 800b52c:	e6f2      	b.n	800b314 <forward_conv2d+0xd10>
 800b52e:	eeb0 6a48 	vmov.f32	s12, s16
 800b532:	e6cc      	b.n	800b2ce <forward_conv2d+0xcca>
 800b534:	2300      	movs	r3, #0
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	deff      	udf	#255	; 0xff
 800b53a:	4603      	mov	r3, r0
 800b53c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b544:	2301      	movs	r3, #1
 800b546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b54a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b54e:	f7ff b8e8 	b.w	800a722 <forward_conv2d+0x11e>
 800b552:	2800      	cmp	r0, #0
 800b554:	d0f2      	beq.n	800b53c <forward_conv2d+0xf38>
 800b556:	6882      	ldr	r2, [r0, #8]
 800b558:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b55c:	2301      	movs	r3, #1
 800b55e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b562:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800b566:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b56a:	f7ff b8da 	b.w	800a722 <forward_conv2d+0x11e>
 800b56e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800b572:	f7ff b8b7 	b.w	800a6e4 <forward_conv2d+0xe0>
 800b576:	3318      	adds	r3, #24
 800b578:	d007      	beq.n	800b58a <forward_conv2d+0xf86>
 800b57a:	462a      	mov	r2, r5
 800b57c:	462c      	mov	r4, r5
 800b57e:	462b      	mov	r3, r5
 800b580:	f7ff b86a 	b.w	800a658 <forward_conv2d+0x54>
 800b584:	2300      	movs	r3, #0
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	deff      	udf	#255	; 0xff
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	deff      	udf	#255	; 0xff
 800b58e:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800b592:	f7ff b850 	b.w	800a636 <forward_conv2d+0x32>
 800b596:	2300      	movs	r3, #0
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	deff      	udf	#255	; 0xff
 800b59c:	6853      	ldr	r3, [r2, #4]
 800b59e:	deff      	udf	#255	; 0xff
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f7ff b858 	b.w	800a656 <forward_conv2d+0x52>
 800b5a6:	bf00      	nop

0800b5a8 <forward_dense>:
 800b5a8:	6983      	ldr	r3, [r0, #24]
 800b5aa:	881a      	ldrh	r2, [r3, #0]
 800b5ac:	2a00      	cmp	r2, #0
 800b5ae:	f000 8193 	beq.w	800b8d8 <forward_dense+0x330>
 800b5b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b6:	ed2d 8b10 	vpush	{d8-d15}
 800b5ba:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b5be:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b5c2:	b099      	sub	sp, #100	; 0x64
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 8194 	beq.w	800b8f2 <forward_dense+0x34a>
 800b5ca:	f8d3 8000 	ldr.w	r8, [r3]
 800b5ce:	2a01      	cmp	r2, #1
 800b5d0:	f240 817f 	bls.w	800b8d2 <forward_dense+0x32a>
 800b5d4:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800b5d8:	b104      	cbz	r4, 800b5dc <forward_dense+0x34>
 800b5da:	6824      	ldr	r4, [r4, #0]
 800b5dc:	2a02      	cmp	r2, #2
 800b5de:	f000 817d 	beq.w	800b8dc <forward_dense+0x334>
 800b5e2:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f040 817b 	bne.w	800b8e2 <forward_dense+0x33a>
 800b5ec:	f11c 0118 	adds.w	r1, ip, #24
 800b5f0:	930e      	str	r3, [sp, #56]	; 0x38
 800b5f2:	f000 817c 	beq.w	800b8ee <forward_dense+0x346>
 800b5f6:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 800b5fa:	2901      	cmp	r1, #1
 800b5fc:	f240 83ab 	bls.w	800bd56 <forward_dense+0x7ae>
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 8178 	beq.w	800b8f6 <forward_dense+0x34e>
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	930f      	str	r3, [sp, #60]	; 0x3c
 800b60a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b60c:	68e7      	ldr	r7, [r4, #12]
 800b60e:	6998      	ldr	r0, [r3, #24]
 800b610:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b614:	6803      	ldr	r3, [r0, #0]
 800b616:	6849      	ldr	r1, [r1, #4]
 800b618:	9115      	str	r1, [sp, #84]	; 0x54
 800b61a:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 800b61e:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800b622:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800b626:	fa4e f101 	asr.w	r1, lr, r1
 800b62a:	2a03      	cmp	r2, #3
 800b62c:	68ff      	ldr	r7, [r7, #12]
 800b62e:	9113      	str	r1, [sp, #76]	; 0x4c
 800b630:	fb05 f506 	mul.w	r5, r5, r6
 800b634:	f000 8373 	beq.w	800bd1e <forward_dense+0x776>
 800b638:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	f000 8371 	beq.w	800bd24 <forward_dense+0x77c>
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	2a00      	cmp	r2, #0
 800b646:	f000 836d 	beq.w	800bd24 <forward_dense+0x77c>
 800b64a:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800b64e:	2b04      	cmp	r3, #4
 800b650:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b654:	f000 836c 	beq.w	800bd30 <forward_dense+0x788>
 800b658:	2b08      	cmp	r3, #8
 800b65a:	f000 8369 	beq.w	800bd30 <forward_dense+0x788>
 800b65e:	f04f 0a00 	mov.w	sl, #0
 800b662:	69a3      	ldr	r3, [r4, #24]
 800b664:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b668:	6899      	ldr	r1, [r3, #8]
 800b66a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b66c:	9102      	str	r1, [sp, #8]
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	6892      	ldr	r2, [r2, #8]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	9305      	str	r3, [sp, #20]
 800b676:	00ad      	lsls	r5, r5, #2
 800b678:	fb07 1005 	mla	r0, r7, r5, r1
 800b67c:	00b4      	lsls	r4, r6, #2
 800b67e:	4281      	cmp	r1, r0
 800b680:	9011      	str	r0, [sp, #68]	; 0x44
 800b682:	9410      	str	r4, [sp, #64]	; 0x40
 800b684:	eb01 0804 	add.w	r8, r1, r4
 800b688:	f080 811e 	bcs.w	800b8c8 <forward_dense+0x320>
 800b68c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b68e:	eddf faa0 	vldr	s31, [pc, #640]	; 800b910 <forward_dense+0x368>
 800b692:	08e8      	lsrs	r0, r5, #3
 800b694:	0141      	lsls	r1, r0, #5
 800b696:	f025 0301 	bic.w	r3, r5, #1
 800b69a:	4606      	mov	r6, r0
 800b69c:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 800b6a0:	9001      	str	r0, [sp, #4]
 800b6a2:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 800b6a6:	00f7      	lsls	r7, r6, #3
 800b6a8:	9316      	str	r3, [sp, #88]	; 0x58
 800b6aa:	0143      	lsls	r3, r0, #5
 800b6ac:	00b6      	lsls	r6, r6, #2
 800b6ae:	f1a5 0410 	sub.w	r4, r5, #16
 800b6b2:	9307      	str	r3, [sp, #28]
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	0924      	lsrs	r4, r4, #4
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	1d33      	adds	r3, r6, #4
 800b6be:	3401      	adds	r4, #1
 800b6c0:	930d      	str	r3, [sp, #52]	; 0x34
 800b6c2:	f005 0301 	and.w	r3, r5, #1
 800b6c6:	01a4      	lsls	r4, r4, #6
 800b6c8:	f005 0907 	and.w	r9, r5, #7
 800b6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ce:	00ab      	lsls	r3, r5, #2
 800b6d0:	9312      	str	r3, [sp, #72]	; 0x48
 800b6d2:	9703      	str	r7, [sp, #12]
 800b6d4:	960c      	str	r6, [sp, #48]	; 0x30
 800b6d6:	9417      	str	r4, [sp, #92]	; 0x5c
 800b6d8:	eb02 0b01 	add.w	fp, r2, r1
 800b6dc:	4653      	mov	r3, sl
 800b6de:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800b6e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6e4:	9907      	ldr	r1, [sp, #28]
 800b6e6:	6992      	ldr	r2, [r2, #24]
 800b6e8:	6894      	ldr	r4, [r2, #8]
 800b6ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6ec:	4459      	add	r1, fp
 800b6ee:	9106      	str	r1, [sp, #24]
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	f000 810f 	beq.w	800b914 <forward_dense+0x36c>
 800b6f6:	6992      	ldr	r2, [r2, #24]
 800b6f8:	6896      	ldr	r6, [r2, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 810e 	beq.w	800b91c <forward_dense+0x374>
 800b700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b702:	2a04      	cmp	r2, #4
 800b704:	f000 821e 	beq.w	800bb44 <forward_dense+0x59c>
 800b708:	9a02      	ldr	r2, [sp, #8]
 800b70a:	4590      	cmp	r8, r2
 800b70c:	f240 80d3 	bls.w	800b8b6 <forward_dense+0x30e>
 800b710:	4694      	mov	ip, r2
 800b712:	9a07      	ldr	r2, [sp, #28]
 800b714:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b718:	f102 0e20 	add.w	lr, r2, #32
 800b71c:	46b1      	mov	r9, r6
 800b71e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b720:	44de      	add	lr, fp
 800b722:	f1b9 0f00 	cmp.w	r9, #0
 800b726:	f000 80e8 	beq.w	800b8fa <forward_dense+0x352>
 800b72a:	9a01      	ldr	r2, [sp, #4]
 800b72c:	edd9 2a00 	vldr	s5, [r9]
 800b730:	eddf 6a77 	vldr	s13, [pc, #476]	; 800b910 <forward_dense+0x368>
 800b734:	f109 0904 	add.w	r9, r9, #4
 800b738:	2a00      	cmp	r2, #0
 800b73a:	f000 80e6 	beq.w	800b90a <forward_dense+0x362>
 800b73e:	9904      	ldr	r1, [sp, #16]
 800b740:	f104 0208 	add.w	r2, r4, #8
 800b744:	190f      	adds	r7, r1, r4
 800b746:	4671      	mov	r1, lr
 800b748:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800b74c:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800b750:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 800b754:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 800b758:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800b75c:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 800b760:	ed51 3a04 	vldr	s7, [r1, #-16]
 800b764:	ed51 4a03 	vldr	s9, [r1, #-12]
 800b768:	ed51 5a02 	vldr	s11, [r1, #-8]
 800b76c:	ed11 6a01 	vldr	s12, [r1, #-4]
 800b770:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b774:	ed95 7a00 	vldr	s14, [r5]
 800b778:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 800b77c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b780:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b784:	ed90 7a00 	vldr	s14, [r0]
 800b788:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 800b78c:	eee7 7a03 	vfma.f32	s15, s14, s6
 800b790:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b794:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b798:	ed95 3a00 	vldr	s6, [r5]
 800b79c:	ed90 7a00 	vldr	s14, [r0]
 800b7a0:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 800b7a4:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800b7a8:	eee3 7a04 	vfma.f32	s15, s6, s8
 800b7ac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b7b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b7b4:	ed95 3a00 	vldr	s6, [r5]
 800b7b8:	ed90 4a00 	vldr	s8, [r0]
 800b7bc:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 800b7c0:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800b7c4:	eee7 7a05 	vfma.f32	s15, s14, s10
 800b7c8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b7cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b7d0:	ed95 5a00 	vldr	s10, [r5]
 800b7d4:	ed90 7a00 	vldr	s14, [r0]
 800b7d8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b7dc:	3208      	adds	r2, #8
 800b7de:	4297      	cmp	r7, r2
 800b7e0:	f101 0120 	add.w	r1, r1, #32
 800b7e4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b7e8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b7ec:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b7f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b7f4:	d1a8      	bne.n	800b748 <forward_dense+0x1a0>
 800b7f6:	9a03      	ldr	r2, [sp, #12]
 800b7f8:	18a1      	adds	r1, r4, r2
 800b7fa:	465a      	mov	r2, fp
 800b7fc:	2e00      	cmp	r6, #0
 800b7fe:	d04a      	beq.n	800b896 <forward_dense+0x2ee>
 800b800:	7808      	ldrb	r0, [r1, #0]
 800b802:	ed92 7a00 	vldr	s14, [r2]
 800b806:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b80a:	edd0 7a00 	vldr	s15, [r0]
 800b80e:	2e01      	cmp	r6, #1
 800b810:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b814:	d03f      	beq.n	800b896 <forward_dense+0x2ee>
 800b816:	7848      	ldrb	r0, [r1, #1]
 800b818:	edd2 7a01 	vldr	s15, [r2, #4]
 800b81c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b820:	ed90 7a00 	vldr	s14, [r0]
 800b824:	2e02      	cmp	r6, #2
 800b826:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b82a:	d034      	beq.n	800b896 <forward_dense+0x2ee>
 800b82c:	7888      	ldrb	r0, [r1, #2]
 800b82e:	edd2 7a02 	vldr	s15, [r2, #8]
 800b832:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b836:	ed90 7a00 	vldr	s14, [r0]
 800b83a:	2e03      	cmp	r6, #3
 800b83c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b840:	d029      	beq.n	800b896 <forward_dense+0x2ee>
 800b842:	78c8      	ldrb	r0, [r1, #3]
 800b844:	edd2 7a03 	vldr	s15, [r2, #12]
 800b848:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b84c:	ed90 7a00 	vldr	s14, [r0]
 800b850:	2e04      	cmp	r6, #4
 800b852:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b856:	d01e      	beq.n	800b896 <forward_dense+0x2ee>
 800b858:	7908      	ldrb	r0, [r1, #4]
 800b85a:	edd2 7a04 	vldr	s15, [r2, #16]
 800b85e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b862:	ed90 7a00 	vldr	s14, [r0]
 800b866:	2e05      	cmp	r6, #5
 800b868:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b86c:	d013      	beq.n	800b896 <forward_dense+0x2ee>
 800b86e:	7948      	ldrb	r0, [r1, #5]
 800b870:	edd2 7a05 	vldr	s15, [r2, #20]
 800b874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b878:	ed90 7a00 	vldr	s14, [r0]
 800b87c:	2e06      	cmp	r6, #6
 800b87e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b882:	d008      	beq.n	800b896 <forward_dense+0x2ee>
 800b884:	7989      	ldrb	r1, [r1, #6]
 800b886:	edd2 7a06 	vldr	s15, [r2, #24]
 800b88a:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800b88e:	ed92 7a00 	vldr	s14, [r2]
 800b892:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b896:	4454      	add	r4, sl
 800b898:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800b89c:	ecec 6a01 	vstmia	ip!, {s13}
 800b8a0:	45c4      	cmp	ip, r8
 800b8a2:	f4ff af3e 	bcc.w	800b722 <forward_dense+0x17a>
 800b8a6:	9902      	ldr	r1, [sp, #8]
 800b8a8:	43ca      	mvns	r2, r1
 800b8aa:	4442      	add	r2, r8
 800b8ac:	f022 0203 	bic.w	r2, r2, #3
 800b8b0:	3204      	adds	r2, #4
 800b8b2:	188a      	adds	r2, r1, r2
 800b8b4:	9202      	str	r2, [sp, #8]
 800b8b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b8b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b8ba:	4490      	add	r8, r2
 800b8bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8be:	4493      	add	fp, r2
 800b8c0:	9a02      	ldr	r2, [sp, #8]
 800b8c2:	428a      	cmp	r2, r1
 800b8c4:	f4ff af0d 	bcc.w	800b6e2 <forward_dense+0x13a>
 800b8c8:	b019      	add	sp, #100	; 0x64
 800b8ca:	ecbd 8b10 	vpop	{d8-d15}
 800b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	deff      	udf	#255	; 0xff
 800b8d8:	6853      	ldr	r3, [r2, #4]
 800b8da:	deff      	udf	#255	; 0xff
 800b8dc:	2300      	movs	r3, #0
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	deff      	udf	#255	; 0xff
 800b8e2:	6819      	ldr	r1, [r3, #0]
 800b8e4:	910e      	str	r1, [sp, #56]	; 0x38
 800b8e6:	f11c 0118 	adds.w	r1, ip, #24
 800b8ea:	f47f ae84 	bne.w	800b5f6 <forward_dense+0x4e>
 800b8ee:	910f      	str	r1, [sp, #60]	; 0x3c
 800b8f0:	e68b      	b.n	800b60a <forward_dense+0x62>
 800b8f2:	4698      	mov	r8, r3
 800b8f4:	e66b      	b.n	800b5ce <forward_dense+0x26>
 800b8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8f8:	e687      	b.n	800b60a <forward_dense+0x62>
 800b8fa:	9a01      	ldr	r2, [sp, #4]
 800b8fc:	eddf 6a04 	vldr	s13, [pc, #16]	; 800b910 <forward_dense+0x368>
 800b900:	eef0 2a6f 	vmov.f32	s5, s31
 800b904:	2a00      	cmp	r2, #0
 800b906:	f47f af1a 	bne.w	800b73e <forward_dense+0x196>
 800b90a:	9a06      	ldr	r2, [sp, #24]
 800b90c:	4621      	mov	r1, r4
 800b90e:	e775      	b.n	800b7fc <forward_dense+0x254>
 800b910:	00000000 	.word	0x00000000
 800b914:	4616      	mov	r6, r2
 800b916:	2b00      	cmp	r3, #0
 800b918:	f47f aef2 	bne.w	800b700 <forward_dense+0x158>
 800b91c:	9a02      	ldr	r2, [sp, #8]
 800b91e:	4590      	cmp	r8, r2
 800b920:	d9c9      	bls.n	800b8b6 <forward_dense+0x30e>
 800b922:	4615      	mov	r5, r2
 800b924:	9a07      	ldr	r2, [sp, #28]
 800b926:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b928:	9308      	str	r3, [sp, #32]
 800b92a:	f102 0740 	add.w	r7, r2, #64	; 0x40
 800b92e:	9a06      	ldr	r2, [sp, #24]
 800b930:	9b05      	ldr	r3, [sp, #20]
 800b932:	4610      	mov	r0, r2
 800b934:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b936:	445f      	add	r7, fp
 800b938:	eb00 0c02 	add.w	ip, r0, r2
 800b93c:	f001 0e0f 	and.w	lr, r1, #15
 800b940:	468a      	mov	sl, r1
 800b942:	4691      	mov	r9, r2
 800b944:	2e00      	cmp	r6, #0
 800b946:	f000 81de 	beq.w	800bd06 <forward_dense+0x75e>
 800b94a:	f1ba 0f0f 	cmp.w	sl, #15
 800b94e:	ed96 fa00 	vldr	s30, [r6]
 800b952:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 800b910 <forward_dense+0x368>
 800b956:	f106 0604 	add.w	r6, r6, #4
 800b95a:	f240 81dc 	bls.w	800bd16 <forward_dense+0x76e>
 800b95e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800b962:	463a      	mov	r2, r7
 800b964:	4650      	mov	r0, sl
 800b966:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 800b96a:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800b96e:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 800b972:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 800b976:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 800b97a:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 800b97e:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 800b982:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 800b986:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 800b98a:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 800b98e:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 800b992:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800b996:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 800b99a:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 800b99e:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 800b9a2:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 800b9a6:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800b9aa:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 800b9ae:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800b9b2:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 800b9b6:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800b9ba:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 800b9be:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 800b9c2:	ed12 4a04 	vldr	s8, [r2, #-16]
 800b9c6:	ed51 4a04 	vldr	s9, [r1, #-16]
 800b9ca:	ed12 5a03 	vldr	s10, [r2, #-12]
 800b9ce:	ed51 5a03 	vldr	s11, [r1, #-12]
 800b9d2:	ed12 6a02 	vldr	s12, [r2, #-8]
 800b9d6:	ed11 7a02 	vldr	s14, [r1, #-8]
 800b9da:	ee67 7aae 	vmul.f32	s15, s15, s29
 800b9de:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 800b9e2:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800b9e6:	3810      	subs	r0, #16
 800b9e8:	280f      	cmp	r0, #15
 800b9ea:	ed11 ea01 	vldr	s28, [r1, #-4]
 800b9ee:	ed52 da01 	vldr	s27, [r2, #-4]
 800b9f2:	eeed 7a2e 	vfma.f32	s15, s26, s29
 800b9f6:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800b9fa:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800b9fe:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ba02:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ba06:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ba0a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ba0e:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ba12:	eee0 7a20 	vfma.f32	s15, s0, s1
 800ba16:	eee1 7a21 	vfma.f32	s15, s2, s3
 800ba1a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ba1e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ba22:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ba26:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ba2a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba2e:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800ba32:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ba36:	d896      	bhi.n	800b966 <forward_dense+0x3be>
 800ba38:	eb04 0009 	add.w	r0, r4, r9
 800ba3c:	4672      	mov	r2, lr
 800ba3e:	4661      	mov	r1, ip
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	d075      	beq.n	800bb30 <forward_dense+0x588>
 800ba44:	ed90 7a00 	vldr	s14, [r0]
 800ba48:	edd1 7a00 	vldr	s15, [r1]
 800ba4c:	2a01      	cmp	r2, #1
 800ba4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba52:	d06d      	beq.n	800bb30 <forward_dense+0x588>
 800ba54:	ed90 7a01 	vldr	s14, [r0, #4]
 800ba58:	edd1 7a01 	vldr	s15, [r1, #4]
 800ba5c:	2a02      	cmp	r2, #2
 800ba5e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba62:	d065      	beq.n	800bb30 <forward_dense+0x588>
 800ba64:	ed90 7a02 	vldr	s14, [r0, #8]
 800ba68:	edd1 7a02 	vldr	s15, [r1, #8]
 800ba6c:	2a03      	cmp	r2, #3
 800ba6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba72:	d05d      	beq.n	800bb30 <forward_dense+0x588>
 800ba74:	ed90 7a03 	vldr	s14, [r0, #12]
 800ba78:	edd1 7a03 	vldr	s15, [r1, #12]
 800ba7c:	2a04      	cmp	r2, #4
 800ba7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba82:	d055      	beq.n	800bb30 <forward_dense+0x588>
 800ba84:	ed90 7a04 	vldr	s14, [r0, #16]
 800ba88:	edd1 7a04 	vldr	s15, [r1, #16]
 800ba8c:	2a05      	cmp	r2, #5
 800ba8e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba92:	d04d      	beq.n	800bb30 <forward_dense+0x588>
 800ba94:	ed90 7a05 	vldr	s14, [r0, #20]
 800ba98:	edd1 7a05 	vldr	s15, [r1, #20]
 800ba9c:	2a06      	cmp	r2, #6
 800ba9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800baa2:	d045      	beq.n	800bb30 <forward_dense+0x588>
 800baa4:	ed90 7a06 	vldr	s14, [r0, #24]
 800baa8:	edd1 7a06 	vldr	s15, [r1, #24]
 800baac:	2a07      	cmp	r2, #7
 800baae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bab2:	d03d      	beq.n	800bb30 <forward_dense+0x588>
 800bab4:	ed90 7a07 	vldr	s14, [r0, #28]
 800bab8:	edd1 7a07 	vldr	s15, [r1, #28]
 800babc:	2a08      	cmp	r2, #8
 800babe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bac2:	d035      	beq.n	800bb30 <forward_dense+0x588>
 800bac4:	ed90 7a08 	vldr	s14, [r0, #32]
 800bac8:	edd1 7a08 	vldr	s15, [r1, #32]
 800bacc:	2a09      	cmp	r2, #9
 800bace:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bad2:	d02d      	beq.n	800bb30 <forward_dense+0x588>
 800bad4:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800bad8:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800badc:	2a0a      	cmp	r2, #10
 800bade:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bae2:	d025      	beq.n	800bb30 <forward_dense+0x588>
 800bae4:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800bae8:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800baec:	2a0b      	cmp	r2, #11
 800baee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800baf2:	d01d      	beq.n	800bb30 <forward_dense+0x588>
 800baf4:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800baf8:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800bafc:	2a0c      	cmp	r2, #12
 800bafe:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb02:	d015      	beq.n	800bb30 <forward_dense+0x588>
 800bb04:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800bb08:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800bb0c:	2a0d      	cmp	r2, #13
 800bb0e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb12:	d00d      	beq.n	800bb30 <forward_dense+0x588>
 800bb14:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800bb18:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800bb1c:	2a0e      	cmp	r2, #14
 800bb1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb22:	d005      	beq.n	800bb30 <forward_dense+0x588>
 800bb24:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800bb28:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800bb2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bb30:	441c      	add	r4, r3
 800bb32:	ee7f 6a26 	vadd.f32	s13, s30, s13
 800bb36:	ece5 6a01 	vstmia	r5!, {s13}
 800bb3a:	4545      	cmp	r5, r8
 800bb3c:	f4ff af02 	bcc.w	800b944 <forward_dense+0x39c>
 800bb40:	9b08      	ldr	r3, [sp, #32]
 800bb42:	e6b0      	b.n	800b8a6 <forward_dense+0x2fe>
 800bb44:	9902      	ldr	r1, [sp, #8]
 800bb46:	4588      	cmp	r8, r1
 800bb48:	f67f aeb5 	bls.w	800b8b6 <forward_dense+0x30e>
 800bb4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bb4e:	eb02 000b 	add.w	r0, r2, fp
 800bb52:	9a07      	ldr	r2, [sp, #28]
 800bb54:	9008      	str	r0, [sp, #32]
 800bb56:	3220      	adds	r2, #32
 800bb58:	3007      	adds	r0, #7
 800bb5a:	445a      	add	r2, fp
 800bb5c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb5e:	920a      	str	r2, [sp, #40]	; 0x28
 800bb60:	4689      	mov	r9, r1
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	f000 80b9 	beq.w	800bcda <forward_dense+0x732>
 800bb68:	9a01      	ldr	r2, [sp, #4]
 800bb6a:	edd6 2a00 	vldr	s5, [r6]
 800bb6e:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 800b910 <forward_dense+0x368>
 800bb72:	3604      	adds	r6, #4
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	f000 80b8 	beq.w	800bcea <forward_dense+0x742>
 800bb7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb7c:	1917      	adds	r7, r2, r4
 800bb7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb80:	1d21      	adds	r1, r4, #4
 800bb82:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800bb86:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800bb8a:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800bb8e:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 800bb92:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800bb96:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800bb9a:	ed52 4a04 	vldr	s9, [r2, #-16]
 800bb9e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800bba2:	ed52 5a02 	vldr	s11, [r2, #-8]
 800bba6:	ed12 6a01 	vldr	s12, [r2, #-4]
 800bbaa:	f005 0e0f 	and.w	lr, r5, #15
 800bbae:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800bbb2:	ed9e 7a00 	vldr	s14, [lr]
 800bbb6:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800bbba:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800bbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc2:	ed9c 7a00 	vldr	s14, [ip]
 800bbc6:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800bbca:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800bbce:	eee7 7a03 	vfma.f32	s15, s14, s6
 800bbd2:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800bbd6:	f000 0c0f 	and.w	ip, r0, #15
 800bbda:	ed9e 7a00 	vldr	s14, [lr]
 800bbde:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800bbe2:	eee7 7a23 	vfma.f32	s15, s14, s7
 800bbe6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800bbea:	3104      	adds	r1, #4
 800bbec:	ed9c 7a00 	vldr	s14, [ip]
 800bbf0:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800bbf4:	eee7 7a04 	vfma.f32	s15, s14, s8
 800bbf8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800bbfc:	f005 050f 	and.w	r5, r5, #15
 800bc00:	ed9c 7a00 	vldr	s14, [ip]
 800bc04:	eee7 7a24 	vfma.f32	s15, s14, s9
 800bc08:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bc0c:	428f      	cmp	r7, r1
 800bc0e:	ed95 7a00 	vldr	s14, [r5]
 800bc12:	ea4f 1510 	mov.w	r5, r0, lsr #4
 800bc16:	eee7 7a05 	vfma.f32	s15, s14, s10
 800bc1a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800bc1e:	f000 000f 	and.w	r0, r0, #15
 800bc22:	ed95 7a00 	vldr	s14, [r5]
 800bc26:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bc2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc2e:	f102 0220 	add.w	r2, r2, #32
 800bc32:	ed90 7a00 	vldr	s14, [r0]
 800bc36:	eee7 7a06 	vfma.f32	s15, s14, s12
 800bc3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bc3e:	d1a0      	bne.n	800bb82 <forward_dense+0x5da>
 800bc40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc42:	46de      	mov	lr, fp
 800bc44:	eb04 0a02 	add.w	sl, r4, r2
 800bc48:	9a08      	ldr	r2, [sp, #32]
 800bc4a:	4596      	cmp	lr, r2
 800bc4c:	d22c      	bcs.n	800bca8 <forward_dense+0x700>
 800bc4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc50:	f10e 0108 	add.w	r1, lr, #8
 800bc54:	eba2 0c01 	sub.w	ip, r2, r1
 800bc58:	f02c 0207 	bic.w	r2, ip, #7
 800bc5c:	f10e 0710 	add.w	r7, lr, #16
 800bc60:	4417      	add	r7, r2
 800bc62:	f10a 35ff 	add.w	r5, sl, #4294967295
 800bc66:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800bc6a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bc6e:	ed11 6a02 	vldr	s12, [r1, #-8]
 800bc72:	f002 000f 	and.w	r0, r2, #15
 800bc76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc7a:	ed90 7a00 	vldr	s14, [r0]
 800bc7e:	0912      	lsrs	r2, r2, #4
 800bc80:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800bc84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc88:	ed92 7a00 	vldr	s14, [r2]
 800bc8c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800bc90:	3108      	adds	r1, #8
 800bc92:	428f      	cmp	r7, r1
 800bc94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bc98:	d1e5      	bne.n	800bc66 <forward_dense+0x6be>
 800bc9a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800bc9e:	f10c 0c01 	add.w	ip, ip, #1
 800bca2:	44e2      	add	sl, ip
 800bca4:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800bca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcaa:	b312      	cbz	r2, 800bcf2 <forward_dense+0x74a>
 800bcac:	f89a 2000 	ldrb.w	r2, [sl]
 800bcb0:	edde 7a00 	vldr	s15, [lr]
 800bcb4:	0912      	lsrs	r2, r2, #4
 800bcb6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800bcba:	ed92 7a00 	vldr	s14, [r2]
 800bcbe:	9a05      	ldr	r2, [sp, #20]
 800bcc0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bcc4:	4414      	add	r4, r2
 800bcc6:	ee76 2aa2 	vadd.f32	s5, s13, s5
 800bcca:	ece9 2a01 	vstmia	r9!, {s5}
 800bcce:	45c8      	cmp	r8, r9
 800bcd0:	f67f ade9 	bls.w	800b8a6 <forward_dense+0x2fe>
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	f47f af47 	bne.w	800bb68 <forward_dense+0x5c0>
 800bcda:	9a01      	ldr	r2, [sp, #4]
 800bcdc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bd5c <forward_dense+0x7b4>
 800bce0:	eef0 2a6f 	vmov.f32	s5, s31
 800bce4:	2a00      	cmp	r2, #0
 800bce6:	f47f af48 	bne.w	800bb7a <forward_dense+0x5d2>
 800bcea:	f8dd e018 	ldr.w	lr, [sp, #24]
 800bcee:	46a2      	mov	sl, r4
 800bcf0:	e7aa      	b.n	800bc48 <forward_dense+0x6a0>
 800bcf2:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800bcf6:	9a05      	ldr	r2, [sp, #20]
 800bcf8:	ece9 6a01 	vstmia	r9!, {s13}
 800bcfc:	45c1      	cmp	r9, r8
 800bcfe:	4414      	add	r4, r2
 800bd00:	f4ff af2f 	bcc.w	800bb62 <forward_dense+0x5ba>
 800bd04:	e5cf      	b.n	800b8a6 <forward_dense+0x2fe>
 800bd06:	f1ba 0f0f 	cmp.w	sl, #15
 800bd0a:	eeb0 fa6f 	vmov.f32	s30, s31
 800bd0e:	eddf 6a13 	vldr	s13, [pc, #76]	; 800bd5c <forward_dense+0x7b4>
 800bd12:	f63f ae24 	bhi.w	800b95e <forward_dense+0x3b6>
 800bd16:	4652      	mov	r2, sl
 800bd18:	4620      	mov	r0, r4
 800bd1a:	9906      	ldr	r1, [sp, #24]
 800bd1c:	e690      	b.n	800ba40 <forward_dense+0x498>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	deff      	udf	#255	; 0xff
 800bd24:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800bd28:	2b04      	cmp	r3, #4
 800bd2a:	4691      	mov	r9, r2
 800bd2c:	f47f ac94 	bne.w	800b658 <forward_dense+0xb0>
 800bd30:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800bd34:	f1b9 0f00 	cmp.w	r9, #0
 800bd38:	f43f ac93 	beq.w	800b662 <forward_dense+0xba>
 800bd3c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bd40:	f000 fbba 	bl	800c4b8 <ai_array_get_byte_size>
 800bd44:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800bd48:	4602      	mov	r2, r0
 800bd4a:	4651      	mov	r1, sl
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f004 f943 	bl	800ffd8 <memcpy>
 800bd52:	4682      	mov	sl, r0
 800bd54:	e485      	b.n	800b662 <forward_dense+0xba>
 800bd56:	2300      	movs	r3, #0
 800bd58:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd5a:	e456      	b.n	800b60a <forward_dense+0x62>
 800bd5c:	00000000 	.word	0x00000000

0800bd60 <nl_func_relu_array_f32>:
 800bd60:	b410      	push	{r4}
 800bd62:	698c      	ldr	r4, [r1, #24]
 800bd64:	6981      	ldr	r1, [r0, #24]
 800bd66:	68a3      	ldr	r3, [r4, #8]
 800bd68:	6889      	ldr	r1, [r1, #8]
 800bd6a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800bd6e:	3a01      	subs	r2, #1
 800bd70:	0092      	lsls	r2, r2, #2
 800bd72:	189b      	adds	r3, r3, r2
 800bd74:	d216      	bcs.n	800bda4 <nl_func_relu_array_f32+0x44>
 800bd76:	3204      	adds	r2, #4
 800bd78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800bdac <nl_func_relu_array_f32+0x4c>
 800bd7c:	4411      	add	r1, r2
 800bd7e:	3304      	adds	r3, #4
 800bd80:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bd84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8c:	bfb8      	it	lt
 800bd8e:	eef0 7a47 	vmovlt.f32	s15, s14
 800bd92:	ed61 7a01 	vstmdb	r1!, {s15}
 800bd96:	68a0      	ldr	r0, [r4, #8]
 800bd98:	f1a3 0208 	sub.w	r2, r3, #8
 800bd9c:	4290      	cmp	r0, r2
 800bd9e:	f1a3 0304 	sub.w	r3, r3, #4
 800bda2:	d9ed      	bls.n	800bd80 <nl_func_relu_array_f32+0x20>
 800bda4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	00000000 	.word	0x00000000

0800bdb0 <nl_func_sm_array_f32>:
 800bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb4:	ed2d 8b04 	vpush	{d8-d9}
 800bdb8:	b089      	sub	sp, #36	; 0x24
 800bdba:	698f      	ldr	r7, [r1, #24]
 800bdbc:	6984      	ldr	r4, [r0, #24]
 800bdbe:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800bdc2:	68bd      	ldr	r5, [r7, #8]
 800bdc4:	9402      	str	r4, [sp, #8]
 800bdc6:	4626      	mov	r6, r4
 800bdc8:	4696      	mov	lr, r2
 800bdca:	eba2 020c 	sub.w	r2, r2, ip
 800bdce:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800bdd2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	68b6      	ldr	r6, [r6, #8]
 800bdd8:	ebae 0e04 	sub.w	lr, lr, r4
 800bddc:	4295      	cmp	r5, r2
 800bdde:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800bde2:	d354      	bcc.n	800be8e <nl_func_sm_array_f32+0xde>
 800bde4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800bde8:	f1cc 0200 	rsb	r2, ip, #0
 800bdec:	00a4      	lsls	r4, r4, #2
 800bdee:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800bdf2:	9303      	str	r3, [sp, #12]
 800bdf4:	9204      	str	r2, [sp, #16]
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4262      	negs	r2, r4
 800bdfa:	9205      	str	r2, [sp, #20]
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800be02:	9b02      	ldr	r3, [sp, #8]
 800be04:	9a07      	ldr	r2, [sp, #28]
 800be06:	60bd      	str	r5, [r7, #8]
 800be08:	609e      	str	r6, [r3, #8]
 800be0a:	9b06      	ldr	r3, [sp, #24]
 800be0c:	6992      	ldr	r2, [r2, #24]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	6894      	ldr	r4, [r2, #8]
 800be12:	9a03      	ldr	r2, [sp, #12]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	2a01      	cmp	r2, #1
 800be18:	ed93 8a00 	vldr	s16, [r3]
 800be1c:	d940      	bls.n	800bea0 <nl_func_sm_array_f32+0xf0>
 800be1e:	9901      	ldr	r1, [sp, #4]
 800be20:	1d1a      	adds	r2, r3, #4
 800be22:	eb03 0b01 	add.w	fp, r3, r1
 800be26:	ecf2 7a01 	vldmia	r2!, {s15}
 800be2a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be32:	bfb8      	it	lt
 800be34:	eeb0 8a67 	vmovlt.f32	s16, s15
 800be38:	4593      	cmp	fp, r2
 800be3a:	d1f4      	bne.n	800be26 <nl_func_sm_array_f32+0x76>
 800be3c:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800beac <nl_func_sm_array_f32+0xfc>
 800be40:	469a      	mov	sl, r3
 800be42:	46a1      	mov	r9, r4
 800be44:	46a0      	mov	r8, r4
 800be46:	ecba 0a01 	vldmia	sl!, {s0}
 800be4a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800be4e:	f001 fdf5 	bl	800da3c <expf>
 800be52:	45d3      	cmp	fp, sl
 800be54:	eca8 0a01 	vstmia	r8!, {s0}
 800be58:	ee78 8a80 	vadd.f32	s17, s17, s0
 800be5c:	d1f3      	bne.n	800be46 <nl_func_sm_array_f32+0x96>
 800be5e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800be62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be66:	d00b      	beq.n	800be80 <nl_func_sm_array_f32+0xd0>
 800be68:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800be6c:	9b01      	ldr	r3, [sp, #4]
 800be6e:	441c      	add	r4, r3
 800be70:	edd9 7a00 	vldr	s15, [r9]
 800be74:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be78:	ece9 7a01 	vstmia	r9!, {s15}
 800be7c:	454c      	cmp	r4, r9
 800be7e:	d1f7      	bne.n	800be70 <nl_func_sm_array_f32+0xc0>
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	441d      	add	r5, r3
 800be86:	9b05      	ldr	r3, [sp, #20]
 800be88:	42aa      	cmp	r2, r5
 800be8a:	441e      	add	r6, r3
 800be8c:	d9b9      	bls.n	800be02 <nl_func_sm_array_f32+0x52>
 800be8e:	60ba      	str	r2, [r7, #8]
 800be90:	9a02      	ldr	r2, [sp, #8]
 800be92:	68d3      	ldr	r3, [r2, #12]
 800be94:	6093      	str	r3, [r2, #8]
 800be96:	b009      	add	sp, #36	; 0x24
 800be98:	ecbd 8b04 	vpop	{d8-d9}
 800be9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea0:	2a00      	cmp	r2, #0
 800bea2:	d0ed      	beq.n	800be80 <nl_func_sm_array_f32+0xd0>
 800bea4:	9a01      	ldr	r2, [sp, #4]
 800bea6:	eb03 0b02 	add.w	fp, r3, r2
 800beaa:	e7c7      	b.n	800be3c <nl_func_sm_array_f32+0x8c>
 800beac:	00000000 	.word	0x00000000

0800beb0 <nl_func_relu_generic_array_f32>:
 800beb0:	b430      	push	{r4, r5}
 800beb2:	6989      	ldr	r1, [r1, #24]
 800beb4:	6980      	ldr	r0, [r0, #24]
 800beb6:	edd3 6a02 	vldr	s13, [r3, #8]
 800beba:	688c      	ldr	r4, [r1, #8]
 800bebc:	6880      	ldr	r0, [r0, #8]
 800bebe:	ed93 7a00 	vldr	s14, [r3]
 800bec2:	ed93 6a01 	vldr	s12, [r3, #4]
 800bec6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800beca:	3a01      	subs	r2, #1
 800becc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800bed0:	0092      	lsls	r2, r2, #2
 800bed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed6:	4410      	add	r0, r2
 800bed8:	4422      	add	r2, r4
 800beda:	d421      	bmi.n	800bf20 <nl_func_relu_generic_array_f32+0x70>
 800bedc:	4294      	cmp	r4, r2
 800bede:	d83d      	bhi.n	800bf5c <nl_func_relu_generic_array_f32+0xac>
 800bee0:	1d13      	adds	r3, r2, #4
 800bee2:	1d02      	adds	r2, r0, #4
 800bee4:	e010      	b.n	800bf08 <nl_func_relu_generic_array_f32+0x58>
 800bee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800beea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beee:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800bef2:	d501      	bpl.n	800bef8 <nl_func_relu_generic_array_f32+0x48>
 800bef4:	ee65 7a86 	vmul.f32	s15, s11, s12
 800bef8:	ed62 7a01 	vstmdb	r2!, {s15}
 800befc:	6888      	ldr	r0, [r1, #8]
 800befe:	f1a3 0408 	sub.w	r4, r3, #8
 800bf02:	4284      	cmp	r4, r0
 800bf04:	462b      	mov	r3, r5
 800bf06:	d329      	bcc.n	800bf5c <nl_func_relu_generic_array_f32+0xac>
 800bf08:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bf0c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bf10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf14:	f1a3 0504 	sub.w	r5, r3, #4
 800bf18:	d4e5      	bmi.n	800bee6 <nl_func_relu_generic_array_f32+0x36>
 800bf1a:	eef0 7a66 	vmov.f32	s15, s13
 800bf1e:	e7eb      	b.n	800bef8 <nl_func_relu_generic_array_f32+0x48>
 800bf20:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800bf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf28:	d01a      	beq.n	800bf60 <nl_func_relu_generic_array_f32+0xb0>
 800bf2a:	4294      	cmp	r4, r2
 800bf2c:	d816      	bhi.n	800bf5c <nl_func_relu_generic_array_f32+0xac>
 800bf2e:	1d13      	adds	r3, r2, #4
 800bf30:	1d02      	adds	r2, r0, #4
 800bf32:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bf36:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bf3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf3e:	f1a3 0408 	sub.w	r4, r3, #8
 800bf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf46:	f1a3 0004 	sub.w	r0, r3, #4
 800bf4a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bf4e:	4623      	mov	r3, r4
 800bf50:	d51e      	bpl.n	800bf90 <nl_func_relu_generic_array_f32+0xe0>
 800bf52:	ed62 6a01 	vstmdb	r2!, {s13}
 800bf56:	688b      	ldr	r3, [r1, #8]
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	d91e      	bls.n	800bf9a <nl_func_relu_generic_array_f32+0xea>
 800bf5c:	bc30      	pop	{r4, r5}
 800bf5e:	4770      	bx	lr
 800bf60:	4294      	cmp	r4, r2
 800bf62:	d8fb      	bhi.n	800bf5c <nl_func_relu_generic_array_f32+0xac>
 800bf64:	1d13      	adds	r3, r2, #4
 800bf66:	2500      	movs	r5, #0
 800bf68:	1d02      	adds	r2, r0, #4
 800bf6a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bf6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf72:	f1a3 0408 	sub.w	r4, r3, #8
 800bf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7a:	f1a3 0004 	sub.w	r0, r3, #4
 800bf7e:	4623      	mov	r3, r4
 800bf80:	db0d      	blt.n	800bf9e <nl_func_relu_generic_array_f32+0xee>
 800bf82:	ed62 7a01 	vstmdb	r2!, {s15}
 800bf86:	688b      	ldr	r3, [r1, #8]
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	d8e7      	bhi.n	800bf5c <nl_func_relu_generic_array_f32+0xac>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	e7ec      	b.n	800bf6a <nl_func_relu_generic_array_f32+0xba>
 800bf90:	ed62 7a01 	vstmdb	r2!, {s15}
 800bf94:	688c      	ldr	r4, [r1, #8]
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d8e0      	bhi.n	800bf5c <nl_func_relu_generic_array_f32+0xac>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	e7c9      	b.n	800bf32 <nl_func_relu_generic_array_f32+0x82>
 800bf9e:	f842 5d04 	str.w	r5, [r2, #-4]!
 800bfa2:	688c      	ldr	r4, [r1, #8]
 800bfa4:	429c      	cmp	r4, r3
 800bfa6:	d8d9      	bhi.n	800bf5c <nl_func_relu_generic_array_f32+0xac>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	e7de      	b.n	800bf6a <nl_func_relu_generic_array_f32+0xba>

0800bfac <forward_relu>:
 800bfac:	6982      	ldr	r2, [r0, #24]
 800bfae:	8813      	ldrh	r3, [r2, #0]
 800bfb0:	b333      	cbz	r3, 800c000 <forward_relu+0x54>
 800bfb2:	6852      	ldr	r2, [r2, #4]
 800bfb4:	6851      	ldr	r1, [r2, #4]
 800bfb6:	b101      	cbz	r1, 800bfba <forward_relu+0xe>
 800bfb8:	6809      	ldr	r1, [r1, #0]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d91d      	bls.n	800bffa <forward_relu+0x4e>
 800bfbe:	b4f0      	push	{r4, r5, r6, r7}
 800bfc0:	6917      	ldr	r7, [r2, #16]
 800bfc2:	b107      	cbz	r7, 800bfc6 <forward_relu+0x1a>
 800bfc4:	683f      	ldr	r7, [r7, #0]
 800bfc6:	688c      	ldr	r4, [r1, #8]
 800bfc8:	69c3      	ldr	r3, [r0, #28]
 800bfca:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d044      	beq.n	800c05c <forward_relu+0xb0>
 800bfd2:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800bfd6:	2d01      	cmp	r5, #1
 800bfd8:	d014      	beq.n	800c004 <forward_relu+0x58>
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d074      	beq.n	800c0c8 <forward_relu+0x11c>
 800bfde:	68ce      	ldr	r6, [r1, #12]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800bfe6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfea:	42a6      	cmp	r6, r4
 800bfec:	fb05 f202 	mul.w	r2, r5, r2
 800bff0:	d1f9      	bne.n	800bfe6 <forward_relu+0x3a>
 800bff2:	4638      	mov	r0, r7
 800bff4:	bcf0      	pop	{r4, r5, r6, r7}
 800bff6:	f7ff bf5b 	b.w	800beb0 <nl_func_relu_generic_array_f32>
 800bffa:	2300      	movs	r3, #0
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	deff      	udf	#255	; 0xff
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	deff      	udf	#255	; 0xff
 800c004:	69ba      	ldr	r2, [r7, #24]
 800c006:	6988      	ldr	r0, [r1, #24]
 800c008:	6896      	ldr	r6, [r2, #8]
 800c00a:	ed93 7a00 	vldr	s14, [r3]
 800c00e:	6882      	ldr	r2, [r0, #8]
 800c010:	b184      	cbz	r4, 800c034 <forward_relu+0x88>
 800c012:	68cf      	ldr	r7, [r1, #12]
 800c014:	462b      	mov	r3, r5
 800c016:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800c01a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800c01e:	42a7      	cmp	r7, r4
 800c020:	fb01 f303 	mul.w	r3, r1, r3
 800c024:	d1f9      	bne.n	800c01a <forward_relu+0x6e>
 800c026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c02a:	3b01      	subs	r3, #1
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	18d2      	adds	r2, r2, r3
 800c030:	441e      	add	r6, r3
 800c032:	d23f      	bcs.n	800c0b4 <forward_relu+0x108>
 800c034:	1d13      	adds	r3, r2, #4
 800c036:	2500      	movs	r5, #0
 800c038:	1d32      	adds	r2, r6, #4
 800c03a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c03e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	f1a3 0104 	sub.w	r1, r3, #4
 800c04a:	d835      	bhi.n	800c0b8 <forward_relu+0x10c>
 800c04c:	ed62 7a01 	vstmdb	r2!, {s15}
 800c050:	6884      	ldr	r4, [r0, #8]
 800c052:	3b08      	subs	r3, #8
 800c054:	429c      	cmp	r4, r3
 800c056:	d82d      	bhi.n	800c0b4 <forward_relu+0x108>
 800c058:	460b      	mov	r3, r1
 800c05a:	e7ee      	b.n	800c03a <forward_relu+0x8e>
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	698d      	ldr	r5, [r1, #24]
 800c060:	6898      	ldr	r0, [r3, #8]
 800c062:	68ab      	ldr	r3, [r5, #8]
 800c064:	b184      	cbz	r4, 800c088 <forward_relu+0xdc>
 800c066:	68ce      	ldr	r6, [r1, #12]
 800c068:	2201      	movs	r2, #1
 800c06a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c06e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800c072:	42a6      	cmp	r6, r4
 800c074:	fb01 f202 	mul.w	r2, r1, r2
 800c078:	d1f9      	bne.n	800c06e <forward_relu+0xc2>
 800c07a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c07e:	3a01      	subs	r2, #1
 800c080:	0092      	lsls	r2, r2, #2
 800c082:	189b      	adds	r3, r3, r2
 800c084:	4410      	add	r0, r2
 800c086:	d215      	bcs.n	800c0b4 <forward_relu+0x108>
 800c088:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c0cc <forward_relu+0x120>
 800c08c:	3304      	adds	r3, #4
 800c08e:	1d01      	adds	r1, r0, #4
 800c090:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09c:	bfb8      	it	lt
 800c09e:	eef0 7a47 	vmovlt.f32	s15, s14
 800c0a2:	ed61 7a01 	vstmdb	r1!, {s15}
 800c0a6:	68a8      	ldr	r0, [r5, #8]
 800c0a8:	f1a3 0208 	sub.w	r2, r3, #8
 800c0ac:	4290      	cmp	r0, r2
 800c0ae:	f1a3 0304 	sub.w	r3, r3, #4
 800c0b2:	d9ed      	bls.n	800c090 <forward_relu+0xe4>
 800c0b4:	bcf0      	pop	{r4, r5, r6, r7}
 800c0b6:	4770      	bx	lr
 800c0b8:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c0bc:	6884      	ldr	r4, [r0, #8]
 800c0be:	3b08      	subs	r3, #8
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	d8f7      	bhi.n	800c0b4 <forward_relu+0x108>
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	e7b8      	b.n	800c03a <forward_relu+0x8e>
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	e792      	b.n	800bff2 <forward_relu+0x46>
 800c0cc:	00000000 	.word	0x00000000

0800c0d0 <forward_sm>:
 800c0d0:	6982      	ldr	r2, [r0, #24]
 800c0d2:	8813      	ldrh	r3, [r2, #0]
 800c0d4:	b32b      	cbz	r3, 800c122 <forward_sm+0x52>
 800c0d6:	6852      	ldr	r2, [r2, #4]
 800c0d8:	6851      	ldr	r1, [r2, #4]
 800c0da:	b101      	cbz	r1, 800c0de <forward_sm+0xe>
 800c0dc:	6809      	ldr	r1, [r1, #0]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d91c      	bls.n	800c11c <forward_sm+0x4c>
 800c0e2:	6913      	ldr	r3, [r2, #16]
 800c0e4:	b1c3      	cbz	r3, 800c118 <forward_sm+0x48>
 800c0e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e8:	6818      	ldr	r0, [r3, #0]
 800c0ea:	688c      	ldr	r4, [r1, #8]
 800c0ec:	68c3      	ldr	r3, [r0, #12]
 800c0ee:	68ce      	ldr	r6, [r1, #12]
 800c0f0:	685f      	ldr	r7, [r3, #4]
 800c0f2:	6873      	ldr	r3, [r6, #4]
 800c0f4:	0a24      	lsrs	r4, r4, #8
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	d015      	beq.n	800c126 <forward_sm+0x56>
 800c0fa:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c0fe:	2201      	movs	r2, #1
 800c100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c104:	42a6      	cmp	r6, r4
 800c106:	fb05 f202 	mul.w	r2, r5, r2
 800c10a:	d1f9      	bne.n	800c100 <forward_sm+0x30>
 800c10c:	e9cd 3700 	strd	r3, r7, [sp]
 800c110:	f7ff fe4e 	bl	800bdb0 <nl_func_sm_array_f32>
 800c114:	b003      	add	sp, #12
 800c116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	deff      	udf	#255	; 0xff
 800c11c:	2300      	movs	r3, #0
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	deff      	udf	#255	; 0xff
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	deff      	udf	#255	; 0xff
 800c126:	2201      	movs	r2, #1
 800c128:	e9cd 3700 	strd	r3, r7, [sp]
 800c12c:	f7ff fe40 	bl	800bdb0 <nl_func_sm_array_f32>
 800c130:	b003      	add	sp, #12
 800c132:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c134 <forward_bn>:
 800c134:	6983      	ldr	r3, [r0, #24]
 800c136:	8819      	ldrh	r1, [r3, #0]
 800c138:	2900      	cmp	r1, #0
 800c13a:	d062      	beq.n	800c202 <forward_bn+0xce>
 800c13c:	6858      	ldr	r0, [r3, #4]
 800c13e:	6843      	ldr	r3, [r0, #4]
 800c140:	b103      	cbz	r3, 800c144 <forward_bn+0x10>
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2901      	cmp	r1, #1
 800c146:	d959      	bls.n	800c1fc <forward_bn+0xc8>
 800c148:	6902      	ldr	r2, [r0, #16]
 800c14a:	b102      	cbz	r2, 800c14e <forward_bn+0x1a>
 800c14c:	6812      	ldr	r2, [r2, #0]
 800c14e:	2902      	cmp	r1, #2
 800c150:	d059      	beq.n	800c206 <forward_bn+0xd2>
 800c152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c156:	69c1      	ldr	r1, [r0, #28]
 800c158:	2900      	cmp	r1, #0
 800c15a:	f000 8097 	beq.w	800c28c <forward_bn+0x158>
 800c15e:	680c      	ldr	r4, [r1, #0]
 800c160:	f110 0f18 	cmn.w	r0, #24
 800c164:	d052      	beq.n	800c20c <forward_bn+0xd8>
 800c166:	8b00      	ldrh	r0, [r0, #24]
 800c168:	2801      	cmp	r0, #1
 800c16a:	d94f      	bls.n	800c20c <forward_bn+0xd8>
 800c16c:	2900      	cmp	r1, #0
 800c16e:	d04d      	beq.n	800c20c <forward_bn+0xd8>
 800c170:	6996      	ldr	r6, [r2, #24]
 800c172:	68d8      	ldr	r0, [r3, #12]
 800c174:	699a      	ldr	r2, [r3, #24]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	69a5      	ldr	r5, [r4, #24]
 800c17a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800c17e:	68b4      	ldr	r4, [r6, #8]
 800c180:	6892      	ldr	r2, [r2, #8]
 800c182:	68ae      	ldr	r6, [r5, #8]
 800c184:	6845      	ldr	r5, [r0, #4]
 800c186:	0a1b      	lsrs	r3, r3, #8
 800c188:	d075      	beq.n	800c276 <forward_bn+0x142>
 800c18a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c18e:	2701      	movs	r7, #1
 800c190:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c194:	4298      	cmp	r0, r3
 800c196:	fb01 f707 	mul.w	r7, r1, r7
 800c19a:	d1f9      	bne.n	800c190 <forward_bn+0x5c>
 800c19c:	f1bc 0f00 	cmp.w	ip, #0
 800c1a0:	d042      	beq.n	800c228 <forward_bn+0xf4>
 800c1a2:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c1a6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800c1aa:	b32f      	cbz	r7, 800c1f8 <forward_bn+0xc4>
 800c1ac:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800c1b0:	eba4 0e08 	sub.w	lr, r4, r8
 800c1b4:	ebc5 7a85 	rsb	sl, r5, r5, lsl #30
 800c1b8:	ebae 0e02 	sub.w	lr, lr, r2
 800c1bc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c1c0:	4442      	add	r2, r8
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	eb05 0c03 	add.w	ip, r5, r3
 800c1c8:	459c      	cmp	ip, r3
 800c1ca:	d911      	bls.n	800c1f0 <forward_bn+0xbc>
 800c1cc:	eb0a 0302 	add.w	r3, sl, r2
 800c1d0:	4634      	mov	r4, r6
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	eb0e 0102 	add.w	r1, lr, r2
 800c1d8:	ecf3 6a01 	vldmia	r3!, {s13}
 800c1dc:	ecb4 7a01 	vldmia	r4!, {s14}
 800c1e0:	ecf0 7a01 	vldmia	r0!, {s15}
 800c1e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	ece1 7a01 	vstmia	r1!, {s15}
 800c1ee:	d1f3      	bne.n	800c1d8 <forward_bn+0xa4>
 800c1f0:	45bc      	cmp	ip, r7
 800c1f2:	4663      	mov	r3, ip
 800c1f4:	4442      	add	r2, r8
 800c1f6:	d3e5      	bcc.n	800c1c4 <forward_bn+0x90>
 800c1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	deff      	udf	#255	; 0xff
 800c202:	684b      	ldr	r3, [r1, #4]
 800c204:	deff      	udf	#255	; 0xff
 800c206:	2300      	movs	r3, #0
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	deff      	udf	#255	; 0xff
 800c20c:	6995      	ldr	r5, [r2, #24]
 800c20e:	68d8      	ldr	r0, [r3, #12]
 800c210:	699a      	ldr	r2, [r3, #24]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	69a1      	ldr	r1, [r4, #24]
 800c216:	6892      	ldr	r2, [r2, #8]
 800c218:	68ac      	ldr	r4, [r5, #8]
 800c21a:	688e      	ldr	r6, [r1, #8]
 800c21c:	6845      	ldr	r5, [r0, #4]
 800c21e:	0a1b      	lsrs	r3, r3, #8
 800c220:	d032      	beq.n	800c288 <forward_bn+0x154>
 800c222:	f04f 0c00 	mov.w	ip, #0
 800c226:	e7b0      	b.n	800c18a <forward_bn+0x56>
 800c228:	2f00      	cmp	r7, #0
 800c22a:	d0e5      	beq.n	800c1f8 <forward_bn+0xc4>
 800c22c:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800c230:	eba4 0408 	sub.w	r4, r4, r8
 800c234:	ebc5 7e85 	rsb	lr, r5, r5, lsl #30
 800c238:	eba4 0c02 	sub.w	ip, r4, r2
 800c23c:	eb02 0008 	add.w	r0, r2, r8
 800c240:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800c244:	2300      	movs	r3, #0
 800c246:	18ec      	adds	r4, r5, r3
 800c248:	429c      	cmp	r4, r3
 800c24a:	d90e      	bls.n	800c26a <forward_bn+0x136>
 800c24c:	eb0e 0300 	add.w	r3, lr, r0
 800c250:	4631      	mov	r1, r6
 800c252:	eb00 020c 	add.w	r2, r0, ip
 800c256:	ecf3 7a01 	vldmia	r3!, {s15}
 800c25a:	ecb1 7a01 	vldmia	r1!, {s14}
 800c25e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c262:	4298      	cmp	r0, r3
 800c264:	ece2 7a01 	vstmia	r2!, {s15}
 800c268:	d1f5      	bne.n	800c256 <forward_bn+0x122>
 800c26a:	42bc      	cmp	r4, r7
 800c26c:	4623      	mov	r3, r4
 800c26e:	4440      	add	r0, r8
 800c270:	d3e9      	bcc.n	800c246 <forward_bn+0x112>
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	f1bc 0f00 	cmp.w	ip, #0
 800c27a:	d005      	beq.n	800c288 <forward_bn+0x154>
 800c27c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800c280:	2701      	movs	r7, #1
 800c282:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800c286:	e791      	b.n	800c1ac <forward_bn+0x78>
 800c288:	2701      	movs	r7, #1
 800c28a:	e7cf      	b.n	800c22c <forward_bn+0xf8>
 800c28c:	460c      	mov	r4, r1
 800c28e:	e767      	b.n	800c160 <forward_bn+0x2c>

0800c290 <ai_check_custom_types>:
 800c290:	4b13      	ldr	r3, [pc, #76]	; (800c2e0 <ai_check_custom_types+0x50>)
 800c292:	b082      	sub	sp, #8
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	9301      	str	r3, [sp, #4]
 800c298:	b118      	cbz	r0, 800c2a2 <ai_check_custom_types+0x12>
 800c29a:	7803      	ldrb	r3, [r0, #0]
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d002      	beq.n	800c2a6 <ai_check_custom_types+0x16>
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	b002      	add	sp, #8
 800c2a4:	4770      	bx	lr
 800c2a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d004      	beq.n	800c2b8 <ai_check_custom_types+0x28>
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	f080 0001 	eor.w	r0, r0, #1
 800c2b4:	b002      	add	sp, #8
 800c2b6:	4770      	bx	lr
 800c2b8:	7842      	ldrb	r2, [r0, #1]
 800c2ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	f100 0001 	add.w	r0, r0, #1
 800c2c4:	d1f3      	bne.n	800c2ae <ai_check_custom_types+0x1e>
 800c2c6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c2ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d1ed      	bne.n	800c2ae <ai_check_custom_types+0x1e>
 800c2d2:	7842      	ldrb	r2, [r0, #1]
 800c2d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d1e8      	bne.n	800c2ae <ai_check_custom_types+0x1e>
 800c2dc:	2000      	movs	r0, #0
 800c2de:	e7e7      	b.n	800c2b0 <ai_check_custom_types+0x20>
 800c2e0:	08010a2c 	.word	0x08010a2c

0800c2e4 <ai_layers_init_all>:
 800c2e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c2e6:	b17a      	cbz	r2, 800c308 <ai_layers_init_all+0x24>
 800c2e8:	6913      	ldr	r3, [r2, #16]
 800c2ea:	60d0      	str	r0, [r2, #12]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	f04f 0201 	mov.w	r2, #1
 800c2f2:	d009      	beq.n	800c308 <ai_layers_init_all+0x24>
 800c2f4:	b143      	cbz	r3, 800c308 <ai_layers_init_all+0x24>
 800c2f6:	6919      	ldr	r1, [r3, #16]
 800c2f8:	60d8      	str	r0, [r3, #12]
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	f102 0201 	add.w	r2, r2, #1
 800c300:	d002      	beq.n	800c308 <ai_layers_init_all+0x24>
 800c302:	460b      	mov	r3, r1
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1f6      	bne.n	800c2f6 <ai_layers_init_all+0x12>
 800c308:	4610      	mov	r0, r2
 800c30a:	4770      	bx	lr

0800c30c <ai_layers_post_init_all>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c310:	b18c      	cbz	r4, 800c336 <ai_layers_post_init_all+0x2a>
 800c312:	2500      	movs	r5, #0
 800c314:	6863      	ldr	r3, [r4, #4]
 800c316:	f013 0f01 	tst.w	r3, #1
 800c31a:	4620      	mov	r0, r4
 800c31c:	d003      	beq.n	800c326 <ai_layers_post_init_all+0x1a>
 800c31e:	6a23      	ldr	r3, [r4, #32]
 800c320:	b10b      	cbz	r3, 800c326 <ai_layers_post_init_all+0x1a>
 800c322:	4798      	blx	r3
 800c324:	3501      	adds	r5, #1
 800c326:	6923      	ldr	r3, [r4, #16]
 800c328:	42a3      	cmp	r3, r4
 800c32a:	d002      	beq.n	800c332 <ai_layers_post_init_all+0x26>
 800c32c:	461c      	mov	r4, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1f0      	bne.n	800c314 <ai_layers_post_init_all+0x8>
 800c332:	4628      	mov	r0, r5
 800c334:	bd38      	pop	{r3, r4, r5, pc}
 800c336:	4625      	mov	r5, r4
 800c338:	e7fb      	b.n	800c332 <ai_layers_post_init_all+0x26>
 800c33a:	bf00      	nop

0800c33c <ai_layers_forward_all>:
 800c33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c340:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800c342:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c344:	4604      	mov	r4, r0
 800c346:	2f00      	cmp	r7, #0
 800c348:	d02c      	beq.n	800c3a4 <ai_layers_forward_all+0x68>
 800c34a:	2d00      	cmp	r5, #0
 800c34c:	d03f      	beq.n	800c3ce <ai_layers_forward_all+0x92>
 800c34e:	6385      	str	r5, [r0, #56]	; 0x38
 800c350:	4629      	mov	r1, r5
 800c352:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c354:	2001      	movs	r0, #1
 800c356:	47b8      	blx	r7
 800c358:	2600      	movs	r6, #0
 800c35a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c35c:	46b0      	mov	r8, r6
 800c35e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c360:	2002      	movs	r0, #2
 800c362:	47b8      	blx	r7
 800c364:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800c366:	696b      	ldr	r3, [r5, #20]
 800c368:	4628      	mov	r0, r5
 800c36a:	4798      	blx	r3
 800c36c:	692b      	ldr	r3, [r5, #16]
 800c36e:	429d      	cmp	r5, r3
 800c370:	f04f 0003 	mov.w	r0, #3
 800c374:	4619      	mov	r1, r3
 800c376:	d009      	beq.n	800c38c <ai_layers_forward_all+0x50>
 800c378:	63a3      	str	r3, [r4, #56]	; 0x38
 800c37a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c37c:	47b8      	blx	r7
 800c37e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c380:	3601      	adds	r6, #1
 800c382:	2900      	cmp	r1, #0
 800c384:	d1eb      	bne.n	800c35e <ai_layers_forward_all+0x22>
 800c386:	4630      	mov	r0, r6
 800c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38c:	2100      	movs	r1, #0
 800c38e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800c392:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c394:	47b8      	blx	r7
 800c396:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c398:	3601      	adds	r6, #1
 800c39a:	2900      	cmp	r1, #0
 800c39c:	d1df      	bne.n	800c35e <ai_layers_forward_all+0x22>
 800c39e:	4630      	mov	r0, r6
 800c3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a4:	b19d      	cbz	r5, 800c3ce <ai_layers_forward_all+0x92>
 800c3a6:	6385      	str	r5, [r0, #56]	; 0x38
 800c3a8:	463e      	mov	r6, r7
 800c3aa:	696b      	ldr	r3, [r5, #20]
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	4798      	blx	r3
 800c3b0:	692b      	ldr	r3, [r5, #16]
 800c3b2:	42ab      	cmp	r3, r5
 800c3b4:	f106 0601 	add.w	r6, r6, #1
 800c3b8:	d004      	beq.n	800c3c4 <ai_layers_forward_all+0x88>
 800c3ba:	63a3      	str	r3, [r4, #56]	; 0x38
 800c3bc:	461d      	mov	r5, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1f3      	bne.n	800c3aa <ai_layers_forward_all+0x6e>
 800c3c2:	e7e0      	b.n	800c386 <ai_layers_forward_all+0x4a>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ce:	462e      	mov	r6, r5
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d6:	bf00      	nop

0800c3d8 <ai_version_get>:
 800c3d8:	0212      	lsls	r2, r2, #8
 800c3da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c3de:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c3e2:	4770      	bx	lr

0800c3e4 <get_tensor_byte_size>:
 800c3e4:	6983      	ldr	r3, [r0, #24]
 800c3e6:	68c1      	ldr	r1, [r0, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	6940      	ldr	r0, [r0, #20]
 800c3ec:	4a06      	ldr	r2, [pc, #24]	; (800c408 <get_tensor_byte_size+0x24>)
 800c3ee:	68c9      	ldr	r1, [r1, #12]
 800c3f0:	68c0      	ldr	r0, [r0, #12]
 800c3f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800c3f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c3fa:	fb00 f001 	mul.w	r0, r0, r1
 800c3fe:	4293      	cmp	r3, r2
 800c400:	bf04      	itt	eq
 800c402:	3007      	addeq	r0, #7
 800c404:	08c0      	lsreq	r0, r0, #3
 800c406:	4770      	bx	lr
 800c408:	000400c0 	.word	0x000400c0

0800c40c <ai_array_to_buffer_fmt>:
 800c40c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c410:	2b02      	cmp	r3, #2
 800c412:	d036      	beq.n	800c482 <ai_array_to_buffer_fmt+0x76>
 800c414:	4a21      	ldr	r2, [pc, #132]	; (800c49c <ai_array_to_buffer_fmt+0x90>)
 800c416:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d00f      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c41e:	dd12      	ble.n	800c446 <ai_array_to_buffer_fmt+0x3a>
 800c420:	4a1f      	ldr	r2, [pc, #124]	; (800c4a0 <ai_array_to_buffer_fmt+0x94>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d00b      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c426:	dd1e      	ble.n	800c466 <ai_array_to_buffer_fmt+0x5a>
 800c428:	4a1e      	ldr	r2, [pc, #120]	; (800c4a4 <ai_array_to_buffer_fmt+0x98>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d007      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c42e:	dd30      	ble.n	800c492 <ai_array_to_buffer_fmt+0x86>
 800c430:	4a1d      	ldr	r2, [pc, #116]	; (800c4a8 <ai_array_to_buffer_fmt+0x9c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d003      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c436:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d11f      	bne.n	800c47e <ai_array_to_buffer_fmt+0x72>
 800c43e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c442:	4318      	orrs	r0, r3
 800c444:	4770      	bx	lr
 800c446:	4a19      	ldr	r2, [pc, #100]	; (800c4ac <ai_array_to_buffer_fmt+0xa0>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d0f8      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c44c:	dd0b      	ble.n	800c466 <ai_array_to_buffer_fmt+0x5a>
 800c44e:	4a18      	ldr	r2, [pc, #96]	; (800c4b0 <ai_array_to_buffer_fmt+0xa4>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d0f4      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c454:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800c458:	4293      	cmp	r3, r2
 800c45a:	d0f0      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c45c:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800c460:	4293      	cmp	r3, r2
 800c462:	d10c      	bne.n	800c47e <ai_array_to_buffer_fmt+0x72>
 800c464:	e7eb      	b.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c466:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d0e7      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c46e:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800c472:	4293      	cmp	r3, r2
 800c474:	d0e3      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c476:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d0df      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c47e:	2340      	movs	r3, #64	; 0x40
 800c480:	e7dd      	b.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c482:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <ai_array_to_buffer_fmt+0xa8>)
 800c484:	4003      	ands	r3, r0
 800c486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c48a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c48e:	4318      	orrs	r0, r3
 800c490:	4770      	bx	lr
 800c492:	3a0f      	subs	r2, #15
 800c494:	4293      	cmp	r3, r2
 800c496:	d0d2      	beq.n	800c43e <ai_array_to_buffer_fmt+0x32>
 800c498:	e7f1      	b.n	800c47e <ai_array_to_buffer_fmt+0x72>
 800c49a:	bf00      	nop
 800c49c:	00060440 	.word	0x00060440
 800c4a0:	00840447 	.word	0x00840447
 800c4a4:	0084084f 	.word	0x0084084f
 800c4a8:	00841040 	.word	0x00841040
 800c4ac:	00040447 	.word	0x00040447
 800c4b0:	0004084f 	.word	0x0004084f
 800c4b4:	00803fff 	.word	0x00803fff

0800c4b8 <ai_array_get_byte_size>:
 800c4b8:	b1c1      	cbz	r1, 800c4ec <ai_array_get_byte_size+0x34>
 800c4ba:	11c3      	asrs	r3, r0, #7
 800c4bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4c0:	fb01 f102 	mul.w	r1, r1, r2
 800c4c4:	3107      	adds	r1, #7
 800c4c6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800c4ca:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800c4ce:	f021 0107 	bic.w	r1, r1, #7
 800c4d2:	2804      	cmp	r0, #4
 800c4d4:	fa21 f102 	lsr.w	r1, r1, r2
 800c4d8:	d00a      	beq.n	800c4f0 <ai_array_get_byte_size+0x38>
 800c4da:	2808      	cmp	r0, #8
 800c4dc:	d103      	bne.n	800c4e6 <ai_array_get_byte_size+0x2e>
 800c4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4e2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c4e6:	3107      	adds	r1, #7
 800c4e8:	08c8      	lsrs	r0, r1, #3
 800c4ea:	4770      	bx	lr
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	4770      	bx	lr
 800c4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800c4f8:	3107      	adds	r1, #7
 800c4fa:	08c8      	lsrs	r0, r1, #3
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop

0800c500 <ai_array_get_data_byte_size>:
 800c500:	b161      	cbz	r1, 800c51c <ai_array_get_data_byte_size+0x1c>
 800c502:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c506:	fb01 f103 	mul.w	r1, r1, r3
 800c50a:	3107      	adds	r1, #7
 800c50c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800c510:	f021 0107 	bic.w	r1, r1, #7
 800c514:	40c1      	lsrs	r1, r0
 800c516:	3107      	adds	r1, #7
 800c518:	08c8      	lsrs	r0, r1, #3
 800c51a:	4770      	bx	lr
 800c51c:	4608      	mov	r0, r1
 800c51e:	4770      	bx	lr

0800c520 <arm_copy_f32>:
 800c520:	b4f0      	push	{r4, r5, r6, r7}
 800c522:	0897      	lsrs	r7, r2, #2
 800c524:	d01d      	beq.n	800c562 <arm_copy_f32+0x42>
 800c526:	f100 0410 	add.w	r4, r0, #16
 800c52a:	f101 0310 	add.w	r3, r1, #16
 800c52e:	463d      	mov	r5, r7
 800c530:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800c534:	f843 6c10 	str.w	r6, [r3, #-16]
 800c538:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800c53c:	f843 6c0c 	str.w	r6, [r3, #-12]
 800c540:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800c544:	f843 6c08 	str.w	r6, [r3, #-8]
 800c548:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800c54c:	f843 6c04 	str.w	r6, [r3, #-4]
 800c550:	3d01      	subs	r5, #1
 800c552:	f104 0410 	add.w	r4, r4, #16
 800c556:	f103 0310 	add.w	r3, r3, #16
 800c55a:	d1e9      	bne.n	800c530 <arm_copy_f32+0x10>
 800c55c:	013f      	lsls	r7, r7, #4
 800c55e:	4438      	add	r0, r7
 800c560:	4439      	add	r1, r7
 800c562:	f012 0203 	ands.w	r2, r2, #3
 800c566:	d009      	beq.n	800c57c <arm_copy_f32+0x5c>
 800c568:	6803      	ldr	r3, [r0, #0]
 800c56a:	600b      	str	r3, [r1, #0]
 800c56c:	3a01      	subs	r2, #1
 800c56e:	d005      	beq.n	800c57c <arm_copy_f32+0x5c>
 800c570:	6843      	ldr	r3, [r0, #4]
 800c572:	604b      	str	r3, [r1, #4]
 800c574:	2a01      	cmp	r2, #1
 800c576:	bf1c      	itt	ne
 800c578:	6883      	ldrne	r3, [r0, #8]
 800c57a:	608b      	strne	r3, [r1, #8]
 800c57c:	bcf0      	pop	{r4, r5, r6, r7}
 800c57e:	4770      	bx	lr

0800c580 <arm_rfft_32_fast_init_f32>:
 800c580:	b178      	cbz	r0, 800c5a2 <arm_rfft_32_fast_init_f32+0x22>
 800c582:	b430      	push	{r4, r5}
 800c584:	4908      	ldr	r1, [pc, #32]	; (800c5a8 <arm_rfft_32_fast_init_f32+0x28>)
 800c586:	4a09      	ldr	r2, [pc, #36]	; (800c5ac <arm_rfft_32_fast_init_f32+0x2c>)
 800c588:	2310      	movs	r3, #16
 800c58a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c58e:	8003      	strh	r3, [r0, #0]
 800c590:	2520      	movs	r5, #32
 800c592:	2414      	movs	r4, #20
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <arm_rfft_32_fast_init_f32+0x30>)
 800c596:	8205      	strh	r5, [r0, #16]
 800c598:	8184      	strh	r4, [r0, #12]
 800c59a:	6143      	str	r3, [r0, #20]
 800c59c:	bc30      	pop	{r4, r5}
 800c59e:	2000      	movs	r0, #0
 800c5a0:	4770      	bx	lr
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	4770      	bx	lr
 800c5a8:	08055624 	.word	0x08055624
 800c5ac:	08059f5c 	.word	0x08059f5c
 800c5b0:	08062cdc 	.word	0x08062cdc

0800c5b4 <arm_rfft_64_fast_init_f32>:
 800c5b4:	b178      	cbz	r0, 800c5d6 <arm_rfft_64_fast_init_f32+0x22>
 800c5b6:	b430      	push	{r4, r5}
 800c5b8:	4908      	ldr	r1, [pc, #32]	; (800c5dc <arm_rfft_64_fast_init_f32+0x28>)
 800c5ba:	4a09      	ldr	r2, [pc, #36]	; (800c5e0 <arm_rfft_64_fast_init_f32+0x2c>)
 800c5bc:	2320      	movs	r3, #32
 800c5be:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c5c2:	8003      	strh	r3, [r0, #0]
 800c5c4:	2540      	movs	r5, #64	; 0x40
 800c5c6:	2430      	movs	r4, #48	; 0x30
 800c5c8:	4b06      	ldr	r3, [pc, #24]	; (800c5e4 <arm_rfft_64_fast_init_f32+0x30>)
 800c5ca:	8205      	strh	r5, [r0, #16]
 800c5cc:	8184      	strh	r4, [r0, #12]
 800c5ce:	6143      	str	r3, [r0, #20]
 800c5d0:	bc30      	pop	{r4, r5}
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	4770      	bx	lr
 800c5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5da:	4770      	bx	lr
 800c5dc:	0805777c 	.word	0x0805777c
 800c5e0:	0805e7dc 	.word	0x0805e7dc
 800c5e4:	0806755c 	.word	0x0806755c

0800c5e8 <arm_rfft_256_fast_init_f32>:
 800c5e8:	b180      	cbz	r0, 800c60c <arm_rfft_256_fast_init_f32+0x24>
 800c5ea:	b430      	push	{r4, r5}
 800c5ec:	4909      	ldr	r1, [pc, #36]	; (800c614 <arm_rfft_256_fast_init_f32+0x2c>)
 800c5ee:	4a0a      	ldr	r2, [pc, #40]	; (800c618 <arm_rfft_256_fast_init_f32+0x30>)
 800c5f0:	2380      	movs	r3, #128	; 0x80
 800c5f2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c5f6:	8003      	strh	r3, [r0, #0]
 800c5f8:	f44f 7580 	mov.w	r5, #256	; 0x100
 800c5fc:	24d0      	movs	r4, #208	; 0xd0
 800c5fe:	4b07      	ldr	r3, [pc, #28]	; (800c61c <arm_rfft_256_fast_init_f32+0x34>)
 800c600:	8205      	strh	r5, [r0, #16]
 800c602:	8184      	strh	r4, [r0, #12]
 800c604:	6143      	str	r3, [r0, #20]
 800c606:	bc30      	pop	{r4, r5}
 800c608:	2000      	movs	r0, #0
 800c60a:	4770      	bx	lr
 800c60c:	f04f 30ff 	mov.w	r0, #4294967295
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	08055484 	.word	0x08055484
 800c618:	08059b5c 	.word	0x08059b5c
 800c61c:	080628dc 	.word	0x080628dc

0800c620 <arm_rfft_512_fast_init_f32>:
 800c620:	b190      	cbz	r0, 800c648 <arm_rfft_512_fast_init_f32+0x28>
 800c622:	b430      	push	{r4, r5}
 800c624:	490a      	ldr	r1, [pc, #40]	; (800c650 <arm_rfft_512_fast_init_f32+0x30>)
 800c626:	4a0b      	ldr	r2, [pc, #44]	; (800c654 <arm_rfft_512_fast_init_f32+0x34>)
 800c628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c62c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c630:	8003      	strh	r3, [r0, #0]
 800c632:	f44f 7500 	mov.w	r5, #512	; 0x200
 800c636:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800c63a:	4b07      	ldr	r3, [pc, #28]	; (800c658 <arm_rfft_512_fast_init_f32+0x38>)
 800c63c:	8205      	strh	r5, [r0, #16]
 800c63e:	8184      	strh	r4, [r0, #12]
 800c640:	6143      	str	r3, [r0, #20]
 800c642:	bc30      	pop	{r4, r5}
 800c644:	2000      	movs	r0, #0
 800c646:	4770      	bx	lr
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	0805740c 	.word	0x0805740c
 800c654:	0805dfdc 	.word	0x0805dfdc
 800c658:	08066d5c 	.word	0x08066d5c

0800c65c <arm_rfft_1024_fast_init_f32>:
 800c65c:	b190      	cbz	r0, 800c684 <arm_rfft_1024_fast_init_f32+0x28>
 800c65e:	b430      	push	{r4, r5}
 800c660:	490a      	ldr	r1, [pc, #40]	; (800c68c <arm_rfft_1024_fast_init_f32+0x30>)
 800c662:	4a0b      	ldr	r2, [pc, #44]	; (800c690 <arm_rfft_1024_fast_init_f32+0x34>)
 800c664:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c668:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c66c:	8003      	strh	r3, [r0, #0]
 800c66e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800c672:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800c676:	4b07      	ldr	r3, [pc, #28]	; (800c694 <arm_rfft_1024_fast_init_f32+0x38>)
 800c678:	8205      	strh	r5, [r0, #16]
 800c67a:	8184      	strh	r4, [r0, #12]
 800c67c:	6143      	str	r3, [r0, #20]
 800c67e:	bc30      	pop	{r4, r5}
 800c680:	2000      	movs	r0, #0
 800c682:	4770      	bx	lr
 800c684:	f04f 30ff 	mov.w	r0, #4294967295
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	080577dc 	.word	0x080577dc
 800c690:	0805e8dc 	.word	0x0805e8dc
 800c694:	0805f8dc 	.word	0x0805f8dc

0800c698 <arm_rfft_2048_fast_init_f32>:
 800c698:	b190      	cbz	r0, 800c6c0 <arm_rfft_2048_fast_init_f32+0x28>
 800c69a:	b430      	push	{r4, r5}
 800c69c:	490a      	ldr	r1, [pc, #40]	; (800c6c8 <arm_rfft_2048_fast_init_f32+0x30>)
 800c69e:	4a0b      	ldr	r2, [pc, #44]	; (800c6cc <arm_rfft_2048_fast_init_f32+0x34>)
 800c6a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c6a8:	8003      	strh	r3, [r0, #0]
 800c6aa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800c6ae:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800c6b2:	4b07      	ldr	r3, [pc, #28]	; (800c6d0 <arm_rfft_2048_fast_init_f32+0x38>)
 800c6b4:	8205      	strh	r5, [r0, #16]
 800c6b6:	8184      	strh	r4, [r0, #12]
 800c6b8:	6143      	str	r3, [r0, #20]
 800c6ba:	bc30      	pop	{r4, r5}
 800c6bc:	2000      	movs	r0, #0
 800c6be:	4770      	bx	lr
 800c6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	08054674 	.word	0x08054674
 800c6cc:	08057b5c 	.word	0x08057b5c
 800c6d0:	080608dc 	.word	0x080608dc

0800c6d4 <arm_rfft_4096_fast_init_f32>:
 800c6d4:	b190      	cbz	r0, 800c6fc <arm_rfft_4096_fast_init_f32+0x28>
 800c6d6:	b430      	push	{r4, r5}
 800c6d8:	490a      	ldr	r1, [pc, #40]	; (800c704 <arm_rfft_4096_fast_init_f32+0x30>)
 800c6da:	4a0b      	ldr	r2, [pc, #44]	; (800c708 <arm_rfft_4096_fast_init_f32+0x34>)
 800c6dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6e0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800c6e4:	8003      	strh	r3, [r0, #0]
 800c6e6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800c6ea:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800c6ee:	4b07      	ldr	r3, [pc, #28]	; (800c70c <arm_rfft_4096_fast_init_f32+0x38>)
 800c6f0:	8205      	strh	r5, [r0, #16]
 800c6f2:	8184      	strh	r4, [r0, #12]
 800c6f4:	6143      	str	r3, [r0, #20]
 800c6f6:	bc30      	pop	{r4, r5}
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	4770      	bx	lr
 800c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	0805564c 	.word	0x0805564c
 800c708:	08059fdc 	.word	0x08059fdc
 800c70c:	08062d5c 	.word	0x08062d5c

0800c710 <arm_rfft_fast_init_f32>:
 800c710:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c714:	d01f      	beq.n	800c756 <arm_rfft_fast_init_f32+0x46>
 800c716:	d90b      	bls.n	800c730 <arm_rfft_fast_init_f32+0x20>
 800c718:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c71c:	d019      	beq.n	800c752 <arm_rfft_fast_init_f32+0x42>
 800c71e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c722:	d012      	beq.n	800c74a <arm_rfft_fast_init_f32+0x3a>
 800c724:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c728:	d00d      	beq.n	800c746 <arm_rfft_fast_init_f32+0x36>
 800c72a:	f04f 30ff 	mov.w	r0, #4294967295
 800c72e:	4770      	bx	lr
 800c730:	2940      	cmp	r1, #64	; 0x40
 800c732:	d00c      	beq.n	800c74e <arm_rfft_fast_init_f32+0x3e>
 800c734:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c738:	d003      	beq.n	800c742 <arm_rfft_fast_init_f32+0x32>
 800c73a:	2920      	cmp	r1, #32
 800c73c:	d1f5      	bne.n	800c72a <arm_rfft_fast_init_f32+0x1a>
 800c73e:	4b07      	ldr	r3, [pc, #28]	; (800c75c <arm_rfft_fast_init_f32+0x4c>)
 800c740:	4718      	bx	r3
 800c742:	4b07      	ldr	r3, [pc, #28]	; (800c760 <arm_rfft_fast_init_f32+0x50>)
 800c744:	4718      	bx	r3
 800c746:	4b07      	ldr	r3, [pc, #28]	; (800c764 <arm_rfft_fast_init_f32+0x54>)
 800c748:	4718      	bx	r3
 800c74a:	4b07      	ldr	r3, [pc, #28]	; (800c768 <arm_rfft_fast_init_f32+0x58>)
 800c74c:	4718      	bx	r3
 800c74e:	4b07      	ldr	r3, [pc, #28]	; (800c76c <arm_rfft_fast_init_f32+0x5c>)
 800c750:	e7f6      	b.n	800c740 <arm_rfft_fast_init_f32+0x30>
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <arm_rfft_fast_init_f32+0x60>)
 800c754:	e7f4      	b.n	800c740 <arm_rfft_fast_init_f32+0x30>
 800c756:	4b07      	ldr	r3, [pc, #28]	; (800c774 <arm_rfft_fast_init_f32+0x64>)
 800c758:	e7f2      	b.n	800c740 <arm_rfft_fast_init_f32+0x30>
 800c75a:	bf00      	nop
 800c75c:	0800c581 	.word	0x0800c581
 800c760:	0800c5e9 	.word	0x0800c5e9
 800c764:	0800c65d 	.word	0x0800c65d
 800c768:	0800c6d5 	.word	0x0800c6d5
 800c76c:	0800c5b5 	.word	0x0800c5b5
 800c770:	0800c699 	.word	0x0800c699
 800c774:	0800c621 	.word	0x0800c621

0800c778 <stage_rfft_f32>:
 800c778:	b410      	push	{r4}
 800c77a:	edd1 7a00 	vldr	s15, [r1]
 800c77e:	ed91 7a01 	vldr	s14, [r1, #4]
 800c782:	8804      	ldrh	r4, [r0, #0]
 800c784:	6940      	ldr	r0, [r0, #20]
 800c786:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c78a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c78e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c792:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c79a:	3c01      	subs	r4, #1
 800c79c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800c7a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c7a4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800c7a8:	ed82 7a00 	vstr	s14, [r2]
 800c7ac:	edc2 7a01 	vstr	s15, [r2, #4]
 800c7b0:	3010      	adds	r0, #16
 800c7b2:	3210      	adds	r2, #16
 800c7b4:	3b08      	subs	r3, #8
 800c7b6:	3110      	adds	r1, #16
 800c7b8:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c7bc:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7c0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c7c4:	edd3 4a03 	vldr	s9, [r3, #12]
 800c7c8:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c7cc:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c7d0:	ee77 5a45 	vsub.f32	s11, s14, s10
 800c7d4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c7d8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c7dc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c7e0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c7e4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c7e8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800c7ec:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c7f0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c7f4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c7f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c7fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c800:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c804:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c808:	3c01      	subs	r4, #1
 800c80a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c80e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c812:	f1a3 0308 	sub.w	r3, r3, #8
 800c816:	f101 0108 	add.w	r1, r1, #8
 800c81a:	f100 0008 	add.w	r0, r0, #8
 800c81e:	f102 0208 	add.w	r2, r2, #8
 800c822:	d1c9      	bne.n	800c7b8 <stage_rfft_f32+0x40>
 800c824:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop

0800c82c <merge_rfft_f32>:
 800c82c:	b410      	push	{r4}
 800c82e:	edd1 7a00 	vldr	s15, [r1]
 800c832:	edd1 6a01 	vldr	s13, [r1, #4]
 800c836:	8804      	ldrh	r4, [r0, #0]
 800c838:	6940      	ldr	r0, [r0, #20]
 800c83a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c83e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c842:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800c846:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c84a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c84e:	3c01      	subs	r4, #1
 800c850:	ed82 7a00 	vstr	s14, [r2]
 800c854:	edc2 7a01 	vstr	s15, [r2, #4]
 800c858:	b3dc      	cbz	r4, 800c8d2 <merge_rfft_f32+0xa6>
 800c85a:	00e3      	lsls	r3, r4, #3
 800c85c:	3b08      	subs	r3, #8
 800c85e:	440b      	add	r3, r1
 800c860:	3010      	adds	r0, #16
 800c862:	3210      	adds	r2, #16
 800c864:	3110      	adds	r1, #16
 800c866:	ed11 5a02 	vldr	s10, [r1, #-8]
 800c86a:	ed93 7a02 	vldr	s14, [r3, #8]
 800c86e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800c872:	edd3 4a03 	vldr	s9, [r3, #12]
 800c876:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c87a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800c87e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800c882:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c886:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800c88a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800c88e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800c892:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c896:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c89a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c89e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800c8a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c8a6:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c8aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c8ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c8b2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c8b6:	3c01      	subs	r4, #1
 800c8b8:	ed02 7a02 	vstr	s14, [r2, #-8]
 800c8bc:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c8c0:	f1a3 0308 	sub.w	r3, r3, #8
 800c8c4:	f101 0108 	add.w	r1, r1, #8
 800c8c8:	f100 0008 	add.w	r0, r0, #8
 800c8cc:	f102 0208 	add.w	r2, r2, #8
 800c8d0:	d1c9      	bne.n	800c866 <merge_rfft_f32+0x3a>
 800c8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <arm_rfft_fast_f32>:
 800c8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8dc:	8a05      	ldrh	r5, [r0, #16]
 800c8de:	086d      	lsrs	r5, r5, #1
 800c8e0:	8005      	strh	r5, [r0, #0]
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	4616      	mov	r6, r2
 800c8e6:	461d      	mov	r5, r3
 800c8e8:	b14b      	cbz	r3, 800c8fe <arm_rfft_fast_f32+0x26>
 800c8ea:	f7ff ff9f 	bl	800c82c <merge_rfft_f32>
 800c8ee:	462a      	mov	r2, r5
 800c8f0:	4631      	mov	r1, r6
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fa:	f000 bb33 	b.w	800cf64 <arm_cfft_f32>
 800c8fe:	460f      	mov	r7, r1
 800c900:	461a      	mov	r2, r3
 800c902:	2301      	movs	r3, #1
 800c904:	f000 fb2e 	bl	800cf64 <arm_cfft_f32>
 800c908:	4632      	mov	r2, r6
 800c90a:	4639      	mov	r1, r7
 800c90c:	4620      	mov	r0, r4
 800c90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c912:	f7ff bf31 	b.w	800c778 <stage_rfft_f32>
 800c916:	bf00      	nop

0800c918 <arm_cfft_radix8by2_f32>:
 800c918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c91c:	ed2d 8b08 	vpush	{d8-d11}
 800c920:	4607      	mov	r7, r0
 800c922:	4608      	mov	r0, r1
 800c924:	f8b7 c000 	ldrh.w	ip, [r7]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c92e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c936:	f000 80b0 	beq.w	800ca9a <arm_cfft_radix8by2_f32+0x182>
 800c93a:	008c      	lsls	r4, r1, #2
 800c93c:	3410      	adds	r4, #16
 800c93e:	f100 0310 	add.w	r3, r0, #16
 800c942:	1906      	adds	r6, r0, r4
 800c944:	3210      	adds	r2, #16
 800c946:	4444      	add	r4, r8
 800c948:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c94c:	f108 0510 	add.w	r5, r8, #16
 800c950:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c954:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c958:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c95c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c960:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c964:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c968:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c96c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c970:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c974:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c978:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c97c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c980:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c984:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c988:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c98c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c990:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c994:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c998:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c99c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c9a0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c9a4:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c9a8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c9ac:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c9b0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c9b4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c9b8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c9bc:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c9c0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c9c4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c9c8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c9cc:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c9d0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c9d4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c9d8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c9dc:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c9e0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c9e4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c9e8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c9ec:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c9f0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c9f4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c9f8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c9fc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ca00:	ee64 6a26 	vmul.f32	s13, s8, s13
 800ca04:	ee24 4a03 	vmul.f32	s8, s8, s6
 800ca08:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ca0c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ca10:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800ca14:	ee32 3a08 	vadd.f32	s6, s4, s16
 800ca18:	ed05 7a03 	vstr	s14, [r5, #-12]
 800ca1c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800ca20:	ed04 4a04 	vstr	s8, [r4, #-16]
 800ca24:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ca28:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ca2c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800ca30:	ee35 5a40 	vsub.f32	s10, s10, s0
 800ca34:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800ca38:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ca3c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ca40:	ee67 3a87 	vmul.f32	s7, s15, s14
 800ca44:	ee66 4a87 	vmul.f32	s9, s13, s14
 800ca48:	ee25 4a25 	vmul.f32	s8, s10, s11
 800ca4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ca50:	ee25 5a07 	vmul.f32	s10, s10, s14
 800ca54:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ca58:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ca5c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ca60:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ca64:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ca68:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800ca6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ca70:	3310      	adds	r3, #16
 800ca72:	4563      	cmp	r3, ip
 800ca74:	ed45 5a02 	vstr	s11, [r5, #-8]
 800ca78:	f106 0610 	add.w	r6, r6, #16
 800ca7c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ca80:	f102 0210 	add.w	r2, r2, #16
 800ca84:	ed04 6a02 	vstr	s12, [r4, #-8]
 800ca88:	ed04 7a01 	vstr	s14, [r4, #-4]
 800ca8c:	f105 0510 	add.w	r5, r5, #16
 800ca90:	f104 0410 	add.w	r4, r4, #16
 800ca94:	f47f af5c 	bne.w	800c950 <arm_cfft_radix8by2_f32+0x38>
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	b28c      	uxth	r4, r1
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	2302      	movs	r3, #2
 800caa0:	f000 faf8 	bl	800d094 <arm_radix8_butterfly_f32>
 800caa4:	ecbd 8b08 	vpop	{d8-d11}
 800caa8:	4621      	mov	r1, r4
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	4640      	mov	r0, r8
 800caae:	2302      	movs	r3, #2
 800cab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cab4:	f000 baee 	b.w	800d094 <arm_radix8_butterfly_f32>

0800cab8 <arm_cfft_radix8by4_f32>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	ed2d 8b0a 	vpush	{d8-d12}
 800cac0:	b08d      	sub	sp, #52	; 0x34
 800cac2:	460d      	mov	r5, r1
 800cac4:	910b      	str	r1, [sp, #44]	; 0x2c
 800cac6:	8801      	ldrh	r1, [r0, #0]
 800cac8:	6842      	ldr	r2, [r0, #4]
 800caca:	900a      	str	r0, [sp, #40]	; 0x28
 800cacc:	0849      	lsrs	r1, r1, #1
 800cace:	008b      	lsls	r3, r1, #2
 800cad0:	18ee      	adds	r6, r5, r3
 800cad2:	18f0      	adds	r0, r6, r3
 800cad4:	edd0 5a00 	vldr	s11, [r0]
 800cad8:	edd5 7a00 	vldr	s15, [r5]
 800cadc:	ed96 7a00 	vldr	s14, [r6]
 800cae0:	edd0 3a01 	vldr	s7, [r0, #4]
 800cae4:	ed96 4a01 	vldr	s8, [r6, #4]
 800cae8:	ed95 5a01 	vldr	s10, [r5, #4]
 800caec:	9008      	str	r0, [sp, #32]
 800caee:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800caf2:	18c7      	adds	r7, r0, r3
 800caf4:	edd7 4a00 	vldr	s9, [r7]
 800caf8:	ed97 3a01 	vldr	s6, [r7, #4]
 800cafc:	9701      	str	r7, [sp, #4]
 800cafe:	ee77 6a06 	vadd.f32	s13, s14, s12
 800cb02:	462c      	mov	r4, r5
 800cb04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cb08:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cb0c:	ee16 ca90 	vmov	ip, s13
 800cb10:	f844 cb08 	str.w	ip, [r4], #8
 800cb14:	ee75 6a23 	vadd.f32	s13, s10, s7
 800cb18:	edd6 5a01 	vldr	s11, [r6, #4]
 800cb1c:	edd7 2a01 	vldr	s5, [r7, #4]
 800cb20:	9404      	str	r4, [sp, #16]
 800cb22:	ee35 5a63 	vsub.f32	s10, s10, s7
 800cb26:	ee74 3a27 	vadd.f32	s7, s8, s15
 800cb2a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800cb2e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800cb32:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800cb36:	0849      	lsrs	r1, r1, #1
 800cb38:	f102 0e08 	add.w	lr, r2, #8
 800cb3c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800cb40:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800cb44:	9109      	str	r1, [sp, #36]	; 0x24
 800cb46:	ee35 4a47 	vsub.f32	s8, s10, s14
 800cb4a:	f1a1 0902 	sub.w	r9, r1, #2
 800cb4e:	f8cd e00c 	str.w	lr, [sp, #12]
 800cb52:	4631      	mov	r1, r6
 800cb54:	ee13 ea90 	vmov	lr, s7
 800cb58:	ee36 6a64 	vsub.f32	s12, s12, s9
 800cb5c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800cb60:	4604      	mov	r4, r0
 800cb62:	edc5 5a01 	vstr	s11, [r5, #4]
 800cb66:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cb6a:	f841 eb08 	str.w	lr, [r1], #8
 800cb6e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800cb72:	ee16 ea10 	vmov	lr, s12
 800cb76:	ed86 5a01 	vstr	s10, [r6, #4]
 800cb7a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800cb7e:	f844 eb08 	str.w	lr, [r4], #8
 800cb82:	ee77 7a83 	vadd.f32	s15, s15, s6
 800cb86:	edc0 6a01 	vstr	s13, [r0, #4]
 800cb8a:	9405      	str	r4, [sp, #20]
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	ee17 0a90 	vmov	r0, s15
 800cb92:	9106      	str	r1, [sp, #24]
 800cb94:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cb98:	f102 0110 	add.w	r1, r2, #16
 800cb9c:	46bc      	mov	ip, r7
 800cb9e:	9100      	str	r1, [sp, #0]
 800cba0:	f847 0b08 	str.w	r0, [r7], #8
 800cba4:	f102 0118 	add.w	r1, r2, #24
 800cba8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800cbac:	9102      	str	r1, [sp, #8]
 800cbae:	ed8c 7a01 	vstr	s14, [ip, #4]
 800cbb2:	9007      	str	r0, [sp, #28]
 800cbb4:	f000 8134 	beq.w	800ce20 <arm_cfft_radix8by4_f32+0x368>
 800cbb8:	f102 0920 	add.w	r9, r2, #32
 800cbbc:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800cbc0:	9a01      	ldr	r2, [sp, #4]
 800cbc2:	f8dd a000 	ldr.w	sl, [sp]
 800cbc6:	3b0c      	subs	r3, #12
 800cbc8:	4683      	mov	fp, r0
 800cbca:	4463      	add	r3, ip
 800cbcc:	f105 0e10 	add.w	lr, r5, #16
 800cbd0:	f1a4 010c 	sub.w	r1, r4, #12
 800cbd4:	f104 0510 	add.w	r5, r4, #16
 800cbd8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800cbdc:	f1a2 040c 	sub.w	r4, r2, #12
 800cbe0:	f106 0010 	add.w	r0, r6, #16
 800cbe4:	3210      	adds	r2, #16
 800cbe6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800cbea:	ed55 5a02 	vldr	s11, [r5, #-8]
 800cbee:	ed50 7a02 	vldr	s15, [r0, #-8]
 800cbf2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800cbf6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800cbfa:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800cbfe:	ed12 1a01 	vldr	s2, [r2, #-4]
 800cc02:	ed10 8a01 	vldr	s16, [r0, #-4]
 800cc06:	ee35 4a25 	vadd.f32	s8, s10, s11
 800cc0a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800cc0e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800cc12:	ee30 0a66 	vsub.f32	s0, s0, s13
 800cc16:	ee37 7a21 	vadd.f32	s14, s14, s3
 800cc1a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800cc1e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800cc22:	ed10 7a01 	vldr	s14, [r0, #-4]
 800cc26:	ed52 6a01 	vldr	s13, [r2, #-4]
 800cc2a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800cc2e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800cc32:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cc36:	ee70 3a67 	vsub.f32	s7, s0, s15
 800cc3a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800cc3e:	ed94 7a02 	vldr	s14, [r4, #8]
 800cc42:	ed9c 2a02 	vldr	s4, [ip, #8]
 800cc46:	ed91 ba02 	vldr	s22, [r1, #8]
 800cc4a:	edd3 9a02 	vldr	s19, [r3, #8]
 800cc4e:	edd4 2a01 	vldr	s5, [r4, #4]
 800cc52:	ed9c 9a01 	vldr	s18, [ip, #4]
 800cc56:	ed93 5a01 	vldr	s10, [r3, #4]
 800cc5a:	edd1 0a01 	vldr	s1, [r1, #4]
 800cc5e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800cc62:	ee32 2a47 	vsub.f32	s4, s4, s14
 800cc66:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800cc6a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800cc6e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800cc72:	ee79 2a62 	vsub.f32	s5, s18, s5
 800cc76:	ed8c 7a02 	vstr	s14, [ip, #8]
 800cc7a:	ed91 7a01 	vldr	s14, [r1, #4]
 800cc7e:	edd3 8a01 	vldr	s17, [r3, #4]
 800cc82:	ee34 7a87 	vadd.f32	s14, s9, s14
 800cc86:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800cc8a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800cc8e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800cc92:	ed8c 7a01 	vstr	s14, [ip, #4]
 800cc96:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800cc9a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800cc9e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800cca2:	ee39 9a05 	vadd.f32	s18, s18, s10
 800cca6:	ee7a aac1 	vsub.f32	s21, s21, s2
 800ccaa:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ccae:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800ccb2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800ccb6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ccba:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800ccbe:	ee63 ca87 	vmul.f32	s25, s7, s14
 800ccc2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800ccc6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ccca:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ccce:	ee73 3aea 	vsub.f32	s7, s7, s21
 800ccd2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ccd6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800ccda:	ee3b aaca 	vsub.f32	s20, s23, s20
 800ccde:	ee34 4a67 	vsub.f32	s8, s8, s15
 800cce2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800cce6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800ccea:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ccee:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ccf2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ccf6:	edc1 8a01 	vstr	s17, [r1, #4]
 800ccfa:	ed81 aa02 	vstr	s20, [r1, #8]
 800ccfe:	ed59 3a04 	vldr	s7, [r9, #-16]
 800cd02:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800cd06:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800cd0a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800cd0e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800cd12:	ee36 6a41 	vsub.f32	s12, s12, s2
 800cd16:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800cd1a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800cd1e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800cd22:	ee26 6a23 	vmul.f32	s12, s12, s7
 800cd26:	ee24 4a26 	vmul.f32	s8, s8, s13
 800cd2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cd2e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800cd32:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800cd36:	ee36 6a44 	vsub.f32	s12, s12, s8
 800cd3a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cd3e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800cd42:	ee79 3a29 	vadd.f32	s7, s18, s19
 800cd46:	ee75 6a60 	vsub.f32	s13, s10, s1
 800cd4a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800cd4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cd52:	ed45 3a02 	vstr	s7, [r5, #-8]
 800cd56:	ed05 6a01 	vstr	s12, [r5, #-4]
 800cd5a:	ed84 7a01 	vstr	s14, [r4, #4]
 800cd5e:	ed84 4a02 	vstr	s8, [r4, #8]
 800cd62:	ee35 6a81 	vadd.f32	s12, s11, s2
 800cd66:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800cd6a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800cd6e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800cd72:	ee33 3a62 	vsub.f32	s6, s6, s5
 800cd76:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800cd7a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800cd7e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800cd82:	ee26 5a25 	vmul.f32	s10, s12, s11
 800cd86:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cd8a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800cd8e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cd92:	ee63 6a26 	vmul.f32	s13, s6, s13
 800cd96:	ee23 3a25 	vmul.f32	s6, s6, s11
 800cd9a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cd9e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800cda2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800cda6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cdaa:	f1bb 0b01 	subs.w	fp, fp, #1
 800cdae:	ed42 5a02 	vstr	s11, [r2, #-8]
 800cdb2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800cdb6:	f10e 0e08 	add.w	lr, lr, #8
 800cdba:	ed83 3a02 	vstr	s6, [r3, #8]
 800cdbe:	ed83 7a01 	vstr	s14, [r3, #4]
 800cdc2:	f1ac 0c08 	sub.w	ip, ip, #8
 800cdc6:	f10a 0a08 	add.w	sl, sl, #8
 800cdca:	f100 0008 	add.w	r0, r0, #8
 800cdce:	f1a1 0108 	sub.w	r1, r1, #8
 800cdd2:	f109 0910 	add.w	r9, r9, #16
 800cdd6:	f105 0508 	add.w	r5, r5, #8
 800cdda:	f1a4 0408 	sub.w	r4, r4, #8
 800cdde:	f108 0818 	add.w	r8, r8, #24
 800cde2:	f102 0208 	add.w	r2, r2, #8
 800cde6:	f1a3 0308 	sub.w	r3, r3, #8
 800cdea:	f47f aefc 	bne.w	800cbe6 <arm_cfft_radix8by4_f32+0x12e>
 800cdee:	9907      	ldr	r1, [sp, #28]
 800cdf0:	9800      	ldr	r0, [sp, #0]
 800cdf2:	00cb      	lsls	r3, r1, #3
 800cdf4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800cdf8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800cdfc:	9100      	str	r1, [sp, #0]
 800cdfe:	9904      	ldr	r1, [sp, #16]
 800ce00:	4419      	add	r1, r3
 800ce02:	9104      	str	r1, [sp, #16]
 800ce04:	9903      	ldr	r1, [sp, #12]
 800ce06:	4419      	add	r1, r3
 800ce08:	9103      	str	r1, [sp, #12]
 800ce0a:	9906      	ldr	r1, [sp, #24]
 800ce0c:	4419      	add	r1, r3
 800ce0e:	9106      	str	r1, [sp, #24]
 800ce10:	9905      	ldr	r1, [sp, #20]
 800ce12:	441f      	add	r7, r3
 800ce14:	4419      	add	r1, r3
 800ce16:	9b02      	ldr	r3, [sp, #8]
 800ce18:	9105      	str	r1, [sp, #20]
 800ce1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce1e:	9302      	str	r3, [sp, #8]
 800ce20:	9904      	ldr	r1, [sp, #16]
 800ce22:	9805      	ldr	r0, [sp, #20]
 800ce24:	ed91 4a00 	vldr	s8, [r1]
 800ce28:	edd0 6a00 	vldr	s13, [r0]
 800ce2c:	9b06      	ldr	r3, [sp, #24]
 800ce2e:	ed97 3a00 	vldr	s6, [r7]
 800ce32:	edd3 7a00 	vldr	s15, [r3]
 800ce36:	edd0 4a01 	vldr	s9, [r0, #4]
 800ce3a:	edd1 3a01 	vldr	s7, [r1, #4]
 800ce3e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ce42:	ed93 7a01 	vldr	s14, [r3, #4]
 800ce46:	9a03      	ldr	r2, [sp, #12]
 800ce48:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800ce4c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800ce50:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800ce54:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ce58:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ce5c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ce60:	ee74 6a66 	vsub.f32	s13, s8, s13
 800ce64:	ed81 5a00 	vstr	s10, [r1]
 800ce68:	ed93 5a01 	vldr	s10, [r3, #4]
 800ce6c:	edd7 4a01 	vldr	s9, [r7, #4]
 800ce70:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ce74:	ee37 4a26 	vadd.f32	s8, s14, s13
 800ce78:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ce7c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800ce80:	ed81 5a01 	vstr	s10, [r1, #4]
 800ce84:	edd2 1a00 	vldr	s3, [r2]
 800ce88:	edd2 2a01 	vldr	s5, [r2, #4]
 800ce8c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ce90:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ce94:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ce98:	ee64 4a21 	vmul.f32	s9, s8, s3
 800ce9c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800cea0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800cea4:	ee25 5a21 	vmul.f32	s10, s10, s3
 800cea8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ceac:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ceb0:	edc3 2a00 	vstr	s5, [r3]
 800ceb4:	ed83 5a01 	vstr	s10, [r3, #4]
 800ceb8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800cebc:	9b00      	ldr	r3, [sp, #0]
 800cebe:	ee36 6a43 	vsub.f32	s12, s12, s6
 800cec2:	ed93 4a01 	vldr	s8, [r3, #4]
 800cec6:	ed93 5a00 	vldr	s10, [r3]
 800ceca:	9b02      	ldr	r3, [sp, #8]
 800cecc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ced0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ced4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ced8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cedc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800cee0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800cee4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800cee8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ceec:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cef0:	ed80 6a01 	vstr	s12, [r0, #4]
 800cef4:	edc0 5a00 	vstr	s11, [r0]
 800cef8:	edd3 5a01 	vldr	s11, [r3, #4]
 800cefc:	edd3 6a00 	vldr	s13, [r3]
 800cf00:	ee37 7a02 	vadd.f32	s14, s14, s4
 800cf04:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800cf08:	ee27 6a26 	vmul.f32	s12, s14, s13
 800cf0c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800cf10:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cf14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cf18:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cf1c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cf20:	ed87 7a01 	vstr	s14, [r7, #4]
 800cf24:	edc7 7a00 	vstr	s15, [r7]
 800cf28:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	686a      	ldr	r2, [r5, #4]
 800cf30:	2304      	movs	r3, #4
 800cf32:	f000 f8af 	bl	800d094 <arm_radix8_butterfly_f32>
 800cf36:	4630      	mov	r0, r6
 800cf38:	4621      	mov	r1, r4
 800cf3a:	686a      	ldr	r2, [r5, #4]
 800cf3c:	2304      	movs	r3, #4
 800cf3e:	f000 f8a9 	bl	800d094 <arm_radix8_butterfly_f32>
 800cf42:	9808      	ldr	r0, [sp, #32]
 800cf44:	686a      	ldr	r2, [r5, #4]
 800cf46:	4621      	mov	r1, r4
 800cf48:	2304      	movs	r3, #4
 800cf4a:	f000 f8a3 	bl	800d094 <arm_radix8_butterfly_f32>
 800cf4e:	686a      	ldr	r2, [r5, #4]
 800cf50:	9801      	ldr	r0, [sp, #4]
 800cf52:	4621      	mov	r1, r4
 800cf54:	2304      	movs	r3, #4
 800cf56:	b00d      	add	sp, #52	; 0x34
 800cf58:	ecbd 8b0a 	vpop	{d8-d12}
 800cf5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	f000 b898 	b.w	800d094 <arm_radix8_butterfly_f32>

0800cf64 <arm_cfft_f32>:
 800cf64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf68:	2a01      	cmp	r2, #1
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	4617      	mov	r7, r2
 800cf6e:	460c      	mov	r4, r1
 800cf70:	4698      	mov	r8, r3
 800cf72:	8805      	ldrh	r5, [r0, #0]
 800cf74:	d056      	beq.n	800d024 <arm_cfft_f32+0xc0>
 800cf76:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800cf7a:	d063      	beq.n	800d044 <arm_cfft_f32+0xe0>
 800cf7c:	d916      	bls.n	800cfac <arm_cfft_f32+0x48>
 800cf7e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800cf82:	d01a      	beq.n	800cfba <arm_cfft_f32+0x56>
 800cf84:	d947      	bls.n	800d016 <arm_cfft_f32+0xb2>
 800cf86:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cf8a:	d05b      	beq.n	800d044 <arm_cfft_f32+0xe0>
 800cf8c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800cf90:	d105      	bne.n	800cf9e <arm_cfft_f32+0x3a>
 800cf92:	2301      	movs	r3, #1
 800cf94:	6872      	ldr	r2, [r6, #4]
 800cf96:	4629      	mov	r1, r5
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f000 f87b 	bl	800d094 <arm_radix8_butterfly_f32>
 800cf9e:	f1b8 0f00 	cmp.w	r8, #0
 800cfa2:	d111      	bne.n	800cfc8 <arm_cfft_f32+0x64>
 800cfa4:	2f01      	cmp	r7, #1
 800cfa6:	d016      	beq.n	800cfd6 <arm_cfft_f32+0x72>
 800cfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfac:	2d20      	cmp	r5, #32
 800cfae:	d049      	beq.n	800d044 <arm_cfft_f32+0xe0>
 800cfb0:	d935      	bls.n	800d01e <arm_cfft_f32+0xba>
 800cfb2:	2d40      	cmp	r5, #64	; 0x40
 800cfb4:	d0ed      	beq.n	800cf92 <arm_cfft_f32+0x2e>
 800cfb6:	2d80      	cmp	r5, #128	; 0x80
 800cfb8:	d1f1      	bne.n	800cf9e <arm_cfft_f32+0x3a>
 800cfba:	4621      	mov	r1, r4
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7ff fcab 	bl	800c918 <arm_cfft_radix8by2_f32>
 800cfc2:	f1b8 0f00 	cmp.w	r8, #0
 800cfc6:	d0ed      	beq.n	800cfa4 <arm_cfft_f32+0x40>
 800cfc8:	68b2      	ldr	r2, [r6, #8]
 800cfca:	89b1      	ldrh	r1, [r6, #12]
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 f841 	bl	800d054 <arm_bitreversal_32>
 800cfd2:	2f01      	cmp	r7, #1
 800cfd4:	d1e8      	bne.n	800cfa8 <arm_cfft_f32+0x44>
 800cfd6:	ee07 5a90 	vmov	s15, r5
 800cfda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfe2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cfe6:	2d00      	cmp	r5, #0
 800cfe8:	d0de      	beq.n	800cfa8 <arm_cfft_f32+0x44>
 800cfea:	f104 0108 	add.w	r1, r4, #8
 800cfee:	2300      	movs	r3, #0
 800cff0:	3301      	adds	r3, #1
 800cff2:	429d      	cmp	r5, r3
 800cff4:	f101 0108 	add.w	r1, r1, #8
 800cff8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cffc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800d000:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d004:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d008:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d00c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d010:	d1ee      	bne.n	800cff0 <arm_cfft_f32+0x8c>
 800d012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d016:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d01a:	d0ba      	beq.n	800cf92 <arm_cfft_f32+0x2e>
 800d01c:	e7bf      	b.n	800cf9e <arm_cfft_f32+0x3a>
 800d01e:	2d10      	cmp	r5, #16
 800d020:	d0cb      	beq.n	800cfba <arm_cfft_f32+0x56>
 800d022:	e7bc      	b.n	800cf9e <arm_cfft_f32+0x3a>
 800d024:	b19d      	cbz	r5, 800d04e <arm_cfft_f32+0xea>
 800d026:	f101 030c 	add.w	r3, r1, #12
 800d02a:	2200      	movs	r2, #0
 800d02c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800d030:	3201      	adds	r2, #1
 800d032:	eef1 7a67 	vneg.f32	s15, s15
 800d036:	4295      	cmp	r5, r2
 800d038:	ed43 7a02 	vstr	s15, [r3, #-8]
 800d03c:	f103 0308 	add.w	r3, r3, #8
 800d040:	d1f4      	bne.n	800d02c <arm_cfft_f32+0xc8>
 800d042:	e798      	b.n	800cf76 <arm_cfft_f32+0x12>
 800d044:	4621      	mov	r1, r4
 800d046:	4630      	mov	r0, r6
 800d048:	f7ff fd36 	bl	800cab8 <arm_cfft_radix8by4_f32>
 800d04c:	e7a7      	b.n	800cf9e <arm_cfft_f32+0x3a>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0aa      	beq.n	800cfa8 <arm_cfft_f32+0x44>
 800d052:	e7b9      	b.n	800cfc8 <arm_cfft_f32+0x64>

0800d054 <arm_bitreversal_32>:
 800d054:	b1e9      	cbz	r1, 800d092 <arm_bitreversal_32+0x3e>
 800d056:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d058:	2500      	movs	r5, #0
 800d05a:	f102 0e02 	add.w	lr, r2, #2
 800d05e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800d062:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800d066:	08a4      	lsrs	r4, r4, #2
 800d068:	089b      	lsrs	r3, r3, #2
 800d06a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800d06e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800d072:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800d076:	00a6      	lsls	r6, r4, #2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800d07e:	3304      	adds	r3, #4
 800d080:	1d34      	adds	r4, r6, #4
 800d082:	3502      	adds	r5, #2
 800d084:	58c6      	ldr	r6, [r0, r3]
 800d086:	5907      	ldr	r7, [r0, r4]
 800d088:	50c7      	str	r7, [r0, r3]
 800d08a:	428d      	cmp	r5, r1
 800d08c:	5106      	str	r6, [r0, r4]
 800d08e:	d3e6      	bcc.n	800d05e <arm_bitreversal_32+0xa>
 800d090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d092:	4770      	bx	lr

0800d094 <arm_radix8_butterfly_f32>:
 800d094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d098:	ed2d 8b10 	vpush	{d8-d15}
 800d09c:	b095      	sub	sp, #84	; 0x54
 800d09e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	ed9f bab9 	vldr	s22, [pc, #740]	; 800d38c <arm_radix8_butterfly_f32+0x2f8>
 800d0aa:	9012      	str	r0, [sp, #72]	; 0x48
 800d0ac:	468b      	mov	fp, r1
 800d0ae:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0b0:	4689      	mov	r9, r1
 800d0b2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800d0b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0b8:	960f      	str	r6, [sp, #60]	; 0x3c
 800d0ba:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800d0be:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800d0c2:	eb03 0508 	add.w	r5, r3, r8
 800d0c6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d0ca:	eb05 040e 	add.w	r4, r5, lr
 800d0ce:	0137      	lsls	r7, r6, #4
 800d0d0:	eba6 030a 	sub.w	r3, r6, sl
 800d0d4:	eb04 000e 	add.w	r0, r4, lr
 800d0d8:	44b2      	add	sl, r6
 800d0da:	1d3a      	adds	r2, r7, #4
 800d0dc:	9702      	str	r7, [sp, #8]
 800d0de:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d0e2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800d0e6:	ebae 0c06 	sub.w	ip, lr, r6
 800d0ea:	9703      	str	r7, [sp, #12]
 800d0ec:	eb03 0708 	add.w	r7, r3, r8
 800d0f0:	9701      	str	r7, [sp, #4]
 800d0f2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800d0f6:	9706      	str	r7, [sp, #24]
 800d0f8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d0fa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800d0fe:	f10e 0104 	add.w	r1, lr, #4
 800d102:	4439      	add	r1, r7
 800d104:	443a      	add	r2, r7
 800d106:	0137      	lsls	r7, r6, #4
 800d108:	00f6      	lsls	r6, r6, #3
 800d10a:	9704      	str	r7, [sp, #16]
 800d10c:	9605      	str	r6, [sp, #20]
 800d10e:	9f01      	ldr	r7, [sp, #4]
 800d110:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d112:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800d116:	f04f 0c00 	mov.w	ip, #0
 800d11a:	edd4 6a00 	vldr	s13, [r4]
 800d11e:	edd7 1a00 	vldr	s3, [r7]
 800d122:	ed16 aa01 	vldr	s20, [r6, #-4]
 800d126:	edd5 5a00 	vldr	s11, [r5]
 800d12a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800d12e:	ed90 6a00 	vldr	s12, [r0]
 800d132:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d136:	ed93 3a00 	vldr	s6, [r3]
 800d13a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800d13e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800d142:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800d146:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800d14a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800d14e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800d152:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d156:	ee74 6a07 	vadd.f32	s13, s8, s14
 800d15a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800d15e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800d162:	ed85 4a00 	vstr	s8, [r5]
 800d166:	edd1 6a00 	vldr	s13, [r1]
 800d16a:	ed94 9a01 	vldr	s18, [r4, #4]
 800d16e:	edd3 2a01 	vldr	s5, [r3, #4]
 800d172:	edd7 8a01 	vldr	s17, [r7, #4]
 800d176:	edd6 0a00 	vldr	s1, [r6]
 800d17a:	edd5 3a01 	vldr	s7, [r5, #4]
 800d17e:	ed90 8a01 	vldr	s16, [r0, #4]
 800d182:	ed92 7a00 	vldr	s14, [r2]
 800d186:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d18a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800d18e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800d192:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800d196:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800d19a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d19e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800d1a2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800d1a6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800d1aa:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800d1ae:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800d1b2:	ee77 0a08 	vadd.f32	s1, s14, s16
 800d1b6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800d1ba:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d1be:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800d1c2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800d1c6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800d1ca:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800d1ce:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d1d2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d1d6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800d1da:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800d1de:	ee33 2a20 	vadd.f32	s4, s6, s1
 800d1e2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800d1e6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800d1ea:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800d1ee:	ee77 0a01 	vadd.f32	s1, s14, s2
 800d1f2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d1f6:	ee37 7a41 	vsub.f32	s14, s14, s2
 800d1fa:	ee73 1a84 	vadd.f32	s3, s7, s8
 800d1fe:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d202:	ee76 3a27 	vadd.f32	s7, s12, s15
 800d206:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d20a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800d20e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800d212:	ee32 2a40 	vsub.f32	s4, s4, s0
 800d216:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d21a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800d21e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800d222:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d226:	ee34 6a67 	vsub.f32	s12, s8, s15
 800d22a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800d22e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800d232:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800d236:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d23a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800d23e:	44dc      	add	ip, fp
 800d240:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d244:	45e1      	cmp	r9, ip
 800d246:	ed86 8a00 	vstr	s16, [r6]
 800d24a:	ed85 2a01 	vstr	s4, [r5, #4]
 800d24e:	4456      	add	r6, sl
 800d250:	ed02 0a01 	vstr	s0, [r2, #-4]
 800d254:	4455      	add	r5, sl
 800d256:	edc0 6a00 	vstr	s13, [r0]
 800d25a:	ed82 1a00 	vstr	s2, [r2]
 800d25e:	ed80 5a01 	vstr	s10, [r0, #4]
 800d262:	4452      	add	r2, sl
 800d264:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d268:	4450      	add	r0, sl
 800d26a:	edc7 2a00 	vstr	s5, [r7]
 800d26e:	edc4 4a00 	vstr	s9, [r4]
 800d272:	ed83 7a00 	vstr	s14, [r3]
 800d276:	edc1 5a00 	vstr	s11, [r1]
 800d27a:	edc7 3a01 	vstr	s7, [r7, #4]
 800d27e:	4451      	add	r1, sl
 800d280:	ed84 6a01 	vstr	s12, [r4, #4]
 800d284:	4457      	add	r7, sl
 800d286:	edc3 7a01 	vstr	s15, [r3, #4]
 800d28a:	4454      	add	r4, sl
 800d28c:	4453      	add	r3, sl
 800d28e:	f63f af44 	bhi.w	800d11a <arm_radix8_butterfly_f32+0x86>
 800d292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d294:	2b07      	cmp	r3, #7
 800d296:	f240 81b7 	bls.w	800d608 <arm_radix8_butterfly_f32+0x574>
 800d29a:	9b06      	ldr	r3, [sp, #24]
 800d29c:	9903      	ldr	r1, [sp, #12]
 800d29e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d2a0:	9e05      	ldr	r6, [sp, #20]
 800d2a2:	9a04      	ldr	r2, [sp, #16]
 800d2a4:	f103 0c08 	add.w	ip, r3, #8
 800d2a8:	9b02      	ldr	r3, [sp, #8]
 800d2aa:	3108      	adds	r1, #8
 800d2ac:	f108 0808 	add.w	r8, r8, #8
 800d2b0:	1841      	adds	r1, r0, r1
 800d2b2:	3608      	adds	r6, #8
 800d2b4:	330c      	adds	r3, #12
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	4444      	add	r4, r8
 800d2ba:	18c3      	adds	r3, r0, r3
 800d2bc:	9109      	str	r1, [sp, #36]	; 0x24
 800d2be:	1981      	adds	r1, r0, r6
 800d2c0:	f10e 0e08 	add.w	lr, lr, #8
 800d2c4:	3208      	adds	r2, #8
 800d2c6:	940b      	str	r4, [sp, #44]	; 0x2c
 800d2c8:	9107      	str	r1, [sp, #28]
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	4601      	mov	r1, r0
 800d2ce:	9304      	str	r3, [sp, #16]
 800d2d0:	f100 030c 	add.w	r3, r0, #12
 800d2d4:	4474      	add	r4, lr
 800d2d6:	f04f 0801 	mov.w	r8, #1
 800d2da:	1882      	adds	r2, r0, r2
 800d2dc:	4461      	add	r1, ip
 800d2de:	9305      	str	r3, [sp, #20]
 800d2e0:	464b      	mov	r3, r9
 800d2e2:	940a      	str	r4, [sp, #40]	; 0x28
 800d2e4:	46c1      	mov	r9, r8
 800d2e6:	9208      	str	r2, [sp, #32]
 800d2e8:	46d8      	mov	r8, fp
 800d2ea:	9106      	str	r1, [sp, #24]
 800d2ec:	f04f 0e00 	mov.w	lr, #0
 800d2f0:	469b      	mov	fp, r3
 800d2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d2f6:	449e      	add	lr, r3
 800d2f8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800d2fc:	441a      	add	r2, r3
 800d2fe:	920e      	str	r2, [sp, #56]	; 0x38
 800d300:	441a      	add	r2, r3
 800d302:	18d4      	adds	r4, r2, r3
 800d304:	18e5      	adds	r5, r4, r3
 800d306:	18ee      	adds	r6, r5, r3
 800d308:	18f7      	adds	r7, r6, r3
 800d30a:	eb07 0c03 	add.w	ip, r7, r3
 800d30e:	920d      	str	r2, [sp, #52]	; 0x34
 800d310:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800d314:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800d318:	910c      	str	r1, [sp, #48]	; 0x30
 800d31a:	4419      	add	r1, r3
 800d31c:	9103      	str	r1, [sp, #12]
 800d31e:	4419      	add	r1, r3
 800d320:	18ca      	adds	r2, r1, r3
 800d322:	9202      	str	r2, [sp, #8]
 800d324:	441a      	add	r2, r3
 800d326:	18d0      	adds	r0, r2, r3
 800d328:	ed92 ea01 	vldr	s28, [r2, #4]
 800d32c:	9a02      	ldr	r2, [sp, #8]
 800d32e:	edd4 7a00 	vldr	s15, [r4]
 800d332:	edd2 da01 	vldr	s27, [r2, #4]
 800d336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d338:	ed91 da01 	vldr	s26, [r1, #4]
 800d33c:	ed92 ca01 	vldr	s24, [r2, #4]
 800d340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d342:	9903      	ldr	r1, [sp, #12]
 800d344:	edcd 7a03 	vstr	s15, [sp, #12]
 800d348:	edd2 7a00 	vldr	s15, [r2]
 800d34c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d34e:	edcd 7a02 	vstr	s15, [sp, #8]
 800d352:	edd2 7a00 	vldr	s15, [r2]
 800d356:	edd0 ea01 	vldr	s29, [r0, #4]
 800d35a:	edd1 ca01 	vldr	s25, [r1, #4]
 800d35e:	eddc ba00 	vldr	s23, [ip]
 800d362:	edd7 aa00 	vldr	s21, [r7]
 800d366:	ed96 aa00 	vldr	s20, [r6]
 800d36a:	edd5 9a00 	vldr	s19, [r5]
 800d36e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d372:	4403      	add	r3, r0
 800d374:	ed93 fa01 	vldr	s30, [r3, #4]
 800d378:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800d37c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800d380:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d384:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d388:	46cc      	mov	ip, r9
 800d38a:	e001      	b.n	800d390 <arm_radix8_butterfly_f32+0x2fc>
 800d38c:	3f3504f3 	.word	0x3f3504f3
 800d390:	ed91 6a00 	vldr	s12, [r1]
 800d394:	ed93 5a00 	vldr	s10, [r3]
 800d398:	edd0 fa00 	vldr	s31, [r0]
 800d39c:	edd4 7a00 	vldr	s15, [r4]
 800d3a0:	ed95 7a00 	vldr	s14, [r5]
 800d3a4:	ed56 3a01 	vldr	s7, [r6, #-4]
 800d3a8:	ed17 3a01 	vldr	s6, [r7, #-4]
 800d3ac:	ed92 2a00 	vldr	s4, [r2]
 800d3b0:	ed96 0a00 	vldr	s0, [r6]
 800d3b4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d3b8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800d3bc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800d3c0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d3c4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800d3c8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800d3cc:	ee32 2a46 	vsub.f32	s4, s4, s12
 800d3d0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800d3d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3d8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800d3dc:	edd4 8a01 	vldr	s17, [r4, #4]
 800d3e0:	ed92 9a01 	vldr	s18, [r2, #4]
 800d3e4:	edd7 0a00 	vldr	s1, [r7]
 800d3e8:	edd1 2a01 	vldr	s5, [r1, #4]
 800d3ec:	ed95 7a01 	vldr	s14, [r5, #4]
 800d3f0:	ed93 6a01 	vldr	s12, [r3, #4]
 800d3f4:	edd0 5a01 	vldr	s11, [r0, #4]
 800d3f8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800d3fc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800d400:	ee39 5a62 	vsub.f32	s10, s18, s5
 800d404:	ee78 fac7 	vsub.f32	s31, s17, s14
 800d408:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d40c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800d410:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800d414:	ee79 2a22 	vadd.f32	s5, s18, s5
 800d418:	ee32 9a27 	vadd.f32	s18, s4, s15
 800d41c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800d420:	ee30 2a06 	vadd.f32	s4, s0, s12
 800d424:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800d428:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d42c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800d430:	ee32 1a08 	vadd.f32	s2, s4, s16
 800d434:	ee72 fa87 	vadd.f32	s31, s5, s14
 800d438:	ee32 2a48 	vsub.f32	s4, s4, s16
 800d43c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800d440:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800d444:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d448:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800d44c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800d450:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800d454:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800d458:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d45c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800d460:	ee74 0a22 	vadd.f32	s1, s8, s5
 800d464:	ee36 0a28 	vadd.f32	s0, s12, s17
 800d468:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d46c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d470:	ee32 4a64 	vsub.f32	s8, s4, s9
 800d474:	ee73 8a09 	vadd.f32	s17, s6, s18
 800d478:	ee74 4a82 	vadd.f32	s9, s9, s4
 800d47c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800d480:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800d484:	ee35 3a85 	vadd.f32	s6, s11, s10
 800d488:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d48c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800d490:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d494:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800d498:	ee30 7a68 	vsub.f32	s14, s0, s17
 800d49c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800d4a0:	ee38 0a80 	vadd.f32	s0, s17, s0
 800d4a4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d4a8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800d4ac:	ed9d 2a01 	vldr	s4, [sp, #4]
 800d4b0:	eddd 1a02 	vldr	s3, [sp, #8]
 800d4b4:	ee35 5a43 	vsub.f32	s10, s10, s6
 800d4b8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800d4bc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800d4c0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800d4c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d4c8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800d4cc:	ee76 5a49 	vsub.f32	s11, s12, s18
 800d4d0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800d4d4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800d4d8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800d4dc:	ee21 4a84 	vmul.f32	s8, s3, s8
 800d4e0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800d4e4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800d4e8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800d4ec:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d4f0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800d4f4:	ee31 1a09 	vadd.f32	s2, s2, s18
 800d4f8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800d4fc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800d500:	ee74 0a60 	vsub.f32	s1, s8, s1
 800d504:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d508:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800d50c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800d510:	ee72 1a21 	vadd.f32	s3, s4, s3
 800d514:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800d518:	ee38 2a89 	vadd.f32	s4, s17, s18
 800d51c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d520:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d524:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d528:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d52c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d530:	eddd 5a03 	vldr	s11, [sp, #12]
 800d534:	edc6 fa00 	vstr	s31, [r6]
 800d538:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d53c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d540:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d544:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d548:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d54c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d550:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d554:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d558:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d55c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d560:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d564:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d568:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d56c:	44c4      	add	ip, r8
 800d56e:	45e3      	cmp	fp, ip
 800d570:	edc3 3a00 	vstr	s7, [r3]
 800d574:	edc3 6a01 	vstr	s13, [r3, #4]
 800d578:	4456      	add	r6, sl
 800d57a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d57e:	edc7 0a00 	vstr	s1, [r7]
 800d582:	4453      	add	r3, sl
 800d584:	ed80 2a00 	vstr	s4, [r0]
 800d588:	edc0 2a01 	vstr	s5, [r0, #4]
 800d58c:	4457      	add	r7, sl
 800d58e:	edc2 1a00 	vstr	s3, [r2]
 800d592:	ed82 7a01 	vstr	s14, [r2, #4]
 800d596:	4450      	add	r0, sl
 800d598:	ed85 8a00 	vstr	s16, [r5]
 800d59c:	ed85 0a01 	vstr	s0, [r5, #4]
 800d5a0:	4452      	add	r2, sl
 800d5a2:	edc1 4a00 	vstr	s9, [r1]
 800d5a6:	4455      	add	r5, sl
 800d5a8:	ed81 3a01 	vstr	s6, [r1, #4]
 800d5ac:	edc4 8a00 	vstr	s17, [r4]
 800d5b0:	ed84 6a01 	vstr	s12, [r4, #4]
 800d5b4:	4451      	add	r1, sl
 800d5b6:	4454      	add	r4, sl
 800d5b8:	f63f aeea 	bhi.w	800d390 <arm_radix8_butterfly_f32+0x2fc>
 800d5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5be:	3308      	adds	r3, #8
 800d5c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ca:	3308      	adds	r3, #8
 800d5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ce:	9b08      	ldr	r3, [sp, #32]
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	9308      	str	r3, [sp, #32]
 800d5d4:	9b07      	ldr	r3, [sp, #28]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	9307      	str	r3, [sp, #28]
 800d5da:	9b06      	ldr	r3, [sp, #24]
 800d5dc:	3308      	adds	r3, #8
 800d5de:	9306      	str	r3, [sp, #24]
 800d5e0:	9b05      	ldr	r3, [sp, #20]
 800d5e2:	3308      	adds	r3, #8
 800d5e4:	9305      	str	r3, [sp, #20]
 800d5e6:	9b04      	ldr	r3, [sp, #16]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5ee:	f109 0901 	add.w	r9, r9, #1
 800d5f2:	454b      	cmp	r3, r9
 800d5f4:	f47f ae7d 	bne.w	800d2f2 <arm_radix8_butterfly_f32+0x25e>
 800d5f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5fa:	00db      	lsls	r3, r3, #3
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	46d9      	mov	r9, fp
 800d600:	9310      	str	r3, [sp, #64]	; 0x40
 800d602:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800d606:	e554      	b.n	800d0b2 <arm_radix8_butterfly_f32+0x1e>
 800d608:	b015      	add	sp, #84	; 0x54
 800d60a:	ecbd 8b10 	vpop	{d8-d15}
 800d60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d612:	bf00      	nop

0800d614 <_ZdlPvj>:
 800d614:	f000 b815 	b.w	800d642 <_ZdlPv>

0800d618 <_ZdaPv>:
 800d618:	f000 b813 	b.w	800d642 <_ZdlPv>

0800d61c <_Znwj>:
 800d61c:	2801      	cmp	r0, #1
 800d61e:	bf38      	it	cc
 800d620:	2001      	movcc	r0, #1
 800d622:	b510      	push	{r4, lr}
 800d624:	4604      	mov	r4, r0
 800d626:	4620      	mov	r0, r4
 800d628:	f002 fcc6 	bl	800ffb8 <malloc>
 800d62c:	b930      	cbnz	r0, 800d63c <_Znwj+0x20>
 800d62e:	f000 f80b 	bl	800d648 <_ZSt15get_new_handlerv>
 800d632:	b908      	cbnz	r0, 800d638 <_Znwj+0x1c>
 800d634:	f002 fc8e 	bl	800ff54 <abort>
 800d638:	4780      	blx	r0
 800d63a:	e7f4      	b.n	800d626 <_Znwj+0xa>
 800d63c:	bd10      	pop	{r4, pc}

0800d63e <_Znaj>:
 800d63e:	f7ff bfed 	b.w	800d61c <_Znwj>

0800d642 <_ZdlPv>:
 800d642:	f002 bcc1 	b.w	800ffc8 <free>
	...

0800d648 <_ZSt15get_new_handlerv>:
 800d648:	4b02      	ldr	r3, [pc, #8]	; (800d654 <_ZSt15get_new_handlerv+0xc>)
 800d64a:	6818      	ldr	r0, [r3, #0]
 800d64c:	f3bf 8f5b 	dmb	ish
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	20001068 	.word	0x20001068

0800d658 <ceil>:
 800d658:	ec51 0b10 	vmov	r0, r1, d0
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d664:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d668:	2e13      	cmp	r6, #19
 800d66a:	ee10 5a10 	vmov	r5, s0
 800d66e:	ee10 8a10 	vmov	r8, s0
 800d672:	460c      	mov	r4, r1
 800d674:	dc30      	bgt.n	800d6d8 <ceil+0x80>
 800d676:	2e00      	cmp	r6, #0
 800d678:	da12      	bge.n	800d6a0 <ceil+0x48>
 800d67a:	a335      	add	r3, pc, #212	; (adr r3, 800d750 <ceil+0xf8>)
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	f7f2 fe04 	bl	800028c <__adddf3>
 800d684:	2200      	movs	r2, #0
 800d686:	2300      	movs	r3, #0
 800d688:	f7f3 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 800d68c:	b128      	cbz	r0, 800d69a <ceil+0x42>
 800d68e:	2c00      	cmp	r4, #0
 800d690:	db55      	blt.n	800d73e <ceil+0xe6>
 800d692:	432c      	orrs	r4, r5
 800d694:	d057      	beq.n	800d746 <ceil+0xee>
 800d696:	4c30      	ldr	r4, [pc, #192]	; (800d758 <ceil+0x100>)
 800d698:	2500      	movs	r5, #0
 800d69a:	4621      	mov	r1, r4
 800d69c:	4628      	mov	r0, r5
 800d69e:	e025      	b.n	800d6ec <ceil+0x94>
 800d6a0:	4f2e      	ldr	r7, [pc, #184]	; (800d75c <ceil+0x104>)
 800d6a2:	4137      	asrs	r7, r6
 800d6a4:	ea01 0307 	and.w	r3, r1, r7
 800d6a8:	4303      	orrs	r3, r0
 800d6aa:	d01f      	beq.n	800d6ec <ceil+0x94>
 800d6ac:	a328      	add	r3, pc, #160	; (adr r3, 800d750 <ceil+0xf8>)
 800d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b2:	f7f2 fdeb 	bl	800028c <__adddf3>
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f7f3 fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d0eb      	beq.n	800d69a <ceil+0x42>
 800d6c2:	2c00      	cmp	r4, #0
 800d6c4:	bfc2      	ittt	gt
 800d6c6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d6ca:	fa43 f606 	asrgt.w	r6, r3, r6
 800d6ce:	19a4      	addgt	r4, r4, r6
 800d6d0:	ea24 0407 	bic.w	r4, r4, r7
 800d6d4:	2500      	movs	r5, #0
 800d6d6:	e7e0      	b.n	800d69a <ceil+0x42>
 800d6d8:	2e33      	cmp	r6, #51	; 0x33
 800d6da:	dd0b      	ble.n	800d6f4 <ceil+0x9c>
 800d6dc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d6e0:	d104      	bne.n	800d6ec <ceil+0x94>
 800d6e2:	ee10 2a10 	vmov	r2, s0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	f7f2 fdd0 	bl	800028c <__adddf3>
 800d6ec:	ec41 0b10 	vmov	d0, r0, r1
 800d6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fc:	fa23 f707 	lsr.w	r7, r3, r7
 800d700:	4207      	tst	r7, r0
 800d702:	d0f3      	beq.n	800d6ec <ceil+0x94>
 800d704:	a312      	add	r3, pc, #72	; (adr r3, 800d750 <ceil+0xf8>)
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	f7f2 fdbf 	bl	800028c <__adddf3>
 800d70e:	2200      	movs	r2, #0
 800d710:	2300      	movs	r3, #0
 800d712:	f7f3 fa01 	bl	8000b18 <__aeabi_dcmpgt>
 800d716:	2800      	cmp	r0, #0
 800d718:	d0bf      	beq.n	800d69a <ceil+0x42>
 800d71a:	2c00      	cmp	r4, #0
 800d71c:	dd02      	ble.n	800d724 <ceil+0xcc>
 800d71e:	2e14      	cmp	r6, #20
 800d720:	d103      	bne.n	800d72a <ceil+0xd2>
 800d722:	3401      	adds	r4, #1
 800d724:	ea25 0507 	bic.w	r5, r5, r7
 800d728:	e7b7      	b.n	800d69a <ceil+0x42>
 800d72a:	2301      	movs	r3, #1
 800d72c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d730:	fa03 f606 	lsl.w	r6, r3, r6
 800d734:	4435      	add	r5, r6
 800d736:	4545      	cmp	r5, r8
 800d738:	bf38      	it	cc
 800d73a:	18e4      	addcc	r4, r4, r3
 800d73c:	e7f2      	b.n	800d724 <ceil+0xcc>
 800d73e:	2500      	movs	r5, #0
 800d740:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d744:	e7a9      	b.n	800d69a <ceil+0x42>
 800d746:	4625      	mov	r5, r4
 800d748:	e7a7      	b.n	800d69a <ceil+0x42>
 800d74a:	bf00      	nop
 800d74c:	f3af 8000 	nop.w
 800d750:	8800759c 	.word	0x8800759c
 800d754:	7e37e43c 	.word	0x7e37e43c
 800d758:	3ff00000 	.word	0x3ff00000
 800d75c:	000fffff 	.word	0x000fffff

0800d760 <cos>:
 800d760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d762:	ec53 2b10 	vmov	r2, r3, d0
 800d766:	4824      	ldr	r0, [pc, #144]	; (800d7f8 <cos+0x98>)
 800d768:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d76c:	4281      	cmp	r1, r0
 800d76e:	dc06      	bgt.n	800d77e <cos+0x1e>
 800d770:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d7f0 <cos+0x90>
 800d774:	f001 fd64 	bl	800f240 <__kernel_cos>
 800d778:	ec51 0b10 	vmov	r0, r1, d0
 800d77c:	e007      	b.n	800d78e <cos+0x2e>
 800d77e:	481f      	ldr	r0, [pc, #124]	; (800d7fc <cos+0x9c>)
 800d780:	4281      	cmp	r1, r0
 800d782:	dd09      	ble.n	800d798 <cos+0x38>
 800d784:	ee10 0a10 	vmov	r0, s0
 800d788:	4619      	mov	r1, r3
 800d78a:	f7f2 fd7d 	bl	8000288 <__aeabi_dsub>
 800d78e:	ec41 0b10 	vmov	d0, r0, r1
 800d792:	b005      	add	sp, #20
 800d794:	f85d fb04 	ldr.w	pc, [sp], #4
 800d798:	4668      	mov	r0, sp
 800d79a:	f001 f8c9 	bl	800e930 <__ieee754_rem_pio2>
 800d79e:	f000 0003 	and.w	r0, r0, #3
 800d7a2:	2801      	cmp	r0, #1
 800d7a4:	d007      	beq.n	800d7b6 <cos+0x56>
 800d7a6:	2802      	cmp	r0, #2
 800d7a8:	d012      	beq.n	800d7d0 <cos+0x70>
 800d7aa:	b9c0      	cbnz	r0, 800d7de <cos+0x7e>
 800d7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7b0:	ed9d 0b00 	vldr	d0, [sp]
 800d7b4:	e7de      	b.n	800d774 <cos+0x14>
 800d7b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7ba:	ed9d 0b00 	vldr	d0, [sp]
 800d7be:	f002 f947 	bl	800fa50 <__kernel_sin>
 800d7c2:	ec53 2b10 	vmov	r2, r3, d0
 800d7c6:	ee10 0a10 	vmov	r0, s0
 800d7ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d7ce:	e7de      	b.n	800d78e <cos+0x2e>
 800d7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7d4:	ed9d 0b00 	vldr	d0, [sp]
 800d7d8:	f001 fd32 	bl	800f240 <__kernel_cos>
 800d7dc:	e7f1      	b.n	800d7c2 <cos+0x62>
 800d7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7e2:	ed9d 0b00 	vldr	d0, [sp]
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	f002 f932 	bl	800fa50 <__kernel_sin>
 800d7ec:	e7c4      	b.n	800d778 <cos+0x18>
 800d7ee:	bf00      	nop
	...
 800d7f8:	3fe921fb 	.word	0x3fe921fb
 800d7fc:	7fefffff 	.word	0x7fefffff

0800d800 <roundf>:
 800d800:	ee10 0a10 	vmov	r0, s0
 800d804:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d808:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800d80c:	2a16      	cmp	r2, #22
 800d80e:	dc15      	bgt.n	800d83c <roundf+0x3c>
 800d810:	2a00      	cmp	r2, #0
 800d812:	da08      	bge.n	800d826 <roundf+0x26>
 800d814:	3201      	adds	r2, #1
 800d816:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d81a:	d101      	bne.n	800d820 <roundf+0x20>
 800d81c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d820:	ee00 3a10 	vmov	s0, r3
 800d824:	4770      	bx	lr
 800d826:	4908      	ldr	r1, [pc, #32]	; (800d848 <roundf+0x48>)
 800d828:	4111      	asrs	r1, r2
 800d82a:	4208      	tst	r0, r1
 800d82c:	d0fa      	beq.n	800d824 <roundf+0x24>
 800d82e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d832:	4113      	asrs	r3, r2
 800d834:	4403      	add	r3, r0
 800d836:	ea23 0301 	bic.w	r3, r3, r1
 800d83a:	e7f1      	b.n	800d820 <roundf+0x20>
 800d83c:	2a80      	cmp	r2, #128	; 0x80
 800d83e:	d1f1      	bne.n	800d824 <roundf+0x24>
 800d840:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	007fffff 	.word	0x007fffff
 800d84c:	00000000 	.word	0x00000000

0800d850 <log>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	ed2d 8b02 	vpush	{d8}
 800d856:	ec55 4b10 	vmov	r4, r5, d0
 800d85a:	f000 f989 	bl	800db70 <__ieee754_log>
 800d85e:	4b1e      	ldr	r3, [pc, #120]	; (800d8d8 <log+0x88>)
 800d860:	eeb0 8a40 	vmov.f32	s16, s0
 800d864:	eef0 8a60 	vmov.f32	s17, s1
 800d868:	f993 3000 	ldrsb.w	r3, [r3]
 800d86c:	3301      	adds	r3, #1
 800d86e:	d01a      	beq.n	800d8a6 <log+0x56>
 800d870:	4622      	mov	r2, r4
 800d872:	462b      	mov	r3, r5
 800d874:	4620      	mov	r0, r4
 800d876:	4629      	mov	r1, r5
 800d878:	f7f3 f958 	bl	8000b2c <__aeabi_dcmpun>
 800d87c:	b998      	cbnz	r0, 800d8a6 <log+0x56>
 800d87e:	2200      	movs	r2, #0
 800d880:	2300      	movs	r3, #0
 800d882:	4620      	mov	r0, r4
 800d884:	4629      	mov	r1, r5
 800d886:	f7f3 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800d88a:	b960      	cbnz	r0, 800d8a6 <log+0x56>
 800d88c:	2200      	movs	r2, #0
 800d88e:	2300      	movs	r3, #0
 800d890:	4620      	mov	r0, r4
 800d892:	4629      	mov	r1, r5
 800d894:	f7f3 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 800d898:	b160      	cbz	r0, 800d8b4 <log+0x64>
 800d89a:	f002 fb63 	bl	800ff64 <__errno>
 800d89e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800d8d0 <log+0x80>
 800d8a2:	2322      	movs	r3, #34	; 0x22
 800d8a4:	6003      	str	r3, [r0, #0]
 800d8a6:	eeb0 0a48 	vmov.f32	s0, s16
 800d8aa:	eef0 0a68 	vmov.f32	s1, s17
 800d8ae:	ecbd 8b02 	vpop	{d8}
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	f002 fb56 	bl	800ff64 <__errno>
 800d8b8:	ecbd 8b02 	vpop	{d8}
 800d8bc:	2321      	movs	r3, #33	; 0x21
 800d8be:	6003      	str	r3, [r0, #0]
 800d8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8c4:	4805      	ldr	r0, [pc, #20]	; (800d8dc <log+0x8c>)
 800d8c6:	f002 ba17 	b.w	800fcf8 <nan>
 800d8ca:	bf00      	nop
 800d8cc:	f3af 8000 	nop.w
 800d8d0:	00000000 	.word	0x00000000
 800d8d4:	fff00000 	.word	0xfff00000
 800d8d8:	20000c24 	.word	0x20000c24
 800d8dc:	08067895 	.word	0x08067895

0800d8e0 <pow>:
 800d8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8e4:	ec59 8b10 	vmov	r8, r9, d0
 800d8e8:	ec57 6b11 	vmov	r6, r7, d1
 800d8ec:	f000 fafc 	bl	800dee8 <__ieee754_pow>
 800d8f0:	4b4e      	ldr	r3, [pc, #312]	; (800da2c <pow+0x14c>)
 800d8f2:	f993 3000 	ldrsb.w	r3, [r3]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	ec55 4b10 	vmov	r4, r5, d0
 800d8fc:	d015      	beq.n	800d92a <pow+0x4a>
 800d8fe:	4632      	mov	r2, r6
 800d900:	463b      	mov	r3, r7
 800d902:	4630      	mov	r0, r6
 800d904:	4639      	mov	r1, r7
 800d906:	f7f3 f911 	bl	8000b2c <__aeabi_dcmpun>
 800d90a:	b970      	cbnz	r0, 800d92a <pow+0x4a>
 800d90c:	4642      	mov	r2, r8
 800d90e:	464b      	mov	r3, r9
 800d910:	4640      	mov	r0, r8
 800d912:	4649      	mov	r1, r9
 800d914:	f7f3 f90a 	bl	8000b2c <__aeabi_dcmpun>
 800d918:	2200      	movs	r2, #0
 800d91a:	2300      	movs	r3, #0
 800d91c:	b148      	cbz	r0, 800d932 <pow+0x52>
 800d91e:	4630      	mov	r0, r6
 800d920:	4639      	mov	r1, r7
 800d922:	f7f3 f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d926:	2800      	cmp	r0, #0
 800d928:	d17d      	bne.n	800da26 <pow+0x146>
 800d92a:	ec45 4b10 	vmov	d0, r4, r5
 800d92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d932:	4640      	mov	r0, r8
 800d934:	4649      	mov	r1, r9
 800d936:	f7f3 f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d93a:	b1e0      	cbz	r0, 800d976 <pow+0x96>
 800d93c:	2200      	movs	r2, #0
 800d93e:	2300      	movs	r3, #0
 800d940:	4630      	mov	r0, r6
 800d942:	4639      	mov	r1, r7
 800d944:	f7f3 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d948:	2800      	cmp	r0, #0
 800d94a:	d16c      	bne.n	800da26 <pow+0x146>
 800d94c:	ec47 6b10 	vmov	d0, r6, r7
 800d950:	f002 f945 	bl	800fbde <finite>
 800d954:	2800      	cmp	r0, #0
 800d956:	d0e8      	beq.n	800d92a <pow+0x4a>
 800d958:	2200      	movs	r2, #0
 800d95a:	2300      	movs	r3, #0
 800d95c:	4630      	mov	r0, r6
 800d95e:	4639      	mov	r1, r7
 800d960:	f7f3 f8bc 	bl	8000adc <__aeabi_dcmplt>
 800d964:	2800      	cmp	r0, #0
 800d966:	d0e0      	beq.n	800d92a <pow+0x4a>
 800d968:	f002 fafc 	bl	800ff64 <__errno>
 800d96c:	2321      	movs	r3, #33	; 0x21
 800d96e:	6003      	str	r3, [r0, #0]
 800d970:	2400      	movs	r4, #0
 800d972:	4d2f      	ldr	r5, [pc, #188]	; (800da30 <pow+0x150>)
 800d974:	e7d9      	b.n	800d92a <pow+0x4a>
 800d976:	ec45 4b10 	vmov	d0, r4, r5
 800d97a:	f002 f930 	bl	800fbde <finite>
 800d97e:	bbb8      	cbnz	r0, 800d9f0 <pow+0x110>
 800d980:	ec49 8b10 	vmov	d0, r8, r9
 800d984:	f002 f92b 	bl	800fbde <finite>
 800d988:	b390      	cbz	r0, 800d9f0 <pow+0x110>
 800d98a:	ec47 6b10 	vmov	d0, r6, r7
 800d98e:	f002 f926 	bl	800fbde <finite>
 800d992:	b368      	cbz	r0, 800d9f0 <pow+0x110>
 800d994:	4622      	mov	r2, r4
 800d996:	462b      	mov	r3, r5
 800d998:	4620      	mov	r0, r4
 800d99a:	4629      	mov	r1, r5
 800d99c:	f7f3 f8c6 	bl	8000b2c <__aeabi_dcmpun>
 800d9a0:	b160      	cbz	r0, 800d9bc <pow+0xdc>
 800d9a2:	f002 fadf 	bl	800ff64 <__errno>
 800d9a6:	2321      	movs	r3, #33	; 0x21
 800d9a8:	6003      	str	r3, [r0, #0]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	4610      	mov	r0, r2
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	f7f2 ff4b 	bl	800084c <__aeabi_ddiv>
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	460d      	mov	r5, r1
 800d9ba:	e7b6      	b.n	800d92a <pow+0x4a>
 800d9bc:	f002 fad2 	bl	800ff64 <__errno>
 800d9c0:	2322      	movs	r3, #34	; 0x22
 800d9c2:	6003      	str	r3, [r0, #0]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	4640      	mov	r0, r8
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	f7f3 f886 	bl	8000adc <__aeabi_dcmplt>
 800d9d0:	2400      	movs	r4, #0
 800d9d2:	b158      	cbz	r0, 800d9ec <pow+0x10c>
 800d9d4:	ec47 6b10 	vmov	d0, r6, r7
 800d9d8:	f002 f996 	bl	800fd08 <rint>
 800d9dc:	4632      	mov	r2, r6
 800d9de:	ec51 0b10 	vmov	r0, r1, d0
 800d9e2:	463b      	mov	r3, r7
 800d9e4:	f7f3 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d0c2      	beq.n	800d972 <pow+0x92>
 800d9ec:	4d11      	ldr	r5, [pc, #68]	; (800da34 <pow+0x154>)
 800d9ee:	e79c      	b.n	800d92a <pow+0x4a>
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	f7f3 f866 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d094      	beq.n	800d92a <pow+0x4a>
 800da00:	ec49 8b10 	vmov	d0, r8, r9
 800da04:	f002 f8eb 	bl	800fbde <finite>
 800da08:	2800      	cmp	r0, #0
 800da0a:	d08e      	beq.n	800d92a <pow+0x4a>
 800da0c:	ec47 6b10 	vmov	d0, r6, r7
 800da10:	f002 f8e5 	bl	800fbde <finite>
 800da14:	2800      	cmp	r0, #0
 800da16:	d088      	beq.n	800d92a <pow+0x4a>
 800da18:	f002 faa4 	bl	800ff64 <__errno>
 800da1c:	2322      	movs	r3, #34	; 0x22
 800da1e:	6003      	str	r3, [r0, #0]
 800da20:	2400      	movs	r4, #0
 800da22:	2500      	movs	r5, #0
 800da24:	e781      	b.n	800d92a <pow+0x4a>
 800da26:	4d04      	ldr	r5, [pc, #16]	; (800da38 <pow+0x158>)
 800da28:	2400      	movs	r4, #0
 800da2a:	e77e      	b.n	800d92a <pow+0x4a>
 800da2c:	20000c24 	.word	0x20000c24
 800da30:	fff00000 	.word	0xfff00000
 800da34:	7ff00000 	.word	0x7ff00000
 800da38:	3ff00000 	.word	0x3ff00000

0800da3c <expf>:
 800da3c:	b508      	push	{r3, lr}
 800da3e:	ed2d 8b02 	vpush	{d8}
 800da42:	eef0 8a40 	vmov.f32	s17, s0
 800da46:	f001 fa31 	bl	800eeac <__ieee754_expf>
 800da4a:	4b16      	ldr	r3, [pc, #88]	; (800daa4 <expf+0x68>)
 800da4c:	f993 3000 	ldrsb.w	r3, [r3]
 800da50:	3301      	adds	r3, #1
 800da52:	eeb0 8a40 	vmov.f32	s16, s0
 800da56:	d011      	beq.n	800da7c <expf+0x40>
 800da58:	eeb0 0a68 	vmov.f32	s0, s17
 800da5c:	f002 fa66 	bl	800ff2c <finitef>
 800da60:	b160      	cbz	r0, 800da7c <expf+0x40>
 800da62:	eddf 7a11 	vldr	s15, [pc, #68]	; 800daa8 <expf+0x6c>
 800da66:	eef4 8ae7 	vcmpe.f32	s17, s15
 800da6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6e:	dd0a      	ble.n	800da86 <expf+0x4a>
 800da70:	f002 fa78 	bl	800ff64 <__errno>
 800da74:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800daac <expf+0x70>
 800da78:	2322      	movs	r3, #34	; 0x22
 800da7a:	6003      	str	r3, [r0, #0]
 800da7c:	eeb0 0a48 	vmov.f32	s0, s16
 800da80:	ecbd 8b02 	vpop	{d8}
 800da84:	bd08      	pop	{r3, pc}
 800da86:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800dab0 <expf+0x74>
 800da8a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800da8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da92:	d5f3      	bpl.n	800da7c <expf+0x40>
 800da94:	f002 fa66 	bl	800ff64 <__errno>
 800da98:	2322      	movs	r3, #34	; 0x22
 800da9a:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800dab4 <expf+0x78>
 800da9e:	6003      	str	r3, [r0, #0]
 800daa0:	e7ec      	b.n	800da7c <expf+0x40>
 800daa2:	bf00      	nop
 800daa4:	20000c24 	.word	0x20000c24
 800daa8:	42b17180 	.word	0x42b17180
 800daac:	7f800000 	.word	0x7f800000
 800dab0:	c2cff1b5 	.word	0xc2cff1b5
 800dab4:	00000000 	.word	0x00000000

0800dab8 <logf>:
 800dab8:	b508      	push	{r3, lr}
 800daba:	ed2d 8b02 	vpush	{d8}
 800dabe:	eeb0 8a40 	vmov.f32	s16, s0
 800dac2:	f001 fac7 	bl	800f054 <__ieee754_logf>
 800dac6:	4b14      	ldr	r3, [pc, #80]	; (800db18 <logf+0x60>)
 800dac8:	f993 3000 	ldrsb.w	r3, [r3]
 800dacc:	3301      	adds	r3, #1
 800dace:	d014      	beq.n	800dafa <logf+0x42>
 800dad0:	eeb4 8a48 	vcmp.f32	s16, s16
 800dad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad8:	d60f      	bvs.n	800dafa <logf+0x42>
 800dada:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae2:	dc0a      	bgt.n	800dafa <logf+0x42>
 800dae4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daec:	d108      	bne.n	800db00 <logf+0x48>
 800daee:	f002 fa39 	bl	800ff64 <__errno>
 800daf2:	2322      	movs	r3, #34	; 0x22
 800daf4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800db1c <logf+0x64>
 800daf8:	6003      	str	r3, [r0, #0]
 800dafa:	ecbd 8b02 	vpop	{d8}
 800dafe:	bd08      	pop	{r3, pc}
 800db00:	f002 fa30 	bl	800ff64 <__errno>
 800db04:	ecbd 8b02 	vpop	{d8}
 800db08:	2321      	movs	r3, #33	; 0x21
 800db0a:	6003      	str	r3, [r0, #0]
 800db0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db10:	4803      	ldr	r0, [pc, #12]	; (800db20 <logf+0x68>)
 800db12:	f002 ba19 	b.w	800ff48 <nanf>
 800db16:	bf00      	nop
 800db18:	20000c24 	.word	0x20000c24
 800db1c:	ff800000 	.word	0xff800000
 800db20:	08067895 	.word	0x08067895

0800db24 <sqrtf>:
 800db24:	b508      	push	{r3, lr}
 800db26:	ed2d 8b02 	vpush	{d8}
 800db2a:	eeb0 8a40 	vmov.f32	s16, s0
 800db2e:	f001 fb81 	bl	800f234 <__ieee754_sqrtf>
 800db32:	4b0d      	ldr	r3, [pc, #52]	; (800db68 <sqrtf+0x44>)
 800db34:	f993 3000 	ldrsb.w	r3, [r3]
 800db38:	3301      	adds	r3, #1
 800db3a:	d011      	beq.n	800db60 <sqrtf+0x3c>
 800db3c:	eeb4 8a48 	vcmp.f32	s16, s16
 800db40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db44:	d60c      	bvs.n	800db60 <sqrtf+0x3c>
 800db46:	eddf 8a09 	vldr	s17, [pc, #36]	; 800db6c <sqrtf+0x48>
 800db4a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800db4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db52:	d505      	bpl.n	800db60 <sqrtf+0x3c>
 800db54:	f002 fa06 	bl	800ff64 <__errno>
 800db58:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800db5c:	2321      	movs	r3, #33	; 0x21
 800db5e:	6003      	str	r3, [r0, #0]
 800db60:	ecbd 8b02 	vpop	{d8}
 800db64:	bd08      	pop	{r3, pc}
 800db66:	bf00      	nop
 800db68:	20000c24 	.word	0x20000c24
 800db6c:	00000000 	.word	0x00000000

0800db70 <__ieee754_log>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	ec51 0b10 	vmov	r0, r1, d0
 800db78:	ed2d 8b04 	vpush	{d8-d9}
 800db7c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800db80:	b083      	sub	sp, #12
 800db82:	460d      	mov	r5, r1
 800db84:	da29      	bge.n	800dbda <__ieee754_log+0x6a>
 800db86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db8a:	4303      	orrs	r3, r0
 800db8c:	ee10 2a10 	vmov	r2, s0
 800db90:	d10c      	bne.n	800dbac <__ieee754_log+0x3c>
 800db92:	49cf      	ldr	r1, [pc, #828]	; (800ded0 <__ieee754_log+0x360>)
 800db94:	2200      	movs	r2, #0
 800db96:	2300      	movs	r3, #0
 800db98:	2000      	movs	r0, #0
 800db9a:	f7f2 fe57 	bl	800084c <__aeabi_ddiv>
 800db9e:	ec41 0b10 	vmov	d0, r0, r1
 800dba2:	b003      	add	sp, #12
 800dba4:	ecbd 8b04 	vpop	{d8-d9}
 800dba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	2900      	cmp	r1, #0
 800dbae:	da05      	bge.n	800dbbc <__ieee754_log+0x4c>
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	f7f2 fb69 	bl	8000288 <__aeabi_dsub>
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e7ee      	b.n	800db9a <__ieee754_log+0x2a>
 800dbbc:	4bc5      	ldr	r3, [pc, #788]	; (800ded4 <__ieee754_log+0x364>)
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f7f2 fd1a 	bl	80005f8 <__aeabi_dmul>
 800dbc4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800dbc8:	460d      	mov	r5, r1
 800dbca:	4ac3      	ldr	r2, [pc, #780]	; (800ded8 <__ieee754_log+0x368>)
 800dbcc:	4295      	cmp	r5, r2
 800dbce:	dd06      	ble.n	800dbde <__ieee754_log+0x6e>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	f7f2 fb5a 	bl	800028c <__adddf3>
 800dbd8:	e7e1      	b.n	800db9e <__ieee754_log+0x2e>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e7f5      	b.n	800dbca <__ieee754_log+0x5a>
 800dbde:	152c      	asrs	r4, r5, #20
 800dbe0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dbe4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dbe8:	441c      	add	r4, r3
 800dbea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800dbee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800dbf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbf6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800dbfa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800dbfe:	ea42 0105 	orr.w	r1, r2, r5
 800dc02:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800dc06:	2200      	movs	r2, #0
 800dc08:	4bb4      	ldr	r3, [pc, #720]	; (800dedc <__ieee754_log+0x36c>)
 800dc0a:	f7f2 fb3d 	bl	8000288 <__aeabi_dsub>
 800dc0e:	1cab      	adds	r3, r5, #2
 800dc10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	4682      	mov	sl, r0
 800dc18:	468b      	mov	fp, r1
 800dc1a:	f04f 0200 	mov.w	r2, #0
 800dc1e:	dc53      	bgt.n	800dcc8 <__ieee754_log+0x158>
 800dc20:	2300      	movs	r3, #0
 800dc22:	f7f2 ff51 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc26:	b1d0      	cbz	r0, 800dc5e <__ieee754_log+0xee>
 800dc28:	2c00      	cmp	r4, #0
 800dc2a:	f000 8122 	beq.w	800de72 <__ieee754_log+0x302>
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f7f2 fc78 	bl	8000524 <__aeabi_i2d>
 800dc34:	a390      	add	r3, pc, #576	; (adr r3, 800de78 <__ieee754_log+0x308>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	4606      	mov	r6, r0
 800dc3c:	460f      	mov	r7, r1
 800dc3e:	f7f2 fcdb 	bl	80005f8 <__aeabi_dmul>
 800dc42:	a38f      	add	r3, pc, #572	; (adr r3, 800de80 <__ieee754_log+0x310>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	4604      	mov	r4, r0
 800dc4a:	460d      	mov	r5, r1
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	4639      	mov	r1, r7
 800dc50:	f7f2 fcd2 	bl	80005f8 <__aeabi_dmul>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	4620      	mov	r0, r4
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	e7ba      	b.n	800dbd4 <__ieee754_log+0x64>
 800dc5e:	a38a      	add	r3, pc, #552	; (adr r3, 800de88 <__ieee754_log+0x318>)
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	4650      	mov	r0, sl
 800dc66:	4659      	mov	r1, fp
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	2000      	movs	r0, #0
 800dc72:	499b      	ldr	r1, [pc, #620]	; (800dee0 <__ieee754_log+0x370>)
 800dc74:	f7f2 fb08 	bl	8000288 <__aeabi_dsub>
 800dc78:	4652      	mov	r2, sl
 800dc7a:	4606      	mov	r6, r0
 800dc7c:	460f      	mov	r7, r1
 800dc7e:	465b      	mov	r3, fp
 800dc80:	4650      	mov	r0, sl
 800dc82:	4659      	mov	r1, fp
 800dc84:	f7f2 fcb8 	bl	80005f8 <__aeabi_dmul>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	4639      	mov	r1, r7
 800dc90:	f7f2 fcb2 	bl	80005f8 <__aeabi_dmul>
 800dc94:	4606      	mov	r6, r0
 800dc96:	460f      	mov	r7, r1
 800dc98:	b914      	cbnz	r4, 800dca0 <__ieee754_log+0x130>
 800dc9a:	4632      	mov	r2, r6
 800dc9c:	463b      	mov	r3, r7
 800dc9e:	e0a2      	b.n	800dde6 <__ieee754_log+0x276>
 800dca0:	4620      	mov	r0, r4
 800dca2:	f7f2 fc3f 	bl	8000524 <__aeabi_i2d>
 800dca6:	a374      	add	r3, pc, #464	; (adr r3, 800de78 <__ieee754_log+0x308>)
 800dca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcac:	4680      	mov	r8, r0
 800dcae:	4689      	mov	r9, r1
 800dcb0:	f7f2 fca2 	bl	80005f8 <__aeabi_dmul>
 800dcb4:	a372      	add	r3, pc, #456	; (adr r3, 800de80 <__ieee754_log+0x310>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	4604      	mov	r4, r0
 800dcbc:	460d      	mov	r5, r1
 800dcbe:	4640      	mov	r0, r8
 800dcc0:	4649      	mov	r1, r9
 800dcc2:	f7f2 fc99 	bl	80005f8 <__aeabi_dmul>
 800dcc6:	e0a7      	b.n	800de18 <__ieee754_log+0x2a8>
 800dcc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dccc:	f7f2 fade 	bl	800028c <__adddf3>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4650      	mov	r0, sl
 800dcd6:	4659      	mov	r1, fp
 800dcd8:	f7f2 fdb8 	bl	800084c <__aeabi_ddiv>
 800dcdc:	ec41 0b18 	vmov	d8, r0, r1
 800dce0:	4620      	mov	r0, r4
 800dce2:	f7f2 fc1f 	bl	8000524 <__aeabi_i2d>
 800dce6:	ec53 2b18 	vmov	r2, r3, d8
 800dcea:	ec41 0b19 	vmov	d9, r0, r1
 800dcee:	ec51 0b18 	vmov	r0, r1, d8
 800dcf2:	f7f2 fc81 	bl	80005f8 <__aeabi_dmul>
 800dcf6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800dcfa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	4680      	mov	r8, r0
 800dd06:	4689      	mov	r9, r1
 800dd08:	f7f2 fc76 	bl	80005f8 <__aeabi_dmul>
 800dd0c:	a360      	add	r3, pc, #384	; (adr r3, 800de90 <__ieee754_log+0x320>)
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	4606      	mov	r6, r0
 800dd14:	460f      	mov	r7, r1
 800dd16:	f7f2 fc6f 	bl	80005f8 <__aeabi_dmul>
 800dd1a:	a35f      	add	r3, pc, #380	; (adr r3, 800de98 <__ieee754_log+0x328>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	f7f2 fab4 	bl	800028c <__adddf3>
 800dd24:	4632      	mov	r2, r6
 800dd26:	463b      	mov	r3, r7
 800dd28:	f7f2 fc66 	bl	80005f8 <__aeabi_dmul>
 800dd2c:	a35c      	add	r3, pc, #368	; (adr r3, 800dea0 <__ieee754_log+0x330>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	f7f2 faab 	bl	800028c <__adddf3>
 800dd36:	4632      	mov	r2, r6
 800dd38:	463b      	mov	r3, r7
 800dd3a:	f7f2 fc5d 	bl	80005f8 <__aeabi_dmul>
 800dd3e:	a35a      	add	r3, pc, #360	; (adr r3, 800dea8 <__ieee754_log+0x338>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f7f2 faa2 	bl	800028c <__adddf3>
 800dd48:	4642      	mov	r2, r8
 800dd4a:	464b      	mov	r3, r9
 800dd4c:	f7f2 fc54 	bl	80005f8 <__aeabi_dmul>
 800dd50:	a357      	add	r3, pc, #348	; (adr r3, 800deb0 <__ieee754_log+0x340>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	4680      	mov	r8, r0
 800dd58:	4689      	mov	r9, r1
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	4639      	mov	r1, r7
 800dd5e:	f7f2 fc4b 	bl	80005f8 <__aeabi_dmul>
 800dd62:	a355      	add	r3, pc, #340	; (adr r3, 800deb8 <__ieee754_log+0x348>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fa90 	bl	800028c <__adddf3>
 800dd6c:	4632      	mov	r2, r6
 800dd6e:	463b      	mov	r3, r7
 800dd70:	f7f2 fc42 	bl	80005f8 <__aeabi_dmul>
 800dd74:	a352      	add	r3, pc, #328	; (adr r3, 800dec0 <__ieee754_log+0x350>)
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7a:	f7f2 fa87 	bl	800028c <__adddf3>
 800dd7e:	4632      	mov	r2, r6
 800dd80:	463b      	mov	r3, r7
 800dd82:	f7f2 fc39 	bl	80005f8 <__aeabi_dmul>
 800dd86:	460b      	mov	r3, r1
 800dd88:	4602      	mov	r2, r0
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	f7f2 fa7d 	bl	800028c <__adddf3>
 800dd92:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800dd96:	9b01      	ldr	r3, [sp, #4]
 800dd98:	3551      	adds	r5, #81	; 0x51
 800dd9a:	431d      	orrs	r5, r3
 800dd9c:	2d00      	cmp	r5, #0
 800dd9e:	4680      	mov	r8, r0
 800dda0:	4689      	mov	r9, r1
 800dda2:	dd48      	ble.n	800de36 <__ieee754_log+0x2c6>
 800dda4:	4b4e      	ldr	r3, [pc, #312]	; (800dee0 <__ieee754_log+0x370>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	4650      	mov	r0, sl
 800ddaa:	4659      	mov	r1, fp
 800ddac:	f7f2 fc24 	bl	80005f8 <__aeabi_dmul>
 800ddb0:	4652      	mov	r2, sl
 800ddb2:	465b      	mov	r3, fp
 800ddb4:	f7f2 fc20 	bl	80005f8 <__aeabi_dmul>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	460b      	mov	r3, r1
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	460f      	mov	r7, r1
 800ddc0:	4640      	mov	r0, r8
 800ddc2:	4649      	mov	r1, r9
 800ddc4:	f7f2 fa62 	bl	800028c <__adddf3>
 800ddc8:	ec53 2b18 	vmov	r2, r3, d8
 800ddcc:	f7f2 fc14 	bl	80005f8 <__aeabi_dmul>
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	4689      	mov	r9, r1
 800ddd4:	b964      	cbnz	r4, 800ddf0 <__ieee754_log+0x280>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4630      	mov	r0, r6
 800dddc:	4639      	mov	r1, r7
 800ddde:	f7f2 fa53 	bl	8000288 <__aeabi_dsub>
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	4650      	mov	r0, sl
 800dde8:	4659      	mov	r1, fp
 800ddea:	f7f2 fa4d 	bl	8000288 <__aeabi_dsub>
 800ddee:	e6d6      	b.n	800db9e <__ieee754_log+0x2e>
 800ddf0:	a321      	add	r3, pc, #132	; (adr r3, 800de78 <__ieee754_log+0x308>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	ec51 0b19 	vmov	r0, r1, d9
 800ddfa:	f7f2 fbfd 	bl	80005f8 <__aeabi_dmul>
 800ddfe:	a320      	add	r3, pc, #128	; (adr r3, 800de80 <__ieee754_log+0x310>)
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	4604      	mov	r4, r0
 800de06:	460d      	mov	r5, r1
 800de08:	ec51 0b19 	vmov	r0, r1, d9
 800de0c:	f7f2 fbf4 	bl	80005f8 <__aeabi_dmul>
 800de10:	4642      	mov	r2, r8
 800de12:	464b      	mov	r3, r9
 800de14:	f7f2 fa3a 	bl	800028c <__adddf3>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4630      	mov	r0, r6
 800de1e:	4639      	mov	r1, r7
 800de20:	f7f2 fa32 	bl	8000288 <__aeabi_dsub>
 800de24:	4652      	mov	r2, sl
 800de26:	465b      	mov	r3, fp
 800de28:	f7f2 fa2e 	bl	8000288 <__aeabi_dsub>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4620      	mov	r0, r4
 800de32:	4629      	mov	r1, r5
 800de34:	e7d9      	b.n	800ddea <__ieee754_log+0x27a>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	4650      	mov	r0, sl
 800de3c:	4659      	mov	r1, fp
 800de3e:	f7f2 fa23 	bl	8000288 <__aeabi_dsub>
 800de42:	ec53 2b18 	vmov	r2, r3, d8
 800de46:	f7f2 fbd7 	bl	80005f8 <__aeabi_dmul>
 800de4a:	4606      	mov	r6, r0
 800de4c:	460f      	mov	r7, r1
 800de4e:	2c00      	cmp	r4, #0
 800de50:	f43f af23 	beq.w	800dc9a <__ieee754_log+0x12a>
 800de54:	a308      	add	r3, pc, #32	; (adr r3, 800de78 <__ieee754_log+0x308>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	ec51 0b19 	vmov	r0, r1, d9
 800de5e:	f7f2 fbcb 	bl	80005f8 <__aeabi_dmul>
 800de62:	a307      	add	r3, pc, #28	; (adr r3, 800de80 <__ieee754_log+0x310>)
 800de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de68:	4604      	mov	r4, r0
 800de6a:	460d      	mov	r5, r1
 800de6c:	ec51 0b19 	vmov	r0, r1, d9
 800de70:	e727      	b.n	800dcc2 <__ieee754_log+0x152>
 800de72:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800dec8 <__ieee754_log+0x358>
 800de76:	e694      	b.n	800dba2 <__ieee754_log+0x32>
 800de78:	fee00000 	.word	0xfee00000
 800de7c:	3fe62e42 	.word	0x3fe62e42
 800de80:	35793c76 	.word	0x35793c76
 800de84:	3dea39ef 	.word	0x3dea39ef
 800de88:	55555555 	.word	0x55555555
 800de8c:	3fd55555 	.word	0x3fd55555
 800de90:	df3e5244 	.word	0xdf3e5244
 800de94:	3fc2f112 	.word	0x3fc2f112
 800de98:	96cb03de 	.word	0x96cb03de
 800de9c:	3fc74664 	.word	0x3fc74664
 800dea0:	94229359 	.word	0x94229359
 800dea4:	3fd24924 	.word	0x3fd24924
 800dea8:	55555593 	.word	0x55555593
 800deac:	3fe55555 	.word	0x3fe55555
 800deb0:	d078c69f 	.word	0xd078c69f
 800deb4:	3fc39a09 	.word	0x3fc39a09
 800deb8:	1d8e78af 	.word	0x1d8e78af
 800debc:	3fcc71c5 	.word	0x3fcc71c5
 800dec0:	9997fa04 	.word	0x9997fa04
 800dec4:	3fd99999 	.word	0x3fd99999
	...
 800ded0:	c3500000 	.word	0xc3500000
 800ded4:	43500000 	.word	0x43500000
 800ded8:	7fefffff 	.word	0x7fefffff
 800dedc:	3ff00000 	.word	0x3ff00000
 800dee0:	3fe00000 	.word	0x3fe00000
 800dee4:	00000000 	.word	0x00000000

0800dee8 <__ieee754_pow>:
 800dee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deec:	ed2d 8b06 	vpush	{d8-d10}
 800def0:	b08d      	sub	sp, #52	; 0x34
 800def2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800def6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800defa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800defe:	ea56 0100 	orrs.w	r1, r6, r0
 800df02:	ec53 2b10 	vmov	r2, r3, d0
 800df06:	f000 84d1 	beq.w	800e8ac <__ieee754_pow+0x9c4>
 800df0a:	497f      	ldr	r1, [pc, #508]	; (800e108 <__ieee754_pow+0x220>)
 800df0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800df10:	428c      	cmp	r4, r1
 800df12:	ee10 8a10 	vmov	r8, s0
 800df16:	4699      	mov	r9, r3
 800df18:	dc09      	bgt.n	800df2e <__ieee754_pow+0x46>
 800df1a:	d103      	bne.n	800df24 <__ieee754_pow+0x3c>
 800df1c:	b97a      	cbnz	r2, 800df3e <__ieee754_pow+0x56>
 800df1e:	42a6      	cmp	r6, r4
 800df20:	dd02      	ble.n	800df28 <__ieee754_pow+0x40>
 800df22:	e00c      	b.n	800df3e <__ieee754_pow+0x56>
 800df24:	428e      	cmp	r6, r1
 800df26:	dc02      	bgt.n	800df2e <__ieee754_pow+0x46>
 800df28:	428e      	cmp	r6, r1
 800df2a:	d110      	bne.n	800df4e <__ieee754_pow+0x66>
 800df2c:	b178      	cbz	r0, 800df4e <__ieee754_pow+0x66>
 800df2e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800df32:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800df36:	ea54 0308 	orrs.w	r3, r4, r8
 800df3a:	f000 84b7 	beq.w	800e8ac <__ieee754_pow+0x9c4>
 800df3e:	4873      	ldr	r0, [pc, #460]	; (800e10c <__ieee754_pow+0x224>)
 800df40:	b00d      	add	sp, #52	; 0x34
 800df42:	ecbd 8b06 	vpop	{d8-d10}
 800df46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4a:	f001 bed5 	b.w	800fcf8 <nan>
 800df4e:	f1b9 0f00 	cmp.w	r9, #0
 800df52:	da36      	bge.n	800dfc2 <__ieee754_pow+0xda>
 800df54:	496e      	ldr	r1, [pc, #440]	; (800e110 <__ieee754_pow+0x228>)
 800df56:	428e      	cmp	r6, r1
 800df58:	dc51      	bgt.n	800dffe <__ieee754_pow+0x116>
 800df5a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800df5e:	428e      	cmp	r6, r1
 800df60:	f340 84af 	ble.w	800e8c2 <__ieee754_pow+0x9da>
 800df64:	1531      	asrs	r1, r6, #20
 800df66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800df6a:	2914      	cmp	r1, #20
 800df6c:	dd0f      	ble.n	800df8e <__ieee754_pow+0xa6>
 800df6e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800df72:	fa20 fc01 	lsr.w	ip, r0, r1
 800df76:	fa0c f101 	lsl.w	r1, ip, r1
 800df7a:	4281      	cmp	r1, r0
 800df7c:	f040 84a1 	bne.w	800e8c2 <__ieee754_pow+0x9da>
 800df80:	f00c 0c01 	and.w	ip, ip, #1
 800df84:	f1cc 0102 	rsb	r1, ip, #2
 800df88:	9100      	str	r1, [sp, #0]
 800df8a:	b180      	cbz	r0, 800dfae <__ieee754_pow+0xc6>
 800df8c:	e059      	b.n	800e042 <__ieee754_pow+0x15a>
 800df8e:	2800      	cmp	r0, #0
 800df90:	d155      	bne.n	800e03e <__ieee754_pow+0x156>
 800df92:	f1c1 0114 	rsb	r1, r1, #20
 800df96:	fa46 fc01 	asr.w	ip, r6, r1
 800df9a:	fa0c f101 	lsl.w	r1, ip, r1
 800df9e:	42b1      	cmp	r1, r6
 800dfa0:	f040 848c 	bne.w	800e8bc <__ieee754_pow+0x9d4>
 800dfa4:	f00c 0c01 	and.w	ip, ip, #1
 800dfa8:	f1cc 0102 	rsb	r1, ip, #2
 800dfac:	9100      	str	r1, [sp, #0]
 800dfae:	4959      	ldr	r1, [pc, #356]	; (800e114 <__ieee754_pow+0x22c>)
 800dfb0:	428e      	cmp	r6, r1
 800dfb2:	d12d      	bne.n	800e010 <__ieee754_pow+0x128>
 800dfb4:	2f00      	cmp	r7, #0
 800dfb6:	da79      	bge.n	800e0ac <__ieee754_pow+0x1c4>
 800dfb8:	4956      	ldr	r1, [pc, #344]	; (800e114 <__ieee754_pow+0x22c>)
 800dfba:	2000      	movs	r0, #0
 800dfbc:	f7f2 fc46 	bl	800084c <__aeabi_ddiv>
 800dfc0:	e016      	b.n	800dff0 <__ieee754_pow+0x108>
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	9100      	str	r1, [sp, #0]
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d13b      	bne.n	800e042 <__ieee754_pow+0x15a>
 800dfca:	494f      	ldr	r1, [pc, #316]	; (800e108 <__ieee754_pow+0x220>)
 800dfcc:	428e      	cmp	r6, r1
 800dfce:	d1ee      	bne.n	800dfae <__ieee754_pow+0xc6>
 800dfd0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dfd4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dfd8:	ea53 0308 	orrs.w	r3, r3, r8
 800dfdc:	f000 8466 	beq.w	800e8ac <__ieee754_pow+0x9c4>
 800dfe0:	4b4d      	ldr	r3, [pc, #308]	; (800e118 <__ieee754_pow+0x230>)
 800dfe2:	429c      	cmp	r4, r3
 800dfe4:	dd0d      	ble.n	800e002 <__ieee754_pow+0x11a>
 800dfe6:	2f00      	cmp	r7, #0
 800dfe8:	f280 8464 	bge.w	800e8b4 <__ieee754_pow+0x9cc>
 800dfec:	2000      	movs	r0, #0
 800dfee:	2100      	movs	r1, #0
 800dff0:	ec41 0b10 	vmov	d0, r0, r1
 800dff4:	b00d      	add	sp, #52	; 0x34
 800dff6:	ecbd 8b06 	vpop	{d8-d10}
 800dffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffe:	2102      	movs	r1, #2
 800e000:	e7e0      	b.n	800dfc4 <__ieee754_pow+0xdc>
 800e002:	2f00      	cmp	r7, #0
 800e004:	daf2      	bge.n	800dfec <__ieee754_pow+0x104>
 800e006:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e00a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e00e:	e7ef      	b.n	800dff0 <__ieee754_pow+0x108>
 800e010:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e014:	d104      	bne.n	800e020 <__ieee754_pow+0x138>
 800e016:	4610      	mov	r0, r2
 800e018:	4619      	mov	r1, r3
 800e01a:	f7f2 faed 	bl	80005f8 <__aeabi_dmul>
 800e01e:	e7e7      	b.n	800dff0 <__ieee754_pow+0x108>
 800e020:	493e      	ldr	r1, [pc, #248]	; (800e11c <__ieee754_pow+0x234>)
 800e022:	428f      	cmp	r7, r1
 800e024:	d10d      	bne.n	800e042 <__ieee754_pow+0x15a>
 800e026:	f1b9 0f00 	cmp.w	r9, #0
 800e02a:	db0a      	blt.n	800e042 <__ieee754_pow+0x15a>
 800e02c:	ec43 2b10 	vmov	d0, r2, r3
 800e030:	b00d      	add	sp, #52	; 0x34
 800e032:	ecbd 8b06 	vpop	{d8-d10}
 800e036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03a:	f000 be83 	b.w	800ed44 <__ieee754_sqrt>
 800e03e:	2100      	movs	r1, #0
 800e040:	9100      	str	r1, [sp, #0]
 800e042:	ec43 2b10 	vmov	d0, r2, r3
 800e046:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e04a:	f001 fdbf 	bl	800fbcc <fabs>
 800e04e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e052:	ec51 0b10 	vmov	r0, r1, d0
 800e056:	f1b8 0f00 	cmp.w	r8, #0
 800e05a:	d12a      	bne.n	800e0b2 <__ieee754_pow+0x1ca>
 800e05c:	b12c      	cbz	r4, 800e06a <__ieee754_pow+0x182>
 800e05e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e114 <__ieee754_pow+0x22c>
 800e062:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e066:	45e6      	cmp	lr, ip
 800e068:	d123      	bne.n	800e0b2 <__ieee754_pow+0x1ca>
 800e06a:	2f00      	cmp	r7, #0
 800e06c:	da05      	bge.n	800e07a <__ieee754_pow+0x192>
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	2000      	movs	r0, #0
 800e074:	4927      	ldr	r1, [pc, #156]	; (800e114 <__ieee754_pow+0x22c>)
 800e076:	f7f2 fbe9 	bl	800084c <__aeabi_ddiv>
 800e07a:	f1b9 0f00 	cmp.w	r9, #0
 800e07e:	dab7      	bge.n	800dff0 <__ieee754_pow+0x108>
 800e080:	9b00      	ldr	r3, [sp, #0]
 800e082:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e086:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e08a:	4323      	orrs	r3, r4
 800e08c:	d108      	bne.n	800e0a0 <__ieee754_pow+0x1b8>
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	4610      	mov	r0, r2
 800e094:	4619      	mov	r1, r3
 800e096:	f7f2 f8f7 	bl	8000288 <__aeabi_dsub>
 800e09a:	4602      	mov	r2, r0
 800e09c:	460b      	mov	r3, r1
 800e09e:	e78d      	b.n	800dfbc <__ieee754_pow+0xd4>
 800e0a0:	9b00      	ldr	r3, [sp, #0]
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d1a4      	bne.n	800dff0 <__ieee754_pow+0x108>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	e79e      	b.n	800dff0 <__ieee754_pow+0x108>
 800e0b2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e0b6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e0ba:	950a      	str	r5, [sp, #40]	; 0x28
 800e0bc:	9d00      	ldr	r5, [sp, #0]
 800e0be:	46ac      	mov	ip, r5
 800e0c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e0c2:	ea5c 0505 	orrs.w	r5, ip, r5
 800e0c6:	d0e4      	beq.n	800e092 <__ieee754_pow+0x1aa>
 800e0c8:	4b15      	ldr	r3, [pc, #84]	; (800e120 <__ieee754_pow+0x238>)
 800e0ca:	429e      	cmp	r6, r3
 800e0cc:	f340 80fc 	ble.w	800e2c8 <__ieee754_pow+0x3e0>
 800e0d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e0d4:	429e      	cmp	r6, r3
 800e0d6:	4b10      	ldr	r3, [pc, #64]	; (800e118 <__ieee754_pow+0x230>)
 800e0d8:	dd07      	ble.n	800e0ea <__ieee754_pow+0x202>
 800e0da:	429c      	cmp	r4, r3
 800e0dc:	dc0a      	bgt.n	800e0f4 <__ieee754_pow+0x20c>
 800e0de:	2f00      	cmp	r7, #0
 800e0e0:	da84      	bge.n	800dfec <__ieee754_pow+0x104>
 800e0e2:	a307      	add	r3, pc, #28	; (adr r3, 800e100 <__ieee754_pow+0x218>)
 800e0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e8:	e795      	b.n	800e016 <__ieee754_pow+0x12e>
 800e0ea:	429c      	cmp	r4, r3
 800e0ec:	dbf7      	blt.n	800e0de <__ieee754_pow+0x1f6>
 800e0ee:	4b09      	ldr	r3, [pc, #36]	; (800e114 <__ieee754_pow+0x22c>)
 800e0f0:	429c      	cmp	r4, r3
 800e0f2:	dd17      	ble.n	800e124 <__ieee754_pow+0x23c>
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	dcf4      	bgt.n	800e0e2 <__ieee754_pow+0x1fa>
 800e0f8:	e778      	b.n	800dfec <__ieee754_pow+0x104>
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w
 800e100:	8800759c 	.word	0x8800759c
 800e104:	7e37e43c 	.word	0x7e37e43c
 800e108:	7ff00000 	.word	0x7ff00000
 800e10c:	08067895 	.word	0x08067895
 800e110:	433fffff 	.word	0x433fffff
 800e114:	3ff00000 	.word	0x3ff00000
 800e118:	3fefffff 	.word	0x3fefffff
 800e11c:	3fe00000 	.word	0x3fe00000
 800e120:	41e00000 	.word	0x41e00000
 800e124:	4b64      	ldr	r3, [pc, #400]	; (800e2b8 <__ieee754_pow+0x3d0>)
 800e126:	2200      	movs	r2, #0
 800e128:	f7f2 f8ae 	bl	8000288 <__aeabi_dsub>
 800e12c:	a356      	add	r3, pc, #344	; (adr r3, 800e288 <__ieee754_pow+0x3a0>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	4604      	mov	r4, r0
 800e134:	460d      	mov	r5, r1
 800e136:	f7f2 fa5f 	bl	80005f8 <__aeabi_dmul>
 800e13a:	a355      	add	r3, pc, #340	; (adr r3, 800e290 <__ieee754_pow+0x3a8>)
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	4606      	mov	r6, r0
 800e142:	460f      	mov	r7, r1
 800e144:	4620      	mov	r0, r4
 800e146:	4629      	mov	r1, r5
 800e148:	f7f2 fa56 	bl	80005f8 <__aeabi_dmul>
 800e14c:	4b5b      	ldr	r3, [pc, #364]	; (800e2bc <__ieee754_pow+0x3d4>)
 800e14e:	4682      	mov	sl, r0
 800e150:	468b      	mov	fp, r1
 800e152:	2200      	movs	r2, #0
 800e154:	4620      	mov	r0, r4
 800e156:	4629      	mov	r1, r5
 800e158:	f7f2 fa4e 	bl	80005f8 <__aeabi_dmul>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	a14d      	add	r1, pc, #308	; (adr r1, 800e298 <__ieee754_pow+0x3b0>)
 800e162:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e166:	f7f2 f88f 	bl	8000288 <__aeabi_dsub>
 800e16a:	4622      	mov	r2, r4
 800e16c:	462b      	mov	r3, r5
 800e16e:	f7f2 fa43 	bl	80005f8 <__aeabi_dmul>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	2000      	movs	r0, #0
 800e178:	4951      	ldr	r1, [pc, #324]	; (800e2c0 <__ieee754_pow+0x3d8>)
 800e17a:	f7f2 f885 	bl	8000288 <__aeabi_dsub>
 800e17e:	4622      	mov	r2, r4
 800e180:	4680      	mov	r8, r0
 800e182:	4689      	mov	r9, r1
 800e184:	462b      	mov	r3, r5
 800e186:	4620      	mov	r0, r4
 800e188:	4629      	mov	r1, r5
 800e18a:	f7f2 fa35 	bl	80005f8 <__aeabi_dmul>
 800e18e:	4602      	mov	r2, r0
 800e190:	460b      	mov	r3, r1
 800e192:	4640      	mov	r0, r8
 800e194:	4649      	mov	r1, r9
 800e196:	f7f2 fa2f 	bl	80005f8 <__aeabi_dmul>
 800e19a:	a341      	add	r3, pc, #260	; (adr r3, 800e2a0 <__ieee754_pow+0x3b8>)
 800e19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a0:	f7f2 fa2a 	bl	80005f8 <__aeabi_dmul>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	4659      	mov	r1, fp
 800e1ac:	f7f2 f86c 	bl	8000288 <__aeabi_dsub>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	4680      	mov	r8, r0
 800e1b6:	4689      	mov	r9, r1
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	f7f2 f866 	bl	800028c <__adddf3>
 800e1c0:	2400      	movs	r4, #0
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	463b      	mov	r3, r7
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	f7f2 f85d 	bl	8000288 <__aeabi_dsub>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	4649      	mov	r1, r9
 800e1d6:	f7f2 f857 	bl	8000288 <__aeabi_dsub>
 800e1da:	9b00      	ldr	r3, [sp, #0]
 800e1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	4682      	mov	sl, r0
 800e1e4:	468b      	mov	fp, r1
 800e1e6:	f040 81f1 	bne.w	800e5cc <__ieee754_pow+0x6e4>
 800e1ea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e2a8 <__ieee754_pow+0x3c0>
 800e1ee:	eeb0 8a47 	vmov.f32	s16, s14
 800e1f2:	eef0 8a67 	vmov.f32	s17, s15
 800e1f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e1fa:	2600      	movs	r6, #0
 800e1fc:	4632      	mov	r2, r6
 800e1fe:	463b      	mov	r3, r7
 800e200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e204:	f7f2 f840 	bl	8000288 <__aeabi_dsub>
 800e208:	4622      	mov	r2, r4
 800e20a:	462b      	mov	r3, r5
 800e20c:	f7f2 f9f4 	bl	80005f8 <__aeabi_dmul>
 800e210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e214:	4680      	mov	r8, r0
 800e216:	4689      	mov	r9, r1
 800e218:	4650      	mov	r0, sl
 800e21a:	4659      	mov	r1, fp
 800e21c:	f7f2 f9ec 	bl	80005f8 <__aeabi_dmul>
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	4640      	mov	r0, r8
 800e226:	4649      	mov	r1, r9
 800e228:	f7f2 f830 	bl	800028c <__adddf3>
 800e22c:	4632      	mov	r2, r6
 800e22e:	463b      	mov	r3, r7
 800e230:	4680      	mov	r8, r0
 800e232:	4689      	mov	r9, r1
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 f9de 	bl	80005f8 <__aeabi_dmul>
 800e23c:	460b      	mov	r3, r1
 800e23e:	4604      	mov	r4, r0
 800e240:	460d      	mov	r5, r1
 800e242:	4602      	mov	r2, r0
 800e244:	4649      	mov	r1, r9
 800e246:	4640      	mov	r0, r8
 800e248:	f7f2 f820 	bl	800028c <__adddf3>
 800e24c:	4b1d      	ldr	r3, [pc, #116]	; (800e2c4 <__ieee754_pow+0x3dc>)
 800e24e:	4299      	cmp	r1, r3
 800e250:	ec45 4b19 	vmov	d9, r4, r5
 800e254:	4606      	mov	r6, r0
 800e256:	460f      	mov	r7, r1
 800e258:	468b      	mov	fp, r1
 800e25a:	f340 82fe 	ble.w	800e85a <__ieee754_pow+0x972>
 800e25e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e262:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e266:	4303      	orrs	r3, r0
 800e268:	f000 81f0 	beq.w	800e64c <__ieee754_pow+0x764>
 800e26c:	a310      	add	r3, pc, #64	; (adr r3, 800e2b0 <__ieee754_pow+0x3c8>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	ec51 0b18 	vmov	r0, r1, d8
 800e276:	f7f2 f9bf 	bl	80005f8 <__aeabi_dmul>
 800e27a:	a30d      	add	r3, pc, #52	; (adr r3, 800e2b0 <__ieee754_pow+0x3c8>)
 800e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e280:	e6cb      	b.n	800e01a <__ieee754_pow+0x132>
 800e282:	bf00      	nop
 800e284:	f3af 8000 	nop.w
 800e288:	60000000 	.word	0x60000000
 800e28c:	3ff71547 	.word	0x3ff71547
 800e290:	f85ddf44 	.word	0xf85ddf44
 800e294:	3e54ae0b 	.word	0x3e54ae0b
 800e298:	55555555 	.word	0x55555555
 800e29c:	3fd55555 	.word	0x3fd55555
 800e2a0:	652b82fe 	.word	0x652b82fe
 800e2a4:	3ff71547 	.word	0x3ff71547
 800e2a8:	00000000 	.word	0x00000000
 800e2ac:	bff00000 	.word	0xbff00000
 800e2b0:	8800759c 	.word	0x8800759c
 800e2b4:	7e37e43c 	.word	0x7e37e43c
 800e2b8:	3ff00000 	.word	0x3ff00000
 800e2bc:	3fd00000 	.word	0x3fd00000
 800e2c0:	3fe00000 	.word	0x3fe00000
 800e2c4:	408fffff 	.word	0x408fffff
 800e2c8:	4bd7      	ldr	r3, [pc, #860]	; (800e628 <__ieee754_pow+0x740>)
 800e2ca:	ea03 0309 	and.w	r3, r3, r9
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	b92b      	cbnz	r3, 800e2de <__ieee754_pow+0x3f6>
 800e2d2:	4bd6      	ldr	r3, [pc, #856]	; (800e62c <__ieee754_pow+0x744>)
 800e2d4:	f7f2 f990 	bl	80005f8 <__aeabi_dmul>
 800e2d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e2dc:	460c      	mov	r4, r1
 800e2de:	1523      	asrs	r3, r4, #20
 800e2e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e2e4:	4413      	add	r3, r2
 800e2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e8:	4bd1      	ldr	r3, [pc, #836]	; (800e630 <__ieee754_pow+0x748>)
 800e2ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e2ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e2f2:	429c      	cmp	r4, r3
 800e2f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e2f8:	dd08      	ble.n	800e30c <__ieee754_pow+0x424>
 800e2fa:	4bce      	ldr	r3, [pc, #824]	; (800e634 <__ieee754_pow+0x74c>)
 800e2fc:	429c      	cmp	r4, r3
 800e2fe:	f340 8163 	ble.w	800e5c8 <__ieee754_pow+0x6e0>
 800e302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e304:	3301      	adds	r3, #1
 800e306:	9309      	str	r3, [sp, #36]	; 0x24
 800e308:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e30c:	2400      	movs	r4, #0
 800e30e:	00e3      	lsls	r3, r4, #3
 800e310:	930b      	str	r3, [sp, #44]	; 0x2c
 800e312:	4bc9      	ldr	r3, [pc, #804]	; (800e638 <__ieee754_pow+0x750>)
 800e314:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e318:	ed93 7b00 	vldr	d7, [r3]
 800e31c:	4629      	mov	r1, r5
 800e31e:	ec53 2b17 	vmov	r2, r3, d7
 800e322:	eeb0 8a47 	vmov.f32	s16, s14
 800e326:	eef0 8a67 	vmov.f32	s17, s15
 800e32a:	4682      	mov	sl, r0
 800e32c:	f7f1 ffac 	bl	8000288 <__aeabi_dsub>
 800e330:	4652      	mov	r2, sl
 800e332:	4606      	mov	r6, r0
 800e334:	460f      	mov	r7, r1
 800e336:	462b      	mov	r3, r5
 800e338:	ec51 0b18 	vmov	r0, r1, d8
 800e33c:	f7f1 ffa6 	bl	800028c <__adddf3>
 800e340:	4602      	mov	r2, r0
 800e342:	460b      	mov	r3, r1
 800e344:	2000      	movs	r0, #0
 800e346:	49bd      	ldr	r1, [pc, #756]	; (800e63c <__ieee754_pow+0x754>)
 800e348:	f7f2 fa80 	bl	800084c <__aeabi_ddiv>
 800e34c:	ec41 0b19 	vmov	d9, r0, r1
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	4630      	mov	r0, r6
 800e356:	4639      	mov	r1, r7
 800e358:	f7f2 f94e 	bl	80005f8 <__aeabi_dmul>
 800e35c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e360:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e364:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e368:	2300      	movs	r3, #0
 800e36a:	9304      	str	r3, [sp, #16]
 800e36c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e370:	46ab      	mov	fp, r5
 800e372:	106d      	asrs	r5, r5, #1
 800e374:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e378:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e37c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e380:	2200      	movs	r2, #0
 800e382:	4640      	mov	r0, r8
 800e384:	4649      	mov	r1, r9
 800e386:	4614      	mov	r4, r2
 800e388:	461d      	mov	r5, r3
 800e38a:	f7f2 f935 	bl	80005f8 <__aeabi_dmul>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	4630      	mov	r0, r6
 800e394:	4639      	mov	r1, r7
 800e396:	f7f1 ff77 	bl	8000288 <__aeabi_dsub>
 800e39a:	ec53 2b18 	vmov	r2, r3, d8
 800e39e:	4606      	mov	r6, r0
 800e3a0:	460f      	mov	r7, r1
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f7f1 ff6f 	bl	8000288 <__aeabi_dsub>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	4650      	mov	r0, sl
 800e3b0:	4659      	mov	r1, fp
 800e3b2:	f7f1 ff69 	bl	8000288 <__aeabi_dsub>
 800e3b6:	4642      	mov	r2, r8
 800e3b8:	464b      	mov	r3, r9
 800e3ba:	f7f2 f91d 	bl	80005f8 <__aeabi_dmul>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	f7f1 ff5f 	bl	8000288 <__aeabi_dsub>
 800e3ca:	ec53 2b19 	vmov	r2, r3, d9
 800e3ce:	f7f2 f913 	bl	80005f8 <__aeabi_dmul>
 800e3d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3d6:	ec41 0b18 	vmov	d8, r0, r1
 800e3da:	4610      	mov	r0, r2
 800e3dc:	4619      	mov	r1, r3
 800e3de:	f7f2 f90b 	bl	80005f8 <__aeabi_dmul>
 800e3e2:	a37d      	add	r3, pc, #500	; (adr r3, 800e5d8 <__ieee754_pow+0x6f0>)
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	f7f2 f904 	bl	80005f8 <__aeabi_dmul>
 800e3f0:	a37b      	add	r3, pc, #492	; (adr r3, 800e5e0 <__ieee754_pow+0x6f8>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f1 ff49 	bl	800028c <__adddf3>
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	462b      	mov	r3, r5
 800e3fe:	f7f2 f8fb 	bl	80005f8 <__aeabi_dmul>
 800e402:	a379      	add	r3, pc, #484	; (adr r3, 800e5e8 <__ieee754_pow+0x700>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f1 ff40 	bl	800028c <__adddf3>
 800e40c:	4622      	mov	r2, r4
 800e40e:	462b      	mov	r3, r5
 800e410:	f7f2 f8f2 	bl	80005f8 <__aeabi_dmul>
 800e414:	a376      	add	r3, pc, #472	; (adr r3, 800e5f0 <__ieee754_pow+0x708>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ff37 	bl	800028c <__adddf3>
 800e41e:	4622      	mov	r2, r4
 800e420:	462b      	mov	r3, r5
 800e422:	f7f2 f8e9 	bl	80005f8 <__aeabi_dmul>
 800e426:	a374      	add	r3, pc, #464	; (adr r3, 800e5f8 <__ieee754_pow+0x710>)
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	f7f1 ff2e 	bl	800028c <__adddf3>
 800e430:	4622      	mov	r2, r4
 800e432:	462b      	mov	r3, r5
 800e434:	f7f2 f8e0 	bl	80005f8 <__aeabi_dmul>
 800e438:	a371      	add	r3, pc, #452	; (adr r3, 800e600 <__ieee754_pow+0x718>)
 800e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43e:	f7f1 ff25 	bl	800028c <__adddf3>
 800e442:	4622      	mov	r2, r4
 800e444:	4606      	mov	r6, r0
 800e446:	460f      	mov	r7, r1
 800e448:	462b      	mov	r3, r5
 800e44a:	4620      	mov	r0, r4
 800e44c:	4629      	mov	r1, r5
 800e44e:	f7f2 f8d3 	bl	80005f8 <__aeabi_dmul>
 800e452:	4602      	mov	r2, r0
 800e454:	460b      	mov	r3, r1
 800e456:	4630      	mov	r0, r6
 800e458:	4639      	mov	r1, r7
 800e45a:	f7f2 f8cd 	bl	80005f8 <__aeabi_dmul>
 800e45e:	4642      	mov	r2, r8
 800e460:	4604      	mov	r4, r0
 800e462:	460d      	mov	r5, r1
 800e464:	464b      	mov	r3, r9
 800e466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e46a:	f7f1 ff0f 	bl	800028c <__adddf3>
 800e46e:	ec53 2b18 	vmov	r2, r3, d8
 800e472:	f7f2 f8c1 	bl	80005f8 <__aeabi_dmul>
 800e476:	4622      	mov	r2, r4
 800e478:	462b      	mov	r3, r5
 800e47a:	f7f1 ff07 	bl	800028c <__adddf3>
 800e47e:	4642      	mov	r2, r8
 800e480:	4682      	mov	sl, r0
 800e482:	468b      	mov	fp, r1
 800e484:	464b      	mov	r3, r9
 800e486:	4640      	mov	r0, r8
 800e488:	4649      	mov	r1, r9
 800e48a:	f7f2 f8b5 	bl	80005f8 <__aeabi_dmul>
 800e48e:	4b6c      	ldr	r3, [pc, #432]	; (800e640 <__ieee754_pow+0x758>)
 800e490:	2200      	movs	r2, #0
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	f7f1 fef9 	bl	800028c <__adddf3>
 800e49a:	4652      	mov	r2, sl
 800e49c:	465b      	mov	r3, fp
 800e49e:	f7f1 fef5 	bl	800028c <__adddf3>
 800e4a2:	9c04      	ldr	r4, [sp, #16]
 800e4a4:	460d      	mov	r5, r1
 800e4a6:	4622      	mov	r2, r4
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	f7f2 f8a3 	bl	80005f8 <__aeabi_dmul>
 800e4b2:	4b63      	ldr	r3, [pc, #396]	; (800e640 <__ieee754_pow+0x758>)
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	4689      	mov	r9, r1
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	4629      	mov	r1, r5
 800e4be:	f7f1 fee3 	bl	8000288 <__aeabi_dsub>
 800e4c2:	4632      	mov	r2, r6
 800e4c4:	463b      	mov	r3, r7
 800e4c6:	f7f1 fedf 	bl	8000288 <__aeabi_dsub>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	4659      	mov	r1, fp
 800e4d2:	f7f1 fed9 	bl	8000288 <__aeabi_dsub>
 800e4d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4da:	f7f2 f88d 	bl	80005f8 <__aeabi_dmul>
 800e4de:	4622      	mov	r2, r4
 800e4e0:	4606      	mov	r6, r0
 800e4e2:	460f      	mov	r7, r1
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	ec51 0b18 	vmov	r0, r1, d8
 800e4ea:	f7f2 f885 	bl	80005f8 <__aeabi_dmul>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	f7f1 fec9 	bl	800028c <__adddf3>
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	4640      	mov	r0, r8
 800e504:	4649      	mov	r1, r9
 800e506:	f7f1 fec1 	bl	800028c <__adddf3>
 800e50a:	9c04      	ldr	r4, [sp, #16]
 800e50c:	a33e      	add	r3, pc, #248	; (adr r3, 800e608 <__ieee754_pow+0x720>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	4620      	mov	r0, r4
 800e514:	460d      	mov	r5, r1
 800e516:	f7f2 f86f 	bl	80005f8 <__aeabi_dmul>
 800e51a:	4642      	mov	r2, r8
 800e51c:	ec41 0b18 	vmov	d8, r0, r1
 800e520:	464b      	mov	r3, r9
 800e522:	4620      	mov	r0, r4
 800e524:	4629      	mov	r1, r5
 800e526:	f7f1 feaf 	bl	8000288 <__aeabi_dsub>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	4630      	mov	r0, r6
 800e530:	4639      	mov	r1, r7
 800e532:	f7f1 fea9 	bl	8000288 <__aeabi_dsub>
 800e536:	a336      	add	r3, pc, #216	; (adr r3, 800e610 <__ieee754_pow+0x728>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	f7f2 f85c 	bl	80005f8 <__aeabi_dmul>
 800e540:	a335      	add	r3, pc, #212	; (adr r3, 800e618 <__ieee754_pow+0x730>)
 800e542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e546:	4606      	mov	r6, r0
 800e548:	460f      	mov	r7, r1
 800e54a:	4620      	mov	r0, r4
 800e54c:	4629      	mov	r1, r5
 800e54e:	f7f2 f853 	bl	80005f8 <__aeabi_dmul>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	4630      	mov	r0, r6
 800e558:	4639      	mov	r1, r7
 800e55a:	f7f1 fe97 	bl	800028c <__adddf3>
 800e55e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e560:	4b38      	ldr	r3, [pc, #224]	; (800e644 <__ieee754_pow+0x75c>)
 800e562:	4413      	add	r3, r2
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f1 fe90 	bl	800028c <__adddf3>
 800e56c:	4682      	mov	sl, r0
 800e56e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e570:	468b      	mov	fp, r1
 800e572:	f7f1 ffd7 	bl	8000524 <__aeabi_i2d>
 800e576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e578:	4b33      	ldr	r3, [pc, #204]	; (800e648 <__ieee754_pow+0x760>)
 800e57a:	4413      	add	r3, r2
 800e57c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e580:	4606      	mov	r6, r0
 800e582:	460f      	mov	r7, r1
 800e584:	4652      	mov	r2, sl
 800e586:	465b      	mov	r3, fp
 800e588:	ec51 0b18 	vmov	r0, r1, d8
 800e58c:	f7f1 fe7e 	bl	800028c <__adddf3>
 800e590:	4642      	mov	r2, r8
 800e592:	464b      	mov	r3, r9
 800e594:	f7f1 fe7a 	bl	800028c <__adddf3>
 800e598:	4632      	mov	r2, r6
 800e59a:	463b      	mov	r3, r7
 800e59c:	f7f1 fe76 	bl	800028c <__adddf3>
 800e5a0:	9c04      	ldr	r4, [sp, #16]
 800e5a2:	4632      	mov	r2, r6
 800e5a4:	463b      	mov	r3, r7
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	460d      	mov	r5, r1
 800e5aa:	f7f1 fe6d 	bl	8000288 <__aeabi_dsub>
 800e5ae:	4642      	mov	r2, r8
 800e5b0:	464b      	mov	r3, r9
 800e5b2:	f7f1 fe69 	bl	8000288 <__aeabi_dsub>
 800e5b6:	ec53 2b18 	vmov	r2, r3, d8
 800e5ba:	f7f1 fe65 	bl	8000288 <__aeabi_dsub>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4650      	mov	r0, sl
 800e5c4:	4659      	mov	r1, fp
 800e5c6:	e606      	b.n	800e1d6 <__ieee754_pow+0x2ee>
 800e5c8:	2401      	movs	r4, #1
 800e5ca:	e6a0      	b.n	800e30e <__ieee754_pow+0x426>
 800e5cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e620 <__ieee754_pow+0x738>
 800e5d0:	e60d      	b.n	800e1ee <__ieee754_pow+0x306>
 800e5d2:	bf00      	nop
 800e5d4:	f3af 8000 	nop.w
 800e5d8:	4a454eef 	.word	0x4a454eef
 800e5dc:	3fca7e28 	.word	0x3fca7e28
 800e5e0:	93c9db65 	.word	0x93c9db65
 800e5e4:	3fcd864a 	.word	0x3fcd864a
 800e5e8:	a91d4101 	.word	0xa91d4101
 800e5ec:	3fd17460 	.word	0x3fd17460
 800e5f0:	518f264d 	.word	0x518f264d
 800e5f4:	3fd55555 	.word	0x3fd55555
 800e5f8:	db6fabff 	.word	0xdb6fabff
 800e5fc:	3fdb6db6 	.word	0x3fdb6db6
 800e600:	33333303 	.word	0x33333303
 800e604:	3fe33333 	.word	0x3fe33333
 800e608:	e0000000 	.word	0xe0000000
 800e60c:	3feec709 	.word	0x3feec709
 800e610:	dc3a03fd 	.word	0xdc3a03fd
 800e614:	3feec709 	.word	0x3feec709
 800e618:	145b01f5 	.word	0x145b01f5
 800e61c:	be3e2fe0 	.word	0xbe3e2fe0
 800e620:	00000000 	.word	0x00000000
 800e624:	3ff00000 	.word	0x3ff00000
 800e628:	7ff00000 	.word	0x7ff00000
 800e62c:	43400000 	.word	0x43400000
 800e630:	0003988e 	.word	0x0003988e
 800e634:	000bb679 	.word	0x000bb679
 800e638:	08067660 	.word	0x08067660
 800e63c:	3ff00000 	.word	0x3ff00000
 800e640:	40080000 	.word	0x40080000
 800e644:	08067680 	.word	0x08067680
 800e648:	08067670 	.word	0x08067670
 800e64c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e924 <__ieee754_pow+0xa3c>)
 800e64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e652:	4640      	mov	r0, r8
 800e654:	4649      	mov	r1, r9
 800e656:	f7f1 fe19 	bl	800028c <__adddf3>
 800e65a:	4622      	mov	r2, r4
 800e65c:	ec41 0b1a 	vmov	d10, r0, r1
 800e660:	462b      	mov	r3, r5
 800e662:	4630      	mov	r0, r6
 800e664:	4639      	mov	r1, r7
 800e666:	f7f1 fe0f 	bl	8000288 <__aeabi_dsub>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	ec51 0b1a 	vmov	r0, r1, d10
 800e672:	f7f2 fa51 	bl	8000b18 <__aeabi_dcmpgt>
 800e676:	2800      	cmp	r0, #0
 800e678:	f47f adf8 	bne.w	800e26c <__ieee754_pow+0x384>
 800e67c:	4aa4      	ldr	r2, [pc, #656]	; (800e910 <__ieee754_pow+0xa28>)
 800e67e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e682:	4293      	cmp	r3, r2
 800e684:	f340 810b 	ble.w	800e89e <__ieee754_pow+0x9b6>
 800e688:	151b      	asrs	r3, r3, #20
 800e68a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e68e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e692:	fa4a f303 	asr.w	r3, sl, r3
 800e696:	445b      	add	r3, fp
 800e698:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e69c:	4e9d      	ldr	r6, [pc, #628]	; (800e914 <__ieee754_pow+0xa2c>)
 800e69e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e6a2:	4116      	asrs	r6, r2
 800e6a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	ea23 0106 	bic.w	r1, r3, r6
 800e6ae:	f1c2 0214 	rsb	r2, r2, #20
 800e6b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e6b6:	fa4a fa02 	asr.w	sl, sl, r2
 800e6ba:	f1bb 0f00 	cmp.w	fp, #0
 800e6be:	4602      	mov	r2, r0
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	bfb8      	it	lt
 800e6c8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e6cc:	f7f1 fddc 	bl	8000288 <__aeabi_dsub>
 800e6d0:	ec41 0b19 	vmov	d9, r0, r1
 800e6d4:	4642      	mov	r2, r8
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	ec51 0b19 	vmov	r0, r1, d9
 800e6dc:	f7f1 fdd6 	bl	800028c <__adddf3>
 800e6e0:	2400      	movs	r4, #0
 800e6e2:	a379      	add	r3, pc, #484	; (adr r3, 800e8c8 <__ieee754_pow+0x9e0>)
 800e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	f7f1 ff84 	bl	80005f8 <__aeabi_dmul>
 800e6f0:	ec53 2b19 	vmov	r2, r3, d9
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	460f      	mov	r7, r1
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	f7f1 fdc4 	bl	8000288 <__aeabi_dsub>
 800e700:	4602      	mov	r2, r0
 800e702:	460b      	mov	r3, r1
 800e704:	4640      	mov	r0, r8
 800e706:	4649      	mov	r1, r9
 800e708:	f7f1 fdbe 	bl	8000288 <__aeabi_dsub>
 800e70c:	a370      	add	r3, pc, #448	; (adr r3, 800e8d0 <__ieee754_pow+0x9e8>)
 800e70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e712:	f7f1 ff71 	bl	80005f8 <__aeabi_dmul>
 800e716:	a370      	add	r3, pc, #448	; (adr r3, 800e8d8 <__ieee754_pow+0x9f0>)
 800e718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71c:	4680      	mov	r8, r0
 800e71e:	4689      	mov	r9, r1
 800e720:	4620      	mov	r0, r4
 800e722:	4629      	mov	r1, r5
 800e724:	f7f1 ff68 	bl	80005f8 <__aeabi_dmul>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4640      	mov	r0, r8
 800e72e:	4649      	mov	r1, r9
 800e730:	f7f1 fdac 	bl	800028c <__adddf3>
 800e734:	4604      	mov	r4, r0
 800e736:	460d      	mov	r5, r1
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4630      	mov	r0, r6
 800e73e:	4639      	mov	r1, r7
 800e740:	f7f1 fda4 	bl	800028c <__adddf3>
 800e744:	4632      	mov	r2, r6
 800e746:	463b      	mov	r3, r7
 800e748:	4680      	mov	r8, r0
 800e74a:	4689      	mov	r9, r1
 800e74c:	f7f1 fd9c 	bl	8000288 <__aeabi_dsub>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4620      	mov	r0, r4
 800e756:	4629      	mov	r1, r5
 800e758:	f7f1 fd96 	bl	8000288 <__aeabi_dsub>
 800e75c:	4642      	mov	r2, r8
 800e75e:	4606      	mov	r6, r0
 800e760:	460f      	mov	r7, r1
 800e762:	464b      	mov	r3, r9
 800e764:	4640      	mov	r0, r8
 800e766:	4649      	mov	r1, r9
 800e768:	f7f1 ff46 	bl	80005f8 <__aeabi_dmul>
 800e76c:	a35c      	add	r3, pc, #368	; (adr r3, 800e8e0 <__ieee754_pow+0x9f8>)
 800e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e772:	4604      	mov	r4, r0
 800e774:	460d      	mov	r5, r1
 800e776:	f7f1 ff3f 	bl	80005f8 <__aeabi_dmul>
 800e77a:	a35b      	add	r3, pc, #364	; (adr r3, 800e8e8 <__ieee754_pow+0xa00>)
 800e77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e780:	f7f1 fd82 	bl	8000288 <__aeabi_dsub>
 800e784:	4622      	mov	r2, r4
 800e786:	462b      	mov	r3, r5
 800e788:	f7f1 ff36 	bl	80005f8 <__aeabi_dmul>
 800e78c:	a358      	add	r3, pc, #352	; (adr r3, 800e8f0 <__ieee754_pow+0xa08>)
 800e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e792:	f7f1 fd7b 	bl	800028c <__adddf3>
 800e796:	4622      	mov	r2, r4
 800e798:	462b      	mov	r3, r5
 800e79a:	f7f1 ff2d 	bl	80005f8 <__aeabi_dmul>
 800e79e:	a356      	add	r3, pc, #344	; (adr r3, 800e8f8 <__ieee754_pow+0xa10>)
 800e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a4:	f7f1 fd70 	bl	8000288 <__aeabi_dsub>
 800e7a8:	4622      	mov	r2, r4
 800e7aa:	462b      	mov	r3, r5
 800e7ac:	f7f1 ff24 	bl	80005f8 <__aeabi_dmul>
 800e7b0:	a353      	add	r3, pc, #332	; (adr r3, 800e900 <__ieee754_pow+0xa18>)
 800e7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b6:	f7f1 fd69 	bl	800028c <__adddf3>
 800e7ba:	4622      	mov	r2, r4
 800e7bc:	462b      	mov	r3, r5
 800e7be:	f7f1 ff1b 	bl	80005f8 <__aeabi_dmul>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	4640      	mov	r0, r8
 800e7c8:	4649      	mov	r1, r9
 800e7ca:	f7f1 fd5d 	bl	8000288 <__aeabi_dsub>
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	460d      	mov	r5, r1
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4640      	mov	r0, r8
 800e7d8:	4649      	mov	r1, r9
 800e7da:	f7f1 ff0d 	bl	80005f8 <__aeabi_dmul>
 800e7de:	2200      	movs	r2, #0
 800e7e0:	ec41 0b19 	vmov	d9, r0, r1
 800e7e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	4629      	mov	r1, r5
 800e7ec:	f7f1 fd4c 	bl	8000288 <__aeabi_dsub>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	ec51 0b19 	vmov	r0, r1, d9
 800e7f8:	f7f2 f828 	bl	800084c <__aeabi_ddiv>
 800e7fc:	4632      	mov	r2, r6
 800e7fe:	4604      	mov	r4, r0
 800e800:	460d      	mov	r5, r1
 800e802:	463b      	mov	r3, r7
 800e804:	4640      	mov	r0, r8
 800e806:	4649      	mov	r1, r9
 800e808:	f7f1 fef6 	bl	80005f8 <__aeabi_dmul>
 800e80c:	4632      	mov	r2, r6
 800e80e:	463b      	mov	r3, r7
 800e810:	f7f1 fd3c 	bl	800028c <__adddf3>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4620      	mov	r0, r4
 800e81a:	4629      	mov	r1, r5
 800e81c:	f7f1 fd34 	bl	8000288 <__aeabi_dsub>
 800e820:	4642      	mov	r2, r8
 800e822:	464b      	mov	r3, r9
 800e824:	f7f1 fd30 	bl	8000288 <__aeabi_dsub>
 800e828:	460b      	mov	r3, r1
 800e82a:	4602      	mov	r2, r0
 800e82c:	493a      	ldr	r1, [pc, #232]	; (800e918 <__ieee754_pow+0xa30>)
 800e82e:	2000      	movs	r0, #0
 800e830:	f7f1 fd2a 	bl	8000288 <__aeabi_dsub>
 800e834:	e9cd 0100 	strd	r0, r1, [sp]
 800e838:	9b01      	ldr	r3, [sp, #4]
 800e83a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e83e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e842:	da2f      	bge.n	800e8a4 <__ieee754_pow+0x9bc>
 800e844:	4650      	mov	r0, sl
 800e846:	ed9d 0b00 	vldr	d0, [sp]
 800e84a:	f001 fae9 	bl	800fe20 <scalbn>
 800e84e:	ec51 0b10 	vmov	r0, r1, d0
 800e852:	ec53 2b18 	vmov	r2, r3, d8
 800e856:	f7ff bbe0 	b.w	800e01a <__ieee754_pow+0x132>
 800e85a:	4b30      	ldr	r3, [pc, #192]	; (800e91c <__ieee754_pow+0xa34>)
 800e85c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e860:	429e      	cmp	r6, r3
 800e862:	f77f af0b 	ble.w	800e67c <__ieee754_pow+0x794>
 800e866:	4b2e      	ldr	r3, [pc, #184]	; (800e920 <__ieee754_pow+0xa38>)
 800e868:	440b      	add	r3, r1
 800e86a:	4303      	orrs	r3, r0
 800e86c:	d00b      	beq.n	800e886 <__ieee754_pow+0x99e>
 800e86e:	a326      	add	r3, pc, #152	; (adr r3, 800e908 <__ieee754_pow+0xa20>)
 800e870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e874:	ec51 0b18 	vmov	r0, r1, d8
 800e878:	f7f1 febe 	bl	80005f8 <__aeabi_dmul>
 800e87c:	a322      	add	r3, pc, #136	; (adr r3, 800e908 <__ieee754_pow+0xa20>)
 800e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e882:	f7ff bbca 	b.w	800e01a <__ieee754_pow+0x132>
 800e886:	4622      	mov	r2, r4
 800e888:	462b      	mov	r3, r5
 800e88a:	f7f1 fcfd 	bl	8000288 <__aeabi_dsub>
 800e88e:	4642      	mov	r2, r8
 800e890:	464b      	mov	r3, r9
 800e892:	f7f2 f937 	bl	8000b04 <__aeabi_dcmpge>
 800e896:	2800      	cmp	r0, #0
 800e898:	f43f aef0 	beq.w	800e67c <__ieee754_pow+0x794>
 800e89c:	e7e7      	b.n	800e86e <__ieee754_pow+0x986>
 800e89e:	f04f 0a00 	mov.w	sl, #0
 800e8a2:	e717      	b.n	800e6d4 <__ieee754_pow+0x7ec>
 800e8a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	e7d2      	b.n	800e852 <__ieee754_pow+0x96a>
 800e8ac:	491a      	ldr	r1, [pc, #104]	; (800e918 <__ieee754_pow+0xa30>)
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	f7ff bb9e 	b.w	800dff0 <__ieee754_pow+0x108>
 800e8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8b8:	f7ff bb9a 	b.w	800dff0 <__ieee754_pow+0x108>
 800e8bc:	9000      	str	r0, [sp, #0]
 800e8be:	f7ff bb76 	b.w	800dfae <__ieee754_pow+0xc6>
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	f7ff bb60 	b.w	800df88 <__ieee754_pow+0xa0>
 800e8c8:	00000000 	.word	0x00000000
 800e8cc:	3fe62e43 	.word	0x3fe62e43
 800e8d0:	fefa39ef 	.word	0xfefa39ef
 800e8d4:	3fe62e42 	.word	0x3fe62e42
 800e8d8:	0ca86c39 	.word	0x0ca86c39
 800e8dc:	be205c61 	.word	0xbe205c61
 800e8e0:	72bea4d0 	.word	0x72bea4d0
 800e8e4:	3e663769 	.word	0x3e663769
 800e8e8:	c5d26bf1 	.word	0xc5d26bf1
 800e8ec:	3ebbbd41 	.word	0x3ebbbd41
 800e8f0:	af25de2c 	.word	0xaf25de2c
 800e8f4:	3f11566a 	.word	0x3f11566a
 800e8f8:	16bebd93 	.word	0x16bebd93
 800e8fc:	3f66c16c 	.word	0x3f66c16c
 800e900:	5555553e 	.word	0x5555553e
 800e904:	3fc55555 	.word	0x3fc55555
 800e908:	c2f8f359 	.word	0xc2f8f359
 800e90c:	01a56e1f 	.word	0x01a56e1f
 800e910:	3fe00000 	.word	0x3fe00000
 800e914:	000fffff 	.word	0x000fffff
 800e918:	3ff00000 	.word	0x3ff00000
 800e91c:	4090cbff 	.word	0x4090cbff
 800e920:	3f6f3400 	.word	0x3f6f3400
 800e924:	652b82fe 	.word	0x652b82fe
 800e928:	3c971547 	.word	0x3c971547
 800e92c:	00000000 	.word	0x00000000

0800e930 <__ieee754_rem_pio2>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	ed2d 8b02 	vpush	{d8}
 800e938:	ec55 4b10 	vmov	r4, r5, d0
 800e93c:	4bca      	ldr	r3, [pc, #808]	; (800ec68 <__ieee754_rem_pio2+0x338>)
 800e93e:	b08b      	sub	sp, #44	; 0x2c
 800e940:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e944:	4598      	cmp	r8, r3
 800e946:	4682      	mov	sl, r0
 800e948:	9502      	str	r5, [sp, #8]
 800e94a:	dc08      	bgt.n	800e95e <__ieee754_rem_pio2+0x2e>
 800e94c:	2200      	movs	r2, #0
 800e94e:	2300      	movs	r3, #0
 800e950:	ed80 0b00 	vstr	d0, [r0]
 800e954:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e958:	f04f 0b00 	mov.w	fp, #0
 800e95c:	e028      	b.n	800e9b0 <__ieee754_rem_pio2+0x80>
 800e95e:	4bc3      	ldr	r3, [pc, #780]	; (800ec6c <__ieee754_rem_pio2+0x33c>)
 800e960:	4598      	cmp	r8, r3
 800e962:	dc78      	bgt.n	800ea56 <__ieee754_rem_pio2+0x126>
 800e964:	9b02      	ldr	r3, [sp, #8]
 800e966:	4ec2      	ldr	r6, [pc, #776]	; (800ec70 <__ieee754_rem_pio2+0x340>)
 800e968:	2b00      	cmp	r3, #0
 800e96a:	ee10 0a10 	vmov	r0, s0
 800e96e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ec30 <__ieee754_rem_pio2+0x300>)
 800e970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e974:	4629      	mov	r1, r5
 800e976:	dd39      	ble.n	800e9ec <__ieee754_rem_pio2+0xbc>
 800e978:	f7f1 fc86 	bl	8000288 <__aeabi_dsub>
 800e97c:	45b0      	cmp	r8, r6
 800e97e:	4604      	mov	r4, r0
 800e980:	460d      	mov	r5, r1
 800e982:	d01b      	beq.n	800e9bc <__ieee754_rem_pio2+0x8c>
 800e984:	a3ac      	add	r3, pc, #688	; (adr r3, 800ec38 <__ieee754_rem_pio2+0x308>)
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f7f1 fc7d 	bl	8000288 <__aeabi_dsub>
 800e98e:	4602      	mov	r2, r0
 800e990:	460b      	mov	r3, r1
 800e992:	e9ca 2300 	strd	r2, r3, [sl]
 800e996:	4620      	mov	r0, r4
 800e998:	4629      	mov	r1, r5
 800e99a:	f7f1 fc75 	bl	8000288 <__aeabi_dsub>
 800e99e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ec38 <__ieee754_rem_pio2+0x308>)
 800e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a4:	f7f1 fc70 	bl	8000288 <__aeabi_dsub>
 800e9a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9ac:	f04f 0b01 	mov.w	fp, #1
 800e9b0:	4658      	mov	r0, fp
 800e9b2:	b00b      	add	sp, #44	; 0x2c
 800e9b4:	ecbd 8b02 	vpop	{d8}
 800e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9bc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ec40 <__ieee754_rem_pio2+0x310>)
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	f7f1 fc61 	bl	8000288 <__aeabi_dsub>
 800e9c6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ec48 <__ieee754_rem_pio2+0x318>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	460d      	mov	r5, r1
 800e9d0:	f7f1 fc5a 	bl	8000288 <__aeabi_dsub>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	e9ca 2300 	strd	r2, r3, [sl]
 800e9dc:	4620      	mov	r0, r4
 800e9de:	4629      	mov	r1, r5
 800e9e0:	f7f1 fc52 	bl	8000288 <__aeabi_dsub>
 800e9e4:	a398      	add	r3, pc, #608	; (adr r3, 800ec48 <__ieee754_rem_pio2+0x318>)
 800e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ea:	e7db      	b.n	800e9a4 <__ieee754_rem_pio2+0x74>
 800e9ec:	f7f1 fc4e 	bl	800028c <__adddf3>
 800e9f0:	45b0      	cmp	r8, r6
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	460d      	mov	r5, r1
 800e9f6:	d016      	beq.n	800ea26 <__ieee754_rem_pio2+0xf6>
 800e9f8:	a38f      	add	r3, pc, #572	; (adr r3, 800ec38 <__ieee754_rem_pio2+0x308>)
 800e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fe:	f7f1 fc45 	bl	800028c <__adddf3>
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	e9ca 2300 	strd	r2, r3, [sl]
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	f7f1 fc3b 	bl	8000288 <__aeabi_dsub>
 800ea12:	a389      	add	r3, pc, #548	; (adr r3, 800ec38 <__ieee754_rem_pio2+0x308>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	f7f1 fc38 	bl	800028c <__adddf3>
 800ea1c:	f04f 3bff 	mov.w	fp, #4294967295
 800ea20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea24:	e7c4      	b.n	800e9b0 <__ieee754_rem_pio2+0x80>
 800ea26:	a386      	add	r3, pc, #536	; (adr r3, 800ec40 <__ieee754_rem_pio2+0x310>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	f7f1 fc2e 	bl	800028c <__adddf3>
 800ea30:	a385      	add	r3, pc, #532	; (adr r3, 800ec48 <__ieee754_rem_pio2+0x318>)
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	4604      	mov	r4, r0
 800ea38:	460d      	mov	r5, r1
 800ea3a:	f7f1 fc27 	bl	800028c <__adddf3>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	e9ca 2300 	strd	r2, r3, [sl]
 800ea46:	4620      	mov	r0, r4
 800ea48:	4629      	mov	r1, r5
 800ea4a:	f7f1 fc1d 	bl	8000288 <__aeabi_dsub>
 800ea4e:	a37e      	add	r3, pc, #504	; (adr r3, 800ec48 <__ieee754_rem_pio2+0x318>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	e7e0      	b.n	800ea18 <__ieee754_rem_pio2+0xe8>
 800ea56:	4b87      	ldr	r3, [pc, #540]	; (800ec74 <__ieee754_rem_pio2+0x344>)
 800ea58:	4598      	cmp	r8, r3
 800ea5a:	f300 80d9 	bgt.w	800ec10 <__ieee754_rem_pio2+0x2e0>
 800ea5e:	f001 f8b5 	bl	800fbcc <fabs>
 800ea62:	ec55 4b10 	vmov	r4, r5, d0
 800ea66:	ee10 0a10 	vmov	r0, s0
 800ea6a:	a379      	add	r3, pc, #484	; (adr r3, 800ec50 <__ieee754_rem_pio2+0x320>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	4629      	mov	r1, r5
 800ea72:	f7f1 fdc1 	bl	80005f8 <__aeabi_dmul>
 800ea76:	4b80      	ldr	r3, [pc, #512]	; (800ec78 <__ieee754_rem_pio2+0x348>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f7f1 fc07 	bl	800028c <__adddf3>
 800ea7e:	f7f2 f86b 	bl	8000b58 <__aeabi_d2iz>
 800ea82:	4683      	mov	fp, r0
 800ea84:	f7f1 fd4e 	bl	8000524 <__aeabi_i2d>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	ec43 2b18 	vmov	d8, r2, r3
 800ea90:	a367      	add	r3, pc, #412	; (adr r3, 800ec30 <__ieee754_rem_pio2+0x300>)
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	f7f1 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	f7f1 fbf1 	bl	8000288 <__aeabi_dsub>
 800eaa6:	a364      	add	r3, pc, #400	; (adr r3, 800ec38 <__ieee754_rem_pio2+0x308>)
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	4606      	mov	r6, r0
 800eaae:	460f      	mov	r7, r1
 800eab0:	ec51 0b18 	vmov	r0, r1, d8
 800eab4:	f7f1 fda0 	bl	80005f8 <__aeabi_dmul>
 800eab8:	f1bb 0f1f 	cmp.w	fp, #31
 800eabc:	4604      	mov	r4, r0
 800eabe:	460d      	mov	r5, r1
 800eac0:	dc0d      	bgt.n	800eade <__ieee754_rem_pio2+0x1ae>
 800eac2:	4b6e      	ldr	r3, [pc, #440]	; (800ec7c <__ieee754_rem_pio2+0x34c>)
 800eac4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800eac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eacc:	4543      	cmp	r3, r8
 800eace:	d006      	beq.n	800eade <__ieee754_rem_pio2+0x1ae>
 800ead0:	4622      	mov	r2, r4
 800ead2:	462b      	mov	r3, r5
 800ead4:	4630      	mov	r0, r6
 800ead6:	4639      	mov	r1, r7
 800ead8:	f7f1 fbd6 	bl	8000288 <__aeabi_dsub>
 800eadc:	e00f      	b.n	800eafe <__ieee754_rem_pio2+0x1ce>
 800eade:	462b      	mov	r3, r5
 800eae0:	4622      	mov	r2, r4
 800eae2:	4630      	mov	r0, r6
 800eae4:	4639      	mov	r1, r7
 800eae6:	f7f1 fbcf 	bl	8000288 <__aeabi_dsub>
 800eaea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eaee:	9303      	str	r3, [sp, #12]
 800eaf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eaf4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800eaf8:	f1b8 0f10 	cmp.w	r8, #16
 800eafc:	dc02      	bgt.n	800eb04 <__ieee754_rem_pio2+0x1d4>
 800eafe:	e9ca 0100 	strd	r0, r1, [sl]
 800eb02:	e039      	b.n	800eb78 <__ieee754_rem_pio2+0x248>
 800eb04:	a34e      	add	r3, pc, #312	; (adr r3, 800ec40 <__ieee754_rem_pio2+0x310>)
 800eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0a:	ec51 0b18 	vmov	r0, r1, d8
 800eb0e:	f7f1 fd73 	bl	80005f8 <__aeabi_dmul>
 800eb12:	4604      	mov	r4, r0
 800eb14:	460d      	mov	r5, r1
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	f7f1 fbb3 	bl	8000288 <__aeabi_dsub>
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	4680      	mov	r8, r0
 800eb28:	4689      	mov	r9, r1
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	4639      	mov	r1, r7
 800eb2e:	f7f1 fbab 	bl	8000288 <__aeabi_dsub>
 800eb32:	4622      	mov	r2, r4
 800eb34:	462b      	mov	r3, r5
 800eb36:	f7f1 fba7 	bl	8000288 <__aeabi_dsub>
 800eb3a:	a343      	add	r3, pc, #268	; (adr r3, 800ec48 <__ieee754_rem_pio2+0x318>)
 800eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb40:	4604      	mov	r4, r0
 800eb42:	460d      	mov	r5, r1
 800eb44:	ec51 0b18 	vmov	r0, r1, d8
 800eb48:	f7f1 fd56 	bl	80005f8 <__aeabi_dmul>
 800eb4c:	4622      	mov	r2, r4
 800eb4e:	462b      	mov	r3, r5
 800eb50:	f7f1 fb9a 	bl	8000288 <__aeabi_dsub>
 800eb54:	4602      	mov	r2, r0
 800eb56:	460b      	mov	r3, r1
 800eb58:	4604      	mov	r4, r0
 800eb5a:	460d      	mov	r5, r1
 800eb5c:	4640      	mov	r0, r8
 800eb5e:	4649      	mov	r1, r9
 800eb60:	f7f1 fb92 	bl	8000288 <__aeabi_dsub>
 800eb64:	9a03      	ldr	r2, [sp, #12]
 800eb66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	2b31      	cmp	r3, #49	; 0x31
 800eb6e:	dc24      	bgt.n	800ebba <__ieee754_rem_pio2+0x28a>
 800eb70:	e9ca 0100 	strd	r0, r1, [sl]
 800eb74:	4646      	mov	r6, r8
 800eb76:	464f      	mov	r7, r9
 800eb78:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	4642      	mov	r2, r8
 800eb80:	464b      	mov	r3, r9
 800eb82:	4639      	mov	r1, r7
 800eb84:	f7f1 fb80 	bl	8000288 <__aeabi_dsub>
 800eb88:	462b      	mov	r3, r5
 800eb8a:	4622      	mov	r2, r4
 800eb8c:	f7f1 fb7c 	bl	8000288 <__aeabi_dsub>
 800eb90:	9b02      	ldr	r3, [sp, #8]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb98:	f6bf af0a 	bge.w	800e9b0 <__ieee754_rem_pio2+0x80>
 800eb9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eba0:	f8ca 3004 	str.w	r3, [sl, #4]
 800eba4:	f8ca 8000 	str.w	r8, [sl]
 800eba8:	f8ca 0008 	str.w	r0, [sl, #8]
 800ebac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebb0:	f8ca 300c 	str.w	r3, [sl, #12]
 800ebb4:	f1cb 0b00 	rsb	fp, fp, #0
 800ebb8:	e6fa      	b.n	800e9b0 <__ieee754_rem_pio2+0x80>
 800ebba:	a327      	add	r3, pc, #156	; (adr r3, 800ec58 <__ieee754_rem_pio2+0x328>)
 800ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc0:	ec51 0b18 	vmov	r0, r1, d8
 800ebc4:	f7f1 fd18 	bl	80005f8 <__aeabi_dmul>
 800ebc8:	4604      	mov	r4, r0
 800ebca:	460d      	mov	r5, r1
 800ebcc:	4602      	mov	r2, r0
 800ebce:	460b      	mov	r3, r1
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	4649      	mov	r1, r9
 800ebd4:	f7f1 fb58 	bl	8000288 <__aeabi_dsub>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4606      	mov	r6, r0
 800ebde:	460f      	mov	r7, r1
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	4649      	mov	r1, r9
 800ebe4:	f7f1 fb50 	bl	8000288 <__aeabi_dsub>
 800ebe8:	4622      	mov	r2, r4
 800ebea:	462b      	mov	r3, r5
 800ebec:	f7f1 fb4c 	bl	8000288 <__aeabi_dsub>
 800ebf0:	a31b      	add	r3, pc, #108	; (adr r3, 800ec60 <__ieee754_rem_pio2+0x330>)
 800ebf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	460d      	mov	r5, r1
 800ebfa:	ec51 0b18 	vmov	r0, r1, d8
 800ebfe:	f7f1 fcfb 	bl	80005f8 <__aeabi_dmul>
 800ec02:	4622      	mov	r2, r4
 800ec04:	462b      	mov	r3, r5
 800ec06:	f7f1 fb3f 	bl	8000288 <__aeabi_dsub>
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	460d      	mov	r5, r1
 800ec0e:	e75f      	b.n	800ead0 <__ieee754_rem_pio2+0x1a0>
 800ec10:	4b1b      	ldr	r3, [pc, #108]	; (800ec80 <__ieee754_rem_pio2+0x350>)
 800ec12:	4598      	cmp	r8, r3
 800ec14:	dd36      	ble.n	800ec84 <__ieee754_rem_pio2+0x354>
 800ec16:	ee10 2a10 	vmov	r2, s0
 800ec1a:	462b      	mov	r3, r5
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	4629      	mov	r1, r5
 800ec20:	f7f1 fb32 	bl	8000288 <__aeabi_dsub>
 800ec24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec28:	e9ca 0100 	strd	r0, r1, [sl]
 800ec2c:	e694      	b.n	800e958 <__ieee754_rem_pio2+0x28>
 800ec2e:	bf00      	nop
 800ec30:	54400000 	.word	0x54400000
 800ec34:	3ff921fb 	.word	0x3ff921fb
 800ec38:	1a626331 	.word	0x1a626331
 800ec3c:	3dd0b461 	.word	0x3dd0b461
 800ec40:	1a600000 	.word	0x1a600000
 800ec44:	3dd0b461 	.word	0x3dd0b461
 800ec48:	2e037073 	.word	0x2e037073
 800ec4c:	3ba3198a 	.word	0x3ba3198a
 800ec50:	6dc9c883 	.word	0x6dc9c883
 800ec54:	3fe45f30 	.word	0x3fe45f30
 800ec58:	2e000000 	.word	0x2e000000
 800ec5c:	3ba3198a 	.word	0x3ba3198a
 800ec60:	252049c1 	.word	0x252049c1
 800ec64:	397b839a 	.word	0x397b839a
 800ec68:	3fe921fb 	.word	0x3fe921fb
 800ec6c:	4002d97b 	.word	0x4002d97b
 800ec70:	3ff921fb 	.word	0x3ff921fb
 800ec74:	413921fb 	.word	0x413921fb
 800ec78:	3fe00000 	.word	0x3fe00000
 800ec7c:	08067690 	.word	0x08067690
 800ec80:	7fefffff 	.word	0x7fefffff
 800ec84:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ec88:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ec8c:	ee10 0a10 	vmov	r0, s0
 800ec90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ec94:	ee10 6a10 	vmov	r6, s0
 800ec98:	460f      	mov	r7, r1
 800ec9a:	f7f1 ff5d 	bl	8000b58 <__aeabi_d2iz>
 800ec9e:	f7f1 fc41 	bl	8000524 <__aeabi_i2d>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	4630      	mov	r0, r6
 800eca8:	4639      	mov	r1, r7
 800ecaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ecae:	f7f1 faeb 	bl	8000288 <__aeabi_dsub>
 800ecb2:	4b22      	ldr	r3, [pc, #136]	; (800ed3c <__ieee754_rem_pio2+0x40c>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f7f1 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ecba:	460f      	mov	r7, r1
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	f7f1 ff4b 	bl	8000b58 <__aeabi_d2iz>
 800ecc2:	f7f1 fc2f 	bl	8000524 <__aeabi_i2d>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	460b      	mov	r3, r1
 800ecca:	4630      	mov	r0, r6
 800eccc:	4639      	mov	r1, r7
 800ecce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ecd2:	f7f1 fad9 	bl	8000288 <__aeabi_dsub>
 800ecd6:	4b19      	ldr	r3, [pc, #100]	; (800ed3c <__ieee754_rem_pio2+0x40c>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f7f1 fc8d 	bl	80005f8 <__aeabi_dmul>
 800ecde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ece2:	ad04      	add	r5, sp, #16
 800ece4:	f04f 0803 	mov.w	r8, #3
 800ece8:	46a9      	mov	r9, r5
 800ecea:	2600      	movs	r6, #0
 800ecec:	2700      	movs	r7, #0
 800ecee:	4632      	mov	r2, r6
 800ecf0:	463b      	mov	r3, r7
 800ecf2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ecf6:	46c3      	mov	fp, r8
 800ecf8:	3d08      	subs	r5, #8
 800ecfa:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecfe:	f7f1 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d1f3      	bne.n	800ecee <__ieee754_rem_pio2+0x3be>
 800ed06:	4b0e      	ldr	r3, [pc, #56]	; (800ed40 <__ieee754_rem_pio2+0x410>)
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	4622      	mov	r2, r4
 800ed10:	465b      	mov	r3, fp
 800ed12:	4651      	mov	r1, sl
 800ed14:	4648      	mov	r0, r9
 800ed16:	f000 fb5b 	bl	800f3d0 <__kernel_rem_pio2>
 800ed1a:	9b02      	ldr	r3, [sp, #8]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	4683      	mov	fp, r0
 800ed20:	f6bf ae46 	bge.w	800e9b0 <__ieee754_rem_pio2+0x80>
 800ed24:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ed28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ed2c:	f8ca 3004 	str.w	r3, [sl, #4]
 800ed30:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ed34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ed38:	e73a      	b.n	800ebb0 <__ieee754_rem_pio2+0x280>
 800ed3a:	bf00      	nop
 800ed3c:	41700000 	.word	0x41700000
 800ed40:	08067710 	.word	0x08067710

0800ed44 <__ieee754_sqrt>:
 800ed44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed48:	ec55 4b10 	vmov	r4, r5, d0
 800ed4c:	4e56      	ldr	r6, [pc, #344]	; (800eea8 <__ieee754_sqrt+0x164>)
 800ed4e:	43ae      	bics	r6, r5
 800ed50:	ee10 0a10 	vmov	r0, s0
 800ed54:	ee10 3a10 	vmov	r3, s0
 800ed58:	4629      	mov	r1, r5
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	d110      	bne.n	800ed80 <__ieee754_sqrt+0x3c>
 800ed5e:	ee10 2a10 	vmov	r2, s0
 800ed62:	462b      	mov	r3, r5
 800ed64:	f7f1 fc48 	bl	80005f8 <__aeabi_dmul>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	4629      	mov	r1, r5
 800ed70:	f7f1 fa8c 	bl	800028c <__adddf3>
 800ed74:	4604      	mov	r4, r0
 800ed76:	460d      	mov	r5, r1
 800ed78:	ec45 4b10 	vmov	d0, r4, r5
 800ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	dc10      	bgt.n	800eda6 <__ieee754_sqrt+0x62>
 800ed84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ed88:	4330      	orrs	r0, r6
 800ed8a:	d0f5      	beq.n	800ed78 <__ieee754_sqrt+0x34>
 800ed8c:	b15d      	cbz	r5, 800eda6 <__ieee754_sqrt+0x62>
 800ed8e:	ee10 2a10 	vmov	r2, s0
 800ed92:	462b      	mov	r3, r5
 800ed94:	ee10 0a10 	vmov	r0, s0
 800ed98:	f7f1 fa76 	bl	8000288 <__aeabi_dsub>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	460b      	mov	r3, r1
 800eda0:	f7f1 fd54 	bl	800084c <__aeabi_ddiv>
 800eda4:	e7e6      	b.n	800ed74 <__ieee754_sqrt+0x30>
 800eda6:	1509      	asrs	r1, r1, #20
 800eda8:	d076      	beq.n	800ee98 <__ieee754_sqrt+0x154>
 800edaa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800edae:	07ce      	lsls	r6, r1, #31
 800edb0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800edb4:	bf5e      	ittt	pl
 800edb6:	0fda      	lsrpl	r2, r3, #31
 800edb8:	005b      	lslpl	r3, r3, #1
 800edba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800edbe:	0fda      	lsrs	r2, r3, #31
 800edc0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800edc4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800edc8:	2000      	movs	r0, #0
 800edca:	106d      	asrs	r5, r5, #1
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	f04f 0e16 	mov.w	lr, #22
 800edd2:	4684      	mov	ip, r0
 800edd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edd8:	eb0c 0401 	add.w	r4, ip, r1
 800eddc:	4294      	cmp	r4, r2
 800edde:	bfde      	ittt	le
 800ede0:	1b12      	suble	r2, r2, r4
 800ede2:	eb04 0c01 	addle.w	ip, r4, r1
 800ede6:	1840      	addle	r0, r0, r1
 800ede8:	0052      	lsls	r2, r2, #1
 800edea:	f1be 0e01 	subs.w	lr, lr, #1
 800edee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800edf2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800edf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800edfa:	d1ed      	bne.n	800edd8 <__ieee754_sqrt+0x94>
 800edfc:	4671      	mov	r1, lr
 800edfe:	2720      	movs	r7, #32
 800ee00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ee04:	4562      	cmp	r2, ip
 800ee06:	eb04 060e 	add.w	r6, r4, lr
 800ee0a:	dc02      	bgt.n	800ee12 <__ieee754_sqrt+0xce>
 800ee0c:	d113      	bne.n	800ee36 <__ieee754_sqrt+0xf2>
 800ee0e:	429e      	cmp	r6, r3
 800ee10:	d811      	bhi.n	800ee36 <__ieee754_sqrt+0xf2>
 800ee12:	2e00      	cmp	r6, #0
 800ee14:	eb06 0e04 	add.w	lr, r6, r4
 800ee18:	da43      	bge.n	800eea2 <__ieee754_sqrt+0x15e>
 800ee1a:	f1be 0f00 	cmp.w	lr, #0
 800ee1e:	db40      	blt.n	800eea2 <__ieee754_sqrt+0x15e>
 800ee20:	f10c 0801 	add.w	r8, ip, #1
 800ee24:	eba2 020c 	sub.w	r2, r2, ip
 800ee28:	429e      	cmp	r6, r3
 800ee2a:	bf88      	it	hi
 800ee2c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ee30:	1b9b      	subs	r3, r3, r6
 800ee32:	4421      	add	r1, r4
 800ee34:	46c4      	mov	ip, r8
 800ee36:	0052      	lsls	r2, r2, #1
 800ee38:	3f01      	subs	r7, #1
 800ee3a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ee3e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ee42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee46:	d1dd      	bne.n	800ee04 <__ieee754_sqrt+0xc0>
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	d006      	beq.n	800ee5a <__ieee754_sqrt+0x116>
 800ee4c:	1c4c      	adds	r4, r1, #1
 800ee4e:	bf13      	iteet	ne
 800ee50:	3101      	addne	r1, #1
 800ee52:	3001      	addeq	r0, #1
 800ee54:	4639      	moveq	r1, r7
 800ee56:	f021 0101 	bicne.w	r1, r1, #1
 800ee5a:	1043      	asrs	r3, r0, #1
 800ee5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ee60:	0849      	lsrs	r1, r1, #1
 800ee62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ee66:	07c2      	lsls	r2, r0, #31
 800ee68:	bf48      	it	mi
 800ee6a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ee6e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ee72:	460c      	mov	r4, r1
 800ee74:	463d      	mov	r5, r7
 800ee76:	e77f      	b.n	800ed78 <__ieee754_sqrt+0x34>
 800ee78:	0ada      	lsrs	r2, r3, #11
 800ee7a:	3815      	subs	r0, #21
 800ee7c:	055b      	lsls	r3, r3, #21
 800ee7e:	2a00      	cmp	r2, #0
 800ee80:	d0fa      	beq.n	800ee78 <__ieee754_sqrt+0x134>
 800ee82:	02d7      	lsls	r7, r2, #11
 800ee84:	d50a      	bpl.n	800ee9c <__ieee754_sqrt+0x158>
 800ee86:	f1c1 0420 	rsb	r4, r1, #32
 800ee8a:	fa23 f404 	lsr.w	r4, r3, r4
 800ee8e:	1e4d      	subs	r5, r1, #1
 800ee90:	408b      	lsls	r3, r1
 800ee92:	4322      	orrs	r2, r4
 800ee94:	1b41      	subs	r1, r0, r5
 800ee96:	e788      	b.n	800edaa <__ieee754_sqrt+0x66>
 800ee98:	4608      	mov	r0, r1
 800ee9a:	e7f0      	b.n	800ee7e <__ieee754_sqrt+0x13a>
 800ee9c:	0052      	lsls	r2, r2, #1
 800ee9e:	3101      	adds	r1, #1
 800eea0:	e7ef      	b.n	800ee82 <__ieee754_sqrt+0x13e>
 800eea2:	46e0      	mov	r8, ip
 800eea4:	e7be      	b.n	800ee24 <__ieee754_sqrt+0xe0>
 800eea6:	bf00      	nop
 800eea8:	7ff00000 	.word	0x7ff00000

0800eeac <__ieee754_expf>:
 800eeac:	ee10 2a10 	vmov	r2, s0
 800eeb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800eeb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eeb8:	d902      	bls.n	800eec0 <__ieee754_expf+0x14>
 800eeba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eebe:	4770      	bx	lr
 800eec0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800eec4:	d106      	bne.n	800eed4 <__ieee754_expf+0x28>
 800eec6:	eddf 7a51 	vldr	s15, [pc, #324]	; 800f00c <__ieee754_expf+0x160>
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	bf18      	it	ne
 800eece:	eeb0 0a67 	vmovne.f32	s0, s15
 800eed2:	4770      	bx	lr
 800eed4:	484e      	ldr	r0, [pc, #312]	; (800f010 <__ieee754_expf+0x164>)
 800eed6:	4282      	cmp	r2, r0
 800eed8:	dd04      	ble.n	800eee4 <__ieee754_expf+0x38>
 800eeda:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800f014 <__ieee754_expf+0x168>
 800eede:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eee2:	4770      	bx	lr
 800eee4:	2a00      	cmp	r2, #0
 800eee6:	da03      	bge.n	800eef0 <__ieee754_expf+0x44>
 800eee8:	4a4b      	ldr	r2, [pc, #300]	; (800f018 <__ieee754_expf+0x16c>)
 800eeea:	4291      	cmp	r1, r2
 800eeec:	f200 808a 	bhi.w	800f004 <__ieee754_expf+0x158>
 800eef0:	4a4a      	ldr	r2, [pc, #296]	; (800f01c <__ieee754_expf+0x170>)
 800eef2:	4291      	cmp	r1, r2
 800eef4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800eef8:	d954      	bls.n	800efa4 <__ieee754_expf+0xf8>
 800eefa:	4a49      	ldr	r2, [pc, #292]	; (800f020 <__ieee754_expf+0x174>)
 800eefc:	4291      	cmp	r1, r2
 800eefe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ef02:	d836      	bhi.n	800ef72 <__ieee754_expf+0xc6>
 800ef04:	4947      	ldr	r1, [pc, #284]	; (800f024 <__ieee754_expf+0x178>)
 800ef06:	4411      	add	r1, r2
 800ef08:	ed91 7a00 	vldr	s14, [r1]
 800ef0c:	4946      	ldr	r1, [pc, #280]	; (800f028 <__ieee754_expf+0x17c>)
 800ef0e:	440a      	add	r2, r1
 800ef10:	edd2 7a00 	vldr	s15, [r2]
 800ef14:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ef18:	f1c3 0201 	rsb	r2, r3, #1
 800ef1c:	1ad2      	subs	r2, r2, r3
 800ef1e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ef22:	ee60 6a00 	vmul.f32	s13, s0, s0
 800ef26:	eddf 5a41 	vldr	s11, [pc, #260]	; 800f02c <__ieee754_expf+0x180>
 800ef2a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800f030 <__ieee754_expf+0x184>
 800ef2e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800ef32:	eddf 5a40 	vldr	s11, [pc, #256]	; 800f034 <__ieee754_expf+0x188>
 800ef36:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ef3a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800f038 <__ieee754_expf+0x18c>
 800ef3e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800ef42:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800f03c <__ieee754_expf+0x190>
 800ef46:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ef4a:	eeb0 5a40 	vmov.f32	s10, s0
 800ef4e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800ef52:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ef56:	eef0 6a45 	vmov.f32	s13, s10
 800ef5a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800ef5e:	bb92      	cbnz	r2, 800efc6 <__ieee754_expf+0x11a>
 800ef60:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800ef64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ef68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ef6c:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ef70:	4770      	bx	lr
 800ef72:	4b33      	ldr	r3, [pc, #204]	; (800f040 <__ieee754_expf+0x194>)
 800ef74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f044 <__ieee754_expf+0x198>
 800ef78:	4413      	add	r3, r2
 800ef7a:	edd3 7a00 	vldr	s15, [r3]
 800ef7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ef82:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f048 <__ieee754_expf+0x19c>
 800ef86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef8a:	ee17 2a90 	vmov	r2, s15
 800ef8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef92:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ef96:	eeb0 7a40 	vmov.f32	s14, s0
 800ef9a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800f04c <__ieee754_expf+0x1a0>
 800ef9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800efa2:	e7bc      	b.n	800ef1e <__ieee754_expf+0x72>
 800efa4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800efa8:	d20b      	bcs.n	800efc2 <__ieee754_expf+0x116>
 800efaa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800f014 <__ieee754_expf+0x168>
 800efae:	ee70 6a26 	vadd.f32	s13, s0, s13
 800efb2:	eef4 6ac6 	vcmpe.f32	s13, s12
 800efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efba:	dd02      	ble.n	800efc2 <__ieee754_expf+0x116>
 800efbc:	ee30 0a06 	vadd.f32	s0, s0, s12
 800efc0:	4770      	bx	lr
 800efc2:	2200      	movs	r2, #0
 800efc4:	e7ad      	b.n	800ef22 <__ieee754_expf+0x76>
 800efc6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800efca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800efce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800efd2:	bfb8      	it	lt
 800efd4:	3264      	addlt	r2, #100	; 0x64
 800efd6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800efda:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800efde:	ee76 7a40 	vsub.f32	s15, s12, s0
 800efe2:	ee17 3a90 	vmov	r3, s15
 800efe6:	bfab      	itete	ge
 800efe8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800efec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800eff0:	ee00 3a10 	vmovge	s0, r3
 800eff4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800f050 <__ieee754_expf+0x1a4>
 800eff8:	bfbc      	itt	lt
 800effa:	ee00 3a10 	vmovlt	s0, r3
 800effe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f002:	4770      	bx	lr
 800f004:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f00c <__ieee754_expf+0x160>
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	00000000 	.word	0x00000000
 800f010:	42b17217 	.word	0x42b17217
 800f014:	7149f2ca 	.word	0x7149f2ca
 800f018:	42cff1b5 	.word	0x42cff1b5
 800f01c:	3eb17218 	.word	0x3eb17218
 800f020:	3f851591 	.word	0x3f851591
 800f024:	08067820 	.word	0x08067820
 800f028:	08067828 	.word	0x08067828
 800f02c:	3331bb4c 	.word	0x3331bb4c
 800f030:	b5ddea0e 	.word	0xb5ddea0e
 800f034:	388ab355 	.word	0x388ab355
 800f038:	bb360b61 	.word	0xbb360b61
 800f03c:	3e2aaaab 	.word	0x3e2aaaab
 800f040:	08067818 	.word	0x08067818
 800f044:	3fb8aa3b 	.word	0x3fb8aa3b
 800f048:	3f317180 	.word	0x3f317180
 800f04c:	3717f7d1 	.word	0x3717f7d1
 800f050:	0d800000 	.word	0x0d800000

0800f054 <__ieee754_logf>:
 800f054:	ee10 3a10 	vmov	r3, s0
 800f058:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f05c:	d106      	bne.n	800f06c <__ieee754_logf+0x18>
 800f05e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f1f4 <__ieee754_logf+0x1a0>
 800f062:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f1f8 <__ieee754_logf+0x1a4>
 800f066:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f06a:	4770      	bx	lr
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	da02      	bge.n	800f076 <__ieee754_logf+0x22>
 800f070:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f074:	e7f5      	b.n	800f062 <__ieee754_logf+0xe>
 800f076:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f07a:	db02      	blt.n	800f082 <__ieee754_logf+0x2e>
 800f07c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f080:	4770      	bx	lr
 800f082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f086:	bfb8      	it	lt
 800f088:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f1fc <__ieee754_logf+0x1a8>
 800f08c:	485c      	ldr	r0, [pc, #368]	; (800f200 <__ieee754_logf+0x1ac>)
 800f08e:	bfbe      	ittt	lt
 800f090:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f094:	f06f 0118 	mvnlt.w	r1, #24
 800f098:	ee17 3a90 	vmovlt	r3, s15
 800f09c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f0a0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0a4:	4418      	add	r0, r3
 800f0a6:	bfa8      	it	ge
 800f0a8:	2100      	movge	r1, #0
 800f0aa:	3a7f      	subs	r2, #127	; 0x7f
 800f0ac:	440a      	add	r2, r1
 800f0ae:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f0b2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f0b6:	4319      	orrs	r1, r3
 800f0b8:	ee00 1a10 	vmov	s0, r1
 800f0bc:	4951      	ldr	r1, [pc, #324]	; (800f204 <__ieee754_logf+0x1b0>)
 800f0be:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f0c2:	f103 000f 	add.w	r0, r3, #15
 800f0c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f0ca:	4001      	ands	r1, r0
 800f0cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f0d0:	bb89      	cbnz	r1, 800f136 <__ieee754_logf+0xe2>
 800f0d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0da:	d10f      	bne.n	800f0fc <__ieee754_logf+0xa8>
 800f0dc:	2a00      	cmp	r2, #0
 800f0de:	f000 8085 	beq.w	800f1ec <__ieee754_logf+0x198>
 800f0e2:	ee07 2a90 	vmov	s15, r2
 800f0e6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f208 <__ieee754_logf+0x1b4>
 800f0ea:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f20c <__ieee754_logf+0x1b8>
 800f0ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f0f6:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f0fa:	4770      	bx	lr
 800f0fc:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f210 <__ieee754_logf+0x1bc>
 800f100:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f104:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f108:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f10c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f110:	b912      	cbnz	r2, 800f118 <__ieee754_logf+0xc4>
 800f112:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f116:	4770      	bx	lr
 800f118:	ee07 2a90 	vmov	s15, r2
 800f11c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f208 <__ieee754_logf+0x1b4>
 800f120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f124:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f128:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f12c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f20c <__ieee754_logf+0x1b8>
 800f130:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f134:	4770      	bx	lr
 800f136:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f13a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f13e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f214 <__ieee754_logf+0x1c0>
 800f142:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f218 <__ieee754_logf+0x1c4>
 800f146:	4935      	ldr	r1, [pc, #212]	; (800f21c <__ieee754_logf+0x1c8>)
 800f148:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f14c:	4419      	add	r1, r3
 800f14e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f152:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f156:	430b      	orrs	r3, r1
 800f158:	2b00      	cmp	r3, #0
 800f15a:	ee07 2a90 	vmov	s15, r2
 800f15e:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f162:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f166:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f16a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f220 <__ieee754_logf+0x1cc>
 800f16e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f172:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f224 <__ieee754_logf+0x1d0>
 800f176:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f17a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f228 <__ieee754_logf+0x1d4>
 800f17e:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f182:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f22c <__ieee754_logf+0x1d8>
 800f186:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f18a:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f230 <__ieee754_logf+0x1dc>
 800f18e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f192:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f196:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f19a:	dd1c      	ble.n	800f1d6 <__ieee754_logf+0x182>
 800f19c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f1a0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f1a4:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f1a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f1b0:	b922      	cbnz	r2, 800f1bc <__ieee754_logf+0x168>
 800f1b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f1ba:	4770      	bx	lr
 800f1bc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f208 <__ieee754_logf+0x1b4>
 800f1c0:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f1c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f1cc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f20c <__ieee754_logf+0x1b8>
 800f1d0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f1d4:	4770      	bx	lr
 800f1d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f1da:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f1de:	2a00      	cmp	r2, #0
 800f1e0:	d0e9      	beq.n	800f1b6 <__ieee754_logf+0x162>
 800f1e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f208 <__ieee754_logf+0x1b4>
 800f1e6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f1ea:	e7ed      	b.n	800f1c8 <__ieee754_logf+0x174>
 800f1ec:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f1f8 <__ieee754_logf+0x1a4>
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	cc000000 	.word	0xcc000000
 800f1f8:	00000000 	.word	0x00000000
 800f1fc:	4c000000 	.word	0x4c000000
 800f200:	004afb20 	.word	0x004afb20
 800f204:	007ffff0 	.word	0x007ffff0
 800f208:	3717f7d1 	.word	0x3717f7d1
 800f20c:	3f317180 	.word	0x3f317180
 800f210:	3eaaaaab 	.word	0x3eaaaaab
 800f214:	3e1cd04f 	.word	0x3e1cd04f
 800f218:	3e178897 	.word	0x3e178897
 800f21c:	ffcf5c30 	.word	0xffcf5c30
 800f220:	3e638e29 	.word	0x3e638e29
 800f224:	3ecccccd 	.word	0x3ecccccd
 800f228:	3e3a3325 	.word	0x3e3a3325
 800f22c:	3e924925 	.word	0x3e924925
 800f230:	3f2aaaab 	.word	0x3f2aaaab

0800f234 <__ieee754_sqrtf>:
 800f234:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f238:	4770      	bx	lr
 800f23a:	0000      	movs	r0, r0
 800f23c:	0000      	movs	r0, r0
	...

0800f240 <__kernel_cos>:
 800f240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	ec57 6b10 	vmov	r6, r7, d0
 800f248:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f24c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f250:	ed8d 1b00 	vstr	d1, [sp]
 800f254:	da07      	bge.n	800f266 <__kernel_cos+0x26>
 800f256:	ee10 0a10 	vmov	r0, s0
 800f25a:	4639      	mov	r1, r7
 800f25c:	f7f1 fc7c 	bl	8000b58 <__aeabi_d2iz>
 800f260:	2800      	cmp	r0, #0
 800f262:	f000 8088 	beq.w	800f376 <__kernel_cos+0x136>
 800f266:	4632      	mov	r2, r6
 800f268:	463b      	mov	r3, r7
 800f26a:	4630      	mov	r0, r6
 800f26c:	4639      	mov	r1, r7
 800f26e:	f7f1 f9c3 	bl	80005f8 <__aeabi_dmul>
 800f272:	4b51      	ldr	r3, [pc, #324]	; (800f3b8 <__kernel_cos+0x178>)
 800f274:	2200      	movs	r2, #0
 800f276:	4604      	mov	r4, r0
 800f278:	460d      	mov	r5, r1
 800f27a:	f7f1 f9bd 	bl	80005f8 <__aeabi_dmul>
 800f27e:	a340      	add	r3, pc, #256	; (adr r3, 800f380 <__kernel_cos+0x140>)
 800f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f284:	4682      	mov	sl, r0
 800f286:	468b      	mov	fp, r1
 800f288:	4620      	mov	r0, r4
 800f28a:	4629      	mov	r1, r5
 800f28c:	f7f1 f9b4 	bl	80005f8 <__aeabi_dmul>
 800f290:	a33d      	add	r3, pc, #244	; (adr r3, 800f388 <__kernel_cos+0x148>)
 800f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f296:	f7f0 fff9 	bl	800028c <__adddf3>
 800f29a:	4622      	mov	r2, r4
 800f29c:	462b      	mov	r3, r5
 800f29e:	f7f1 f9ab 	bl	80005f8 <__aeabi_dmul>
 800f2a2:	a33b      	add	r3, pc, #236	; (adr r3, 800f390 <__kernel_cos+0x150>)
 800f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a8:	f7f0 ffee 	bl	8000288 <__aeabi_dsub>
 800f2ac:	4622      	mov	r2, r4
 800f2ae:	462b      	mov	r3, r5
 800f2b0:	f7f1 f9a2 	bl	80005f8 <__aeabi_dmul>
 800f2b4:	a338      	add	r3, pc, #224	; (adr r3, 800f398 <__kernel_cos+0x158>)
 800f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ba:	f7f0 ffe7 	bl	800028c <__adddf3>
 800f2be:	4622      	mov	r2, r4
 800f2c0:	462b      	mov	r3, r5
 800f2c2:	f7f1 f999 	bl	80005f8 <__aeabi_dmul>
 800f2c6:	a336      	add	r3, pc, #216	; (adr r3, 800f3a0 <__kernel_cos+0x160>)
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	f7f0 ffdc 	bl	8000288 <__aeabi_dsub>
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	462b      	mov	r3, r5
 800f2d4:	f7f1 f990 	bl	80005f8 <__aeabi_dmul>
 800f2d8:	a333      	add	r3, pc, #204	; (adr r3, 800f3a8 <__kernel_cos+0x168>)
 800f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2de:	f7f0 ffd5 	bl	800028c <__adddf3>
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	462b      	mov	r3, r5
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	4622      	mov	r2, r4
 800f2ec:	462b      	mov	r3, r5
 800f2ee:	f7f1 f983 	bl	80005f8 <__aeabi_dmul>
 800f2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	460d      	mov	r5, r1
 800f2fa:	4630      	mov	r0, r6
 800f2fc:	4639      	mov	r1, r7
 800f2fe:	f7f1 f97b 	bl	80005f8 <__aeabi_dmul>
 800f302:	460b      	mov	r3, r1
 800f304:	4602      	mov	r2, r0
 800f306:	4629      	mov	r1, r5
 800f308:	4620      	mov	r0, r4
 800f30a:	f7f0 ffbd 	bl	8000288 <__aeabi_dsub>
 800f30e:	4b2b      	ldr	r3, [pc, #172]	; (800f3bc <__kernel_cos+0x17c>)
 800f310:	4598      	cmp	r8, r3
 800f312:	4606      	mov	r6, r0
 800f314:	460f      	mov	r7, r1
 800f316:	dc10      	bgt.n	800f33a <__kernel_cos+0xfa>
 800f318:	4602      	mov	r2, r0
 800f31a:	460b      	mov	r3, r1
 800f31c:	4650      	mov	r0, sl
 800f31e:	4659      	mov	r1, fp
 800f320:	f7f0 ffb2 	bl	8000288 <__aeabi_dsub>
 800f324:	460b      	mov	r3, r1
 800f326:	4926      	ldr	r1, [pc, #152]	; (800f3c0 <__kernel_cos+0x180>)
 800f328:	4602      	mov	r2, r0
 800f32a:	2000      	movs	r0, #0
 800f32c:	f7f0 ffac 	bl	8000288 <__aeabi_dsub>
 800f330:	ec41 0b10 	vmov	d0, r0, r1
 800f334:	b003      	add	sp, #12
 800f336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33a:	4b22      	ldr	r3, [pc, #136]	; (800f3c4 <__kernel_cos+0x184>)
 800f33c:	4920      	ldr	r1, [pc, #128]	; (800f3c0 <__kernel_cos+0x180>)
 800f33e:	4598      	cmp	r8, r3
 800f340:	bfcc      	ite	gt
 800f342:	4d21      	ldrgt	r5, [pc, #132]	; (800f3c8 <__kernel_cos+0x188>)
 800f344:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f348:	2400      	movs	r4, #0
 800f34a:	4622      	mov	r2, r4
 800f34c:	462b      	mov	r3, r5
 800f34e:	2000      	movs	r0, #0
 800f350:	f7f0 ff9a 	bl	8000288 <__aeabi_dsub>
 800f354:	4622      	mov	r2, r4
 800f356:	4680      	mov	r8, r0
 800f358:	4689      	mov	r9, r1
 800f35a:	462b      	mov	r3, r5
 800f35c:	4650      	mov	r0, sl
 800f35e:	4659      	mov	r1, fp
 800f360:	f7f0 ff92 	bl	8000288 <__aeabi_dsub>
 800f364:	4632      	mov	r2, r6
 800f366:	463b      	mov	r3, r7
 800f368:	f7f0 ff8e 	bl	8000288 <__aeabi_dsub>
 800f36c:	4602      	mov	r2, r0
 800f36e:	460b      	mov	r3, r1
 800f370:	4640      	mov	r0, r8
 800f372:	4649      	mov	r1, r9
 800f374:	e7da      	b.n	800f32c <__kernel_cos+0xec>
 800f376:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f3b0 <__kernel_cos+0x170>
 800f37a:	e7db      	b.n	800f334 <__kernel_cos+0xf4>
 800f37c:	f3af 8000 	nop.w
 800f380:	be8838d4 	.word	0xbe8838d4
 800f384:	bda8fae9 	.word	0xbda8fae9
 800f388:	bdb4b1c4 	.word	0xbdb4b1c4
 800f38c:	3e21ee9e 	.word	0x3e21ee9e
 800f390:	809c52ad 	.word	0x809c52ad
 800f394:	3e927e4f 	.word	0x3e927e4f
 800f398:	19cb1590 	.word	0x19cb1590
 800f39c:	3efa01a0 	.word	0x3efa01a0
 800f3a0:	16c15177 	.word	0x16c15177
 800f3a4:	3f56c16c 	.word	0x3f56c16c
 800f3a8:	5555554c 	.word	0x5555554c
 800f3ac:	3fa55555 	.word	0x3fa55555
 800f3b0:	00000000 	.word	0x00000000
 800f3b4:	3ff00000 	.word	0x3ff00000
 800f3b8:	3fe00000 	.word	0x3fe00000
 800f3bc:	3fd33332 	.word	0x3fd33332
 800f3c0:	3ff00000 	.word	0x3ff00000
 800f3c4:	3fe90000 	.word	0x3fe90000
 800f3c8:	3fd20000 	.word	0x3fd20000
 800f3cc:	00000000 	.word	0x00000000

0800f3d0 <__kernel_rem_pio2>:
 800f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	ed2d 8b02 	vpush	{d8}
 800f3d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f3dc:	f112 0f14 	cmn.w	r2, #20
 800f3e0:	9308      	str	r3, [sp, #32]
 800f3e2:	9101      	str	r1, [sp, #4]
 800f3e4:	4bc6      	ldr	r3, [pc, #792]	; (800f700 <__kernel_rem_pio2+0x330>)
 800f3e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f3e8:	9009      	str	r0, [sp, #36]	; 0x24
 800f3ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3ee:	9304      	str	r3, [sp, #16]
 800f3f0:	9b08      	ldr	r3, [sp, #32]
 800f3f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f3f6:	bfa8      	it	ge
 800f3f8:	1ed4      	subge	r4, r2, #3
 800f3fa:	9306      	str	r3, [sp, #24]
 800f3fc:	bfb2      	itee	lt
 800f3fe:	2400      	movlt	r4, #0
 800f400:	2318      	movge	r3, #24
 800f402:	fb94 f4f3 	sdivge	r4, r4, r3
 800f406:	f06f 0317 	mvn.w	r3, #23
 800f40a:	fb04 3303 	mla	r3, r4, r3, r3
 800f40e:	eb03 0a02 	add.w	sl, r3, r2
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	9a06      	ldr	r2, [sp, #24]
 800f416:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f6f0 <__kernel_rem_pio2+0x320>
 800f41a:	eb03 0802 	add.w	r8, r3, r2
 800f41e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f420:	1aa7      	subs	r7, r4, r2
 800f422:	ae20      	add	r6, sp, #128	; 0x80
 800f424:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f428:	2500      	movs	r5, #0
 800f42a:	4545      	cmp	r5, r8
 800f42c:	dd18      	ble.n	800f460 <__kernel_rem_pio2+0x90>
 800f42e:	9b08      	ldr	r3, [sp, #32]
 800f430:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f434:	aa20      	add	r2, sp, #128	; 0x80
 800f436:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f6f0 <__kernel_rem_pio2+0x320>
 800f43a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f43e:	f1c3 0301 	rsb	r3, r3, #1
 800f442:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f446:	9307      	str	r3, [sp, #28]
 800f448:	9b07      	ldr	r3, [sp, #28]
 800f44a:	9a04      	ldr	r2, [sp, #16]
 800f44c:	4443      	add	r3, r8
 800f44e:	429a      	cmp	r2, r3
 800f450:	db2f      	blt.n	800f4b2 <__kernel_rem_pio2+0xe2>
 800f452:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f456:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f45a:	462f      	mov	r7, r5
 800f45c:	2600      	movs	r6, #0
 800f45e:	e01b      	b.n	800f498 <__kernel_rem_pio2+0xc8>
 800f460:	42ef      	cmn	r7, r5
 800f462:	d407      	bmi.n	800f474 <__kernel_rem_pio2+0xa4>
 800f464:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f468:	f7f1 f85c 	bl	8000524 <__aeabi_i2d>
 800f46c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f470:	3501      	adds	r5, #1
 800f472:	e7da      	b.n	800f42a <__kernel_rem_pio2+0x5a>
 800f474:	ec51 0b18 	vmov	r0, r1, d8
 800f478:	e7f8      	b.n	800f46c <__kernel_rem_pio2+0x9c>
 800f47a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f47e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f482:	f7f1 f8b9 	bl	80005f8 <__aeabi_dmul>
 800f486:	4602      	mov	r2, r0
 800f488:	460b      	mov	r3, r1
 800f48a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f48e:	f7f0 fefd 	bl	800028c <__adddf3>
 800f492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f496:	3601      	adds	r6, #1
 800f498:	9b06      	ldr	r3, [sp, #24]
 800f49a:	429e      	cmp	r6, r3
 800f49c:	f1a7 0708 	sub.w	r7, r7, #8
 800f4a0:	ddeb      	ble.n	800f47a <__kernel_rem_pio2+0xaa>
 800f4a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4a6:	3508      	adds	r5, #8
 800f4a8:	ecab 7b02 	vstmia	fp!, {d7}
 800f4ac:	f108 0801 	add.w	r8, r8, #1
 800f4b0:	e7ca      	b.n	800f448 <__kernel_rem_pio2+0x78>
 800f4b2:	9b04      	ldr	r3, [sp, #16]
 800f4b4:	aa0c      	add	r2, sp, #48	; 0x30
 800f4b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f4ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f4be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f4c2:	9c04      	ldr	r4, [sp, #16]
 800f4c4:	930a      	str	r3, [sp, #40]	; 0x28
 800f4c6:	ab98      	add	r3, sp, #608	; 0x260
 800f4c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f4d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f4d4:	f8cd b008 	str.w	fp, [sp, #8]
 800f4d8:	4625      	mov	r5, r4
 800f4da:	2d00      	cmp	r5, #0
 800f4dc:	dc78      	bgt.n	800f5d0 <__kernel_rem_pio2+0x200>
 800f4de:	ec47 6b10 	vmov	d0, r6, r7
 800f4e2:	4650      	mov	r0, sl
 800f4e4:	f000 fc9c 	bl	800fe20 <scalbn>
 800f4e8:	ec57 6b10 	vmov	r6, r7, d0
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f4f2:	ee10 0a10 	vmov	r0, s0
 800f4f6:	4639      	mov	r1, r7
 800f4f8:	f7f1 f87e 	bl	80005f8 <__aeabi_dmul>
 800f4fc:	ec41 0b10 	vmov	d0, r0, r1
 800f500:	f000 fb7a 	bl	800fbf8 <floor>
 800f504:	4b7f      	ldr	r3, [pc, #508]	; (800f704 <__kernel_rem_pio2+0x334>)
 800f506:	ec51 0b10 	vmov	r0, r1, d0
 800f50a:	2200      	movs	r2, #0
 800f50c:	f7f1 f874 	bl	80005f8 <__aeabi_dmul>
 800f510:	4602      	mov	r2, r0
 800f512:	460b      	mov	r3, r1
 800f514:	4630      	mov	r0, r6
 800f516:	4639      	mov	r1, r7
 800f518:	f7f0 feb6 	bl	8000288 <__aeabi_dsub>
 800f51c:	460f      	mov	r7, r1
 800f51e:	4606      	mov	r6, r0
 800f520:	f7f1 fb1a 	bl	8000b58 <__aeabi_d2iz>
 800f524:	9007      	str	r0, [sp, #28]
 800f526:	f7f0 fffd 	bl	8000524 <__aeabi_i2d>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4630      	mov	r0, r6
 800f530:	4639      	mov	r1, r7
 800f532:	f7f0 fea9 	bl	8000288 <__aeabi_dsub>
 800f536:	f1ba 0f00 	cmp.w	sl, #0
 800f53a:	4606      	mov	r6, r0
 800f53c:	460f      	mov	r7, r1
 800f53e:	dd70      	ble.n	800f622 <__kernel_rem_pio2+0x252>
 800f540:	1e62      	subs	r2, r4, #1
 800f542:	ab0c      	add	r3, sp, #48	; 0x30
 800f544:	9d07      	ldr	r5, [sp, #28]
 800f546:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f54a:	f1ca 0118 	rsb	r1, sl, #24
 800f54e:	fa40 f301 	asr.w	r3, r0, r1
 800f552:	441d      	add	r5, r3
 800f554:	408b      	lsls	r3, r1
 800f556:	1ac0      	subs	r0, r0, r3
 800f558:	ab0c      	add	r3, sp, #48	; 0x30
 800f55a:	9507      	str	r5, [sp, #28]
 800f55c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f560:	f1ca 0317 	rsb	r3, sl, #23
 800f564:	fa40 f303 	asr.w	r3, r0, r3
 800f568:	9302      	str	r3, [sp, #8]
 800f56a:	9b02      	ldr	r3, [sp, #8]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	dd66      	ble.n	800f63e <__kernel_rem_pio2+0x26e>
 800f570:	9b07      	ldr	r3, [sp, #28]
 800f572:	2200      	movs	r2, #0
 800f574:	3301      	adds	r3, #1
 800f576:	9307      	str	r3, [sp, #28]
 800f578:	4615      	mov	r5, r2
 800f57a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f57e:	4294      	cmp	r4, r2
 800f580:	f300 8099 	bgt.w	800f6b6 <__kernel_rem_pio2+0x2e6>
 800f584:	f1ba 0f00 	cmp.w	sl, #0
 800f588:	dd07      	ble.n	800f59a <__kernel_rem_pio2+0x1ca>
 800f58a:	f1ba 0f01 	cmp.w	sl, #1
 800f58e:	f000 80a5 	beq.w	800f6dc <__kernel_rem_pio2+0x30c>
 800f592:	f1ba 0f02 	cmp.w	sl, #2
 800f596:	f000 80c1 	beq.w	800f71c <__kernel_rem_pio2+0x34c>
 800f59a:	9b02      	ldr	r3, [sp, #8]
 800f59c:	2b02      	cmp	r3, #2
 800f59e:	d14e      	bne.n	800f63e <__kernel_rem_pio2+0x26e>
 800f5a0:	4632      	mov	r2, r6
 800f5a2:	463b      	mov	r3, r7
 800f5a4:	4958      	ldr	r1, [pc, #352]	; (800f708 <__kernel_rem_pio2+0x338>)
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	f7f0 fe6e 	bl	8000288 <__aeabi_dsub>
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	460f      	mov	r7, r1
 800f5b0:	2d00      	cmp	r5, #0
 800f5b2:	d044      	beq.n	800f63e <__kernel_rem_pio2+0x26e>
 800f5b4:	4650      	mov	r0, sl
 800f5b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f6f8 <__kernel_rem_pio2+0x328>
 800f5ba:	f000 fc31 	bl	800fe20 <scalbn>
 800f5be:	4630      	mov	r0, r6
 800f5c0:	4639      	mov	r1, r7
 800f5c2:	ec53 2b10 	vmov	r2, r3, d0
 800f5c6:	f7f0 fe5f 	bl	8000288 <__aeabi_dsub>
 800f5ca:	4606      	mov	r6, r0
 800f5cc:	460f      	mov	r7, r1
 800f5ce:	e036      	b.n	800f63e <__kernel_rem_pio2+0x26e>
 800f5d0:	4b4e      	ldr	r3, [pc, #312]	; (800f70c <__kernel_rem_pio2+0x33c>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	4639      	mov	r1, r7
 800f5d8:	f7f1 f80e 	bl	80005f8 <__aeabi_dmul>
 800f5dc:	f7f1 fabc 	bl	8000b58 <__aeabi_d2iz>
 800f5e0:	f7f0 ffa0 	bl	8000524 <__aeabi_i2d>
 800f5e4:	4b4a      	ldr	r3, [pc, #296]	; (800f710 <__kernel_rem_pio2+0x340>)
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	4680      	mov	r8, r0
 800f5ea:	4689      	mov	r9, r1
 800f5ec:	f7f1 f804 	bl	80005f8 <__aeabi_dmul>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	f7f0 fe46 	bl	8000288 <__aeabi_dsub>
 800f5fc:	f7f1 faac 	bl	8000b58 <__aeabi_d2iz>
 800f600:	9b02      	ldr	r3, [sp, #8]
 800f602:	f843 0b04 	str.w	r0, [r3], #4
 800f606:	3d01      	subs	r5, #1
 800f608:	9302      	str	r3, [sp, #8]
 800f60a:	ab70      	add	r3, sp, #448	; 0x1c0
 800f60c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f614:	4640      	mov	r0, r8
 800f616:	4649      	mov	r1, r9
 800f618:	f7f0 fe38 	bl	800028c <__adddf3>
 800f61c:	4606      	mov	r6, r0
 800f61e:	460f      	mov	r7, r1
 800f620:	e75b      	b.n	800f4da <__kernel_rem_pio2+0x10a>
 800f622:	d105      	bne.n	800f630 <__kernel_rem_pio2+0x260>
 800f624:	1e63      	subs	r3, r4, #1
 800f626:	aa0c      	add	r2, sp, #48	; 0x30
 800f628:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f62c:	15c3      	asrs	r3, r0, #23
 800f62e:	e79b      	b.n	800f568 <__kernel_rem_pio2+0x198>
 800f630:	4b38      	ldr	r3, [pc, #224]	; (800f714 <__kernel_rem_pio2+0x344>)
 800f632:	2200      	movs	r2, #0
 800f634:	f7f1 fa66 	bl	8000b04 <__aeabi_dcmpge>
 800f638:	2800      	cmp	r0, #0
 800f63a:	d139      	bne.n	800f6b0 <__kernel_rem_pio2+0x2e0>
 800f63c:	9002      	str	r0, [sp, #8]
 800f63e:	2200      	movs	r2, #0
 800f640:	2300      	movs	r3, #0
 800f642:	4630      	mov	r0, r6
 800f644:	4639      	mov	r1, r7
 800f646:	f7f1 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	f000 80b4 	beq.w	800f7b8 <__kernel_rem_pio2+0x3e8>
 800f650:	f104 3bff 	add.w	fp, r4, #4294967295
 800f654:	465b      	mov	r3, fp
 800f656:	2200      	movs	r2, #0
 800f658:	9904      	ldr	r1, [sp, #16]
 800f65a:	428b      	cmp	r3, r1
 800f65c:	da65      	bge.n	800f72a <__kernel_rem_pio2+0x35a>
 800f65e:	2a00      	cmp	r2, #0
 800f660:	d07b      	beq.n	800f75a <__kernel_rem_pio2+0x38a>
 800f662:	ab0c      	add	r3, sp, #48	; 0x30
 800f664:	f1aa 0a18 	sub.w	sl, sl, #24
 800f668:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f000 80a0 	beq.w	800f7b2 <__kernel_rem_pio2+0x3e2>
 800f672:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f6f8 <__kernel_rem_pio2+0x328>
 800f676:	4650      	mov	r0, sl
 800f678:	f000 fbd2 	bl	800fe20 <scalbn>
 800f67c:	4f23      	ldr	r7, [pc, #140]	; (800f70c <__kernel_rem_pio2+0x33c>)
 800f67e:	ec55 4b10 	vmov	r4, r5, d0
 800f682:	46d8      	mov	r8, fp
 800f684:	2600      	movs	r6, #0
 800f686:	f1b8 0f00 	cmp.w	r8, #0
 800f68a:	f280 80cf 	bge.w	800f82c <__kernel_rem_pio2+0x45c>
 800f68e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f6f0 <__kernel_rem_pio2+0x320>
 800f692:	465f      	mov	r7, fp
 800f694:	f04f 0800 	mov.w	r8, #0
 800f698:	2f00      	cmp	r7, #0
 800f69a:	f2c0 80fd 	blt.w	800f898 <__kernel_rem_pio2+0x4c8>
 800f69e:	ab70      	add	r3, sp, #448	; 0x1c0
 800f6a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f718 <__kernel_rem_pio2+0x348>
 800f6a4:	ec55 4b18 	vmov	r4, r5, d8
 800f6a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f6ac:	2600      	movs	r6, #0
 800f6ae:	e0e5      	b.n	800f87c <__kernel_rem_pio2+0x4ac>
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	9302      	str	r3, [sp, #8]
 800f6b4:	e75c      	b.n	800f570 <__kernel_rem_pio2+0x1a0>
 800f6b6:	f8db 3000 	ldr.w	r3, [fp]
 800f6ba:	b955      	cbnz	r5, 800f6d2 <__kernel_rem_pio2+0x302>
 800f6bc:	b123      	cbz	r3, 800f6c8 <__kernel_rem_pio2+0x2f8>
 800f6be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f6c2:	f8cb 3000 	str.w	r3, [fp]
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	3201      	adds	r2, #1
 800f6ca:	f10b 0b04 	add.w	fp, fp, #4
 800f6ce:	461d      	mov	r5, r3
 800f6d0:	e755      	b.n	800f57e <__kernel_rem_pio2+0x1ae>
 800f6d2:	1acb      	subs	r3, r1, r3
 800f6d4:	f8cb 3000 	str.w	r3, [fp]
 800f6d8:	462b      	mov	r3, r5
 800f6da:	e7f5      	b.n	800f6c8 <__kernel_rem_pio2+0x2f8>
 800f6dc:	1e62      	subs	r2, r4, #1
 800f6de:	ab0c      	add	r3, sp, #48	; 0x30
 800f6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f6e8:	a90c      	add	r1, sp, #48	; 0x30
 800f6ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f6ee:	e754      	b.n	800f59a <__kernel_rem_pio2+0x1ca>
	...
 800f6fc:	3ff00000 	.word	0x3ff00000
 800f700:	08067870 	.word	0x08067870
 800f704:	40200000 	.word	0x40200000
 800f708:	3ff00000 	.word	0x3ff00000
 800f70c:	3e700000 	.word	0x3e700000
 800f710:	41700000 	.word	0x41700000
 800f714:	3fe00000 	.word	0x3fe00000
 800f718:	08067830 	.word	0x08067830
 800f71c:	1e62      	subs	r2, r4, #1
 800f71e:	ab0c      	add	r3, sp, #48	; 0x30
 800f720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f724:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f728:	e7de      	b.n	800f6e8 <__kernel_rem_pio2+0x318>
 800f72a:	a90c      	add	r1, sp, #48	; 0x30
 800f72c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f730:	3b01      	subs	r3, #1
 800f732:	430a      	orrs	r2, r1
 800f734:	e790      	b.n	800f658 <__kernel_rem_pio2+0x288>
 800f736:	3301      	adds	r3, #1
 800f738:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f73c:	2900      	cmp	r1, #0
 800f73e:	d0fa      	beq.n	800f736 <__kernel_rem_pio2+0x366>
 800f740:	9a08      	ldr	r2, [sp, #32]
 800f742:	18e3      	adds	r3, r4, r3
 800f744:	18a6      	adds	r6, r4, r2
 800f746:	aa20      	add	r2, sp, #128	; 0x80
 800f748:	1c65      	adds	r5, r4, #1
 800f74a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f74e:	9302      	str	r3, [sp, #8]
 800f750:	9b02      	ldr	r3, [sp, #8]
 800f752:	42ab      	cmp	r3, r5
 800f754:	da04      	bge.n	800f760 <__kernel_rem_pio2+0x390>
 800f756:	461c      	mov	r4, r3
 800f758:	e6b5      	b.n	800f4c6 <__kernel_rem_pio2+0xf6>
 800f75a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f75c:	2301      	movs	r3, #1
 800f75e:	e7eb      	b.n	800f738 <__kernel_rem_pio2+0x368>
 800f760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f766:	f7f0 fedd 	bl	8000524 <__aeabi_i2d>
 800f76a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f770:	46b3      	mov	fp, r6
 800f772:	461c      	mov	r4, r3
 800f774:	2700      	movs	r7, #0
 800f776:	f04f 0800 	mov.w	r8, #0
 800f77a:	f04f 0900 	mov.w	r9, #0
 800f77e:	9b06      	ldr	r3, [sp, #24]
 800f780:	429f      	cmp	r7, r3
 800f782:	dd06      	ble.n	800f792 <__kernel_rem_pio2+0x3c2>
 800f784:	ab70      	add	r3, sp, #448	; 0x1c0
 800f786:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f78a:	e9c3 8900 	strd	r8, r9, [r3]
 800f78e:	3501      	adds	r5, #1
 800f790:	e7de      	b.n	800f750 <__kernel_rem_pio2+0x380>
 800f792:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f796:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f79a:	f7f0 ff2d 	bl	80005f8 <__aeabi_dmul>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	4640      	mov	r0, r8
 800f7a4:	4649      	mov	r1, r9
 800f7a6:	f7f0 fd71 	bl	800028c <__adddf3>
 800f7aa:	3701      	adds	r7, #1
 800f7ac:	4680      	mov	r8, r0
 800f7ae:	4689      	mov	r9, r1
 800f7b0:	e7e5      	b.n	800f77e <__kernel_rem_pio2+0x3ae>
 800f7b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7b6:	e754      	b.n	800f662 <__kernel_rem_pio2+0x292>
 800f7b8:	ec47 6b10 	vmov	d0, r6, r7
 800f7bc:	f1ca 0000 	rsb	r0, sl, #0
 800f7c0:	f000 fb2e 	bl	800fe20 <scalbn>
 800f7c4:	ec57 6b10 	vmov	r6, r7, d0
 800f7c8:	4b9f      	ldr	r3, [pc, #636]	; (800fa48 <__kernel_rem_pio2+0x678>)
 800f7ca:	ee10 0a10 	vmov	r0, s0
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4639      	mov	r1, r7
 800f7d2:	f7f1 f997 	bl	8000b04 <__aeabi_dcmpge>
 800f7d6:	b300      	cbz	r0, 800f81a <__kernel_rem_pio2+0x44a>
 800f7d8:	4b9c      	ldr	r3, [pc, #624]	; (800fa4c <__kernel_rem_pio2+0x67c>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4630      	mov	r0, r6
 800f7de:	4639      	mov	r1, r7
 800f7e0:	f7f0 ff0a 	bl	80005f8 <__aeabi_dmul>
 800f7e4:	f7f1 f9b8 	bl	8000b58 <__aeabi_d2iz>
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	f7f0 fe9b 	bl	8000524 <__aeabi_i2d>
 800f7ee:	4b96      	ldr	r3, [pc, #600]	; (800fa48 <__kernel_rem_pio2+0x678>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f7f0 ff01 	bl	80005f8 <__aeabi_dmul>
 800f7f6:	460b      	mov	r3, r1
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f7f0 fd43 	bl	8000288 <__aeabi_dsub>
 800f802:	f7f1 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800f806:	f104 0b01 	add.w	fp, r4, #1
 800f80a:	ab0c      	add	r3, sp, #48	; 0x30
 800f80c:	f10a 0a18 	add.w	sl, sl, #24
 800f810:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f814:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f818:	e72b      	b.n	800f672 <__kernel_rem_pio2+0x2a2>
 800f81a:	4630      	mov	r0, r6
 800f81c:	4639      	mov	r1, r7
 800f81e:	f7f1 f99b 	bl	8000b58 <__aeabi_d2iz>
 800f822:	ab0c      	add	r3, sp, #48	; 0x30
 800f824:	46a3      	mov	fp, r4
 800f826:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f82a:	e722      	b.n	800f672 <__kernel_rem_pio2+0x2a2>
 800f82c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f82e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f832:	ab0c      	add	r3, sp, #48	; 0x30
 800f834:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f838:	f7f0 fe74 	bl	8000524 <__aeabi_i2d>
 800f83c:	4622      	mov	r2, r4
 800f83e:	462b      	mov	r3, r5
 800f840:	f7f0 feda 	bl	80005f8 <__aeabi_dmul>
 800f844:	4632      	mov	r2, r6
 800f846:	e9c9 0100 	strd	r0, r1, [r9]
 800f84a:	463b      	mov	r3, r7
 800f84c:	4620      	mov	r0, r4
 800f84e:	4629      	mov	r1, r5
 800f850:	f7f0 fed2 	bl	80005f8 <__aeabi_dmul>
 800f854:	f108 38ff 	add.w	r8, r8, #4294967295
 800f858:	4604      	mov	r4, r0
 800f85a:	460d      	mov	r5, r1
 800f85c:	e713      	b.n	800f686 <__kernel_rem_pio2+0x2b6>
 800f85e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f862:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f866:	f7f0 fec7 	bl	80005f8 <__aeabi_dmul>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	4620      	mov	r0, r4
 800f870:	4629      	mov	r1, r5
 800f872:	f7f0 fd0b 	bl	800028c <__adddf3>
 800f876:	3601      	adds	r6, #1
 800f878:	4604      	mov	r4, r0
 800f87a:	460d      	mov	r5, r1
 800f87c:	9b04      	ldr	r3, [sp, #16]
 800f87e:	429e      	cmp	r6, r3
 800f880:	dc01      	bgt.n	800f886 <__kernel_rem_pio2+0x4b6>
 800f882:	45b0      	cmp	r8, r6
 800f884:	daeb      	bge.n	800f85e <__kernel_rem_pio2+0x48e>
 800f886:	ab48      	add	r3, sp, #288	; 0x120
 800f888:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f88c:	e9c3 4500 	strd	r4, r5, [r3]
 800f890:	3f01      	subs	r7, #1
 800f892:	f108 0801 	add.w	r8, r8, #1
 800f896:	e6ff      	b.n	800f698 <__kernel_rem_pio2+0x2c8>
 800f898:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	dc0b      	bgt.n	800f8b6 <__kernel_rem_pio2+0x4e6>
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	dc6e      	bgt.n	800f980 <__kernel_rem_pio2+0x5b0>
 800f8a2:	d045      	beq.n	800f930 <__kernel_rem_pio2+0x560>
 800f8a4:	9b07      	ldr	r3, [sp, #28]
 800f8a6:	f003 0007 	and.w	r0, r3, #7
 800f8aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f8ae:	ecbd 8b02 	vpop	{d8}
 800f8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f8b8:	2b03      	cmp	r3, #3
 800f8ba:	d1f3      	bne.n	800f8a4 <__kernel_rem_pio2+0x4d4>
 800f8bc:	ab48      	add	r3, sp, #288	; 0x120
 800f8be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f8c2:	46d0      	mov	r8, sl
 800f8c4:	46d9      	mov	r9, fp
 800f8c6:	f1b9 0f00 	cmp.w	r9, #0
 800f8ca:	f1a8 0808 	sub.w	r8, r8, #8
 800f8ce:	dc64      	bgt.n	800f99a <__kernel_rem_pio2+0x5ca>
 800f8d0:	465c      	mov	r4, fp
 800f8d2:	2c01      	cmp	r4, #1
 800f8d4:	f1aa 0a08 	sub.w	sl, sl, #8
 800f8d8:	dc7e      	bgt.n	800f9d8 <__kernel_rem_pio2+0x608>
 800f8da:	2000      	movs	r0, #0
 800f8dc:	2100      	movs	r1, #0
 800f8de:	f1bb 0f01 	cmp.w	fp, #1
 800f8e2:	f300 8097 	bgt.w	800fa14 <__kernel_rem_pio2+0x644>
 800f8e6:	9b02      	ldr	r3, [sp, #8]
 800f8e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f8ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f040 8099 	bne.w	800fa28 <__kernel_rem_pio2+0x658>
 800f8f6:	9b01      	ldr	r3, [sp, #4]
 800f8f8:	e9c3 5600 	strd	r5, r6, [r3]
 800f8fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f900:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f904:	e7ce      	b.n	800f8a4 <__kernel_rem_pio2+0x4d4>
 800f906:	ab48      	add	r3, sp, #288	; 0x120
 800f908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f910:	f7f0 fcbc 	bl	800028c <__adddf3>
 800f914:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f918:	f1bb 0f00 	cmp.w	fp, #0
 800f91c:	daf3      	bge.n	800f906 <__kernel_rem_pio2+0x536>
 800f91e:	9b02      	ldr	r3, [sp, #8]
 800f920:	b113      	cbz	r3, 800f928 <__kernel_rem_pio2+0x558>
 800f922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f926:	4619      	mov	r1, r3
 800f928:	9b01      	ldr	r3, [sp, #4]
 800f92a:	e9c3 0100 	strd	r0, r1, [r3]
 800f92e:	e7b9      	b.n	800f8a4 <__kernel_rem_pio2+0x4d4>
 800f930:	2000      	movs	r0, #0
 800f932:	2100      	movs	r1, #0
 800f934:	e7f0      	b.n	800f918 <__kernel_rem_pio2+0x548>
 800f936:	ab48      	add	r3, sp, #288	; 0x120
 800f938:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f940:	f7f0 fca4 	bl	800028c <__adddf3>
 800f944:	3c01      	subs	r4, #1
 800f946:	2c00      	cmp	r4, #0
 800f948:	daf5      	bge.n	800f936 <__kernel_rem_pio2+0x566>
 800f94a:	9b02      	ldr	r3, [sp, #8]
 800f94c:	b1e3      	cbz	r3, 800f988 <__kernel_rem_pio2+0x5b8>
 800f94e:	4602      	mov	r2, r0
 800f950:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f954:	9c01      	ldr	r4, [sp, #4]
 800f956:	e9c4 2300 	strd	r2, r3, [r4]
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f962:	f7f0 fc91 	bl	8000288 <__aeabi_dsub>
 800f966:	ad4a      	add	r5, sp, #296	; 0x128
 800f968:	2401      	movs	r4, #1
 800f96a:	45a3      	cmp	fp, r4
 800f96c:	da0f      	bge.n	800f98e <__kernel_rem_pio2+0x5be>
 800f96e:	9b02      	ldr	r3, [sp, #8]
 800f970:	b113      	cbz	r3, 800f978 <__kernel_rem_pio2+0x5a8>
 800f972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f976:	4619      	mov	r1, r3
 800f978:	9b01      	ldr	r3, [sp, #4]
 800f97a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f97e:	e791      	b.n	800f8a4 <__kernel_rem_pio2+0x4d4>
 800f980:	465c      	mov	r4, fp
 800f982:	2000      	movs	r0, #0
 800f984:	2100      	movs	r1, #0
 800f986:	e7de      	b.n	800f946 <__kernel_rem_pio2+0x576>
 800f988:	4602      	mov	r2, r0
 800f98a:	460b      	mov	r3, r1
 800f98c:	e7e2      	b.n	800f954 <__kernel_rem_pio2+0x584>
 800f98e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f992:	f7f0 fc7b 	bl	800028c <__adddf3>
 800f996:	3401      	adds	r4, #1
 800f998:	e7e7      	b.n	800f96a <__kernel_rem_pio2+0x59a>
 800f99a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f99e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	4629      	mov	r1, r5
 800f9aa:	f7f0 fc6f 	bl	800028c <__adddf3>
 800f9ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	f7f0 fc65 	bl	8000288 <__aeabi_dsub>
 800f9be:	4632      	mov	r2, r6
 800f9c0:	463b      	mov	r3, r7
 800f9c2:	f7f0 fc63 	bl	800028c <__adddf3>
 800f9c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f9ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f9ce:	ed88 7b00 	vstr	d7, [r8]
 800f9d2:	f109 39ff 	add.w	r9, r9, #4294967295
 800f9d6:	e776      	b.n	800f8c6 <__kernel_rem_pio2+0x4f6>
 800f9d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800f9dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f9e0:	4640      	mov	r0, r8
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	463b      	mov	r3, r7
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	f7f0 fc50 	bl	800028c <__adddf3>
 800f9ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	f7f0 fc46 	bl	8000288 <__aeabi_dsub>
 800f9fc:	4632      	mov	r2, r6
 800f9fe:	463b      	mov	r3, r7
 800fa00:	f7f0 fc44 	bl	800028c <__adddf3>
 800fa04:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fa0c:	ed8a 7b00 	vstr	d7, [sl]
 800fa10:	3c01      	subs	r4, #1
 800fa12:	e75e      	b.n	800f8d2 <__kernel_rem_pio2+0x502>
 800fa14:	ab48      	add	r3, sp, #288	; 0x120
 800fa16:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1e:	f7f0 fc35 	bl	800028c <__adddf3>
 800fa22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa26:	e75a      	b.n	800f8de <__kernel_rem_pio2+0x50e>
 800fa28:	9b01      	ldr	r3, [sp, #4]
 800fa2a:	9a01      	ldr	r2, [sp, #4]
 800fa2c:	601d      	str	r5, [r3, #0]
 800fa2e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fa32:	605c      	str	r4, [r3, #4]
 800fa34:	609f      	str	r7, [r3, #8]
 800fa36:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fa3a:	60d3      	str	r3, [r2, #12]
 800fa3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa40:	6110      	str	r0, [r2, #16]
 800fa42:	6153      	str	r3, [r2, #20]
 800fa44:	e72e      	b.n	800f8a4 <__kernel_rem_pio2+0x4d4>
 800fa46:	bf00      	nop
 800fa48:	41700000 	.word	0x41700000
 800fa4c:	3e700000 	.word	0x3e700000

0800fa50 <__kernel_sin>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	ed2d 8b04 	vpush	{d8-d9}
 800fa58:	eeb0 8a41 	vmov.f32	s16, s2
 800fa5c:	eef0 8a61 	vmov.f32	s17, s3
 800fa60:	ec55 4b10 	vmov	r4, r5, d0
 800fa64:	b083      	sub	sp, #12
 800fa66:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa6a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fa6e:	9001      	str	r0, [sp, #4]
 800fa70:	da06      	bge.n	800fa80 <__kernel_sin+0x30>
 800fa72:	ee10 0a10 	vmov	r0, s0
 800fa76:	4629      	mov	r1, r5
 800fa78:	f7f1 f86e 	bl	8000b58 <__aeabi_d2iz>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d051      	beq.n	800fb24 <__kernel_sin+0xd4>
 800fa80:	4622      	mov	r2, r4
 800fa82:	462b      	mov	r3, r5
 800fa84:	4620      	mov	r0, r4
 800fa86:	4629      	mov	r1, r5
 800fa88:	f7f0 fdb6 	bl	80005f8 <__aeabi_dmul>
 800fa8c:	4682      	mov	sl, r0
 800fa8e:	468b      	mov	fp, r1
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
 800fa94:	4620      	mov	r0, r4
 800fa96:	4629      	mov	r1, r5
 800fa98:	f7f0 fdae 	bl	80005f8 <__aeabi_dmul>
 800fa9c:	a341      	add	r3, pc, #260	; (adr r3, 800fba4 <__kernel_sin+0x154>)
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	4680      	mov	r8, r0
 800faa4:	4689      	mov	r9, r1
 800faa6:	4650      	mov	r0, sl
 800faa8:	4659      	mov	r1, fp
 800faaa:	f7f0 fda5 	bl	80005f8 <__aeabi_dmul>
 800faae:	a33f      	add	r3, pc, #252	; (adr r3, 800fbac <__kernel_sin+0x15c>)
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fbe8 	bl	8000288 <__aeabi_dsub>
 800fab8:	4652      	mov	r2, sl
 800faba:	465b      	mov	r3, fp
 800fabc:	f7f0 fd9c 	bl	80005f8 <__aeabi_dmul>
 800fac0:	a33c      	add	r3, pc, #240	; (adr r3, 800fbb4 <__kernel_sin+0x164>)
 800fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac6:	f7f0 fbe1 	bl	800028c <__adddf3>
 800faca:	4652      	mov	r2, sl
 800facc:	465b      	mov	r3, fp
 800face:	f7f0 fd93 	bl	80005f8 <__aeabi_dmul>
 800fad2:	a33a      	add	r3, pc, #232	; (adr r3, 800fbbc <__kernel_sin+0x16c>)
 800fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad8:	f7f0 fbd6 	bl	8000288 <__aeabi_dsub>
 800fadc:	4652      	mov	r2, sl
 800fade:	465b      	mov	r3, fp
 800fae0:	f7f0 fd8a 	bl	80005f8 <__aeabi_dmul>
 800fae4:	a337      	add	r3, pc, #220	; (adr r3, 800fbc4 <__kernel_sin+0x174>)
 800fae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faea:	f7f0 fbcf 	bl	800028c <__adddf3>
 800faee:	9b01      	ldr	r3, [sp, #4]
 800faf0:	4606      	mov	r6, r0
 800faf2:	460f      	mov	r7, r1
 800faf4:	b9eb      	cbnz	r3, 800fb32 <__kernel_sin+0xe2>
 800faf6:	4602      	mov	r2, r0
 800faf8:	460b      	mov	r3, r1
 800fafa:	4650      	mov	r0, sl
 800fafc:	4659      	mov	r1, fp
 800fafe:	f7f0 fd7b 	bl	80005f8 <__aeabi_dmul>
 800fb02:	a325      	add	r3, pc, #148	; (adr r3, 800fb98 <__kernel_sin+0x148>)
 800fb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb08:	f7f0 fbbe 	bl	8000288 <__aeabi_dsub>
 800fb0c:	4642      	mov	r2, r8
 800fb0e:	464b      	mov	r3, r9
 800fb10:	f7f0 fd72 	bl	80005f8 <__aeabi_dmul>
 800fb14:	4602      	mov	r2, r0
 800fb16:	460b      	mov	r3, r1
 800fb18:	4620      	mov	r0, r4
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	f7f0 fbb6 	bl	800028c <__adddf3>
 800fb20:	4604      	mov	r4, r0
 800fb22:	460d      	mov	r5, r1
 800fb24:	ec45 4b10 	vmov	d0, r4, r5
 800fb28:	b003      	add	sp, #12
 800fb2a:	ecbd 8b04 	vpop	{d8-d9}
 800fb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb32:	4b1b      	ldr	r3, [pc, #108]	; (800fba0 <__kernel_sin+0x150>)
 800fb34:	ec51 0b18 	vmov	r0, r1, d8
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f7f0 fd5d 	bl	80005f8 <__aeabi_dmul>
 800fb3e:	4632      	mov	r2, r6
 800fb40:	ec41 0b19 	vmov	d9, r0, r1
 800fb44:	463b      	mov	r3, r7
 800fb46:	4640      	mov	r0, r8
 800fb48:	4649      	mov	r1, r9
 800fb4a:	f7f0 fd55 	bl	80005f8 <__aeabi_dmul>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	460b      	mov	r3, r1
 800fb52:	ec51 0b19 	vmov	r0, r1, d9
 800fb56:	f7f0 fb97 	bl	8000288 <__aeabi_dsub>
 800fb5a:	4652      	mov	r2, sl
 800fb5c:	465b      	mov	r3, fp
 800fb5e:	f7f0 fd4b 	bl	80005f8 <__aeabi_dmul>
 800fb62:	ec53 2b18 	vmov	r2, r3, d8
 800fb66:	f7f0 fb8f 	bl	8000288 <__aeabi_dsub>
 800fb6a:	a30b      	add	r3, pc, #44	; (adr r3, 800fb98 <__kernel_sin+0x148>)
 800fb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb70:	4606      	mov	r6, r0
 800fb72:	460f      	mov	r7, r1
 800fb74:	4640      	mov	r0, r8
 800fb76:	4649      	mov	r1, r9
 800fb78:	f7f0 fd3e 	bl	80005f8 <__aeabi_dmul>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	460b      	mov	r3, r1
 800fb80:	4630      	mov	r0, r6
 800fb82:	4639      	mov	r1, r7
 800fb84:	f7f0 fb82 	bl	800028c <__adddf3>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	4629      	mov	r1, r5
 800fb90:	f7f0 fb7a 	bl	8000288 <__aeabi_dsub>
 800fb94:	e7c4      	b.n	800fb20 <__kernel_sin+0xd0>
 800fb96:	bf00      	nop
 800fb98:	55555549 	.word	0x55555549
 800fb9c:	3fc55555 	.word	0x3fc55555
 800fba0:	3fe00000 	.word	0x3fe00000
 800fba4:	5acfd57c 	.word	0x5acfd57c
 800fba8:	3de5d93a 	.word	0x3de5d93a
 800fbac:	8a2b9ceb 	.word	0x8a2b9ceb
 800fbb0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fbb4:	57b1fe7d 	.word	0x57b1fe7d
 800fbb8:	3ec71de3 	.word	0x3ec71de3
 800fbbc:	19c161d5 	.word	0x19c161d5
 800fbc0:	3f2a01a0 	.word	0x3f2a01a0
 800fbc4:	1110f8a6 	.word	0x1110f8a6
 800fbc8:	3f811111 	.word	0x3f811111

0800fbcc <fabs>:
 800fbcc:	ec51 0b10 	vmov	r0, r1, d0
 800fbd0:	ee10 2a10 	vmov	r2, s0
 800fbd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fbd8:	ec43 2b10 	vmov	d0, r2, r3
 800fbdc:	4770      	bx	lr

0800fbde <finite>:
 800fbde:	b082      	sub	sp, #8
 800fbe0:	ed8d 0b00 	vstr	d0, [sp]
 800fbe4:	9801      	ldr	r0, [sp, #4]
 800fbe6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fbea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fbee:	0fc0      	lsrs	r0, r0, #31
 800fbf0:	b002      	add	sp, #8
 800fbf2:	4770      	bx	lr
 800fbf4:	0000      	movs	r0, r0
	...

0800fbf8 <floor>:
 800fbf8:	ec51 0b10 	vmov	r0, r1, d0
 800fbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fc04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fc08:	2e13      	cmp	r6, #19
 800fc0a:	ee10 5a10 	vmov	r5, s0
 800fc0e:	ee10 8a10 	vmov	r8, s0
 800fc12:	460c      	mov	r4, r1
 800fc14:	dc32      	bgt.n	800fc7c <floor+0x84>
 800fc16:	2e00      	cmp	r6, #0
 800fc18:	da14      	bge.n	800fc44 <floor+0x4c>
 800fc1a:	a333      	add	r3, pc, #204	; (adr r3, 800fce8 <floor+0xf0>)
 800fc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc20:	f7f0 fb34 	bl	800028c <__adddf3>
 800fc24:	2200      	movs	r2, #0
 800fc26:	2300      	movs	r3, #0
 800fc28:	f7f0 ff76 	bl	8000b18 <__aeabi_dcmpgt>
 800fc2c:	b138      	cbz	r0, 800fc3e <floor+0x46>
 800fc2e:	2c00      	cmp	r4, #0
 800fc30:	da57      	bge.n	800fce2 <floor+0xea>
 800fc32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fc36:	431d      	orrs	r5, r3
 800fc38:	d001      	beq.n	800fc3e <floor+0x46>
 800fc3a:	4c2d      	ldr	r4, [pc, #180]	; (800fcf0 <floor+0xf8>)
 800fc3c:	2500      	movs	r5, #0
 800fc3e:	4621      	mov	r1, r4
 800fc40:	4628      	mov	r0, r5
 800fc42:	e025      	b.n	800fc90 <floor+0x98>
 800fc44:	4f2b      	ldr	r7, [pc, #172]	; (800fcf4 <floor+0xfc>)
 800fc46:	4137      	asrs	r7, r6
 800fc48:	ea01 0307 	and.w	r3, r1, r7
 800fc4c:	4303      	orrs	r3, r0
 800fc4e:	d01f      	beq.n	800fc90 <floor+0x98>
 800fc50:	a325      	add	r3, pc, #148	; (adr r3, 800fce8 <floor+0xf0>)
 800fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc56:	f7f0 fb19 	bl	800028c <__adddf3>
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	f7f0 ff5b 	bl	8000b18 <__aeabi_dcmpgt>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d0eb      	beq.n	800fc3e <floor+0x46>
 800fc66:	2c00      	cmp	r4, #0
 800fc68:	bfbe      	ittt	lt
 800fc6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fc6e:	fa43 f606 	asrlt.w	r6, r3, r6
 800fc72:	19a4      	addlt	r4, r4, r6
 800fc74:	ea24 0407 	bic.w	r4, r4, r7
 800fc78:	2500      	movs	r5, #0
 800fc7a:	e7e0      	b.n	800fc3e <floor+0x46>
 800fc7c:	2e33      	cmp	r6, #51	; 0x33
 800fc7e:	dd0b      	ble.n	800fc98 <floor+0xa0>
 800fc80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fc84:	d104      	bne.n	800fc90 <floor+0x98>
 800fc86:	ee10 2a10 	vmov	r2, s0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	f7f0 fafe 	bl	800028c <__adddf3>
 800fc90:	ec41 0b10 	vmov	d0, r0, r1
 800fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800fca0:	fa23 f707 	lsr.w	r7, r3, r7
 800fca4:	4207      	tst	r7, r0
 800fca6:	d0f3      	beq.n	800fc90 <floor+0x98>
 800fca8:	a30f      	add	r3, pc, #60	; (adr r3, 800fce8 <floor+0xf0>)
 800fcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcae:	f7f0 faed 	bl	800028c <__adddf3>
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	f7f0 ff2f 	bl	8000b18 <__aeabi_dcmpgt>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d0bf      	beq.n	800fc3e <floor+0x46>
 800fcbe:	2c00      	cmp	r4, #0
 800fcc0:	da02      	bge.n	800fcc8 <floor+0xd0>
 800fcc2:	2e14      	cmp	r6, #20
 800fcc4:	d103      	bne.n	800fcce <floor+0xd6>
 800fcc6:	3401      	adds	r4, #1
 800fcc8:	ea25 0507 	bic.w	r5, r5, r7
 800fccc:	e7b7      	b.n	800fc3e <floor+0x46>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fcd4:	fa03 f606 	lsl.w	r6, r3, r6
 800fcd8:	4435      	add	r5, r6
 800fcda:	4545      	cmp	r5, r8
 800fcdc:	bf38      	it	cc
 800fcde:	18e4      	addcc	r4, r4, r3
 800fce0:	e7f2      	b.n	800fcc8 <floor+0xd0>
 800fce2:	2500      	movs	r5, #0
 800fce4:	462c      	mov	r4, r5
 800fce6:	e7aa      	b.n	800fc3e <floor+0x46>
 800fce8:	8800759c 	.word	0x8800759c
 800fcec:	7e37e43c 	.word	0x7e37e43c
 800fcf0:	bff00000 	.word	0xbff00000
 800fcf4:	000fffff 	.word	0x000fffff

0800fcf8 <nan>:
 800fcf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fd00 <nan+0x8>
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	00000000 	.word	0x00000000
 800fd04:	7ff80000 	.word	0x7ff80000

0800fd08 <rint>:
 800fd08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd0a:	ec51 0b10 	vmov	r0, r1, d0
 800fd0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fd16:	2e13      	cmp	r6, #19
 800fd18:	ee10 4a10 	vmov	r4, s0
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fd22:	dc58      	bgt.n	800fdd6 <rint+0xce>
 800fd24:	2e00      	cmp	r6, #0
 800fd26:	da2b      	bge.n	800fd80 <rint+0x78>
 800fd28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fd2c:	4302      	orrs	r2, r0
 800fd2e:	d023      	beq.n	800fd78 <rint+0x70>
 800fd30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fd34:	4302      	orrs	r2, r0
 800fd36:	4254      	negs	r4, r2
 800fd38:	4314      	orrs	r4, r2
 800fd3a:	0c4b      	lsrs	r3, r1, #17
 800fd3c:	0b24      	lsrs	r4, r4, #12
 800fd3e:	045b      	lsls	r3, r3, #17
 800fd40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fd44:	ea44 0103 	orr.w	r1, r4, r3
 800fd48:	4b32      	ldr	r3, [pc, #200]	; (800fe14 <rint+0x10c>)
 800fd4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fd4e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fd52:	4602      	mov	r2, r0
 800fd54:	460b      	mov	r3, r1
 800fd56:	4630      	mov	r0, r6
 800fd58:	4639      	mov	r1, r7
 800fd5a:	f7f0 fa97 	bl	800028c <__adddf3>
 800fd5e:	e9cd 0100 	strd	r0, r1, [sp]
 800fd62:	463b      	mov	r3, r7
 800fd64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd68:	4632      	mov	r2, r6
 800fd6a:	f7f0 fa8d 	bl	8000288 <__aeabi_dsub>
 800fd6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fd76:	4639      	mov	r1, r7
 800fd78:	ec41 0b10 	vmov	d0, r0, r1
 800fd7c:	b003      	add	sp, #12
 800fd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd80:	4a25      	ldr	r2, [pc, #148]	; (800fe18 <rint+0x110>)
 800fd82:	4132      	asrs	r2, r6
 800fd84:	ea01 0702 	and.w	r7, r1, r2
 800fd88:	4307      	orrs	r7, r0
 800fd8a:	d0f5      	beq.n	800fd78 <rint+0x70>
 800fd8c:	0851      	lsrs	r1, r2, #1
 800fd8e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800fd92:	4314      	orrs	r4, r2
 800fd94:	d00c      	beq.n	800fdb0 <rint+0xa8>
 800fd96:	ea23 0201 	bic.w	r2, r3, r1
 800fd9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fd9e:	2e13      	cmp	r6, #19
 800fda0:	fa43 f606 	asr.w	r6, r3, r6
 800fda4:	bf0c      	ite	eq
 800fda6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fdaa:	2400      	movne	r4, #0
 800fdac:	ea42 0306 	orr.w	r3, r2, r6
 800fdb0:	4918      	ldr	r1, [pc, #96]	; (800fe14 <rint+0x10c>)
 800fdb2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fdb6:	4622      	mov	r2, r4
 800fdb8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	f7f0 fa64 	bl	800028c <__adddf3>
 800fdc4:	e9cd 0100 	strd	r0, r1, [sp]
 800fdc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdcc:	4622      	mov	r2, r4
 800fdce:	462b      	mov	r3, r5
 800fdd0:	f7f0 fa5a 	bl	8000288 <__aeabi_dsub>
 800fdd4:	e7d0      	b.n	800fd78 <rint+0x70>
 800fdd6:	2e33      	cmp	r6, #51	; 0x33
 800fdd8:	dd07      	ble.n	800fdea <rint+0xe2>
 800fdda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fdde:	d1cb      	bne.n	800fd78 <rint+0x70>
 800fde0:	ee10 2a10 	vmov	r2, s0
 800fde4:	f7f0 fa52 	bl	800028c <__adddf3>
 800fde8:	e7c6      	b.n	800fd78 <rint+0x70>
 800fdea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fdee:	f04f 36ff 	mov.w	r6, #4294967295
 800fdf2:	40d6      	lsrs	r6, r2
 800fdf4:	4230      	tst	r0, r6
 800fdf6:	d0bf      	beq.n	800fd78 <rint+0x70>
 800fdf8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800fdfc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800fe00:	bf1f      	itttt	ne
 800fe02:	ea24 0101 	bicne.w	r1, r4, r1
 800fe06:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fe0a:	fa44 f202 	asrne.w	r2, r4, r2
 800fe0e:	ea41 0402 	orrne.w	r4, r1, r2
 800fe12:	e7cd      	b.n	800fdb0 <rint+0xa8>
 800fe14:	08067880 	.word	0x08067880
 800fe18:	000fffff 	.word	0x000fffff
 800fe1c:	00000000 	.word	0x00000000

0800fe20 <scalbn>:
 800fe20:	b570      	push	{r4, r5, r6, lr}
 800fe22:	ec55 4b10 	vmov	r4, r5, d0
 800fe26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	462b      	mov	r3, r5
 800fe2e:	b99a      	cbnz	r2, 800fe58 <scalbn+0x38>
 800fe30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fe34:	4323      	orrs	r3, r4
 800fe36:	d036      	beq.n	800fea6 <scalbn+0x86>
 800fe38:	4b39      	ldr	r3, [pc, #228]	; (800ff20 <scalbn+0x100>)
 800fe3a:	4629      	mov	r1, r5
 800fe3c:	ee10 0a10 	vmov	r0, s0
 800fe40:	2200      	movs	r2, #0
 800fe42:	f7f0 fbd9 	bl	80005f8 <__aeabi_dmul>
 800fe46:	4b37      	ldr	r3, [pc, #220]	; (800ff24 <scalbn+0x104>)
 800fe48:	429e      	cmp	r6, r3
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	da10      	bge.n	800fe72 <scalbn+0x52>
 800fe50:	a32b      	add	r3, pc, #172	; (adr r3, 800ff00 <scalbn+0xe0>)
 800fe52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe56:	e03a      	b.n	800fece <scalbn+0xae>
 800fe58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fe5c:	428a      	cmp	r2, r1
 800fe5e:	d10c      	bne.n	800fe7a <scalbn+0x5a>
 800fe60:	ee10 2a10 	vmov	r2, s0
 800fe64:	4620      	mov	r0, r4
 800fe66:	4629      	mov	r1, r5
 800fe68:	f7f0 fa10 	bl	800028c <__adddf3>
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	460d      	mov	r5, r1
 800fe70:	e019      	b.n	800fea6 <scalbn+0x86>
 800fe72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fe76:	460b      	mov	r3, r1
 800fe78:	3a36      	subs	r2, #54	; 0x36
 800fe7a:	4432      	add	r2, r6
 800fe7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fe80:	428a      	cmp	r2, r1
 800fe82:	dd08      	ble.n	800fe96 <scalbn+0x76>
 800fe84:	2d00      	cmp	r5, #0
 800fe86:	a120      	add	r1, pc, #128	; (adr r1, 800ff08 <scalbn+0xe8>)
 800fe88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe8c:	da1c      	bge.n	800fec8 <scalbn+0xa8>
 800fe8e:	a120      	add	r1, pc, #128	; (adr r1, 800ff10 <scalbn+0xf0>)
 800fe90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe94:	e018      	b.n	800fec8 <scalbn+0xa8>
 800fe96:	2a00      	cmp	r2, #0
 800fe98:	dd08      	ble.n	800feac <scalbn+0x8c>
 800fe9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fe9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fea2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fea6:	ec45 4b10 	vmov	d0, r4, r5
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800feb0:	da19      	bge.n	800fee6 <scalbn+0xc6>
 800feb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800feb6:	429e      	cmp	r6, r3
 800feb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800febc:	dd0a      	ble.n	800fed4 <scalbn+0xb4>
 800febe:	a112      	add	r1, pc, #72	; (adr r1, 800ff08 <scalbn+0xe8>)
 800fec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1e2      	bne.n	800fe8e <scalbn+0x6e>
 800fec8:	a30f      	add	r3, pc, #60	; (adr r3, 800ff08 <scalbn+0xe8>)
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	f7f0 fb93 	bl	80005f8 <__aeabi_dmul>
 800fed2:	e7cb      	b.n	800fe6c <scalbn+0x4c>
 800fed4:	a10a      	add	r1, pc, #40	; (adr r1, 800ff00 <scalbn+0xe0>)
 800fed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d0b8      	beq.n	800fe50 <scalbn+0x30>
 800fede:	a10e      	add	r1, pc, #56	; (adr r1, 800ff18 <scalbn+0xf8>)
 800fee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fee4:	e7b4      	b.n	800fe50 <scalbn+0x30>
 800fee6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800feea:	3236      	adds	r2, #54	; 0x36
 800feec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fef0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fef4:	4620      	mov	r0, r4
 800fef6:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <scalbn+0x108>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	e7e8      	b.n	800fece <scalbn+0xae>
 800fefc:	f3af 8000 	nop.w
 800ff00:	c2f8f359 	.word	0xc2f8f359
 800ff04:	01a56e1f 	.word	0x01a56e1f
 800ff08:	8800759c 	.word	0x8800759c
 800ff0c:	7e37e43c 	.word	0x7e37e43c
 800ff10:	8800759c 	.word	0x8800759c
 800ff14:	fe37e43c 	.word	0xfe37e43c
 800ff18:	c2f8f359 	.word	0xc2f8f359
 800ff1c:	81a56e1f 	.word	0x81a56e1f
 800ff20:	43500000 	.word	0x43500000
 800ff24:	ffff3cb0 	.word	0xffff3cb0
 800ff28:	3c900000 	.word	0x3c900000

0800ff2c <finitef>:
 800ff2c:	b082      	sub	sp, #8
 800ff2e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ff32:	9801      	ldr	r0, [sp, #4]
 800ff34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ff38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ff3c:	bfac      	ite	ge
 800ff3e:	2000      	movge	r0, #0
 800ff40:	2001      	movlt	r0, #1
 800ff42:	b002      	add	sp, #8
 800ff44:	4770      	bx	lr
	...

0800ff48 <nanf>:
 800ff48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ff50 <nanf+0x8>
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	7fc00000 	.word	0x7fc00000

0800ff54 <abort>:
 800ff54:	b508      	push	{r3, lr}
 800ff56:	2006      	movs	r0, #6
 800ff58:	f000 f936 	bl	80101c8 <raise>
 800ff5c:	2001      	movs	r0, #1
 800ff5e:	f7f3 ff55 	bl	8003e0c <_exit>
	...

0800ff64 <__errno>:
 800ff64:	4b01      	ldr	r3, [pc, #4]	; (800ff6c <__errno+0x8>)
 800ff66:	6818      	ldr	r0, [r3, #0]
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop
 800ff6c:	20000c28 	.word	0x20000c28

0800ff70 <__libc_init_array>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	4d0d      	ldr	r5, [pc, #52]	; (800ffa8 <__libc_init_array+0x38>)
 800ff74:	4c0d      	ldr	r4, [pc, #52]	; (800ffac <__libc_init_array+0x3c>)
 800ff76:	1b64      	subs	r4, r4, r5
 800ff78:	10a4      	asrs	r4, r4, #2
 800ff7a:	2600      	movs	r6, #0
 800ff7c:	42a6      	cmp	r6, r4
 800ff7e:	d109      	bne.n	800ff94 <__libc_init_array+0x24>
 800ff80:	4d0b      	ldr	r5, [pc, #44]	; (800ffb0 <__libc_init_array+0x40>)
 800ff82:	4c0c      	ldr	r4, [pc, #48]	; (800ffb4 <__libc_init_array+0x44>)
 800ff84:	f000 fcaa 	bl	80108dc <_init>
 800ff88:	1b64      	subs	r4, r4, r5
 800ff8a:	10a4      	asrs	r4, r4, #2
 800ff8c:	2600      	movs	r6, #0
 800ff8e:	42a6      	cmp	r6, r4
 800ff90:	d105      	bne.n	800ff9e <__libc_init_array+0x2e>
 800ff92:	bd70      	pop	{r4, r5, r6, pc}
 800ff94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff98:	4798      	blx	r3
 800ff9a:	3601      	adds	r6, #1
 800ff9c:	e7ee      	b.n	800ff7c <__libc_init_array+0xc>
 800ff9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffa2:	4798      	blx	r3
 800ffa4:	3601      	adds	r6, #1
 800ffa6:	e7f2      	b.n	800ff8e <__libc_init_array+0x1e>
 800ffa8:	080678cc 	.word	0x080678cc
 800ffac:	080678cc 	.word	0x080678cc
 800ffb0:	080678cc 	.word	0x080678cc
 800ffb4:	080678d0 	.word	0x080678d0

0800ffb8 <malloc>:
 800ffb8:	4b02      	ldr	r3, [pc, #8]	; (800ffc4 <malloc+0xc>)
 800ffba:	4601      	mov	r1, r0
 800ffbc:	6818      	ldr	r0, [r3, #0]
 800ffbe:	f000 b871 	b.w	80100a4 <_malloc_r>
 800ffc2:	bf00      	nop
 800ffc4:	20000c28 	.word	0x20000c28

0800ffc8 <free>:
 800ffc8:	4b02      	ldr	r3, [pc, #8]	; (800ffd4 <free+0xc>)
 800ffca:	4601      	mov	r1, r0
 800ffcc:	6818      	ldr	r0, [r3, #0]
 800ffce:	f000 b819 	b.w	8010004 <_free_r>
 800ffd2:	bf00      	nop
 800ffd4:	20000c28 	.word	0x20000c28

0800ffd8 <memcpy>:
 800ffd8:	440a      	add	r2, r1
 800ffda:	4291      	cmp	r1, r2
 800ffdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ffe0:	d100      	bne.n	800ffe4 <memcpy+0xc>
 800ffe2:	4770      	bx	lr
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffee:	4291      	cmp	r1, r2
 800fff0:	d1f9      	bne.n	800ffe6 <memcpy+0xe>
 800fff2:	bd10      	pop	{r4, pc}

0800fff4 <memset>:
 800fff4:	4402      	add	r2, r0
 800fff6:	4603      	mov	r3, r0
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d100      	bne.n	800fffe <memset+0xa>
 800fffc:	4770      	bx	lr
 800fffe:	f803 1b01 	strb.w	r1, [r3], #1
 8010002:	e7f9      	b.n	800fff8 <memset+0x4>

08010004 <_free_r>:
 8010004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010006:	2900      	cmp	r1, #0
 8010008:	d048      	beq.n	801009c <_free_r+0x98>
 801000a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801000e:	9001      	str	r0, [sp, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	f1a1 0404 	sub.w	r4, r1, #4
 8010016:	bfb8      	it	lt
 8010018:	18e4      	addlt	r4, r4, r3
 801001a:	f000 f919 	bl	8010250 <__malloc_lock>
 801001e:	4a20      	ldr	r2, [pc, #128]	; (80100a0 <_free_r+0x9c>)
 8010020:	9801      	ldr	r0, [sp, #4]
 8010022:	6813      	ldr	r3, [r2, #0]
 8010024:	4615      	mov	r5, r2
 8010026:	b933      	cbnz	r3, 8010036 <_free_r+0x32>
 8010028:	6063      	str	r3, [r4, #4]
 801002a:	6014      	str	r4, [r2, #0]
 801002c:	b003      	add	sp, #12
 801002e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010032:	f000 b913 	b.w	801025c <__malloc_unlock>
 8010036:	42a3      	cmp	r3, r4
 8010038:	d90b      	bls.n	8010052 <_free_r+0x4e>
 801003a:	6821      	ldr	r1, [r4, #0]
 801003c:	1862      	adds	r2, r4, r1
 801003e:	4293      	cmp	r3, r2
 8010040:	bf04      	itt	eq
 8010042:	681a      	ldreq	r2, [r3, #0]
 8010044:	685b      	ldreq	r3, [r3, #4]
 8010046:	6063      	str	r3, [r4, #4]
 8010048:	bf04      	itt	eq
 801004a:	1852      	addeq	r2, r2, r1
 801004c:	6022      	streq	r2, [r4, #0]
 801004e:	602c      	str	r4, [r5, #0]
 8010050:	e7ec      	b.n	801002c <_free_r+0x28>
 8010052:	461a      	mov	r2, r3
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	b10b      	cbz	r3, 801005c <_free_r+0x58>
 8010058:	42a3      	cmp	r3, r4
 801005a:	d9fa      	bls.n	8010052 <_free_r+0x4e>
 801005c:	6811      	ldr	r1, [r2, #0]
 801005e:	1855      	adds	r5, r2, r1
 8010060:	42a5      	cmp	r5, r4
 8010062:	d10b      	bne.n	801007c <_free_r+0x78>
 8010064:	6824      	ldr	r4, [r4, #0]
 8010066:	4421      	add	r1, r4
 8010068:	1854      	adds	r4, r2, r1
 801006a:	42a3      	cmp	r3, r4
 801006c:	6011      	str	r1, [r2, #0]
 801006e:	d1dd      	bne.n	801002c <_free_r+0x28>
 8010070:	681c      	ldr	r4, [r3, #0]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	6053      	str	r3, [r2, #4]
 8010076:	4421      	add	r1, r4
 8010078:	6011      	str	r1, [r2, #0]
 801007a:	e7d7      	b.n	801002c <_free_r+0x28>
 801007c:	d902      	bls.n	8010084 <_free_r+0x80>
 801007e:	230c      	movs	r3, #12
 8010080:	6003      	str	r3, [r0, #0]
 8010082:	e7d3      	b.n	801002c <_free_r+0x28>
 8010084:	6825      	ldr	r5, [r4, #0]
 8010086:	1961      	adds	r1, r4, r5
 8010088:	428b      	cmp	r3, r1
 801008a:	bf04      	itt	eq
 801008c:	6819      	ldreq	r1, [r3, #0]
 801008e:	685b      	ldreq	r3, [r3, #4]
 8010090:	6063      	str	r3, [r4, #4]
 8010092:	bf04      	itt	eq
 8010094:	1949      	addeq	r1, r1, r5
 8010096:	6021      	streq	r1, [r4, #0]
 8010098:	6054      	str	r4, [r2, #4]
 801009a:	e7c7      	b.n	801002c <_free_r+0x28>
 801009c:	b003      	add	sp, #12
 801009e:	bd30      	pop	{r4, r5, pc}
 80100a0:	2000106c 	.word	0x2000106c

080100a4 <_malloc_r>:
 80100a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a6:	1ccd      	adds	r5, r1, #3
 80100a8:	f025 0503 	bic.w	r5, r5, #3
 80100ac:	3508      	adds	r5, #8
 80100ae:	2d0c      	cmp	r5, #12
 80100b0:	bf38      	it	cc
 80100b2:	250c      	movcc	r5, #12
 80100b4:	2d00      	cmp	r5, #0
 80100b6:	4606      	mov	r6, r0
 80100b8:	db01      	blt.n	80100be <_malloc_r+0x1a>
 80100ba:	42a9      	cmp	r1, r5
 80100bc:	d903      	bls.n	80100c6 <_malloc_r+0x22>
 80100be:	230c      	movs	r3, #12
 80100c0:	6033      	str	r3, [r6, #0]
 80100c2:	2000      	movs	r0, #0
 80100c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100c6:	f000 f8c3 	bl	8010250 <__malloc_lock>
 80100ca:	4921      	ldr	r1, [pc, #132]	; (8010150 <_malloc_r+0xac>)
 80100cc:	680a      	ldr	r2, [r1, #0]
 80100ce:	4614      	mov	r4, r2
 80100d0:	b99c      	cbnz	r4, 80100fa <_malloc_r+0x56>
 80100d2:	4f20      	ldr	r7, [pc, #128]	; (8010154 <_malloc_r+0xb0>)
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	b923      	cbnz	r3, 80100e2 <_malloc_r+0x3e>
 80100d8:	4621      	mov	r1, r4
 80100da:	4630      	mov	r0, r6
 80100dc:	f000 f83c 	bl	8010158 <_sbrk_r>
 80100e0:	6038      	str	r0, [r7, #0]
 80100e2:	4629      	mov	r1, r5
 80100e4:	4630      	mov	r0, r6
 80100e6:	f000 f837 	bl	8010158 <_sbrk_r>
 80100ea:	1c43      	adds	r3, r0, #1
 80100ec:	d123      	bne.n	8010136 <_malloc_r+0x92>
 80100ee:	230c      	movs	r3, #12
 80100f0:	6033      	str	r3, [r6, #0]
 80100f2:	4630      	mov	r0, r6
 80100f4:	f000 f8b2 	bl	801025c <__malloc_unlock>
 80100f8:	e7e3      	b.n	80100c2 <_malloc_r+0x1e>
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	1b5b      	subs	r3, r3, r5
 80100fe:	d417      	bmi.n	8010130 <_malloc_r+0x8c>
 8010100:	2b0b      	cmp	r3, #11
 8010102:	d903      	bls.n	801010c <_malloc_r+0x68>
 8010104:	6023      	str	r3, [r4, #0]
 8010106:	441c      	add	r4, r3
 8010108:	6025      	str	r5, [r4, #0]
 801010a:	e004      	b.n	8010116 <_malloc_r+0x72>
 801010c:	6863      	ldr	r3, [r4, #4]
 801010e:	42a2      	cmp	r2, r4
 8010110:	bf0c      	ite	eq
 8010112:	600b      	streq	r3, [r1, #0]
 8010114:	6053      	strne	r3, [r2, #4]
 8010116:	4630      	mov	r0, r6
 8010118:	f000 f8a0 	bl	801025c <__malloc_unlock>
 801011c:	f104 000b 	add.w	r0, r4, #11
 8010120:	1d23      	adds	r3, r4, #4
 8010122:	f020 0007 	bic.w	r0, r0, #7
 8010126:	1ac2      	subs	r2, r0, r3
 8010128:	d0cc      	beq.n	80100c4 <_malloc_r+0x20>
 801012a:	1a1b      	subs	r3, r3, r0
 801012c:	50a3      	str	r3, [r4, r2]
 801012e:	e7c9      	b.n	80100c4 <_malloc_r+0x20>
 8010130:	4622      	mov	r2, r4
 8010132:	6864      	ldr	r4, [r4, #4]
 8010134:	e7cc      	b.n	80100d0 <_malloc_r+0x2c>
 8010136:	1cc4      	adds	r4, r0, #3
 8010138:	f024 0403 	bic.w	r4, r4, #3
 801013c:	42a0      	cmp	r0, r4
 801013e:	d0e3      	beq.n	8010108 <_malloc_r+0x64>
 8010140:	1a21      	subs	r1, r4, r0
 8010142:	4630      	mov	r0, r6
 8010144:	f000 f808 	bl	8010158 <_sbrk_r>
 8010148:	3001      	adds	r0, #1
 801014a:	d1dd      	bne.n	8010108 <_malloc_r+0x64>
 801014c:	e7cf      	b.n	80100ee <_malloc_r+0x4a>
 801014e:	bf00      	nop
 8010150:	2000106c 	.word	0x2000106c
 8010154:	20001070 	.word	0x20001070

08010158 <_sbrk_r>:
 8010158:	b538      	push	{r3, r4, r5, lr}
 801015a:	4d06      	ldr	r5, [pc, #24]	; (8010174 <_sbrk_r+0x1c>)
 801015c:	2300      	movs	r3, #0
 801015e:	4604      	mov	r4, r0
 8010160:	4608      	mov	r0, r1
 8010162:	602b      	str	r3, [r5, #0]
 8010164:	f7f3 fe5c 	bl	8003e20 <_sbrk>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	d102      	bne.n	8010172 <_sbrk_r+0x1a>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	b103      	cbz	r3, 8010172 <_sbrk_r+0x1a>
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	bd38      	pop	{r3, r4, r5, pc}
 8010174:	20001108 	.word	0x20001108

08010178 <_raise_r>:
 8010178:	291f      	cmp	r1, #31
 801017a:	b538      	push	{r3, r4, r5, lr}
 801017c:	4604      	mov	r4, r0
 801017e:	460d      	mov	r5, r1
 8010180:	d904      	bls.n	801018c <_raise_r+0x14>
 8010182:	2316      	movs	r3, #22
 8010184:	6003      	str	r3, [r0, #0]
 8010186:	f04f 30ff 	mov.w	r0, #4294967295
 801018a:	bd38      	pop	{r3, r4, r5, pc}
 801018c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801018e:	b112      	cbz	r2, 8010196 <_raise_r+0x1e>
 8010190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010194:	b94b      	cbnz	r3, 80101aa <_raise_r+0x32>
 8010196:	4620      	mov	r0, r4
 8010198:	f000 f830 	bl	80101fc <_getpid_r>
 801019c:	462a      	mov	r2, r5
 801019e:	4601      	mov	r1, r0
 80101a0:	4620      	mov	r0, r4
 80101a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101a6:	f000 b817 	b.w	80101d8 <_kill_r>
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d00a      	beq.n	80101c4 <_raise_r+0x4c>
 80101ae:	1c59      	adds	r1, r3, #1
 80101b0:	d103      	bne.n	80101ba <_raise_r+0x42>
 80101b2:	2316      	movs	r3, #22
 80101b4:	6003      	str	r3, [r0, #0]
 80101b6:	2001      	movs	r0, #1
 80101b8:	e7e7      	b.n	801018a <_raise_r+0x12>
 80101ba:	2400      	movs	r4, #0
 80101bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101c0:	4628      	mov	r0, r5
 80101c2:	4798      	blx	r3
 80101c4:	2000      	movs	r0, #0
 80101c6:	e7e0      	b.n	801018a <_raise_r+0x12>

080101c8 <raise>:
 80101c8:	4b02      	ldr	r3, [pc, #8]	; (80101d4 <raise+0xc>)
 80101ca:	4601      	mov	r1, r0
 80101cc:	6818      	ldr	r0, [r3, #0]
 80101ce:	f7ff bfd3 	b.w	8010178 <_raise_r>
 80101d2:	bf00      	nop
 80101d4:	20000c28 	.word	0x20000c28

080101d8 <_kill_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	4d07      	ldr	r5, [pc, #28]	; (80101f8 <_kill_r+0x20>)
 80101dc:	2300      	movs	r3, #0
 80101de:	4604      	mov	r4, r0
 80101e0:	4608      	mov	r0, r1
 80101e2:	4611      	mov	r1, r2
 80101e4:	602b      	str	r3, [r5, #0]
 80101e6:	f7f3 fe01 	bl	8003dec <_kill>
 80101ea:	1c43      	adds	r3, r0, #1
 80101ec:	d102      	bne.n	80101f4 <_kill_r+0x1c>
 80101ee:	682b      	ldr	r3, [r5, #0]
 80101f0:	b103      	cbz	r3, 80101f4 <_kill_r+0x1c>
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	bd38      	pop	{r3, r4, r5, pc}
 80101f6:	bf00      	nop
 80101f8:	20001108 	.word	0x20001108

080101fc <_getpid_r>:
 80101fc:	f7f3 bdee 	b.w	8003ddc <_getpid>

08010200 <siprintf>:
 8010200:	b40e      	push	{r1, r2, r3}
 8010202:	b500      	push	{lr}
 8010204:	b09c      	sub	sp, #112	; 0x70
 8010206:	ab1d      	add	r3, sp, #116	; 0x74
 8010208:	9002      	str	r0, [sp, #8]
 801020a:	9006      	str	r0, [sp, #24]
 801020c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010210:	4809      	ldr	r0, [pc, #36]	; (8010238 <siprintf+0x38>)
 8010212:	9107      	str	r1, [sp, #28]
 8010214:	9104      	str	r1, [sp, #16]
 8010216:	4909      	ldr	r1, [pc, #36]	; (801023c <siprintf+0x3c>)
 8010218:	f853 2b04 	ldr.w	r2, [r3], #4
 801021c:	9105      	str	r1, [sp, #20]
 801021e:	6800      	ldr	r0, [r0, #0]
 8010220:	9301      	str	r3, [sp, #4]
 8010222:	a902      	add	r1, sp, #8
 8010224:	f000 f8a2 	bl	801036c <_svfiprintf_r>
 8010228:	9b02      	ldr	r3, [sp, #8]
 801022a:	2200      	movs	r2, #0
 801022c:	701a      	strb	r2, [r3, #0]
 801022e:	b01c      	add	sp, #112	; 0x70
 8010230:	f85d eb04 	ldr.w	lr, [sp], #4
 8010234:	b003      	add	sp, #12
 8010236:	4770      	bx	lr
 8010238:	20000c28 	.word	0x20000c28
 801023c:	ffff0208 	.word	0xffff0208

08010240 <strcpy>:
 8010240:	4603      	mov	r3, r0
 8010242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010246:	f803 2b01 	strb.w	r2, [r3], #1
 801024a:	2a00      	cmp	r2, #0
 801024c:	d1f9      	bne.n	8010242 <strcpy+0x2>
 801024e:	4770      	bx	lr

08010250 <__malloc_lock>:
 8010250:	4801      	ldr	r0, [pc, #4]	; (8010258 <__malloc_lock+0x8>)
 8010252:	f000 bb1f 	b.w	8010894 <__retarget_lock_acquire_recursive>
 8010256:	bf00      	nop
 8010258:	20001110 	.word	0x20001110

0801025c <__malloc_unlock>:
 801025c:	4801      	ldr	r0, [pc, #4]	; (8010264 <__malloc_unlock+0x8>)
 801025e:	f000 bb1a 	b.w	8010896 <__retarget_lock_release_recursive>
 8010262:	bf00      	nop
 8010264:	20001110 	.word	0x20001110

08010268 <_realloc_r>:
 8010268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026a:	4607      	mov	r7, r0
 801026c:	4614      	mov	r4, r2
 801026e:	460e      	mov	r6, r1
 8010270:	b921      	cbnz	r1, 801027c <_realloc_r+0x14>
 8010272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010276:	4611      	mov	r1, r2
 8010278:	f7ff bf14 	b.w	80100a4 <_malloc_r>
 801027c:	b922      	cbnz	r2, 8010288 <_realloc_r+0x20>
 801027e:	f7ff fec1 	bl	8010004 <_free_r>
 8010282:	4625      	mov	r5, r4
 8010284:	4628      	mov	r0, r5
 8010286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010288:	f000 fb20 	bl	80108cc <_malloc_usable_size_r>
 801028c:	42a0      	cmp	r0, r4
 801028e:	d20f      	bcs.n	80102b0 <_realloc_r+0x48>
 8010290:	4621      	mov	r1, r4
 8010292:	4638      	mov	r0, r7
 8010294:	f7ff ff06 	bl	80100a4 <_malloc_r>
 8010298:	4605      	mov	r5, r0
 801029a:	2800      	cmp	r0, #0
 801029c:	d0f2      	beq.n	8010284 <_realloc_r+0x1c>
 801029e:	4631      	mov	r1, r6
 80102a0:	4622      	mov	r2, r4
 80102a2:	f7ff fe99 	bl	800ffd8 <memcpy>
 80102a6:	4631      	mov	r1, r6
 80102a8:	4638      	mov	r0, r7
 80102aa:	f7ff feab 	bl	8010004 <_free_r>
 80102ae:	e7e9      	b.n	8010284 <_realloc_r+0x1c>
 80102b0:	4635      	mov	r5, r6
 80102b2:	e7e7      	b.n	8010284 <_realloc_r+0x1c>

080102b4 <__ssputs_r>:
 80102b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b8:	688e      	ldr	r6, [r1, #8]
 80102ba:	429e      	cmp	r6, r3
 80102bc:	4682      	mov	sl, r0
 80102be:	460c      	mov	r4, r1
 80102c0:	4690      	mov	r8, r2
 80102c2:	461f      	mov	r7, r3
 80102c4:	d838      	bhi.n	8010338 <__ssputs_r+0x84>
 80102c6:	898a      	ldrh	r2, [r1, #12]
 80102c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102cc:	d032      	beq.n	8010334 <__ssputs_r+0x80>
 80102ce:	6825      	ldr	r5, [r4, #0]
 80102d0:	6909      	ldr	r1, [r1, #16]
 80102d2:	eba5 0901 	sub.w	r9, r5, r1
 80102d6:	6965      	ldr	r5, [r4, #20]
 80102d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102e0:	3301      	adds	r3, #1
 80102e2:	444b      	add	r3, r9
 80102e4:	106d      	asrs	r5, r5, #1
 80102e6:	429d      	cmp	r5, r3
 80102e8:	bf38      	it	cc
 80102ea:	461d      	movcc	r5, r3
 80102ec:	0553      	lsls	r3, r2, #21
 80102ee:	d531      	bpl.n	8010354 <__ssputs_r+0xa0>
 80102f0:	4629      	mov	r1, r5
 80102f2:	f7ff fed7 	bl	80100a4 <_malloc_r>
 80102f6:	4606      	mov	r6, r0
 80102f8:	b950      	cbnz	r0, 8010310 <__ssputs_r+0x5c>
 80102fa:	230c      	movs	r3, #12
 80102fc:	f8ca 3000 	str.w	r3, [sl]
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010306:	81a3      	strh	r3, [r4, #12]
 8010308:	f04f 30ff 	mov.w	r0, #4294967295
 801030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010310:	6921      	ldr	r1, [r4, #16]
 8010312:	464a      	mov	r2, r9
 8010314:	f7ff fe60 	bl	800ffd8 <memcpy>
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801031e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010322:	81a3      	strh	r3, [r4, #12]
 8010324:	6126      	str	r6, [r4, #16]
 8010326:	6165      	str	r5, [r4, #20]
 8010328:	444e      	add	r6, r9
 801032a:	eba5 0509 	sub.w	r5, r5, r9
 801032e:	6026      	str	r6, [r4, #0]
 8010330:	60a5      	str	r5, [r4, #8]
 8010332:	463e      	mov	r6, r7
 8010334:	42be      	cmp	r6, r7
 8010336:	d900      	bls.n	801033a <__ssputs_r+0x86>
 8010338:	463e      	mov	r6, r7
 801033a:	4632      	mov	r2, r6
 801033c:	6820      	ldr	r0, [r4, #0]
 801033e:	4641      	mov	r1, r8
 8010340:	f000 faaa 	bl	8010898 <memmove>
 8010344:	68a3      	ldr	r3, [r4, #8]
 8010346:	6822      	ldr	r2, [r4, #0]
 8010348:	1b9b      	subs	r3, r3, r6
 801034a:	4432      	add	r2, r6
 801034c:	60a3      	str	r3, [r4, #8]
 801034e:	6022      	str	r2, [r4, #0]
 8010350:	2000      	movs	r0, #0
 8010352:	e7db      	b.n	801030c <__ssputs_r+0x58>
 8010354:	462a      	mov	r2, r5
 8010356:	f7ff ff87 	bl	8010268 <_realloc_r>
 801035a:	4606      	mov	r6, r0
 801035c:	2800      	cmp	r0, #0
 801035e:	d1e1      	bne.n	8010324 <__ssputs_r+0x70>
 8010360:	6921      	ldr	r1, [r4, #16]
 8010362:	4650      	mov	r0, sl
 8010364:	f7ff fe4e 	bl	8010004 <_free_r>
 8010368:	e7c7      	b.n	80102fa <__ssputs_r+0x46>
	...

0801036c <_svfiprintf_r>:
 801036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	4698      	mov	r8, r3
 8010372:	898b      	ldrh	r3, [r1, #12]
 8010374:	061b      	lsls	r3, r3, #24
 8010376:	b09d      	sub	sp, #116	; 0x74
 8010378:	4607      	mov	r7, r0
 801037a:	460d      	mov	r5, r1
 801037c:	4614      	mov	r4, r2
 801037e:	d50e      	bpl.n	801039e <_svfiprintf_r+0x32>
 8010380:	690b      	ldr	r3, [r1, #16]
 8010382:	b963      	cbnz	r3, 801039e <_svfiprintf_r+0x32>
 8010384:	2140      	movs	r1, #64	; 0x40
 8010386:	f7ff fe8d 	bl	80100a4 <_malloc_r>
 801038a:	6028      	str	r0, [r5, #0]
 801038c:	6128      	str	r0, [r5, #16]
 801038e:	b920      	cbnz	r0, 801039a <_svfiprintf_r+0x2e>
 8010390:	230c      	movs	r3, #12
 8010392:	603b      	str	r3, [r7, #0]
 8010394:	f04f 30ff 	mov.w	r0, #4294967295
 8010398:	e0d1      	b.n	801053e <_svfiprintf_r+0x1d2>
 801039a:	2340      	movs	r3, #64	; 0x40
 801039c:	616b      	str	r3, [r5, #20]
 801039e:	2300      	movs	r3, #0
 80103a0:	9309      	str	r3, [sp, #36]	; 0x24
 80103a2:	2320      	movs	r3, #32
 80103a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80103ac:	2330      	movs	r3, #48	; 0x30
 80103ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010558 <_svfiprintf_r+0x1ec>
 80103b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103b6:	f04f 0901 	mov.w	r9, #1
 80103ba:	4623      	mov	r3, r4
 80103bc:	469a      	mov	sl, r3
 80103be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103c2:	b10a      	cbz	r2, 80103c8 <_svfiprintf_r+0x5c>
 80103c4:	2a25      	cmp	r2, #37	; 0x25
 80103c6:	d1f9      	bne.n	80103bc <_svfiprintf_r+0x50>
 80103c8:	ebba 0b04 	subs.w	fp, sl, r4
 80103cc:	d00b      	beq.n	80103e6 <_svfiprintf_r+0x7a>
 80103ce:	465b      	mov	r3, fp
 80103d0:	4622      	mov	r2, r4
 80103d2:	4629      	mov	r1, r5
 80103d4:	4638      	mov	r0, r7
 80103d6:	f7ff ff6d 	bl	80102b4 <__ssputs_r>
 80103da:	3001      	adds	r0, #1
 80103dc:	f000 80aa 	beq.w	8010534 <_svfiprintf_r+0x1c8>
 80103e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103e2:	445a      	add	r2, fp
 80103e4:	9209      	str	r2, [sp, #36]	; 0x24
 80103e6:	f89a 3000 	ldrb.w	r3, [sl]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 80a2 	beq.w	8010534 <_svfiprintf_r+0x1c8>
 80103f0:	2300      	movs	r3, #0
 80103f2:	f04f 32ff 	mov.w	r2, #4294967295
 80103f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103fa:	f10a 0a01 	add.w	sl, sl, #1
 80103fe:	9304      	str	r3, [sp, #16]
 8010400:	9307      	str	r3, [sp, #28]
 8010402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010406:	931a      	str	r3, [sp, #104]	; 0x68
 8010408:	4654      	mov	r4, sl
 801040a:	2205      	movs	r2, #5
 801040c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010410:	4851      	ldr	r0, [pc, #324]	; (8010558 <_svfiprintf_r+0x1ec>)
 8010412:	f7ef fee5 	bl	80001e0 <memchr>
 8010416:	9a04      	ldr	r2, [sp, #16]
 8010418:	b9d8      	cbnz	r0, 8010452 <_svfiprintf_r+0xe6>
 801041a:	06d0      	lsls	r0, r2, #27
 801041c:	bf44      	itt	mi
 801041e:	2320      	movmi	r3, #32
 8010420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010424:	0711      	lsls	r1, r2, #28
 8010426:	bf44      	itt	mi
 8010428:	232b      	movmi	r3, #43	; 0x2b
 801042a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801042e:	f89a 3000 	ldrb.w	r3, [sl]
 8010432:	2b2a      	cmp	r3, #42	; 0x2a
 8010434:	d015      	beq.n	8010462 <_svfiprintf_r+0xf6>
 8010436:	9a07      	ldr	r2, [sp, #28]
 8010438:	4654      	mov	r4, sl
 801043a:	2000      	movs	r0, #0
 801043c:	f04f 0c0a 	mov.w	ip, #10
 8010440:	4621      	mov	r1, r4
 8010442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010446:	3b30      	subs	r3, #48	; 0x30
 8010448:	2b09      	cmp	r3, #9
 801044a:	d94e      	bls.n	80104ea <_svfiprintf_r+0x17e>
 801044c:	b1b0      	cbz	r0, 801047c <_svfiprintf_r+0x110>
 801044e:	9207      	str	r2, [sp, #28]
 8010450:	e014      	b.n	801047c <_svfiprintf_r+0x110>
 8010452:	eba0 0308 	sub.w	r3, r0, r8
 8010456:	fa09 f303 	lsl.w	r3, r9, r3
 801045a:	4313      	orrs	r3, r2
 801045c:	9304      	str	r3, [sp, #16]
 801045e:	46a2      	mov	sl, r4
 8010460:	e7d2      	b.n	8010408 <_svfiprintf_r+0x9c>
 8010462:	9b03      	ldr	r3, [sp, #12]
 8010464:	1d19      	adds	r1, r3, #4
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	9103      	str	r1, [sp, #12]
 801046a:	2b00      	cmp	r3, #0
 801046c:	bfbb      	ittet	lt
 801046e:	425b      	neglt	r3, r3
 8010470:	f042 0202 	orrlt.w	r2, r2, #2
 8010474:	9307      	strge	r3, [sp, #28]
 8010476:	9307      	strlt	r3, [sp, #28]
 8010478:	bfb8      	it	lt
 801047a:	9204      	strlt	r2, [sp, #16]
 801047c:	7823      	ldrb	r3, [r4, #0]
 801047e:	2b2e      	cmp	r3, #46	; 0x2e
 8010480:	d10c      	bne.n	801049c <_svfiprintf_r+0x130>
 8010482:	7863      	ldrb	r3, [r4, #1]
 8010484:	2b2a      	cmp	r3, #42	; 0x2a
 8010486:	d135      	bne.n	80104f4 <_svfiprintf_r+0x188>
 8010488:	9b03      	ldr	r3, [sp, #12]
 801048a:	1d1a      	adds	r2, r3, #4
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	9203      	str	r2, [sp, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	bfb8      	it	lt
 8010494:	f04f 33ff 	movlt.w	r3, #4294967295
 8010498:	3402      	adds	r4, #2
 801049a:	9305      	str	r3, [sp, #20]
 801049c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010568 <_svfiprintf_r+0x1fc>
 80104a0:	7821      	ldrb	r1, [r4, #0]
 80104a2:	2203      	movs	r2, #3
 80104a4:	4650      	mov	r0, sl
 80104a6:	f7ef fe9b 	bl	80001e0 <memchr>
 80104aa:	b140      	cbz	r0, 80104be <_svfiprintf_r+0x152>
 80104ac:	2340      	movs	r3, #64	; 0x40
 80104ae:	eba0 000a 	sub.w	r0, r0, sl
 80104b2:	fa03 f000 	lsl.w	r0, r3, r0
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	4303      	orrs	r3, r0
 80104ba:	3401      	adds	r4, #1
 80104bc:	9304      	str	r3, [sp, #16]
 80104be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104c2:	4826      	ldr	r0, [pc, #152]	; (801055c <_svfiprintf_r+0x1f0>)
 80104c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104c8:	2206      	movs	r2, #6
 80104ca:	f7ef fe89 	bl	80001e0 <memchr>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d038      	beq.n	8010544 <_svfiprintf_r+0x1d8>
 80104d2:	4b23      	ldr	r3, [pc, #140]	; (8010560 <_svfiprintf_r+0x1f4>)
 80104d4:	bb1b      	cbnz	r3, 801051e <_svfiprintf_r+0x1b2>
 80104d6:	9b03      	ldr	r3, [sp, #12]
 80104d8:	3307      	adds	r3, #7
 80104da:	f023 0307 	bic.w	r3, r3, #7
 80104de:	3308      	adds	r3, #8
 80104e0:	9303      	str	r3, [sp, #12]
 80104e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e4:	4433      	add	r3, r6
 80104e6:	9309      	str	r3, [sp, #36]	; 0x24
 80104e8:	e767      	b.n	80103ba <_svfiprintf_r+0x4e>
 80104ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80104ee:	460c      	mov	r4, r1
 80104f0:	2001      	movs	r0, #1
 80104f2:	e7a5      	b.n	8010440 <_svfiprintf_r+0xd4>
 80104f4:	2300      	movs	r3, #0
 80104f6:	3401      	adds	r4, #1
 80104f8:	9305      	str	r3, [sp, #20]
 80104fa:	4619      	mov	r1, r3
 80104fc:	f04f 0c0a 	mov.w	ip, #10
 8010500:	4620      	mov	r0, r4
 8010502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010506:	3a30      	subs	r2, #48	; 0x30
 8010508:	2a09      	cmp	r2, #9
 801050a:	d903      	bls.n	8010514 <_svfiprintf_r+0x1a8>
 801050c:	2b00      	cmp	r3, #0
 801050e:	d0c5      	beq.n	801049c <_svfiprintf_r+0x130>
 8010510:	9105      	str	r1, [sp, #20]
 8010512:	e7c3      	b.n	801049c <_svfiprintf_r+0x130>
 8010514:	fb0c 2101 	mla	r1, ip, r1, r2
 8010518:	4604      	mov	r4, r0
 801051a:	2301      	movs	r3, #1
 801051c:	e7f0      	b.n	8010500 <_svfiprintf_r+0x194>
 801051e:	ab03      	add	r3, sp, #12
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	462a      	mov	r2, r5
 8010524:	4b0f      	ldr	r3, [pc, #60]	; (8010564 <_svfiprintf_r+0x1f8>)
 8010526:	a904      	add	r1, sp, #16
 8010528:	4638      	mov	r0, r7
 801052a:	f3af 8000 	nop.w
 801052e:	1c42      	adds	r2, r0, #1
 8010530:	4606      	mov	r6, r0
 8010532:	d1d6      	bne.n	80104e2 <_svfiprintf_r+0x176>
 8010534:	89ab      	ldrh	r3, [r5, #12]
 8010536:	065b      	lsls	r3, r3, #25
 8010538:	f53f af2c 	bmi.w	8010394 <_svfiprintf_r+0x28>
 801053c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801053e:	b01d      	add	sp, #116	; 0x74
 8010540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010544:	ab03      	add	r3, sp, #12
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	462a      	mov	r2, r5
 801054a:	4b06      	ldr	r3, [pc, #24]	; (8010564 <_svfiprintf_r+0x1f8>)
 801054c:	a904      	add	r1, sp, #16
 801054e:	4638      	mov	r0, r7
 8010550:	f000 f87a 	bl	8010648 <_printf_i>
 8010554:	e7eb      	b.n	801052e <_svfiprintf_r+0x1c2>
 8010556:	bf00      	nop
 8010558:	08067890 	.word	0x08067890
 801055c:	0806789a 	.word	0x0806789a
 8010560:	00000000 	.word	0x00000000
 8010564:	080102b5 	.word	0x080102b5
 8010568:	08067896 	.word	0x08067896

0801056c <_printf_common>:
 801056c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010570:	4616      	mov	r6, r2
 8010572:	4699      	mov	r9, r3
 8010574:	688a      	ldr	r2, [r1, #8]
 8010576:	690b      	ldr	r3, [r1, #16]
 8010578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801057c:	4293      	cmp	r3, r2
 801057e:	bfb8      	it	lt
 8010580:	4613      	movlt	r3, r2
 8010582:	6033      	str	r3, [r6, #0]
 8010584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010588:	4607      	mov	r7, r0
 801058a:	460c      	mov	r4, r1
 801058c:	b10a      	cbz	r2, 8010592 <_printf_common+0x26>
 801058e:	3301      	adds	r3, #1
 8010590:	6033      	str	r3, [r6, #0]
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	0699      	lsls	r1, r3, #26
 8010596:	bf42      	ittt	mi
 8010598:	6833      	ldrmi	r3, [r6, #0]
 801059a:	3302      	addmi	r3, #2
 801059c:	6033      	strmi	r3, [r6, #0]
 801059e:	6825      	ldr	r5, [r4, #0]
 80105a0:	f015 0506 	ands.w	r5, r5, #6
 80105a4:	d106      	bne.n	80105b4 <_printf_common+0x48>
 80105a6:	f104 0a19 	add.w	sl, r4, #25
 80105aa:	68e3      	ldr	r3, [r4, #12]
 80105ac:	6832      	ldr	r2, [r6, #0]
 80105ae:	1a9b      	subs	r3, r3, r2
 80105b0:	42ab      	cmp	r3, r5
 80105b2:	dc26      	bgt.n	8010602 <_printf_common+0x96>
 80105b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80105b8:	1e13      	subs	r3, r2, #0
 80105ba:	6822      	ldr	r2, [r4, #0]
 80105bc:	bf18      	it	ne
 80105be:	2301      	movne	r3, #1
 80105c0:	0692      	lsls	r2, r2, #26
 80105c2:	d42b      	bmi.n	801061c <_printf_common+0xb0>
 80105c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105c8:	4649      	mov	r1, r9
 80105ca:	4638      	mov	r0, r7
 80105cc:	47c0      	blx	r8
 80105ce:	3001      	adds	r0, #1
 80105d0:	d01e      	beq.n	8010610 <_printf_common+0xa4>
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	68e5      	ldr	r5, [r4, #12]
 80105d6:	6832      	ldr	r2, [r6, #0]
 80105d8:	f003 0306 	and.w	r3, r3, #6
 80105dc:	2b04      	cmp	r3, #4
 80105de:	bf08      	it	eq
 80105e0:	1aad      	subeq	r5, r5, r2
 80105e2:	68a3      	ldr	r3, [r4, #8]
 80105e4:	6922      	ldr	r2, [r4, #16]
 80105e6:	bf0c      	ite	eq
 80105e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105ec:	2500      	movne	r5, #0
 80105ee:	4293      	cmp	r3, r2
 80105f0:	bfc4      	itt	gt
 80105f2:	1a9b      	subgt	r3, r3, r2
 80105f4:	18ed      	addgt	r5, r5, r3
 80105f6:	2600      	movs	r6, #0
 80105f8:	341a      	adds	r4, #26
 80105fa:	42b5      	cmp	r5, r6
 80105fc:	d11a      	bne.n	8010634 <_printf_common+0xc8>
 80105fe:	2000      	movs	r0, #0
 8010600:	e008      	b.n	8010614 <_printf_common+0xa8>
 8010602:	2301      	movs	r3, #1
 8010604:	4652      	mov	r2, sl
 8010606:	4649      	mov	r1, r9
 8010608:	4638      	mov	r0, r7
 801060a:	47c0      	blx	r8
 801060c:	3001      	adds	r0, #1
 801060e:	d103      	bne.n	8010618 <_printf_common+0xac>
 8010610:	f04f 30ff 	mov.w	r0, #4294967295
 8010614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010618:	3501      	adds	r5, #1
 801061a:	e7c6      	b.n	80105aa <_printf_common+0x3e>
 801061c:	18e1      	adds	r1, r4, r3
 801061e:	1c5a      	adds	r2, r3, #1
 8010620:	2030      	movs	r0, #48	; 0x30
 8010622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010626:	4422      	add	r2, r4
 8010628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801062c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010630:	3302      	adds	r3, #2
 8010632:	e7c7      	b.n	80105c4 <_printf_common+0x58>
 8010634:	2301      	movs	r3, #1
 8010636:	4622      	mov	r2, r4
 8010638:	4649      	mov	r1, r9
 801063a:	4638      	mov	r0, r7
 801063c:	47c0      	blx	r8
 801063e:	3001      	adds	r0, #1
 8010640:	d0e6      	beq.n	8010610 <_printf_common+0xa4>
 8010642:	3601      	adds	r6, #1
 8010644:	e7d9      	b.n	80105fa <_printf_common+0x8e>
	...

08010648 <_printf_i>:
 8010648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801064c:	460c      	mov	r4, r1
 801064e:	4691      	mov	r9, r2
 8010650:	7e27      	ldrb	r7, [r4, #24]
 8010652:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010654:	2f78      	cmp	r7, #120	; 0x78
 8010656:	4680      	mov	r8, r0
 8010658:	469a      	mov	sl, r3
 801065a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801065e:	d807      	bhi.n	8010670 <_printf_i+0x28>
 8010660:	2f62      	cmp	r7, #98	; 0x62
 8010662:	d80a      	bhi.n	801067a <_printf_i+0x32>
 8010664:	2f00      	cmp	r7, #0
 8010666:	f000 80d8 	beq.w	801081a <_printf_i+0x1d2>
 801066a:	2f58      	cmp	r7, #88	; 0x58
 801066c:	f000 80a3 	beq.w	80107b6 <_printf_i+0x16e>
 8010670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010678:	e03a      	b.n	80106f0 <_printf_i+0xa8>
 801067a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801067e:	2b15      	cmp	r3, #21
 8010680:	d8f6      	bhi.n	8010670 <_printf_i+0x28>
 8010682:	a001      	add	r0, pc, #4	; (adr r0, 8010688 <_printf_i+0x40>)
 8010684:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010688:	080106e1 	.word	0x080106e1
 801068c:	080106f5 	.word	0x080106f5
 8010690:	08010671 	.word	0x08010671
 8010694:	08010671 	.word	0x08010671
 8010698:	08010671 	.word	0x08010671
 801069c:	08010671 	.word	0x08010671
 80106a0:	080106f5 	.word	0x080106f5
 80106a4:	08010671 	.word	0x08010671
 80106a8:	08010671 	.word	0x08010671
 80106ac:	08010671 	.word	0x08010671
 80106b0:	08010671 	.word	0x08010671
 80106b4:	08010801 	.word	0x08010801
 80106b8:	08010725 	.word	0x08010725
 80106bc:	080107e3 	.word	0x080107e3
 80106c0:	08010671 	.word	0x08010671
 80106c4:	08010671 	.word	0x08010671
 80106c8:	08010823 	.word	0x08010823
 80106cc:	08010671 	.word	0x08010671
 80106d0:	08010725 	.word	0x08010725
 80106d4:	08010671 	.word	0x08010671
 80106d8:	08010671 	.word	0x08010671
 80106dc:	080107eb 	.word	0x080107eb
 80106e0:	680b      	ldr	r3, [r1, #0]
 80106e2:	1d1a      	adds	r2, r3, #4
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	600a      	str	r2, [r1, #0]
 80106e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80106ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106f0:	2301      	movs	r3, #1
 80106f2:	e0a3      	b.n	801083c <_printf_i+0x1f4>
 80106f4:	6825      	ldr	r5, [r4, #0]
 80106f6:	6808      	ldr	r0, [r1, #0]
 80106f8:	062e      	lsls	r6, r5, #24
 80106fa:	f100 0304 	add.w	r3, r0, #4
 80106fe:	d50a      	bpl.n	8010716 <_printf_i+0xce>
 8010700:	6805      	ldr	r5, [r0, #0]
 8010702:	600b      	str	r3, [r1, #0]
 8010704:	2d00      	cmp	r5, #0
 8010706:	da03      	bge.n	8010710 <_printf_i+0xc8>
 8010708:	232d      	movs	r3, #45	; 0x2d
 801070a:	426d      	negs	r5, r5
 801070c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010710:	485e      	ldr	r0, [pc, #376]	; (801088c <_printf_i+0x244>)
 8010712:	230a      	movs	r3, #10
 8010714:	e019      	b.n	801074a <_printf_i+0x102>
 8010716:	f015 0f40 	tst.w	r5, #64	; 0x40
 801071a:	6805      	ldr	r5, [r0, #0]
 801071c:	600b      	str	r3, [r1, #0]
 801071e:	bf18      	it	ne
 8010720:	b22d      	sxthne	r5, r5
 8010722:	e7ef      	b.n	8010704 <_printf_i+0xbc>
 8010724:	680b      	ldr	r3, [r1, #0]
 8010726:	6825      	ldr	r5, [r4, #0]
 8010728:	1d18      	adds	r0, r3, #4
 801072a:	6008      	str	r0, [r1, #0]
 801072c:	0628      	lsls	r0, r5, #24
 801072e:	d501      	bpl.n	8010734 <_printf_i+0xec>
 8010730:	681d      	ldr	r5, [r3, #0]
 8010732:	e002      	b.n	801073a <_printf_i+0xf2>
 8010734:	0669      	lsls	r1, r5, #25
 8010736:	d5fb      	bpl.n	8010730 <_printf_i+0xe8>
 8010738:	881d      	ldrh	r5, [r3, #0]
 801073a:	4854      	ldr	r0, [pc, #336]	; (801088c <_printf_i+0x244>)
 801073c:	2f6f      	cmp	r7, #111	; 0x6f
 801073e:	bf0c      	ite	eq
 8010740:	2308      	moveq	r3, #8
 8010742:	230a      	movne	r3, #10
 8010744:	2100      	movs	r1, #0
 8010746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801074a:	6866      	ldr	r6, [r4, #4]
 801074c:	60a6      	str	r6, [r4, #8]
 801074e:	2e00      	cmp	r6, #0
 8010750:	bfa2      	ittt	ge
 8010752:	6821      	ldrge	r1, [r4, #0]
 8010754:	f021 0104 	bicge.w	r1, r1, #4
 8010758:	6021      	strge	r1, [r4, #0]
 801075a:	b90d      	cbnz	r5, 8010760 <_printf_i+0x118>
 801075c:	2e00      	cmp	r6, #0
 801075e:	d04d      	beq.n	80107fc <_printf_i+0x1b4>
 8010760:	4616      	mov	r6, r2
 8010762:	fbb5 f1f3 	udiv	r1, r5, r3
 8010766:	fb03 5711 	mls	r7, r3, r1, r5
 801076a:	5dc7      	ldrb	r7, [r0, r7]
 801076c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010770:	462f      	mov	r7, r5
 8010772:	42bb      	cmp	r3, r7
 8010774:	460d      	mov	r5, r1
 8010776:	d9f4      	bls.n	8010762 <_printf_i+0x11a>
 8010778:	2b08      	cmp	r3, #8
 801077a:	d10b      	bne.n	8010794 <_printf_i+0x14c>
 801077c:	6823      	ldr	r3, [r4, #0]
 801077e:	07df      	lsls	r7, r3, #31
 8010780:	d508      	bpl.n	8010794 <_printf_i+0x14c>
 8010782:	6923      	ldr	r3, [r4, #16]
 8010784:	6861      	ldr	r1, [r4, #4]
 8010786:	4299      	cmp	r1, r3
 8010788:	bfde      	ittt	le
 801078a:	2330      	movle	r3, #48	; 0x30
 801078c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010790:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010794:	1b92      	subs	r2, r2, r6
 8010796:	6122      	str	r2, [r4, #16]
 8010798:	f8cd a000 	str.w	sl, [sp]
 801079c:	464b      	mov	r3, r9
 801079e:	aa03      	add	r2, sp, #12
 80107a0:	4621      	mov	r1, r4
 80107a2:	4640      	mov	r0, r8
 80107a4:	f7ff fee2 	bl	801056c <_printf_common>
 80107a8:	3001      	adds	r0, #1
 80107aa:	d14c      	bne.n	8010846 <_printf_i+0x1fe>
 80107ac:	f04f 30ff 	mov.w	r0, #4294967295
 80107b0:	b004      	add	sp, #16
 80107b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b6:	4835      	ldr	r0, [pc, #212]	; (801088c <_printf_i+0x244>)
 80107b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80107bc:	6823      	ldr	r3, [r4, #0]
 80107be:	680e      	ldr	r6, [r1, #0]
 80107c0:	061f      	lsls	r7, r3, #24
 80107c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80107c6:	600e      	str	r6, [r1, #0]
 80107c8:	d514      	bpl.n	80107f4 <_printf_i+0x1ac>
 80107ca:	07d9      	lsls	r1, r3, #31
 80107cc:	bf44      	itt	mi
 80107ce:	f043 0320 	orrmi.w	r3, r3, #32
 80107d2:	6023      	strmi	r3, [r4, #0]
 80107d4:	b91d      	cbnz	r5, 80107de <_printf_i+0x196>
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	f023 0320 	bic.w	r3, r3, #32
 80107dc:	6023      	str	r3, [r4, #0]
 80107de:	2310      	movs	r3, #16
 80107e0:	e7b0      	b.n	8010744 <_printf_i+0xfc>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	f043 0320 	orr.w	r3, r3, #32
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	2378      	movs	r3, #120	; 0x78
 80107ec:	4828      	ldr	r0, [pc, #160]	; (8010890 <_printf_i+0x248>)
 80107ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107f2:	e7e3      	b.n	80107bc <_printf_i+0x174>
 80107f4:	065e      	lsls	r6, r3, #25
 80107f6:	bf48      	it	mi
 80107f8:	b2ad      	uxthmi	r5, r5
 80107fa:	e7e6      	b.n	80107ca <_printf_i+0x182>
 80107fc:	4616      	mov	r6, r2
 80107fe:	e7bb      	b.n	8010778 <_printf_i+0x130>
 8010800:	680b      	ldr	r3, [r1, #0]
 8010802:	6826      	ldr	r6, [r4, #0]
 8010804:	6960      	ldr	r0, [r4, #20]
 8010806:	1d1d      	adds	r5, r3, #4
 8010808:	600d      	str	r5, [r1, #0]
 801080a:	0635      	lsls	r5, r6, #24
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	d501      	bpl.n	8010814 <_printf_i+0x1cc>
 8010810:	6018      	str	r0, [r3, #0]
 8010812:	e002      	b.n	801081a <_printf_i+0x1d2>
 8010814:	0671      	lsls	r1, r6, #25
 8010816:	d5fb      	bpl.n	8010810 <_printf_i+0x1c8>
 8010818:	8018      	strh	r0, [r3, #0]
 801081a:	2300      	movs	r3, #0
 801081c:	6123      	str	r3, [r4, #16]
 801081e:	4616      	mov	r6, r2
 8010820:	e7ba      	b.n	8010798 <_printf_i+0x150>
 8010822:	680b      	ldr	r3, [r1, #0]
 8010824:	1d1a      	adds	r2, r3, #4
 8010826:	600a      	str	r2, [r1, #0]
 8010828:	681e      	ldr	r6, [r3, #0]
 801082a:	6862      	ldr	r2, [r4, #4]
 801082c:	2100      	movs	r1, #0
 801082e:	4630      	mov	r0, r6
 8010830:	f7ef fcd6 	bl	80001e0 <memchr>
 8010834:	b108      	cbz	r0, 801083a <_printf_i+0x1f2>
 8010836:	1b80      	subs	r0, r0, r6
 8010838:	6060      	str	r0, [r4, #4]
 801083a:	6863      	ldr	r3, [r4, #4]
 801083c:	6123      	str	r3, [r4, #16]
 801083e:	2300      	movs	r3, #0
 8010840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010844:	e7a8      	b.n	8010798 <_printf_i+0x150>
 8010846:	6923      	ldr	r3, [r4, #16]
 8010848:	4632      	mov	r2, r6
 801084a:	4649      	mov	r1, r9
 801084c:	4640      	mov	r0, r8
 801084e:	47d0      	blx	sl
 8010850:	3001      	adds	r0, #1
 8010852:	d0ab      	beq.n	80107ac <_printf_i+0x164>
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	079b      	lsls	r3, r3, #30
 8010858:	d413      	bmi.n	8010882 <_printf_i+0x23a>
 801085a:	68e0      	ldr	r0, [r4, #12]
 801085c:	9b03      	ldr	r3, [sp, #12]
 801085e:	4298      	cmp	r0, r3
 8010860:	bfb8      	it	lt
 8010862:	4618      	movlt	r0, r3
 8010864:	e7a4      	b.n	80107b0 <_printf_i+0x168>
 8010866:	2301      	movs	r3, #1
 8010868:	4632      	mov	r2, r6
 801086a:	4649      	mov	r1, r9
 801086c:	4640      	mov	r0, r8
 801086e:	47d0      	blx	sl
 8010870:	3001      	adds	r0, #1
 8010872:	d09b      	beq.n	80107ac <_printf_i+0x164>
 8010874:	3501      	adds	r5, #1
 8010876:	68e3      	ldr	r3, [r4, #12]
 8010878:	9903      	ldr	r1, [sp, #12]
 801087a:	1a5b      	subs	r3, r3, r1
 801087c:	42ab      	cmp	r3, r5
 801087e:	dcf2      	bgt.n	8010866 <_printf_i+0x21e>
 8010880:	e7eb      	b.n	801085a <_printf_i+0x212>
 8010882:	2500      	movs	r5, #0
 8010884:	f104 0619 	add.w	r6, r4, #25
 8010888:	e7f5      	b.n	8010876 <_printf_i+0x22e>
 801088a:	bf00      	nop
 801088c:	080678a1 	.word	0x080678a1
 8010890:	080678b2 	.word	0x080678b2

08010894 <__retarget_lock_acquire_recursive>:
 8010894:	4770      	bx	lr

08010896 <__retarget_lock_release_recursive>:
 8010896:	4770      	bx	lr

08010898 <memmove>:
 8010898:	4288      	cmp	r0, r1
 801089a:	b510      	push	{r4, lr}
 801089c:	eb01 0402 	add.w	r4, r1, r2
 80108a0:	d902      	bls.n	80108a8 <memmove+0x10>
 80108a2:	4284      	cmp	r4, r0
 80108a4:	4623      	mov	r3, r4
 80108a6:	d807      	bhi.n	80108b8 <memmove+0x20>
 80108a8:	1e43      	subs	r3, r0, #1
 80108aa:	42a1      	cmp	r1, r4
 80108ac:	d008      	beq.n	80108c0 <memmove+0x28>
 80108ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108b6:	e7f8      	b.n	80108aa <memmove+0x12>
 80108b8:	4402      	add	r2, r0
 80108ba:	4601      	mov	r1, r0
 80108bc:	428a      	cmp	r2, r1
 80108be:	d100      	bne.n	80108c2 <memmove+0x2a>
 80108c0:	bd10      	pop	{r4, pc}
 80108c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108ca:	e7f7      	b.n	80108bc <memmove+0x24>

080108cc <_malloc_usable_size_r>:
 80108cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108d0:	1f18      	subs	r0, r3, #4
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	bfbc      	itt	lt
 80108d6:	580b      	ldrlt	r3, [r1, r0]
 80108d8:	18c0      	addlt	r0, r0, r3
 80108da:	4770      	bx	lr

080108dc <_init>:
 80108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108de:	bf00      	nop
 80108e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108e2:	bc08      	pop	{r3}
 80108e4:	469e      	mov	lr, r3
 80108e6:	4770      	bx	lr

080108e8 <_fini>:
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	bf00      	nop
 80108ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108ee:	bc08      	pop	{r3}
 80108f0:	469e      	mov	lr, r3
 80108f2:	4770      	bx	lr
