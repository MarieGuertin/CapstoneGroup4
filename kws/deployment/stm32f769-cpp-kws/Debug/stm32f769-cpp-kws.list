
stm32f769-cpp-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d83c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002913c  0800da40  0800da40  0001da40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036b7c  08036b7c  00050080  2**0
                  CONTENTS
  4 .ARM          00000008  08036b7c  08036b7c  00046b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08036b84  08036b84  00050080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08036b84  08036b84  00046b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036b88  08036b88  00046b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08036b8c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000080  08036c0c  00050080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08036c0c  000504a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cd12  00000000  00000000  000500ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006474  00000000  00000000  0009cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  000a3238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  000a4af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035a3f  00000000  00000000  000a6150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000242b0  00000000  00000000  000dbb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018b317  00000000  00000000  000ffe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0028b156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a0  00000000  00000000  0028b1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800da24 	.word	0x0800da24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800da24 	.word	0x0800da24

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 80006d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80006d6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000704 <_ZN4MFCC8MelScaleEf+0x3c>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	f00b fe71 	bl	800c3d0 <logf>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000708 <_ZN4MFCC8MelScaleEf+0x40>
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 80006fa:	eeb0 0a67 	vmov.f32	s0, s15
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	442f0000 	.word	0x442f0000
 8000708:	448ce000 	.word	0x448ce000

0800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f00b f90d 	bl	800b940 <log>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eeb0 0b47 	vmov.f64	d0, d7
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800074a:	ed97 1b00 	vldr	d1, [r7]
 800074e:	eeb0 0b47 	vmov.f64	d0, d7
 8000752:	f00b fab9 	bl	800bcc8 <pow>
 8000756:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800075a:	eeb0 0b47 	vmov.f64	d0, d7
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0000      	movs	r0, r0
	...

08000768 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8000768:	b580      	push	{r7, lr}
 800076a:	ed2d 8b02 	vpush	{d8}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffbd 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000792:	eeb0 8b40 	vmov.f64	d8, d0
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff ffb8 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800079c:	eeb0 6b40 	vmov.f64	d6, d0
 80007a0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80007a4:	eeb0 0b47 	vmov.f64	d0, d7
 80007a8:	f00b fd52 	bl	800c250 <ceil>
 80007ac:	eeb0 7b40 	vmov.f64	d7, d0
 80007b0:	eeb0 0b47 	vmov.f64	d0, d7
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ffbd 	bl	8000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d201      	bcs.n	80007da <_ZN4MFCCC1Eiii+0x72>
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	e001      	b.n	80007de <_ZN4MFCCC1Eiii+0x76>
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4618      	mov	r0, r3
 80007e0:	f00b f88c 	bl	800b8fc <_Znaj>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d201      	bcs.n	80007fc <_ZN4MFCCC1Eiii+0x94>
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e001      	b.n	8000800 <_ZN4MFCCC1Eiii+0x98>
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4618      	mov	r0, r3
 8000802:	f00b f87b 	bl	800b8fc <_Znaj>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 800080e:	20a0      	movs	r0, #160	; 0xa0
 8000810:	f00b f874 	bl	800b8fc <_Znaj>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000822:	4293      	cmp	r3, r2
 8000824:	d201      	bcs.n	800082a <_ZN4MFCCC1Eiii+0xc2>
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	e001      	b.n	800082e <_ZN4MFCCC1Eiii+0xc6>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4618      	mov	r0, r3
 8000830:	f00b f864 	bl	800b8fc <_Znaj>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	da26      	bge.n	8000896 <_ZN4MFCCC1Eiii+0x12e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000900 <_ZN4MFCCC1Eiii+0x198>
 800085a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000868:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000874:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000878:	ee36 7b47 	vsub.f64	d7, d6, d7
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < frame_len; i++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e7d4      	b.n	8000840 <_ZN4MFCCC1Eiii+0xd8>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8000896:	20a0      	movs	r0, #160	; 0xa0
 8000898:	f00b f830 	bl	800b8fc <_Znaj>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 80008a4:	20a0      	movs	r0, #160	; 0xa0
 80008a6:	f00b f829 	bl	800b8fc <_Znaj>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f928 	bl	8000b08 <_ZN4MFCC16create_mel_fbankEv>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	2128      	movs	r1, #40	; 0x28
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 f890 	bl	80009e8 <_ZN4MFCC17create_dct_matrixEll>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80008ce:	2018      	movs	r0, #24
 80008d0:	f00b f803 	bl	800b8da <_Znwj>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f005 fb65 	bl	8005fb8 <arm_rfft_fast_init_f32>

}
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	ecbd 8b02 	vpop	{d8}
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f3af 8000 	nop.w
 8000900:	54442d18 	.word	0x54442d18
 8000904:	401921fb 	.word	0x401921fb

08000908 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  delete []frame;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <_ZN4MFCCD1Ev+0x1a>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4618      	mov	r0, r3
 800091e:	f00a ffda 	bl	800b8d6 <_ZdaPv>
  delete [] buffer;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <_ZN4MFCCD1Ev+0x2c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4618      	mov	r0, r3
 8000930:	f00a ffd1 	bl	800b8d6 <_ZdaPv>
  delete []mel_energies;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <_ZN4MFCCD1Ev+0x3e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4618      	mov	r0, r3
 8000942:	f00a ffc8 	bl	800b8d6 <_ZdaPv>
  delete []window_func;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <_ZN4MFCCD1Ev+0x50>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4618      	mov	r0, r3
 8000954:	f00a ffbf 	bl	800b8d6 <_ZdaPv>
  delete []fbank_filter_first;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <_ZN4MFCCD1Ev+0x62>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4618      	mov	r0, r3
 8000966:	f00a ffb6 	bl	800b8d6 <_ZdaPv>
  delete []fbank_filter_last;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <_ZN4MFCCD1Ev+0x74>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f00a ffad 	bl	800b8d6 <_ZdaPv>
  delete []dct_matrix;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <_ZN4MFCCD1Ev+0x86>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4618      	mov	r0, r3
 800098a:	f00a ffa4 	bl	800b8d6 <_ZdaPv>
  delete rfft;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <_ZN4MFCCD1Ev+0x96>
 8000996:	2118      	movs	r1, #24
 8000998:	4618      	mov	r0, r3
 800099a:	f00a ff9a 	bl	800b8d2 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b27      	cmp	r3, #39	; 0x27
 80009a6:	dc0f      	bgt.n	80009c8 <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <_ZN4MFCCD1Ev+0xb8>
 80009b8:	2104      	movs	r1, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00a ff89 	bl	800b8d2 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7ec      	b.n	80009a2 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <_ZN4MFCCD1Ev+0xd0>
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00a ff7d 	bl	800b8d2 <_ZdlPvj>
}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	0000      	movs	r0, r0
 80009e4:	0000      	movs	r0, r0
	...

080009e8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	ed2d 8b02 	vpush	{d8}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d201      	bcs.n	8000a0c <_ZN4MFCC17create_dct_matrixEll+0x24>
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	e001      	b.n	8000a10 <_ZN4MFCC17create_dct_matrixEll+0x28>
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00a ff73 	bl	800b8fc <_Znaj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	db09      	blt.n	8000a58 <_ZN4MFCC17create_dct_matrixEll+0x70>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8000a44:	ed97 0a06 	vldr	s0, [r7, #24]
 8000a48:	f00b fd28 	bl	800c49c <sqrtf>
 8000a4c:	eef0 7a40 	vmov.f32	s15, s0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000a56:	e004      	b.n	8000a62 <_ZN4MFCC17create_dct_matrixEll+0x7a>
    }
    else
    {
      *pOut = 0.0f;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a60:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	da41      	bge.n	8000af2 <_ZN4MFCC17create_dct_matrixEll+0x10a>
    for (n = 0; n < input_length; n++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3a      	ldr	r2, [r7, #32]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da37      	bge.n	8000aea <_ZN4MFCC17create_dct_matrixEll+0x102>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8000a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a7e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000b00 <_ZN4MFCC17create_dct_matrixEll+0x118>
 8000a90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	ee07 3a90 	vmov	s15, r3
 8000a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000aa2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000aa6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab8:	eeb0 0b47 	vmov.f64	d0, d7
 8000abc:	f00b fc40 	bl	800c340 <cos>
 8000ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	fb02 f203 	mul.w	r2, r2, r3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < input_length; n++) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	e7c3      	b.n	8000a72 <_ZN4MFCC17create_dct_matrixEll+0x8a>
  for (k = 0; k < coefficient_count; k++) {
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
 8000af0:	e7b9      	b.n	8000a66 <_ZN4MFCC17create_dct_matrixEll+0x7e>
    }
  }
  return M;
 8000af2:	69fb      	ldr	r3, [r7, #28]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	ecbd 8b02 	vpop	{d8}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	54442d18 	.word	0x54442d18
 8000b04:	400921fb 	.word	0x400921fb

08000b08 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b095      	sub	sp, #84	; 0x54
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <_ZN4MFCC16create_mel_fbankEv+0x12>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000d78 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8000b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8000b36:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000b3a:	f7ff fdc5 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 8000b42:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8000d7c <_ZN4MFCC16create_mel_fbankEv+0x274>
 8000b46:	f7ff fdbf 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b4a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8000b4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b5a:	eddf 6a89 	vldr	s13, [pc, #548]	; 8000d80 <_ZN4MFCC16create_mel_fbankEv+0x278>
 8000b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d201      	bcs.n	8000b74 <_ZN4MFCC16create_mel_fbankEv+0x6c>
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e001      	b.n	8000b78 <_ZN4MFCC16create_mel_fbankEv+0x70>
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00a febf 	bl	800b8fc <_Znaj>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 8000b82:	20a0      	movs	r0, #160	; 0xa0
 8000b84:	f00a feba 	bl	800b8fc <_Znaj>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b92:	2b27      	cmp	r3, #39	; 0x27
 8000b94:	f300 80e4 	bgt.w	8000d60 <_ZN4MFCC16create_mel_fbankEv+0x258>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 8000b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd8:	3302      	adds	r3, #2
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	da65      	bge.n	8000cda <_ZN4MFCC16create_mel_fbankEv+0x1d2>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8000c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c20:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 8000c24:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c28:	f7ff fd4e 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 8000c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8000c3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	dd40      	ble.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
 8000c50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d537      	bpl.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
        float weight;
        if (mel <= center_mel) {
 8000c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	d810      	bhi.n	8000c96 <_ZN4MFCC16create_mel_fbankEv+0x18e>
          weight = (mel - left_mel) / (center_mel - left_mel);
 8000c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8000c94:	e00f      	b.n	8000cb6 <_ZN4MFCC16create_mel_fbankEv+0x1ae>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 8000c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	6a3a      	ldr	r2, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc0:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d101      	bne.n	8000cce <_ZN4MFCC16create_mel_fbankEv+0x1c6>
          first_index = i;
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 8000cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd8:	e795      	b.n	8000c06 <_ZN4MFCC16create_mel_fbankEv+0xfe>
      }
    }

    fbank_filter_first[bin] = first_index;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ce6:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf4:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8000cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d201      	bcs.n	8000d0a <_ZN4MFCC16create_mel_fbankEv+0x202>
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	e001      	b.n	8000d0e <_ZN4MFCC16create_mel_fbankEv+0x206>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	69f9      	ldr	r1, [r7, #28]
 8000d14:	188c      	adds	r4, r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00a fdf0 	bl	800b8fc <_Znaj>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 8000d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dc13      	bgt.n	8000d58 <_ZN4MFCC16create_mel_fbankEv+0x250>
      mel_fbank[bin][j++] = this_bin[i];
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	6a3a      	ldr	r2, [r7, #32]
 8000d36:	441a      	add	r2, r3
 8000d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	69f9      	ldr	r1, [r7, #28]
 8000d3e:	440b      	add	r3, r1
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d44:	1c58      	adds	r0, r3, #1
 8000d46:	63b8      	str	r0, [r7, #56]	; 0x38
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 8000d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d52:	3301      	adds	r3, #1
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d56:	e7e7      	b.n	8000d28 <_ZN4MFCC16create_mel_fbankEv+0x220>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d5e:	e717      	b.n	8000b90 <_ZN4MFCC16create_mel_fbankEv+0x88>
    }
  }
  delete []this_bin;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <_ZN4MFCC16create_mel_fbankEv+0x264>
 8000d66:	6a38      	ldr	r0, [r7, #32]
 8000d68:	f00a fdb5 	bl	800b8d6 <_ZdaPv>
  return mel_fbank;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3754      	adds	r7, #84	; 0x54
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	467a0000 	.word	0x467a0000
 8000d7c:	457a0000 	.word	0x457a0000
 8000d80:	42240000 	.word	0x42240000

08000d84 <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b095      	sub	sp, #84	; 0x54
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da18      	bge.n	8000dd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 8000d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001074 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dce:	e7e1      	b.n	8000d94 <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18d0      	adds	r0, r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	461a      	mov	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00c f9b0 	bl	800d150 <memset>

  for (i = 0; i < frame_len; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	da1a      	bge.n	8000e34 <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	3301      	adds	r3, #1
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e32:	e7df      	b.n	8000df4 <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	2300      	movs	r3, #0
 8000e42:	f005 f88b 	bl	8005f5c <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da00      	bge.n	8000e50 <_ZN4MFCC12mfcc_computeEPKsPa+0xcc>
 8000e4e:	3301      	adds	r3, #1
 8000e50:	105b      	asrs	r3, r3, #1
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	3304      	adds	r3, #4
 8000e72:	ed93 7a00 	vldr	s14, [r3]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 8000e88:	2301      	movs	r3, #1
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da23      	bge.n	8000edc <_ZN4MFCC12mfcc_computeEPKsPa+0x158>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eda:	e7d7      	b.n	8000e8c <_ZN4MFCC12mfcc_computeEPKsPa+0x108>
  }
  buffer[0] = first_energy;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ee2:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef0:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef8:	2b27      	cmp	r3, #39	; 0x27
 8000efa:	dc6d      	bgt.n	8000fd8 <_ZN4MFCC12mfcc_computeEPKsPa+0x254>
    j = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dc3a      	bgt.n	8000fa4 <_ZN4MFCC12mfcc_computeEPKsPa+0x220>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8000f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	db09      	blt.n	8000f64 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e0>
      *pOut = sqrtf(in);
 8000f50:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f54:	f00b faa2 	bl	800c49c <sqrtf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000f62:	e004      	b.n	8000f6e <_ZN4MFCC12mfcc_computeEPKsPa+0x1ea>
      *pOut = 0.0f;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f6c:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 8000f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa2:	e7c0      	b.n	8000f26 <_ZN4MFCC12mfcc_computeEPKsPa+0x1a2>
    }
    mel_energies[bin] = mel_energy;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 8000fb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d107      	bne.n	8000fd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x24c>
      mel_energies[bin] = FLT_MIN;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fce:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fd6:	e78e      	b.n	8000ef6 <_ZN4MFCC12mfcc_computeEPKsPa+0x172>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	2b27      	cmp	r3, #39	; 0x27
 8000fe0:	dc17      	bgt.n	8001012 <_ZN4MFCC12mfcc_computeEPKsPa+0x28e>
    mel_energies[bin] = logf(mel_energies[bin]);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18d4      	adds	r4, r2, r3
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f00b f9e7 	bl	800c3d0 <logf>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 800100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100c:	3301      	adds	r3, #1
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
 8001010:	e7e4      	b.n	8000fdc <_ZN4MFCC12mfcc_computeEPKsPa+0x258>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101c:	429a      	cmp	r2, r3
 800101e:	da72      	bge.n	8001106 <_ZN4MFCC12mfcc_computeEPKsPa+0x382>
    float sum = 0.0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b27      	cmp	r3, #39	; 0x27
 800102e:	dc27      	bgt.n	8001080 <_ZN4MFCC12mfcc_computeEPKsPa+0x2fc>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	461a      	mov	r2, r3
 8001040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106c:	3301      	adds	r3, #1
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001070:	e7db      	b.n	800102a <_ZN4MFCC12mfcc_computeEPKsPa+0x2a6>
 8001072:	bf00      	nop
 8001074:	47000000 	.word	0x47000000
 8001078:	42fe0000 	.word	0x42fe0000
 800107c:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 800109e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80010a2:	f7ff fb01 	bl	80006a8 <_ZSt5roundf>
 80010a6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80010aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010ae:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8001078 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	db05      	blt.n	80010c8 <_ZN4MFCC12mfcc_computeEPKsPa+0x344>
      mfcc_out[i] = 127;
 80010bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	227f      	movs	r2, #127	; 0x7f
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e01a      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else if(sum <= -128)
 80010c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010cc:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800107c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d805      	bhi.n	80010e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x362>
      mfcc_out[i] = -128;
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else
      mfcc_out[i] = sum; 
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	edc7 7a00 	vstr	s15, [r7]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b252      	sxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 80010fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001100:	3301      	adds	r3, #1
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001104:	e787      	b.n	8001016 <_ZN4MFCC12mfcc_computeEPKsPa+0x292>
  }

}
 8001106:	bf00      	nop
 8001108:	3754      	adds	r7, #84	; 0x54
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop

08001110 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <_ZN2NNC1Ev+0x1c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	08021280 	.word	0x08021280

08001130 <_ZN3DNNC1Ev>:
const q7_t DNN::ip3_wt[IP3_WT_DIM]=IP3_WT;
const q7_t DNN::ip3_bias[IP3_OUT_DIM]=IP3_BIAS;
const q7_t DNN::ip4_wt[IP4_WT_DIM]=IP4_WT;
const q7_t DNN::ip4_bias[OUT_DIM]=IP4_BIAS;

DNN::DNN()
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffe8 	bl	8001110 <_ZN2NNC1Ev>
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <_ZN3DNNC1Ev+0x80>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8001146:	f240 5054 	movw	r0, #1364	; 0x554
 800114a:	f00a fbd7 	bl	800b8fc <_Znaj>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	61da      	str	r2, [r3, #28]
  ip1_out = scratch_pad;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	621a      	str	r2, [r3, #32]
  ip2_out = ip1_out+IP1_OUT_DIM;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
  ip3_out = ip1_out;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1a      	ldr	r2, [r3, #32]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
  vec_buffer = (q15_t*)(ip1_out+IP1_OUT_DIM+IP2_OUT_DIM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	f503 7290 	add.w	r2, r3, #288	; 0x120
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c
  frame_len = FRAME_LEN;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001184:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f44f 7220 	mov.w	r2, #640	; 0x280
 800118c:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	220a      	movs	r2, #10
 8001192:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2219      	movs	r2, #25
 8001198:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	220c      	movs	r2, #12
 800119e:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0802126c 	.word	0x0802126c

080011b4 <_ZN3DNND1Ev>:

DNN::~DNN()
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <_ZN3DNND1Ev+0x30>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <_ZN3DNND1Ev+0x1e>
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00a fb80 	bl	800b8d2 <_ZdlPvj>
DNN::~DNN()
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f88d 	bl	80012f4 <_ZN2NND1Ev>
}
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0802126c 	.word	0x0802126c

080011e8 <_ZN3DNND0Ev>:
DNN::~DNN()
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
}
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ffdf 	bl	80011b4 <_ZN3DNND1Ev>
 80011f6:	2130      	movs	r1, #48	; 0x30
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f00a fb6a 	bl	800b8d2 <_ZdlPvj>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_ZN3DNN6run_nnEPaS0_>:

void DNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af06      	add	r7, sp, #24
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	// Run all layers
	
	// IP1 
	arm_fully_connected_q7(in_data, ip1_wt, IN_DIM, IP1_OUT_DIM, 1, 7, ip1_bias, ip1_out, vec_buffer);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800121c:	9204      	str	r2, [sp, #16]
 800121e:	9303      	str	r3, [sp, #12]
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <_ZN3DNN6run_nnEPaS0_+0xcc>)
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	2307      	movs	r3, #7
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2301      	movs	r3, #1
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2390      	movs	r3, #144	; 0x90
 800122e:	22fa      	movs	r2, #250	; 0xfa
 8001230:	4929      	ldr	r1, [pc, #164]	; (80012d8 <_ZN3DNN6run_nnEPaS0_+0xd0>)
 8001232:	68b8      	ldr	r0, [r7, #8]
 8001234:	f005 f803 	bl	800623e <arm_fully_connected_q7>
        // RELU1
	arm_relu_q7(ip1_out, IP1_OUT_DIM);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	2190      	movs	r1, #144	; 0x90
 800123e:	4618      	mov	r0, r3
 8001240:	f004 ff9c 	bl	800617c <arm_relu_q7>

	// IP2 
	arm_fully_connected_q7(ip1_out, ip2_wt, IP1_OUT_DIM, IP2_OUT_DIM, 2, 8, ip2_bias, ip2_out, vec_buffer);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a18      	ldr	r0, [r3, #32]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001250:	9204      	str	r2, [sp, #16]
 8001252:	9303      	str	r3, [sp, #12]
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <_ZN3DNN6run_nnEPaS0_+0xd4>)
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2308      	movs	r3, #8
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2302      	movs	r3, #2
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2390      	movs	r3, #144	; 0x90
 8001262:	2290      	movs	r2, #144	; 0x90
 8001264:	491e      	ldr	r1, [pc, #120]	; (80012e0 <_ZN3DNN6run_nnEPaS0_+0xd8>)
 8001266:	f004 ffea 	bl	800623e <arm_fully_connected_q7>
        // RELU2
	arm_relu_q7(ip2_out, IP2_OUT_DIM);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2190      	movs	r1, #144	; 0x90
 8001270:	4618      	mov	r0, r3
 8001272:	f004 ff83 	bl	800617c <arm_relu_q7>

	// IP3 
	arm_fully_connected_q7(ip2_out, ip3_wt, IP2_OUT_DIM, IP3_OUT_DIM, 2, 9, ip3_bias, ip3_out, vec_buffer);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001282:	9204      	str	r2, [sp, #16]
 8001284:	9303      	str	r3, [sp, #12]
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <_ZN3DNN6run_nnEPaS0_+0xdc>)
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2309      	movs	r3, #9
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	2302      	movs	r3, #2
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2390      	movs	r3, #144	; 0x90
 8001294:	2290      	movs	r2, #144	; 0x90
 8001296:	4914      	ldr	r1, [pc, #80]	; (80012e8 <_ZN3DNN6run_nnEPaS0_+0xe0>)
 8001298:	f004 ffd1 	bl	800623e <arm_fully_connected_q7>
        // RELU3
	arm_relu_q7(ip3_out, IP3_OUT_DIM);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	2190      	movs	r1, #144	; 0x90
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 ff6a 	bl	800617c <arm_relu_q7>

	// IP4 
	arm_fully_connected_q7(ip3_out, ip4_wt, IP3_OUT_DIM, OUT_DIM, 0, 6, ip4_bias, out_data, vec_buffer);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	9304      	str	r3, [sp, #16]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <_ZN3DNN6run_nnEPaS0_+0xe4>)
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2306      	movs	r3, #6
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2300      	movs	r3, #0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	230c      	movs	r3, #12
 80012c4:	2290      	movs	r2, #144	; 0x90
 80012c6:	490a      	ldr	r1, [pc, #40]	; (80012f0 <_ZN3DNN6run_nnEPaS0_+0xe8>)
 80012c8:	f004 ffb9 	bl	800623e <arm_fully_connected_q7>

}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	080167e8 	.word	0x080167e8
 80012d8:	0800db48 	.word	0x0800db48
 80012dc:	0801b978 	.word	0x0801b978
 80012e0:	08016878 	.word	0x08016878
 80012e4:	08020b08 	.word	0x08020b08
 80012e8:	0801ba08 	.word	0x0801ba08
 80012ec:	08021258 	.word	0x08021258
 80012f0:	08020b98 	.word	0x08020b98

080012f4 <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "ML-KWS-for-MCU/NN/nn.h"

NN::~NN() {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <_ZN2NND1Ev+0x1c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	08021280 	.word	0x08021280

08001314 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>


AudioPlayer::AudioPlayer(SAI_HandleTypeDef *hsai)
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
:hsai(hsai)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	60da      	str	r2, [r3, #12]
{
	sai_stop_flag = 1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	721a      	strb	r2, [r3, #8]

}
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
}
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	605a      	str	r2, [r3, #4]
	played_samples = 0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
	converted_samples = 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]

//	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
	sai_buffer = new int16_t[PLAY_BUFFER_LENGTH];
 800136a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800136e:	f00a fac5 	bl	800b8fc <_Znaj>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]


	// initial full read
	update_sai_buffer(0, PLAY_BUFFER_LENGTH);
 800137a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800137e:	2100      	movs	r1, #0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f829 	bl	80013d8 <_ZN11AudioPlayer17update_sai_bufferEmm>

	// Start SAI in circular mode
	sai_stop_flag = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	721a      	strb	r2, [r3, #8]

	if (HAL_SAI_Transmit_DMA(hsai, (uint8_t*)sai_buffer, PLAY_BUFFER_LENGTH*sizeof(uint8_t)) == HAL_ERROR) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68d8      	ldr	r0, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001398:	4619      	mov	r1, r3
 800139a:	f009 f801 	bl	800a3a0 <HAL_SAI_Transmit_DMA>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <_ZN11AudioPlayer10play_audioEP8WaveData+0x64>
		Error_Handler();
 80013ae:	f001 f859 	bl	8002464 <Error_Handler>
	}

	while(!sai_stop_flag);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7a1b      	ldrb	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <_ZN11AudioPlayer10play_audioEP8WaveData+0x6e>
 80013ba:	e7fa      	b.n	80013b2 <_ZN11AudioPlayer10play_audioEP8WaveData+0x64>
	delete [] sai_buffer;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <_ZN11AudioPlayer10play_audioEP8WaveData+0x80>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00a fa84 	bl	800b8d6 <_ZdaPv>
//	delete [] conversion_buffer;
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <_ZN11AudioPlayer17update_sai_bufferEmm>:

// update buffer. Method called by sai callbacks functions.
void AudioPlayer::update_sai_buffer(uint32_t offset, uint32_t data_length) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_ZN11AudioPlayer17update_sai_bufferEmm+0x60>)
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
	uint32_t read_length = data_length;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	617b      	str	r3, [r7, #20]
	if (read_length >= remaining_samples) {
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d301      	bcc.n	80013fe <_ZN11AudioPlayer17update_sai_bufferEmm+0x26>
		read_length = remaining_samples;
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	617b      	str	r3, [r7, #20]
	}
	if (read_length > 0) {
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00f      	beq.n	8001424 <_ZN11AudioPlayer17update_sai_bufferEmm+0x4c>
		qspi_read((uint8_t*)sai_buffer+offset, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	18d0      	adds	r0, r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	18d1      	adds	r1, r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	461a      	mov	r2, r3
 8001420:	f001 f825 	bl	800246e <_Z9qspi_readPhmm>
//		for (uint32_t i = 0; i < read_length; i++){
//			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_SAI_SCALE_FACTOR + WAVE_TO_SAI_BIAS);
	}
		converted_samples += read_length;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	441a      	add	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	615a      	str	r2, [r3, #20]
//		memcpy(sai_buffer + offset, conversion_buffer, read_length * SAI_DATA_WIDTH);
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	00013880 	.word	0x00013880

0800143c <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	731a      	strb	r2, [r3, #12]
}
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
}
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 80014a6:	2008      	movs	r0, #8
 80014a8:	f00a fa17 	bl	800b8da <_Znwj>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461c      	mov	r4, r3
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff ffc2 	bl	800143c <_ZN8WaveDataC1Em>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 80014bc:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 80014c0:	f00a fa1c 	bl	800b8fc <_Znaj>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 80014cc:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
 80014d0:	f00a fa14 	bl	800b8fc <_Znaj>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6918      	ldr	r0, [r3, #16]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80014ee:	4619      	mov	r1, r3
 80014f0:	f005 fd56 	bl	8006fa0 <HAL_DFSDM_FilterRegularStart_DMA>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	bf0c      	ite	eq
 80014fa:	2301      	moveq	r3, #1
 80014fc:	2300      	movne	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 8001504:	f000 ffae 	bl	8002464 <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <_ZN13AudioRecorder12record_audioEm+0xb8>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 8001510:	f000 f9ae 	bl	8001870 <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 8001514:	f002 f968 	bl	80037e8 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7b1b      	ldrb	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d100      	bne.n	8001522 <_ZN13AudioRecorder12record_audioEm+0x86>
 8001520:	e7fa      	b.n	8001518 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <_ZN13AudioRecorder12record_audioEm+0x98>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f00a f9d1 	bl	800b8d6 <_ZdaPv>
	delete [] wave_buffer;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <_ZN13AudioRecorder12record_audioEm+0xaa>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f00a f9c8 	bl	800b8d6 <_ZdaPv>
	return cur_data;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	200003b0 	.word	0x200003b0

08001558 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <_ZN13AudioRecorder18update_wave_bufferEmm+0x94>)
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	429a      	cmp	r2, r3
 800157a:	d301      	bcc.n	8001580 <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	429a      	cmp	r2, r3
 800158a:	d213      	bcs.n	80015b4 <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	440b      	add	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1419      	asrs	r1, r3, #16
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	b20a      	sxth	r2, r1
 80015aa:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e7e7      	b.n	8001584 <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6858      	ldr	r0, [r3, #4]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	18d1      	adds	r1, r2, r3
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	461a      	mov	r2, r3
 80015ce:	f000 ff67 	bl	80024a0 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	440a      	add	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	00013880 	.word	0x00013880

080015f0 <_ZN13AudioRecorder10print_dataEP8WaveData>:

// print recorded data in 16-bit signed format
void AudioRecorder::print_data(WaveData * data) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	// flash address pointers
	uint32_t printed_samples = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24

	// buffer
	int16_t *buffer = new int16_t[PRINT_BUFFER_LENGTH];
 80015fe:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001602:	f00a f97b 	bl	800b8fc <_Znaj>
 8001606:	4603      	mov	r3, r0
 8001608:	61fb      	str	r3, [r7, #28]

	// navigate through all DFSDM audio memory on flash
	while (printed_samples < data->num_of_samples) {
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	429a      	cmp	r2, r3
 8001612:	d23a      	bcs.n	800168a <_ZN13AudioRecorder10print_dataEP8WaveData+0x9a>
		uint32_t remaining_samples = data->num_of_samples - printed_samples;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	61bb      	str	r3, [r7, #24]
		uint32_t read_samples = remaining_samples < PRINT_BUFFER_LENGTH ? remaining_samples : PRINT_BUFFER_LENGTH;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001624:	bf28      	it	cs
 8001626:	f44f 537a 	movcs.w	r3, #16000	; 0x3e80
 800162a:	617b      	str	r3, [r7, #20]

		// read from flash
		qspi_read((uint8_t*)buffer, data->qspi_address + printed_samples*WAVE_DATA_WIDTH, read_samples*WAVE_DATA_WIDTH);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	18d1      	adds	r1, r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	461a      	mov	r2, r3
 800163c:	69f8      	ldr	r0, [r7, #28]
 800163e:	f000 ff16 	bl	800246e <_Z9qspi_readPhmm>

		// print to terminal
		for (uint32_t i = 0; i < PRINT_BUFFER_LENGTH; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800164c:	d218      	bcs.n	8001680 <_ZN13AudioRecorder10print_dataEP8WaveData+0x90>
			char wav_str[10];
			sprintf(wav_str, "%d", (int)(buffer[i]));
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	4413      	add	r3, r2
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	461a      	mov	r2, r3
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4910      	ldr	r1, [pc, #64]	; (80016a4 <_ZN13AudioRecorder10print_dataEP8WaveData+0xb4>)
 8001662:	4618      	mov	r0, r3
 8001664:	f00b fe8a 	bl	800d37c <siprintf>
			print(wav_str);
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fecd 	bl	800240c <print>
			print(",");
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <_ZN13AudioRecorder10print_dataEP8WaveData+0xb8>)
 8001674:	f000 feca 	bl	800240c <print>
		for (uint32_t i = 0; i < PRINT_BUFFER_LENGTH; i++) {
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	3301      	adds	r3, #1
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	e7e2      	b.n	8001646 <_ZN13AudioRecorder10print_dataEP8WaveData+0x56>
		}

		printed_samples += read_samples;
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4413      	add	r3, r2
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
	while (printed_samples < data->num_of_samples) {
 8001688:	e7bf      	b.n	800160a <_ZN13AudioRecorder10print_dataEP8WaveData+0x1a>
	}
	print("\r\n");
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <_ZN13AudioRecorder10print_dataEP8WaveData+0xbc>)
 800168c:	f000 febe 	bl	800240c <print>
	// free up memory
	delete [] buffer;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <_ZN13AudioRecorder10print_dataEP8WaveData+0xac>
 8001696:	69f8      	ldr	r0, [r7, #28]
 8001698:	f00a f91d 	bl	800b8d6 <_ZdaPv>
}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	0800da40 	.word	0x0800da40
 80016a8:	0800da44 	.word	0x0800da44
 80016ac:	0800da48 	.word	0x0800da48

080016b0 <_Z13get_top_classPa>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(q7_t* nn_output) {
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 80016bc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80016c0:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <_Z13get_top_classPa+0x58>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d214      	bcs.n	80016fa <_Z13get_top_classPa+0x4a>
		if (nn_output[i] > max_value) {
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	f993 3000 	ldrsb.w	r3, [r3]
 80016da:	461a      	mov	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4293      	cmp	r3, r2
 80016e0:	da07      	bge.n	80016f2 <_Z13get_top_classPa+0x42>
			max_index = i;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	f993 3000 	ldrsb.w	r3, [r3]
 80016f0:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e7e5      	b.n	80016c6 <_Z13get_top_classPa+0x16>
		}
	}
	return max_index;
 80016fa:	697b      	ldr	r3, [r7, #20]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000000 	.word	0x20000000

0800170c <_Z19average_predictionsPaS_mm>:

void average_predictions(q7_t *average_out, q7_t* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6178      	str	r0, [r7, #20]
 8001714:	6139      	str	r1, [r7, #16]
 8001716:	60fa      	str	r2, [r7, #12]
 8001718:	60bb      	str	r3, [r7, #8]
	q15_t *sum = new q15_t[num_output_classes];
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4a32      	ldr	r2, [pc, #200]	; (80017e8 <_Z19average_predictionsPaS_mm+0xdc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d801      	bhi.n	8001726 <_Z19average_predictionsPaS_mm+0x1a>
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	e001      	b.n	800172a <_Z19average_predictionsPaS_mm+0x1e>
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	4618      	mov	r0, r3
 800172c:	f00a f8e6 	bl	800b8fc <_Znaj>
 8001730:	4603      	mov	r3, r0
 8001732:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	429a      	cmp	r2, r3
 800173e:	d248      	bcs.n	80017d2 <_Z19average_predictionsPaS_mm+0xc6>
		sum[i] = 0;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	4413      	add	r3, r2
 8001748:	2200      	movs	r2, #0
 800174a:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d21d      	bcs.n	8001794 <_Z19average_predictionsPaS_mm+0x88>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	4413      	add	r3, r2
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	b29a      	uxth	r2, r3
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	fb01 f103 	mul.w	r1, r1, r3
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	440b      	add	r3, r1
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	440b      	add	r3, r1
 8001776:	f993 3000 	ldrsb.w	r3, [r3]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b299      	uxth	r1, r3
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	b20a      	sxth	r2, r1
 800178a:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	3301      	adds	r3, #1
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	e7dd      	b.n	8001750 <_Z19average_predictionsPaS_mm+0x44>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	4413      	add	r3, r2
 80017bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80017c4:	793a      	ldrb	r2, [r7, #4]
 80017c6:	b252      	sxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	3301      	adds	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	e7b2      	b.n	8001738 <_Z19average_predictionsPaS_mm+0x2c>
	}
	delete [] sum;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <_Z19average_predictionsPaS_mm+0xd2>
 80017d8:	69f8      	ldr	r0, [r7, #28]
 80017da:	f00a f87c 	bl	800b8d6 <_ZdaPv>
}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	3ffffffc 	.word	0x3ffffffc

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db12      	blt.n	8001860 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	490a      	ldr	r1, [pc, #40]	; (800186c <__NVIC_DisableIRQ+0x44>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	3320      	adds	r3, #32
 8001850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001854:	f3bf 8f4f 	dsb	sy
}
 8001858:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800185a:	f3bf 8f6f 	isb	sy
}
 800185e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100

08001870 <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001874:	f001 ffa6 	bl	80037c4 <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001878:	201c      	movs	r0, #28
 800187a:	f7ff ffd5 	bl	8001828 <__NVIC_DisableIRQ>
//	NVIC_DisableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800187e:	2101      	movs	r1, #1
 8001880:	2000      	movs	r0, #0
 8001882:	f006 fc35 	bl	80080f0 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001886:	201c      	movs	r0, #28
 8001888:	f7ff ffb0 	bl	80017ec <__NVIC_EnableIRQ>
//	NVIC_EnableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	HAL_ResumeTick();
 800188c:	f001 ffac 	bl	80037e8 <HAL_ResumeTick>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	0000      	movs	r0, r0
	...

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b0a7      	sub	sp, #156	; 0x9c
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189e:	f005 f86b 	bl	8006978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a2:	f000 fa3d 	bl	8001d20 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a6:	f000 fc19 	bl	80020dc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80018aa:	f000 fbf1 	bl	8002090 <_ZL11MX_DMA_Initv>
  MX_DFSDM1_Init();
 80018ae:	f000 faf1 	bl	8001e94 <_ZL14MX_DFSDM1_Initv>
  MX_QUADSPI_Init();
 80018b2:	f000 fb4f 	bl	8001f54 <_ZL15MX_QUADSPI_Initv>
  MX_USART1_UART_Init();
 80018b6:	f000 fbb7 	bl	8002028 <_ZL19MX_USART1_UART_Initv>
  MX_SAI1_Init();
 80018ba:	f000 fb7b 	bl	8001fb4 <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */

  qspi_init();
 80018be:	f000 fe08 	bl	80024d2 <_Z9qspi_initv>
  main_state = SETUP;
 80018c2:	4bc9      	ldr	r3, [pc, #804]	; (8001be8 <main+0x350>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"silence", "unknown","yes","no","up","down","left","right","on","off","stop","go"};
 80018c8:	4ac8      	ldr	r2, [pc, #800]	; (8001bec <main+0x354>)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4611      	mov	r1, r2
 80018ce:	2260      	movs	r2, #96	; 0x60
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00b fc15 	bl	800d100 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(main_state) {
 80018d6:	4bc4      	ldr	r3, [pc, #784]	; (8001be8 <main+0x350>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d8fa      	bhi.n	80018d6 <main+0x3e>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <main+0x50>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	08001cef 	.word	0x08001cef
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	0800194b 	.word	0x0800194b
 80018f4:	080019bd 	.word	0x080019bd
 80018f8:	08001c91 	.word	0x08001c91
	case SETUP:
	{
		ITM_Port32(31) = 1;
 80018fc:	4bbc      	ldr	r3, [pc, #752]	; (8001bf0 <main+0x358>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2120      	movs	r1, #32
 8001906:	48bb      	ldr	r0, [pc, #748]	; (8001bf4 <main+0x35c>)
 8001908:	f006 fbc0 	bl	800808c <HAL_GPIO_WritePin>

		// To indicate to user, don't do nothing when red light
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001912:	48b8      	ldr	r0, [pc, #736]	; (8001bf4 <main+0x35c>)
 8001914:	f006 fbba 	bl	800808c <HAL_GPIO_WritePin>
		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 8001918:	2106      	movs	r1, #6
 800191a:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 800191e:	f000 fde9 	bl	80024f4 <_Z17qspi_erase_blocksmm>
		HAL_Delay(2000);
 8001922:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001926:	f005 f855 	bl	80069d4 <HAL_Delay>

		ITM_Port32(31) = 2;
 800192a:	4bb1      	ldr	r3, [pc, #708]	; (8001bf0 <main+0x358>)
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
		print("Press the blue button and say a keyword\r\n");
 8001930:	48b1      	ldr	r0, [pc, #708]	; (8001bf8 <main+0x360>)
 8001932:	f000 fd6b 	bl	800240c <print>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193c:	48ad      	ldr	r0, [pc, #692]	; (8001bf4 <main+0x35c>)
 800193e:	f006 fba5 	bl	800808c <HAL_GPIO_WritePin>
		main_state = READY;
 8001942:	4ba9      	ldr	r3, [pc, #676]	; (8001be8 <main+0x350>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
		break;
 8001948:	e1db      	b.n	8001d02 <main+0x46a>
	}
	case RECORDING:
	{
		ITM_Port32(31) = 3;
 800194a:	4ba9      	ldr	r3, [pc, #676]	; (8001bf0 <main+0x358>)
 800194c:	2203      	movs	r2, #3
 800194e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2120      	movs	r1, #32
 8001954:	48a7      	ldr	r0, [pc, #668]	; (8001bf4 <main+0x35c>)
 8001956:	f006 fb99 	bl	800808c <HAL_GPIO_WritePin>
		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 800195a:	2014      	movs	r0, #20
 800195c:	f009 ffbd 	bl	800b8da <_Znwj>
 8001960:	4603      	mov	r3, r0
 8001962:	461c      	mov	r4, r3
 8001964:	49a5      	ldr	r1, [pc, #660]	; (8001bfc <main+0x364>)
 8001966:	4620      	mov	r0, r4
 8001968:	f7ff fd7a 	bl	8001460 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 800196c:	4ba4      	ldr	r3, [pc, #656]	; (8001c00 <main+0x368>)
 800196e:	601c      	str	r4, [r3, #0]
		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8001970:	4ba3      	ldr	r3, [pc, #652]	; (8001c00 <main+0x368>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fd8f 	bl	800149c <_ZN13AudioRecorder12record_audioEm>
 800197e:	4603      	mov	r3, r0
 8001980:	4aa0      	ldr	r2, [pc, #640]	; (8001c04 <main+0x36c>)
 8001982:	6013      	str	r3, [r2, #0]

		ITM_Port32(31) = 4;
 8001984:	4b9a      	ldr	r3, [pc, #616]	; (8001bf0 <main+0x358>)
 8001986:	2204      	movs	r2, #4
 8001988:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2120      	movs	r1, #32
 800198e:	4899      	ldr	r0, [pc, #612]	; (8001bf4 <main+0x35c>)
 8001990:	f006 fb7c 	bl	800808c <HAL_GPIO_WritePin>
//		main_state = NN;
		audio_recorder->~AudioRecorder();
 8001994:	4b9a      	ldr	r3, [pc, #616]	; (8001c00 <main+0x368>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fd73 	bl	8001484 <_ZN13AudioRecorderD1Ev>
		delete audio_recorder;
 800199e:	4b98      	ldr	r3, [pc, #608]	; (8001c00 <main+0x368>)
 80019a0:	681c      	ldr	r4, [r3, #0]
 80019a2:	2c00      	cmp	r4, #0
 80019a4:	d006      	beq.n	80019b4 <main+0x11c>
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff fd6c 	bl	8001484 <_ZN13AudioRecorderD1Ev>
 80019ac:	2114      	movs	r1, #20
 80019ae:	4620      	mov	r0, r4
 80019b0:	f009 ff8f 	bl	800b8d2 <_ZdlPvj>
		main_state = AUDIO_TEST;
 80019b4:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <main+0x350>)
 80019b6:	2204      	movs	r2, #4
 80019b8:	701a      	strb	r2, [r3, #0]
		break;
 80019ba:	e1a2      	b.n	8001d02 <main+0x46a>
	}
	case NN:
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c2:	488c      	ldr	r0, [pc, #560]	; (8001bf4 <main+0x35c>)
 80019c4:	f006 fb62 	bl	800808c <HAL_GPIO_WritePin>

		// input buffer
		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 80019c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80019cc:	f009 ff96 	bl	800b8fc <_Znaj>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// mfcc coefficients
		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 80019d6:	2101      	movs	r1, #1
 80019d8:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 80019dc:	f00b fb4e 	bl	800d07c <calloc>
 80019e0:	4603      	mov	r3, r0
 80019e2:	67fb      	str	r3, [r7, #124]	; 0x7c

		// output buffer
		q7_t *predictions = (q7_t*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(q7_t));
 80019e4:	2101      	movs	r1, #1
 80019e6:	206c      	movs	r0, #108	; 0x6c
 80019e8:	f00b fb48 	bl	800d07c <calloc>
 80019ec:	4603      	mov	r3, r0
 80019ee:	67bb      	str	r3, [r7, #120]	; 0x78

		// average predictions
		q7_t *average = new q7_t[NUM_OUTPUT_CLASSES];
 80019f0:	200c      	movs	r0, #12
 80019f2:	f009 ff83 	bl	800b8fc <_Znaj>
 80019f6:	4603      	mov	r3, r0
 80019f8:	677b      	str	r3, [r7, #116]	; 0x74

		uint32_t pred_index;

		q7_t *mfcc_head;
//		DS_CNN *model = new DS_CNN();
		DNN *model = new DNN();
 80019fa:	2030      	movs	r0, #48	; 0x30
 80019fc:	f009 ff6d 	bl	800b8da <_Znwj>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461c      	mov	r4, r3
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fb93 	bl	8001130 <_ZN3DNNC1Ev>
 8001a0a:	673c      	str	r4, [r7, #112]	; 0x70

		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 8001a0c:	2034      	movs	r0, #52	; 0x34
 8001a0e:	f009 ff64 	bl	800b8da <_Znwj>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461c      	mov	r4, r3
 8001a16:	2301      	movs	r3, #1
 8001a18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001a1c:	210a      	movs	r1, #10
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7fe fea2 	bl	8000768 <_ZN4MFCCC1Eiii>
 8001a24:	66fc      	str	r4, [r7, #108]	; 0x6c

		bool keyword_detected = false;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		q7_t *average_window_head = predictions;
 8001a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f200 80ed 	bhi.w	8001c1c <main+0x384>
				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 8001a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a46:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001a52:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001a56:	4619      	mov	r1, r3
 8001a58:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a5c:	f000 fd07 	bl	800246e <_Z9qspi_readPhmm>
				// move old data to the left
				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS * sizeof(q7_t));
 8001a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a62:	3332      	adds	r3, #50	; 0x32
 8001a64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 ffb1 	bl	80039d2 <arm_copy_q7>
				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8001a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d81a      	bhi.n	8001abe <main+0x226>
					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8001a88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	461a      	mov	r2, r3
 8001a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001aa4:	f7ff f96e 	bl	8000d84 <_ZN4MFCC12mfcc_computeEPKsPa>
					mfcc_head += NUM_MFCC_COEFFS;
 8001aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aac:	330a      	adds	r3, #10
 8001aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001abc:	e7e0      	b.n	8001a80 <main+0x1e8>
				}
				q7_t* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8001abe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	461a      	mov	r2, r3
 8001acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ace:	4413      	add	r3, r2
 8001ad0:	66bb      	str	r3, [r7, #104]	; 0x68
				model->run_nn(mfcc_out, nn_out);
 8001ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001adc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ade:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001ae0:	4798      	blx	r3
//				arm_softmax_q7(nn_out,NUM_OUTPUT_CLASSES,nn_out);

				// get prediction for each recording window
				if (DEBUG_MODE) {
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <main+0x370>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d014      	beq.n	8001b14 <main+0x27c>
					pred_index = get_top_class(nn_out);
 8001aea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001aec:	f7ff fde0 	bl	80016b0 <_Z13get_top_classPa>
 8001af0:	6678      	str	r0, [r7, #100]	; 0x64
					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], nn_out[pred_index]);
 8001af2:	1d3a      	adds	r2, r7, #4
 8001af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	18d1      	adds	r1, r2, r3
 8001afa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001afe:	4413      	add	r3, r2
 8001b00:	f993 3000 	ldrsb.w	r3, [r3]
 8001b04:	460a      	mov	r2, r1
 8001b06:	4941      	ldr	r1, [pc, #260]	; (8001c0c <main+0x374>)
 8001b08:	4841      	ldr	r0, [pc, #260]	; (8001c10 <main+0x378>)
 8001b0a:	f00b fc37 	bl	800d37c <siprintf>
					print(uart_buffer);
 8001b0e:	4840      	ldr	r0, [pc, #256]	; (8001c10 <main+0x378>)
 8001b10:	f000 fc7c 	bl	800240c <print>
				}

				// increment average window pointer
				if (i >= AVERAGE_WINDOW_LENGTH) {
 8001b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d904      	bls.n	8001b26 <main+0x28e>
					average_window_head += NUM_OUTPUT_CLASSES;
 8001b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b20:	330c      	adds	r3, #12
 8001b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 8001b26:	230c      	movs	r3, #12
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001b2e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b30:	f7ff fdec 	bl	800170c <_Z19average_predictionsPaS_mm>
				pred_index = get_top_class(average);
 8001b34:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b36:	f7ff fdbb 	bl	80016b0 <_Z13get_top_classPa>
 8001b3a:	6678      	str	r0, [r7, #100]	; 0x64

				if (DEBUG_MODE) {
 8001b3c:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <main+0x370>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <main+0x2ce>
					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], average[pred_index]);
 8001b44:	1d3a      	adds	r2, r7, #4
 8001b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	18d1      	adds	r1, r2, r3
 8001b4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b50:	4413      	add	r3, r2
 8001b52:	f993 3000 	ldrsb.w	r3, [r3]
 8001b56:	460a      	mov	r2, r1
 8001b58:	492e      	ldr	r1, [pc, #184]	; (8001c14 <main+0x37c>)
 8001b5a:	482d      	ldr	r0, [pc, #180]	; (8001c10 <main+0x378>)
 8001b5c:	f00b fc0e 	bl	800d37c <siprintf>
					print(uart_buffer);
 8001b60:	482b      	ldr	r0, [pc, #172]	; (8001c10 <main+0x378>)
 8001b62:	f000 fc53 	bl	800240c <print>
				}

				if (pred_index != SILENCE_INDEX && pred_index != UNKNOWN_INDEX && average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 8001b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d02a      	beq.n	8001bc2 <main+0x32a>
 8001b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d027      	beq.n	8001bc2 <main+0x32a>
 8001b72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b76:	4413      	add	r3, r2
 8001b78:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b84:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001bd0 <main+0x338>
 8001b88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b8c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001bd8 <main+0x340>
 8001b90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b94:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001be0 <main+0x348>
 8001b98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	dd0f      	ble.n	8001bc2 <main+0x32a>
					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 8001ba2:	1d3a      	adds	r2, r7, #4
 8001ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	461a      	mov	r2, r3
 8001bac:	491a      	ldr	r1, [pc, #104]	; (8001c18 <main+0x380>)
 8001bae:	4818      	ldr	r0, [pc, #96]	; (8001c10 <main+0x378>)
 8001bb0:	f00b fbe4 	bl	800d37c <siprintf>
					print(uart_buffer);
 8001bb4:	4816      	ldr	r0, [pc, #88]	; (8001c10 <main+0x378>)
 8001bb6:	f000 fc29 	bl	800240c <print>
					keyword_detected = true;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
					break;
 8001bc0:	e02c      	b.n	8001c1c <main+0x384>
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8001bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bcc:	e734      	b.n	8001a38 <main+0x1a0>
 8001bce:	bf00      	nop
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40600000 	.word	0x40600000
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40590000 	.word	0x40590000
 8001be0:	00000000 	.word	0x00000000
 8001be4:	404b8000 	.word	0x404b8000
 8001be8:	2000033c 	.word	0x2000033c
 8001bec:	0800dae8 	.word	0x0800dae8
 8001bf0:	e000007c 	.word	0xe000007c
 8001bf4:	40022400 	.word	0x40022400
 8001bf8:	0800da4c 	.word	0x0800da4c
 8001bfc:	2000009c 	.word	0x2000009c
 8001c00:	200003a4 	.word	0x200003a4
 8001c04:	200003a8 	.word	0x200003a8
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	0800da78 	.word	0x0800da78
 8001c10:	20000340 	.word	0x20000340
 8001c14:	0800da98 	.word	0x0800da98
 8001c18:	0800dab4 	.word	0x0800dab4
				}
		}

		if (!keyword_detected) {
 8001c1c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <main+0x398>
			print("No keyword detected.");
 8001c2a:	4836      	ldr	r0, [pc, #216]	; (8001d04 <main+0x46c>)
 8001c2c:	f000 fbee 	bl	800240c <print>
		}

		mfcc->~MFCC();
 8001c30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c32:	f7fe fe69 	bl	8000908 <_ZN4MFCCD1Ev>
		delete mfcc;
 8001c36:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d006      	beq.n	8001c4a <main+0x3b2>
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7fe fe63 	bl	8000908 <_ZN4MFCCD1Ev>
 8001c42:	2134      	movs	r1, #52	; 0x34
 8001c44:	4620      	mov	r0, r4
 8001c46:	f009 fe44 	bl	800b8d2 <_ZdlPvj>

//		model->~DS_CNN();
		model->~DNN();
 8001c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c52:	4798      	blx	r3

		delete [] mfcc_out;
 8001c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <main+0x3c8>
 8001c5a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001c5c:	f009 fe3b 	bl	800b8d6 <_ZdaPv>
		delete [] predictions;
 8001c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <main+0x3d4>
 8001c66:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001c68:	f009 fe35 	bl	800b8d6 <_ZdaPv>
		delete [] average;
 8001c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <main+0x3e0>
 8001c72:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c74:	f009 fe2f 	bl	800b8d6 <_ZdaPv>
		delete [] audio_buffer;
 8001c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <main+0x3f0>
 8001c80:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c84:	f009 fe27 	bl	800b8d6 <_ZdaPv>
		main_state = SETUP;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <main+0x470>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
		break;
 8001c8e:	e038      	b.n	8001d02 <main+0x46a>
	}
	case AUDIO_TEST:
	{
		audio_player = new AudioPlayer(&hsai_BlockA1);
 8001c90:	2018      	movs	r0, #24
 8001c92:	f009 fe22 	bl	800b8da <_Znwj>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461c      	mov	r4, r3
 8001c9a:	491c      	ldr	r1, [pc, #112]	; (8001d0c <main+0x474>)
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff fb39 	bl	8001314 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <main+0x478>)
 8001ca4:	601c      	str	r4, [r3, #0]
		audio_player->play_audio(wave_data);
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <main+0x478>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <main+0x47c>)
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fb4c 	bl	800134e <_ZN11AudioPlayer10play_audioEP8WaveData>

		audio_recorder->print_data(wave_data);
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <main+0x480>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <main+0x47c>)
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc95 	bl	80015f0 <_ZN13AudioRecorder10print_dataEP8WaveData>
		main_state = NN;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <main+0x470>)
 8001cc8:	2203      	movs	r2, #3
 8001cca:	701a      	strb	r2, [r3, #0]
//		main_state = SETUP;
		audio_player->~AudioPlayer();
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <main+0x478>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fb31 	bl	8001338 <_ZN11AudioPlayerD1Ev>
		delete audio_player;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <main+0x478>)
 8001cd8:	681c      	ldr	r4, [r3, #0]
 8001cda:	2c00      	cmp	r4, #0
 8001cdc:	d00e      	beq.n	8001cfc <main+0x464>
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff fb2a 	bl	8001338 <_ZN11AudioPlayerD1Ev>
 8001ce4:	2118      	movs	r1, #24
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f009 fdf3 	bl	800b8d2 <_ZdlPvj>

		break;
 8001cec:	e006      	b.n	8001cfc <main+0x464>
	}
	case READY:
	{
		if (LOW_POWER_MODE)
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <main+0x484>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <main+0x468>
			enter_sleep_mode();
 8001cf6:	f7ff fdbb 	bl	8001870 <_Z16enter_sleep_modev>
		break;
 8001cfa:	e001      	b.n	8001d00 <main+0x468>
		break;
 8001cfc:	bf00      	nop
 8001cfe:	e5ea      	b.n	80018d6 <main+0x3e>
		break;
 8001d00:	bf00      	nop
	}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001d02:	e5e8      	b.n	80018d6 <main+0x3e>
 8001d04:	0800dad0 	.word	0x0800dad0
 8001d08:	2000033c 	.word	0x2000033c
 8001d0c:	200001d4 	.word	0x200001d4
 8001d10:	200003ac 	.word	0x200003ac
 8001d14:	200003a8 	.word	0x200003a8
 8001d18:	200003a4 	.word	0x200003a4
 8001d1c:	200003b0 	.word	0x200003b0

08001d20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0b8      	sub	sp, #224	; 0xe0
 8001d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d2a:	2234      	movs	r2, #52	; 0x34
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00b fa0e 	bl	800d150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	2290      	movs	r2, #144	; 0x90
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f00b f9ff 	bl	800d150 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <_Z18SystemClock_Configv+0x168>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a4c      	ldr	r2, [pc, #304]	; (8001e88 <_Z18SystemClock_Configv+0x168>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <_Z18SystemClock_Configv+0x168>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <_Z18SystemClock_Configv+0x16c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <_Z18SystemClock_Configv+0x16c>)
 8001d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <_Z18SystemClock_Configv+0x16c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d8e:	2310      	movs	r3, #16
 8001d90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001da0:	2308      	movs	r3, #8
 8001da2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001da6:	23d8      	movs	r3, #216	; 0xd8
 8001da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db2:	2304      	movs	r3, #4
 8001db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f006 fe76 	bl	8008ab4 <HAL_RCC_OscConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001dd8:	f000 fb44 	bl	8002464 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ddc:	f006 f9aa 	bl	8008134 <HAL_PWREx_EnableOverDrive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001df0:	f000 fb38 	bl	8002464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e1a:	2107      	movs	r1, #7
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f007 f8f7 	bl	8009010 <HAL_RCC_ClockConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 8001e32:	f000 fb17 	bl	8002464 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <_Z18SystemClock_Configv+0x170>)
 8001e38:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001e3a:	23c0      	movs	r3, #192	; 0xc0
 8001e3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001e42:	2306      	movs	r3, #6
 8001e44:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001e46:	2301      	movs	r3, #1
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001e52:	2300      	movs	r3, #0
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	4618      	mov	r0, r3
 8001e66:	f007 fadb 	bl	8009420 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_Z18SystemClock_Configv+0x15e>
  {
    Error_Handler();
 8001e7a:	f000 faf3 	bl	8002464 <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	37e0      	adds	r7, #224	; 0xe0
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	08080040 	.word	0x08080040

08001e94 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <_ZL14MX_DFSDM1_Initv+0xb0>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001ea4:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001eb2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001eb6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001eba:	2264      	movs	r2, #100	; 0x64
 8001ebc:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8001ec4:	481e      	ldr	r0, [pc, #120]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001ec6:	f004 ff4b 	bl	8006d60 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001ecc:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <_ZL14MX_DFSDM1_Initv+0xb8>)
 8001ece:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = ENABLE;
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 67;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001ede:	2243      	movs	r2, #67	; 0x43
 8001ee0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001efc:	2204      	movs	r2, #4
 8001efe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8001f18:	480b      	ldr	r0, [pc, #44]	; (8001f48 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8001f1a:	f004 fe61 	bl	8006be0 <HAL_DFSDM_ChannelInit>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_ZL14MX_DFSDM1_Initv+0x9e>
  {
    Error_Handler();
 8001f2e:	f000 fa99 	bl	8002464 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON);
 8001f32:	2201      	movs	r2, #1
 8001f34:	4906      	ldr	r1, [pc, #24]	; (8001f50 <_ZL14MX_DFSDM1_Initv+0xbc>)
 8001f36:	4802      	ldr	r0, [pc, #8]	; (8001f40 <_ZL14MX_DFSDM1_Initv+0xac>)
 8001f38:	f004 ffec 	bl	8006f14 <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000009c 	.word	0x2000009c
 8001f44:	40017500 	.word	0x40017500
 8001f48:	200000f0 	.word	0x200000f0
 8001f4c:	400174a0 	.word	0x400174a0
 8001f50:	00050020 	.word	0x00050020

08001f54 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f60:	22ff      	movs	r2, #255	; 0xff
 8001f62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <_ZL15MX_QUADSPI_Initv+0x58>)
 8001f90:	f006 f920 	bl	80081d4 <HAL_QSPI_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8001fa4:	f000 fa5e 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000188 	.word	0x20000188
 8001fb0:	a0001000 	.word	0xa0001000

08001fb4 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <_ZL12MX_SAI1_Initv+0x70>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fde:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001fe2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	4807      	ldr	r0, [pc, #28]	; (8002020 <_ZL12MX_SAI1_Initv+0x6c>)
 8002004:	f007 ffa6 	bl	8009f54 <HAL_SAI_InitProtocol>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <_ZL12MX_SAI1_Initv+0x68>
  {
    Error_Handler();
 8002018:	f000 fa24 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200001d4 	.word	0x200001d4
 8002024:	40015804 	.word	0x40015804

08002028 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <_ZL19MX_USART1_UART_Initv+0x64>)
 8002030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <_ZL19MX_USART1_UART_Initv+0x60>)
 800206c:	f008 ff3e 	bl	800aeec <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002080:	f000 f9f0 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200002b8 	.word	0x200002b8
 800208c:	40011000 	.word	0x40011000

08002090 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_ZL11MX_DMA_Initv+0x48>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <_ZL11MX_DMA_Initv+0x48>)
 800209c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <_ZL11MX_DMA_Initv+0x48>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2038      	movs	r0, #56	; 0x38
 80020b4:	f004 fd6a 	bl	8006b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020b8:	2038      	movs	r0, #56	; 0x38
 80020ba:	f004 fd83 	bl	8006bc4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2039      	movs	r0, #57	; 0x39
 80020c4:	f004 fd62 	bl	8006b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80020c8:	2039      	movs	r0, #57	; 0x39
 80020ca:	f004 fd7b 	bl	8006bc4 <HAL_NVIC_EnableIRQ>

}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 80020f8:	f043 0310 	orr.w	r3, r3, #16
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a22      	ldr	r2, [pc, #136]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <_ZL12MX_GPIO_Initv+0x104>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f242 0120 	movw	r1, #8224	; 0x2020
 8002188:	4816      	ldr	r0, [pc, #88]	; (80021e4 <_ZL12MX_GPIO_Initv+0x108>)
 800218a:	f005 ff7f 	bl	800808c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 800218e:	f242 0320 	movw	r3, #8224	; 0x2020
 8002192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4619      	mov	r1, r3
 80021a6:	480f      	ldr	r0, [pc, #60]	; (80021e4 <_ZL12MX_GPIO_Initv+0x108>)
 80021a8:	f005 fcb8 	bl	8007b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <_ZL12MX_GPIO_Initv+0x10c>)
 80021c2:	f005 fcab 	bl	8007b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2006      	movs	r0, #6
 80021cc:	f004 fcde 	bl	8006b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021d0:	2006      	movs	r0, #6
 80021d2:	f004 fcf7 	bl	8006bc4 <HAL_NVIC_EnableIRQ>

}
 80021d6:	bf00      	nop
 80021d8:	3730      	adds	r7, #48	; 0x30
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40022400 	.word	0x40022400
 80021e8:	40020000 	.word	0x40020000

080021ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d11e      	bne.n	800223a <HAL_GPIO_EXTI_Callback+0x4e>
	case BLUE_BUTTON_Pin:
		switch(main_state) {
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_GPIO_EXTI_Callback+0x5c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b05      	cmp	r3, #5
 8002204:	d818      	bhi.n	8002238 <HAL_GPIO_EXTI_Callback+0x4c>
 8002206:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_GPIO_EXTI_Callback+0x20>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	08002225 	.word	0x08002225
 8002210:	08002237 	.word	0x08002237
 8002214:	0800222d 	.word	0x0800222d
 8002218:	08002237 	.word	0x08002237
 800221c:	08002237 	.word	0x08002237
 8002220:	08002237 	.word	0x08002237
		case READY:
			main_state = RECORDING;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002226:	2202      	movs	r2, #2
 8002228:	701a      	strb	r2, [r3, #0]
			break;
 800222a:	e005      	b.n	8002238 <HAL_GPIO_EXTI_Callback+0x4c>
		case RECORDING:
			audio_recorder->dfsdm_stop_flag = 1;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_GPIO_EXTI_Callback+0x60>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	731a      	strb	r2, [r3, #12]
			break;
 8002234:	e000      	b.n	8002238 <HAL_GPIO_EXTI_Callback+0x4c>
		case SETUP:
		case MFCC_TEST:
		case AUDIO_TEST:
		case NN:
			break;
 8002236:	bf00      	nop
		}
		break;
 8002238:	bf00      	nop
	}
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	2000033c 	.word	0x2000033c
 800224c:	200003a4 	.word	0x200003a4

08002250 <HAL_SAI_TxHalfCpltCallback>:

// SAI Circular DMA callback functions
void HAL_SAI_TxHalfCpltCallback (SAI_HandleTypeDef *hsai) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	if (hsai->Instance == SAI1_Block_A) {
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a17      	ldr	r2, [pc, #92]	; (80022bc <HAL_SAI_TxHalfCpltCallback+0x6c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d127      	bne.n	80022b2 <HAL_SAI_TxHalfCpltCallback+0x62>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_SAI_TxHalfCpltCallback+0x70>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_SAI_TxHalfCpltCallback+0x70>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 8002270:	611a      	str	r2, [r3, #16]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_SAI_TxHalfCpltCallback+0x70>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_SAI_TxHalfCpltCallback+0x74>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d911      	bls.n	80022a2 <HAL_SAI_TxHalfCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f008 f81a 	bl	800a2b8 <HAL_SAI_DMAStop>
 8002284:	4603      	mov	r3, r0
 8002286:	2b01      	cmp	r3, #1
 8002288:	bf0c      	ite	eq
 800228a:	2301      	moveq	r3, #1
 800228c:	2300      	movne	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_SAI_TxHalfCpltCallback+0x48>
				Error_Handler();
 8002294:	f000 f8e6 	bl	8002464 <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_SAI_TxHalfCpltCallback+0x70>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	721a      	strb	r2, [r3, #8]
		}
		else {
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 80022a0:	e007      	b.n	80022b2 <HAL_SAI_TxHalfCpltCallback+0x62>
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_SAI_TxHalfCpltCallback+0x70>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f893 	bl	80013d8 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40015804 	.word	0x40015804
 80022c0:	200003ac 	.word	0x200003ac
 80022c4:	0001387f 	.word	0x0001387f

080022c8 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback (SAI_HandleTypeDef *hsai) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_SAI_TxCpltCallback+0x6c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_SAI_TxCpltCallback+0x6c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80022de:	611a      	str	r2, [r3, #16]
	if (hsai->Instance == SAI1_Block_A) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_SAI_TxCpltCallback+0x70>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d120      	bne.n	800232c <HAL_SAI_TxCpltCallback+0x64>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_SAI_TxCpltCallback+0x6c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_SAI_TxCpltCallback+0x74>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d911      	bls.n	800231a <HAL_SAI_TxCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f007 ffde 	bl	800a2b8 <HAL_SAI_DMAStop>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_SAI_TxCpltCallback+0x48>
				Error_Handler();
 800230c:	f000 f8aa 	bl	8002464 <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_SAI_TxCpltCallback+0x6c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2201      	movs	r2, #1
 8002316:	721a      	strb	r2, [r3, #8]
		}
		else {
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002318:	e008      	b.n	800232c <HAL_SAI_TxCpltCallback+0x64>
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_SAI_TxCpltCallback+0x6c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002322:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff f856 	bl	80013d8 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200003ac 	.word	0x200003ac
 8002338:	40015804 	.word	0x40015804
 800233c:	0001387f 	.word	0x0001387f

08002340 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d11f      	bne.n	8002390 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f8fc 	bl	8001558 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x60>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d910      	bls.n	8002390 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f004 fe96 	bl	80070a8 <HAL_DFSDM_FilterRegularStop_DMA>
 800237c:	4603      	mov	r3, r0
 800237e:	2b01      	cmp	r3, #1
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 800238c:	f000 f86a 	bl	8002464 <Error_Handler>
			}
		}
	}
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	2000009c 	.word	0x2000009c
 800239c:	200003a4 	.word	0x200003a4
 80023a0:	0001387f 	.word	0x0001387f

080023a4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d120      	bne.n	80023f6 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80023bc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff f8c9 	bl	8001558 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_DFSDM_FilterRegConvCpltCallback+0x64>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d910      	bls.n	80023f6 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f004 fe63 	bl	80070a8 <HAL_DFSDM_FilterRegularStop_DMA>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 80023f2:	f000 f837 	bl	8002464 <Error_Handler>
			}
		}

	}
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000009c 	.word	0x2000009c
 8002404:	200003a4 	.word	0x200003a4
 8002408:	0001387f 	.word	0x0001387f

0800240c <print>:

void print(const char* txt) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4808      	ldr	r0, [pc, #32]	; (8002438 <print+0x2c>)
 8002418:	f00a ffd0 	bl	800d3bc <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fd ff6f 	bl	8000300 <strlen>
 8002422:	4603      	mov	r3, r0
 8002424:	b29a      	uxth	r2, r3
 8002426:	230a      	movs	r3, #10
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <print+0x2c>)
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <print+0x30>)
 800242c:	f008 fdac 	bl	800af88 <HAL_UART_Transmit>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000340 	.word	0x20000340
 800243c:	200002b8 	.word	0x200002b8

08002440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002452:	f004 fa9f 	bl	8006994 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40001c00 	.word	0x40001c00

08002464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002468:	b672      	cpsid	i
}
 800246a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246c:	e7fe      	b.n	800246c <Error_Handler+0x8>

0800246e <_Z9qspi_readPhmm>:
#include <stdint.h>
#include "stm32f769i_discovery_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f8c4 	bl	800260c <BSP_QSPI_Read>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 8002494:	f7ff ffe6 	bl	8002464 <Error_Handler>
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f8ff 	bl	80026b4 <BSP_QSPI_Write>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 80024c6:	f7ff ffcd 	bl	8002464 <Error_Handler>
	}
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_Z9qspi_initv>:

void qspi_init() {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 80024d6:	f000 f829 	bl	800252c <BSP_QSPI_Init>
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}

080024de <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f962 	bl	80027b0 <BSP_QSPI_Erase_Block>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d90b      	bls.n	8002522 <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25L512_SUBSECTOR_SIZE);
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	031b      	lsls	r3, r3, #12
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ffe2 	bl	80024de <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3301      	adds	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e7ef      	b.n	8002502 <_Z17qspi_erase_blocksmm+0xe>
	}
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002532:	4b34      	ldr	r3, [pc, #208]	; (8002604 <BSP_QSPI_Init+0xd8>)
 8002534:	4a34      	ldr	r2, [pc, #208]	; (8002608 <BSP_QSPI_Init+0xdc>)
 8002536:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002538:	4832      	ldr	r0, [pc, #200]	; (8002604 <BSP_QSPI_Init+0xd8>)
 800253a:	f005 fec7 	bl	80082cc <HAL_QSPI_DeInit>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e059      	b.n	80025fc <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002548:	2100      	movs	r1, #0
 800254a:	482e      	ldr	r0, [pc, #184]	; (8002604 <BSP_QSPI_Init+0xd8>)
 800254c:	f000 f974 	bl	8002838 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8002550:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <BSP_QSPI_Init+0xd8>)
 8002552:	2201      	movs	r2, #1
 8002554:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <BSP_QSPI_Init+0xd8>)
 8002558:	2210      	movs	r2, #16
 800255a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <BSP_QSPI_Init+0xd8>)
 800255e:	2210      	movs	r2, #16
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002566:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002570:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	461a      	mov	r2, r3
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <BSP_QSPI_Init+0xd8>)
 800257e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <BSP_QSPI_Init+0xd8>)
 8002582:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002586:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <BSP_QSPI_Init+0xd8>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <BSP_QSPI_Init+0xd8>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <BSP_QSPI_Init+0xd8>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800259a:	481a      	ldr	r0, [pc, #104]	; (8002604 <BSP_QSPI_Init+0xd8>)
 800259c:	f005 fe1a 	bl	80081d4 <HAL_QSPI_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e028      	b.n	80025fc <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80025aa:	4816      	ldr	r0, [pc, #88]	; (8002604 <BSP_QSPI_Init+0xd8>)
 80025ac:	f000 fa06 	bl	80029bc <QSPI_ResetMemory>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 80025b6:	2304      	movs	r3, #4
 80025b8:	e020      	b.n	80025fc <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 80025ba:	4812      	ldr	r0, [pc, #72]	; (8002604 <BSP_QSPI_Init+0xd8>)
 80025bc:	f000 fc1d 	bl	8002dfa <QSPI_EnterMemory_QPI>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 80025c6:	2304      	movs	r3, #4
 80025c8:	e018      	b.n	80025fc <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 80025ca:	480e      	ldr	r0, [pc, #56]	; (8002604 <BSP_QSPI_Init+0xd8>)
 80025cc:	f000 fb1e 	bl	8002c0c <QSPI_EnterFourBytesAddress>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 80025d6:	2304      	movs	r3, #4
 80025d8:	e010      	b.n	80025fc <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 80025da:	480a      	ldr	r0, [pc, #40]	; (8002604 <BSP_QSPI_Init+0xd8>)
 80025dc:	f000 fb51 	bl	8002c82 <QSPI_DummyCyclesCfg>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 80025e6:	2304      	movs	r3, #4
 80025e8:	e008      	b.n	80025fc <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 80025ea:	4806      	ldr	r0, [pc, #24]	; (8002604 <BSP_QSPI_Init+0xd8>)
 80025ec:	f000 fc52 	bl	8002e94 <QSPI_OutDrvStrengthCfg>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 80025f6:	2304      	movs	r3, #4
 80025f8:	e000      	b.n	80025fc <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200003f4 	.word	0x200003f4
 8002608:	a0001000 	.word	0xa0001000

0800260c <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b092      	sub	sp, #72	; 0x48
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002618:	f44f 7340 	mov.w	r3, #768	; 0x300
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 800261e:	23ec      	movs	r3, #236	; 0xec
 8002620:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002622:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002628:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800262c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002632:	2300      	movs	r3, #0
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002636:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 800263c:	230a      	movs	r3, #10
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002648:	2300      	movs	r3, #0
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800264c:	2300      	movs	r3, #0
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4619      	mov	r1, r3
 800265a:	4815      	ldr	r0, [pc, #84]	; (80026b0 <BSP_QSPI_Read+0xa4>)
 800265c:	f005 fe5a 	bl	8008314 <HAL_QSPI_Command>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e01d      	b.n	80026a6 <BSP_QSPI_Read+0x9a>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_1_CYCLE);
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <BSP_QSPI_Read+0xa4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <BSP_QSPI_Read+0xa4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002678:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <BSP_QSPI_Read+0xa4>)
 8002682:	f005 ff37 	bl	80084f4 <HAL_QSPI_Receive>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <BSP_QSPI_Read+0x84>
  {
    return QSPI_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e00a      	b.n	80026a6 <BSP_QSPI_Read+0x9a>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <BSP_QSPI_Read+0xa4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <BSP_QSPI_Read+0xa4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80026a2:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3748      	adds	r7, #72	; 0x48
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200003f4 	.word	0x200003f4

080026b4 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b096      	sub	sp, #88	; 0x58
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25L512_PAGE_SIZE - (WriteAddr % MX25L512_PAGE_SIZE);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80026c8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80026ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d901      	bls.n	80026d6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80026e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 80026e8:	2312      	movs	r3, #18
 80026ea:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80026ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80026f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026f6:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80026fc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800270a:	2300      	movs	r3, #0
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800270e:	2300      	movs	r3, #0
 8002710:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002714:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8002716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002718:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800271a:	4824      	ldr	r0, [pc, #144]	; (80027ac <BSP_QSPI_Write+0xf8>)
 800271c:	f000 fc76 	bl	800300c <QSPI_WriteEnable>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e03b      	b.n	80027a2 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4619      	mov	r1, r3
 8002734:	481d      	ldr	r0, [pc, #116]	; (80027ac <BSP_QSPI_Write+0xf8>)
 8002736:	f005 fded 	bl	8008314 <HAL_QSPI_Command>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e02e      	b.n	80027a2 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	68f9      	ldr	r1, [r7, #12]
 800274a:	4818      	ldr	r0, [pc, #96]	; (80027ac <BSP_QSPI_Write+0xf8>)
 800274c:	f005 fe40 	bl	80083d0 <HAL_QSPI_Transmit>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e023      	b.n	80027a2 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800275a:	f241 3188 	movw	r1, #5000	; 0x1388
 800275e:	4813      	ldr	r0, [pc, #76]	; (80027ac <BSP_QSPI_Write+0xf8>)
 8002760:	f000 fc9d 	bl	800309e <QSPI_AutoPollingMemReady>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e019      	b.n	80027a2 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800276e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	4413      	add	r3, r2
 8002774:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800277a:	4413      	add	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25L512_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25L512_PAGE_SIZE;
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002786:	429a      	cmp	r2, r3
 8002788:	d203      	bcs.n	8002792 <BSP_QSPI_Write+0xde>
 800278a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	e001      	b.n	8002796 <BSP_QSPI_Write+0xe2>
 8002792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002796:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800279a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279c:	429a      	cmp	r2, r3
 800279e:	d3b8      	bcc.n	8002712 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3758      	adds	r7, #88	; 0x58
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200003f4 	.word	0x200003f4

080027b0 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b090      	sub	sp, #64	; 0x40
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80027b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027bc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 80027be:	2321      	movs	r3, #33	; 0x21
 80027c0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80027c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80027c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027cc:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80027e2:	2300      	movs	r3, #0
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80027e6:	2300      	movs	r3, #0
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80027ea:	4812      	ldr	r0, [pc, #72]	; (8002834 <BSP_QSPI_Erase_Block+0x84>)
 80027ec:	f000 fc0e 	bl	800300c <QSPI_WriteEnable>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e017      	b.n	800282a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4619      	mov	r1, r3
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <BSP_QSPI_Erase_Block+0x84>)
 8002806:	f005 fd85 	bl	8008314 <HAL_QSPI_Command>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e00a      	b.n	800282a <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25L512_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002814:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002818:	4806      	ldr	r0, [pc, #24]	; (8002834 <BSP_QSPI_Erase_Block+0x84>)
 800281a:	f000 fc40 	bl	800309e <QSPI_AutoPollingMemReady>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3740      	adds	r7, #64	; 0x40
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200003f4 	.word	0x200003f4

08002838 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	; 0x38
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002842:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6393      	str	r3, [r2, #56]	; 0x38
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002866:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4a4f      	ldr	r2, [pc, #316]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 800286c:	f023 0302 	bic.w	r3, r3, #2
 8002870:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002872:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a4c      	ldr	r2, [pc, #304]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b44      	ldr	r3, [pc, #272]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a3a      	ldr	r2, [pc, #232]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80028d2:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a34      	ldr	r2, [pc, #208]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028d8:	f043 0310 	orr.w	r3, r3, #16
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a2e      	ldr	r2, [pc, #184]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <BSP_QSPI_MspInit+0x170>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8002906:	230a      	movs	r3, #10
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800290e:	2301      	movs	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002912:	2302      	movs	r3, #2
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291a:	4619      	mov	r1, r3
 800291c:	4823      	ldr	r0, [pc, #140]	; (80029ac <BSP_QSPI_MspInit+0x174>)
 800291e:	f005 f8fd 	bl	8007b1c <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002922:	2304      	movs	r3, #4
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8002926:	2309      	movs	r3, #9
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800292e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002932:	4619      	mov	r1, r3
 8002934:	481d      	ldr	r0, [pc, #116]	; (80029ac <BSP_QSPI_MspInit+0x174>)
 8002936:	f005 f8f1 	bl	8007b1c <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 800293a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8002940:	2309      	movs	r3, #9
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002948:	4619      	mov	r1, r3
 800294a:	4819      	ldr	r0, [pc, #100]	; (80029b0 <BSP_QSPI_MspInit+0x178>)
 800294c:	f005 f8e6 	bl	8007b1c <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8002956:	2309      	movs	r3, #9
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 800295a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295e:	4619      	mov	r1, r3
 8002960:	4813      	ldr	r0, [pc, #76]	; (80029b0 <BSP_QSPI_MspInit+0x178>)
 8002962:	f005 f8db 	bl	8007b1c <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002966:	2304      	movs	r3, #4
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 800296a:	2309      	movs	r3, #9
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	4619      	mov	r1, r3
 8002974:	480f      	ldr	r0, [pc, #60]	; (80029b4 <BSP_QSPI_MspInit+0x17c>)
 8002976:	f005 f8d1 	bl	8007b1c <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800297a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8002980:	2309      	movs	r3, #9
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	480b      	ldr	r0, [pc, #44]	; (80029b8 <BSP_QSPI_MspInit+0x180>)
 800298c:	f005 f8c6 	bl	8007b1c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	210f      	movs	r1, #15
 8002994:	205c      	movs	r0, #92	; 0x5c
 8002996:	f004 f8f9 	bl	8006b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800299a:	205c      	movs	r0, #92	; 0x5c
 800299c:	f004 f912 	bl	8006bc4 <HAL_NVIC_EnableIRQ>
}
 80029a0:	bf00      	nop
 80029a2:	3738      	adds	r7, #56	; 0x38
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40020c00 	.word	0x40020c00

080029bc <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b098      	sub	sp, #96	; 0x60
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80029c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029c8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 80029ca:	2366      	movs	r3, #102	; 0x66
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80029e2:	2300      	movs	r3, #0
 80029e4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80029e6:	2300      	movs	r3, #0
 80029e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f005 fc8d 	bl	8008314 <HAL_QSPI_Command>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0ff      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002a04:	2399      	movs	r3, #153	; 0x99
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f005 fc7e 	bl	8008314 <HAL_QSPI_Command>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0f0      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002a28:	2366      	movs	r3, #102	; 0x66
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f005 fc6c 	bl	8008314 <HAL_QSPI_Command>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0de      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002a46:	2399      	movs	r3, #153	; 0x99
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f005 fc5d 	bl	8008314 <HAL_QSPI_Command>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cf      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8002a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a68:	f003 ffb4 	bl	80069d4 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8002a70:	2301      	movs	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8002a8c:	2305      	movs	r3, #5
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8002a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a96:	f107 0210 	add.w	r2, r7, #16
 8002a9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002a9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f005 fdc3 	bl	800862e <HAL_QSPI_AutoPolling>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0a8      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002ab8:	2305      	movs	r3, #5
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ada:	2300      	movs	r3, #0
 8002adc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f005 fc13 	bl	8008314 <HAL_QSPI_Command>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e085      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f005 fcf6 	bl	80084f4 <HAL_QSPI_Receive>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e078      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b16:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002b18:	2306      	movs	r3, #6
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b30:	2300      	movs	r3, #0
 8002b32:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b34:	2300      	movs	r3, #0
 8002b36:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f005 fbe6 	bl	8008314 <HAL_QSPI_Command>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e058      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8002b52:	2302      	movs	r3, #2
 8002b54:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 8002b56:	2302      	movs	r3, #2
 8002b58:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002b62:	2310      	movs	r3, #16
 8002b64:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002b6c:	2305      	movs	r3, #5
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b74:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b76:	f107 0210 	add.w	r2, r7, #16
 8002b7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f005 fd53 	bl	800862e <HAL_QSPI_AutoPolling>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e038      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f005 fb9e 	bl	8008314 <HAL_QSPI_Command>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e010      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002be2:	f107 030f 	add.w	r3, r7, #15
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f005 fbef 	bl	80083d0 <HAL_QSPI_Transmit>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e003      	b.n	8002c04 <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8002bfc:	2028      	movs	r0, #40	; 0x28
 8002bfe:	f003 fee9 	bl	80069d4 <HAL_Delay>

  return QSPI_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3760      	adds	r7, #96	; 0x60
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b090      	sub	sp, #64	; 0x40
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002c14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c18:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8002c1a:	23b7      	movs	r3, #183	; 0xb7
 8002c1c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c32:	2300      	movs	r3, #0
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002c36:	2300      	movs	r3, #0
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f9e6 	bl	800300c <QSPI_WriteEnable>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e017      	b.n	8002c7a <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f005 fb5d 	bl	8008314 <HAL_QSPI_Command>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e00a      	b.n	8002c7a <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002c64:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fa18 	bl	800309e <QSPI_AutoPollingMemReady>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3740      	adds	r7, #64	; 0x40
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b094      	sub	sp, #80	; 0x50
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002c90:	2305      	movs	r3, #5
 8002c92:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002c9c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f005 fb27 	bl	8008314 <HAL_QSPI_Command>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e090      	b.n	8002df2 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4619      	mov	r1, r3
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f005 fc0a 	bl	80084f4 <HAL_QSPI_Receive>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e083      	b.n	8002df2 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8002cf0:	2315      	movs	r3, #21
 8002cf2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002cfc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d12:	2300      	movs	r3, #0
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f005 faf7 	bl	8008314 <HAL_QSPI_Command>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e060      	b.n	8002df2 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	3301      	adds	r3, #1
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f005 fbd9 	bl	80084f4 <HAL_QSPI_Receive>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e052      	b.n	8002df2 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f95d 	bl	800300c <QSPI_WriteEnable>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e04a      	b.n	8002df2 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002d5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8002d62:	2301      	movs	r3, #1
 8002d64:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d6e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d80:	2300      	movs	r3, #0
 8002d82:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d84:	2300      	movs	r3, #0
 8002d86:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8002d88:	7b7b      	ldrb	r3, [r7, #13]
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	23c0      	movs	r3, #192	; 0xc0
 8002d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4619      	mov	r1, r3
 8002da8:	2303      	movs	r3, #3
 8002daa:	408b      	lsls	r3, r1
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f005 faa7 	bl	8008314 <HAL_QSPI_Command>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e010      	b.n	8002df2 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dd0:	f107 030c 	add.w	r3, r7, #12
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f005 faf8 	bl	80083d0 <HAL_QSPI_Transmit>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e003      	b.n	8002df2 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8002dea:	2028      	movs	r0, #40	; 0x28
 8002dec:	f003 fdf2 	bl	80069d4 <HAL_Delay>
  
  return QSPI_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3750      	adds	r7, #80	; 0x50
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b096      	sub	sp, #88	; 0x58
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 8002e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8002e08:	2335      	movs	r3, #53	; 0x35
 8002e0a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e20:	2300      	movs	r3, #0
 8002e22:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e24:	2300      	movs	r3, #0
 8002e26:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e28:	f107 0320 	add.w	r3, r7, #32
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f005 fa6e 	bl	8008314 <HAL_QSPI_Command>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e023      	b.n	8002e8a <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 8002e42:	2340      	movs	r3, #64	; 0x40
 8002e44:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8002e46:	2341      	movs	r3, #65	; 0x41
 8002e48:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8002e52:	2310      	movs	r3, #16
 8002e54:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5a:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e60:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002e62:	2305      	movs	r3, #5
 8002e64:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002e66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002e6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e6c:	f107 0208 	add.w	r2, r7, #8
 8002e70:	f107 0120 	add.w	r1, r7, #32
 8002e74:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f005 fbd8 	bl	800862e <HAL_QSPI_AutoPolling>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3758      	adds	r7, #88	; 0x58
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b094      	sub	sp, #80	; 0x50
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002eae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f005 fa1e 	bl	8008314 <HAL_QSPI_Command>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e08d      	b.n	8002ffe <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ee2:	f107 030c 	add.w	r3, r7, #12
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f005 fb01 	bl	80084f4 <HAL_QSPI_Receive>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e080      	b.n	8002ffe <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002efc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8002f02:	2315      	movs	r3, #21
 8002f04:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002f0e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f20:	2300      	movs	r3, #0
 8002f22:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f24:	2300      	movs	r3, #0
 8002f26:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f005 f9ee 	bl	8008314 <HAL_QSPI_Command>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e05d      	b.n	8002ffe <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	3301      	adds	r3, #1
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f005 fad0 	bl	80084f4 <HAL_QSPI_Receive>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e04f      	b.n	8002ffe <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002f5e:	482a      	ldr	r0, [pc, #168]	; (8003008 <QSPI_OutDrvStrengthCfg+0x174>)
 8002f60:	f000 f854 	bl	800300c <QSPI_WriteEnable>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e047      	b.n	8002ffe <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8002f74:	2301      	movs	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002f80:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f92:	2300      	movs	r3, #0
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f96:	2300      	movs	r3, #0
 8002f98:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8002f9a:	7b7b      	ldrb	r3, [r7, #13]
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	f023 0307 	bic.w	r3, r3, #7
 8002fa2:	b25a      	sxtb	r2, r3
 8002fa4:	2307      	movs	r3, #7
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	2306      	movs	r3, #6
 8002fbc:	408b      	lsls	r3, r1
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f005 f99e 	bl	8008314 <HAL_QSPI_Command>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00d      	b.n	8002ffe <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fe2:	f107 030c 	add.w	r3, r7, #12
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f005 f9ef 	bl	80083d0 <HAL_QSPI_Transmit>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3750      	adds	r7, #80	; 0x50
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200003f4 	.word	0x200003f4

0800300c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b096      	sub	sp, #88	; 0x58
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003014:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003018:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800301a:	2306      	movs	r3, #6
 800301c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800301e:	2300      	movs	r3, #0
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003022:	2300      	movs	r3, #0
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003026:	2300      	movs	r3, #0
 8003028:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800302e:	2300      	movs	r3, #0
 8003030:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003032:	2300      	movs	r3, #0
 8003034:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003036:	2300      	movs	r3, #0
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800303a:	f107 0320 	add.w	r3, r7, #32
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f005 f965 	bl	8008314 <HAL_QSPI_Command>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e020      	b.n	8003096 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8003054:	2302      	movs	r3, #2
 8003056:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 8003058:	2302      	movs	r3, #2
 800305a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800305c:	2300      	movs	r3, #0
 800305e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003060:	2301      	movs	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003064:	2310      	movs	r3, #16
 8003066:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003068:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800306c:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800306e:	2305      	movs	r3, #5
 8003070:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8003072:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003078:	f107 0208 	add.w	r2, r7, #8
 800307c:	f107 0120 	add.w	r1, r7, #32
 8003080:	f241 3388 	movw	r3, #5000	; 0x1388
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f005 fad2 	bl	800862e <HAL_QSPI_AutoPolling>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3758      	adds	r7, #88	; 0x58
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b096      	sub	sp, #88	; 0x58
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80030a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80030ae:	2305      	movs	r3, #5
 80030b0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80030ba:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80030be:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80030c8:	2300      	movs	r3, #0
 80030ca:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80030cc:	2300      	movs	r3, #0
 80030ce:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 80030d4:	2301      	movs	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80030dc:	2301      	movs	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80030e0:	2310      	movs	r3, #16
 80030e2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80030e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e8:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80030ea:	f107 0208 	add.w	r2, r7, #8
 80030ee:	f107 0120 	add.w	r1, r7, #32
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f005 fa9a 	bl	800862e <HAL_QSPI_AutoPolling>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3758      	adds	r7, #88	; 0x58
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_MspInit+0x44>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <HAL_MspInit+0x44>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_MspInit+0x44>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_MspInit+0x44>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <HAL_MspInit+0x44>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_MspInit+0x44>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800

08003158 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003170:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <HAL_DFSDM_FilterMspInit+0x148>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d152      	bne.n	800321e <HAL_DFSDM_FilterMspInit+0xc6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003178:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_DFSDM_FilterMspInit+0x14c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a49      	ldr	r2, [pc, #292]	; (80032a4 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003180:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003182:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10b      	bne.n	80031a2 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 8003190:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ba:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a3a      	ldr	r2, [pc, #232]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <HAL_DFSDM_FilterMspInit+0x150>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80031e4:	2303      	movs	r3, #3
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4619      	mov	r1, r3
 80031ee:	482f      	ldr	r0, [pc, #188]	; (80032ac <HAL_DFSDM_FilterMspInit+0x154>)
 80031f0:	f004 fc94 	bl	8007b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031f4:	2308      	movs	r3, #8
 80031f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003204:	2303      	movs	r3, #3
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4828      	ldr	r0, [pc, #160]	; (80032b0 <HAL_DFSDM_FilterMspInit+0x158>)
 8003210:	f004 fc84 	bl	8007b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_DFSDM_FilterMspInit+0x148>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <HAL_DFSDM_FilterMspInit+0x148>)
 800321c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a24      	ldr	r2, [pc, #144]	; (80032b4 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d136      	bne.n	8003296 <HAL_DFSDM_FilterMspInit+0x13e>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 800322a:	4a24      	ldr	r2, [pc, #144]	; (80032bc <HAL_DFSDM_FilterMspInit+0x164>)
 800322c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003234:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003248:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 800324c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003250:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003258:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 800325c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003260:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800326e:	4812      	ldr	r0, [pc, #72]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003270:	f004 f86c 	bl	800734c <HAL_DMA_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_DFSDM_FilterMspInit+0x126>
    {
      Error_Handler();
 800327a:	f7ff f8f3 	bl	8002464 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c
 8003284:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
 8003290:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_DFSDM_FilterMspInit+0x160>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200003b8 	.word	0x200003b8
 80032a4:	200003b4 	.word	0x200003b4
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40020800 	.word	0x40020800
 80032b0:	40020c00 	.word	0x40020c00
 80032b4:	40017500 	.word	0x40017500
 80032b8:	20000128 	.word	0x20000128
 80032bc:	40026410 	.word	0x40026410

080032c0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d152      	bne.n	8003386 <HAL_DFSDM_ChannelMspInit+0xc6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80032e0:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80032e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d10b      	bne.n	800330a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80032f2:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a28      	ldr	r2, [pc, #160]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80032f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a22      	ldr	r2, [pc, #136]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800333a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800333e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800334c:	2303      	movs	r3, #3
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	4619      	mov	r1, r3
 8003356:	4811      	ldr	r0, [pc, #68]	; (800339c <HAL_DFSDM_ChannelMspInit+0xdc>)
 8003358:	f004 fbe0 	bl	8007b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800335c:	2308      	movs	r3, #8
 800335e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800336c:	2303      	movs	r3, #3
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	480a      	ldr	r0, [pc, #40]	; (80033a0 <HAL_DFSDM_ChannelMspInit+0xe0>)
 8003378:	f004 fbd0 	bl	8007b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	4a03      	ldr	r2, [pc, #12]	; (8003390 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003384:	6013      	str	r3, [r2, #0]
  }

}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	; 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200003b8 	.word	0x200003b8
 8003394:	200003b4 	.word	0x200003b4
 8003398:	40023800 	.word	0x40023800
 800339c:	40020800 	.word	0x40020800
 80033a0:	40020c00 	.word	0x40020c00

080033a4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <HAL_QSPI_MspInit+0x148>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f040 808e 	bne.w	80034e4 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80033c8:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	4a48      	ldr	r2, [pc, #288]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	6393      	str	r3, [r2, #56]	; 0x38
 80033d4:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e0:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033e6:	f043 0310 	orr.w	r3, r3, #16
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	4a3c      	ldr	r2, [pc, #240]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	6313      	str	r3, [r2, #48]	; 0x30
 8003404:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003410:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6313      	str	r3, [r2, #48]	; 0x30
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	6313      	str	r3, [r2, #48]	; 0x30
 8003434:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <HAL_QSPI_MspInit+0x14c>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003440:	2304      	movs	r3, #4
 8003442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003450:	2309      	movs	r3, #9
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003454:	f107 031c 	add.w	r3, r7, #28
 8003458:	4619      	mov	r1, r3
 800345a:	4826      	ldr	r0, [pc, #152]	; (80034f4 <HAL_QSPI_MspInit+0x150>)
 800345c:	f004 fb5e 	bl	8007b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003460:	2340      	movs	r3, #64	; 0x40
 8003462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003464:	2302      	movs	r3, #2
 8003466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346c:	2303      	movs	r3, #3
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003470:	230a      	movs	r3, #10
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003474:	f107 031c 	add.w	r3, r7, #28
 8003478:	4619      	mov	r1, r3
 800347a:	481f      	ldr	r0, [pc, #124]	; (80034f8 <HAL_QSPI_MspInit+0x154>)
 800347c:	f004 fb4e 	bl	8007b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003480:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003492:	2309      	movs	r3, #9
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	4619      	mov	r1, r3
 800349c:	4817      	ldr	r0, [pc, #92]	; (80034fc <HAL_QSPI_MspInit+0x158>)
 800349e:	f004 fb3d 	bl	8007b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034a2:	2304      	movs	r3, #4
 80034a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80034b2:	2309      	movs	r3, #9
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b6:	f107 031c 	add.w	r3, r7, #28
 80034ba:	4619      	mov	r1, r3
 80034bc:	480e      	ldr	r0, [pc, #56]	; (80034f8 <HAL_QSPI_MspInit+0x154>)
 80034be:	f004 fb2d 	bl	8007b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d0:	2303      	movs	r3, #3
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80034d4:	2309      	movs	r3, #9
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034d8:	f107 031c 	add.w	r3, r7, #28
 80034dc:	4619      	mov	r1, r3
 80034de:	4808      	ldr	r0, [pc, #32]	; (8003500 <HAL_QSPI_MspInit+0x15c>)
 80034e0:	f004 fb1c 	bl	8007b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80034e4:	bf00      	nop
 80034e6:	3730      	adds	r7, #48	; 0x30
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	a0001000 	.word	0xa0001000
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40020400 	.word	0x40020400
 80034fc:	40020800 	.word	0x40020800
 8003500:	40020c00 	.word	0x40020c00

08003504 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <HAL_QSPI_MspDeInit+0x4c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d117      	bne.n	8003546 <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_QSPI_MspDeInit+0x50>)
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <HAL_QSPI_MspDeInit+0x50>)
 800351c:	f023 0302 	bic.w	r3, r3, #2
 8003520:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8003522:	2104      	movs	r1, #4
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <HAL_QSPI_MspDeInit+0x54>)
 8003526:	f004 fca5 	bl	8007e74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 800352a:	2144      	movs	r1, #68	; 0x44
 800352c:	480b      	ldr	r0, [pc, #44]	; (800355c <HAL_QSPI_MspDeInit+0x58>)
 800352e:	f004 fca1 	bl	8007e74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_9);
 8003532:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003536:	480a      	ldr	r0, [pc, #40]	; (8003560 <HAL_QSPI_MspDeInit+0x5c>)
 8003538:	f004 fc9c 	bl	8007e74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800353c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003540:	4808      	ldr	r0, [pc, #32]	; (8003564 <HAL_QSPI_MspDeInit+0x60>)
 8003542:	f004 fc97 	bl	8007e74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	a0001000 	.word	0xa0001000
 8003554:	40023800 	.word	0x40023800
 8003558:	40021000 	.word	0x40021000
 800355c:	40020400 	.word	0x40020400
 8003560:	40020800 	.word	0x40020800
 8003564:	40020c00 	.word	0x40020c00

08003568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_UART_MspInit+0xb4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d144      	bne.n	8003614 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800358a:	4b25      	ldr	r3, [pc, #148]	; (8003620 <HAL_UART_MspInit+0xb8>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a24      	ldr	r2, [pc, #144]	; (8003620 <HAL_UART_MspInit+0xb8>)
 8003590:	f043 0310 	orr.w	r3, r3, #16
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <HAL_UART_MspInit+0xb8>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a2:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <HAL_UART_MspInit+0xb8>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <HAL_UART_MspInit+0xb8>)
 80035a8:	f043 0302 	orr.w	r3, r3, #2
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <HAL_UART_MspInit+0xb8>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_UART_MspInit+0xb8>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_UART_MspInit+0xb8>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b16      	ldr	r3, [pc, #88]	; (8003620 <HAL_UART_MspInit+0xb8>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035e2:	2307      	movs	r3, #7
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	480d      	ldr	r0, [pc, #52]	; (8003624 <HAL_UART_MspInit+0xbc>)
 80035ee:	f004 fa95 	bl	8007b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003604:	2307      	movs	r3, #7
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	4806      	ldr	r0, [pc, #24]	; (8003628 <HAL_UART_MspInit+0xc0>)
 8003610:	f004 fa84 	bl	8007b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003614:	bf00      	nop
 8003616:	3728      	adds	r7, #40	; 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40011000 	.word	0x40011000
 8003620:	40023800 	.word	0x40023800
 8003624:	40020400 	.word	0x40020400
 8003628:	40020000 	.word	0x40020000

0800362c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a30      	ldr	r2, [pc, #192]	; (80036fc <HAL_SAI_MspInit+0xd0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d15a      	bne.n	80036f4 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <HAL_SAI_MspInit+0xd4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_SAI_MspInit+0xd8>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	4a2e      	ldr	r2, [pc, #184]	; (8003704 <HAL_SAI_MspInit+0xd8>)
 800364c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003650:	6453      	str	r3, [r2, #68]	; 0x44
 8003652:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_SAI_MspInit+0xd8>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800365e:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_SAI_MspInit+0xd4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_SAI_MspInit+0xd4>)
 8003666:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003668:	2370      	movs	r3, #112	; 0x70
 800366a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003678:	2306      	movs	r3, #6
 800367a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	4619      	mov	r1, r3
 8003682:	4821      	ldr	r0, [pc, #132]	; (8003708 <HAL_SAI_MspInit+0xdc>)
 8003684:	f004 fa4a 	bl	8007b1c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_SAI_MspInit+0xe0>)
 800368a:	4a21      	ldr	r2, [pc, #132]	; (8003710 <HAL_SAI_MspInit+0xe4>)
 800368c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800368e:	4b1f      	ldr	r3, [pc, #124]	; (800370c <HAL_SAI_MspInit+0xe0>)
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_SAI_MspInit+0xe0>)
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_SAI_MspInit+0xe0>)
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a6:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ae:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036b6:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036be:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036ce:	f003 fe3d 	bl	800734c <HAL_DMA_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 80036d8:	f7fe fec4 	bl	8002464 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036e0:	671a      	str	r2, [r3, #112]	; 0x70
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a08      	ldr	r2, [pc, #32]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80036ee:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_SAI_MspInit+0xe0>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80036f4:	bf00      	nop
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40015804 	.word	0x40015804
 8003700:	200003bc 	.word	0x200003bc
 8003704:	40023800 	.word	0x40023800
 8003708:	40021000 	.word	0x40021000
 800370c:	20000258 	.word	0x20000258
 8003710:	40026428 	.word	0x40026428

08003714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8003724:	2200      	movs	r2, #0
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	202c      	movs	r0, #44	; 0x2c
 800372a:	f003 fa2f 	bl	8006b8c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800372e:	202c      	movs	r0, #44	; 0x2c
 8003730:	f003 fa48 	bl	8006bc4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_InitTick+0xa0>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_InitTick+0xa0>)
 800373a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373e:	6413      	str	r3, [r2, #64]	; 0x40
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <HAL_InitTick+0xa0>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800374c:	f107 0210 	add.w	r2, r7, #16
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f005 fe30 	bl	80093bc <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800375c:	f005 fe06 	bl	800936c <HAL_RCC_GetPCLK1Freq>
 8003760:	4603      	mov	r3, r0
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <HAL_InitTick+0xa4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	3b01      	subs	r3, #1
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_InitTick+0xa8>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <HAL_InitTick+0xac>)
 8003778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_InitTick+0xa8>)
 800377c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003780:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_InitTick+0xa8>)
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_InitTick+0xa8>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_InitTick+0xa8>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8003794:	4809      	ldr	r0, [pc, #36]	; (80037bc <HAL_InitTick+0xa8>)
 8003796:	f007 f8ca 	bl	800a92e <HAL_TIM_Base_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 80037a0:	4806      	ldr	r0, [pc, #24]	; (80037bc <HAL_InitTick+0xa8>)
 80037a2:	f007 f925 	bl	800a9f0 <HAL_TIM_Base_Start_IT>
 80037a6:	4603      	mov	r3, r0
 80037a8:	e000      	b.n	80037ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3730      	adds	r7, #48	; 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	431bde83 	.word	0x431bde83
 80037bc:	20000440 	.word	0x20000440
 80037c0:	40001c00 	.word	0x40001c00

080037c4 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* Disable TIM13 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim13, TIM_IT_UPDATE);
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_SuspendTick+0x20>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_SuspendTick+0x20>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	60da      	str	r2, [r3, #12]
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000440 	.word	0x20000440

080037e8 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* Enable TIM13 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_ResumeTick+0x20>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_ResumeTick+0x20>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	60da      	str	r2, [r3, #12]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000440 	.word	0x20000440

0800380c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <NMI_Handler+0x4>

08003812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <HardFault_Handler+0x4>

08003818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <MemManage_Handler+0x4>

0800381e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003822:	e7fe      	b.n	8003822 <BusFault_Handler+0x4>

08003824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003828:	e7fe      	b.n	8003828 <UsageFault_Handler+0x4>

0800382a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003866:	2001      	movs	r0, #1
 8003868:	f004 fc2a 	bl	80080c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003876:	f007 f933 	bl	800aae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000440 	.word	0x20000440

08003884 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <DMA2_Stream0_IRQHandler+0x10>)
 800388a:	f003 fedd 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000128 	.word	0x20000128

08003898 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <DMA2_Stream1_IRQHandler+0x10>)
 800389e:	f003 fed3 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000258 	.word	0x20000258

080038ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	return 1;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <_kill>:

int _kill(int pid, int sig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038c6:	f009 fbe1 	bl	800d08c <__errno>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2216      	movs	r2, #22
 80038ce:	601a      	str	r2, [r3, #0]
	return -1;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_exit>:

void _exit (int status)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ffe7 	bl	80038bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80038ee:	e7fe      	b.n	80038ee <_exit+0x12>

080038f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <_sbrk+0x5c>)
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <_sbrk+0x60>)
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <_sbrk+0x64>)
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <_sbrk+0x68>)
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003920:	f009 fbb4 	bl	800d08c <__errno>
 8003924:	4603      	mov	r3, r0
 8003926:	220c      	movs	r2, #12
 8003928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	e009      	b.n	8003944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <_sbrk+0x64>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <_sbrk+0x64>)
 8003940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20080000 	.word	0x20080000
 8003950:	00000400 	.word	0x00000400
 8003954:	200003c0 	.word	0x200003c0
 8003958:	200004a0 	.word	0x200004a0

0800395c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <SystemInit+0x20>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <SystemInit+0x20>)
 8003968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800396c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003984:	480d      	ldr	r0, [pc, #52]	; (80039bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003986:	490e      	ldr	r1, [pc, #56]	; (80039c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003988:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800398c:	e002      	b.n	8003994 <LoopCopyDataInit>

0800398e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800398e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003992:	3304      	adds	r3, #4

08003994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003998:	d3f9      	bcc.n	800398e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399a:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800399c:	4c0b      	ldr	r4, [pc, #44]	; (80039cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a0:	e001      	b.n	80039a6 <LoopFillZerobss>

080039a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a4:	3204      	adds	r2, #4

080039a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039a8:	d3fb      	bcc.n	80039a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039aa:	f7ff ffd7 	bl	800395c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ae:	f009 fb73 	bl	800d098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039b2:	f7fd ff71 	bl	8001898 <main>
  bx  lr    
 80039b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80039bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80039c4:	08036b8c 	.word	0x08036b8c
  ldr r2, =_sbss
 80039c8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80039cc:	200004a0 	.word	0x200004a0

080039d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC_IRQHandler>

080039d2 <arm_copy_q7>:

void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b087      	sub	sp, #28
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80039e4:	e00e      	b.n	8003a04 <arm_copy_q7+0x32>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    /* 4 samples are copied and stored at a time using SIMD */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	1d11      	adds	r1, r2, #4
 80039ee:	6019      	str	r1, [r3, #0]
 80039f0:	f107 0108 	add.w	r1, r7, #8
 80039f4:	680b      	ldr	r3, [r1, #0]
 80039f6:	1d18      	adds	r0, r3, #4
 80039f8:	6008      	str	r0, [r1, #0]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ed      	bne.n	80039e6 <arm_copy_q7+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	617b      	str	r3, [r7, #20]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8003a12:	e00b      	b.n	8003a2c <arm_copy_q7+0x5a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	1c53      	adds	r3, r2, #1
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	1c59      	adds	r1, r3, #1
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	f992 2000 	ldrsb.w	r2, [r2]
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <arm_copy_q7+0x42>
  }
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b0a0      	sub	sp, #128	; 0x80
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8003a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8003a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a66:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8003a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8003a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8003a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a7e:	4413      	add	r3, r2
 8003a80:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8003a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a88:	e1b6      	b.n	8003df8 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8003aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8003aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8003aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8003ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8003aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8003ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003ac6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8003ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8003ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8003aea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003aee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	603a      	str	r2, [r7, #0]
 8003af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afc:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8003b00:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	603a      	str	r2, [r7, #0]
 8003b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b12:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8003b16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	603a      	str	r2, [r7, #0]
 8003b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b28:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8003b2c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003b30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	603a      	str	r2, [r7, #0]
 8003b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3e:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8003b42:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003b46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8003b52:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b5e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8003b62:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8003b72:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003b76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b7e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8003b82:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b8c:	1d1a      	adds	r2, r3, #4
 8003b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b94:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8003b98:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ba0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003baa:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8003bae:	ed97 7a08 	vldr	s14, [r7, #32]
 8003bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bb8:	1d1a      	adds	r2, r3, #4
 8003bba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc0:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8003bc4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bce:	1d1a      	adds	r2, r3, #4
 8003bd0:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bd6:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8003bda:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bde:	edd7 7a06 	vldr	s15, [r7, #24]
 8003be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be6:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8003bea:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bee:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf6:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8003bfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c06:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8003c0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c16:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8003c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c1c:	1d1a      	adds	r2, r3, #4
 8003c1e:	673a      	str	r2, [r7, #112]	; 0x70
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8003c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	673a      	str	r2, [r7, #112]	; 0x70
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8003c2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c32:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8003c3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003c42:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8003c4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003c52:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8003c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c62:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8003c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c70:	1d1a      	adds	r2, r3, #4
 8003c72:	677a      	str	r2, [r7, #116]	; 0x74
 8003c74:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003c78:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c80:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8003c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c86:	1d1a      	adds	r2, r3, #4
 8003c88:	677a      	str	r2, [r7, #116]	; 0x74
 8003c8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003c8e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c96:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8003c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c9e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8003caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cae:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8003cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cbe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8003cca:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cce:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8003cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cdc:	1d1a      	adds	r2, r3, #4
 8003cde:	67ba      	str	r2, [r7, #120]	; 0x78
 8003ce0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003ce4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cec:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8003cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf2:	1d1a      	adds	r2, r3, #4
 8003cf4:	67ba      	str	r2, [r7, #120]	; 0x78
 8003cf6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003cfa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d02:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8003d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d08:	1d1a      	adds	r2, r3, #4
 8003d0a:	673a      	str	r2, [r7, #112]	; 0x70
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8003d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d12:	1d1a      	adds	r2, r3, #4
 8003d14:	673a      	str	r2, [r7, #112]	; 0x70
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 8003d1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d1e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8003d2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d2e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d36:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8003d3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d3e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d46:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8003d4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d4e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	677a      	str	r2, [r7, #116]	; 0x74
 8003d60:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003d64:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d6c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8003d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	677a      	str	r2, [r7, #116]	; 0x74
 8003d76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003d7a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d82:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 8003d86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d8a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8003d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d9a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8003da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003daa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8003db6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dba:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8003dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc8:	1d1a      	adds	r2, r3, #4
 8003dca:	67ba      	str	r2, [r7, #120]	; 0x78
 8003dcc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003dd0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8003ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	67ba      	str	r2, [r7, #120]	; 0x78
 8003de2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003de6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dee:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8003df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df4:	3b01      	subs	r3, #1
 8003df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f47f ae45 	bne.w	8003a8a <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8003e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e02:	b299      	uxth	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	2302      	movs	r3, #2
 8003e0a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003e0c:	f000 fef2 	bl	8004bf4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8003e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e12:	b299      	uxth	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	2302      	movs	r3, #2
 8003e1a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003e1c:	f000 feea 	bl	8004bf4 <arm_radix8_butterfly_f32>
}
 8003e20:	bf00      	nop
 8003e22:	3780      	adds	r7, #128	; 0x80
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b0ac      	sub	sp, #176	; 0xb0
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8003e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8003e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e56:	4413      	add	r3, r2
 8003e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8003e5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003e66:	4413      	add	r3, r2
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8003e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e74:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e7a:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8003e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e80:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8003e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e86:	3b04      	subs	r3, #4
 8003e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8003e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e90:	3b04      	subs	r3, #4
 8003e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8003e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8003ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003eaa:	4413      	add	r3, r2
 8003eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8003ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8003eda:	2306      	movs	r3, #6
 8003edc:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	ed93 7a00 	vldr	s14, [r3]
 8003ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	ed93 7a00 	vldr	s14, [r3]
 8003efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f06:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	ed93 7a00 	vldr	s14, [r3]
 8003f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f16:	3304      	adds	r3, #4
 8003f18:	edd3 7a00 	vldr	s15, [r3]
 8003f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f20:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	3304      	adds	r3, #4
 8003f28:	ed93 7a00 	vldr	s14, [r3]
 8003f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f30:	3304      	adds	r3, #4
 8003f32:	edd3 7a00 	vldr	s15, [r3]
 8003f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f42:	3304      	adds	r3, #4
 8003f44:	ed93 7a00 	vldr	s14, [r3]
 8003f48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f54:	3304      	adds	r3, #4
 8003f56:	edd3 7a00 	vldr	s15, [r3]
 8003f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f5e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f76:	edd3 7a00 	vldr	s15, [r3]
 8003f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f7e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f86:	edd3 7a00 	vldr	s15, [r3]
 8003f8a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f96:	edd3 7a00 	vldr	s15, [r3]
 8003f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fb8:	3304      	adds	r3, #4
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc2:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fca:	3304      	adds	r3, #4
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003fd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fdc:	3304      	adds	r3, #4
 8003fde:	edd3 7a00 	vldr	s15, [r3]
 8003fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe6:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fee:	ed93 7a00 	vldr	s14, [r3]
 8003ff2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004006:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800400a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800400e:	ed93 7a00 	vldr	s14, [r3]
 8004012:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800401a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	1d1a      	adds	r2, r3, #4
 8004026:	603a      	str	r2, [r7, #0]
 8004028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004034:	3304      	adds	r3, #4
 8004036:	ed93 7a00 	vldr	s14, [r3]
 800403a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800403e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004042:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004046:	3304      	adds	r3, #4
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	603a      	str	r2, [r7, #0]
 8004052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004056:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800405a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004066:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8004068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004074:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8004076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407a:	1d1a      	adds	r2, r3, #4
 800407c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8004084:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8004092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004096:	1d1a      	adds	r2, r3, #4
 8004098:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80040a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040a4:	1d1a      	adds	r2, r3, #4
 80040a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80040b6:	4413      	add	r3, r2
 80040b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80040bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80040c4:	4413      	add	r3, r2
 80040c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80040ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040d2:	4413      	add	r3, r2
 80040d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80040d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040dc:	3b02      	subs	r3, #2
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040e4:	e31a      	b.n	800471c <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	ed93 7a00 	vldr	s14, [r3]
 80040ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	ed93 7a00 	vldr	s14, [r3]
 8004102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004106:	edd3 7a00 	vldr	s15, [r3]
 800410a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800410e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	ed93 7a00 	vldr	s14, [r3]
 800411a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411e:	3304      	adds	r3, #4
 8004120:	edd3 7a00 	vldr	s15, [r3]
 8004124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004128:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	3304      	adds	r3, #4
 8004130:	ed93 7a00 	vldr	s14, [r3]
 8004134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004138:	3304      	adds	r3, #4
 800413a:	edd3 7a00 	vldr	s15, [r3]
 800413e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004142:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004146:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800414a:	3304      	adds	r3, #4
 800414c:	ed93 7a00 	vldr	s14, [r3]
 8004150:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800415c:	3304      	adds	r3, #4
 800415e:	edd3 7a00 	vldr	s15, [r3]
 8004162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004166:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800416a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800416e:	edd3 7a00 	vldr	s15, [r3]
 8004172:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004176:	ee37 7a67 	vsub.f32	s14, s14, s15
 800417a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800417e:	edd3 7a00 	vldr	s15, [r3]
 8004182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004186:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800418a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004196:	ee37 7a67 	vsub.f32	s14, s14, s15
 800419a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800419e:	edd3 7a00 	vldr	s15, [r3]
 80041a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a6:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80041aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041ae:	3304      	adds	r3, #4
 80041b0:	edd3 7a00 	vldr	s15, [r3]
 80041b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041c0:	3304      	adds	r3, #4
 80041c2:	edd3 7a00 	vldr	s15, [r3]
 80041c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ca:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80041ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041d2:	3304      	adds	r3, #4
 80041d4:	edd3 7a00 	vldr	s15, [r3]
 80041d8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e4:	3304      	adds	r3, #4
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ee:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80041f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041f6:	ed93 7a00 	vldr	s14, [r3]
 80041fa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80041fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004206:	edd3 7a00 	vldr	s15, [r3]
 800420a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420e:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004216:	ed93 7a00 	vldr	s14, [r3]
 800421a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800421e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004222:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	1d1a      	adds	r2, r3, #4
 800422e:	603a      	str	r2, [r7, #0]
 8004230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004234:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004238:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800423c:	3304      	adds	r3, #4
 800423e:	ed93 7a00 	vldr	s14, [r3]
 8004242:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004246:	ee37 7a27 	vadd.f32	s14, s14, s15
 800424a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800424e:	3304      	adds	r3, #4
 8004250:	edd3 7a00 	vldr	s15, [r3]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	603a      	str	r2, [r7, #0]
 800425a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425e:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8004262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004266:	3b04      	subs	r3, #4
 8004268:	ed93 7a00 	vldr	s14, [r3]
 800426c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004270:	3b04      	subs	r3, #4
 8004272:	edd3 7a00 	vldr	s15, [r3]
 8004276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800427e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004282:	3b04      	subs	r3, #4
 8004284:	ed93 7a00 	vldr	s14, [r3]
 8004288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800428c:	3b04      	subs	r3, #4
 800428e:	edd3 7a00 	vldr	s15, [r3]
 8004292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004296:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 800429a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800429e:	ed93 7a00 	vldr	s14, [r3]
 80042a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042a6:	edd3 7a00 	vldr	s15, [r3]
 80042aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80042b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042b6:	ed93 7a00 	vldr	s14, [r3]
 80042ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042be:	edd3 7a00 	vldr	s15, [r3]
 80042c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80042ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042ce:	ed93 7a00 	vldr	s14, [r3]
 80042d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042d6:	edd3 7a00 	vldr	s15, [r3]
 80042da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042de:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80042e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80042ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042ee:	ed93 7a00 	vldr	s14, [r3]
 80042f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042f6:	edd3 7a00 	vldr	s15, [r3]
 80042fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004302:	3b04      	subs	r3, #4
 8004304:	edd3 7a00 	vldr	s15, [r3]
 8004308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800430c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004310:	3b04      	subs	r3, #4
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800431e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004322:	3b04      	subs	r3, #4
 8004324:	edd3 7a00 	vldr	s15, [r3]
 8004328:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800432c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004330:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004334:	3b04      	subs	r3, #4
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800433e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8004342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800434e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8004362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004366:	ed93 7a00 	vldr	s14, [r3]
 800436a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004376:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800437a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800437e:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8004382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004386:	3b04      	subs	r3, #4
 8004388:	ed93 7a00 	vldr	s14, [r3]
 800438c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004390:	3b04      	subs	r3, #4
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800439a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800439e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043a2:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80043a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043aa:	ed93 7a00 	vldr	s14, [r3]
 80043ae:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80043b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ba:	edd3 7a00 	vldr	s15, [r3]
 80043be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043c2:	1f1a      	subs	r2, r3, #4
 80043c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043cc:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80043d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043d4:	3b04      	subs	r3, #4
 80043d6:	ed93 7a00 	vldr	s14, [r3]
 80043da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80043de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043e6:	3b04      	subs	r3, #4
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f0:	1f1a      	subs	r2, r3, #4
 80043f2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043fa:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80043fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004402:	1d1a      	adds	r2, r3, #4
 8004404:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 800440c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004410:	1d1a      	adds	r2, r3, #4
 8004412:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800441a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800441e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004426:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800442a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800442e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800443a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800443e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800444a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800444e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 800445a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004464:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004468:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800446c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004470:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8004474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004478:	1d1a      	adds	r2, r3, #4
 800447a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800447e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004482:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800448a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 800448e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004492:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 800449e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80044a2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 80044ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80044b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 80044be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80044c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80044c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 80044ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044d2:	1f1a      	subs	r2, r3, #4
 80044d4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80044dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e4:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 80044e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044ec:	1f1a      	subs	r2, r3, #4
 80044ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80044f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80044fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044fe:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8004502:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800450a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8004512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800451a:	4413      	add	r3, r2
 800451c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8004520:	edd7 7a07 	vldr	s15, [r7, #28]
 8004524:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8004530:	edd7 7a08 	vldr	s15, [r7, #32]
 8004534:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8004540:	edd7 7a08 	vldr	s15, [r7, #32]
 8004544:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8004550:	edd7 7a07 	vldr	s15, [r7, #28]
 8004554:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8004560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004564:	1d1a      	adds	r2, r3, #4
 8004566:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800456a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800456e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004576:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 800457a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004584:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004588:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800458c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004590:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8004594:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004598:	eef1 7a67 	vneg.f32	s15, s15
 800459c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80045a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 80045a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80045ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80045b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 80045b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80045bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80045c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80045c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80045cc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80045d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 80045d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045dc:	1f1a      	subs	r2, r3, #4
 80045de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80045e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80045ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ee:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80045f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045f6:	1f1a      	subs	r2, r3, #4
 80045f8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004600:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004608:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 800460c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8004614:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800461c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004624:	4413      	add	r3, r2
 8004626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800462a:	edd7 7a03 	vldr	s15, [r7, #12]
 800462e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800463a:	edd7 7a04 	vldr	s15, [r7, #16]
 800463e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800464a:	edd7 7a04 	vldr	s15, [r7, #16]
 800464e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 800465a:	edd7 7a03 	vldr	s15, [r7, #12]
 800465e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 800466a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800466e:	1d1a      	adds	r2, r3, #4
 8004670:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004674:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004678:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800467c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004680:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8004684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004688:	1d1a      	adds	r2, r3, #4
 800468a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800468e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004692:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800469a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 800469e:	edd7 7a06 	vldr	s15, [r7, #24]
 80046a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 80046ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80046b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 80046be:	edd7 7a05 	vldr	s15, [r7, #20]
 80046c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80046c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 80046ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80046d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 80046de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046e2:	1f1a      	subs	r2, r3, #4
 80046e4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80046e8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80046ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80046f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f4:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 80046f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fc:	1f1a      	subs	r2, r3, #4
 80046fe:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004702:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004706:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004716:	3b01      	subs	r3, #1
 8004718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800471c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004720:	2b00      	cmp	r3, #0
 8004722:	f47f ace0 	bne.w	80040e6 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	ed93 7a00 	vldr	s14, [r3]
 800472c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004738:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	ed93 7a00 	vldr	s14, [r3]
 8004742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800474e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	3304      	adds	r3, #4
 8004756:	ed93 7a00 	vldr	s14, [r3]
 800475a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800475e:	3304      	adds	r3, #4
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004768:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	3304      	adds	r3, #4
 8004770:	ed93 7a00 	vldr	s14, [r3]
 8004774:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004778:	3304      	adds	r3, #4
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004782:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800478a:	3304      	adds	r3, #4
 800478c:	ed93 7a00 	vldr	s14, [r3]
 8004790:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800479c:	3304      	adds	r3, #4
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80047aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ae:	edd3 7a00 	vldr	s15, [r3]
 80047b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80047b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047be:	edd3 7a00 	vldr	s15, [r3]
 80047c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80047ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ce:	edd3 7a00 	vldr	s15, [r3]
 80047d2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80047d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80047ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ee:	3304      	adds	r3, #4
 80047f0:	edd3 7a00 	vldr	s15, [r3]
 80047f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80047f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004800:	3304      	adds	r3, #4
 8004802:	edd3 7a00 	vldr	s15, [r3]
 8004806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800480a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800480e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004812:	3304      	adds	r3, #4
 8004814:	edd3 7a00 	vldr	s15, [r3]
 8004818:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800481c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004824:	3304      	adds	r3, #4
 8004826:	edd3 7a00 	vldr	s15, [r3]
 800482a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800483e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004846:	edd3 7a00 	vldr	s15, [r3]
 800484a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800484e:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004856:	ed93 7a00 	vldr	s14, [r3]
 800485a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800485e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	603a      	str	r2, [r7, #0]
 8004870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004874:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800487c:	3304      	adds	r3, #4
 800487e:	ed93 7a00 	vldr	s14, [r3]
 8004882:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800488a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800488e:	3304      	adds	r3, #4
 8004890:	edd3 7a00 	vldr	s15, [r3]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	603a      	str	r2, [r7, #0]
 800489a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489e:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 80048a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80048aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80048b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048b6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80048c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80048c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80048d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80048d6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80048e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80048f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80048fc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004900:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004908:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800490c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004910:	1d1a      	adds	r2, r3, #4
 8004912:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004916:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800491a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800491e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004922:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004926:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800492e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004936:	edd7 7a07 	vldr	s15, [r7, #28]
 800493a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004946:	edd7 7a08 	vldr	s15, [r7, #32]
 800494a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004956:	edd7 7a08 	vldr	s15, [r7, #32]
 800495a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8004966:	edd7 7a07 	vldr	s15, [r7, #28]
 800496a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800496e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004972:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8004976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004980:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004984:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498c:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004994:	1d1a      	adds	r2, r3, #4
 8004996:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800499a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800499e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80049a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049a6:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 80049aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80049b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80049ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80049be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80049ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80049ce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80049da:	edd7 7a04 	vldr	s15, [r7, #16]
 80049de:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80049ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80049fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049fe:	1d1a      	adds	r2, r3, #4
 8004a00:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a04:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a08:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a10:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a1e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004a22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a2a:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a32:	b299      	uxth	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	2304      	movs	r3, #4
 8004a3a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004a3c:	f000 f8da 	bl	8004bf4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a44:	b299      	uxth	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004a4e:	f000 f8d1 	bl	8004bf4 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8004a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a56:	b299      	uxth	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004a60:	f000 f8c8 	bl	8004bf4 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8004a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a68:	b299      	uxth	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	2304      	movs	r3, #4
 8004a70:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004a72:	f000 f8bf 	bl	8004bf4 <arm_radix8_butterfly_f32>
}
 8004a76:	bf00      	nop
 8004a78:	37b0      	adds	r7, #176	; 0xb0
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b088      	sub	sp, #32
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	4611      	mov	r1, r2
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	71fb      	strb	r3, [r7, #7]
 8004a90:	4613      	mov	r3, r2
 8004a92:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d117      	bne.n	8004ad0 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e00d      	b.n	8004ac8 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	edd3 7a00 	vldr	s15, [r3]
 8004ab2:	eef1 7a67 	vneg.f32	s15, s15
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3ed      	bcc.n	8004aac <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	d040      	beq.n	8004b5a <arm_cfft_f32+0xdc>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ade:	d845      	bhi.n	8004b6c <arm_cfft_f32+0xee>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d033      	beq.n	8004b50 <arm_cfft_f32+0xd2>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d83d      	bhi.n	8004b6c <arm_cfft_f32+0xee>
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af6:	d026      	beq.n	8004b46 <arm_cfft_f32+0xc8>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d835      	bhi.n	8004b6c <arm_cfft_f32+0xee>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b06:	d028      	beq.n	8004b5a <arm_cfft_f32+0xdc>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0e:	d82d      	bhi.n	8004b6c <arm_cfft_f32+0xee>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d01b      	beq.n	8004b50 <arm_cfft_f32+0xd2>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1e:	d825      	bhi.n	8004b6c <arm_cfft_f32+0xee>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d00f      	beq.n	8004b46 <arm_cfft_f32+0xc8>
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b80      	cmp	r3, #128	; 0x80
 8004b2a:	d81f      	bhi.n	8004b6c <arm_cfft_f32+0xee>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d013      	beq.n	8004b5a <arm_cfft_f32+0xdc>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d819      	bhi.n	8004b6c <arm_cfft_f32+0xee>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d003      	beq.n	8004b46 <arm_cfft_f32+0xc8>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d005      	beq.n	8004b50 <arm_cfft_f32+0xd2>
 8004b44:	e012      	b.n	8004b6c <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7fe ff79 	bl	8003a40 <arm_cfft_radix8by2_f32>
        break;
 8004b4e:	e00d      	b.n	8004b6c <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff f968 	bl	8003e28 <arm_cfft_radix8by4_f32>
        break;
 8004b58:	e008      	b.n	8004b6c <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	b299      	uxth	r1, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	2301      	movs	r3, #1
 8004b64:	68b8      	ldr	r0, [r7, #8]
 8004b66:	f000 f845 	bl	8004bf4 <arm_radix8_butterfly_f32>
        break;
 8004b6a:	bf00      	nop
    }

    if ( bitReverseFlag )
 8004b6c:	79bb      	ldrb	r3, [r7, #6]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8999      	ldrh	r1, [r3, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68b8      	ldr	r0, [r7, #8]
 8004b7e:	f7fb fb5f 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d130      	bne.n	8004bea <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9a:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e01c      	b.n	8004be2 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1d1a      	adds	r2, r3, #4
 8004bac:	61ba      	str	r2, [r7, #24]
 8004bae:	ed93 7a00 	vldr	s14, [r3]
 8004bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	eeb1 7a67 	vneg.f32	s14, s15
 8004bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	3301      	adds	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d3de      	bcc.n	8004ba8 <arm_cfft_f32+0x12a>
        }
    }
}
 8004bea:	bf00      	nop
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b0bd      	sub	sp, #244	; 0xf4
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	817b      	strh	r3, [r7, #10]
 8004c04:	4613      	mov	r3, r2
 8004c06:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <arm_radix8_butterfly_f32+0x3c>)
 8004c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8004c0e:	897b      	ldrh	r3, [r7, #10]
 8004c10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8004c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c2c:	e002      	b.n	8004c34 <arm_radix8_butterfly_f32+0x40>
 8004c2e:	bf00      	nop
 8004c30:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8004c34:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8004c42:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8004c50:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c58:	4413      	add	r3, r2
 8004c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8004c5e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	4413      	add	r3, r2
 8004c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8004c6c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c74:	4413      	add	r3, r2
 8004c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8004c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	4413      	add	r3, r2
 8004c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8004c88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c90:	4413      	add	r3, r2
 8004c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8004c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	ed93 7a00 	vldr	s14, [r3]
 8004ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	edd3 7a00 	vldr	s15, [r3]
 8004cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8004cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	ed93 7a00 	vldr	s14, [r3]
 8004cc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	edd3 7a00 	vldr	s15, [r3]
 8004cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cda:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	ed93 7a00 	vldr	s14, [r3]
 8004cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	edd3 7a00 	vldr	s15, [r3]
 8004cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cfe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	ed93 7a00 	vldr	s14, [r3]
 8004d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	edd3 7a00 	vldr	s15, [r3]
 8004d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d22:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004d26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	ed93 7a00 	vldr	s14, [r3]
 8004d34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	edd3 7a00 	vldr	s15, [r3]
 8004d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d46:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	ed93 7a00 	vldr	s14, [r3]
 8004d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	edd3 7a00 	vldr	s15, [r3]
 8004d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	ed93 7a00 	vldr	s14, [r3]
 8004d7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d8e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8004d92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	ed93 7a00 	vldr	s14, [r3]
 8004da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	edd3 7a00 	vldr	s15, [r3]
 8004dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004db2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8004db6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004dba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8004dc6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004dca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dd2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8004dd6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004dda:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8004de6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004dea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8004df6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e04:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e0c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8004e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e1e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e26:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8004e2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	3304      	adds	r3, #4
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	ed93 7a00 	vldr	s14, [r3]
 8004e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3304      	adds	r3, #4
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e4e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004e52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	3304      	adds	r3, #4
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	ed93 7a00 	vldr	s14, [r3]
 8004e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	3304      	adds	r3, #4
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	edd3 7a00 	vldr	s15, [r3]
 8004e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e76:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8004e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	3304      	adds	r3, #4
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	ed93 7a00 	vldr	s14, [r3]
 8004e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	3304      	adds	r3, #4
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	edd3 7a00 	vldr	s15, [r3]
 8004e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e9e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8004ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	ed93 7a00 	vldr	s14, [r3]
 8004eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3304      	adds	r3, #4
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	edd3 7a00 	vldr	s15, [r3]
 8004ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8004eca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	ed93 7a00 	vldr	s14, [r3]
 8004eda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	edd3 7a00 	vldr	s15, [r3]
 8004eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eee:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004ef2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3304      	adds	r3, #4
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	ed93 7a00 	vldr	s14, [r3]
 8004f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	3304      	adds	r3, #4
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	edd3 7a00 	vldr	s15, [r3]
 8004f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f16:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8004f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	3304      	adds	r3, #4
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	ed93 7a00 	vldr	s14, [r3]
 8004f2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	3304      	adds	r3, #4
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	edd3 7a00 	vldr	s15, [r3]
 8004f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	3304      	adds	r3, #4
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	ed93 7a00 	vldr	s14, [r3]
 8004f52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	3304      	adds	r3, #4
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f66:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8004f6a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004f6e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f76:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8004f7a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004f7e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f86:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8004f8a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004f8e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f96:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8004f9a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004f9e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8004faa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004fba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8004fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	3304      	adds	r3, #4
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004fd6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fde:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8004fe2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004ff0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8004ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800500a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800500e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005012:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8005016:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	3304      	adds	r3, #4
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4413      	add	r3, r2
 8005022:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005026:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800502a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800502e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3304      	adds	r3, #4
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005042:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800504e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005052:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800505a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800505e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005062:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8005066:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800506a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800506e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005072:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800507e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005082:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800508a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8005096:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800509a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800509e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050a2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80050ae:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80050b2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80050b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ba:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80050be:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80050c2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80050c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ca:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80050ce:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80050d2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80050d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050da:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80050de:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80050e2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80050e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ea:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80050ee:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80050f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80050f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050fa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80050fe:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005102:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800510a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800510e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005112:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800511a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800511e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005122:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800513c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005144:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8005148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005156:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800515a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800515e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8005162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005170:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005178:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800517c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800518a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800518e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005192:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8005196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	3304      	adds	r3, #4
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80051a6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80051aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80051b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	3304      	adds	r3, #4
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80051c2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80051c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80051ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	3304      	adds	r3, #4
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80051de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80051e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051e6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80051ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	3304      	adds	r3, #4
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80051fa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80051fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005202:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8005206:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800520a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800520e:	4413      	add	r3, r2
 8005210:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8005214:	897b      	ldrh	r3, [r7, #10]
 8005216:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800521a:	429a      	cmp	r2, r3
 800521c:	f4ff ad0a 	bcc.w	8004c34 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8005220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005224:	2b07      	cmp	r3, #7
 8005226:	f240 84e3 	bls.w	8005bf0 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8005230:	2301      	movs	r3, #1
 8005232:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8005236:	893b      	ldrh	r3, [r7, #8]
 8005238:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800523c:	4413      	add	r3, r2
 800523e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8005240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005242:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8005246:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800524a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800524c:	4413      	add	r3, r2
 800524e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8005250:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005254:	4413      	add	r3, r2
 8005256:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8005258:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800525a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800525c:	4413      	add	r3, r2
 800525e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8005260:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005264:	4413      	add	r3, r2
 8005266:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8005268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800526a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800526c:	4413      	add	r3, r2
 800526e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8005270:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005274:	4413      	add	r3, r2
 8005276:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8005278:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8005286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8005292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800529e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80052b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80052c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80052ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	3304      	adds	r3, #4
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80052de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	3304      	adds	r3, #4
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80052ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	3304      	adds	r3, #4
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80052fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	3304      	adds	r3, #4
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8005308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	3304      	adds	r3, #4
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8005316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	3304      	adds	r3, #4
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	3304      	adds	r3, #4
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800533a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	4413      	add	r3, r2
 8005344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8005348:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005350:	4413      	add	r3, r2
 8005352:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8005356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535e:	4413      	add	r3, r2
 8005360:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8005364:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	4413      	add	r3, r2
 800536e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8005372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537a:	4413      	add	r3, r2
 800537c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8005380:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	4413      	add	r3, r2
 800538a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800538e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005396:	4413      	add	r3, r2
 8005398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800539c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	ed93 7a00 	vldr	s14, [r3]
 80053aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	edd3 7a00 	vldr	s15, [r3]
 80053b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053bc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80053c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	ed93 7a00 	vldr	s14, [r3]
 80053ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	edd3 7a00 	vldr	s15, [r3]
 80053dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80053e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	ed93 7a00 	vldr	s14, [r3]
 80053f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	edd3 7a00 	vldr	s15, [r3]
 8005400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005404:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	ed93 7a00 	vldr	s14, [r3]
 8005416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005428:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800542c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	ed93 7a00 	vldr	s14, [r3]
 800543a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005450:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	ed93 7a00 	vldr	s14, [r3]
 800545e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	edd3 7a00 	vldr	s15, [r3]
 800546c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005470:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	ed93 7a00 	vldr	s14, [r3]
 8005482:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	edd3 7a00 	vldr	s15, [r3]
 8005490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005494:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8005498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	ed93 7a00 	vldr	s14, [r3]
 80054a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	edd3 7a00 	vldr	s15, [r3]
 80054b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054b8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80054bc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80054c0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80054c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80054cc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80054d0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80054d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80054dc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80054e0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80054ec:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80054f0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054f8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80054fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800550a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800550e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005512:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8005516:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800551a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800551e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005522:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005526:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	3304      	adds	r3, #4
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	ed93 7a00 	vldr	s14, [r3]
 8005536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3304      	adds	r3, #4
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	edd3 7a00 	vldr	s15, [r3]
 8005546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800554a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800554e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	3304      	adds	r3, #4
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	ed93 7a00 	vldr	s14, [r3]
 800555e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	3304      	adds	r3, #4
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005572:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8005576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	3304      	adds	r3, #4
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	ed93 7a00 	vldr	s14, [r3]
 8005586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	3304      	adds	r3, #4
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	edd3 7a00 	vldr	s15, [r3]
 8005596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800559a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	3304      	adds	r3, #4
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	ed93 7a00 	vldr	s14, [r3]
 80055ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	3304      	adds	r3, #4
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055c2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80055c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	3304      	adds	r3, #4
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	ed93 7a00 	vldr	s14, [r3]
 80055d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	3304      	adds	r3, #4
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	edd3 7a00 	vldr	s15, [r3]
 80055e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ea:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80055ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	3304      	adds	r3, #4
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	ed93 7a00 	vldr	s14, [r3]
 80055fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	3304      	adds	r3, #4
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	edd3 7a00 	vldr	s15, [r3]
 800560e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005612:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	3304      	adds	r3, #4
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	ed93 7a00 	vldr	s14, [r3]
 8005626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	3304      	adds	r3, #4
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	edd3 7a00 	vldr	s15, [r3]
 8005636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800563a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800563e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	3304      	adds	r3, #4
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	ed93 7a00 	vldr	s14, [r3]
 800564e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	3304      	adds	r3, #4
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	edd3 7a00 	vldr	s15, [r3]
 800565e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005662:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8005666:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800566a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800566e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005672:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8005676:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800567a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800567e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005682:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8005686:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800568a:	edd7 7a08 	vldr	s15, [r7, #32]
 800568e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005692:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005696:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800569a:	edd7 7a08 	vldr	s15, [r7, #32]
 800569e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80056a6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80056aa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80056ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80056b6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80056ba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80056be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056c2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80056c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	3304      	adds	r3, #4
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80056d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80056da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056de:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80056e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80056e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80056ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80056f2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80056f6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80056fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8005702:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005706:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800570a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800570e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005712:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005716:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005722:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005726:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005732:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005736:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800573a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005742:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005746:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005760:	edd7 7a06 	vldr	s15, [r7, #24]
 8005764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005768:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800576c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	3304      	adds	r3, #4
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	ed97 7a05 	vldr	s14, [r7, #20]
 800577c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005784:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8005788:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800578c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005794:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005798:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800579c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80057a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80057a8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80057ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80057b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80057b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80057bc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80057c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80057c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80057d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80057da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057de:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80057e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	3304      	adds	r3, #4
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80057f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80057f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057fa:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80057fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005802:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800580e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005812:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800581e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005822:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800582e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005832:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800583e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	ed97 7a07 	vldr	s14, [r7, #28]
 800584c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005854:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8005858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	3304      	adds	r3, #4
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	ed97 7a05 	vldr	s14, [r7, #20]
 8005868:	edd7 7a04 	vldr	s15, [r7, #16]
 800586c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005870:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005874:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005878:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800587c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005880:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005888:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800588c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005890:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005898:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800589c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80058a4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80058a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80058ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058b0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80058b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80058bc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80058c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80058c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058c8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80058cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80058d4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80058d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80058dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058e0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80058e4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80058e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80058ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058f0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80058f4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80058f8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80058fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005900:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005904:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005908:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800590c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005910:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005914:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800591c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005920:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005924:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800592c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005930:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005934:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005938:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800593c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005940:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005944:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005948:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800594c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005950:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005954:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005958:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800595c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005960:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005964:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005968:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800596c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005970:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005974:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005978:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800597c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005980:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005984:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005988:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800598c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005990:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005994:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005998:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800599c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80059a4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80059a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80059ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80059b4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80059b8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80059bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059c0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80059c4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80059c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80059cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80059d4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80059d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80059dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80059e4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80059e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80059ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80059f4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80059f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80059fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a00:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005a04:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005a08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a10:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005a14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a22:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a2a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	3304      	adds	r3, #4
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a46:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005a4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005a4e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005a5a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005a5e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a66:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005a6a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005a6e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a76:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005a7a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005a7e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005a8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	ed97 7a07 	vldr	s14, [r7, #28]
 8005a98:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005aa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	3304      	adds	r3, #4
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ab4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005abc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005ac0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005ac4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005acc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005ad0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005ad4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005adc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005ae0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005ae4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aec:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005af0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005af4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005b00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b16:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8005b1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	3304      	adds	r3, #4
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b32:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8005b36:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005b3a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8005b46:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005b4a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8005b56:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005b5a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8005b66:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005b6a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b72:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8005b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8005b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	3304      	adds	r3, #4
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ba8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8005bac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005bb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8005bba:	897b      	ldrh	r3, [r7, #10]
 8005bbc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	f4ff abba 	bcc.w	800533a <arm_radix8_butterfly_f32+0x746>

         j++;
 8005bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8005bd0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	f4ff ab2c 	bcc.w	8005236 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8005bde:	893b      	ldrh	r3, [r7, #8]
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8005be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	f63f a813 	bhi.w	8004c14 <arm_radix8_butterfly_f32+0x20>
}
 8005bee:	e000      	b.n	8005bf2 <arm_radix8_butterfly_f32+0xffe>
         break;
 8005bf0:	bf00      	nop
}
 8005bf2:	bf00      	nop
 8005bf4:	37f4      	adds	r7, #244	; 0xf4
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop

08005c00 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b095      	sub	sp, #84	; 0x54
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8005c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8005c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8005c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8005c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8005c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3c:	1d1a      	adds	r2, r3, #4
 8005c3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	1d1a      	adds	r2, r3, #4
 8005c48:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8005c4e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005c52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8005c5e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005c62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c6a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8005c6e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005c72:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c88:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8005c8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005c90:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	1d1a      	adds	r2, r3, #4
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ca6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8005caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8005cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8005ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd4:	1d1a      	adds	r2, r3, #4
 8005cd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cde:	1d1a      	adds	r2, r3, #4
 8005ce0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8005ce6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005cea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cf2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8005cf6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005cfa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d02:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8005d06:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005d0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8005d16:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005d1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8005d26:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005d2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8005d36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005d3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8005d46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005d4a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d52:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	1d1a      	adds	r2, r3, #4
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d70:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8005d74:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005d78:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	1d1a      	adds	r2, r3, #4
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d9e:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da4:	3308      	adds	r3, #8
 8005da6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	3b08      	subs	r3, #8
 8005dac:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db0:	3b01      	subs	r3, #1
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 8005db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f47f af7f 	bne.w	8005cba <stage_rfft_f32+0xba>
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	3754      	adds	r7, #84	; 0x54
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b095      	sub	sp, #84	; 0x54
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8005dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8005df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8005df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8005dfe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005e02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	1d1a      	adds	r2, r3, #4
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e18:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8005e1c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005e20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1d1a      	adds	r2, r3, #4
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e36:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4413      	add	r3, r2
 8005e42:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8005e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e46:	3308      	adds	r3, #8
 8005e48:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 8005e4a:	e07c      	b.n	8005f46 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8005e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8005e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8005e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8005e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e66:	1d1a      	adds	r2, r3, #4
 8005e68:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8005e78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005e7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8005e88:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005e8c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e94:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8005e98:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005e9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8005ea8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005eac:	edd7 7a08 	vldr	s15, [r7, #32]
 8005eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb4:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8005eb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ebc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec4:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8005ec8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ecc:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8005ed8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005edc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ee4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ee8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	1d1a      	adds	r2, r3, #4
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f02:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8005f06:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005f0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	1d1a      	adds	r2, r3, #4
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f30:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f36:	3308      	adds	r3, #8
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8005f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3c:	3b08      	subs	r3, #8
 8005f3e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f42:	3b01      	subs	r3, #1
 8005f44:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 8005f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f47f af7f 	bne.w	8005e4c <merge_rfft_f32+0x82>
   }

}
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	3754      	adds	r7, #84	; 0x54
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8a1b      	ldrh	r3, [r3, #16]
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff ff20 	bl	8005dca <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	6978      	ldr	r0, [r7, #20]
 8005f92:	f7fe fd74 	bl	8004a7e <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8005f96:	e00a      	b.n	8005fae <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	f7fe fd6d 	bl	8004a7e <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fe29 	bl	8005c00 <stage_rfft_f32>
}
 8005fae:	bf00      	nop
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 8005fcc:	887b      	ldrh	r3, [r7, #2]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	887a      	ldrh	r2, [r7, #2]
 8005fda:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe4:	d023      	beq.n	800602e <arm_rfft_fast_init_f32+0x76>
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fea:	f300 808c 	bgt.w	8006106 <arm_rfft_fast_init_f32+0x14e>
 8005fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff2:	d02a      	beq.n	800604a <arm_rfft_fast_init_f32+0x92>
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	f300 8085 	bgt.w	8006106 <arm_rfft_fast_init_f32+0x14e>
 8005ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006000:	d031      	beq.n	8006066 <arm_rfft_fast_init_f32+0xae>
 8006002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006006:	dc7e      	bgt.n	8006106 <arm_rfft_fast_init_f32+0x14e>
 8006008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600c:	d039      	beq.n	8006082 <arm_rfft_fast_init_f32+0xca>
 800600e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006012:	dc78      	bgt.n	8006106 <arm_rfft_fast_init_f32+0x14e>
 8006014:	2b80      	cmp	r3, #128	; 0x80
 8006016:	d042      	beq.n	800609e <arm_rfft_fast_init_f32+0xe6>
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	dc74      	bgt.n	8006106 <arm_rfft_fast_init_f32+0x14e>
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d04b      	beq.n	80060b8 <arm_rfft_fast_init_f32+0x100>
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	dc70      	bgt.n	8006106 <arm_rfft_fast_init_f32+0x14e>
 8006024:	2b10      	cmp	r3, #16
 8006026:	d061      	beq.n	80060ec <arm_rfft_fast_init_f32+0x134>
 8006028:	2b20      	cmp	r3, #32
 800602a:	d052      	beq.n	80060d2 <arm_rfft_fast_init_f32+0x11a>
 800602c:	e06b      	b.n	8006106 <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8006034:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4a38      	ldr	r2, [pc, #224]	; (800611c <arm_rfft_fast_init_f32+0x164>)
 800603a:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a38      	ldr	r2, [pc, #224]	; (8006120 <arm_rfft_fast_init_f32+0x168>)
 8006040:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a37      	ldr	r2, [pc, #220]	; (8006124 <arm_rfft_fast_init_f32+0x16c>)
 8006046:	615a      	str	r2, [r3, #20]
    break;
 8006048:	e060      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006050:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a34      	ldr	r2, [pc, #208]	; (8006128 <arm_rfft_fast_init_f32+0x170>)
 8006056:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4a34      	ldr	r2, [pc, #208]	; (800612c <arm_rfft_fast_init_f32+0x174>)
 800605c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a33      	ldr	r2, [pc, #204]	; (8006130 <arm_rfft_fast_init_f32+0x178>)
 8006062:	615a      	str	r2, [r3, #20]
    break;
 8006064:	e052      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800606c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4a30      	ldr	r2, [pc, #192]	; (8006134 <arm_rfft_fast_init_f32+0x17c>)
 8006072:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a30      	ldr	r2, [pc, #192]	; (8006138 <arm_rfft_fast_init_f32+0x180>)
 8006078:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a2f      	ldr	r2, [pc, #188]	; (800613c <arm_rfft_fast_init_f32+0x184>)
 800607e:	615a      	str	r2, [r3, #20]
    break;
 8006080:	e044      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006088:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4a2c      	ldr	r2, [pc, #176]	; (8006140 <arm_rfft_fast_init_f32+0x188>)
 800608e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <arm_rfft_fast_init_f32+0x18c>)
 8006094:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <arm_rfft_fast_init_f32+0x190>)
 800609a:	615a      	str	r2, [r3, #20]
    break;
 800609c:	e036      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	22d0      	movs	r2, #208	; 0xd0
 80060a2:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4a29      	ldr	r2, [pc, #164]	; (800614c <arm_rfft_fast_init_f32+0x194>)
 80060a8:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a28      	ldr	r2, [pc, #160]	; (8006150 <arm_rfft_fast_init_f32+0x198>)
 80060ae:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a28      	ldr	r2, [pc, #160]	; (8006154 <arm_rfft_fast_init_f32+0x19c>)
 80060b4:	615a      	str	r2, [r3, #20]
    break;
 80060b6:	e029      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2238      	movs	r2, #56	; 0x38
 80060bc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a25      	ldr	r2, [pc, #148]	; (8006158 <arm_rfft_fast_init_f32+0x1a0>)
 80060c2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4a25      	ldr	r2, [pc, #148]	; (800615c <arm_rfft_fast_init_f32+0x1a4>)
 80060c8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a24      	ldr	r2, [pc, #144]	; (8006160 <arm_rfft_fast_init_f32+0x1a8>)
 80060ce:	615a      	str	r2, [r3, #20]
    break;
 80060d0:	e01c      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2230      	movs	r2, #48	; 0x30
 80060d6:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4a22      	ldr	r2, [pc, #136]	; (8006164 <arm_rfft_fast_init_f32+0x1ac>)
 80060dc:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4a21      	ldr	r2, [pc, #132]	; (8006168 <arm_rfft_fast_init_f32+0x1b0>)
 80060e2:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a21      	ldr	r2, [pc, #132]	; (800616c <arm_rfft_fast_init_f32+0x1b4>)
 80060e8:	615a      	str	r2, [r3, #20]
    break;
 80060ea:	e00f      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2214      	movs	r2, #20
 80060f0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <arm_rfft_fast_init_f32+0x1b8>)
 80060f6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <arm_rfft_fast_init_f32+0x1bc>)
 80060fc:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <arm_rfft_fast_init_f32+0x1c0>)
 8006102:	615a      	str	r2, [r3, #20]
    break;
 8006104:	e002      	b.n	800610c <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8006106:	23ff      	movs	r3, #255	; 0xff
 8006108:	73fb      	strb	r3, [r7, #15]
    break;
 800610a:	bf00      	nop
  }

  return (status);
 800610c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	0802a9bc 	.word	0x0802a9bc
 8006120:	08025224 	.word	0x08025224
 8006124:	080306fc 	.word	0x080306fc
 8006128:	08029bac 	.word	0x08029bac
 800612c:	08023224 	.word	0x08023224
 8006130:	0802e6fc 	.word	0x0802e6fc
 8006134:	0802982c 	.word	0x0802982c
 8006138:	08022224 	.word	0x08022224
 800613c:	0802d6fc 	.word	0x0802d6fc
 8006140:	080294bc 	.word	0x080294bc
 8006144:	08021a24 	.word	0x08021a24
 8006148:	0802cefc 	.word	0x0802cefc
 800614c:	0802931c 	.word	0x0802931c
 8006150:	08021624 	.word	0x08021624
 8006154:	0802cafc 	.word	0x0802cafc
 8006158:	080292ac 	.word	0x080292ac
 800615c:	08021424 	.word	0x08021424
 8006160:	0802c8fc 	.word	0x0802c8fc
 8006164:	0802924c 	.word	0x0802924c
 8006168:	08021324 	.word	0x08021324
 800616c:	0802c7fc 	.word	0x0802c7fc
 8006170:	08029224 	.word	0x08029224
 8006174:	080212a4 	.word	0x080212a4
 8006178:	0802c77c 	.word	0x0802c77c

0800617c <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 800617c:	b480      	push	{r7}
 800617e:	b08f      	sub	sp, #60	; 0x3c
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 8006188:	887b      	ldrh	r3, [r7, #2]
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 8006196:	e032      	b.n	80061fe <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 8006198:	f107 0210 	add.w	r2, r7, #16
 800619c:	6813      	ldr	r3, [r2, #0]
 800619e:	1d19      	adds	r1, r3, #4
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	2307      	movs	r3, #7
 80061b0:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <arm_relu_q7+0x48>
    return op1;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	e003      	b.n	80061cc <arm_relu_q7+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa62 f303 	ror.w	r3, r2, r3
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	2200      	movs	r2, #0
 80061d2:	627a      	str	r2, [r7, #36]	; 0x24
 80061d4:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	fac3 f312 	qsub8	r3, r3, r2
 80061de:	61fb      	str	r3, [r7, #28]
  return(result);
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	43d9      	mvns	r1, r3
 80061e8:	f107 020c 	add.w	r2, r7, #12
 80061ec:	6813      	ldr	r3, [r2, #0]
 80061ee:	1d18      	adds	r0, r3, #4
 80061f0:	6010      	str	r0, [r2, #0]
 80061f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f4:	400a      	ands	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]
        i--;
 80061f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061fa:	3b01      	subs	r3, #1
 80061fc:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 80061fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1c9      	bne.n	8006198 <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800620c:	e00d      	b.n	800622a <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f993 3000 	ldrsb.w	r3, [r3]
 8006214:	2b00      	cmp	r3, #0
 8006216:	da02      	bge.n	800621e <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	3301      	adds	r3, #1
 8006222:	613b      	str	r3, [r7, #16]
        i--;
 8006224:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006226:	3b01      	subs	r3, #1
 8006228:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800622a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1ee      	bne.n	800620e <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	373c      	adds	r7, #60	; 0x3c
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <arm_fully_connected_q7>:
                       const q7_t * pM,
                       const uint16_t dim_vec,
                       const uint16_t num_of_rows,
                       const uint16_t bias_shift,
                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
{
 800623e:	b590      	push	{r4, r7, lr}
 8006240:	b0d7      	sub	sp, #348	; 0x15c
 8006242:	af00      	add	r7, sp, #0
 8006244:	f107 040c 	add.w	r4, r7, #12
 8006248:	6020      	str	r0, [r4, #0]
 800624a:	f107 0008 	add.w	r0, r7, #8
 800624e:	6001      	str	r1, [r0, #0]
 8006250:	4619      	mov	r1, r3
 8006252:	1dbb      	adds	r3, r7, #6
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	460a      	mov	r2, r1
 800625a:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 800625c:	f107 0308 	add.w	r3, r7, #8
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    const q7_t *pB2;
    q7_t     *pO = pOut;
 8006266:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800626a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    const q7_t *pBias = bias;
 800626e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006272:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
 8006276:	1d3b      	adds	r3, r7, #4
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 8006280:	1dbb      	adds	r3, r7, #6
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	f107 030c 	add.w	r3, r7, #12
 8006288:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	f000 fb10 	bl	80068b2 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 8006292:	e1e2      	b.n	800665a <arm_fully_connected_q7+0x41c>
    {
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006294:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800629e:	f993 3000 	ldrsb.w	r3, [r3]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80062a8:	409a      	lsls	r2, r3
 80062aa:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80062ae:	3b01      	subs	r3, #1
 80062b0:	2101      	movs	r1, #1
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	4413      	add	r3, r2
 80062b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80062bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80062c6:	f993 3000 	ldrsb.w	r3, [r3]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80062d0:	409a      	lsls	r2, r3
 80062d2:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80062d6:	3b01      	subs	r3, #1
 80062d8:	2101      	movs	r1, #1
 80062da:	fa01 f303 	lsl.w	r3, r1, r3
 80062de:	4413      	add	r3, r2
 80062e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        uint16_t  colCnt = dim_vec >> 2;
 80062e4:	1dbb      	adds	r3, r7, #6
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

        pA = vec_buffer;
 80062ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80062f6:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 80062f8:	1dbb      	adds	r3, r7, #6
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8006300:	4413      	add	r3, r2
 8006302:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        while (colCnt)
 8006306:	e126      	b.n	8006556 <arm_fully_connected_q7+0x318>
 8006308:	f107 0320 	add.w	r3, r7, #32
 800630c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800631a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800631e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8006322:	f107 0220 	add.w	r2, r7, #32
 8006326:	6813      	ldr	r3, [r2, #0]
 8006328:	1d19      	adds	r1, r3, #4
 800632a:	6011      	str	r1, [r2, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 8006332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800633a:	2308      	movs	r3, #8
 800633c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  op2 %= 32U;
 8006340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (op2 == 0U)
 800634c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <arm_fully_connected_q7+0x11c>
    return op1;
 8006354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006358:	e005      	b.n	8006366 <arm_fully_connected_q7+0x128>
  return (op1 >> op2) | (op1 << (32U - op2));
 800635a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800635e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006362:	fa62 f303 	ror.w	r3, r2, r3
 8006366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800636a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800636e:	fa2f f383 	sxtb16	r3, r3
 8006372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8006376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800637a:	461a      	mov	r2, r3
 800637c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006380:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8006382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800638a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800638e:	fa2f f383 	sxtb16	r3, r3
 8006392:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8006394:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006396:	461a      	mov	r2, r3
 8006398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800639c:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 800639e:	f107 0320 	add.w	r3, r7, #32
 80063a2:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV, inM11, inM12, inM21, inM22;
            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 80063a4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80063a8:	f107 031c 	add.w	r3, r7, #28
 80063ac:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        q31_t     inA = *__SIMD32(source)++;
 80063c2:	f107 021c 	add.w	r2, r7, #28
 80063c6:	6813      	ldr	r3, [r2, #0]
 80063c8:	1d19      	adds	r1, r3, #4
 80063ca:	6011      	str	r1, [r2, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        *out2 = __SXTB16(__ROR(inA, 8));
 80063d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063da:	2308      	movs	r3, #8
 80063dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  op2 %= 32U;
 80063e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (op2 == 0U)
 80063ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <arm_fully_connected_q7+0x1bc>
    return op1;
 80063f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063f8:	e005      	b.n	8006406 <arm_fully_connected_q7+0x1c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 80063fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006402:	fa62 f303 	ror.w	r3, r2, r3
 8006406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800640a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800640e:	fa2f f383 	sxtb16	r3, r3
 8006412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8006416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800641a:	461a      	mov	r2, r3
 800641c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006420:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8006422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800642a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800642e:	fa2f f383 	sxtb16	r3, r3
 8006432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8006436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800643a:	461a      	mov	r2, r3
 800643c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006440:	601a      	str	r2, [r3, #0]
        return source;
 8006442:	f107 031c 	add.w	r3, r7, #28
 8006446:	681b      	ldr	r3, [r3, #0]
            pB2 = (q7_t *) read_and_pad_reordered((void *)pB2, &inM21, &inM22);
 8006448:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

            inV = *__SIMD32(pA)++;
 800644c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006450:	6813      	ldr	r3, [r2, #0]
 8006452:	1d19      	adds	r1, r3, #4
 8006454:	6011      	str	r1, [r2, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM11, sum);
 800645c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8006460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800646c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006470:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8006474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006478:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800647c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006480:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8006484:	fb23 1302 	smlad	r3, r3, r2, r1
 8006488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 800648c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006490:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM21, sum2);
 8006494:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8006498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4619      	mov	r1, r3
 80064a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80064a4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80064a8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80064ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064b8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80064bc:	fb23 1302 	smlad	r3, r3, r2, r1
 80064c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 80064c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064c8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            inV = *__SIMD32(pA)++;
 80064cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	1d19      	adds	r1, r3, #4
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM12, sum);
 80064dc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80064e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4619      	mov	r1, r3
 80064e8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80064ec:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80064f0:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80064f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80064f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006500:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8006504:	fb23 1302 	smlad	r3, r3, r2, r1
 8006508:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006510:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM22, sum2);
 8006514:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8006518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4619      	mov	r1, r3
 8006520:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006524:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8006528:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800652c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006530:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006534:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8006538:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800653c:	fb23 1302 	smlad	r3, r3, r2, r1
 8006540:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            colCnt--;
 800654c:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8006550:	3b01      	subs	r3, #1
 8006552:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8006556:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800655a:	2b00      	cmp	r3, #0
 800655c:	f47f aed4 	bne.w	8006308 <arm_fully_connected_q7+0xca>
        }
        colCnt = dim_vec & 0x3;
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 800656c:	e037      	b.n	80065de <arm_fully_connected_q7+0x3a0>
        {
            q7_t      inV = *pA++;
 800656e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	1c99      	adds	r1, r3, #2
 8006576:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800657a:	6011      	str	r1, [r2, #0]
 800657c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006580:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            q15_t     inM = *pB++;
 8006584:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800658e:	f993 3000 	ldrsb.w	r3, [r3]
 8006592:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
            q15_t     inM2 = *pB2++;
 8006596:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80065a0:	f993 3000 	ldrsb.w	r3, [r3]
 80065a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            sum += inV * inM;
 80065a8:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80065ac:	f9b7 210c 	ldrsh.w	r2, [r7, #268]	; 0x10c
 80065b0:	fb02 f303 	mul.w	r3, r2, r3
 80065b4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80065b8:	4413      	add	r3, r2
 80065ba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 += inV * inM2;
 80065be:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80065c2:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80065ce:	4413      	add	r3, r2
 80065d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            colCnt--;
 80065d4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 80065d8:	3b01      	subs	r3, #1
 80065da:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 80065de:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1c3      	bne.n	800656e <arm_fully_connected_q7+0x330>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 80065e6:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80065ea:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80065ee:	fa42 f303 	asr.w	r3, r2, r3
 80065f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80065f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065fa:	f303 0307 	ssat	r3, #8, r3
 80065fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006602:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8006606:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006610:	b24a      	sxtb	r2, r1
 8006612:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8006614:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006618:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800661c:	fa42 f303 	asr.w	r3, r2, r3
 8006620:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006628:	f303 0307 	ssat	r3, #8, r3
 800662c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006630:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8006634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800663e:	b24a      	sxtb	r2, r1
 8006640:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8006642:	1dbb      	adds	r3, r7, #6
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800664a:	4413      	add	r3, r2
 800664c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        rowCnt--;
 8006650:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006654:	3b01      	subs	r3, #1
 8006656:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 800665a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800665e:	2b00      	cmp	r3, #0
 8006660:	f47f ae18 	bne.w	8006294 <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8006664:	1d3b      	adds	r3, r7, #4
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    while (rowCnt)
 8006670:	e114      	b.n	800689c <arm_fully_connected_q7+0x65e>
    {
        uint16_t  colCnt = dim_vec >> 2;
 8006672:	1dbb      	adds	r3, r7, #6
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800667c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006686:	f993 3000 	ldrsb.w	r3, [r3]
 800668a:	461a      	mov	r2, r3
 800668c:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006690:	409a      	lsls	r2, r3
 8006692:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006696:	3b01      	subs	r3, #1
 8006698:	2101      	movs	r1, #1
 800669a:	fa01 f303 	lsl.w	r3, r1, r3
 800669e:	4413      	add	r3, r2
 80066a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        pA = vec_buffer;
 80066a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066a8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80066ac:	601a      	str	r2, [r3, #0]

        while (colCnt)
 80066ae:	e0a5      	b.n	80067fc <arm_fully_connected_q7+0x5be>
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80066be:	f107 0218 	add.w	r2, r7, #24
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80066c8:	f107 0214 	add.w	r2, r7, #20
 80066cc:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80066ce:	f107 0210 	add.w	r2, r7, #16
 80066d2:	6813      	ldr	r3, [r2, #0]
 80066d4:	1d19      	adds	r1, r3, #4
 80066d6:	6011      	str	r1, [r2, #0]
 80066d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 80066e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066f0:	2208      	movs	r2, #8
 80066f2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80066f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	f002 021f 	and.w	r2, r2, #31
 8006702:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8006704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <arm_fully_connected_q7+0x4d8>
    return op1;
 800670e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	e007      	b.n	8006726 <arm_fully_connected_q7+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006716:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800671a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	fa62 f303 	ror.w	r3, r2, r3
 8006726:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800672a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800672c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	fa2f f283 	sxtb16	r2, r3
 8006736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800673a:	601a      	str	r2, [r3, #0]
  return(result);
 800673c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 800674c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006756:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	fa2f f283 	sxtb16	r2, r3
 8006762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006766:	601a      	str	r2, [r3, #0]
  return(result);
 8006768:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	601a      	str	r2, [r3, #0]
        return source;
 8006778:	f107 0310 	add.w	r3, r7, #16
 800677c:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 800677e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

            inV1 = *__SIMD32(pA)++;
 8006782:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	6011      	str	r1, [r2, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            sum = __SMLAD(inV1, inM11, sum);
 8006792:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006796:	f107 0318 	add.w	r3, r7, #24
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4619      	mov	r1, r3
 800679e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067a2:	66ba      	str	r2, [r7, #104]	; 0x68
 80067a4:	6679      	str	r1, [r7, #100]	; 0x64
 80067a6:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80067a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80067ae:	fb23 1302 	smlad	r3, r3, r2, r1
 80067b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80067b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            inV2 = *__SIMD32(pA)++;
 80067ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80067be:	6813      	ldr	r3, [r2, #0]
 80067c0:	1d19      	adds	r1, r3, #4
 80067c2:	6011      	str	r1, [r2, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            sum = __SMLAD(inV2, inM12, sum);
 80067ca:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80067ce:	f107 0314 	add.w	r3, r7, #20
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4619      	mov	r1, r3
 80067d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067da:	67ba      	str	r2, [r7, #120]	; 0x78
 80067dc:	6779      	str	r1, [r7, #116]	; 0x74
 80067de:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80067e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80067e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80067e6:	fb23 1302 	smlad	r3, r3, r2, r1
 80067ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80067ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            colCnt--;
 80067f2:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80067f6:	3b01      	subs	r3, #1
 80067f8:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 80067fc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8006800:	2b00      	cmp	r3, #0
 8006802:	f47f af55 	bne.w	80066b0 <arm_fully_connected_q7+0x472>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8006806:	1dbb      	adds	r3, r7, #6
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8006812:	e023      	b.n	800685c <arm_fully_connected_q7+0x61e>
        {
            q7_t      inV = *pA++;
 8006814:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	1c99      	adds	r1, r3, #2
 800681c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006820:	6011      	str	r1, [r2, #0]
 8006822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006826:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            q15_t     inM = *pB++;
 800682a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006834:	f993 3000 	ldrsb.w	r3, [r3]
 8006838:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
            sum += inV * inM;
 800683c:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8006840:	f9b7 2128 	ldrsh.w	r2, [r7, #296]	; 0x128
 8006844:	fb02 f303 	mul.w	r3, r2, r3
 8006848:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800684c:	4413      	add	r3, r2
 800684e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            colCnt--;
 8006852:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8006856:	3b01      	subs	r3, #1
 8006858:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 800685c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1d7      	bne.n	8006814 <arm_fully_connected_q7+0x5d6>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8006864:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006868:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800686c:	fa42 f303 	asr.w	r3, r2, r3
 8006870:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006874:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006878:	f303 0307 	ssat	r3, #8, r3
 800687c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006880:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8006884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800688e:	b24a      	sxtb	r2, r1
 8006890:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8006892:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006896:	3b01      	subs	r3, #1
 8006898:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 800689c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f47f aee6 	bne.w	8006672 <arm_fully_connected_q7+0x434>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 80068a6:	2300      	movs	r3, #0

}
 80068a8:	4618      	mov	r0, r3
 80068aa:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd90      	pop	{r4, r7, pc}

080068b2 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b091      	sub	sp, #68	; 0x44
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 80068c8:	e037      	b.n	800693a <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 80068ca:	f107 0214 	add.w	r2, r7, #20
 80068ce:	6813      	ldr	r3, [r2, #0]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	6011      	str	r1, [r2, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	2308      	movs	r3, #8
 80068de:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	e003      	b.n	80068fa <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	fa62 f303 	ror.w	r3, r2, r3
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	fa2f f383 	sxtb16	r3, r3
 8006902:	623b      	str	r3, [r7, #32]
  return(result);
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	fa2f f383 	sxtb16	r3, r3
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8006918:	f107 0208 	add.w	r2, r7, #8
 800691c:	6813      	ldr	r3, [r2, #0]
 800691e:	1d19      	adds	r1, r3, #4
 8006920:	6011      	str	r1, [r2, #0]
 8006922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006924:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8006926:	f107 0208 	add.w	r2, r7, #8
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	1d19      	adds	r1, r3, #4
 800692e:	6011      	str	r1, [r2, #0]
 8006930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006932:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	3b01      	subs	r3, #1
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 800693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1c4      	bne.n	80068ca <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8006948:	e00c      	b.n	8006964 <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	617a      	str	r2, [r7, #20]
 8006950:	f993 1000 	ldrsb.w	r1, [r3]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	60ba      	str	r2, [r7, #8]
 800695a:	b20a      	sxth	r2, r1
 800695c:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	3b01      	subs	r3, #1
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1ef      	bne.n	800694a <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 800696a:	bf00      	nop
 800696c:	bf00      	nop
 800696e:	3744      	adds	r7, #68	; 0x44
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800697c:	2003      	movs	r0, #3
 800697e:	f000 f8fa 	bl	8006b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006982:	200f      	movs	r0, #15
 8006984:	f7fc fec6 	bl	8003714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006988:	f7fc fbc2 	bl	8003110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_IncTick+0x20>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <HAL_IncTick+0x24>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4413      	add	r3, r2
 80069a4:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <HAL_IncTick+0x24>)
 80069a6:	6013      	str	r3, [r2, #0]
}
 80069a8:	bf00      	nop
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000010 	.word	0x20000010
 80069b8:	2000048c 	.word	0x2000048c

080069bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return uwTick;
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <HAL_GetTick+0x14>)
 80069c2:	681b      	ldr	r3, [r3, #0]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	2000048c 	.word	0x2000048c

080069d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069dc:	f7ff ffee 	bl	80069bc <HAL_GetTick>
 80069e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d005      	beq.n	80069fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <HAL_Delay+0x44>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069fa:	bf00      	nop
 80069fc:	f7ff ffde 	bl	80069bc <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d8f7      	bhi.n	80069fc <HAL_Delay+0x28>
  {
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000010 	.word	0x20000010

08006a1c <__NVIC_SetPriorityGrouping>:
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <__NVIC_SetPriorityGrouping+0x40>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <__NVIC_SetPriorityGrouping+0x44>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a4a:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <__NVIC_SetPriorityGrouping+0x40>)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	60d3      	str	r3, [r2, #12]
}
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	e000ed00 	.word	0xe000ed00
 8006a60:	05fa0000 	.word	0x05fa0000

08006a64 <__NVIC_GetPriorityGrouping>:
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a68:	4b04      	ldr	r3, [pc, #16]	; (8006a7c <__NVIC_GetPriorityGrouping+0x18>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	0a1b      	lsrs	r3, r3, #8
 8006a6e:	f003 0307 	and.w	r3, r3, #7
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	e000ed00 	.word	0xe000ed00

08006a80 <__NVIC_EnableIRQ>:
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	db0b      	blt.n	8006aaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	f003 021f 	and.w	r2, r3, #31
 8006a98:	4907      	ldr	r1, [pc, #28]	; (8006ab8 <__NVIC_EnableIRQ+0x38>)
 8006a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8006aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	e000e100 	.word	0xe000e100

08006abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	6039      	str	r1, [r7, #0]
 8006ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	db0a      	blt.n	8006ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	490c      	ldr	r1, [pc, #48]	; (8006b08 <__NVIC_SetPriority+0x4c>)
 8006ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ada:	0112      	lsls	r2, r2, #4
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	440b      	add	r3, r1
 8006ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ae4:	e00a      	b.n	8006afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4908      	ldr	r1, [pc, #32]	; (8006b0c <__NVIC_SetPriority+0x50>)
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	3b04      	subs	r3, #4
 8006af4:	0112      	lsls	r2, r2, #4
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	440b      	add	r3, r1
 8006afa:	761a      	strb	r2, [r3, #24]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	e000e100 	.word	0xe000e100
 8006b0c:	e000ed00 	.word	0xe000ed00

08006b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b089      	sub	sp, #36	; 0x24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f1c3 0307 	rsb	r3, r3, #7
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	bf28      	it	cs
 8006b2e:	2304      	movcs	r3, #4
 8006b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3304      	adds	r3, #4
 8006b36:	2b06      	cmp	r3, #6
 8006b38:	d902      	bls.n	8006b40 <NVIC_EncodePriority+0x30>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3b03      	subs	r3, #3
 8006b3e:	e000      	b.n	8006b42 <NVIC_EncodePriority+0x32>
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4e:	43da      	mvns	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	401a      	ands	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b58:	f04f 31ff 	mov.w	r1, #4294967295
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	43d9      	mvns	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b68:	4313      	orrs	r3, r2
         );
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3724      	adds	r7, #36	; 0x24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff ff4c 	bl	8006a1c <__NVIC_SetPriorityGrouping>
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b9e:	f7ff ff61 	bl	8006a64 <__NVIC_GetPriorityGrouping>
 8006ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	6978      	ldr	r0, [r7, #20]
 8006baa:	f7ff ffb1 	bl	8006b10 <NVIC_EncodePriority>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ff80 	bl	8006abc <__NVIC_SetPriority>
}
 8006bbc:	bf00      	nop
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff ff54 	bl	8006a80 <__NVIC_EnableIRQ>
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e0ac      	b.n	8006d4c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fab8 	bl	800716c <DFSDM_GetChannelFromInstance>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	4a55      	ldr	r2, [pc, #340]	; (8006d54 <HAL_DFSDM_ChannelInit+0x174>)
 8006c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e09f      	b.n	8006d4c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fc fb57 	bl	80032c0 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8006c12:	4b51      	ldr	r3, [pc, #324]	; (8006d58 <HAL_DFSDM_ChannelInit+0x178>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3301      	adds	r3, #1
 8006c18:	4a4f      	ldr	r2, [pc, #316]	; (8006d58 <HAL_DFSDM_ChannelInit+0x178>)
 8006c1a:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8006c1c:	4b4e      	ldr	r3, [pc, #312]	; (8006d58 <HAL_DFSDM_ChannelInit+0x178>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d125      	bne.n	8006c70 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8006c24:	4b4d      	ldr	r3, [pc, #308]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a4c      	ldr	r2, [pc, #304]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8006c30:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4948      	ldr	r1, [pc, #288]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8006c3e:	4b47      	ldr	r3, [pc, #284]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a46      	ldr	r2, [pc, #280]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c44:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006c48:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	791b      	ldrb	r3, [r3, #4]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d108      	bne.n	8006c64 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8006c52:	4b42      	ldr	r3, [pc, #264]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	493f      	ldr	r1, [pc, #252]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8006c64:	4b3d      	ldr	r3, [pc, #244]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3c      	ldr	r2, [pc, #240]	; (8006d5c <HAL_DFSDM_ChannelInit+0x17c>)
 8006c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c6e:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8006c7e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6819      	ldr	r1, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8006c8e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8006c94:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 020f 	bic.w	r2, r2, #15
 8006cac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6819      	ldr	r1, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8006cd4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6899      	ldr	r1, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f002 0207 	and.w	r2, r2, #7
 8006d00:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6859      	ldr	r1, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d2c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fa16 	bl	800716c <DFSDM_GetChannelFromInstance>
 8006d40:	4602      	mov	r2, r0
 8006d42:	4904      	ldr	r1, [pc, #16]	; (8006d54 <HAL_DFSDM_ChannelInit+0x174>)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	200003c8 	.word	0x200003c8
 8006d58:	200003c4 	.word	0x200003c4
 8006d5c:	40017400 	.word	0x40017400

08006d60 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e0c6      	b.n	8006f00 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a64      	ldr	r2, [pc, #400]	; (8006f08 <HAL_DFSDM_FilterInit+0x1a8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d109      	bne.n	8006d90 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d003      	beq.n	8006d8c <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e0b7      	b.n	8006f00 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fc f9d5 	bl	8003158 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8006dbc:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7a1b      	ldrb	r3, [r3, #8]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d108      	bne.n	8006dd8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e007      	b.n	8006de8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006de6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7a5b      	ldrb	r3, [r3, #9]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d108      	bne.n	8006e02 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e007      	b.n	8006e12 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6819      	ldr	r1, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4b3b      	ldr	r3, [pc, #236]	; (8006f0c <HAL_DFSDM_FilterInit+0x1ac>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d108      	bne.n	8006e3c <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7c1b      	ldrb	r3, [r3, #16]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d108      	bne.n	8006e56 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0210 	orr.w	r2, r2, #16
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e007      	b.n	8006e66 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0210 	bic.w	r2, r2, #16
 8006e64:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7c5b      	ldrb	r3, [r3, #17]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d108      	bne.n	8006e80 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0220 	orr.w	r2, r2, #32
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e007      	b.n	8006e90 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0220 	bic.w	r2, r2, #32
 8006e8e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6959      	ldr	r1, [r3, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b1d      	ldr	r3, [pc, #116]	; (8006f10 <HAL_DFSDM_FilterInit+0x1b0>)
 8006e9c:	400b      	ands	r3, r1
 8006e9e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6959      	ldr	r1, [r3, #20]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006eb2:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8006eba:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	7c1a      	ldrb	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0201 	orr.w	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40017500 	.word	0x40017500
 8006f0c:	ffff80f7 	.word	0xffff80f7
 8006f10:	1c00ff00 	.word	0x1c00ff00

08006f14 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d02c      	beq.n	8006f88 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8006f34:	2bff      	cmp	r3, #255	; 0xff
 8006f36:	d027      	beq.n	8006f88 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6819      	ldr	r1, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8006f44:	400b      	ands	r3, r1
 8006f46:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d10d      	bne.n	8006f6a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e00a      	b.n	8006f80 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
 8006f86:	e001      	b.n	8006f8c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }  
  else
  {
    status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	f8fbffff 	.word	0xf8fbffff

08006fa0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
 8006fc0:	e066      	b.n	8007090 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fd0:	d002      	beq.n	8006fd8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
 8006fd6:	e05b      	b.n	8007090 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10e      	bne.n	8006ffe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d002      	beq.n	8006ffe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
 8006ffc:	e048      	b.n	8007090 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10c      	bne.n	8007020 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800700a:	2b00      	cmp	r3, #0
 800700c:	d108      	bne.n	8007020 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007018:	d102      	bne.n	8007020 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	75fb      	strb	r3, [r7, #23]
 800701e:	e037      	b.n	8007090 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007026:	2b01      	cmp	r3, #1
 8007028:	d004      	beq.n	8007034 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8007030:	2b03      	cmp	r3, #3
 8007032:	d12b      	bne.n	800708c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800703a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	4a17      	ldr	r2, [pc, #92]	; (80070a0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8007042:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800704a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704e:	d101      	bne.n	8007054 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8007050:	4a14      	ldr	r2, [pc, #80]	; (80070a4 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8007052:	e000      	b.n	8007056 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8007054:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	331c      	adds	r3, #28
 8007066:	4619      	mov	r1, r3
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f000 fa1c 	bl	80074a8 <HAL_DMA_Start_IT>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	22ff      	movs	r2, #255	; 0xff
 800707a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8007082:	e005      	b.n	8007090 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f8bd 	bl	8007204 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800708a:	e001      	b.n	8007090 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	0800712d 	.word	0x0800712d
 80070a0:	08007149 	.word	0x08007149
 80070a4:	08007111 	.word	0x08007111

080070a8 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d007      	beq.n	80070ce <HAL_DFSDM_FilterRegularStop_DMA+0x26>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d002      	beq.n	80070ce <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e011      	b.n	80070f2 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fa48 	bl	8007568 <HAL_DMA_Abort>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d006      	beq.n	80070ec <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	22ff      	movs	r2, #255	; 0xff
 80070e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
 80070ea:	e002      	b.n	80070f2 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f8df 	bl	80072b0 <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7fb f90e 	bl	8002340 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7fb f932 	bl	80023a4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2203      	movs	r2, #3
 800715a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff ffcd 	bl	80070fc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <DFSDM_GetChannelFromInstance+0x7c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d102      	bne.n	8007182 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e02b      	b.n	80071da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a19      	ldr	r2, [pc, #100]	; (80071ec <DFSDM_GetChannelFromInstance+0x80>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d102      	bne.n	8007190 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800718a:	2301      	movs	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e024      	b.n	80071da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <DFSDM_GetChannelFromInstance+0x84>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d102      	bne.n	800719e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007198:	2302      	movs	r3, #2
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e01d      	b.n	80071da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a14      	ldr	r2, [pc, #80]	; (80071f4 <DFSDM_GetChannelFromInstance+0x88>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d102      	bne.n	80071ac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80071a6:	2303      	movs	r3, #3
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	e016      	b.n	80071da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <DFSDM_GetChannelFromInstance+0x8c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d102      	bne.n	80071ba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80071b4:	2304      	movs	r3, #4
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e00f      	b.n	80071da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a0f      	ldr	r2, [pc, #60]	; (80071fc <DFSDM_GetChannelFromInstance+0x90>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d102      	bne.n	80071c8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80071c2:	2305      	movs	r3, #5
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e008      	b.n	80071da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a0d      	ldr	r2, [pc, #52]	; (8007200 <DFSDM_GetChannelFromInstance+0x94>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d102      	bne.n	80071d6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80071d0:	2306      	movs	r3, #6
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e001      	b.n	80071da <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80071d6:	2307      	movs	r3, #7
 80071d8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80071da:	68fb      	ldr	r3, [r7, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	40017400 	.word	0x40017400
 80071ec:	40017420 	.word	0x40017420
 80071f0:	40017440 	.word	0x40017440
 80071f4:	40017460 	.word	0x40017460
 80071f8:	40017480 	.word	0x40017480
 80071fc:	400174a0 	.word	0x400174a0
 8007200:	400174c0 	.word	0x400174c0

08007204 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	e033      	b.n	800728e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0201 	bic.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007244:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800725c:	2b03      	cmp	r3, #3
 800725e:	d116      	bne.n	800728e <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d107      	bne.n	8007278 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0202 	orr.w	r2, r2, #2
 8007276:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800727e:	2b01      	cmp	r3, #1
 8007280:	d102      	bne.n	8007288 <DFSDM_RegConvStart+0x84>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	e000      	b.n	800728a <DFSDM_RegConvStart+0x86>
 8007288:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <DFSDM_RegConvStart+0x98>
 8007298:	2202      	movs	r2, #2
 800729a:	e000      	b.n	800729e <DFSDM_RegConvStart+0x9a>
 800729c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80072de:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d116      	bne.n	8007328 <DFSDM_RegConvStop+0x78>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0202 	orr.w	r2, r2, #2
 8007310:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 8007318:	2b01      	cmp	r3, #1
 800731a:	d102      	bne.n	8007322 <DFSDM_RegConvStop+0x72>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007320:	e000      	b.n	8007324 <DFSDM_RegConvStop+0x74>
 8007322:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6493      	str	r3, [r2, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800732e:	2b02      	cmp	r3, #2
 8007330:	d101      	bne.n	8007336 <DFSDM_RegConvStop+0x86>
 8007332:	2201      	movs	r2, #1
 8007334:	e000      	b.n	8007338 <DFSDM_RegConvStop+0x88>
 8007336:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007358:	f7ff fb30 	bl	80069bc <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e099      	b.n	800749c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0201 	bic.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007388:	e00f      	b.n	80073aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800738a:	f7ff fb17 	bl	80069bc <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b05      	cmp	r3, #5
 8007396:	d908      	bls.n	80073aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2203      	movs	r2, #3
 80073a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e078      	b.n	800749c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e8      	bne.n	800738a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4b38      	ldr	r3, [pc, #224]	; (80074a4 <HAL_DMA_Init+0x158>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b04      	cmp	r3, #4
 8007402:	d107      	bne.n	8007414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	4313      	orrs	r3, r2
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b04      	cmp	r3, #4
 800743c:	d117      	bne.n	800746e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00e      	beq.n	800746e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fae7 	bl	8007a24 <DMA_CheckFifoParam>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d008      	beq.n	800746e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800746a:	2301      	movs	r3, #1
 800746c:	e016      	b.n	800749c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa9e 	bl	80079b8 <DMA_CalcBaseAndBitshift>
 800747c:	4603      	mov	r3, r0
 800747e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007484:	223f      	movs	r2, #63	; 0x3f
 8007486:	409a      	lsls	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	e010803f 	.word	0xe010803f

080074a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <HAL_DMA_Start_IT+0x26>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e048      	b.n	8007560 <HAL_DMA_Start_IT+0xb8>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d137      	bne.n	8007552 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2202      	movs	r2, #2
 80074e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fa30 	bl	800795c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007500:	223f      	movs	r2, #63	; 0x3f
 8007502:	409a      	lsls	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0216 	orr.w	r2, r2, #22
 8007516:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007526:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0208 	orr.w	r2, r2, #8
 800753e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0201 	orr.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	e005      	b.n	800755e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800755a:	2302      	movs	r3, #2
 800755c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800755e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007576:	f7ff fa21 	bl	80069bc <HAL_GetTick>
 800757a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d008      	beq.n	800759a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2280      	movs	r2, #128	; 0x80
 800758c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e052      	b.n	8007640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0216 	bic.w	r2, r2, #22
 80075a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <HAL_DMA_Abort+0x62>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0208 	bic.w	r2, r2, #8
 80075d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075ea:	e013      	b.n	8007614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075ec:	f7ff f9e6 	bl	80069bc <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	d90c      	bls.n	8007614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2203      	movs	r2, #3
 8007604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e015      	b.n	8007640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e4      	bne.n	80075ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007626:	223f      	movs	r2, #63	; 0x3f
 8007628:	409a      	lsls	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007654:	4b92      	ldr	r3, [pc, #584]	; (80078a0 <HAL_DMA_IRQHandler+0x258>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a92      	ldr	r2, [pc, #584]	; (80078a4 <HAL_DMA_IRQHandler+0x25c>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	0a9b      	lsrs	r3, r3, #10
 8007660:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007672:	2208      	movs	r2, #8
 8007674:	409a      	lsls	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4013      	ands	r3, r2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01a      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d013      	beq.n	80076b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0204 	bic.w	r2, r2, #4
 800769a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a0:	2208      	movs	r2, #8
 80076a2:	409a      	lsls	r2, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ac:	f043 0201 	orr.w	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b8:	2201      	movs	r2, #1
 80076ba:	409a      	lsls	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d012      	beq.n	80076ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d6:	2201      	movs	r2, #1
 80076d8:	409a      	lsls	r2, r3
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	f043 0202 	orr.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ee:	2204      	movs	r2, #4
 80076f0:	409a      	lsls	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d012      	beq.n	8007720 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770c:	2204      	movs	r2, #4
 800770e:	409a      	lsls	r2, r3
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f043 0204 	orr.w	r2, r3, #4
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007724:	2210      	movs	r2, #16
 8007726:	409a      	lsls	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d043      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d03c      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007742:	2210      	movs	r2, #16
 8007744:	409a      	lsls	r2, r3
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d018      	beq.n	800778a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d108      	bne.n	8007778 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d024      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
 8007776:	e01f      	b.n	80077b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01b      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	e016      	b.n	80077b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d107      	bne.n	80077a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0208 	bic.w	r2, r2, #8
 80077a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077bc:	2220      	movs	r2, #32
 80077be:	409a      	lsls	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 808e 	beq.w	80078e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8086 	beq.w	80078e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	2220      	movs	r2, #32
 80077e0:	409a      	lsls	r2, r3
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d136      	bne.n	8007860 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0216 	bic.w	r2, r2, #22
 8007800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007810:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d103      	bne.n	8007822 <HAL_DMA_IRQHandler+0x1da>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0208 	bic.w	r2, r2, #8
 8007830:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007836:	223f      	movs	r2, #63	; 0x3f
 8007838:	409a      	lsls	r2, r3
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007852:	2b00      	cmp	r3, #0
 8007854:	d07d      	beq.n	8007952 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
        }
        return;
 800785e:	e078      	b.n	8007952 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01c      	beq.n	80078a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d108      	bne.n	800788e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007880:	2b00      	cmp	r3, #0
 8007882:	d030      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
 800788c:	e02b      	b.n	80078e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d027      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	4798      	blx	r3
 800789e:	e022      	b.n	80078e6 <HAL_DMA_IRQHandler+0x29e>
 80078a0:	20000008 	.word	0x20000008
 80078a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10f      	bne.n	80078d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0210 	bic.w	r2, r2, #16
 80078c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d032      	beq.n	8007954 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d022      	beq.n	8007940 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2205      	movs	r2, #5
 80078fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0201 	bic.w	r2, r2, #1
 8007910:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	3301      	adds	r3, #1
 8007916:	60bb      	str	r3, [r7, #8]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	429a      	cmp	r2, r3
 800791c:	d307      	bcc.n	800792e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f2      	bne.n	8007912 <HAL_DMA_IRQHandler+0x2ca>
 800792c:	e000      	b.n	8007930 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800792e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
 8007950:	e000      	b.n	8007954 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007952:	bf00      	nop
    }
  }
}
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop

0800795c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d108      	bne.n	800799c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800799a:	e007      	b.n	80079ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	60da      	str	r2, [r3, #12]
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	3b10      	subs	r3, #16
 80079c8:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <DMA_CalcBaseAndBitshift+0x60>)
 80079ca:	fba2 2303 	umull	r2, r3, r2, r3
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079d2:	4a12      	ldr	r2, [pc, #72]	; (8007a1c <DMA_CalcBaseAndBitshift+0x64>)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d908      	bls.n	80079f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <DMA_CalcBaseAndBitshift+0x68>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	1d1a      	adds	r2, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	659a      	str	r2, [r3, #88]	; 0x58
 80079f6:	e006      	b.n	8007a06 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <DMA_CalcBaseAndBitshift+0x68>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	aaaaaaab 	.word	0xaaaaaaab
 8007a1c:	080346fc 	.word	0x080346fc
 8007a20:	fffffc00 	.word	0xfffffc00

08007a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d11f      	bne.n	8007a7e <DMA_CheckFifoParam+0x5a>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d856      	bhi.n	8007af2 <DMA_CheckFifoParam+0xce>
 8007a44:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <DMA_CheckFifoParam+0x28>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a6f 	.word	0x08007a6f
 8007a54:	08007a5d 	.word	0x08007a5d
 8007a58:	08007af3 	.word	0x08007af3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d046      	beq.n	8007af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a6c:	e043      	b.n	8007af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a76:	d140      	bne.n	8007afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a7c:	e03d      	b.n	8007afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a86:	d121      	bne.n	8007acc <DMA_CheckFifoParam+0xa8>
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d837      	bhi.n	8007afe <DMA_CheckFifoParam+0xda>
 8007a8e:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <DMA_CheckFifoParam+0x70>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007aab 	.word	0x08007aab
 8007a9c:	08007aa5 	.word	0x08007aa5
 8007aa0:	08007abd 	.word	0x08007abd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa8:	e030      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d025      	beq.n	8007b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aba:	e022      	b.n	8007b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ac4:	d11f      	bne.n	8007b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007aca:	e01c      	b.n	8007b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d903      	bls.n	8007ada <DMA_CheckFifoParam+0xb6>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d003      	beq.n	8007ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ad8:	e018      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ade:	e015      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00e      	beq.n	8007b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e00b      	b.n	8007b0a <DMA_CheckFifoParam+0xe6>
      break;
 8007af2:	bf00      	nop
 8007af4:	e00a      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007af6:	bf00      	nop
 8007af8:	e008      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007afa:	bf00      	nop
 8007afc:	e006      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007afe:	bf00      	nop
 8007b00:	e004      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007b02:	bf00      	nop
 8007b04:	e002      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8007b06:	bf00      	nop
 8007b08:	e000      	b.n	8007b0c <DMA_CheckFifoParam+0xe8>
      break;
 8007b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop

08007b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007b36:	2300      	movs	r3, #0
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	e175      	b.n	8007e28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	f040 8164 	bne.w	8007e22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d005      	beq.n	8007b72 <HAL_GPIO_Init+0x56>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d130      	bne.n	8007bd4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	2203      	movs	r2, #3
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	43db      	mvns	r3, r3
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4013      	ands	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ba8:	2201      	movs	r2, #1
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	091b      	lsrs	r3, r3, #4
 8007bbe:	f003 0201 	and.w	r2, r3, #1
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d017      	beq.n	8007c10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	2203      	movs	r2, #3
 8007bec:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	fa02 f303 	lsl.w	r3, r2, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d123      	bne.n	8007c64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	08da      	lsrs	r2, r3, #3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3208      	adds	r2, #8
 8007c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	220f      	movs	r2, #15
 8007c34:	fa02 f303 	lsl.w	r3, r2, r3
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	08da      	lsrs	r2, r3, #3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3208      	adds	r2, #8
 8007c5e:	69b9      	ldr	r1, [r7, #24]
 8007c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	2203      	movs	r2, #3
 8007c70:	fa02 f303 	lsl.w	r3, r2, r3
 8007c74:	43db      	mvns	r3, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f003 0203 	and.w	r2, r3, #3
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80be 	beq.w	8007e22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ca6:	4b66      	ldr	r3, [pc, #408]	; (8007e40 <HAL_GPIO_Init+0x324>)
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	4a65      	ldr	r2, [pc, #404]	; (8007e40 <HAL_GPIO_Init+0x324>)
 8007cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8007cb2:	4b63      	ldr	r3, [pc, #396]	; (8007e40 <HAL_GPIO_Init+0x324>)
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007cbe:	4a61      	ldr	r2, [pc, #388]	; (8007e44 <HAL_GPIO_Init+0x328>)
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	089b      	lsrs	r3, r3, #2
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	220f      	movs	r2, #15
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	43db      	mvns	r3, r3
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a58      	ldr	r2, [pc, #352]	; (8007e48 <HAL_GPIO_Init+0x32c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d037      	beq.n	8007d5a <HAL_GPIO_Init+0x23e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a57      	ldr	r2, [pc, #348]	; (8007e4c <HAL_GPIO_Init+0x330>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d031      	beq.n	8007d56 <HAL_GPIO_Init+0x23a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a56      	ldr	r2, [pc, #344]	; (8007e50 <HAL_GPIO_Init+0x334>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d02b      	beq.n	8007d52 <HAL_GPIO_Init+0x236>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a55      	ldr	r2, [pc, #340]	; (8007e54 <HAL_GPIO_Init+0x338>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d025      	beq.n	8007d4e <HAL_GPIO_Init+0x232>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a54      	ldr	r2, [pc, #336]	; (8007e58 <HAL_GPIO_Init+0x33c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d01f      	beq.n	8007d4a <HAL_GPIO_Init+0x22e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a53      	ldr	r2, [pc, #332]	; (8007e5c <HAL_GPIO_Init+0x340>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d019      	beq.n	8007d46 <HAL_GPIO_Init+0x22a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a52      	ldr	r2, [pc, #328]	; (8007e60 <HAL_GPIO_Init+0x344>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d013      	beq.n	8007d42 <HAL_GPIO_Init+0x226>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a51      	ldr	r2, [pc, #324]	; (8007e64 <HAL_GPIO_Init+0x348>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00d      	beq.n	8007d3e <HAL_GPIO_Init+0x222>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a50      	ldr	r2, [pc, #320]	; (8007e68 <HAL_GPIO_Init+0x34c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d007      	beq.n	8007d3a <HAL_GPIO_Init+0x21e>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a4f      	ldr	r2, [pc, #316]	; (8007e6c <HAL_GPIO_Init+0x350>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d101      	bne.n	8007d36 <HAL_GPIO_Init+0x21a>
 8007d32:	2309      	movs	r3, #9
 8007d34:	e012      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d36:	230a      	movs	r3, #10
 8007d38:	e010      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	e00e      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d3e:	2307      	movs	r3, #7
 8007d40:	e00c      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d42:	2306      	movs	r3, #6
 8007d44:	e00a      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d46:	2305      	movs	r3, #5
 8007d48:	e008      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	e006      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e004      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e002      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <HAL_GPIO_Init+0x240>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	f002 0203 	and.w	r2, r2, #3
 8007d62:	0092      	lsls	r2, r2, #2
 8007d64:	4093      	lsls	r3, r2
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007d6c:	4935      	ldr	r1, [pc, #212]	; (8007e44 <HAL_GPIO_Init+0x328>)
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	089b      	lsrs	r3, r3, #2
 8007d72:	3302      	adds	r3, #2
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d7a:	4b3d      	ldr	r3, [pc, #244]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	43db      	mvns	r3, r3
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	4013      	ands	r3, r2
 8007d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d9e:	4a34      	ldr	r2, [pc, #208]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	43db      	mvns	r3, r3
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	4013      	ands	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007dc8:	4a29      	ldr	r2, [pc, #164]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007dce:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	43db      	mvns	r3, r3
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007df2:	4a1f      	ldr	r2, [pc, #124]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007df8:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	43db      	mvns	r3, r3
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4013      	ands	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e1c:	4a14      	ldr	r2, [pc, #80]	; (8007e70 <HAL_GPIO_Init+0x354>)
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	3301      	adds	r3, #1
 8007e26:	61fb      	str	r3, [r7, #28]
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	2b0f      	cmp	r3, #15
 8007e2c:	f67f ae86 	bls.w	8007b3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	3724      	adds	r7, #36	; 0x24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40023800 	.word	0x40023800
 8007e44:	40013800 	.word	0x40013800
 8007e48:	40020000 	.word	0x40020000
 8007e4c:	40020400 	.word	0x40020400
 8007e50:	40020800 	.word	0x40020800
 8007e54:	40020c00 	.word	0x40020c00
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	40021400 	.word	0x40021400
 8007e60:	40021800 	.word	0x40021800
 8007e64:	40021c00 	.word	0x40021c00
 8007e68:	40022000 	.word	0x40022000
 8007e6c:	40022400 	.word	0x40022400
 8007e70:	40013c00 	.word	0x40013c00

08007e74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	e0d9      	b.n	8008044 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e90:	2201      	movs	r2, #1
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	f040 80c9 	bne.w	800803e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007eac:	4a6b      	ldr	r2, [pc, #428]	; (800805c <HAL_GPIO_DeInit+0x1e8>)
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f003 0303 	and.w	r3, r3, #3
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	220f      	movs	r2, #15
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a63      	ldr	r2, [pc, #396]	; (8008060 <HAL_GPIO_DeInit+0x1ec>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d037      	beq.n	8007f46 <HAL_GPIO_DeInit+0xd2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a62      	ldr	r2, [pc, #392]	; (8008064 <HAL_GPIO_DeInit+0x1f0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d031      	beq.n	8007f42 <HAL_GPIO_DeInit+0xce>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a61      	ldr	r2, [pc, #388]	; (8008068 <HAL_GPIO_DeInit+0x1f4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d02b      	beq.n	8007f3e <HAL_GPIO_DeInit+0xca>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a60      	ldr	r2, [pc, #384]	; (800806c <HAL_GPIO_DeInit+0x1f8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d025      	beq.n	8007f3a <HAL_GPIO_DeInit+0xc6>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a5f      	ldr	r2, [pc, #380]	; (8008070 <HAL_GPIO_DeInit+0x1fc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01f      	beq.n	8007f36 <HAL_GPIO_DeInit+0xc2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a5e      	ldr	r2, [pc, #376]	; (8008074 <HAL_GPIO_DeInit+0x200>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d019      	beq.n	8007f32 <HAL_GPIO_DeInit+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a5d      	ldr	r2, [pc, #372]	; (8008078 <HAL_GPIO_DeInit+0x204>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d013      	beq.n	8007f2e <HAL_GPIO_DeInit+0xba>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a5c      	ldr	r2, [pc, #368]	; (800807c <HAL_GPIO_DeInit+0x208>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00d      	beq.n	8007f2a <HAL_GPIO_DeInit+0xb6>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a5b      	ldr	r2, [pc, #364]	; (8008080 <HAL_GPIO_DeInit+0x20c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d007      	beq.n	8007f26 <HAL_GPIO_DeInit+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a5a      	ldr	r2, [pc, #360]	; (8008084 <HAL_GPIO_DeInit+0x210>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d101      	bne.n	8007f22 <HAL_GPIO_DeInit+0xae>
 8007f1e:	2309      	movs	r3, #9
 8007f20:	e012      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f22:	230a      	movs	r3, #10
 8007f24:	e010      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f26:	2308      	movs	r3, #8
 8007f28:	e00e      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f2a:	2307      	movs	r3, #7
 8007f2c:	e00c      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f2e:	2306      	movs	r3, #6
 8007f30:	e00a      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f32:	2305      	movs	r3, #5
 8007f34:	e008      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f36:	2304      	movs	r3, #4
 8007f38:	e006      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e004      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e002      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <HAL_GPIO_DeInit+0xd4>
 8007f46:	2300      	movs	r3, #0
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	f002 0203 	and.w	r2, r2, #3
 8007f4e:	0092      	lsls	r2, r2, #2
 8007f50:	4093      	lsls	r3, r2
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d132      	bne.n	8007fbe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007f58:	4b4b      	ldr	r3, [pc, #300]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	4949      	ldr	r1, [pc, #292]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f62:	4013      	ands	r3, r2
 8007f64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007f66:	4b48      	ldr	r3, [pc, #288]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	4946      	ldr	r1, [pc, #280]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007f74:	4b44      	ldr	r3, [pc, #272]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	4942      	ldr	r1, [pc, #264]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007f82:	4b41      	ldr	r3, [pc, #260]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	493f      	ldr	r1, [pc, #252]	; (8008088 <HAL_GPIO_DeInit+0x214>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	220f      	movs	r2, #15
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007fa0:	4a2e      	ldr	r2, [pc, #184]	; (800805c <HAL_GPIO_DeInit+0x1e8>)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	089b      	lsrs	r3, r3, #2
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	43da      	mvns	r2, r3
 8007fb0:	482a      	ldr	r0, [pc, #168]	; (800805c <HAL_GPIO_DeInit+0x1e8>)
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	089b      	lsrs	r3, r3, #2
 8007fb6:	400a      	ands	r2, r1
 8007fb8:	3302      	adds	r3, #2
 8007fba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	2103      	movs	r1, #3
 8007fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	401a      	ands	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	08da      	lsrs	r2, r3, #3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3208      	adds	r2, #8
 8007fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	220f      	movs	r2, #15
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	43db      	mvns	r3, r3
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	08d2      	lsrs	r2, r2, #3
 8007ff4:	4019      	ands	r1, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3208      	adds	r2, #8
 8007ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	2103      	movs	r1, #3
 8008008:	fa01 f303 	lsl.w	r3, r1, r3
 800800c:	43db      	mvns	r3, r3
 800800e:	401a      	ands	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	2101      	movs	r1, #1
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	fa01 f303 	lsl.w	r3, r1, r3
 8008020:	43db      	mvns	r3, r3
 8008022:	401a      	ands	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	2103      	movs	r1, #3
 8008032:	fa01 f303 	lsl.w	r3, r1, r3
 8008036:	43db      	mvns	r3, r3
 8008038:	401a      	ands	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	3301      	adds	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	f67f af22 	bls.w	8007e90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	40013800 	.word	0x40013800
 8008060:	40020000 	.word	0x40020000
 8008064:	40020400 	.word	0x40020400
 8008068:	40020800 	.word	0x40020800
 800806c:	40020c00 	.word	0x40020c00
 8008070:	40021000 	.word	0x40021000
 8008074:	40021400 	.word	0x40021400
 8008078:	40021800 	.word	0x40021800
 800807c:	40021c00 	.word	0x40021c00
 8008080:	40022000 	.word	0x40022000
 8008084:	40022400 	.word	0x40022400
 8008088:	40013c00 	.word	0x40013c00

0800808c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	807b      	strh	r3, [r7, #2]
 8008098:	4613      	mov	r3, r2
 800809a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800809c:	787b      	ldrb	r3, [r7, #1]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080a2:	887a      	ldrh	r2, [r7, #2]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80080a8:	e003      	b.n	80080b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80080aa:	887b      	ldrh	r3, [r7, #2]
 80080ac:	041a      	lsls	r2, r3, #16
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	619a      	str	r2, [r3, #24]
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80080ca:	4b08      	ldr	r3, [pc, #32]	; (80080ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080cc:	695a      	ldr	r2, [r3, #20]
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	4013      	ands	r3, r2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d006      	beq.n	80080e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080d6:	4a05      	ldr	r2, [pc, #20]	; (80080ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fa f884 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	40013c00 	.word	0x40013c00

080080f0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80080fc:	4b0c      	ldr	r3, [pc, #48]	; (8008130 <HAL_PWR_EnterSLEEPMode+0x40>)
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	4a0b      	ldr	r2, [pc, #44]	; (8008130 <HAL_PWR_EnterSLEEPMode+0x40>)
 8008102:	f023 0304 	bic.w	r3, r3, #4
 8008106:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8008108:	f3bf 8f4f 	dsb	sy
}
 800810c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800810e:	f3bf 8f6f 	isb	sy
}
 8008112:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800811a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800811c:	e002      	b.n	8008124 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800811e:	bf40      	sev
    __WFE();
 8008120:	bf20      	wfe
    __WFE();
 8008122:	bf20      	wfe
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	e000ed00 	.word	0xe000ed00

08008134 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800813e:	4b23      	ldr	r3, [pc, #140]	; (80081cc <HAL_PWREx_EnableOverDrive+0x98>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	4a22      	ldr	r2, [pc, #136]	; (80081cc <HAL_PWREx_EnableOverDrive+0x98>)
 8008144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008148:	6413      	str	r3, [r2, #64]	; 0x40
 800814a:	4b20      	ldr	r3, [pc, #128]	; (80081cc <HAL_PWREx_EnableOverDrive+0x98>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008156:	4b1e      	ldr	r3, [pc, #120]	; (80081d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1d      	ldr	r2, [pc, #116]	; (80081d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800815c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008160:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008162:	f7fe fc2b 	bl	80069bc <HAL_GetTick>
 8008166:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008168:	e009      	b.n	800817e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800816a:	f7fe fc27 	bl	80069bc <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008178:	d901      	bls.n	800817e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e022      	b.n	80081c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800817e:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818a:	d1ee      	bne.n	800816a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800818c:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0f      	ldr	r2, [pc, #60]	; (80081d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008196:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008198:	f7fe fc10 	bl	80069bc <HAL_GetTick>
 800819c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800819e:	e009      	b.n	80081b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80081a0:	f7fe fc0c 	bl	80069bc <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081ae:	d901      	bls.n	80081b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e007      	b.n	80081c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c0:	d1ee      	bne.n	80081a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40023800 	.word	0x40023800
 80081d0:	40007000 	.word	0x40007000

080081d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80081dc:	f7fe fbee 	bl	80069bc <HAL_GetTick>
 80081e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e067      	b.n	80082bc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10b      	bne.n	8008210 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fb f8cf 	bl	80033a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008206:	f241 3188 	movw	r1, #5000	; 0x1388
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa86 	bl	800871c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	3b01      	subs	r3, #1
 8008220:	021a      	lsls	r2, r3, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	2120      	movs	r1, #32
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa7e 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d135      	bne.n	80082b2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <HAL_QSPI_Init+0xf0>)
 800824e:	4013      	ands	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6852      	ldr	r2, [r2, #4]
 8008254:	0611      	lsls	r1, r2, #24
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68d2      	ldr	r2, [r2, #12]
 800825a:	4311      	orrs	r1, r2
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	69d2      	ldr	r2, [r2, #28]
 8008260:	4311      	orrs	r1, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6a12      	ldr	r2, [r2, #32]
 8008266:	4311      	orrs	r1, r2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6812      	ldr	r2, [r2, #0]
 800826c:	430b      	orrs	r3, r1
 800826e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <HAL_QSPI_Init+0xf4>)
 8008278:	4013      	ands	r3, r2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6912      	ldr	r2, [r2, #16]
 800827e:	0411      	lsls	r1, r2, #16
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6952      	ldr	r2, [r2, #20]
 8008284:	4311      	orrs	r1, r2
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6992      	ldr	r2, [r2, #24]
 800828a:	4311      	orrs	r1, r2
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	430b      	orrs	r3, r1
 8008292:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80082ba:	7afb      	ldrb	r3, [r7, #11]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	00ffff2f 	.word	0x00ffff2f
 80082c8:	ffe0f8fe 	.word	0xffe0f8fe

080082cc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e016      	b.n	800830c <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0201 	bic.w	r2, r2, #1
 80082ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fb f908 	bl	8003504 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af02      	add	r7, sp, #8
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008320:	f7fe fb4c 	bl	80069bc <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b01      	cmp	r3, #1
 8008330:	d101      	bne.n	8008336 <HAL_QSPI_Command+0x22>
 8008332:	2302      	movs	r3, #2
 8008334:	e048      	b.n	80083c8 <HAL_QSPI_Command+0xb4>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b01      	cmp	r3, #1
 8008348:	d137      	bne.n	80083ba <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2200      	movs	r2, #0
 8008360:	2120      	movs	r1, #32
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 f9e8 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 8008368:	4603      	mov	r3, r0
 800836a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d125      	bne.n	80083be <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008372:	2200      	movs	r2, #0
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fa15 	bl	80087a6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	d115      	bne.n	80083b0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2201      	movs	r2, #1
 800838c:	2102      	movs	r1, #2
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f9d2 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10f      	bne.n	80083be <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2202      	movs	r2, #2
 80083a4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083ae:	e006      	b.n	80083be <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083b8:	e001      	b.n	80083be <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80083ba:	2302      	movs	r3, #2
 80083bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80083e0:	f7fe faec 	bl	80069bc <HAL_GetTick>
 80083e4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3320      	adds	r3, #32
 80083ec:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_QSPI_Transmit+0x2e>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e076      	b.n	80084ec <HAL_QSPI_Transmit+0x11c>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	d165      	bne.n	80084de <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d056      	beq.n	80084cc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2212      	movs	r2, #18
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	695a      	ldr	r2, [r3, #20]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008452:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8008454:	e01b      	b.n	800848e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2201      	movs	r2, #1
 800845e:	2104      	movs	r1, #4
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f969 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 8008466:	4603      	mov	r3, r0
 8008468:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800846a:	7ffb      	ldrb	r3, [r7, #31]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d113      	bne.n	8008498 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	781a      	ldrb	r2, [r3, #0]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	1e5a      	subs	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1df      	bne.n	8008456 <HAL_QSPI_Transmit+0x86>
 8008496:	e000      	b.n	800849a <HAL_QSPI_Transmit+0xca>
          break;
 8008498:	bf00      	nop
      }

      if (status == HAL_OK)
 800849a:	7ffb      	ldrb	r3, [r7, #31]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d110      	bne.n	80084c2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2201      	movs	r2, #1
 80084a8:	2102      	movs	r1, #2
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f944 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80084b4:	7ffb      	ldrb	r3, [r7, #31]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2202      	movs	r2, #2
 80084c0:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084ca:	e00a      	b.n	80084e2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d0:	f043 0208 	orr.w	r2, r3, #8
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	77fb      	strb	r3, [r7, #31]
 80084dc:	e001      	b.n	80084e2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80084de:	2302      	movs	r3, #2
 80084e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80084ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	; 0x28
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8008504:	f7fe fa5a 	bl	80069bc <HAL_GetTick>
 8008508:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3320      	adds	r3, #32
 8008518:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_QSPI_Receive+0x36>
 8008526:	2302      	movs	r3, #2
 8008528:	e07d      	b.n	8008626 <HAL_QSPI_Receive+0x132>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b01      	cmp	r3, #1
 800853c:	d16c      	bne.n	8008618 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d05d      	beq.n	8008606 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2222      	movs	r2, #34	; 0x22
 800854e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008582:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800858c:	e01c      	b.n	80085c8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2201      	movs	r2, #1
 8008596:	2106      	movs	r1, #6
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f8cd 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 800859e:	4603      	mov	r3, r0
 80085a0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80085a2:	7ffb      	ldrb	r3, [r7, #31]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d114      	bne.n	80085d2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	1e5a      	subs	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1de      	bne.n	800858e <HAL_QSPI_Receive+0x9a>
 80085d0:	e000      	b.n	80085d4 <HAL_QSPI_Receive+0xe0>
          break;
 80085d2:	bf00      	nop
      }

      if (status == HAL_OK)
 80085d4:	7ffb      	ldrb	r3, [r7, #31]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d110      	bne.n	80085fc <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2201      	movs	r2, #1
 80085e2:	2102      	movs	r1, #2
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f8a7 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 80085ea:	4603      	mov	r3, r0
 80085ec:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80085ee:	7ffb      	ldrb	r3, [r7, #31]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d103      	bne.n	80085fc <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2202      	movs	r2, #2
 80085fa:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008604:	e00a      	b.n	800861c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	f043 0208 	orr.w	r2, r3, #8
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	77fb      	strb	r3, [r7, #31]
 8008616:	e001      	b.n	800861c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008618:	2302      	movs	r3, #2
 800861a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8008624:	7ffb      	ldrb	r3, [r7, #31]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b088      	sub	sp, #32
 8008632:	af02      	add	r7, sp, #8
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607a      	str	r2, [r7, #4]
 800863a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800863c:	f7fe f9be 	bl	80069bc <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_QSPI_AutoPolling+0x24>
 800864e:	2302      	movs	r3, #2
 8008650:	e060      	b.n	8008714 <HAL_QSPI_AutoPolling+0xe6>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b01      	cmp	r3, #1
 8008664:	d14f      	bne.n	8008706 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2242      	movs	r2, #66	; 0x42
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2200      	movs	r2, #0
 800867c:	2120      	movs	r1, #32
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f85a 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8008688:	7dfb      	ldrb	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d13d      	bne.n	800870a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6852      	ldr	r2, [r2, #4]
 80086a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	6892      	ldr	r2, [r2, #8]
 80086aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	431a      	orrs	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80086c4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80086ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f866 	bl	80087a6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2201      	movs	r2, #1
 80086e2:	2108      	movs	r1, #8
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f827 	bl	8008738 <QSPI_WaitFlagStateUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2208      	movs	r2, #8
 80086fa:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008704:	e001      	b.n	800870a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8008706:	2302      	movs	r3, #2
 8008708:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	4613      	mov	r3, r2
 8008746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008748:	e01a      	b.n	8008780 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d016      	beq.n	8008780 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008752:	f7fe f933 	bl	80069bc <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	429a      	cmp	r2, r3
 8008760:	d302      	bcc.n	8008768 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2204      	movs	r2, #4
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008774:	f043 0201 	orr.w	r2, r3, #1
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e00e      	b.n	800879e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4013      	ands	r3, r2
 800878a:	2b00      	cmp	r3, #0
 800878c:	bf14      	ite	ne
 800878e:	2301      	movne	r3, #1
 8008790:	2300      	moveq	r3, #0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	461a      	mov	r2, r3
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	429a      	cmp	r2, r3
 800879a:	d1d6      	bne.n	800874a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b085      	sub	sp, #20
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <QSPI_Config+0x28>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80087c0:	d005      	beq.n	80087ce <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3a01      	subs	r2, #1
 80087cc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80b9 	beq.w	800894a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d05f      	beq.n	80088a0 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	6892      	ldr	r2, [r2, #8]
 80087e8:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d031      	beq.n	8008856 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	431a      	orrs	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008800:	431a      	orrs	r2, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	431a      	orrs	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	049b      	lsls	r3, r3, #18
 800880e:	431a      	orrs	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	431a      	orrs	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	431a      	orrs	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	431a      	orrs	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	431a      	orrs	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	431a      	orrs	r2, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	ea42 0103 	orr.w	r1, r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	430a      	orrs	r2, r1
 800883e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008846:	f000 812e 	beq.w	8008aa6 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	6852      	ldr	r2, [r2, #4]
 8008852:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008854:	e127      	b.n	8008aa6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	431a      	orrs	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008864:	431a      	orrs	r2, r3
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	431a      	orrs	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	049b      	lsls	r3, r3, #18
 8008872:	431a      	orrs	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	431a      	orrs	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	431a      	orrs	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	431a      	orrs	r2, r3
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	431a      	orrs	r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	ea42 0103 	orr.w	r1, r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	430a      	orrs	r2, r1
 800889c:	615a      	str	r2, [r3, #20]
}
 800889e:	e102      	b.n	8008aa6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d02e      	beq.n	8008906 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	431a      	orrs	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b6:	431a      	orrs	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	431a      	orrs	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	049b      	lsls	r3, r3, #18
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	431a      	orrs	r2, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	431a      	orrs	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	431a      	orrs	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	ea42 0103 	orr.w	r1, r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80088f6:	f000 80d6 	beq.w	8008aa6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	6852      	ldr	r2, [r2, #4]
 8008902:	619a      	str	r2, [r3, #24]
}
 8008904:	e0cf      	b.n	8008aa6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	431a      	orrs	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008914:	431a      	orrs	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	431a      	orrs	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	049b      	lsls	r3, r3, #18
 8008922:	431a      	orrs	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	431a      	orrs	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	431a      	orrs	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	431a      	orrs	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	ea42 0103 	orr.w	r1, r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	430a      	orrs	r2, r1
 8008946:	615a      	str	r2, [r3, #20]
}
 8008948:	e0ad      	b.n	8008aa6 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d058      	beq.n	8008a04 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	6892      	ldr	r2, [r2, #8]
 800895a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d02d      	beq.n	80089c0 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	431a      	orrs	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008972:	431a      	orrs	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	431a      	orrs	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	049b      	lsls	r3, r3, #18
 8008980:	431a      	orrs	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	431a      	orrs	r2, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	431a      	orrs	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	431a      	orrs	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	431a      	orrs	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	ea42 0103 	orr.w	r1, r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80089b2:	d078      	beq.n	8008aa6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	6852      	ldr	r2, [r2, #4]
 80089bc:	619a      	str	r2, [r3, #24]
}
 80089be:	e072      	b.n	8008aa6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c8:	431a      	orrs	r2, r3
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ce:	431a      	orrs	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	431a      	orrs	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	049b      	lsls	r3, r3, #18
 80089dc:	431a      	orrs	r2, r3
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	431a      	orrs	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	431a      	orrs	r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	ea42 0103 	orr.w	r1, r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	615a      	str	r2, [r3, #20]
}
 8008a02:	e050      	b.n	8008aa6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d02a      	beq.n	8008a62 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	431a      	orrs	r2, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	431a      	orrs	r2, r3
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	049b      	lsls	r3, r3, #18
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	ea42 0103 	orr.w	r1, r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008a54:	d027      	beq.n	8008aa6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	6852      	ldr	r2, [r2, #4]
 8008a5e:	619a      	str	r2, [r3, #24]
}
 8008a60:	e021      	b.n	8008aa6 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01d      	beq.n	8008aa6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	431a      	orrs	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	049b      	lsls	r3, r3, #18
 8008a86:	431a      	orrs	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	431a      	orrs	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	ea42 0103 	orr.w	r1, r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	615a      	str	r2, [r3, #20]
}
 8008aa6:	bf00      	nop
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e29b      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 8087 	beq.w	8008be6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ad8:	4b96      	ldr	r3, [pc, #600]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f003 030c 	and.w	r3, r3, #12
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d00c      	beq.n	8008afe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ae4:	4b93      	ldr	r3, [pc, #588]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 030c 	and.w	r3, r3, #12
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d112      	bne.n	8008b16 <HAL_RCC_OscConfig+0x62>
 8008af0:	4b90      	ldr	r3, [pc, #576]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008afc:	d10b      	bne.n	8008b16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008afe:	4b8d      	ldr	r3, [pc, #564]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d06c      	beq.n	8008be4 <HAL_RCC_OscConfig+0x130>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d168      	bne.n	8008be4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e275      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b1e:	d106      	bne.n	8008b2e <HAL_RCC_OscConfig+0x7a>
 8008b20:	4b84      	ldr	r3, [pc, #528]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a83      	ldr	r2, [pc, #524]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	e02e      	b.n	8008b8c <HAL_RCC_OscConfig+0xd8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10c      	bne.n	8008b50 <HAL_RCC_OscConfig+0x9c>
 8008b36:	4b7f      	ldr	r3, [pc, #508]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a7e      	ldr	r2, [pc, #504]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	4b7c      	ldr	r3, [pc, #496]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a7b      	ldr	r2, [pc, #492]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	e01d      	b.n	8008b8c <HAL_RCC_OscConfig+0xd8>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCC_OscConfig+0xc0>
 8008b5a:	4b76      	ldr	r3, [pc, #472]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a75      	ldr	r2, [pc, #468]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	4b73      	ldr	r3, [pc, #460]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a72      	ldr	r2, [pc, #456]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e00b      	b.n	8008b8c <HAL_RCC_OscConfig+0xd8>
 8008b74:	4b6f      	ldr	r3, [pc, #444]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a6e      	ldr	r2, [pc, #440]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	4b6c      	ldr	r3, [pc, #432]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a6b      	ldr	r2, [pc, #428]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d013      	beq.n	8008bbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b94:	f7fd ff12 	bl	80069bc <HAL_GetTick>
 8008b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b9a:	e008      	b.n	8008bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b9c:	f7fd ff0e 	bl	80069bc <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b64      	cmp	r3, #100	; 0x64
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e229      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bae:	4b61      	ldr	r3, [pc, #388]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0f0      	beq.n	8008b9c <HAL_RCC_OscConfig+0xe8>
 8008bba:	e014      	b.n	8008be6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbc:	f7fd fefe 	bl	80069bc <HAL_GetTick>
 8008bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc4:	f7fd fefa 	bl	80069bc <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b64      	cmp	r3, #100	; 0x64
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e215      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bd6:	4b57      	ldr	r3, [pc, #348]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f0      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x110>
 8008be2:	e000      	b.n	8008be6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d069      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bf2:	4b50      	ldr	r3, [pc, #320]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f003 030c 	and.w	r3, r3, #12
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00b      	beq.n	8008c16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008bfe:	4b4d      	ldr	r3, [pc, #308]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f003 030c 	and.w	r3, r3, #12
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d11c      	bne.n	8008c44 <HAL_RCC_OscConfig+0x190>
 8008c0a:	4b4a      	ldr	r3, [pc, #296]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d116      	bne.n	8008c44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c16:	4b47      	ldr	r3, [pc, #284]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <HAL_RCC_OscConfig+0x17a>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d001      	beq.n	8008c2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e1e9      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c2e:	4b41      	ldr	r3, [pc, #260]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	493d      	ldr	r1, [pc, #244]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c42:	e040      	b.n	8008cc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d023      	beq.n	8008c94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c4c:	4b39      	ldr	r3, [pc, #228]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a38      	ldr	r2, [pc, #224]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c52:	f043 0301 	orr.w	r3, r3, #1
 8008c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c58:	f7fd feb0 	bl	80069bc <HAL_GetTick>
 8008c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c5e:	e008      	b.n	8008c72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c60:	f7fd feac 	bl	80069bc <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e1c7      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c72:	4b30      	ldr	r3, [pc, #192]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0f0      	beq.n	8008c60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c7e:	4b2d      	ldr	r3, [pc, #180]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	4929      	ldr	r1, [pc, #164]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]
 8008c92:	e018      	b.n	8008cc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c94:	4b27      	ldr	r3, [pc, #156]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a26      	ldr	r2, [pc, #152]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008c9a:	f023 0301 	bic.w	r3, r3, #1
 8008c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca0:	f7fd fe8c 	bl	80069bc <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ca8:	f7fd fe88 	bl	80069bc <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e1a3      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cba:	4b1e      	ldr	r3, [pc, #120]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1f0      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0308 	and.w	r3, r3, #8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d038      	beq.n	8008d44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d019      	beq.n	8008d0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cda:	4b16      	ldr	r3, [pc, #88]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cde:	4a15      	ldr	r2, [pc, #84]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008ce0:	f043 0301 	orr.w	r3, r3, #1
 8008ce4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce6:	f7fd fe69 	bl	80069bc <HAL_GetTick>
 8008cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cec:	e008      	b.n	8008d00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cee:	f7fd fe65 	bl	80069bc <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e180      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d00:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0f0      	beq.n	8008cee <HAL_RCC_OscConfig+0x23a>
 8008d0c:	e01a      	b.n	8008d44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d0e:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d12:	4a08      	ldr	r2, [pc, #32]	; (8008d34 <HAL_RCC_OscConfig+0x280>)
 8008d14:	f023 0301 	bic.w	r3, r3, #1
 8008d18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d1a:	f7fd fe4f 	bl	80069bc <HAL_GetTick>
 8008d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d20:	e00a      	b.n	8008d38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d22:	f7fd fe4b 	bl	80069bc <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d903      	bls.n	8008d38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e166      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
 8008d34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d38:	4b92      	ldr	r3, [pc, #584]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1ee      	bne.n	8008d22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80a4 	beq.w	8008e9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d52:	4b8c      	ldr	r3, [pc, #560]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10d      	bne.n	8008d7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d5e:	4b89      	ldr	r3, [pc, #548]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	4a88      	ldr	r2, [pc, #544]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d68:	6413      	str	r3, [r2, #64]	; 0x40
 8008d6a:	4b86      	ldr	r3, [pc, #536]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d72:	60bb      	str	r3, [r7, #8]
 8008d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d76:	2301      	movs	r3, #1
 8008d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d7a:	4b83      	ldr	r3, [pc, #524]	; (8008f88 <HAL_RCC_OscConfig+0x4d4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d118      	bne.n	8008db8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008d86:	4b80      	ldr	r3, [pc, #512]	; (8008f88 <HAL_RCC_OscConfig+0x4d4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a7f      	ldr	r2, [pc, #508]	; (8008f88 <HAL_RCC_OscConfig+0x4d4>)
 8008d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d92:	f7fd fe13 	bl	80069bc <HAL_GetTick>
 8008d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d98:	e008      	b.n	8008dac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d9a:	f7fd fe0f 	bl	80069bc <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	2b64      	cmp	r3, #100	; 0x64
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e12a      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dac:	4b76      	ldr	r3, [pc, #472]	; (8008f88 <HAL_RCC_OscConfig+0x4d4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0f0      	beq.n	8008d9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d106      	bne.n	8008dce <HAL_RCC_OscConfig+0x31a>
 8008dc0:	4b70      	ldr	r3, [pc, #448]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc4:	4a6f      	ldr	r2, [pc, #444]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	6713      	str	r3, [r2, #112]	; 0x70
 8008dcc:	e02d      	b.n	8008e2a <HAL_RCC_OscConfig+0x376>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10c      	bne.n	8008df0 <HAL_RCC_OscConfig+0x33c>
 8008dd6:	4b6b      	ldr	r3, [pc, #428]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dda:	4a6a      	ldr	r2, [pc, #424]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008ddc:	f023 0301 	bic.w	r3, r3, #1
 8008de0:	6713      	str	r3, [r2, #112]	; 0x70
 8008de2:	4b68      	ldr	r3, [pc, #416]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de6:	4a67      	ldr	r2, [pc, #412]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008de8:	f023 0304 	bic.w	r3, r3, #4
 8008dec:	6713      	str	r3, [r2, #112]	; 0x70
 8008dee:	e01c      	b.n	8008e2a <HAL_RCC_OscConfig+0x376>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	2b05      	cmp	r3, #5
 8008df6:	d10c      	bne.n	8008e12 <HAL_RCC_OscConfig+0x35e>
 8008df8:	4b62      	ldr	r3, [pc, #392]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	4a61      	ldr	r2, [pc, #388]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008dfe:	f043 0304 	orr.w	r3, r3, #4
 8008e02:	6713      	str	r3, [r2, #112]	; 0x70
 8008e04:	4b5f      	ldr	r3, [pc, #380]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e08:	4a5e      	ldr	r2, [pc, #376]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e10:	e00b      	b.n	8008e2a <HAL_RCC_OscConfig+0x376>
 8008e12:	4b5c      	ldr	r3, [pc, #368]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	4a5b      	ldr	r2, [pc, #364]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e18:	f023 0301 	bic.w	r3, r3, #1
 8008e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e1e:	4b59      	ldr	r3, [pc, #356]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	4a58      	ldr	r2, [pc, #352]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e24:	f023 0304 	bic.w	r3, r3, #4
 8008e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d015      	beq.n	8008e5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e32:	f7fd fdc3 	bl	80069bc <HAL_GetTick>
 8008e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e38:	e00a      	b.n	8008e50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e3a:	f7fd fdbf 	bl	80069bc <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e0d8      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e50:	4b4c      	ldr	r3, [pc, #304]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0ee      	beq.n	8008e3a <HAL_RCC_OscConfig+0x386>
 8008e5c:	e014      	b.n	8008e88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5e:	f7fd fdad 	bl	80069bc <HAL_GetTick>
 8008e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e64:	e00a      	b.n	8008e7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e66:	f7fd fda9 	bl	80069bc <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d901      	bls.n	8008e7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e0c2      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e7c:	4b41      	ldr	r3, [pc, #260]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1ee      	bne.n	8008e66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d105      	bne.n	8008e9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e8e:	4b3d      	ldr	r3, [pc, #244]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	4a3c      	ldr	r2, [pc, #240]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 80ae 	beq.w	8009000 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ea4:	4b37      	ldr	r3, [pc, #220]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 030c 	and.w	r3, r3, #12
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d06d      	beq.n	8008f8c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d14b      	bne.n	8008f50 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eb8:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a31      	ldr	r2, [pc, #196]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec4:	f7fd fd7a 	bl	80069bc <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ecc:	f7fd fd76 	bl	80069bc <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e091      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ede:	4b29      	ldr	r3, [pc, #164]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f0      	bne.n	8008ecc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	69da      	ldr	r2, [r3, #28]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	019b      	lsls	r3, r3, #6
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	3b01      	subs	r3, #1
 8008f04:	041b      	lsls	r3, r3, #16
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	061b      	lsls	r3, r3, #24
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f14:	071b      	lsls	r3, r3, #28
 8008f16:	491b      	ldr	r1, [pc, #108]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f1c:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a18      	ldr	r2, [pc, #96]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f28:	f7fd fd48 	bl	80069bc <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f30:	f7fd fd44 	bl	80069bc <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e05f      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f42:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0f0      	beq.n	8008f30 <HAL_RCC_OscConfig+0x47c>
 8008f4e:	e057      	b.n	8009000 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f50:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a0b      	ldr	r2, [pc, #44]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5c:	f7fd fd2e 	bl	80069bc <HAL_GetTick>
 8008f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f62:	e008      	b.n	8008f76 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f64:	f7fd fd2a 	bl	80069bc <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d901      	bls.n	8008f76 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e045      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f76:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <HAL_RCC_OscConfig+0x4d0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f0      	bne.n	8008f64 <HAL_RCC_OscConfig+0x4b0>
 8008f82:	e03d      	b.n	8009000 <HAL_RCC_OscConfig+0x54c>
 8008f84:	40023800 	.word	0x40023800
 8008f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008f8c:	4b1f      	ldr	r3, [pc, #124]	; (800900c <HAL_RCC_OscConfig+0x558>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d030      	beq.n	8008ffc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d129      	bne.n	8008ffc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d122      	bne.n	8008ffc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008fc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d119      	bne.n	8008ffc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d10f      	bne.n	8008ffc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d107      	bne.n	8008ffc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d001      	beq.n	8009000 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e000      	b.n	8009002 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	40023800 	.word	0x40023800

08009010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e0d0      	b.n	80091ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009028:	4b6a      	ldr	r3, [pc, #424]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d910      	bls.n	8009058 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009036:	4b67      	ldr	r3, [pc, #412]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f023 020f 	bic.w	r2, r3, #15
 800903e:	4965      	ldr	r1, [pc, #404]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	4313      	orrs	r3, r2
 8009044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009046:	4b63      	ldr	r3, [pc, #396]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	429a      	cmp	r2, r3
 8009052:	d001      	beq.n	8009058 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e0b8      	b.n	80091ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d020      	beq.n	80090a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009070:	4b59      	ldr	r3, [pc, #356]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	4a58      	ldr	r2, [pc, #352]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 8009076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800907a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009088:	4b53      	ldr	r3, [pc, #332]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	4a52      	ldr	r2, [pc, #328]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 800908e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009092:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009094:	4b50      	ldr	r3, [pc, #320]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	494d      	ldr	r1, [pc, #308]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d040      	beq.n	8009134 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d107      	bne.n	80090ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ba:	4b47      	ldr	r3, [pc, #284]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d115      	bne.n	80090f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e07f      	b.n	80091ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d107      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090d2:	4b41      	ldr	r3, [pc, #260]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d109      	bne.n	80090f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e073      	b.n	80091ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e2:	4b3d      	ldr	r3, [pc, #244]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e06b      	b.n	80091ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090f2:	4b39      	ldr	r3, [pc, #228]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f023 0203 	bic.w	r2, r3, #3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	4936      	ldr	r1, [pc, #216]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 8009100:	4313      	orrs	r3, r2
 8009102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009104:	f7fd fc5a 	bl	80069bc <HAL_GetTick>
 8009108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800910a:	e00a      	b.n	8009122 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800910c:	f7fd fc56 	bl	80069bc <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	f241 3288 	movw	r2, #5000	; 0x1388
 800911a:	4293      	cmp	r3, r2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e053      	b.n	80091ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009122:	4b2d      	ldr	r3, [pc, #180]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 020c 	and.w	r2, r3, #12
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	429a      	cmp	r2, r3
 8009132:	d1eb      	bne.n	800910c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d210      	bcs.n	8009164 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f023 020f 	bic.w	r2, r3, #15
 800914a:	4922      	ldr	r1, [pc, #136]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	4313      	orrs	r3, r2
 8009150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009152:	4b20      	ldr	r3, [pc, #128]	; (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 030f 	and.w	r3, r3, #15
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d001      	beq.n	8009164 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e032      	b.n	80091ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0304 	and.w	r3, r3, #4
 800916c:	2b00      	cmp	r3, #0
 800916e:	d008      	beq.n	8009182 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009170:	4b19      	ldr	r3, [pc, #100]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	4916      	ldr	r1, [pc, #88]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 800917e:	4313      	orrs	r3, r2
 8009180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	2b00      	cmp	r3, #0
 800918c:	d009      	beq.n	80091a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800918e:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	490e      	ldr	r1, [pc, #56]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80091a2:	f000 f821 	bl	80091e8 <HAL_RCC_GetSysClockFreq>
 80091a6:	4602      	mov	r2, r0
 80091a8:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	091b      	lsrs	r3, r3, #4
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	490a      	ldr	r1, [pc, #40]	; (80091dc <HAL_RCC_ClockConfig+0x1cc>)
 80091b4:	5ccb      	ldrb	r3, [r1, r3]
 80091b6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ba:	4a09      	ldr	r2, [pc, #36]	; (80091e0 <HAL_RCC_ClockConfig+0x1d0>)
 80091bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80091be:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <HAL_RCC_ClockConfig+0x1d4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fa faa6 	bl	8003714 <HAL_InitTick>

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	40023c00 	.word	0x40023c00
 80091d8:	40023800 	.word	0x40023800
 80091dc:	0802128c 	.word	0x0802128c
 80091e0:	20000008 	.word	0x20000008
 80091e4:	2000000c 	.word	0x2000000c

080091e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091e8:	b5b0      	push	{r4, r5, r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80091ee:	2100      	movs	r1, #0
 80091f0:	6079      	str	r1, [r7, #4]
 80091f2:	2100      	movs	r1, #0
 80091f4:	60f9      	str	r1, [r7, #12]
 80091f6:	2100      	movs	r1, #0
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80091fa:	2100      	movs	r1, #0
 80091fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091fe:	4952      	ldr	r1, [pc, #328]	; (8009348 <HAL_RCC_GetSysClockFreq+0x160>)
 8009200:	6889      	ldr	r1, [r1, #8]
 8009202:	f001 010c 	and.w	r1, r1, #12
 8009206:	2908      	cmp	r1, #8
 8009208:	d00d      	beq.n	8009226 <HAL_RCC_GetSysClockFreq+0x3e>
 800920a:	2908      	cmp	r1, #8
 800920c:	f200 8094 	bhi.w	8009338 <HAL_RCC_GetSysClockFreq+0x150>
 8009210:	2900      	cmp	r1, #0
 8009212:	d002      	beq.n	800921a <HAL_RCC_GetSysClockFreq+0x32>
 8009214:	2904      	cmp	r1, #4
 8009216:	d003      	beq.n	8009220 <HAL_RCC_GetSysClockFreq+0x38>
 8009218:	e08e      	b.n	8009338 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800921a:	4b4c      	ldr	r3, [pc, #304]	; (800934c <HAL_RCC_GetSysClockFreq+0x164>)
 800921c:	60bb      	str	r3, [r7, #8]
      break;
 800921e:	e08e      	b.n	800933e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009220:	4b4b      	ldr	r3, [pc, #300]	; (8009350 <HAL_RCC_GetSysClockFreq+0x168>)
 8009222:	60bb      	str	r3, [r7, #8]
      break;
 8009224:	e08b      	b.n	800933e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009226:	4948      	ldr	r1, [pc, #288]	; (8009348 <HAL_RCC_GetSysClockFreq+0x160>)
 8009228:	6849      	ldr	r1, [r1, #4]
 800922a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800922e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009230:	4945      	ldr	r1, [pc, #276]	; (8009348 <HAL_RCC_GetSysClockFreq+0x160>)
 8009232:	6849      	ldr	r1, [r1, #4]
 8009234:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009238:	2900      	cmp	r1, #0
 800923a:	d024      	beq.n	8009286 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800923c:	4942      	ldr	r1, [pc, #264]	; (8009348 <HAL_RCC_GetSysClockFreq+0x160>)
 800923e:	6849      	ldr	r1, [r1, #4]
 8009240:	0989      	lsrs	r1, r1, #6
 8009242:	4608      	mov	r0, r1
 8009244:	f04f 0100 	mov.w	r1, #0
 8009248:	f240 14ff 	movw	r4, #511	; 0x1ff
 800924c:	f04f 0500 	mov.w	r5, #0
 8009250:	ea00 0204 	and.w	r2, r0, r4
 8009254:	ea01 0305 	and.w	r3, r1, r5
 8009258:	493d      	ldr	r1, [pc, #244]	; (8009350 <HAL_RCC_GetSysClockFreq+0x168>)
 800925a:	fb01 f003 	mul.w	r0, r1, r3
 800925e:	2100      	movs	r1, #0
 8009260:	fb01 f102 	mul.w	r1, r1, r2
 8009264:	1844      	adds	r4, r0, r1
 8009266:	493a      	ldr	r1, [pc, #232]	; (8009350 <HAL_RCC_GetSysClockFreq+0x168>)
 8009268:	fba2 0101 	umull	r0, r1, r2, r1
 800926c:	1863      	adds	r3, r4, r1
 800926e:	4619      	mov	r1, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	461a      	mov	r2, r3
 8009274:	f04f 0300 	mov.w	r3, #0
 8009278:	f7f7 f89a 	bl	80003b0 <__aeabi_uldivmod>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4613      	mov	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	e04a      	b.n	800931c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009286:	4b30      	ldr	r3, [pc, #192]	; (8009348 <HAL_RCC_GetSysClockFreq+0x160>)
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	099b      	lsrs	r3, r3, #6
 800928c:	461a      	mov	r2, r3
 800928e:	f04f 0300 	mov.w	r3, #0
 8009292:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009296:	f04f 0100 	mov.w	r1, #0
 800929a:	ea02 0400 	and.w	r4, r2, r0
 800929e:	ea03 0501 	and.w	r5, r3, r1
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f04f 0200 	mov.w	r2, #0
 80092aa:	f04f 0300 	mov.w	r3, #0
 80092ae:	014b      	lsls	r3, r1, #5
 80092b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80092b4:	0142      	lsls	r2, r0, #5
 80092b6:	4610      	mov	r0, r2
 80092b8:	4619      	mov	r1, r3
 80092ba:	1b00      	subs	r0, r0, r4
 80092bc:	eb61 0105 	sbc.w	r1, r1, r5
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	f04f 0300 	mov.w	r3, #0
 80092c8:	018b      	lsls	r3, r1, #6
 80092ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80092ce:	0182      	lsls	r2, r0, #6
 80092d0:	1a12      	subs	r2, r2, r0
 80092d2:	eb63 0301 	sbc.w	r3, r3, r1
 80092d6:	f04f 0000 	mov.w	r0, #0
 80092da:	f04f 0100 	mov.w	r1, #0
 80092de:	00d9      	lsls	r1, r3, #3
 80092e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092e4:	00d0      	lsls	r0, r2, #3
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	1912      	adds	r2, r2, r4
 80092ec:	eb45 0303 	adc.w	r3, r5, r3
 80092f0:	f04f 0000 	mov.w	r0, #0
 80092f4:	f04f 0100 	mov.w	r1, #0
 80092f8:	0299      	lsls	r1, r3, #10
 80092fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80092fe:	0290      	lsls	r0, r2, #10
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4610      	mov	r0, r2
 8009306:	4619      	mov	r1, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	461a      	mov	r2, r3
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	f7f7 f84e 	bl	80003b0 <__aeabi_uldivmod>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4613      	mov	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <HAL_RCC_GetSysClockFreq+0x160>)
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	0c1b      	lsrs	r3, r3, #16
 8009322:	f003 0303 	and.w	r3, r3, #3
 8009326:	3301      	adds	r3, #1
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	fbb2 f3f3 	udiv	r3, r2, r3
 8009334:	60bb      	str	r3, [r7, #8]
      break;
 8009336:	e002      	b.n	800933e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009338:	4b04      	ldr	r3, [pc, #16]	; (800934c <HAL_RCC_GetSysClockFreq+0x164>)
 800933a:	60bb      	str	r3, [r7, #8]
      break;
 800933c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800933e:	68bb      	ldr	r3, [r7, #8]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bdb0      	pop	{r4, r5, r7, pc}
 8009348:	40023800 	.word	0x40023800
 800934c:	00f42400 	.word	0x00f42400
 8009350:	017d7840 	.word	0x017d7840

08009354 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009358:	4b03      	ldr	r3, [pc, #12]	; (8009368 <HAL_RCC_GetHCLKFreq+0x14>)
 800935a:	681b      	ldr	r3, [r3, #0]
}
 800935c:	4618      	mov	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20000008 	.word	0x20000008

0800936c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009370:	f7ff fff0 	bl	8009354 <HAL_RCC_GetHCLKFreq>
 8009374:	4602      	mov	r2, r0
 8009376:	4b05      	ldr	r3, [pc, #20]	; (800938c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	0a9b      	lsrs	r3, r3, #10
 800937c:	f003 0307 	and.w	r3, r3, #7
 8009380:	4903      	ldr	r1, [pc, #12]	; (8009390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009382:	5ccb      	ldrb	r3, [r1, r3]
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009388:	4618      	mov	r0, r3
 800938a:	bd80      	pop	{r7, pc}
 800938c:	40023800 	.word	0x40023800
 8009390:	0802129c 	.word	0x0802129c

08009394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009398:	f7ff ffdc 	bl	8009354 <HAL_RCC_GetHCLKFreq>
 800939c:	4602      	mov	r2, r0
 800939e:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	0b5b      	lsrs	r3, r3, #13
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	4903      	ldr	r1, [pc, #12]	; (80093b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093aa:	5ccb      	ldrb	r3, [r1, r3]
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40023800 	.word	0x40023800
 80093b8:	0802129c 	.word	0x0802129c

080093bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	220f      	movs	r2, #15
 80093ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093cc:	4b12      	ldr	r3, [pc, #72]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 0203 	and.w	r2, r3, #3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093d8:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80093f0:	4b09      	ldr	r3, [pc, #36]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	08db      	lsrs	r3, r3, #3
 80093f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093fe:	4b07      	ldr	r3, [pc, #28]	; (800941c <HAL_RCC_GetClockConfig+0x60>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 020f 	and.w	r2, r3, #15
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	601a      	str	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40023800 	.word	0x40023800
 800941c:	40023c00 	.word	0x40023c00

08009420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	d012      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009448:	4b69      	ldr	r3, [pc, #420]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	4a68      	ldr	r2, [pc, #416]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800944e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009452:	6093      	str	r3, [r2, #8]
 8009454:	4b66      	ldr	r3, [pc, #408]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945c:	4964      	ldr	r1, [pc, #400]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800945e:	4313      	orrs	r3, r2
 8009460:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800946a:	2301      	movs	r3, #1
 800946c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d017      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800947a:	4b5d      	ldr	r3, [pc, #372]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009488:	4959      	ldr	r1, [pc, #356]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948a:	4313      	orrs	r3, r2
 800948c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009498:	d101      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800949a:	2301      	movs	r3, #1
 800949c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80094a6:	2301      	movs	r3, #1
 80094a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d017      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80094b6:	4b4e      	ldr	r3, [pc, #312]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c4:	494a      	ldr	r1, [pc, #296]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094d4:	d101      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80094e2:	2301      	movs	r3, #1
 80094e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80094f2:	2301      	movs	r3, #1
 80094f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 808b 	beq.w	800961a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009504:	4b3a      	ldr	r3, [pc, #232]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	4a39      	ldr	r2, [pc, #228]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800950a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800950e:	6413      	str	r3, [r2, #64]	; 0x40
 8009510:	4b37      	ldr	r3, [pc, #220]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009518:	60bb      	str	r3, [r7, #8]
 800951a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800951c:	4b35      	ldr	r3, [pc, #212]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a34      	ldr	r2, [pc, #208]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009528:	f7fd fa48 	bl	80069bc <HAL_GetTick>
 800952c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800952e:	e008      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009530:	f7fd fa44 	bl	80069bc <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	2b64      	cmp	r3, #100	; 0x64
 800953c:	d901      	bls.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e38f      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009542:	4b2c      	ldr	r3, [pc, #176]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0f0      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800954e:	4b28      	ldr	r3, [pc, #160]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009556:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d035      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	429a      	cmp	r2, r3
 800956a:	d02e      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800956c:	4b20      	ldr	r3, [pc, #128]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800956e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009574:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009576:	4b1e      	ldr	r3, [pc, #120]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957a:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800957c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009580:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009582:	4b1b      	ldr	r3, [pc, #108]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	4a1a      	ldr	r2, [pc, #104]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800958c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800958e:	4a18      	ldr	r2, [pc, #96]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009594:	4b16      	ldr	r3, [pc, #88]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b01      	cmp	r3, #1
 800959e:	d114      	bne.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a0:	f7fd fa0c 	bl	80069bc <HAL_GetTick>
 80095a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095a6:	e00a      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095a8:	f7fd fa08 	bl	80069bc <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d901      	bls.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e351      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095be:	4b0c      	ldr	r3, [pc, #48]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0ee      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095d6:	d111      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80095d8:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80095e4:	4b04      	ldr	r3, [pc, #16]	; (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80095e6:	400b      	ands	r3, r1
 80095e8:	4901      	ldr	r1, [pc, #4]	; (80095f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	608b      	str	r3, [r1, #8]
 80095ee:	e00b      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80095f0:	40023800 	.word	0x40023800
 80095f4:	40007000 	.word	0x40007000
 80095f8:	0ffffcff 	.word	0x0ffffcff
 80095fc:	4bb3      	ldr	r3, [pc, #716]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	4ab2      	ldr	r2, [pc, #712]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009602:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009606:	6093      	str	r3, [r2, #8]
 8009608:	4bb0      	ldr	r3, [pc, #704]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800960a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009614:	49ad      	ldr	r1, [pc, #692]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009616:	4313      	orrs	r3, r2
 8009618:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0310 	and.w	r3, r3, #16
 8009622:	2b00      	cmp	r3, #0
 8009624:	d010      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009626:	4ba9      	ldr	r3, [pc, #676]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800962c:	4aa7      	ldr	r2, [pc, #668]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800962e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009632:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009636:	4ba5      	ldr	r3, [pc, #660]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009638:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	49a2      	ldr	r1, [pc, #648]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009642:	4313      	orrs	r3, r2
 8009644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00a      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009654:	4b9d      	ldr	r3, [pc, #628]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800965a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009662:	499a      	ldr	r1, [pc, #616]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009664:	4313      	orrs	r3, r2
 8009666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009676:	4b95      	ldr	r3, [pc, #596]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800967c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009684:	4991      	ldr	r1, [pc, #580]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009686:	4313      	orrs	r3, r2
 8009688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009698:	4b8c      	ldr	r3, [pc, #560]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800969a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a6:	4989      	ldr	r1, [pc, #548]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80096a8:	4313      	orrs	r3, r2
 80096aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096ba:	4b84      	ldr	r3, [pc, #528]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80096bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c8:	4980      	ldr	r1, [pc, #512]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00a      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096dc:	4b7b      	ldr	r3, [pc, #492]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80096de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e2:	f023 0203 	bic.w	r2, r3, #3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ea:	4978      	ldr	r1, [pc, #480]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096fe:	4b73      	ldr	r3, [pc, #460]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009704:	f023 020c 	bic.w	r2, r3, #12
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800970c:	496f      	ldr	r1, [pc, #444]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800970e:	4313      	orrs	r3, r2
 8009710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009720:	4b6a      	ldr	r3, [pc, #424]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009726:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972e:	4967      	ldr	r1, [pc, #412]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009730:	4313      	orrs	r3, r2
 8009732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00a      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009742:	4b62      	ldr	r3, [pc, #392]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009748:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009750:	495e      	ldr	r1, [pc, #376]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009752:	4313      	orrs	r3, r2
 8009754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00a      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009764:	4b59      	ldr	r3, [pc, #356]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009772:	4956      	ldr	r1, [pc, #344]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009774:	4313      	orrs	r3, r2
 8009776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009786:	4b51      	ldr	r3, [pc, #324]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800978c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009794:	494d      	ldr	r1, [pc, #308]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009796:	4313      	orrs	r3, r2
 8009798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00a      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80097a8:	4b48      	ldr	r3, [pc, #288]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80097aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b6:	4945      	ldr	r1, [pc, #276]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80097b8:	4313      	orrs	r3, r2
 80097ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80097ca:	4b40      	ldr	r3, [pc, #256]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80097cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d8:	493c      	ldr	r1, [pc, #240]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00a      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097ec:	4b37      	ldr	r3, [pc, #220]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80097ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097fa:	4934      	ldr	r1, [pc, #208]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800980a:	2b00      	cmp	r3, #0
 800980c:	d011      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800980e:	4b2f      	ldr	r3, [pc, #188]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009814:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981c:	492b      	ldr	r1, [pc, #172]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800981e:	4313      	orrs	r3, r2
 8009820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800982c:	d101      	bne.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800982e:	2301      	movs	r3, #1
 8009830:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0308 	and.w	r3, r3, #8
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800983e:	2301      	movs	r3, #1
 8009840:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00a      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800984e:	4b1f      	ldr	r3, [pc, #124]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009854:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985c:	491b      	ldr	r1, [pc, #108]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800985e:	4313      	orrs	r3, r2
 8009860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009870:	4b16      	ldr	r3, [pc, #88]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009876:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009880:	4912      	ldr	r1, [pc, #72]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009882:	4313      	orrs	r3, r2
 8009884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009894:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800989a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098a4:	4909      	ldr	r1, [pc, #36]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00f      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098b8:	4b04      	ldr	r3, [pc, #16]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80098ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c8:	e002      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80098ca:	bf00      	nop
 80098cc:	40023800 	.word	0x40023800
 80098d0:	4986      	ldr	r1, [pc, #536]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80098e4:	4b81      	ldr	r3, [pc, #516]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80098e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f4:	497d      	ldr	r1, [pc, #500]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d006      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80d6 	beq.w	8009abc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009910:	4b76      	ldr	r3, [pc, #472]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a75      	ldr	r2, [pc, #468]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800991a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800991c:	f7fd f84e 	bl	80069bc <HAL_GetTick>
 8009920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009922:	e008      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009924:	f7fd f84a 	bl	80069bc <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b64      	cmp	r3, #100	; 0x64
 8009930:	d901      	bls.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e195      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009936:	4b6d      	ldr	r3, [pc, #436]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f0      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d021      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009952:	2b00      	cmp	r3, #0
 8009954:	d11d      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009956:	4b65      	ldr	r3, [pc, #404]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800995c:	0c1b      	lsrs	r3, r3, #16
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009964:	4b61      	ldr	r3, [pc, #388]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800996a:	0e1b      	lsrs	r3, r3, #24
 800996c:	f003 030f 	and.w	r3, r3, #15
 8009970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	019a      	lsls	r2, r3, #6
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	041b      	lsls	r3, r3, #16
 800997c:	431a      	orrs	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	061b      	lsls	r3, r3, #24
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	071b      	lsls	r3, r3, #28
 800998a:	4958      	ldr	r1, [pc, #352]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800998c:	4313      	orrs	r3, r2
 800998e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d004      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099a6:	d00a      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d02e      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099bc:	d129      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80099be:	4b4b      	ldr	r3, [pc, #300]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80099c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099c4:	0c1b      	lsrs	r3, r3, #16
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099cc:	4b47      	ldr	r3, [pc, #284]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80099ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d2:	0f1b      	lsrs	r3, r3, #28
 80099d4:	f003 0307 	and.w	r3, r3, #7
 80099d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	019a      	lsls	r2, r3, #6
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	041b      	lsls	r3, r3, #16
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	061b      	lsls	r3, r3, #24
 80099ec:	431a      	orrs	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	071b      	lsls	r3, r3, #28
 80099f2:	493e      	ldr	r1, [pc, #248]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80099fa:	4b3c      	ldr	r3, [pc, #240]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80099fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a00:	f023 021f 	bic.w	r2, r3, #31
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	4938      	ldr	r1, [pc, #224]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d01d      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009a1e:	4b33      	ldr	r3, [pc, #204]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a24:	0e1b      	lsrs	r3, r3, #24
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009a2c:	4b2f      	ldr	r3, [pc, #188]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a32:	0f1b      	lsrs	r3, r3, #28
 8009a34:	f003 0307 	and.w	r3, r3, #7
 8009a38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	019a      	lsls	r2, r3, #6
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	041b      	lsls	r3, r3, #16
 8009a46:	431a      	orrs	r2, r3
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	061b      	lsls	r3, r3, #24
 8009a4c:	431a      	orrs	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	071b      	lsls	r3, r3, #28
 8009a52:	4926      	ldr	r1, [pc, #152]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d011      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	019a      	lsls	r2, r3, #6
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	041b      	lsls	r3, r3, #16
 8009a72:	431a      	orrs	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	061b      	lsls	r3, r3, #24
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	071b      	lsls	r3, r3, #28
 8009a82:	491a      	ldr	r1, [pc, #104]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a8a:	4b18      	ldr	r3, [pc, #96]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a17      	ldr	r2, [pc, #92]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009a90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a96:	f7fc ff91 	bl	80069bc <HAL_GetTick>
 8009a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a9e:	f7fc ff8d 	bl	80069bc <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	2b64      	cmp	r3, #100	; 0x64
 8009aaa:	d901      	bls.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e0d8      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ab0:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0f0      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	f040 80ce 	bne.w	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009ac4:	4b09      	ldr	r3, [pc, #36]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a08      	ldr	r2, [pc, #32]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ad0:	f7fc ff74 	bl	80069bc <HAL_GetTick>
 8009ad4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ad6:	e00b      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ad8:	f7fc ff70 	bl	80069bc <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	2b64      	cmp	r3, #100	; 0x64
 8009ae4:	d904      	bls.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e0bb      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009aea:	bf00      	nop
 8009aec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009af0:	4b5e      	ldr	r3, [pc, #376]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009afc:	d0ec      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d02e      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d12a      	bne.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009b26:	4b51      	ldr	r3, [pc, #324]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b2c:	0c1b      	lsrs	r3, r3, #16
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b34:	4b4d      	ldr	r3, [pc, #308]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3a:	0f1b      	lsrs	r3, r3, #28
 8009b3c:	f003 0307 	and.w	r3, r3, #7
 8009b40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	019a      	lsls	r2, r3, #6
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	041b      	lsls	r3, r3, #16
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	061b      	lsls	r3, r3, #24
 8009b54:	431a      	orrs	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	071b      	lsls	r3, r3, #28
 8009b5a:	4944      	ldr	r1, [pc, #272]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009b62:	4b42      	ldr	r3, [pc, #264]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	3b01      	subs	r3, #1
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	493d      	ldr	r1, [pc, #244]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d022      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b90:	d11d      	bne.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b92:	4b36      	ldr	r3, [pc, #216]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b98:	0e1b      	lsrs	r3, r3, #24
 8009b9a:	f003 030f 	and.w	r3, r3, #15
 8009b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ba0:	4b32      	ldr	r3, [pc, #200]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba6:	0f1b      	lsrs	r3, r3, #28
 8009ba8:	f003 0307 	and.w	r3, r3, #7
 8009bac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	019a      	lsls	r2, r3, #6
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	041b      	lsls	r3, r3, #16
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	061b      	lsls	r3, r3, #24
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	071b      	lsls	r3, r3, #28
 8009bc6:	4929      	ldr	r1, [pc, #164]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0308 	and.w	r3, r3, #8
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d028      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be0:	0e1b      	lsrs	r3, r3, #24
 8009be2:	f003 030f 	and.w	r3, r3, #15
 8009be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009be8:	4b20      	ldr	r3, [pc, #128]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	f003 0303 	and.w	r3, r3, #3
 8009bf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	019a      	lsls	r2, r3, #6
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	041b      	lsls	r3, r3, #16
 8009c00:	431a      	orrs	r2, r3
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	061b      	lsls	r3, r3, #24
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	071b      	lsls	r3, r3, #28
 8009c0e:	4917      	ldr	r1, [pc, #92]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009c16:	4b15      	ldr	r3, [pc, #84]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	4911      	ldr	r1, [pc, #68]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a0e      	ldr	r2, [pc, #56]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c38:	f7fc fec0 	bl	80069bc <HAL_GetTick>
 8009c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c3e:	e008      	b.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c40:	f7fc febc 	bl	80069bc <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	2b64      	cmp	r3, #100	; 0x64
 8009c4c:	d901      	bls.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e007      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c5e:	d1ef      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	40023800 	.word	0x40023800

08009c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c8e:	f040 80a3 	bne.w	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009c92:	4bac      	ldr	r3, [pc, #688]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c98:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009ca0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ca8:	f000 808a 	beq.w	8009dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cb2:	f200 8093 	bhi.w	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cbc:	d07d      	beq.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cc4:	f200 808a 	bhi.w	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d004      	beq.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cd4:	d039      	beq.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009cd6:	e081      	b.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009cd8:	4b9a      	ldr	r3, [pc, #616]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d108      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009ce4:	4b97      	ldr	r3, [pc, #604]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cec:	4a96      	ldr	r2, [pc, #600]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	e007      	b.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009cf6:	4b93      	ldr	r3, [pc, #588]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cfe:	4a93      	ldr	r2, [pc, #588]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d04:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009d06:	4b8f      	ldr	r3, [pc, #572]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0c:	0e1b      	lsrs	r3, r3, #24
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009d14:	4b8b      	ldr	r3, [pc, #556]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1a:	099b      	lsrs	r3, r3, #6
 8009d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	fb02 f203 	mul.w	r2, r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009d2e:	4b85      	ldr	r3, [pc, #532]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d34:	0a1b      	lsrs	r3, r3, #8
 8009d36:	f003 031f 	and.w	r3, r3, #31
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d46:	617b      	str	r3, [r7, #20]
        break;
 8009d48:	e049      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009d4a:	4b7e      	ldr	r3, [pc, #504]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d108      	bne.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d56:	4b7b      	ldr	r3, [pc, #492]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d5e:	4a7a      	ldr	r2, [pc, #488]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d64:	613b      	str	r3, [r7, #16]
 8009d66:	e007      	b.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009d68:	4b76      	ldr	r3, [pc, #472]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d70:	4a76      	ldr	r2, [pc, #472]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d76:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009d78:	4b72      	ldr	r3, [pc, #456]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d7e:	0e1b      	lsrs	r3, r3, #24
 8009d80:	f003 030f 	and.w	r3, r3, #15
 8009d84:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009d86:	4b6f      	ldr	r3, [pc, #444]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d8c:	099b      	lsrs	r3, r3, #6
 8009d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	fb02 f203 	mul.w	r2, r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009da0:	4b68      	ldr	r3, [pc, #416]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009da6:	f003 031f 	and.w	r3, r3, #31
 8009daa:	3301      	adds	r3, #1
 8009dac:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db6:	617b      	str	r3, [r7, #20]
        break;
 8009db8:	e011      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009dba:	4b65      	ldr	r3, [pc, #404]	; (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009dbc:	617b      	str	r3, [r7, #20]
        break;
 8009dbe:	e00e      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009dc0:	4b60      	ldr	r3, [pc, #384]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8009dcc:	4b5e      	ldr	r3, [pc, #376]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009dce:	617b      	str	r3, [r7, #20]
        break;
 8009dd0:	e005      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8009dd2:	4b5e      	ldr	r3, [pc, #376]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009dd4:	617b      	str	r3, [r7, #20]
        break;
 8009dd6:	e002      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8009dd8:	bf00      	nop
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8009ddc:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009de4:	f040 80a3 	bne.w	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009de8:	4b56      	ldr	r3, [pc, #344]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dee:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009df6:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dfe:	f000 808a 	beq.w	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009e08:	f200 8093 	bhi.w	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e12:	d07d      	beq.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e1a:	f200 808a 	bhi.w	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d004      	beq.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e2a:	d039      	beq.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009e2c:	e081      	b.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009e2e:	4b45      	ldr	r3, [pc, #276]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d108      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009e3a:	4b42      	ldr	r3, [pc, #264]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e42:	4a41      	ldr	r2, [pc, #260]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e48:	613b      	str	r3, [r7, #16]
 8009e4a:	e007      	b.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009e4c:	4b3d      	ldr	r3, [pc, #244]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e54:	4a3d      	ldr	r2, [pc, #244]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009e5c:	4b39      	ldr	r3, [pc, #228]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e62:	0e1b      	lsrs	r3, r3, #24
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009e6a:	4b36      	ldr	r3, [pc, #216]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e70:	099b      	lsrs	r3, r3, #6
 8009e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	fb02 f203 	mul.w	r2, r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e82:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009e84:	4b2f      	ldr	r3, [pc, #188]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e8a:	0a1b      	lsrs	r3, r3, #8
 8009e8c:	f003 031f 	and.w	r3, r3, #31
 8009e90:	3301      	adds	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9c:	617b      	str	r3, [r7, #20]
        break;
 8009e9e:	e049      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009ea0:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009eac:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eb4:	4a24      	ldr	r2, [pc, #144]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	e007      	b.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009ebe:	4b21      	ldr	r3, [pc, #132]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ec6:	4a21      	ldr	r2, [pc, #132]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ecc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009ece:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ed4:	0e1b      	lsrs	r3, r3, #24
 8009ed6:	f003 030f 	and.w	r3, r3, #15
 8009eda:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009edc:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ee2:	099b      	lsrs	r3, r3, #6
 8009ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	fb02 f203 	mul.w	r2, r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009ef6:	4b13      	ldr	r3, [pc, #76]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	3301      	adds	r3, #1
 8009f02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f0c:	617b      	str	r3, [r7, #20]
        break;
 8009f0e:	e011      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009f12:	617b      	str	r3, [r7, #20]
        break;
 8009f14:	e00e      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009f16:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009f24:	617b      	str	r3, [r7, #20]
        break;
 8009f26:	e005      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 8009f28:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009f2a:	617b      	str	r3, [r7, #20]
        break;
 8009f2c:	e002      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 8009f2e:	bf00      	nop
 8009f30:	e000      	b.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 8009f32:	bf00      	nop

  return frequency;
 8009f34:	697b      	ldr	r3, [r7, #20]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	371c      	adds	r7, #28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40023800 	.word	0x40023800
 8009f48:	00f42400 	.word	0x00f42400
 8009f4c:	017d7840 	.word	0x017d7840
 8009f50:	00bb8000 	.word	0x00bb8000

08009f54 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d904      	bls.n	8009f76 <HAL_SAI_InitProtocol+0x22>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	3b03      	subs	r3, #3
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d812      	bhi.n	8009f9a <HAL_SAI_InitProtocol+0x46>
 8009f74:	e008      	b.n	8009f88 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fac9 	bl	800a514 <SAI_InitI2S>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]
      break;
 8009f86:	e00b      	b.n	8009fa0 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	68b9      	ldr	r1, [r7, #8]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fb6e 	bl	800a670 <SAI_InitPCM>
 8009f94:	4603      	mov	r3, r0
 8009f96:	75fb      	strb	r3, [r7, #23]
      break;
 8009f98:	e002      	b.n	8009fa0 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f9e:	bf00      	nop
  }

  if (status == HAL_OK)
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d104      	bne.n	8009fb0 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 f808 	bl	8009fbc <HAL_SAI_Init>
 8009fac:	4603      	mov	r3, r0
 8009fae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e156      	b.n	800a288 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7f9 fb1c 	bl	800362c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fbed 	bl	800a7dc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	2b02      	cmp	r3, #2
 800a008:	d00c      	beq.n	800a024 <HAL_SAI_Init+0x68>
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d80d      	bhi.n	800a02a <HAL_SAI_Init+0x6e>
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <HAL_SAI_Init+0x5c>
 800a012:	2b01      	cmp	r3, #1
 800a014:	d003      	beq.n	800a01e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a016:	e008      	b.n	800a02a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	61fb      	str	r3, [r7, #28]
      break;
 800a01c:	e006      	b.n	800a02c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a01e:	2310      	movs	r3, #16
 800a020:	61fb      	str	r3, [r7, #28]
      break;
 800a022:	e003      	b.n	800a02c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a024:	2320      	movs	r3, #32
 800a026:	61fb      	str	r3, [r7, #28]
      break;
 800a028:	e000      	b.n	800a02c <HAL_SAI_Init+0x70>
      break;
 800a02a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d81e      	bhi.n	800a072 <HAL_SAI_Init+0xb6>
 800a034:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <HAL_SAI_Init+0x80>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a04d 	.word	0x0800a04d
 800a040:	0800a053 	.word	0x0800a053
 800a044:	0800a05b 	.word	0x0800a05b
 800a048:	0800a063 	.word	0x0800a063
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]
    }
    break;
 800a050:	e010      	b.n	800a074 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a056:	617b      	str	r3, [r7, #20]
    }
    break;
 800a058:	e00c      	b.n	800a074 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a05a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a05e:	617b      	str	r3, [r7, #20]
    }
    break;
 800a060:	e008      	b.n	800a074 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a066:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	f043 0301 	orr.w	r3, r3, #1
 800a06e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a070:	e000      	b.n	800a074 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a072:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a85      	ldr	r2, [pc, #532]	; (800a290 <HAL_SAI_Init+0x2d4>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <HAL_SAI_Init+0xcc>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a84      	ldr	r2, [pc, #528]	; (800a294 <HAL_SAI_Init+0x2d8>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d103      	bne.n	800a090 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a088:	4a83      	ldr	r2, [pc, #524]	; (800a298 <HAL_SAI_Init+0x2dc>)
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	e002      	b.n	800a096 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a090:	4a82      	ldr	r2, [pc, #520]	; (800a29c <HAL_SAI_Init+0x2e0>)
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d04c      	beq.n	800a138 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a7a      	ldr	r2, [pc, #488]	; (800a290 <HAL_SAI_Init+0x2d4>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d004      	beq.n	800a0b6 <HAL_SAI_Init+0xfa>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a78      	ldr	r2, [pc, #480]	; (800a294 <HAL_SAI_Init+0x2d8>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d104      	bne.n	800a0c0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a0b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a0ba:	f7ff fdd9 	bl	8009c70 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0be:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a76      	ldr	r2, [pc, #472]	; (800a2a0 <HAL_SAI_Init+0x2e4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <HAL_SAI_Init+0x118>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a75      	ldr	r2, [pc, #468]	; (800a2a4 <HAL_SAI_Init+0x2e8>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d104      	bne.n	800a0de <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a0d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a0d8:	f7ff fdca 	bl	8009c70 <HAL_RCCEx_GetPeriphCLKFreq>
 800a0dc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	025b      	lsls	r3, r3, #9
 800a0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	4a6b      	ldr	r2, [pc, #428]	; (800a2a8 <HAL_SAI_Init+0x2ec>)
 800a0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fe:	08da      	lsrs	r2, r3, #3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a104:	68f9      	ldr	r1, [r7, #12]
 800a106:	4b68      	ldr	r3, [pc, #416]	; (800a2a8 <HAL_SAI_Init+0x2ec>)
 800a108:	fba3 2301 	umull	r2, r3, r3, r1
 800a10c:	08da      	lsrs	r2, r3, #3
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	1aca      	subs	r2, r1, r3
 800a118:	2a08      	cmp	r2, #8
 800a11a:	d904      	bls.n	800a126 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d104      	bne.n	800a138 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	085a      	lsrs	r2, r3, #1
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <HAL_SAI_Init+0x18c>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b02      	cmp	r3, #2
 800a146:	d109      	bne.n	800a15c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d101      	bne.n	800a154 <HAL_SAI_Init+0x198>
 800a150:	2300      	movs	r3, #0
 800a152:	e001      	b.n	800a158 <HAL_SAI_Init+0x19c>
 800a154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a158:	61bb      	str	r3, [r7, #24]
 800a15a:	e008      	b.n	800a16e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a160:	2b01      	cmp	r3, #1
 800a162:	d102      	bne.n	800a16a <HAL_SAI_Init+0x1ae>
 800a164:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a168:	e000      	b.n	800a16c <HAL_SAI_Init+0x1b0>
 800a16a:	2300      	movs	r3, #0
 800a16c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	4b4c      	ldr	r3, [pc, #304]	; (800a2ac <HAL_SAI_Init+0x2f0>)
 800a17a:	400b      	ands	r3, r1
 800a17c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a192:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a198:	431a      	orrs	r2, r3
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a1a6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a1b2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	051b      	lsls	r3, r3, #20
 800a1ba:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6859      	ldr	r1, [r3, #4]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	4b38      	ldr	r3, [pc, #224]	; (800a2b0 <HAL_SAI_Init+0x2f4>)
 800a1d0:	400b      	ands	r3, r1
 800a1d2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6859      	ldr	r1, [r3, #4]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	699a      	ldr	r2, [r3, #24]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6899      	ldr	r1, [r3, #8]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	4b2d      	ldr	r3, [pc, #180]	; (800a2b4 <HAL_SAI_Init+0x2f8>)
 800a1fe:	400b      	ands	r3, r1
 800a200:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6899      	ldr	r1, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a212:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a218:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a21e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a224:	3b01      	subs	r3, #1
 800a226:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a228:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68d9      	ldr	r1, [r3, #12]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a240:	400b      	ands	r3, r1
 800a242:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68d9      	ldr	r1, [r3, #12]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a252:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a258:	041b      	lsls	r3, r3, #16
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a260:	3b01      	subs	r3, #1
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3720      	adds	r7, #32
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	40015804 	.word	0x40015804
 800a294:	40015824 	.word	0x40015824
 800a298:	40015800 	.word	0x40015800
 800a29c:	40015c00 	.word	0x40015c00
 800a2a0:	40015c04 	.word	0x40015c04
 800a2a4:	40015c24 	.word	0x40015c24
 800a2a8:	cccccccd 	.word	0xcccccccd
 800a2ac:	ff05c010 	.word	0xff05c010
 800a2b0:	ffff1ff0 	.word	0xffff1ff0
 800a2b4:	fff88000 	.word	0xfff88000

0800a2b8 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_SAI_DMAStop+0x1a>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e061      	b.n	800a396 <HAL_SAI_DMAStop+0xde>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a2e8:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01c      	beq.n	800a32c <HAL_SAI_DMAStop+0x74>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b12      	cmp	r3, #18
 800a2fc:	d116      	bne.n	800a32c <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd f930 	bl	8007568 <HAL_DMA_Abort>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00e      	beq.n	800a32c <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a314:	2b80      	cmp	r3, #128	; 0x80
 800a316:	d009      	beq.n	800a32c <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a322:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01c      	beq.n	800a36e <HAL_SAI_DMAStop+0xb6>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b22      	cmp	r3, #34	; 0x22
 800a33e:	d116      	bne.n	800a36e <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a344:	4618      	mov	r0, r3
 800a346:	f7fd f90f 	bl	8007568 <HAL_DMA_Abort>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00e      	beq.n	800a36e <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a356:	2b80      	cmp	r3, #128	; 0x80
 800a358:	d009      	beq.n	800a36e <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a364:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa34 	bl	800a7dc <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f042 0208 	orr.w	r2, r2, #8
 800a382:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a3ae:	f7fc fb05 	bl	80069bc <HAL_GetTick>
 800a3b2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <HAL_SAI_Transmit_DMA+0x20>
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e093      	b.n	800a4ec <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	f040 808c 	bne.w	800a4ea <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d101      	bne.n	800a3e0 <HAL_SAI_Transmit_DMA+0x40>
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e085      	b.n	800a4ec <HAL_SAI_Transmit_DMA+0x14c>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	88fa      	ldrh	r2, [r7, #6]
 800a3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	88fa      	ldrh	r2, [r7, #6]
 800a3fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2212      	movs	r2, #18
 800a40a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a412:	4a38      	ldr	r2, [pc, #224]	; (800a4f4 <HAL_SAI_Transmit_DMA+0x154>)
 800a414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a41a:	4a37      	ldr	r2, [pc, #220]	; (800a4f8 <HAL_SAI_Transmit_DMA+0x158>)
 800a41c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a422:	4a36      	ldr	r2, [pc, #216]	; (800a4fc <HAL_SAI_Transmit_DMA+0x15c>)
 800a424:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a42a:	2200      	movs	r2, #0
 800a42c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a436:	4619      	mov	r1, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	331c      	adds	r3, #28
 800a43e:	461a      	mov	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a446:	f7fd f82f 	bl	80074a8 <HAL_DMA_Start_IT>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e047      	b.n	800a4ec <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a45c:	2100      	movs	r1, #0
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 f986 	bl	800a770 <SAI_InterruptFlag>
 800a464:	4601      	mov	r1, r0
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	691a      	ldr	r2, [r3, #16]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a482:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a484:	e015      	b.n	800a4b2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a486:	f7fc fa99 	bl	80069bc <HAL_GetTick>
 800a48a:	4602      	mov	r2, r0
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a494:	d90d      	bls.n	800a4b2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a49c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e01c      	b.n	800a4ec <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0e2      	beq.n	800a486 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d107      	bne.n	800a4de <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a4dc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e000      	b.n	800a4ec <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800a4ea:	2302      	movs	r3, #2
  }
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	0800a8ad 	.word	0x0800a8ad
 800a4f8:	0800a84d 	.word	0x0800a84d
 800a4fc:	0800a8c9 	.word	0x0800a8c9

0800a500 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <SAI_InitI2S+0x2a>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d103      	bne.n	800a546 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	63da      	str	r2, [r3, #60]	; 0x3c
 800a544:	e002      	b.n	800a54c <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a552:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a55a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e076      	b.n	800a664 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d107      	bne.n	800a58c <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a588:	651a      	str	r2, [r3, #80]	; 0x50
 800a58a:	e006      	b.n	800a59a <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a592:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	651a      	str	r2, [r3, #80]	; 0x50
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d84f      	bhi.n	800a640 <SAI_InitI2S+0x12c>
 800a5a0:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <SAI_InitI2S+0x94>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5b9 	.word	0x0800a5b9
 800a5ac:	0800a5db 	.word	0x0800a5db
 800a5b0:	0800a5fd 	.word	0x0800a5fd
 800a5b4:	0800a61f 	.word	0x0800a61f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2280      	movs	r2, #128	; 0x80
 800a5bc:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	011a      	lsls	r2, r3, #4
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2240      	movs	r2, #64	; 0x40
 800a5d6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a5d8:	e034      	b.n	800a644 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2280      	movs	r2, #128	; 0x80
 800a5de:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	019a      	lsls	r2, r3, #6
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	085b      	lsrs	r3, r3, #1
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2280      	movs	r2, #128	; 0x80
 800a5f8:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a5fa:	e023      	b.n	800a644 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	22c0      	movs	r2, #192	; 0xc0
 800a600:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	085b      	lsrs	r3, r3, #1
 800a606:	019a      	lsls	r2, r3, #6
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	085b      	lsrs	r3, r3, #1
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2280      	movs	r2, #128	; 0x80
 800a61a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a61c:	e012      	b.n	800a644 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	22e0      	movs	r2, #224	; 0xe0
 800a622:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	085b      	lsrs	r3, r3, #1
 800a628:	019a      	lsls	r2, r3, #6
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	015a      	lsls	r2, r3, #5
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2280      	movs	r2, #128	; 0x80
 800a63c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a63e:	e001      	b.n	800a644 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e00f      	b.n	800a664 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b02      	cmp	r3, #2
 800a648:	d10b      	bne.n	800a662 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d102      	bne.n	800a656 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2210      	movs	r2, #16
 800a654:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d102      	bne.n	800a662 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2208      	movs	r2, #8
 800a660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <SAI_InitPCM+0x2a>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d103      	bne.n	800a6a2 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2201      	movs	r2, #1
 800a69e:	63da      	str	r2, [r3, #60]	; 0x3c
 800a6a0:	e002      	b.n	800a6a8 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a6b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a6bc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6d0:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b04      	cmp	r3, #4
 800a6d6:	d103      	bne.n	800a6e0 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	645a      	str	r2, [r3, #68]	; 0x44
 800a6de:	e002      	b.n	800a6e6 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	220d      	movs	r2, #13
 800a6e4:	645a      	str	r2, [r3, #68]	; 0x44
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d837      	bhi.n	800a75c <SAI_InitPCM+0xec>
 800a6ec:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <SAI_InitPCM+0x84>)
 800a6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f2:	bf00      	nop
 800a6f4:	0800a705 	.word	0x0800a705
 800a6f8:	0800a71b 	.word	0x0800a71b
 800a6fc:	0800a731 	.word	0x0800a731
 800a700:	0800a747 	.word	0x0800a747
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2280      	movs	r2, #128	; 0x80
 800a708:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	011a      	lsls	r2, r3, #4
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2240      	movs	r2, #64	; 0x40
 800a716:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a718:	e022      	b.n	800a760 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2280      	movs	r2, #128	; 0x80
 800a71e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2280      	movs	r2, #128	; 0x80
 800a72c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a72e:	e017      	b.n	800a760 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	22c0      	movs	r2, #192	; 0xc0
 800a734:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2280      	movs	r2, #128	; 0x80
 800a742:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a744:	e00c      	b.n	800a760 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	22e0      	movs	r2, #224	; 0xe0
 800a74a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2280      	movs	r2, #128	; 0x80
 800a758:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800a75a:	e001      	b.n	800a760 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e000      	b.n	800a762 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop

0800a770 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d103      	bne.n	800a78c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f043 0308 	orr.w	r3, r3, #8
 800a78a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	2b08      	cmp	r3, #8
 800a792:	d10b      	bne.n	800a7ac <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d003      	beq.n	800a7a4 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d103      	bne.n	800a7ac <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f043 0310 	orr.w	r3, r3, #16
 800a7aa:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d003      	beq.n	800a7bc <SAI_InterruptFlag+0x4c>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d104      	bne.n	800a7c6 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	e003      	b.n	800a7ce <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f043 0304 	orr.w	r3, r3, #4
 800a7cc:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a7e4:	4b17      	ldr	r3, [pc, #92]	; (800a844 <SAI_Disable+0x68>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a17      	ldr	r2, [pc, #92]	; (800a848 <SAI_Disable+0x6c>)
 800a7ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ee:	0b1b      	lsrs	r3, r3, #12
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a806:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	1e5a      	subs	r2, r3, #1
 800a80c:	60fa      	str	r2, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a818:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	72fb      	strb	r3, [r7, #11]
      break;
 800a826:	e006      	b.n	800a836 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e8      	bne.n	800a808 <SAI_Disable+0x2c>

  return status;
 800a836:	7afb      	ldrb	r3, [r7, #11]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	20000008 	.word	0x20000008
 800a848:	95cbec1b 	.word	0x95cbec1b

0800a84c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a858:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a862:	d01c      	beq.n	800a89e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a87a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a87c:	2100      	movs	r1, #0
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7ff ff76 	bl	800a770 <SAI_InterruptFlag>
 800a884:	4603      	mov	r3, r0
 800a886:	43d9      	mvns	r1, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	691a      	ldr	r2, [r3, #16]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	400a      	ands	r2, r1
 800a894:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7f7 fd12 	bl	80022c8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a8a4:	bf00      	nop
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7f7 fcc8 	bl	8002250 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d004      	beq.n	800a8fa <SAI_DMAError+0x32>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d112      	bne.n	800a920 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a908:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff ff66 	bl	800a7dc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7ff fded 	bl	800a500 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a926:	bf00      	nop
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e049      	b.n	800a9d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d106      	bne.n	800a95a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f841 	bl	800a9dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2202      	movs	r2, #2
 800a95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3304      	adds	r3, #4
 800a96a:	4619      	mov	r1, r3
 800a96c:	4610      	mov	r0, r2
 800a96e:	f000 f9ff 	bl	800ad70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d001      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e054      	b.n	800aab2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f042 0201 	orr.w	r2, r2, #1
 800aa1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a26      	ldr	r2, [pc, #152]	; (800aac0 <HAL_TIM_Base_Start_IT+0xd0>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d022      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x80>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa32:	d01d      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x80>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a22      	ldr	r2, [pc, #136]	; (800aac4 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d018      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x80>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a21      	ldr	r2, [pc, #132]	; (800aac8 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d013      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x80>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a1f      	ldr	r2, [pc, #124]	; (800aacc <HAL_TIM_Base_Start_IT+0xdc>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d00e      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x80>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a1e      	ldr	r2, [pc, #120]	; (800aad0 <HAL_TIM_Base_Start_IT+0xe0>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d009      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x80>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a1c      	ldr	r2, [pc, #112]	; (800aad4 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d004      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x80>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a1b      	ldr	r2, [pc, #108]	; (800aad8 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d115      	bne.n	800aa9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689a      	ldr	r2, [r3, #8]
 800aa76:	4b19      	ldr	r3, [pc, #100]	; (800aadc <HAL_TIM_Base_Start_IT+0xec>)
 800aa78:	4013      	ands	r3, r2
 800aa7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b06      	cmp	r3, #6
 800aa80:	d015      	beq.n	800aaae <HAL_TIM_Base_Start_IT+0xbe>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa88:	d011      	beq.n	800aaae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f042 0201 	orr.w	r2, r2, #1
 800aa98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa9a:	e008      	b.n	800aaae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f042 0201 	orr.w	r2, r2, #1
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	e000      	b.n	800aab0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40000400 	.word	0x40000400
 800aac8:	40000800 	.word	0x40000800
 800aacc:	40000c00 	.word	0x40000c00
 800aad0:	40010400 	.word	0x40010400
 800aad4:	40014000 	.word	0x40014000
 800aad8:	40001800 	.word	0x40001800
 800aadc:	00010007 	.word	0x00010007

0800aae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d122      	bne.n	800ab3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d11b      	bne.n	800ab3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0202 	mvn.w	r2, #2
 800ab0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f905 	bl	800ad32 <HAL_TIM_IC_CaptureCallback>
 800ab28:	e005      	b.n	800ab36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f8f7 	bl	800ad1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f908 	bl	800ad46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	f003 0304 	and.w	r3, r3, #4
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	d122      	bne.n	800ab90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	f003 0304 	and.w	r3, r3, #4
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d11b      	bne.n	800ab90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f06f 0204 	mvn.w	r2, #4
 800ab60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2202      	movs	r2, #2
 800ab66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f8db 	bl	800ad32 <HAL_TIM_IC_CaptureCallback>
 800ab7c:	e005      	b.n	800ab8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f8cd 	bl	800ad1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f8de 	bl	800ad46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f003 0308 	and.w	r3, r3, #8
 800ab9a:	2b08      	cmp	r3, #8
 800ab9c:	d122      	bne.n	800abe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f003 0308 	and.w	r3, r3, #8
 800aba8:	2b08      	cmp	r3, #8
 800abaa:	d11b      	bne.n	800abe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f06f 0208 	mvn.w	r2, #8
 800abb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2204      	movs	r2, #4
 800abba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f8b1 	bl	800ad32 <HAL_TIM_IC_CaptureCallback>
 800abd0:	e005      	b.n	800abde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f8a3 	bl	800ad1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f8b4 	bl	800ad46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0310 	and.w	r3, r3, #16
 800abee:	2b10      	cmp	r3, #16
 800abf0:	d122      	bne.n	800ac38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f003 0310 	and.w	r3, r3, #16
 800abfc:	2b10      	cmp	r3, #16
 800abfe:	d11b      	bne.n	800ac38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f06f 0210 	mvn.w	r2, #16
 800ac08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f887 	bl	800ad32 <HAL_TIM_IC_CaptureCallback>
 800ac24:	e005      	b.n	800ac32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f879 	bl	800ad1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f88a 	bl	800ad46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d10e      	bne.n	800ac64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d107      	bne.n	800ac64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f06f 0201 	mvn.w	r2, #1
 800ac5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7f7 fbee 	bl	8002440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6e:	2b80      	cmp	r3, #128	; 0x80
 800ac70:	d10e      	bne.n	800ac90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7c:	2b80      	cmp	r3, #128	; 0x80
 800ac7e:	d107      	bne.n	800ac90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f91a 	bl	800aec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac9e:	d10e      	bne.n	800acbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acaa:	2b80      	cmp	r3, #128	; 0x80
 800acac:	d107      	bne.n	800acbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f90d 	bl	800aed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc8:	2b40      	cmp	r3, #64	; 0x40
 800acca:	d10e      	bne.n	800acea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd6:	2b40      	cmp	r3, #64	; 0x40
 800acd8:	d107      	bne.n	800acea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ace2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f838 	bl	800ad5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	f003 0320 	and.w	r3, r3, #32
 800acf4:	2b20      	cmp	r3, #32
 800acf6:	d10e      	bne.n	800ad16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	f003 0320 	and.w	r3, r3, #32
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	d107      	bne.n	800ad16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f06f 0220 	mvn.w	r2, #32
 800ad0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f8cd 	bl	800aeb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad16:	bf00      	nop
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad26:	bf00      	nop
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad3a:	bf00      	nop
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
	...

0800ad70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a40      	ldr	r2, [pc, #256]	; (800ae84 <TIM_Base_SetConfig+0x114>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d013      	beq.n	800adb0 <TIM_Base_SetConfig+0x40>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad8e:	d00f      	beq.n	800adb0 <TIM_Base_SetConfig+0x40>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a3d      	ldr	r2, [pc, #244]	; (800ae88 <TIM_Base_SetConfig+0x118>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d00b      	beq.n	800adb0 <TIM_Base_SetConfig+0x40>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a3c      	ldr	r2, [pc, #240]	; (800ae8c <TIM_Base_SetConfig+0x11c>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d007      	beq.n	800adb0 <TIM_Base_SetConfig+0x40>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a3b      	ldr	r2, [pc, #236]	; (800ae90 <TIM_Base_SetConfig+0x120>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d003      	beq.n	800adb0 <TIM_Base_SetConfig+0x40>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a3a      	ldr	r2, [pc, #232]	; (800ae94 <TIM_Base_SetConfig+0x124>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d108      	bne.n	800adc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a2f      	ldr	r2, [pc, #188]	; (800ae84 <TIM_Base_SetConfig+0x114>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d02b      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add0:	d027      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a2c      	ldr	r2, [pc, #176]	; (800ae88 <TIM_Base_SetConfig+0x118>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d023      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a2b      	ldr	r2, [pc, #172]	; (800ae8c <TIM_Base_SetConfig+0x11c>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d01f      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a2a      	ldr	r2, [pc, #168]	; (800ae90 <TIM_Base_SetConfig+0x120>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d01b      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a29      	ldr	r2, [pc, #164]	; (800ae94 <TIM_Base_SetConfig+0x124>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d017      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4a28      	ldr	r2, [pc, #160]	; (800ae98 <TIM_Base_SetConfig+0x128>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d013      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a27      	ldr	r2, [pc, #156]	; (800ae9c <TIM_Base_SetConfig+0x12c>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00f      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a26      	ldr	r2, [pc, #152]	; (800aea0 <TIM_Base_SetConfig+0x130>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d00b      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a25      	ldr	r2, [pc, #148]	; (800aea4 <TIM_Base_SetConfig+0x134>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d007      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a24      	ldr	r2, [pc, #144]	; (800aea8 <TIM_Base_SetConfig+0x138>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d003      	beq.n	800ae22 <TIM_Base_SetConfig+0xb2>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a23      	ldr	r2, [pc, #140]	; (800aeac <TIM_Base_SetConfig+0x13c>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d108      	bne.n	800ae34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689a      	ldr	r2, [r3, #8]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a0a      	ldr	r2, [pc, #40]	; (800ae84 <TIM_Base_SetConfig+0x114>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d003      	beq.n	800ae68 <TIM_Base_SetConfig+0xf8>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a0c      	ldr	r2, [pc, #48]	; (800ae94 <TIM_Base_SetConfig+0x124>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d103      	bne.n	800ae70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	615a      	str	r2, [r3, #20]
}
 800ae76:	bf00      	nop
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	40010000 	.word	0x40010000
 800ae88:	40000400 	.word	0x40000400
 800ae8c:	40000800 	.word	0x40000800
 800ae90:	40000c00 	.word	0x40000c00
 800ae94:	40010400 	.word	0x40010400
 800ae98:	40014000 	.word	0x40014000
 800ae9c:	40014400 	.word	0x40014400
 800aea0:	40014800 	.word	0x40014800
 800aea4:	40001800 	.word	0x40001800
 800aea8:	40001c00 	.word	0x40001c00
 800aeac:	40002000 	.word	0x40002000

0800aeb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e040      	b.n	800af80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af02:	2b00      	cmp	r3, #0
 800af04:	d106      	bne.n	800af14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7f8 fb2a 	bl	8003568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2224      	movs	r2, #36	; 0x24
 800af18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0201 	bic.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f8c0 	bl	800b0b0 <UART_SetConfig>
 800af30:	4603      	mov	r3, r0
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e022      	b.n	800af80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d002      	beq.n	800af48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fb16 	bl	800b574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689a      	ldr	r2, [r3, #8]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0201 	orr.w	r2, r2, #1
 800af76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fb9d 	bl	800b6b8 <UART_CheckIdleState>
 800af7e:	4603      	mov	r3, r0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	4613      	mov	r3, r2
 800af96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af9c:	2b20      	cmp	r3, #32
 800af9e:	f040 8081 	bne.w	800b0a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <HAL_UART_Transmit+0x26>
 800afa8:	88fb      	ldrh	r3, [r7, #6]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e079      	b.n	800b0a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d101      	bne.n	800afc0 <HAL_UART_Transmit+0x38>
 800afbc:	2302      	movs	r3, #2
 800afbe:	e072      	b.n	800b0a6 <HAL_UART_Transmit+0x11e>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2221      	movs	r2, #33	; 0x21
 800afd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afd6:	f7fb fcf1 	bl	80069bc <HAL_GetTick>
 800afda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	88fa      	ldrh	r2, [r7, #6]
 800afe0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	88fa      	ldrh	r2, [r7, #6]
 800afe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff4:	d108      	bne.n	800b008 <HAL_UART_Transmit+0x80>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d104      	bne.n	800b008 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	61bb      	str	r3, [r7, #24]
 800b006:	e003      	b.n	800b010 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b018:	e02c      	b.n	800b074 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2200      	movs	r2, #0
 800b022:	2180      	movs	r1, #128	; 0x80
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 fb90 	bl	800b74a <UART_WaitOnFlagUntilTimeout>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e038      	b.n	800b0a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10b      	bne.n	800b052 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b048:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	3302      	adds	r3, #2
 800b04e:	61bb      	str	r3, [r7, #24]
 800b050:	e007      	b.n	800b062 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	781a      	ldrb	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	3301      	adds	r3, #1
 800b060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b068:	b29b      	uxth	r3, r3
 800b06a:	3b01      	subs	r3, #1
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1cc      	bne.n	800b01a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2200      	movs	r2, #0
 800b088:	2140      	movs	r1, #64	; 0x40
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 fb5d 	bl	800b74a <UART_WaitOnFlagUntilTimeout>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e005      	b.n	800b0a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2220      	movs	r2, #32
 800b09e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e000      	b.n	800b0a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800b0a4:	2302      	movs	r3, #2
  }
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3720      	adds	r7, #32
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689a      	ldr	r2, [r3, #8]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	431a      	orrs	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	4ba7      	ldr	r3, [pc, #668]	; (800b378 <UART_SetConfig+0x2c8>)
 800b0dc:	4013      	ands	r3, r2
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6812      	ldr	r2, [r2, #0]
 800b0e2:	6979      	ldr	r1, [r7, #20]
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	430a      	orrs	r2, r1
 800b0fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	430a      	orrs	r2, r1
 800b120:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a95      	ldr	r2, [pc, #596]	; (800b37c <UART_SetConfig+0x2cc>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d120      	bne.n	800b16e <UART_SetConfig+0xbe>
 800b12c:	4b94      	ldr	r3, [pc, #592]	; (800b380 <UART_SetConfig+0x2d0>)
 800b12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b132:	f003 0303 	and.w	r3, r3, #3
 800b136:	2b03      	cmp	r3, #3
 800b138:	d816      	bhi.n	800b168 <UART_SetConfig+0xb8>
 800b13a:	a201      	add	r2, pc, #4	; (adr r2, 800b140 <UART_SetConfig+0x90>)
 800b13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b140:	0800b151 	.word	0x0800b151
 800b144:	0800b15d 	.word	0x0800b15d
 800b148:	0800b157 	.word	0x0800b157
 800b14c:	0800b163 	.word	0x0800b163
 800b150:	2301      	movs	r3, #1
 800b152:	77fb      	strb	r3, [r7, #31]
 800b154:	e14f      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b156:	2302      	movs	r3, #2
 800b158:	77fb      	strb	r3, [r7, #31]
 800b15a:	e14c      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b15c:	2304      	movs	r3, #4
 800b15e:	77fb      	strb	r3, [r7, #31]
 800b160:	e149      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b162:	2308      	movs	r3, #8
 800b164:	77fb      	strb	r3, [r7, #31]
 800b166:	e146      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b168:	2310      	movs	r3, #16
 800b16a:	77fb      	strb	r3, [r7, #31]
 800b16c:	e143      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a84      	ldr	r2, [pc, #528]	; (800b384 <UART_SetConfig+0x2d4>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d132      	bne.n	800b1de <UART_SetConfig+0x12e>
 800b178:	4b81      	ldr	r3, [pc, #516]	; (800b380 <UART_SetConfig+0x2d0>)
 800b17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b17e:	f003 030c 	and.w	r3, r3, #12
 800b182:	2b0c      	cmp	r3, #12
 800b184:	d828      	bhi.n	800b1d8 <UART_SetConfig+0x128>
 800b186:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <UART_SetConfig+0xdc>)
 800b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18c:	0800b1c1 	.word	0x0800b1c1
 800b190:	0800b1d9 	.word	0x0800b1d9
 800b194:	0800b1d9 	.word	0x0800b1d9
 800b198:	0800b1d9 	.word	0x0800b1d9
 800b19c:	0800b1cd 	.word	0x0800b1cd
 800b1a0:	0800b1d9 	.word	0x0800b1d9
 800b1a4:	0800b1d9 	.word	0x0800b1d9
 800b1a8:	0800b1d9 	.word	0x0800b1d9
 800b1ac:	0800b1c7 	.word	0x0800b1c7
 800b1b0:	0800b1d9 	.word	0x0800b1d9
 800b1b4:	0800b1d9 	.word	0x0800b1d9
 800b1b8:	0800b1d9 	.word	0x0800b1d9
 800b1bc:	0800b1d3 	.word	0x0800b1d3
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	77fb      	strb	r3, [r7, #31]
 800b1c4:	e117      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	77fb      	strb	r3, [r7, #31]
 800b1ca:	e114      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b1cc:	2304      	movs	r3, #4
 800b1ce:	77fb      	strb	r3, [r7, #31]
 800b1d0:	e111      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b1d2:	2308      	movs	r3, #8
 800b1d4:	77fb      	strb	r3, [r7, #31]
 800b1d6:	e10e      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b1d8:	2310      	movs	r3, #16
 800b1da:	77fb      	strb	r3, [r7, #31]
 800b1dc:	e10b      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a69      	ldr	r2, [pc, #420]	; (800b388 <UART_SetConfig+0x2d8>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d120      	bne.n	800b22a <UART_SetConfig+0x17a>
 800b1e8:	4b65      	ldr	r3, [pc, #404]	; (800b380 <UART_SetConfig+0x2d0>)
 800b1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b1f2:	2b30      	cmp	r3, #48	; 0x30
 800b1f4:	d013      	beq.n	800b21e <UART_SetConfig+0x16e>
 800b1f6:	2b30      	cmp	r3, #48	; 0x30
 800b1f8:	d814      	bhi.n	800b224 <UART_SetConfig+0x174>
 800b1fa:	2b20      	cmp	r3, #32
 800b1fc:	d009      	beq.n	800b212 <UART_SetConfig+0x162>
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d810      	bhi.n	800b224 <UART_SetConfig+0x174>
 800b202:	2b00      	cmp	r3, #0
 800b204:	d002      	beq.n	800b20c <UART_SetConfig+0x15c>
 800b206:	2b10      	cmp	r3, #16
 800b208:	d006      	beq.n	800b218 <UART_SetConfig+0x168>
 800b20a:	e00b      	b.n	800b224 <UART_SetConfig+0x174>
 800b20c:	2300      	movs	r3, #0
 800b20e:	77fb      	strb	r3, [r7, #31]
 800b210:	e0f1      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b212:	2302      	movs	r3, #2
 800b214:	77fb      	strb	r3, [r7, #31]
 800b216:	e0ee      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b218:	2304      	movs	r3, #4
 800b21a:	77fb      	strb	r3, [r7, #31]
 800b21c:	e0eb      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b21e:	2308      	movs	r3, #8
 800b220:	77fb      	strb	r3, [r7, #31]
 800b222:	e0e8      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b224:	2310      	movs	r3, #16
 800b226:	77fb      	strb	r3, [r7, #31]
 800b228:	e0e5      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a57      	ldr	r2, [pc, #348]	; (800b38c <UART_SetConfig+0x2dc>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d120      	bne.n	800b276 <UART_SetConfig+0x1c6>
 800b234:	4b52      	ldr	r3, [pc, #328]	; (800b380 <UART_SetConfig+0x2d0>)
 800b236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b23a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b23e:	2bc0      	cmp	r3, #192	; 0xc0
 800b240:	d013      	beq.n	800b26a <UART_SetConfig+0x1ba>
 800b242:	2bc0      	cmp	r3, #192	; 0xc0
 800b244:	d814      	bhi.n	800b270 <UART_SetConfig+0x1c0>
 800b246:	2b80      	cmp	r3, #128	; 0x80
 800b248:	d009      	beq.n	800b25e <UART_SetConfig+0x1ae>
 800b24a:	2b80      	cmp	r3, #128	; 0x80
 800b24c:	d810      	bhi.n	800b270 <UART_SetConfig+0x1c0>
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <UART_SetConfig+0x1a8>
 800b252:	2b40      	cmp	r3, #64	; 0x40
 800b254:	d006      	beq.n	800b264 <UART_SetConfig+0x1b4>
 800b256:	e00b      	b.n	800b270 <UART_SetConfig+0x1c0>
 800b258:	2300      	movs	r3, #0
 800b25a:	77fb      	strb	r3, [r7, #31]
 800b25c:	e0cb      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b25e:	2302      	movs	r3, #2
 800b260:	77fb      	strb	r3, [r7, #31]
 800b262:	e0c8      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b264:	2304      	movs	r3, #4
 800b266:	77fb      	strb	r3, [r7, #31]
 800b268:	e0c5      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b26a:	2308      	movs	r3, #8
 800b26c:	77fb      	strb	r3, [r7, #31]
 800b26e:	e0c2      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b270:	2310      	movs	r3, #16
 800b272:	77fb      	strb	r3, [r7, #31]
 800b274:	e0bf      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a45      	ldr	r2, [pc, #276]	; (800b390 <UART_SetConfig+0x2e0>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d125      	bne.n	800b2cc <UART_SetConfig+0x21c>
 800b280:	4b3f      	ldr	r3, [pc, #252]	; (800b380 <UART_SetConfig+0x2d0>)
 800b282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b28a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b28e:	d017      	beq.n	800b2c0 <UART_SetConfig+0x210>
 800b290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b294:	d817      	bhi.n	800b2c6 <UART_SetConfig+0x216>
 800b296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b29a:	d00b      	beq.n	800b2b4 <UART_SetConfig+0x204>
 800b29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2a0:	d811      	bhi.n	800b2c6 <UART_SetConfig+0x216>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <UART_SetConfig+0x1fe>
 800b2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2aa:	d006      	beq.n	800b2ba <UART_SetConfig+0x20a>
 800b2ac:	e00b      	b.n	800b2c6 <UART_SetConfig+0x216>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	77fb      	strb	r3, [r7, #31]
 800b2b2:	e0a0      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	77fb      	strb	r3, [r7, #31]
 800b2b8:	e09d      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b2ba:	2304      	movs	r3, #4
 800b2bc:	77fb      	strb	r3, [r7, #31]
 800b2be:	e09a      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	77fb      	strb	r3, [r7, #31]
 800b2c4:	e097      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b2c6:	2310      	movs	r3, #16
 800b2c8:	77fb      	strb	r3, [r7, #31]
 800b2ca:	e094      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a30      	ldr	r2, [pc, #192]	; (800b394 <UART_SetConfig+0x2e4>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d125      	bne.n	800b322 <UART_SetConfig+0x272>
 800b2d6:	4b2a      	ldr	r3, [pc, #168]	; (800b380 <UART_SetConfig+0x2d0>)
 800b2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b2e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2e4:	d017      	beq.n	800b316 <UART_SetConfig+0x266>
 800b2e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2ea:	d817      	bhi.n	800b31c <UART_SetConfig+0x26c>
 800b2ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2f0:	d00b      	beq.n	800b30a <UART_SetConfig+0x25a>
 800b2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2f6:	d811      	bhi.n	800b31c <UART_SetConfig+0x26c>
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <UART_SetConfig+0x254>
 800b2fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b300:	d006      	beq.n	800b310 <UART_SetConfig+0x260>
 800b302:	e00b      	b.n	800b31c <UART_SetConfig+0x26c>
 800b304:	2301      	movs	r3, #1
 800b306:	77fb      	strb	r3, [r7, #31]
 800b308:	e075      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b30a:	2302      	movs	r3, #2
 800b30c:	77fb      	strb	r3, [r7, #31]
 800b30e:	e072      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b310:	2304      	movs	r3, #4
 800b312:	77fb      	strb	r3, [r7, #31]
 800b314:	e06f      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b316:	2308      	movs	r3, #8
 800b318:	77fb      	strb	r3, [r7, #31]
 800b31a:	e06c      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b31c:	2310      	movs	r3, #16
 800b31e:	77fb      	strb	r3, [r7, #31]
 800b320:	e069      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a1c      	ldr	r2, [pc, #112]	; (800b398 <UART_SetConfig+0x2e8>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d137      	bne.n	800b39c <UART_SetConfig+0x2ec>
 800b32c:	4b14      	ldr	r3, [pc, #80]	; (800b380 <UART_SetConfig+0x2d0>)
 800b32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b332:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b336:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b33a:	d017      	beq.n	800b36c <UART_SetConfig+0x2bc>
 800b33c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b340:	d817      	bhi.n	800b372 <UART_SetConfig+0x2c2>
 800b342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b346:	d00b      	beq.n	800b360 <UART_SetConfig+0x2b0>
 800b348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b34c:	d811      	bhi.n	800b372 <UART_SetConfig+0x2c2>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <UART_SetConfig+0x2aa>
 800b352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b356:	d006      	beq.n	800b366 <UART_SetConfig+0x2b6>
 800b358:	e00b      	b.n	800b372 <UART_SetConfig+0x2c2>
 800b35a:	2300      	movs	r3, #0
 800b35c:	77fb      	strb	r3, [r7, #31]
 800b35e:	e04a      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b360:	2302      	movs	r3, #2
 800b362:	77fb      	strb	r3, [r7, #31]
 800b364:	e047      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b366:	2304      	movs	r3, #4
 800b368:	77fb      	strb	r3, [r7, #31]
 800b36a:	e044      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b36c:	2308      	movs	r3, #8
 800b36e:	77fb      	strb	r3, [r7, #31]
 800b370:	e041      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b372:	2310      	movs	r3, #16
 800b374:	77fb      	strb	r3, [r7, #31]
 800b376:	e03e      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b378:	efff69f3 	.word	0xefff69f3
 800b37c:	40011000 	.word	0x40011000
 800b380:	40023800 	.word	0x40023800
 800b384:	40004400 	.word	0x40004400
 800b388:	40004800 	.word	0x40004800
 800b38c:	40004c00 	.word	0x40004c00
 800b390:	40005000 	.word	0x40005000
 800b394:	40011400 	.word	0x40011400
 800b398:	40007800 	.word	0x40007800
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a71      	ldr	r2, [pc, #452]	; (800b568 <UART_SetConfig+0x4b8>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d125      	bne.n	800b3f2 <UART_SetConfig+0x342>
 800b3a6:	4b71      	ldr	r3, [pc, #452]	; (800b56c <UART_SetConfig+0x4bc>)
 800b3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b3b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b3b4:	d017      	beq.n	800b3e6 <UART_SetConfig+0x336>
 800b3b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b3ba:	d817      	bhi.n	800b3ec <UART_SetConfig+0x33c>
 800b3bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3c0:	d00b      	beq.n	800b3da <UART_SetConfig+0x32a>
 800b3c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3c6:	d811      	bhi.n	800b3ec <UART_SetConfig+0x33c>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <UART_SetConfig+0x324>
 800b3cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3d0:	d006      	beq.n	800b3e0 <UART_SetConfig+0x330>
 800b3d2:	e00b      	b.n	800b3ec <UART_SetConfig+0x33c>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	77fb      	strb	r3, [r7, #31]
 800b3d8:	e00d      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	77fb      	strb	r3, [r7, #31]
 800b3de:	e00a      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b3e0:	2304      	movs	r3, #4
 800b3e2:	77fb      	strb	r3, [r7, #31]
 800b3e4:	e007      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b3e6:	2308      	movs	r3, #8
 800b3e8:	77fb      	strb	r3, [r7, #31]
 800b3ea:	e004      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b3ec:	2310      	movs	r3, #16
 800b3ee:	77fb      	strb	r3, [r7, #31]
 800b3f0:	e001      	b.n	800b3f6 <UART_SetConfig+0x346>
 800b3f2:	2310      	movs	r3, #16
 800b3f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3fe:	d15a      	bne.n	800b4b6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b400:	7ffb      	ldrb	r3, [r7, #31]
 800b402:	2b08      	cmp	r3, #8
 800b404:	d827      	bhi.n	800b456 <UART_SetConfig+0x3a6>
 800b406:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <UART_SetConfig+0x35c>)
 800b408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40c:	0800b431 	.word	0x0800b431
 800b410:	0800b439 	.word	0x0800b439
 800b414:	0800b441 	.word	0x0800b441
 800b418:	0800b457 	.word	0x0800b457
 800b41c:	0800b447 	.word	0x0800b447
 800b420:	0800b457 	.word	0x0800b457
 800b424:	0800b457 	.word	0x0800b457
 800b428:	0800b457 	.word	0x0800b457
 800b42c:	0800b44f 	.word	0x0800b44f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b430:	f7fd ff9c 	bl	800936c <HAL_RCC_GetPCLK1Freq>
 800b434:	61b8      	str	r0, [r7, #24]
        break;
 800b436:	e013      	b.n	800b460 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b438:	f7fd ffac 	bl	8009394 <HAL_RCC_GetPCLK2Freq>
 800b43c:	61b8      	str	r0, [r7, #24]
        break;
 800b43e:	e00f      	b.n	800b460 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b440:	4b4b      	ldr	r3, [pc, #300]	; (800b570 <UART_SetConfig+0x4c0>)
 800b442:	61bb      	str	r3, [r7, #24]
        break;
 800b444:	e00c      	b.n	800b460 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b446:	f7fd fecf 	bl	80091e8 <HAL_RCC_GetSysClockFreq>
 800b44a:	61b8      	str	r0, [r7, #24]
        break;
 800b44c:	e008      	b.n	800b460 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b44e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b452:	61bb      	str	r3, [r7, #24]
        break;
 800b454:	e004      	b.n	800b460 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	77bb      	strb	r3, [r7, #30]
        break;
 800b45e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d074      	beq.n	800b550 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	005a      	lsls	r2, r3, #1
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	085b      	lsrs	r3, r3, #1
 800b470:	441a      	add	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b0f      	cmp	r3, #15
 800b480:	d916      	bls.n	800b4b0 <UART_SetConfig+0x400>
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b488:	d212      	bcs.n	800b4b0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	f023 030f 	bic.w	r3, r3, #15
 800b492:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	b29b      	uxth	r3, r3
 800b49a:	f003 0307 	and.w	r3, r3, #7
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	89fb      	ldrh	r3, [r7, #14]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	89fa      	ldrh	r2, [r7, #14]
 800b4ac:	60da      	str	r2, [r3, #12]
 800b4ae:	e04f      	b.n	800b550 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	77bb      	strb	r3, [r7, #30]
 800b4b4:	e04c      	b.n	800b550 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4b6:	7ffb      	ldrb	r3, [r7, #31]
 800b4b8:	2b08      	cmp	r3, #8
 800b4ba:	d828      	bhi.n	800b50e <UART_SetConfig+0x45e>
 800b4bc:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <UART_SetConfig+0x414>)
 800b4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c2:	bf00      	nop
 800b4c4:	0800b4e9 	.word	0x0800b4e9
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b4f9 	.word	0x0800b4f9
 800b4d0:	0800b50f 	.word	0x0800b50f
 800b4d4:	0800b4ff 	.word	0x0800b4ff
 800b4d8:	0800b50f 	.word	0x0800b50f
 800b4dc:	0800b50f 	.word	0x0800b50f
 800b4e0:	0800b50f 	.word	0x0800b50f
 800b4e4:	0800b507 	.word	0x0800b507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4e8:	f7fd ff40 	bl	800936c <HAL_RCC_GetPCLK1Freq>
 800b4ec:	61b8      	str	r0, [r7, #24]
        break;
 800b4ee:	e013      	b.n	800b518 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4f0:	f7fd ff50 	bl	8009394 <HAL_RCC_GetPCLK2Freq>
 800b4f4:	61b8      	str	r0, [r7, #24]
        break;
 800b4f6:	e00f      	b.n	800b518 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4f8:	4b1d      	ldr	r3, [pc, #116]	; (800b570 <UART_SetConfig+0x4c0>)
 800b4fa:	61bb      	str	r3, [r7, #24]
        break;
 800b4fc:	e00c      	b.n	800b518 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4fe:	f7fd fe73 	bl	80091e8 <HAL_RCC_GetSysClockFreq>
 800b502:	61b8      	str	r0, [r7, #24]
        break;
 800b504:	e008      	b.n	800b518 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b50a:	61bb      	str	r3, [r7, #24]
        break;
 800b50c:	e004      	b.n	800b518 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	77bb      	strb	r3, [r7, #30]
        break;
 800b516:	bf00      	nop
    }

    if (pclk != 0U)
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d018      	beq.n	800b550 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	085a      	lsrs	r2, r3, #1
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	441a      	add	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2b0f      	cmp	r3, #15
 800b536:	d909      	bls.n	800b54c <UART_SetConfig+0x49c>
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b53e:	d205      	bcs.n	800b54c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	b29a      	uxth	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	e001      	b.n	800b550 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b55c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3720      	adds	r7, #32
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	40007c00 	.word	0x40007c00
 800b56c:	40023800 	.word	0x40023800
 800b570:	00f42400 	.word	0x00f42400

0800b574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00a      	beq.n	800b59e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	f003 0302 	and.w	r3, r3, #2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00a      	beq.n	800b5e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	f003 0308 	and.w	r3, r3, #8
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00a      	beq.n	800b604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	f003 0310 	and.w	r3, r3, #16
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00a      	beq.n	800b626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	430a      	orrs	r2, r1
 800b624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	f003 0320 	and.w	r3, r3, #32
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00a      	beq.n	800b648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b650:	2b00      	cmp	r3, #0
 800b652:	d01a      	beq.n	800b68a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	430a      	orrs	r2, r1
 800b668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b672:	d10a      	bne.n	800b68a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	605a      	str	r2, [r3, #4]
  }
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af02      	add	r7, sp, #8
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6c8:	f7fb f978 	bl	80069bc <HAL_GetTick>
 800b6cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	2b08      	cmp	r3, #8
 800b6da:	d10e      	bne.n	800b6fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f82d 	bl	800b74a <UART_WaitOnFlagUntilTimeout>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e023      	b.n	800b742 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0304 	and.w	r3, r3, #4
 800b704:	2b04      	cmp	r3, #4
 800b706:	d10e      	bne.n	800b726 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f817 	bl	800b74a <UART_WaitOnFlagUntilTimeout>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e00d      	b.n	800b742 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2220      	movs	r2, #32
 800b72a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2220      	movs	r2, #32
 800b730:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b09c      	sub	sp, #112	; 0x70
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	603b      	str	r3, [r7, #0]
 800b756:	4613      	mov	r3, r2
 800b758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b75a:	e0a5      	b.n	800b8a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b75c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b762:	f000 80a1 	beq.w	800b8a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b766:	f7fb f929 	bl	80069bc <HAL_GetTick>
 800b76a:	4602      	mov	r2, r0
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b772:	429a      	cmp	r2, r3
 800b774:	d302      	bcc.n	800b77c <UART_WaitOnFlagUntilTimeout+0x32>
 800b776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d13e      	bne.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b78c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b790:	667b      	str	r3, [r7, #100]	; 0x64
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b79a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b79c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e6      	bne.n	800b77c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	f023 0301 	bic.w	r3, r3, #1
 800b7c4:	663b      	str	r3, [r7, #96]	; 0x60
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800b7d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e5      	bne.n	800b7ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e067      	b.n	800b8ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d04f      	beq.n	800b8a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b816:	d147      	bne.n	800b8a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b820:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	e853 3f00 	ldrex	r3, [r3]
 800b82e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b836:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b840:	637b      	str	r3, [r7, #52]	; 0x34
 800b842:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b848:	e841 2300 	strex	r3, r2, [r1]
 800b84c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1e6      	bne.n	800b822 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3308      	adds	r3, #8
 800b85a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	e853 3f00 	ldrex	r3, [r3]
 800b862:	613b      	str	r3, [r7, #16]
   return(result);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	f023 0301 	bic.w	r3, r3, #1
 800b86a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3308      	adds	r3, #8
 800b872:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b874:	623a      	str	r2, [r7, #32]
 800b876:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b878:	69f9      	ldr	r1, [r7, #28]
 800b87a:	6a3a      	ldr	r2, [r7, #32]
 800b87c:	e841 2300 	strex	r3, r2, [r1]
 800b880:	61bb      	str	r3, [r7, #24]
   return(result);
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1e5      	bne.n	800b854 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2220      	movs	r2, #32
 800b88c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2220      	movs	r2, #32
 800b892:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2220      	movs	r2, #32
 800b898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e010      	b.n	800b8ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	69da      	ldr	r2, [r3, #28]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	bf0c      	ite	eq
 800b8b8:	2301      	moveq	r3, #1
 800b8ba:	2300      	movne	r3, #0
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	461a      	mov	r2, r3
 800b8c0:	79fb      	ldrb	r3, [r7, #7]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	f43f af4a 	beq.w	800b75c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3770      	adds	r7, #112	; 0x70
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <_ZdlPvj>:
 800b8d2:	f000 b818 	b.w	800b906 <_ZdlPv>

0800b8d6 <_ZdaPv>:
 800b8d6:	f000 b816 	b.w	800b906 <_ZdlPv>

0800b8da <_Znwj>:
 800b8da:	2801      	cmp	r0, #1
 800b8dc:	bf38      	it	cc
 800b8de:	2001      	movcc	r0, #1
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f001 fbfb 	bl	800d0e0 <malloc>
 800b8ea:	b930      	cbnz	r0, 800b8fa <_Znwj+0x20>
 800b8ec:	f000 f820 	bl	800b930 <_ZSt15get_new_handlerv>
 800b8f0:	b908      	cbnz	r0, 800b8f6 <_Znwj+0x1c>
 800b8f2:	f001 fbbb 	bl	800d06c <abort>
 800b8f6:	4780      	blx	r0
 800b8f8:	e7f4      	b.n	800b8e4 <_Znwj+0xa>
 800b8fa:	bd10      	pop	{r4, pc}

0800b8fc <_Znaj>:
 800b8fc:	f7ff bfed 	b.w	800b8da <_Znwj>

0800b900 <__cxa_pure_virtual>:
 800b900:	b508      	push	{r3, lr}
 800b902:	f000 f80f 	bl	800b924 <_ZSt9terminatev>

0800b906 <_ZdlPv>:
 800b906:	f001 bbf3 	b.w	800d0f0 <free>

0800b90a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b90a:	b508      	push	{r3, lr}
 800b90c:	4780      	blx	r0
 800b90e:	f001 fbad 	bl	800d06c <abort>
	...

0800b914 <_ZSt13get_terminatev>:
 800b914:	4b02      	ldr	r3, [pc, #8]	; (800b920 <_ZSt13get_terminatev+0xc>)
 800b916:	6818      	ldr	r0, [r3, #0]
 800b918:	f3bf 8f5b 	dmb	ish
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	20000014 	.word	0x20000014

0800b924 <_ZSt9terminatev>:
 800b924:	b508      	push	{r3, lr}
 800b926:	f7ff fff5 	bl	800b914 <_ZSt13get_terminatev>
 800b92a:	f7ff ffee 	bl	800b90a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b930 <_ZSt15get_new_handlerv>:
 800b930:	4b02      	ldr	r3, [pc, #8]	; (800b93c <_ZSt15get_new_handlerv+0xc>)
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	f3bf 8f5b 	dmb	ish
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	200003e8 	.word	0x200003e8

0800b940 <log>:
 800b940:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800b944:	ed2d 8b02 	vpush	{d8}
 800b948:	b082      	sub	sp, #8
 800b94a:	ed8d 0b00 	vstr	d0, [sp]
 800b94e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b952:	2600      	movs	r6, #0
 800b954:	1994      	adds	r4, r2, r6
 800b956:	4e80      	ldr	r6, [pc, #512]	; (800bb58 <log+0x218>)
 800b958:	4f80      	ldr	r7, [pc, #512]	; (800bb5c <log+0x21c>)
 800b95a:	eb43 0506 	adc.w	r5, r3, r6
 800b95e:	42af      	cmp	r7, r5
 800b960:	f04f 36ff 	mov.w	r6, #4294967295
 800b964:	bf08      	it	eq
 800b966:	42a6      	cmpeq	r6, r4
 800b968:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800b96c:	d363      	bcc.n	800ba36 <log+0xf6>
 800b96e:	497c      	ldr	r1, [pc, #496]	; (800bb60 <log+0x220>)
 800b970:	2000      	movs	r0, #0
 800b972:	428b      	cmp	r3, r1
 800b974:	bf08      	it	eq
 800b976:	4282      	cmpeq	r2, r0
 800b978:	f000 80de 	beq.w	800bb38 <log+0x1f8>
 800b97c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b980:	ee30 7b47 	vsub.f64	d7, d0, d7
 800b984:	4b77      	ldr	r3, [pc, #476]	; (800bb64 <log+0x224>)
 800b986:	ee27 1b07 	vmul.f64	d1, d7, d7
 800b98a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800b98e:	ee27 3b01 	vmul.f64	d3, d7, d1
 800b992:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800b996:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b99a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800b99e:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800b9a2:	eea6 4b01 	vfma.f64	d4, d6, d1
 800b9a6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800b9aa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b9ae:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800b9b2:	eea5 6b01 	vfma.f64	d6, d5, d1
 800b9b6:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800b9ba:	eeb0 2b46 	vmov.f64	d2, d6
 800b9be:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800b9c2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b9c6:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800b9ca:	eea5 6b01 	vfma.f64	d6, d5, d1
 800b9ce:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800b9d2:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 800b9d6:	eea5 6b03 	vfma.f64	d6, d5, d3
 800b9da:	eea6 2b03 	vfma.f64	d2, d6, d3
 800b9de:	ed9f 6b58 	vldr	d6, [pc, #352]	; 800bb40 <log+0x200>
 800b9e2:	eea2 4b03 	vfma.f64	d4, d2, d3
 800b9e6:	eeb0 2b47 	vmov.f64	d2, d7
 800b9ea:	eea7 2b06 	vfma.f64	d2, d7, d6
 800b9ee:	eea7 2b46 	vfms.f64	d2, d7, d6
 800b9f2:	eeb0 6b47 	vmov.f64	d6, d7
 800b9f6:	ee37 8b42 	vsub.f64	d8, d7, d2
 800b9fa:	ee22 0b02 	vmul.f64	d0, d2, d2
 800b9fe:	eea0 6b01 	vfma.f64	d6, d0, d1
 800ba02:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ba06:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ba0a:	eea0 5b01 	vfma.f64	d5, d0, d1
 800ba0e:	ee21 1b08 	vmul.f64	d1, d1, d8
 800ba12:	eea1 5b07 	vfma.f64	d5, d1, d7
 800ba16:	eeb0 7b45 	vmov.f64	d7, d5
 800ba1a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ba1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ba22:	ed8d 7b00 	vstr	d7, [sp]
 800ba26:	ed9d 0b00 	vldr	d0, [sp]
 800ba2a:	b002      	add	sp, #8
 800ba2c:	ecbd 8b02 	vpop	{d8}
 800ba30:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800ba34:	4770      	bx	lr
 800ba36:	f1ac 0510 	sub.w	r5, ip, #16
 800ba3a:	f647 74df 	movw	r4, #32735	; 0x7fdf
 800ba3e:	42a5      	cmp	r5, r4
 800ba40:	d930      	bls.n	800baa4 <log+0x164>
 800ba42:	1890      	adds	r0, r2, r2
 800ba44:	eb43 0103 	adc.w	r1, r3, r3
 800ba48:	4301      	orrs	r1, r0
 800ba4a:	d107      	bne.n	800ba5c <log+0x11c>
 800ba4c:	2001      	movs	r0, #1
 800ba4e:	b002      	add	sp, #8
 800ba50:	ecbd 8b02 	vpop	{d8}
 800ba54:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800ba58:	f000 b8ba 	b.w	800bbd0 <__math_divzero>
 800ba5c:	4942      	ldr	r1, [pc, #264]	; (800bb68 <log+0x228>)
 800ba5e:	2000      	movs	r0, #0
 800ba60:	428b      	cmp	r3, r1
 800ba62:	bf08      	it	eq
 800ba64:	4282      	cmpeq	r2, r0
 800ba66:	d0de      	beq.n	800ba26 <log+0xe6>
 800ba68:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800ba6c:	d104      	bne.n	800ba78 <log+0x138>
 800ba6e:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800ba72:	ea31 010c 	bics.w	r1, r1, ip
 800ba76:	d108      	bne.n	800ba8a <log+0x14a>
 800ba78:	ed9d 0b00 	vldr	d0, [sp]
 800ba7c:	b002      	add	sp, #8
 800ba7e:	ecbd 8b02 	vpop	{d8}
 800ba82:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800ba86:	f000 b8bb 	b.w	800bc00 <__math_invalid>
 800ba8a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bb48 <log+0x208>
 800ba8e:	ed9d 6b00 	vldr	d6, [sp]
 800ba92:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ba96:	ec56 5b17 	vmov	r5, r6, d7
 800ba9a:	4834      	ldr	r0, [pc, #208]	; (800bb6c <log+0x22c>)
 800ba9c:	2400      	movs	r4, #0
 800ba9e:	192a      	adds	r2, r5, r4
 800baa0:	eb46 0300 	adc.w	r3, r6, r0
 800baa4:	2100      	movs	r1, #0
 800baa6:	1851      	adds	r1, r2, r1
 800baa8:	4931      	ldr	r1, [pc, #196]	; (800bb70 <log+0x230>)
 800baaa:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800baae:	eb43 0101 	adc.w	r1, r3, r1
 800bab2:	0d0c      	lsrs	r4, r1, #20
 800bab4:	2500      	movs	r5, #0
 800bab6:	ebb2 0805 	subs.w	r8, r2, r5
 800baba:	ea4f 5404 	mov.w	r4, r4, lsl #20
 800babe:	eb63 0904 	sbc.w	r9, r3, r4
 800bac2:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <log+0x224>)
 800bac4:	f3c1 3046 	ubfx	r0, r1, #13, #7
 800bac8:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 800bacc:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 800bad0:	ec49 8b16 	vmov	d6, r8, r9
 800bad4:	1509      	asrs	r1, r1, #20
 800bad6:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bada:	ee07 1a90 	vmov	s15, r1
 800bade:	ee24 1b04 	vmul.f64	d1, d4, d4
 800bae2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bae6:	ed93 5b00 	vldr	d5, [r3]
 800baea:	ee24 0b01 	vmul.f64	d0, d4, d1
 800baee:	ed93 3b02 	vldr	d3, [r3, #8]
 800baf2:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 800baf6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bafa:	ee34 5b07 	vadd.f64	d5, d4, d7
 800bafe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bb02:	ee37 7b04 	vadd.f64	d7, d7, d4
 800bb06:	eea3 7b06 	vfma.f64	d7, d3, d6
 800bb0a:	ed93 6b04 	vldr	d6, [r3, #16]
 800bb0e:	ed93 3b08 	vldr	d3, [r3, #32]
 800bb12:	eea6 7b01 	vfma.f64	d7, d6, d1
 800bb16:	ed93 6b06 	vldr	d6, [r3, #24]
 800bb1a:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800bb1e:	eea3 6b04 	vfma.f64	d6, d3, d4
 800bb22:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800bb26:	eea2 3b04 	vfma.f64	d3, d2, d4
 800bb2a:	eea3 6b01 	vfma.f64	d6, d3, d1
 800bb2e:	eea0 7b06 	vfma.f64	d7, d0, d6
 800bb32:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bb36:	e774      	b.n	800ba22 <log+0xe2>
 800bb38:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800bb50 <log+0x210>
 800bb3c:	e771      	b.n	800ba22 <log+0xe2>
 800bb3e:	bf00      	nop
 800bb40:	00000000 	.word	0x00000000
 800bb44:	41a00000 	.word	0x41a00000
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	43300000 	.word	0x43300000
	...
 800bb58:	c0120000 	.word	0xc0120000
 800bb5c:	000308ff 	.word	0x000308ff
 800bb60:	3ff00000 	.word	0x3ff00000
 800bb64:	08034708 	.word	0x08034708
 800bb68:	7ff00000 	.word	0x7ff00000
 800bb6c:	fcc00000 	.word	0xfcc00000
 800bb70:	c01a0000 	.word	0xc01a0000

0800bb74 <with_errno>:
 800bb74:	b513      	push	{r0, r1, r4, lr}
 800bb76:	4604      	mov	r4, r0
 800bb78:	ed8d 0b00 	vstr	d0, [sp]
 800bb7c:	f001 fa86 	bl	800d08c <__errno>
 800bb80:	ed9d 0b00 	vldr	d0, [sp]
 800bb84:	6004      	str	r4, [r0, #0]
 800bb86:	b002      	add	sp, #8
 800bb88:	bd10      	pop	{r4, pc}

0800bb8a <xflow>:
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	b158      	cbz	r0, 800bba6 <xflow+0x1c>
 800bb8e:	eeb1 7b40 	vneg.f64	d7, d0
 800bb92:	ed8d 7b00 	vstr	d7, [sp]
 800bb96:	ed9d 7b00 	vldr	d7, [sp]
 800bb9a:	2022      	movs	r0, #34	; 0x22
 800bb9c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bba0:	b002      	add	sp, #8
 800bba2:	f7ff bfe7 	b.w	800bb74 <with_errno>
 800bba6:	eeb0 7b40 	vmov.f64	d7, d0
 800bbaa:	e7f2      	b.n	800bb92 <xflow+0x8>
 800bbac:	0000      	movs	r0, r0
	...

0800bbb0 <__math_uflow>:
 800bbb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bbb8 <__math_uflow+0x8>
 800bbb4:	f7ff bfe9 	b.w	800bb8a <xflow>
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	10000000 	.word	0x10000000

0800bbc0 <__math_oflow>:
 800bbc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bbc8 <__math_oflow+0x8>
 800bbc4:	f7ff bfe1 	b.w	800bb8a <xflow>
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	70000000 	.word	0x70000000

0800bbd0 <__math_divzero>:
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bbd8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800bbdc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800bbe0:	ed8d 7b00 	vstr	d7, [sp]
 800bbe4:	ed9d 0b00 	vldr	d0, [sp]
 800bbe8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800bbf8 <__math_divzero+0x28>
 800bbec:	2022      	movs	r0, #34	; 0x22
 800bbee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800bbf2:	b002      	add	sp, #8
 800bbf4:	f7ff bfbe 	b.w	800bb74 <with_errno>
	...

0800bc00 <__math_invalid>:
 800bc00:	eeb0 7b40 	vmov.f64	d7, d0
 800bc04:	eeb4 7b47 	vcmp.f64	d7, d7
 800bc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800bc10:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800bc14:	d602      	bvs.n	800bc1c <__math_invalid+0x1c>
 800bc16:	2021      	movs	r0, #33	; 0x21
 800bc18:	f7ff bfac 	b.w	800bb74 <with_errno>
 800bc1c:	4770      	bx	lr

0800bc1e <__math_check_uflow>:
 800bc1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc26:	d102      	bne.n	800bc2e <__math_check_uflow+0x10>
 800bc28:	2022      	movs	r0, #34	; 0x22
 800bc2a:	f7ff bfa3 	b.w	800bb74 <with_errno>
 800bc2e:	4770      	bx	lr

0800bc30 <__math_check_oflow>:
 800bc30:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800bc50 <__math_check_oflow+0x20>
 800bc34:	eeb0 7bc0 	vabs.f64	d7, d0
 800bc38:	eeb4 7b46 	vcmp.f64	d7, d6
 800bc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc40:	dd02      	ble.n	800bc48 <__math_check_oflow+0x18>
 800bc42:	2022      	movs	r0, #34	; 0x22
 800bc44:	f7ff bf96 	b.w	800bb74 <with_errno>
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	f3af 8000 	nop.w
 800bc50:	ffffffff 	.word	0xffffffff
 800bc54:	7fefffff 	.word	0x7fefffff

0800bc58 <checkint>:
 800bc58:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bc5c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800bc60:	429a      	cmp	r2, r3
 800bc62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc64:	dd2b      	ble.n	800bcbe <checkint+0x66>
 800bc66:	f240 4333 	movw	r3, #1075	; 0x433
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	dc25      	bgt.n	800bcba <checkint+0x62>
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	f1a3 0620 	sub.w	r6, r3, #32
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	fa02 f606 	lsl.w	r6, r2, r6
 800bc7c:	fa02 f403 	lsl.w	r4, r2, r3
 800bc80:	f1c3 0520 	rsb	r5, r3, #32
 800bc84:	4334      	orrs	r4, r6
 800bc86:	fa22 f505 	lsr.w	r5, r2, r5
 800bc8a:	432c      	orrs	r4, r5
 800bc8c:	409a      	lsls	r2, r3
 800bc8e:	ea20 0602 	bic.w	r6, r0, r2
 800bc92:	ea21 0704 	bic.w	r7, r1, r4
 800bc96:	ea56 0207 	orrs.w	r2, r6, r7
 800bc9a:	f1a3 0420 	sub.w	r4, r3, #32
 800bc9e:	f1c3 0220 	rsb	r2, r3, #32
 800bca2:	d10c      	bne.n	800bcbe <checkint+0x66>
 800bca4:	40d8      	lsrs	r0, r3
 800bca6:	fa01 f302 	lsl.w	r3, r1, r2
 800bcaa:	4318      	orrs	r0, r3
 800bcac:	40e1      	lsrs	r1, r4
 800bcae:	4308      	orrs	r0, r1
 800bcb0:	f000 0301 	and.w	r3, r0, #1
 800bcb4:	f1c3 0002 	rsb	r0, r3, #2
 800bcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcba:	2002      	movs	r0, #2
 800bcbc:	e7fc      	b.n	800bcb8 <checkint+0x60>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e7fa      	b.n	800bcb8 <checkint+0x60>
 800bcc2:	0000      	movs	r0, r0
 800bcc4:	0000      	movs	r0, r0
	...

0800bcc8 <pow>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	ed2d 8b0a 	vpush	{d8-d12}
 800bcd0:	b09b      	sub	sp, #108	; 0x6c
 800bcd2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bcd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcda:	ed8d 1b00 	vstr	d1, [sp]
 800bcde:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800bce2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bce6:	f109 30ff 	add.w	r0, r9, #4294967295
 800bcea:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800bcee:	4288      	cmp	r0, r1
 800bcf0:	46cc      	mov	ip, r9
 800bcf2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800bcf6:	d806      	bhi.n	800bd06 <pow+0x3e>
 800bcf8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800bcfc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800bd00:	297f      	cmp	r1, #127	; 0x7f
 800bd02:	f240 81ab 	bls.w	800c05c <pow+0x394>
 800bd06:	19b1      	adds	r1, r6, r6
 800bd08:	9104      	str	r1, [sp, #16]
 800bd0a:	eb47 0107 	adc.w	r1, r7, r7
 800bd0e:	9105      	str	r1, [sp, #20]
 800bd10:	9904      	ldr	r1, [sp, #16]
 800bd12:	f111 31ff 	adds.w	r1, r1, #4294967295
 800bd16:	460a      	mov	r2, r1
 800bd18:	9905      	ldr	r1, [sp, #20]
 800bd1a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800bd1e:	460b      	mov	r3, r1
 800bd20:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800bd24:	f06f 0001 	mvn.w	r0, #1
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	bf08      	it	eq
 800bd2c:	4290      	cmpeq	r0, r2
 800bd2e:	d260      	bcs.n	800bdf2 <pow+0x12a>
 800bd30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	d11a      	bne.n	800bd6e <pow+0xa6>
 800bd38:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800bd3c:	1923      	adds	r3, r4, r4
 800bd3e:	930c      	str	r3, [sp, #48]	; 0x30
 800bd40:	eb42 0302 	adc.w	r3, r2, r2
 800bd44:	930d      	str	r3, [sp, #52]	; 0x34
 800bd46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd4a:	4bcf      	ldr	r3, [pc, #828]	; (800c088 <pow+0x3c0>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	428b      	cmp	r3, r1
 800bd50:	bf08      	it	eq
 800bd52:	4282      	cmpeq	r2, r0
 800bd54:	f080 8265 	bcs.w	800c222 <pow+0x55a>
 800bd58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd5c:	ed9d 6b00 	vldr	d6, [sp]
 800bd60:	ee37 0b06 	vadd.f64	d0, d7, d6
 800bd64:	b01b      	add	sp, #108	; 0x6c
 800bd66:	ecbd 8b0a 	vpop	{d8-d12}
 800bd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6e:	49c7      	ldr	r1, [pc, #796]	; (800c08c <pow+0x3c4>)
 800bd70:	2000      	movs	r0, #0
 800bd72:	428d      	cmp	r5, r1
 800bd74:	bf08      	it	eq
 800bd76:	4284      	cmpeq	r4, r0
 800bd78:	d10b      	bne.n	800bd92 <pow+0xca>
 800bd7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bd7e:	19b3      	adds	r3, r6, r6
 800bd80:	930e      	str	r3, [sp, #56]	; 0x38
 800bd82:	eb42 0302 	adc.w	r3, r2, r2
 800bd86:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bd8c:	4bbe      	ldr	r3, [pc, #760]	; (800c088 <pow+0x3c0>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	e7dd      	b.n	800bd4e <pow+0x86>
 800bd92:	1921      	adds	r1, r4, r4
 800bd94:	9106      	str	r1, [sp, #24]
 800bd96:	eb45 0105 	adc.w	r1, r5, r5
 800bd9a:	9107      	str	r1, [sp, #28]
 800bd9c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bda0:	49bb      	ldr	r1, [pc, #748]	; (800c090 <pow+0x3c8>)
 800bda2:	2000      	movs	r0, #0
 800bda4:	42a1      	cmp	r1, r4
 800bda6:	bf08      	it	eq
 800bda8:	4298      	cmpeq	r0, r3
 800bdaa:	d3d5      	bcc.n	800bd58 <pow+0x90>
 800bdac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bdb0:	428c      	cmp	r4, r1
 800bdb2:	bf08      	it	eq
 800bdb4:	4283      	cmpeq	r3, r0
 800bdb6:	d1cf      	bne.n	800bd58 <pow+0x90>
 800bdb8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bdbc:	49b5      	ldr	r1, [pc, #724]	; (800c094 <pow+0x3cc>)
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	428c      	cmp	r4, r1
 800bdc2:	bf08      	it	eq
 800bdc4:	4283      	cmpeq	r3, r0
 800bdc6:	f000 822c 	beq.w	800c222 <pow+0x55a>
 800bdca:	49b3      	ldr	r1, [pc, #716]	; (800c098 <pow+0x3d0>)
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	42a1      	cmp	r1, r4
 800bdd2:	bf08      	it	eq
 800bdd4:	4298      	cmpeq	r0, r3
 800bdd6:	ea6f 0307 	mvn.w	r3, r7
 800bdda:	bf34      	ite	cc
 800bddc:	2201      	movcc	r2, #1
 800bdde:	2200      	movcs	r2, #0
 800bde0:	0fdb      	lsrs	r3, r3, #31
 800bde2:	429a      	cmp	r2, r3
 800bde4:	f040 821a 	bne.w	800c21c <pow+0x554>
 800bde8:	ed9d 7b00 	vldr	d7, [sp]
 800bdec:	ee27 0b07 	vmul.f64	d0, d7, d7
 800bdf0:	e7b8      	b.n	800bd64 <pow+0x9c>
 800bdf2:	1923      	adds	r3, r4, r4
 800bdf4:	9308      	str	r3, [sp, #32]
 800bdf6:	eb45 0305 	adc.w	r3, r5, r5
 800bdfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfc:	9b08      	ldr	r3, [sp, #32]
 800bdfe:	f113 33ff 	adds.w	r3, r3, #4294967295
 800be02:	9310      	str	r3, [sp, #64]	; 0x40
 800be04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be06:	f143 33ff 	adc.w	r3, r3, #4294967295
 800be0a:	9311      	str	r3, [sp, #68]	; 0x44
 800be0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be10:	4299      	cmp	r1, r3
 800be12:	bf08      	it	eq
 800be14:	4290      	cmpeq	r0, r2
 800be16:	d22d      	bcs.n	800be74 <pow+0x1ac>
 800be18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be1c:	2c00      	cmp	r4, #0
 800be1e:	f175 0300 	sbcs.w	r3, r5, #0
 800be22:	ee27 0b07 	vmul.f64	d0, d7, d7
 800be26:	da16      	bge.n	800be56 <pow+0x18e>
 800be28:	4630      	mov	r0, r6
 800be2a:	4639      	mov	r1, r7
 800be2c:	f7ff ff14 	bl	800bc58 <checkint>
 800be30:	2801      	cmp	r0, #1
 800be32:	d110      	bne.n	800be56 <pow+0x18e>
 800be34:	eeb1 0b40 	vneg.f64	d0, d0
 800be38:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800be3c:	4323      	orrs	r3, r4
 800be3e:	d10c      	bne.n	800be5a <pow+0x192>
 800be40:	2e00      	cmp	r6, #0
 800be42:	f177 0300 	sbcs.w	r3, r7, #0
 800be46:	da8d      	bge.n	800bd64 <pow+0x9c>
 800be48:	b01b      	add	sp, #108	; 0x6c
 800be4a:	ecbd 8b0a 	vpop	{d8-d12}
 800be4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be52:	f7ff bebd 	b.w	800bbd0 <__math_divzero>
 800be56:	2000      	movs	r0, #0
 800be58:	e7ee      	b.n	800be38 <pow+0x170>
 800be5a:	2e00      	cmp	r6, #0
 800be5c:	f177 0300 	sbcs.w	r3, r7, #0
 800be60:	da80      	bge.n	800bd64 <pow+0x9c>
 800be62:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800be66:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800be6a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800be6e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800be72:	e777      	b.n	800bd64 <pow+0x9c>
 800be74:	2c00      	cmp	r4, #0
 800be76:	f175 0300 	sbcs.w	r3, r5, #0
 800be7a:	da35      	bge.n	800bee8 <pow+0x220>
 800be7c:	4630      	mov	r0, r6
 800be7e:	4639      	mov	r1, r7
 800be80:	f7ff feea 	bl	800bc58 <checkint>
 800be84:	b940      	cbnz	r0, 800be98 <pow+0x1d0>
 800be86:	ed9d 0b02 	vldr	d0, [sp, #8]
 800be8a:	b01b      	add	sp, #108	; 0x6c
 800be8c:	ecbd 8b0a 	vpop	{d8-d12}
 800be90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	f7ff beb4 	b.w	800bc00 <__math_invalid>
 800be98:	2801      	cmp	r0, #1
 800be9a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800be9e:	bf14      	ite	ne
 800bea0:	2000      	movne	r0, #0
 800bea2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800bea6:	461d      	mov	r5, r3
 800bea8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800beac:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800beb0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800beb4:	2a7f      	cmp	r2, #127	; 0x7f
 800beb6:	d933      	bls.n	800bf20 <pow+0x258>
 800beb8:	4974      	ldr	r1, [pc, #464]	; (800c08c <pow+0x3c4>)
 800beba:	2000      	movs	r0, #0
 800bebc:	428d      	cmp	r5, r1
 800bebe:	bf08      	it	eq
 800bec0:	4284      	cmpeq	r4, r0
 800bec2:	f000 81ae 	beq.w	800c222 <pow+0x55a>
 800bec6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800beca:	4293      	cmp	r3, r2
 800becc:	d80e      	bhi.n	800beec <pow+0x224>
 800bece:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bed2:	ed9d 7b00 	vldr	d7, [sp]
 800bed6:	42a9      	cmp	r1, r5
 800bed8:	bf08      	it	eq
 800beda:	42a0      	cmpeq	r0, r4
 800bedc:	bf34      	ite	cc
 800bede:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800bee2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800bee6:	e73d      	b.n	800bd64 <pow+0x9c>
 800bee8:	2000      	movs	r0, #0
 800beea:	e7df      	b.n	800beac <pow+0x1e4>
 800beec:	42a9      	cmp	r1, r5
 800beee:	bf08      	it	eq
 800bef0:	42a0      	cmpeq	r0, r4
 800bef2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bef6:	bf2c      	ite	cs
 800bef8:	2301      	movcs	r3, #1
 800befa:	2300      	movcc	r3, #0
 800befc:	4590      	cmp	r8, r2
 800befe:	bf8c      	ite	hi
 800bf00:	f04f 0800 	movhi.w	r8, #0
 800bf04:	f04f 0801 	movls.w	r8, #1
 800bf08:	4543      	cmp	r3, r8
 800bf0a:	f04f 0000 	mov.w	r0, #0
 800bf0e:	f000 80af 	beq.w	800c070 <pow+0x3a8>
 800bf12:	b01b      	add	sp, #108	; 0x6c
 800bf14:	ecbd 8b0a 	vpop	{d8-d12}
 800bf18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	f7ff be50 	b.w	800bbc0 <__math_oflow>
 800bf20:	f1bc 0f00 	cmp.w	ip, #0
 800bf24:	d10e      	bne.n	800bf44 <pow+0x27c>
 800bf26:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c080 <pow+0x3b8>
 800bf2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf2e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf32:	ec57 6b17 	vmov	r6, r7, d7
 800bf36:	4b59      	ldr	r3, [pc, #356]	; (800c09c <pow+0x3d4>)
 800bf38:	2100      	movs	r1, #0
 800bf3a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bf3e:	1874      	adds	r4, r6, r1
 800bf40:	eb42 0503 	adc.w	r5, r2, r3
 800bf44:	2300      	movs	r3, #0
 800bf46:	18e3      	adds	r3, r4, r3
 800bf48:	4b55      	ldr	r3, [pc, #340]	; (800c0a0 <pow+0x3d8>)
 800bf4a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800bf4e:	eb45 0303 	adc.w	r3, r5, r3
 800bf52:	1519      	asrs	r1, r3, #20
 800bf54:	ee03 1a10 	vmov	s6, r1
 800bf58:	0d1e      	lsrs	r6, r3, #20
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800bf60:	0536      	lsls	r6, r6, #20
 800bf62:	1a63      	subs	r3, r4, r1
 800bf64:	9312      	str	r3, [sp, #72]	; 0x48
 800bf66:	eb65 0306 	sbc.w	r3, r5, r6
 800bf6a:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf6c:	4b4d      	ldr	r3, [pc, #308]	; (800c0a4 <pow+0x3dc>)
 800bf6e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800bf72:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bf76:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800bf7a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bf7e:	ed93 7b00 	vldr	d7, [r3]
 800bf82:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800bf86:	ed93 4b02 	vldr	d4, [r3, #8]
 800bf8a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800bf8e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800bf92:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800bf96:	ee36 9b05 	vadd.f64	d9, d6, d5
 800bf9a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800bf9e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800bfa2:	ed93 4b04 	vldr	d4, [r3, #16]
 800bfa6:	ee35 5b06 	vadd.f64	d5, d5, d6
 800bfaa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bfae:	ee26 4b04 	vmul.f64	d4, d6, d4
 800bfb2:	ed93 3b08 	vldr	d3, [r3, #32]
 800bfb6:	ee26 0b04 	vmul.f64	d0, d6, d4
 800bfba:	eeb0 8b40 	vmov.f64	d8, d0
 800bfbe:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800bfc2:	ed93 4b06 	vldr	d4, [r3, #24]
 800bfc6:	ee26 ab00 	vmul.f64	d10, d6, d0
 800bfca:	ee39 1b00 	vadd.f64	d1, d9, d0
 800bfce:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800bfd2:	eea6 4b03 	vfma.f64	d4, d6, d3
 800bfd6:	ee39 9b41 	vsub.f64	d9, d9, d1
 800bfda:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800bfde:	ee37 8b08 	vadd.f64	d8, d7, d8
 800bfe2:	ee39 9b00 	vadd.f64	d9, d9, d0
 800bfe6:	eea6 3b02 	vfma.f64	d3, d6, d2
 800bfea:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800bfee:	ee38 9b09 	vadd.f64	d9, d8, d9
 800bff2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800bff6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800bffa:	ed9d 6b00 	vldr	d6, [sp]
 800bffe:	eea0 3b02 	vfma.f64	d3, d0, d2
 800c002:	eea0 4b03 	vfma.f64	d4, d0, d3
 800c006:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800c00a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800c00e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c012:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c016:	eeb0 3b46 	vmov.f64	d3, d6
 800c01a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800c01e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c022:	ee31 9b09 	vadd.f64	d9, d1, d9
 800c026:	ed9d 6b00 	vldr	d6, [sp]
 800c02a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800c02e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800c032:	193c      	adds	r4, r7, r4
 800c034:	2c3e      	cmp	r4, #62	; 0x3e
 800c036:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800c03a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800c03e:	d934      	bls.n	800c0aa <pow+0x3e2>
 800c040:	428c      	cmp	r4, r1
 800c042:	da0d      	bge.n	800c060 <pow+0x398>
 800c044:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c048:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c04c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c050:	2800      	cmp	r0, #0
 800c052:	f43f ae87 	beq.w	800bd64 <pow+0x9c>
 800c056:	eeb1 0b40 	vneg.f64	d0, d0
 800c05a:	e683      	b.n	800bd64 <pow+0x9c>
 800c05c:	2000      	movs	r0, #0
 800c05e:	e771      	b.n	800bf44 <pow+0x27c>
 800c060:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800c064:	d920      	bls.n	800c0a8 <pow+0x3e0>
 800c066:	2a00      	cmp	r2, #0
 800c068:	f173 0300 	sbcs.w	r3, r3, #0
 800c06c:	f6bf af51 	bge.w	800bf12 <pow+0x24a>
 800c070:	b01b      	add	sp, #108	; 0x6c
 800c072:	ecbd 8b0a 	vpop	{d8-d12}
 800c076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07a:	f7ff bd99 	b.w	800bbb0 <__math_uflow>
 800c07e:	bf00      	nop
 800c080:	00000000 	.word	0x00000000
 800c084:	43300000 	.word	0x43300000
 800c088:	fff00000 	.word	0xfff00000
 800c08c:	3ff00000 	.word	0x3ff00000
 800c090:	ffe00000 	.word	0xffe00000
 800c094:	7fe00000 	.word	0x7fe00000
 800c098:	7fdfffff 	.word	0x7fdfffff
 800c09c:	fcc00000 	.word	0xfcc00000
 800c0a0:	c0196aab 	.word	0xc0196aab
 800c0a4:	08034f98 	.word	0x08034f98
 800c0a8:	460f      	mov	r7, r1
 800c0aa:	4e65      	ldr	r6, [pc, #404]	; (800c240 <pow+0x578>)
 800c0ac:	ed9d 4b02 	vldr	d4, [sp, #8]
 800c0b0:	ed96 6b02 	vldr	d6, [r6, #8]
 800c0b4:	ed96 7b00 	vldr	d7, [r6]
 800c0b8:	eeb0 5b46 	vmov.f64	d5, d6
 800c0bc:	eea4 5b07 	vfma.f64	d5, d4, d7
 800c0c0:	ed8d 5b00 	vstr	d5, [sp]
 800c0c4:	ee35 6b46 	vsub.f64	d6, d5, d6
 800c0c8:	eeb0 5b44 	vmov.f64	d5, d4
 800c0cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0d0:	ed96 7b04 	vldr	d7, [r6, #16]
 800c0d4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800c0d8:	eea6 5b07 	vfma.f64	d5, d6, d7
 800c0dc:	eeb0 7b45 	vmov.f64	d7, d5
 800c0e0:	ed96 5b06 	vldr	d5, [r6, #24]
 800c0e4:	1849      	adds	r1, r1, r1
 800c0e6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800c0ea:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800c0ee:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c0f2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800c0f6:	ee33 3b07 	vadd.f64	d3, d3, d7
 800c0fa:	ee23 6b03 	vmul.f64	d6, d3, d3
 800c0fe:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800c102:	ed96 5b08 	vldr	d5, [r6, #32]
 800c106:	ee33 7b07 	vadd.f64	d7, d3, d7
 800c10a:	1814      	adds	r4, r2, r0
 800c10c:	0365      	lsls	r5, r4, #13
 800c10e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800c112:	eea3 5b04 	vfma.f64	d5, d3, d4
 800c116:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c11a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800c11e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800c122:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800c126:	2000      	movs	r0, #0
 800c128:	eb10 0a04 	adds.w	sl, r0, r4
 800c12c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800c130:	eb45 0b0c 	adc.w	fp, r5, ip
 800c134:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c138:	2f00      	cmp	r7, #0
 800c13a:	d16a      	bne.n	800c212 <pow+0x54a>
 800c13c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800c140:	4639      	mov	r1, r7
 800c142:	ea50 0301 	orrs.w	r3, r0, r1
 800c146:	f04f 0300 	mov.w	r3, #0
 800c14a:	d115      	bne.n	800c178 <pow+0x4b0>
 800c14c:	eb1a 0303 	adds.w	r3, sl, r3
 800c150:	ee0b 3a10 	vmov	s22, r3
 800c154:	4b3b      	ldr	r3, [pc, #236]	; (800c244 <pow+0x57c>)
 800c156:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800c228 <pow+0x560>
 800c15a:	eb4b 0303 	adc.w	r3, fp, r3
 800c15e:	ee0b 3a90 	vmov	s23, r3
 800c162:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800c166:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800c16a:	b01b      	add	sp, #108	; 0x6c
 800c16c:	ecbd 8b0a 	vpop	{d8-d12}
 800c170:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	f7ff bd5c 	b.w	800bc30 <__math_check_oflow>
 800c178:	eb1a 0303 	adds.w	r3, sl, r3
 800c17c:	930a      	str	r3, [sp, #40]	; 0x28
 800c17e:	4b32      	ldr	r3, [pc, #200]	; (800c248 <pow+0x580>)
 800c180:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c184:	eb4b 0303 	adc.w	r3, fp, r3
 800c188:	930b      	str	r3, [sp, #44]	; 0x2c
 800c18a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c18e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800c192:	ee35 7b06 	vadd.f64	d7, d5, d6
 800c196:	eeb0 3bc7 	vabs.f64	d3, d7
 800c19a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800c19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800c230 <pow+0x568>
 800c1a6:	d52b      	bpl.n	800c200 <pow+0x538>
 800c1a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c1ac:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800c1b8:	ee35 6b06 	vadd.f64	d6, d5, d6
 800c1bc:	bf48      	it	mi
 800c1be:	eeb0 4b43 	vmovmi.f64	d4, d3
 800c1c2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800c1c6:	ee34 5b43 	vsub.f64	d5, d4, d3
 800c1ca:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c1ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c1d2:	ee37 7b03 	vadd.f64	d7, d7, d3
 800c1d6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c1da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e2:	d105      	bne.n	800c1f0 <pow+0x528>
 800c1e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1e6:	463a      	mov	r2, r7
 800c1e8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c1ec:	ec43 2b17 	vmov	d7, r2, r3
 800c1f0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800c1f4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800c1f8:	ee26 6b00 	vmul.f64	d6, d6, d0
 800c1fc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800c200:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c204:	b01b      	add	sp, #108	; 0x6c
 800c206:	ecbd 8b0a 	vpop	{d8-d12}
 800c20a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20e:	f7ff bd06 	b.w	800bc1e <__math_check_uflow>
 800c212:	ec4b ab10 	vmov	d0, sl, fp
 800c216:	eea7 0b00 	vfma.f64	d0, d7, d0
 800c21a:	e5a3      	b.n	800bd64 <pow+0x9c>
 800c21c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800c238 <pow+0x570>
 800c220:	e5a0      	b.n	800bd64 <pow+0x9c>
 800c222:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c226:	e59d      	b.n	800bd64 <pow+0x9c>
 800c228:	00000000 	.word	0x00000000
 800c22c:	7f000000 	.word	0x7f000000
 800c230:	00000000 	.word	0x00000000
 800c234:	00100000 	.word	0x00100000
	...
 800c240:	08036288 	.word	0x08036288
 800c244:	c0f00000 	.word	0xc0f00000
 800c248:	3fe00000 	.word	0x3fe00000
 800c24c:	00000000 	.word	0x00000000

0800c250 <ceil>:
 800c250:	ee10 1a90 	vmov	r1, s1
 800c254:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c258:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c25c:	2b13      	cmp	r3, #19
 800c25e:	b530      	push	{r4, r5, lr}
 800c260:	ee10 0a10 	vmov	r0, s0
 800c264:	ee10 5a10 	vmov	r5, s0
 800c268:	dc2f      	bgt.n	800c2ca <ceil+0x7a>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	da13      	bge.n	800c296 <ceil+0x46>
 800c26e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800c330 <ceil+0xe0>
 800c272:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c276:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27e:	dd05      	ble.n	800c28c <ceil+0x3c>
 800c280:	2900      	cmp	r1, #0
 800c282:	db4c      	blt.n	800c31e <ceil+0xce>
 800c284:	4301      	orrs	r1, r0
 800c286:	d04e      	beq.n	800c326 <ceil+0xd6>
 800c288:	492b      	ldr	r1, [pc, #172]	; (800c338 <ceil+0xe8>)
 800c28a:	2000      	movs	r0, #0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4602      	mov	r2, r0
 800c290:	ec43 2b10 	vmov	d0, r2, r3
 800c294:	e020      	b.n	800c2d8 <ceil+0x88>
 800c296:	4a29      	ldr	r2, [pc, #164]	; (800c33c <ceil+0xec>)
 800c298:	411a      	asrs	r2, r3
 800c29a:	ea01 0402 	and.w	r4, r1, r2
 800c29e:	4304      	orrs	r4, r0
 800c2a0:	d01a      	beq.n	800c2d8 <ceil+0x88>
 800c2a2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800c330 <ceil+0xe0>
 800c2a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c2aa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b2:	ddeb      	ble.n	800c28c <ceil+0x3c>
 800c2b4:	2900      	cmp	r1, #0
 800c2b6:	bfc2      	ittt	gt
 800c2b8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800c2bc:	fa40 f303 	asrgt.w	r3, r0, r3
 800c2c0:	18c9      	addgt	r1, r1, r3
 800c2c2:	ea21 0102 	bic.w	r1, r1, r2
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e7e0      	b.n	800c28c <ceil+0x3c>
 800c2ca:	2b33      	cmp	r3, #51	; 0x33
 800c2cc:	dd05      	ble.n	800c2da <ceil+0x8a>
 800c2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2d2:	d101      	bne.n	800c2d8 <ceil+0x88>
 800c2d4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c2d8:	bd30      	pop	{r4, r5, pc}
 800c2da:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800c2de:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e2:	40e2      	lsrs	r2, r4
 800c2e4:	4202      	tst	r2, r0
 800c2e6:	d0f7      	beq.n	800c2d8 <ceil+0x88>
 800c2e8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800c330 <ceil+0xe0>
 800c2ec:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c2f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f8:	ddc8      	ble.n	800c28c <ceil+0x3c>
 800c2fa:	2900      	cmp	r1, #0
 800c2fc:	dd02      	ble.n	800c304 <ceil+0xb4>
 800c2fe:	2b14      	cmp	r3, #20
 800c300:	d103      	bne.n	800c30a <ceil+0xba>
 800c302:	3101      	adds	r1, #1
 800c304:	ea20 0002 	bic.w	r0, r0, r2
 800c308:	e7c0      	b.n	800c28c <ceil+0x3c>
 800c30a:	2401      	movs	r4, #1
 800c30c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c310:	fa04 f303 	lsl.w	r3, r4, r3
 800c314:	4418      	add	r0, r3
 800c316:	42a8      	cmp	r0, r5
 800c318:	bf38      	it	cc
 800c31a:	1909      	addcc	r1, r1, r4
 800c31c:	e7f2      	b.n	800c304 <ceil+0xb4>
 800c31e:	2000      	movs	r0, #0
 800c320:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c324:	e7b2      	b.n	800c28c <ceil+0x3c>
 800c326:	4608      	mov	r0, r1
 800c328:	e7b0      	b.n	800c28c <ceil+0x3c>
 800c32a:	bf00      	nop
 800c32c:	f3af 8000 	nop.w
 800c330:	8800759c 	.word	0x8800759c
 800c334:	7e37e43c 	.word	0x7e37e43c
 800c338:	3ff00000 	.word	0x3ff00000
 800c33c:	000fffff 	.word	0x000fffff

0800c340 <cos>:
 800c340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c342:	eeb0 7b40 	vmov.f64	d7, d0
 800c346:	ee17 3a90 	vmov	r3, s15
 800c34a:	4a1f      	ldr	r2, [pc, #124]	; (800c3c8 <cos+0x88>)
 800c34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c350:	4293      	cmp	r3, r2
 800c352:	dc04      	bgt.n	800c35e <cos+0x1e>
 800c354:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800c3c0 <cos+0x80>
 800c358:	f000 fa0a 	bl	800c770 <__kernel_cos>
 800c35c:	e004      	b.n	800c368 <cos+0x28>
 800c35e:	4a1b      	ldr	r2, [pc, #108]	; (800c3cc <cos+0x8c>)
 800c360:	4293      	cmp	r3, r2
 800c362:	dd04      	ble.n	800c36e <cos+0x2e>
 800c364:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c368:	b005      	add	sp, #20
 800c36a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c36e:	4668      	mov	r0, sp
 800c370:	f000 f8ba 	bl	800c4e8 <__ieee754_rem_pio2>
 800c374:	f000 0003 	and.w	r0, r0, #3
 800c378:	2801      	cmp	r0, #1
 800c37a:	d007      	beq.n	800c38c <cos+0x4c>
 800c37c:	2802      	cmp	r0, #2
 800c37e:	d00e      	beq.n	800c39e <cos+0x5e>
 800c380:	b9a0      	cbnz	r0, 800c3ac <cos+0x6c>
 800c382:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c386:	ed9d 0b00 	vldr	d0, [sp]
 800c38a:	e7e5      	b.n	800c358 <cos+0x18>
 800c38c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c390:	ed9d 0b00 	vldr	d0, [sp]
 800c394:	f000 fcd8 	bl	800cd48 <__kernel_sin>
 800c398:	eeb1 0b40 	vneg.f64	d0, d0
 800c39c:	e7e4      	b.n	800c368 <cos+0x28>
 800c39e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3a2:	ed9d 0b00 	vldr	d0, [sp]
 800c3a6:	f000 f9e3 	bl	800c770 <__kernel_cos>
 800c3aa:	e7f5      	b.n	800c398 <cos+0x58>
 800c3ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3b0:	ed9d 0b00 	vldr	d0, [sp]
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	f000 fcc7 	bl	800cd48 <__kernel_sin>
 800c3ba:	e7d5      	b.n	800c368 <cos+0x28>
 800c3bc:	f3af 8000 	nop.w
	...
 800c3c8:	3fe921fb 	.word	0x3fe921fb
 800c3cc:	7fefffff 	.word	0x7fefffff

0800c3d0 <logf>:
 800c3d0:	ee10 3a10 	vmov	r3, s0
 800c3d4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c3d8:	b410      	push	{r4}
 800c3da:	d055      	beq.n	800c488 <logf+0xb8>
 800c3dc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800c3e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800c3e4:	d31a      	bcc.n	800c41c <logf+0x4c>
 800c3e6:	005a      	lsls	r2, r3, #1
 800c3e8:	d104      	bne.n	800c3f4 <logf+0x24>
 800c3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ee:	2001      	movs	r0, #1
 800c3f0:	f000 bd0e 	b.w	800ce10 <__math_divzerof>
 800c3f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c3f8:	d043      	beq.n	800c482 <logf+0xb2>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	db02      	blt.n	800c404 <logf+0x34>
 800c3fe:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c402:	d303      	bcc.n	800c40c <logf+0x3c>
 800c404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c408:	f000 bd12 	b.w	800ce30 <__math_invalidf>
 800c40c:	eddf 7a20 	vldr	s15, [pc, #128]	; 800c490 <logf+0xc0>
 800c410:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c414:	ee10 3a10 	vmov	r3, s0
 800c418:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800c41c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800c420:	491c      	ldr	r1, [pc, #112]	; (800c494 <logf+0xc4>)
 800c422:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800c426:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c42a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800c42e:	0dd4      	lsrs	r4, r2, #23
 800c430:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c434:	05e4      	lsls	r4, r4, #23
 800c436:	ed90 6b00 	vldr	d6, [r0]
 800c43a:	1b1b      	subs	r3, r3, r4
 800c43c:	ee07 3a90 	vmov	s15, r3
 800c440:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800c444:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c448:	15d2      	asrs	r2, r2, #23
 800c44a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800c44e:	ed90 6b02 	vldr	d6, [r0, #8]
 800c452:	ee07 2a90 	vmov	s15, r2
 800c456:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800c45a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c45e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c462:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800c466:	ee20 5b00 	vmul.f64	d5, d0, d0
 800c46a:	eea4 7b00 	vfma.f64	d7, d4, d0
 800c46e:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800c472:	ee30 0b06 	vadd.f64	d0, d0, d6
 800c476:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c47a:	eea5 0b07 	vfma.f64	d0, d5, d7
 800c47e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c498 <logf+0xc8>
 800c48c:	e7f9      	b.n	800c482 <logf+0xb2>
 800c48e:	bf00      	nop
 800c490:	4b000000 	.word	0x4b000000
 800c494:	08035fe0 	.word	0x08035fe0
 800c498:	00000000 	.word	0x00000000

0800c49c <sqrtf>:
 800c49c:	b508      	push	{r3, lr}
 800c49e:	ed2d 8b02 	vpush	{d8}
 800c4a2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4a6:	f000 f95f 	bl	800c768 <__ieee754_sqrtf>
 800c4aa:	4b0d      	ldr	r3, [pc, #52]	; (800c4e0 <sqrtf+0x44>)
 800c4ac:	f993 3000 	ldrsb.w	r3, [r3]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	d011      	beq.n	800c4d8 <sqrtf+0x3c>
 800c4b4:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4bc:	d60c      	bvs.n	800c4d8 <sqrtf+0x3c>
 800c4be:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c4e4 <sqrtf+0x48>
 800c4c2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ca:	d505      	bpl.n	800c4d8 <sqrtf+0x3c>
 800c4cc:	f000 fdde 	bl	800d08c <__errno>
 800c4d0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c4d4:	2321      	movs	r3, #33	; 0x21
 800c4d6:	6003      	str	r3, [r0, #0]
 800c4d8:	ecbd 8b02 	vpop	{d8}
 800c4dc:	bd08      	pop	{r3, pc}
 800c4de:	bf00      	nop
 800c4e0:	20000018 	.word	0x20000018
 800c4e4:	00000000 	.word	0x00000000

0800c4e8 <__ieee754_rem_pio2>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	eeb0 7b40 	vmov.f64	d7, d0
 800c4ee:	ee17 5a90 	vmov	r5, s15
 800c4f2:	4b97      	ldr	r3, [pc, #604]	; (800c750 <__ieee754_rem_pio2+0x268>)
 800c4f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c4f8:	429e      	cmp	r6, r3
 800c4fa:	b088      	sub	sp, #32
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	dc07      	bgt.n	800c510 <__ieee754_rem_pio2+0x28>
 800c500:	2200      	movs	r2, #0
 800c502:	2300      	movs	r3, #0
 800c504:	ed84 0b00 	vstr	d0, [r4]
 800c508:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c50c:	2000      	movs	r0, #0
 800c50e:	e01b      	b.n	800c548 <__ieee754_rem_pio2+0x60>
 800c510:	4b90      	ldr	r3, [pc, #576]	; (800c754 <__ieee754_rem_pio2+0x26c>)
 800c512:	429e      	cmp	r6, r3
 800c514:	dc3b      	bgt.n	800c58e <__ieee754_rem_pio2+0xa6>
 800c516:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c710 <__ieee754_rem_pio2+0x228>
 800c520:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c524:	dd19      	ble.n	800c55a <__ieee754_rem_pio2+0x72>
 800c526:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c52a:	429e      	cmp	r6, r3
 800c52c:	d00e      	beq.n	800c54c <__ieee754_rem_pio2+0x64>
 800c52e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800c718 <__ieee754_rem_pio2+0x230>
 800c532:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c536:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c53a:	ed84 5b00 	vstr	d5, [r4]
 800c53e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c542:	ed84 7b02 	vstr	d7, [r4, #8]
 800c546:	2001      	movs	r0, #1
 800c548:	b008      	add	sp, #32
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
 800c54c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c720 <__ieee754_rem_pio2+0x238>
 800c550:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c554:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c728 <__ieee754_rem_pio2+0x240>
 800c558:	e7eb      	b.n	800c532 <__ieee754_rem_pio2+0x4a>
 800c55a:	429e      	cmp	r6, r3
 800c55c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c560:	d00e      	beq.n	800c580 <__ieee754_rem_pio2+0x98>
 800c562:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800c718 <__ieee754_rem_pio2+0x230>
 800c566:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c56a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c56e:	ed84 5b00 	vstr	d5, [r4]
 800c572:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c576:	f04f 30ff 	mov.w	r0, #4294967295
 800c57a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c57e:	e7e3      	b.n	800c548 <__ieee754_rem_pio2+0x60>
 800c580:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c720 <__ieee754_rem_pio2+0x238>
 800c584:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c588:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c728 <__ieee754_rem_pio2+0x240>
 800c58c:	e7eb      	b.n	800c566 <__ieee754_rem_pio2+0x7e>
 800c58e:	4b72      	ldr	r3, [pc, #456]	; (800c758 <__ieee754_rem_pio2+0x270>)
 800c590:	429e      	cmp	r6, r3
 800c592:	dc6e      	bgt.n	800c672 <__ieee754_rem_pio2+0x18a>
 800c594:	f000 fc5b 	bl	800ce4e <fabs>
 800c598:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c59c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800c730 <__ieee754_rem_pio2+0x248>
 800c5a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c5a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c5a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c5ac:	ee17 0a90 	vmov	r0, s15
 800c5b0:	eeb1 4b45 	vneg.f64	d4, d5
 800c5b4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c710 <__ieee754_rem_pio2+0x228>
 800c5b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c5bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c718 <__ieee754_rem_pio2+0x230>
 800c5c0:	281f      	cmp	r0, #31
 800c5c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c5c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c5ca:	dc08      	bgt.n	800c5de <__ieee754_rem_pio2+0xf6>
 800c5cc:	4b63      	ldr	r3, [pc, #396]	; (800c75c <__ieee754_rem_pio2+0x274>)
 800c5ce:	1e42      	subs	r2, r0, #1
 800c5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d4:	42b3      	cmp	r3, r6
 800c5d6:	d002      	beq.n	800c5de <__ieee754_rem_pio2+0xf6>
 800c5d8:	ed84 6b00 	vstr	d6, [r4]
 800c5dc:	e024      	b.n	800c628 <__ieee754_rem_pio2+0x140>
 800c5de:	ee16 3a90 	vmov	r3, s13
 800c5e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c5e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c5ea:	2b10      	cmp	r3, #16
 800c5ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c5f0:	ddf2      	ble.n	800c5d8 <__ieee754_rem_pio2+0xf0>
 800c5f2:	eeb0 6b40 	vmov.f64	d6, d0
 800c5f6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800c720 <__ieee754_rem_pio2+0x238>
 800c5fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c5fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c602:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c606:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800c728 <__ieee754_rem_pio2+0x240>
 800c60a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c60e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c612:	ee13 3a90 	vmov	r3, s7
 800c616:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	2b31      	cmp	r3, #49	; 0x31
 800c61e:	dc17      	bgt.n	800c650 <__ieee754_rem_pio2+0x168>
 800c620:	eeb0 0b46 	vmov.f64	d0, d6
 800c624:	ed84 3b00 	vstr	d3, [r4]
 800c628:	ed94 6b00 	vldr	d6, [r4]
 800c62c:	2d00      	cmp	r5, #0
 800c62e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c632:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c636:	ed84 7b02 	vstr	d7, [r4, #8]
 800c63a:	da85      	bge.n	800c548 <__ieee754_rem_pio2+0x60>
 800c63c:	eeb1 6b46 	vneg.f64	d6, d6
 800c640:	ed84 6b00 	vstr	d6, [r4]
 800c644:	eeb1 7b47 	vneg.f64	d7, d7
 800c648:	4240      	negs	r0, r0
 800c64a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c64e:	e77b      	b.n	800c548 <__ieee754_rem_pio2+0x60>
 800c650:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800c738 <__ieee754_rem_pio2+0x250>
 800c654:	eeb0 0b46 	vmov.f64	d0, d6
 800c658:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c65c:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c660:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800c740 <__ieee754_rem_pio2+0x258>
 800c664:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c668:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c66c:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c670:	e7b2      	b.n	800c5d8 <__ieee754_rem_pio2+0xf0>
 800c672:	4b3b      	ldr	r3, [pc, #236]	; (800c760 <__ieee754_rem_pio2+0x278>)
 800c674:	429e      	cmp	r6, r3
 800c676:	dd06      	ble.n	800c686 <__ieee754_rem_pio2+0x19e>
 800c678:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c67c:	ed80 7b02 	vstr	d7, [r0, #8]
 800c680:	ed80 7b00 	vstr	d7, [r0]
 800c684:	e742      	b.n	800c50c <__ieee754_rem_pio2+0x24>
 800c686:	1532      	asrs	r2, r6, #20
 800c688:	ee10 0a10 	vmov	r0, s0
 800c68c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c690:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c694:	ec41 0b17 	vmov	d7, r0, r1
 800c698:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c69c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800c748 <__ieee754_rem_pio2+0x260>
 800c6a0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c6a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c6ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c6b0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c6b4:	a902      	add	r1, sp, #8
 800c6b6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c6ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6be:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c6c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c6c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6ca:	2603      	movs	r6, #3
 800c6cc:	4608      	mov	r0, r1
 800c6ce:	ed91 7b04 	vldr	d7, [r1, #16]
 800c6d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6da:	4633      	mov	r3, r6
 800c6dc:	f1a1 0108 	sub.w	r1, r1, #8
 800c6e0:	f106 36ff 	add.w	r6, r6, #4294967295
 800c6e4:	d0f3      	beq.n	800c6ce <__ieee754_rem_pio2+0x1e6>
 800c6e6:	491f      	ldr	r1, [pc, #124]	; (800c764 <__ieee754_rem_pio2+0x27c>)
 800c6e8:	9101      	str	r1, [sp, #4]
 800c6ea:	2102      	movs	r1, #2
 800c6ec:	9100      	str	r1, [sp, #0]
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	f000 f8aa 	bl	800c848 <__kernel_rem_pio2>
 800c6f4:	2d00      	cmp	r5, #0
 800c6f6:	f6bf af27 	bge.w	800c548 <__ieee754_rem_pio2+0x60>
 800c6fa:	ed94 7b00 	vldr	d7, [r4]
 800c6fe:	eeb1 7b47 	vneg.f64	d7, d7
 800c702:	ed84 7b00 	vstr	d7, [r4]
 800c706:	ed94 7b02 	vldr	d7, [r4, #8]
 800c70a:	e79b      	b.n	800c644 <__ieee754_rem_pio2+0x15c>
 800c70c:	f3af 8000 	nop.w
 800c710:	54400000 	.word	0x54400000
 800c714:	3ff921fb 	.word	0x3ff921fb
 800c718:	1a626331 	.word	0x1a626331
 800c71c:	3dd0b461 	.word	0x3dd0b461
 800c720:	1a600000 	.word	0x1a600000
 800c724:	3dd0b461 	.word	0x3dd0b461
 800c728:	2e037073 	.word	0x2e037073
 800c72c:	3ba3198a 	.word	0x3ba3198a
 800c730:	6dc9c883 	.word	0x6dc9c883
 800c734:	3fe45f30 	.word	0x3fe45f30
 800c738:	2e000000 	.word	0x2e000000
 800c73c:	3ba3198a 	.word	0x3ba3198a
 800c740:	252049c1 	.word	0x252049c1
 800c744:	397b839a 	.word	0x397b839a
 800c748:	00000000 	.word	0x00000000
 800c74c:	41700000 	.word	0x41700000
 800c750:	3fe921fb 	.word	0x3fe921fb
 800c754:	4002d97b 	.word	0x4002d97b
 800c758:	413921fb 	.word	0x413921fb
 800c75c:	08036100 	.word	0x08036100
 800c760:	7fefffff 	.word	0x7fefffff
 800c764:	08036180 	.word	0x08036180

0800c768 <__ieee754_sqrtf>:
 800c768:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c76c:	4770      	bx	lr
	...

0800c770 <__kernel_cos>:
 800c770:	ee10 1a90 	vmov	r1, s1
 800c774:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c77c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c780:	da05      	bge.n	800c78e <__kernel_cos+0x1e>
 800c782:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c786:	ee17 3a90 	vmov	r3, s15
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d03d      	beq.n	800c80a <__kernel_cos+0x9a>
 800c78e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c792:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c810 <__kernel_cos+0xa0>
 800c796:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c818 <__kernel_cos+0xa8>
 800c79a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c79e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c820 <__kernel_cos+0xb0>
 800c7a2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c7a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c828 <__kernel_cos+0xb8>
 800c7aa:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c7ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c830 <__kernel_cos+0xc0>
 800c7b2:	4b23      	ldr	r3, [pc, #140]	; (800c840 <__kernel_cos+0xd0>)
 800c7b4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c7b8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c838 <__kernel_cos+0xc8>
 800c7bc:	4299      	cmp	r1, r3
 800c7be:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c7c2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c7c6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c7ca:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c7ce:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c7d2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c7d6:	dc04      	bgt.n	800c7e2 <__kernel_cos+0x72>
 800c7d8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c7dc:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c7e0:	4770      	bx	lr
 800c7e2:	4b18      	ldr	r3, [pc, #96]	; (800c844 <__kernel_cos+0xd4>)
 800c7e4:	4299      	cmp	r1, r3
 800c7e6:	dc0d      	bgt.n	800c804 <__kernel_cos+0x94>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c7ee:	ec43 2b15 	vmov	d5, r2, r3
 800c7f2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c7f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c7fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c802:	4770      	bx	lr
 800c804:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c808:	e7f3      	b.n	800c7f2 <__kernel_cos+0x82>
 800c80a:	eeb0 0b44 	vmov.f64	d0, d4
 800c80e:	4770      	bx	lr
 800c810:	be8838d4 	.word	0xbe8838d4
 800c814:	bda8fae9 	.word	0xbda8fae9
 800c818:	bdb4b1c4 	.word	0xbdb4b1c4
 800c81c:	3e21ee9e 	.word	0x3e21ee9e
 800c820:	809c52ad 	.word	0x809c52ad
 800c824:	be927e4f 	.word	0xbe927e4f
 800c828:	19cb1590 	.word	0x19cb1590
 800c82c:	3efa01a0 	.word	0x3efa01a0
 800c830:	16c15177 	.word	0x16c15177
 800c834:	bf56c16c 	.word	0xbf56c16c
 800c838:	5555554c 	.word	0x5555554c
 800c83c:	3fa55555 	.word	0x3fa55555
 800c840:	3fd33332 	.word	0x3fd33332
 800c844:	3fe90000 	.word	0x3fe90000

0800c848 <__kernel_rem_pio2>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	ed2d 8b06 	vpush	{d8-d10}
 800c850:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800c854:	469b      	mov	fp, r3
 800c856:	460f      	mov	r7, r1
 800c858:	4bcf      	ldr	r3, [pc, #828]	; (800cb98 <__kernel_rem_pio2+0x350>)
 800c85a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800c85c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800c860:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c864:	9000      	str	r0, [sp, #0]
 800c866:	f112 0f14 	cmn.w	r2, #20
 800c86a:	bfa8      	it	ge
 800c86c:	2318      	movge	r3, #24
 800c86e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c872:	bfb8      	it	lt
 800c874:	2300      	movlt	r3, #0
 800c876:	f06f 0417 	mvn.w	r4, #23
 800c87a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800cb80 <__kernel_rem_pio2+0x338>
 800c87e:	bfa4      	itt	ge
 800c880:	f1a2 0a03 	subge.w	sl, r2, #3
 800c884:	fb9a f3f3 	sdivge	r3, sl, r3
 800c888:	fb03 4404 	mla	r4, r3, r4, r4
 800c88c:	1a5d      	subs	r5, r3, r1
 800c88e:	4414      	add	r4, r2
 800c890:	eb09 0601 	add.w	r6, r9, r1
 800c894:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800c898:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800c89c:	2200      	movs	r2, #0
 800c89e:	42b2      	cmp	r2, r6
 800c8a0:	dd12      	ble.n	800c8c8 <__kernel_rem_pio2+0x80>
 800c8a2:	aa18      	add	r2, sp, #96	; 0x60
 800c8a4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c8a8:	460e      	mov	r6, r1
 800c8aa:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800c8ae:	f1cb 0a01 	rsb	sl, fp, #1
 800c8b2:	eb0a 0006 	add.w	r0, sl, r6
 800c8b6:	4581      	cmp	r9, r0
 800c8b8:	db25      	blt.n	800c906 <__kernel_rem_pio2+0xbe>
 800c8ba:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800cb80 <__kernel_rem_pio2+0x338>
 800c8be:	f8dd e000 	ldr.w	lr, [sp]
 800c8c2:	4615      	mov	r5, r2
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	e015      	b.n	800c8f4 <__kernel_rem_pio2+0xac>
 800c8c8:	42d5      	cmn	r5, r2
 800c8ca:	d409      	bmi.n	800c8e0 <__kernel_rem_pio2+0x98>
 800c8cc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800c8d0:	ee07 0a90 	vmov	s15, r0
 800c8d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c8d8:	eca8 7b02 	vstmia	r8!, {d7}
 800c8dc:	3201      	adds	r2, #1
 800c8de:	e7de      	b.n	800c89e <__kernel_rem_pio2+0x56>
 800c8e0:	eeb0 7b46 	vmov.f64	d7, d6
 800c8e4:	e7f8      	b.n	800c8d8 <__kernel_rem_pio2+0x90>
 800c8e6:	ecbe 5b02 	vldmia	lr!, {d5}
 800c8ea:	ed95 6b00 	vldr	d6, [r5]
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c8f4:	4288      	cmp	r0, r1
 800c8f6:	f1a5 0508 	sub.w	r5, r5, #8
 800c8fa:	ddf4      	ble.n	800c8e6 <__kernel_rem_pio2+0x9e>
 800c8fc:	eca8 7b02 	vstmia	r8!, {d7}
 800c900:	3208      	adds	r2, #8
 800c902:	3601      	adds	r6, #1
 800c904:	e7d5      	b.n	800c8b2 <__kernel_rem_pio2+0x6a>
 800c906:	aa04      	add	r2, sp, #16
 800c908:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800cb88 <__kernel_rem_pio2+0x340>
 800c90c:	ed9f aba0 	vldr	d10, [pc, #640]	; 800cb90 <__kernel_rem_pio2+0x348>
 800c910:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c914:	9201      	str	r2, [sp, #4]
 800c916:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800c91a:	464e      	mov	r6, r9
 800c91c:	ab90      	add	r3, sp, #576	; 0x240
 800c91e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c922:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800c926:	ab04      	add	r3, sp, #16
 800c928:	4618      	mov	r0, r3
 800c92a:	4632      	mov	r2, r6
 800c92c:	2a00      	cmp	r2, #0
 800c92e:	dc4e      	bgt.n	800c9ce <__kernel_rem_pio2+0x186>
 800c930:	4620      	mov	r0, r4
 800c932:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800c936:	f000 fb07 	bl	800cf48 <scalbn>
 800c93a:	eeb0 8b40 	vmov.f64	d8, d0
 800c93e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c942:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c946:	f000 fa8b 	bl	800ce60 <floor>
 800c94a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c94e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c952:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c956:	2c00      	cmp	r4, #0
 800c958:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c95c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800c960:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c964:	ee17 8a90 	vmov	r8, s15
 800c968:	dd46      	ble.n	800c9f8 <__kernel_rem_pio2+0x1b0>
 800c96a:	1e70      	subs	r0, r6, #1
 800c96c:	aa04      	add	r2, sp, #16
 800c96e:	f1c4 0c18 	rsb	ip, r4, #24
 800c972:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800c976:	fa45 f20c 	asr.w	r2, r5, ip
 800c97a:	4490      	add	r8, r2
 800c97c:	fa02 f20c 	lsl.w	r2, r2, ip
 800c980:	1aad      	subs	r5, r5, r2
 800c982:	aa04      	add	r2, sp, #16
 800c984:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800c988:	f1c4 0217 	rsb	r2, r4, #23
 800c98c:	4115      	asrs	r5, r2
 800c98e:	2d00      	cmp	r5, #0
 800c990:	dd41      	ble.n	800ca16 <__kernel_rem_pio2+0x1ce>
 800c992:	f04f 0c00 	mov.w	ip, #0
 800c996:	f108 0801 	add.w	r8, r8, #1
 800c99a:	4660      	mov	r0, ip
 800c99c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c9a0:	4566      	cmp	r6, ip
 800c9a2:	dc69      	bgt.n	800ca78 <__kernel_rem_pio2+0x230>
 800c9a4:	2c00      	cmp	r4, #0
 800c9a6:	dd03      	ble.n	800c9b0 <__kernel_rem_pio2+0x168>
 800c9a8:	2c01      	cmp	r4, #1
 800c9aa:	d076      	beq.n	800ca9a <__kernel_rem_pio2+0x252>
 800c9ac:	2c02      	cmp	r4, #2
 800c9ae:	d07f      	beq.n	800cab0 <__kernel_rem_pio2+0x268>
 800c9b0:	2d02      	cmp	r5, #2
 800c9b2:	d130      	bne.n	800ca16 <__kernel_rem_pio2+0x1ce>
 800c9b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c9b8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c9bc:	b358      	cbz	r0, 800ca16 <__kernel_rem_pio2+0x1ce>
 800c9be:	4620      	mov	r0, r4
 800c9c0:	9102      	str	r1, [sp, #8]
 800c9c2:	f000 fac1 	bl	800cf48 <scalbn>
 800c9c6:	9902      	ldr	r1, [sp, #8]
 800c9c8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c9cc:	e023      	b.n	800ca16 <__kernel_rem_pio2+0x1ce>
 800c9ce:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c9d2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c9d6:	3a01      	subs	r2, #1
 800c9d8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c9dc:	ad68      	add	r5, sp, #416	; 0x1a0
 800c9de:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c9e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c9e6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800c9ea:	eca0 0a01 	vstmia	r0!, {s0}
 800c9ee:	ed95 0b00 	vldr	d0, [r5]
 800c9f2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c9f6:	e799      	b.n	800c92c <__kernel_rem_pio2+0xe4>
 800c9f8:	d105      	bne.n	800ca06 <__kernel_rem_pio2+0x1be>
 800c9fa:	1e72      	subs	r2, r6, #1
 800c9fc:	a804      	add	r0, sp, #16
 800c9fe:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800ca02:	15ed      	asrs	r5, r5, #23
 800ca04:	e7c3      	b.n	800c98e <__kernel_rem_pio2+0x146>
 800ca06:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ca0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ca0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca12:	da2f      	bge.n	800ca74 <__kernel_rem_pio2+0x22c>
 800ca14:	2500      	movs	r5, #0
 800ca16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ca1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1e:	f040 8087 	bne.w	800cb30 <__kernel_rem_pio2+0x2e8>
 800ca22:	1e73      	subs	r3, r6, #1
 800ca24:	4618      	mov	r0, r3
 800ca26:	f04f 0c00 	mov.w	ip, #0
 800ca2a:	4548      	cmp	r0, r9
 800ca2c:	da47      	bge.n	800cabe <__kernel_rem_pio2+0x276>
 800ca2e:	f1bc 0f00 	cmp.w	ip, #0
 800ca32:	d070      	beq.n	800cb16 <__kernel_rem_pio2+0x2ce>
 800ca34:	aa04      	add	r2, sp, #16
 800ca36:	3c18      	subs	r4, #24
 800ca38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	d075      	beq.n	800cb2c <__kernel_rem_pio2+0x2e4>
 800ca40:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ca44:	4620      	mov	r0, r4
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	f000 fa7e 	bl	800cf48 <scalbn>
 800ca4c:	9b00      	ldr	r3, [sp, #0]
 800ca4e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800cb88 <__kernel_rem_pio2+0x340>
 800ca52:	461a      	mov	r2, r3
 800ca54:	2a00      	cmp	r2, #0
 800ca56:	f280 80ac 	bge.w	800cbb2 <__kernel_rem_pio2+0x36a>
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	2900      	cmp	r1, #0
 800ca60:	f2c0 80cd 	blt.w	800cbfe <__kernel_rem_pio2+0x3b6>
 800ca64:	aa68      	add	r2, sp, #416	; 0x1a0
 800ca66:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800ca6a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800cb80 <__kernel_rem_pio2+0x338>
 800ca6e:	4e4b      	ldr	r6, [pc, #300]	; (800cb9c <__kernel_rem_pio2+0x354>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	e0b8      	b.n	800cbe6 <__kernel_rem_pio2+0x39e>
 800ca74:	2502      	movs	r5, #2
 800ca76:	e78c      	b.n	800c992 <__kernel_rem_pio2+0x14a>
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	b948      	cbnz	r0, 800ca90 <__kernel_rem_pio2+0x248>
 800ca7c:	b11a      	cbz	r2, 800ca86 <__kernel_rem_pio2+0x23e>
 800ca7e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f10c 0c01 	add.w	ip, ip, #1
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	e787      	b.n	800c9a0 <__kernel_rem_pio2+0x158>
 800ca90:	ebae 0202 	sub.w	r2, lr, r2
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	4602      	mov	r2, r0
 800ca98:	e7f5      	b.n	800ca86 <__kernel_rem_pio2+0x23e>
 800ca9a:	1e72      	subs	r2, r6, #1
 800ca9c:	ab04      	add	r3, sp, #16
 800ca9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800caa6:	f10d 0c10 	add.w	ip, sp, #16
 800caaa:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800caae:	e77f      	b.n	800c9b0 <__kernel_rem_pio2+0x168>
 800cab0:	1e72      	subs	r2, r6, #1
 800cab2:	ab04      	add	r3, sp, #16
 800cab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cab8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cabc:	e7f3      	b.n	800caa6 <__kernel_rem_pio2+0x25e>
 800cabe:	aa04      	add	r2, sp, #16
 800cac0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800cac4:	3801      	subs	r0, #1
 800cac6:	ea4c 0c02 	orr.w	ip, ip, r2
 800caca:	e7ae      	b.n	800ca2a <__kernel_rem_pio2+0x1e2>
 800cacc:	3001      	adds	r0, #1
 800cace:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cad2:	2a00      	cmp	r2, #0
 800cad4:	d0fa      	beq.n	800cacc <__kernel_rem_pio2+0x284>
 800cad6:	eb06 020b 	add.w	r2, r6, fp
 800cada:	ad18      	add	r5, sp, #96	; 0x60
 800cadc:	1c73      	adds	r3, r6, #1
 800cade:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800cae2:	4406      	add	r6, r0
 800cae4:	429e      	cmp	r6, r3
 800cae6:	f6ff af19 	blt.w	800c91c <__kernel_rem_pio2+0xd4>
 800caea:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800caee:	9d00      	ldr	r5, [sp, #0]
 800caf0:	ee07 0a90 	vmov	s15, r0
 800caf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800caf8:	2000      	movs	r0, #0
 800cafa:	eca2 7b02 	vstmia	r2!, {d7}
 800cafe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800cb80 <__kernel_rem_pio2+0x338>
 800cb02:	4694      	mov	ip, r2
 800cb04:	4288      	cmp	r0, r1
 800cb06:	dd09      	ble.n	800cb1c <__kernel_rem_pio2+0x2d4>
 800cb08:	a868      	add	r0, sp, #416	; 0x1a0
 800cb0a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800cb0e:	ed80 7b00 	vstr	d7, [r0]
 800cb12:	3301      	adds	r3, #1
 800cb14:	e7e6      	b.n	800cae4 <__kernel_rem_pio2+0x29c>
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	2001      	movs	r0, #1
 800cb1a:	e7d8      	b.n	800cace <__kernel_rem_pio2+0x286>
 800cb1c:	ecb5 5b02 	vldmia	r5!, {d5}
 800cb20:	ed3c 6b02 	vldmdb	ip!, {d6}
 800cb24:	3001      	adds	r0, #1
 800cb26:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cb2a:	e7eb      	b.n	800cb04 <__kernel_rem_pio2+0x2bc>
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	e781      	b.n	800ca34 <__kernel_rem_pio2+0x1ec>
 800cb30:	4260      	negs	r0, r4
 800cb32:	eeb0 0b48 	vmov.f64	d0, d8
 800cb36:	f000 fa07 	bl	800cf48 <scalbn>
 800cb3a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800cb90 <__kernel_rem_pio2+0x348>
 800cb3e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800cb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb46:	db2b      	blt.n	800cba0 <__kernel_rem_pio2+0x358>
 800cb48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800cb88 <__kernel_rem_pio2+0x340>
 800cb4c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cb50:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cb54:	aa04      	add	r2, sp, #16
 800cb56:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800cb5a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800cb5e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cb62:	a904      	add	r1, sp, #16
 800cb64:	ee10 3a10 	vmov	r3, s0
 800cb68:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cb6c:	ee17 2a10 	vmov	r2, s14
 800cb70:	1c73      	adds	r3, r6, #1
 800cb72:	3418      	adds	r4, #24
 800cb74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cb78:	e762      	b.n	800ca40 <__kernel_rem_pio2+0x1f8>
 800cb7a:	bf00      	nop
 800cb7c:	f3af 8000 	nop.w
	...
 800cb8c:	3e700000 	.word	0x3e700000
 800cb90:	00000000 	.word	0x00000000
 800cb94:	41700000 	.word	0x41700000
 800cb98:	08036b38 	.word	0x08036b38
 800cb9c:	08036af8 	.word	0x08036af8
 800cba0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cba4:	aa04      	add	r2, sp, #16
 800cba6:	ee10 3a10 	vmov	r3, s0
 800cbaa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cbae:	4633      	mov	r3, r6
 800cbb0:	e746      	b.n	800ca40 <__kernel_rem_pio2+0x1f8>
 800cbb2:	a804      	add	r0, sp, #16
 800cbb4:	a968      	add	r1, sp, #416	; 0x1a0
 800cbb6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cbba:	9000      	str	r0, [sp, #0]
 800cbbc:	ee07 0a90 	vmov	s15, r0
 800cbc0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800cbc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cbc8:	3a01      	subs	r2, #1
 800cbca:	ee27 7b00 	vmul.f64	d7, d7, d0
 800cbce:	ee20 0b06 	vmul.f64	d0, d0, d6
 800cbd2:	ed81 7b00 	vstr	d7, [r1]
 800cbd6:	e73d      	b.n	800ca54 <__kernel_rem_pio2+0x20c>
 800cbd8:	ecb6 5b02 	vldmia	r6!, {d5}
 800cbdc:	ecb4 6b02 	vldmia	r4!, {d6}
 800cbe0:	3201      	adds	r2, #1
 800cbe2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cbe6:	454a      	cmp	r2, r9
 800cbe8:	dc01      	bgt.n	800cbee <__kernel_rem_pio2+0x3a6>
 800cbea:	4290      	cmp	r0, r2
 800cbec:	daf4      	bge.n	800cbd8 <__kernel_rem_pio2+0x390>
 800cbee:	aa40      	add	r2, sp, #256	; 0x100
 800cbf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cbf4:	ed82 7b00 	vstr	d7, [r2]
 800cbf8:	3901      	subs	r1, #1
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	e72f      	b.n	800ca5e <__kernel_rem_pio2+0x216>
 800cbfe:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800cc00:	2a02      	cmp	r2, #2
 800cc02:	dc0a      	bgt.n	800cc1a <__kernel_rem_pio2+0x3d2>
 800cc04:	2a00      	cmp	r2, #0
 800cc06:	dc5a      	bgt.n	800ccbe <__kernel_rem_pio2+0x476>
 800cc08:	d039      	beq.n	800cc7e <__kernel_rem_pio2+0x436>
 800cc0a:	f008 0007 	and.w	r0, r8, #7
 800cc0e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800cc12:	ecbd 8b06 	vpop	{d8-d10}
 800cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800cc1c:	2a03      	cmp	r2, #3
 800cc1e:	d1f4      	bne.n	800cc0a <__kernel_rem_pio2+0x3c2>
 800cc20:	aa40      	add	r2, sp, #256	; 0x100
 800cc22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cc26:	4611      	mov	r1, r2
 800cc28:	4618      	mov	r0, r3
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	f1a1 0108 	sub.w	r1, r1, #8
 800cc30:	dc52      	bgt.n	800ccd8 <__kernel_rem_pio2+0x490>
 800cc32:	4619      	mov	r1, r3
 800cc34:	2901      	cmp	r1, #1
 800cc36:	f1a2 0208 	sub.w	r2, r2, #8
 800cc3a:	dc5d      	bgt.n	800ccf8 <__kernel_rem_pio2+0x4b0>
 800cc3c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800cd40 <__kernel_rem_pio2+0x4f8>
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	dc69      	bgt.n	800cd18 <__kernel_rem_pio2+0x4d0>
 800cc44:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800cc48:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800cc4c:	2d00      	cmp	r5, #0
 800cc4e:	d16c      	bne.n	800cd2a <__kernel_rem_pio2+0x4e2>
 800cc50:	ed87 5b00 	vstr	d5, [r7]
 800cc54:	ed87 6b02 	vstr	d6, [r7, #8]
 800cc58:	ed87 7b04 	vstr	d7, [r7, #16]
 800cc5c:	e7d5      	b.n	800cc0a <__kernel_rem_pio2+0x3c2>
 800cc5e:	aa40      	add	r2, sp, #256	; 0x100
 800cc60:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cc64:	ed92 6b00 	vldr	d6, [r2]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	daf5      	bge.n	800cc5e <__kernel_rem_pio2+0x416>
 800cc72:	b10d      	cbz	r5, 800cc78 <__kernel_rem_pio2+0x430>
 800cc74:	eeb1 7b47 	vneg.f64	d7, d7
 800cc78:	ed87 7b00 	vstr	d7, [r7]
 800cc7c:	e7c5      	b.n	800cc0a <__kernel_rem_pio2+0x3c2>
 800cc7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800cd40 <__kernel_rem_pio2+0x4f8>
 800cc82:	e7f4      	b.n	800cc6e <__kernel_rem_pio2+0x426>
 800cc84:	a940      	add	r1, sp, #256	; 0x100
 800cc86:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800cc8a:	ed91 7b00 	vldr	d7, [r1]
 800cc8e:	3a01      	subs	r2, #1
 800cc90:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cc94:	2a00      	cmp	r2, #0
 800cc96:	daf5      	bge.n	800cc84 <__kernel_rem_pio2+0x43c>
 800cc98:	b1ad      	cbz	r5, 800ccc6 <__kernel_rem_pio2+0x47e>
 800cc9a:	eeb1 7b46 	vneg.f64	d7, d6
 800cc9e:	ed87 7b00 	vstr	d7, [r7]
 800cca2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800cca6:	a942      	add	r1, sp, #264	; 0x108
 800cca8:	2201      	movs	r2, #1
 800ccaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	da0c      	bge.n	800cccc <__kernel_rem_pio2+0x484>
 800ccb2:	b10d      	cbz	r5, 800ccb8 <__kernel_rem_pio2+0x470>
 800ccb4:	eeb1 7b47 	vneg.f64	d7, d7
 800ccb8:	ed87 7b02 	vstr	d7, [r7, #8]
 800ccbc:	e7a5      	b.n	800cc0a <__kernel_rem_pio2+0x3c2>
 800ccbe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800cd40 <__kernel_rem_pio2+0x4f8>
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	e7e6      	b.n	800cc94 <__kernel_rem_pio2+0x44c>
 800ccc6:	eeb0 7b46 	vmov.f64	d7, d6
 800ccca:	e7e8      	b.n	800cc9e <__kernel_rem_pio2+0x456>
 800cccc:	ecb1 6b02 	vldmia	r1!, {d6}
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ccd6:	e7ea      	b.n	800ccae <__kernel_rem_pio2+0x466>
 800ccd8:	ed91 7b00 	vldr	d7, [r1]
 800ccdc:	ed91 5b02 	vldr	d5, [r1, #8]
 800cce0:	3801      	subs	r0, #1
 800cce2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cce6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ccea:	ed81 6b00 	vstr	d6, [r1]
 800ccee:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ccf2:	ed81 7b02 	vstr	d7, [r1, #8]
 800ccf6:	e798      	b.n	800cc2a <__kernel_rem_pio2+0x3e2>
 800ccf8:	ed92 7b00 	vldr	d7, [r2]
 800ccfc:	ed92 5b02 	vldr	d5, [r2, #8]
 800cd00:	3901      	subs	r1, #1
 800cd02:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cd06:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd0a:	ed82 6b00 	vstr	d6, [r2]
 800cd0e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cd12:	ed82 7b02 	vstr	d7, [r2, #8]
 800cd16:	e78d      	b.n	800cc34 <__kernel_rem_pio2+0x3ec>
 800cd18:	aa40      	add	r2, sp, #256	; 0x100
 800cd1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd1e:	ed92 6b00 	vldr	d6, [r2]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd28:	e78a      	b.n	800cc40 <__kernel_rem_pio2+0x3f8>
 800cd2a:	eeb1 5b45 	vneg.f64	d5, d5
 800cd2e:	eeb1 6b46 	vneg.f64	d6, d6
 800cd32:	ed87 5b00 	vstr	d5, [r7]
 800cd36:	eeb1 7b47 	vneg.f64	d7, d7
 800cd3a:	ed87 6b02 	vstr	d6, [r7, #8]
 800cd3e:	e78b      	b.n	800cc58 <__kernel_rem_pio2+0x410>
	...

0800cd48 <__kernel_sin>:
 800cd48:	ee10 3a90 	vmov	r3, s1
 800cd4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd50:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cd54:	da04      	bge.n	800cd60 <__kernel_sin+0x18>
 800cd56:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800cd5a:	ee17 3a90 	vmov	r3, s15
 800cd5e:	b35b      	cbz	r3, 800cdb8 <__kernel_sin+0x70>
 800cd60:	ee20 6b00 	vmul.f64	d6, d0, d0
 800cd64:	ee20 5b06 	vmul.f64	d5, d0, d6
 800cd68:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800cdc0 <__kernel_sin+0x78>
 800cd6c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cdc8 <__kernel_sin+0x80>
 800cd70:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cd74:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cdd0 <__kernel_sin+0x88>
 800cd78:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cd7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cdd8 <__kernel_sin+0x90>
 800cd80:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cd84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cde0 <__kernel_sin+0x98>
 800cd88:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cd8c:	b930      	cbnz	r0, 800cd9c <__kernel_sin+0x54>
 800cd8e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cde8 <__kernel_sin+0xa0>
 800cd92:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cd96:	eea4 0b05 	vfma.f64	d0, d4, d5
 800cd9a:	4770      	bx	lr
 800cd9c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800cda0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cda4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800cda8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800cdac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cdf0 <__kernel_sin+0xa8>
 800cdb0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800cdb4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	f3af 8000 	nop.w
 800cdc0:	5acfd57c 	.word	0x5acfd57c
 800cdc4:	3de5d93a 	.word	0x3de5d93a
 800cdc8:	8a2b9ceb 	.word	0x8a2b9ceb
 800cdcc:	be5ae5e6 	.word	0xbe5ae5e6
 800cdd0:	57b1fe7d 	.word	0x57b1fe7d
 800cdd4:	3ec71de3 	.word	0x3ec71de3
 800cdd8:	19c161d5 	.word	0x19c161d5
 800cddc:	bf2a01a0 	.word	0xbf2a01a0
 800cde0:	1110f8a6 	.word	0x1110f8a6
 800cde4:	3f811111 	.word	0x3f811111
 800cde8:	55555549 	.word	0x55555549
 800cdec:	bfc55555 	.word	0xbfc55555
 800cdf0:	55555549 	.word	0x55555549
 800cdf4:	3fc55555 	.word	0x3fc55555

0800cdf8 <with_errnof>:
 800cdf8:	b513      	push	{r0, r1, r4, lr}
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ce00:	f000 f944 	bl	800d08c <__errno>
 800ce04:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ce08:	6004      	str	r4, [r0, #0]
 800ce0a:	b002      	add	sp, #8
 800ce0c:	bd10      	pop	{r4, pc}
	...

0800ce10 <__math_divzerof>:
 800ce10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce14:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800ce1e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ce2c <__math_divzerof+0x1c>
 800ce22:	2022      	movs	r0, #34	; 0x22
 800ce24:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ce28:	f7ff bfe6 	b.w	800cdf8 <with_errnof>
 800ce2c:	00000000 	.word	0x00000000

0800ce30 <__math_invalidf>:
 800ce30:	eef0 7a40 	vmov.f32	s15, s0
 800ce34:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ce38:	eef4 7a67 	vcmp.f32	s15, s15
 800ce3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce40:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ce44:	d602      	bvs.n	800ce4c <__math_invalidf+0x1c>
 800ce46:	2021      	movs	r0, #33	; 0x21
 800ce48:	f7ff bfd6 	b.w	800cdf8 <with_errnof>
 800ce4c:	4770      	bx	lr

0800ce4e <fabs>:
 800ce4e:	ec51 0b10 	vmov	r0, r1, d0
 800ce52:	ee10 2a10 	vmov	r2, s0
 800ce56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce5a:	ec43 2b10 	vmov	d0, r2, r3
 800ce5e:	4770      	bx	lr

0800ce60 <floor>:
 800ce60:	ee10 1a90 	vmov	r1, s1
 800ce64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce68:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ce6c:	2b13      	cmp	r3, #19
 800ce6e:	b530      	push	{r4, r5, lr}
 800ce70:	ee10 0a10 	vmov	r0, s0
 800ce74:	ee10 5a10 	vmov	r5, s0
 800ce78:	dc31      	bgt.n	800cede <floor+0x7e>
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	da15      	bge.n	800ceaa <floor+0x4a>
 800ce7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cf38 <floor+0xd8>
 800ce82:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ce86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ce8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8e:	dd07      	ble.n	800cea0 <floor+0x40>
 800ce90:	2900      	cmp	r1, #0
 800ce92:	da4e      	bge.n	800cf32 <floor+0xd2>
 800ce94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce98:	4318      	orrs	r0, r3
 800ce9a:	d001      	beq.n	800cea0 <floor+0x40>
 800ce9c:	4928      	ldr	r1, [pc, #160]	; (800cf40 <floor+0xe0>)
 800ce9e:	2000      	movs	r0, #0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4602      	mov	r2, r0
 800cea4:	ec43 2b10 	vmov	d0, r2, r3
 800cea8:	e020      	b.n	800ceec <floor+0x8c>
 800ceaa:	4a26      	ldr	r2, [pc, #152]	; (800cf44 <floor+0xe4>)
 800ceac:	411a      	asrs	r2, r3
 800ceae:	ea01 0402 	and.w	r4, r1, r2
 800ceb2:	4304      	orrs	r4, r0
 800ceb4:	d01a      	beq.n	800ceec <floor+0x8c>
 800ceb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800cf38 <floor+0xd8>
 800ceba:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cebe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec6:	ddeb      	ble.n	800cea0 <floor+0x40>
 800cec8:	2900      	cmp	r1, #0
 800ceca:	bfbe      	ittt	lt
 800cecc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800ced0:	fa40 f303 	asrlt.w	r3, r0, r3
 800ced4:	18c9      	addlt	r1, r1, r3
 800ced6:	ea21 0102 	bic.w	r1, r1, r2
 800ceda:	2000      	movs	r0, #0
 800cedc:	e7e0      	b.n	800cea0 <floor+0x40>
 800cede:	2b33      	cmp	r3, #51	; 0x33
 800cee0:	dd05      	ble.n	800ceee <floor+0x8e>
 800cee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cee6:	d101      	bne.n	800ceec <floor+0x8c>
 800cee8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ceec:	bd30      	pop	{r4, r5, pc}
 800ceee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800cef2:	f04f 32ff 	mov.w	r2, #4294967295
 800cef6:	40e2      	lsrs	r2, r4
 800cef8:	4202      	tst	r2, r0
 800cefa:	d0f7      	beq.n	800ceec <floor+0x8c>
 800cefc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800cf38 <floor+0xd8>
 800cf00:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0c:	ddc8      	ble.n	800cea0 <floor+0x40>
 800cf0e:	2900      	cmp	r1, #0
 800cf10:	da02      	bge.n	800cf18 <floor+0xb8>
 800cf12:	2b14      	cmp	r3, #20
 800cf14:	d103      	bne.n	800cf1e <floor+0xbe>
 800cf16:	3101      	adds	r1, #1
 800cf18:	ea20 0002 	bic.w	r0, r0, r2
 800cf1c:	e7c0      	b.n	800cea0 <floor+0x40>
 800cf1e:	2401      	movs	r4, #1
 800cf20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf24:	fa04 f303 	lsl.w	r3, r4, r3
 800cf28:	4418      	add	r0, r3
 800cf2a:	42a8      	cmp	r0, r5
 800cf2c:	bf38      	it	cc
 800cf2e:	1909      	addcc	r1, r1, r4
 800cf30:	e7f2      	b.n	800cf18 <floor+0xb8>
 800cf32:	2000      	movs	r0, #0
 800cf34:	4601      	mov	r1, r0
 800cf36:	e7b3      	b.n	800cea0 <floor+0x40>
 800cf38:	8800759c 	.word	0x8800759c
 800cf3c:	7e37e43c 	.word	0x7e37e43c
 800cf40:	bff00000 	.word	0xbff00000
 800cf44:	000fffff 	.word	0x000fffff

0800cf48 <scalbn>:
 800cf48:	b082      	sub	sp, #8
 800cf4a:	ed8d 0b00 	vstr	d0, [sp]
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cf54:	b9a2      	cbnz	r2, 800cf80 <scalbn+0x38>
 800cf56:	9a00      	ldr	r2, [sp, #0]
 800cf58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	d03a      	beq.n	800cfd6 <scalbn+0x8e>
 800cf60:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d038 <scalbn+0xf0>
 800cf64:	4b40      	ldr	r3, [pc, #256]	; (800d068 <scalbn+0x120>)
 800cf66:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cf6a:	4298      	cmp	r0, r3
 800cf6c:	ed8d 7b00 	vstr	d7, [sp]
 800cf70:	da11      	bge.n	800cf96 <scalbn+0x4e>
 800cf72:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800d040 <scalbn+0xf8>
 800cf76:	ed9d 6b00 	vldr	d6, [sp]
 800cf7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf7e:	e007      	b.n	800cf90 <scalbn+0x48>
 800cf80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf84:	428a      	cmp	r2, r1
 800cf86:	d10a      	bne.n	800cf9e <scalbn+0x56>
 800cf88:	ed9d 7b00 	vldr	d7, [sp]
 800cf8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cf90:	ed8d 7b00 	vstr	d7, [sp]
 800cf94:	e01f      	b.n	800cfd6 <scalbn+0x8e>
 800cf96:	9b01      	ldr	r3, [sp, #4]
 800cf98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cf9c:	3a36      	subs	r2, #54	; 0x36
 800cf9e:	4402      	add	r2, r0
 800cfa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cfa4:	428a      	cmp	r2, r1
 800cfa6:	dd0a      	ble.n	800cfbe <scalbn+0x76>
 800cfa8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800d048 <scalbn+0x100>
 800cfac:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800d050 <scalbn+0x108>
 800cfb0:	eeb0 6b47 	vmov.f64	d6, d7
 800cfb4:	9b01      	ldr	r3, [sp, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800cfbc:	e7dd      	b.n	800cf7a <scalbn+0x32>
 800cfbe:	2a00      	cmp	r2, #0
 800cfc0:	dd0d      	ble.n	800cfde <scalbn+0x96>
 800cfc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cfca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfce:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cfd2:	e9cd 0100 	strd	r0, r1, [sp]
 800cfd6:	ed9d 0b00 	vldr	d0, [sp]
 800cfda:	b002      	add	sp, #8
 800cfdc:	4770      	bx	lr
 800cfde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cfe2:	da18      	bge.n	800d016 <scalbn+0xce>
 800cfe4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cfe8:	4298      	cmp	r0, r3
 800cfea:	9b01      	ldr	r3, [sp, #4]
 800cfec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cff0:	dd09      	ble.n	800d006 <scalbn+0xbe>
 800cff2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d048 <scalbn+0x100>
 800cff6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800d050 <scalbn+0x108>
 800cffa:	eeb0 6b47 	vmov.f64	d6, d7
 800cffe:	2b00      	cmp	r3, #0
 800d000:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800d004:	e7b9      	b.n	800cf7a <scalbn+0x32>
 800d006:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800d040 <scalbn+0xf8>
 800d00a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800d058 <scalbn+0x110>
 800d00e:	eeb0 6b47 	vmov.f64	d6, d7
 800d012:	2b00      	cmp	r3, #0
 800d014:	e7f4      	b.n	800d000 <scalbn+0xb8>
 800d016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d01a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d01e:	3236      	adds	r2, #54	; 0x36
 800d020:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d024:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d028:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800d060 <scalbn+0x118>
 800d02c:	ec41 0b17 	vmov	d7, r0, r1
 800d030:	e7a3      	b.n	800cf7a <scalbn+0x32>
 800d032:	bf00      	nop
 800d034:	f3af 8000 	nop.w
 800d038:	00000000 	.word	0x00000000
 800d03c:	43500000 	.word	0x43500000
 800d040:	c2f8f359 	.word	0xc2f8f359
 800d044:	01a56e1f 	.word	0x01a56e1f
 800d048:	8800759c 	.word	0x8800759c
 800d04c:	7e37e43c 	.word	0x7e37e43c
 800d050:	8800759c 	.word	0x8800759c
 800d054:	fe37e43c 	.word	0xfe37e43c
 800d058:	c2f8f359 	.word	0xc2f8f359
 800d05c:	81a56e1f 	.word	0x81a56e1f
 800d060:	00000000 	.word	0x00000000
 800d064:	3c900000 	.word	0x3c900000
 800d068:	ffff3cb0 	.word	0xffff3cb0

0800d06c <abort>:
 800d06c:	b508      	push	{r3, lr}
 800d06e:	2006      	movs	r0, #6
 800d070:	f000 f968 	bl	800d344 <raise>
 800d074:	2001      	movs	r0, #1
 800d076:	f7f6 fc31 	bl	80038dc <_exit>
	...

0800d07c <calloc>:
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <calloc+0xc>)
 800d07e:	460a      	mov	r2, r1
 800d080:	4601      	mov	r1, r0
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	f000 b86c 	b.w	800d160 <_calloc_r>
 800d088:	2000001c 	.word	0x2000001c

0800d08c <__errno>:
 800d08c:	4b01      	ldr	r3, [pc, #4]	; (800d094 <__errno+0x8>)
 800d08e:	6818      	ldr	r0, [r3, #0]
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	2000001c 	.word	0x2000001c

0800d098 <__libc_init_array>:
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	4d0d      	ldr	r5, [pc, #52]	; (800d0d0 <__libc_init_array+0x38>)
 800d09c:	4c0d      	ldr	r4, [pc, #52]	; (800d0d4 <__libc_init_array+0x3c>)
 800d09e:	1b64      	subs	r4, r4, r5
 800d0a0:	10a4      	asrs	r4, r4, #2
 800d0a2:	2600      	movs	r6, #0
 800d0a4:	42a6      	cmp	r6, r4
 800d0a6:	d109      	bne.n	800d0bc <__libc_init_array+0x24>
 800d0a8:	4d0b      	ldr	r5, [pc, #44]	; (800d0d8 <__libc_init_array+0x40>)
 800d0aa:	4c0c      	ldr	r4, [pc, #48]	; (800d0dc <__libc_init_array+0x44>)
 800d0ac:	f000 fcba 	bl	800da24 <_init>
 800d0b0:	1b64      	subs	r4, r4, r5
 800d0b2:	10a4      	asrs	r4, r4, #2
 800d0b4:	2600      	movs	r6, #0
 800d0b6:	42a6      	cmp	r6, r4
 800d0b8:	d105      	bne.n	800d0c6 <__libc_init_array+0x2e>
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0c0:	4798      	blx	r3
 800d0c2:	3601      	adds	r6, #1
 800d0c4:	e7ee      	b.n	800d0a4 <__libc_init_array+0xc>
 800d0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ca:	4798      	blx	r3
 800d0cc:	3601      	adds	r6, #1
 800d0ce:	e7f2      	b.n	800d0b6 <__libc_init_array+0x1e>
 800d0d0:	08036b84 	.word	0x08036b84
 800d0d4:	08036b84 	.word	0x08036b84
 800d0d8:	08036b84 	.word	0x08036b84
 800d0dc:	08036b88 	.word	0x08036b88

0800d0e0 <malloc>:
 800d0e0:	4b02      	ldr	r3, [pc, #8]	; (800d0ec <malloc+0xc>)
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	6818      	ldr	r0, [r3, #0]
 800d0e6:	f000 b89b 	b.w	800d220 <_malloc_r>
 800d0ea:	bf00      	nop
 800d0ec:	2000001c 	.word	0x2000001c

0800d0f0 <free>:
 800d0f0:	4b02      	ldr	r3, [pc, #8]	; (800d0fc <free+0xc>)
 800d0f2:	4601      	mov	r1, r0
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	f000 b843 	b.w	800d180 <_free_r>
 800d0fa:	bf00      	nop
 800d0fc:	2000001c 	.word	0x2000001c

0800d100 <memcpy>:
 800d100:	440a      	add	r2, r1
 800d102:	4291      	cmp	r1, r2
 800d104:	f100 33ff 	add.w	r3, r0, #4294967295
 800d108:	d100      	bne.n	800d10c <memcpy+0xc>
 800d10a:	4770      	bx	lr
 800d10c:	b510      	push	{r4, lr}
 800d10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d116:	4291      	cmp	r1, r2
 800d118:	d1f9      	bne.n	800d10e <memcpy+0xe>
 800d11a:	bd10      	pop	{r4, pc}

0800d11c <memmove>:
 800d11c:	4288      	cmp	r0, r1
 800d11e:	b510      	push	{r4, lr}
 800d120:	eb01 0402 	add.w	r4, r1, r2
 800d124:	d902      	bls.n	800d12c <memmove+0x10>
 800d126:	4284      	cmp	r4, r0
 800d128:	4623      	mov	r3, r4
 800d12a:	d807      	bhi.n	800d13c <memmove+0x20>
 800d12c:	1e43      	subs	r3, r0, #1
 800d12e:	42a1      	cmp	r1, r4
 800d130:	d008      	beq.n	800d144 <memmove+0x28>
 800d132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d13a:	e7f8      	b.n	800d12e <memmove+0x12>
 800d13c:	4402      	add	r2, r0
 800d13e:	4601      	mov	r1, r0
 800d140:	428a      	cmp	r2, r1
 800d142:	d100      	bne.n	800d146 <memmove+0x2a>
 800d144:	bd10      	pop	{r4, pc}
 800d146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d14e:	e7f7      	b.n	800d140 <memmove+0x24>

0800d150 <memset>:
 800d150:	4402      	add	r2, r0
 800d152:	4603      	mov	r3, r0
 800d154:	4293      	cmp	r3, r2
 800d156:	d100      	bne.n	800d15a <memset+0xa>
 800d158:	4770      	bx	lr
 800d15a:	f803 1b01 	strb.w	r1, [r3], #1
 800d15e:	e7f9      	b.n	800d154 <memset+0x4>

0800d160 <_calloc_r>:
 800d160:	b513      	push	{r0, r1, r4, lr}
 800d162:	434a      	muls	r2, r1
 800d164:	4611      	mov	r1, r2
 800d166:	9201      	str	r2, [sp, #4]
 800d168:	f000 f85a 	bl	800d220 <_malloc_r>
 800d16c:	4604      	mov	r4, r0
 800d16e:	b118      	cbz	r0, 800d178 <_calloc_r+0x18>
 800d170:	9a01      	ldr	r2, [sp, #4]
 800d172:	2100      	movs	r1, #0
 800d174:	f7ff ffec 	bl	800d150 <memset>
 800d178:	4620      	mov	r0, r4
 800d17a:	b002      	add	sp, #8
 800d17c:	bd10      	pop	{r4, pc}
	...

0800d180 <_free_r>:
 800d180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d182:	2900      	cmp	r1, #0
 800d184:	d048      	beq.n	800d218 <_free_r+0x98>
 800d186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d18a:	9001      	str	r0, [sp, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f1a1 0404 	sub.w	r4, r1, #4
 800d192:	bfb8      	it	lt
 800d194:	18e4      	addlt	r4, r4, r3
 800d196:	f000 f919 	bl	800d3cc <__malloc_lock>
 800d19a:	4a20      	ldr	r2, [pc, #128]	; (800d21c <_free_r+0x9c>)
 800d19c:	9801      	ldr	r0, [sp, #4]
 800d19e:	6813      	ldr	r3, [r2, #0]
 800d1a0:	4615      	mov	r5, r2
 800d1a2:	b933      	cbnz	r3, 800d1b2 <_free_r+0x32>
 800d1a4:	6063      	str	r3, [r4, #4]
 800d1a6:	6014      	str	r4, [r2, #0]
 800d1a8:	b003      	add	sp, #12
 800d1aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1ae:	f000 b913 	b.w	800d3d8 <__malloc_unlock>
 800d1b2:	42a3      	cmp	r3, r4
 800d1b4:	d90b      	bls.n	800d1ce <_free_r+0x4e>
 800d1b6:	6821      	ldr	r1, [r4, #0]
 800d1b8:	1862      	adds	r2, r4, r1
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	bf04      	itt	eq
 800d1be:	681a      	ldreq	r2, [r3, #0]
 800d1c0:	685b      	ldreq	r3, [r3, #4]
 800d1c2:	6063      	str	r3, [r4, #4]
 800d1c4:	bf04      	itt	eq
 800d1c6:	1852      	addeq	r2, r2, r1
 800d1c8:	6022      	streq	r2, [r4, #0]
 800d1ca:	602c      	str	r4, [r5, #0]
 800d1cc:	e7ec      	b.n	800d1a8 <_free_r+0x28>
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	b10b      	cbz	r3, 800d1d8 <_free_r+0x58>
 800d1d4:	42a3      	cmp	r3, r4
 800d1d6:	d9fa      	bls.n	800d1ce <_free_r+0x4e>
 800d1d8:	6811      	ldr	r1, [r2, #0]
 800d1da:	1855      	adds	r5, r2, r1
 800d1dc:	42a5      	cmp	r5, r4
 800d1de:	d10b      	bne.n	800d1f8 <_free_r+0x78>
 800d1e0:	6824      	ldr	r4, [r4, #0]
 800d1e2:	4421      	add	r1, r4
 800d1e4:	1854      	adds	r4, r2, r1
 800d1e6:	42a3      	cmp	r3, r4
 800d1e8:	6011      	str	r1, [r2, #0]
 800d1ea:	d1dd      	bne.n	800d1a8 <_free_r+0x28>
 800d1ec:	681c      	ldr	r4, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	6053      	str	r3, [r2, #4]
 800d1f2:	4421      	add	r1, r4
 800d1f4:	6011      	str	r1, [r2, #0]
 800d1f6:	e7d7      	b.n	800d1a8 <_free_r+0x28>
 800d1f8:	d902      	bls.n	800d200 <_free_r+0x80>
 800d1fa:	230c      	movs	r3, #12
 800d1fc:	6003      	str	r3, [r0, #0]
 800d1fe:	e7d3      	b.n	800d1a8 <_free_r+0x28>
 800d200:	6825      	ldr	r5, [r4, #0]
 800d202:	1961      	adds	r1, r4, r5
 800d204:	428b      	cmp	r3, r1
 800d206:	bf04      	itt	eq
 800d208:	6819      	ldreq	r1, [r3, #0]
 800d20a:	685b      	ldreq	r3, [r3, #4]
 800d20c:	6063      	str	r3, [r4, #4]
 800d20e:	bf04      	itt	eq
 800d210:	1949      	addeq	r1, r1, r5
 800d212:	6021      	streq	r1, [r4, #0]
 800d214:	6054      	str	r4, [r2, #4]
 800d216:	e7c7      	b.n	800d1a8 <_free_r+0x28>
 800d218:	b003      	add	sp, #12
 800d21a:	bd30      	pop	{r4, r5, pc}
 800d21c:	200003ec 	.word	0x200003ec

0800d220 <_malloc_r>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	1ccd      	adds	r5, r1, #3
 800d224:	f025 0503 	bic.w	r5, r5, #3
 800d228:	3508      	adds	r5, #8
 800d22a:	2d0c      	cmp	r5, #12
 800d22c:	bf38      	it	cc
 800d22e:	250c      	movcc	r5, #12
 800d230:	2d00      	cmp	r5, #0
 800d232:	4606      	mov	r6, r0
 800d234:	db01      	blt.n	800d23a <_malloc_r+0x1a>
 800d236:	42a9      	cmp	r1, r5
 800d238:	d903      	bls.n	800d242 <_malloc_r+0x22>
 800d23a:	230c      	movs	r3, #12
 800d23c:	6033      	str	r3, [r6, #0]
 800d23e:	2000      	movs	r0, #0
 800d240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d242:	f000 f8c3 	bl	800d3cc <__malloc_lock>
 800d246:	4921      	ldr	r1, [pc, #132]	; (800d2cc <_malloc_r+0xac>)
 800d248:	680a      	ldr	r2, [r1, #0]
 800d24a:	4614      	mov	r4, r2
 800d24c:	b99c      	cbnz	r4, 800d276 <_malloc_r+0x56>
 800d24e:	4f20      	ldr	r7, [pc, #128]	; (800d2d0 <_malloc_r+0xb0>)
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	b923      	cbnz	r3, 800d25e <_malloc_r+0x3e>
 800d254:	4621      	mov	r1, r4
 800d256:	4630      	mov	r0, r6
 800d258:	f000 f83c 	bl	800d2d4 <_sbrk_r>
 800d25c:	6038      	str	r0, [r7, #0]
 800d25e:	4629      	mov	r1, r5
 800d260:	4630      	mov	r0, r6
 800d262:	f000 f837 	bl	800d2d4 <_sbrk_r>
 800d266:	1c43      	adds	r3, r0, #1
 800d268:	d123      	bne.n	800d2b2 <_malloc_r+0x92>
 800d26a:	230c      	movs	r3, #12
 800d26c:	6033      	str	r3, [r6, #0]
 800d26e:	4630      	mov	r0, r6
 800d270:	f000 f8b2 	bl	800d3d8 <__malloc_unlock>
 800d274:	e7e3      	b.n	800d23e <_malloc_r+0x1e>
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	1b5b      	subs	r3, r3, r5
 800d27a:	d417      	bmi.n	800d2ac <_malloc_r+0x8c>
 800d27c:	2b0b      	cmp	r3, #11
 800d27e:	d903      	bls.n	800d288 <_malloc_r+0x68>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	441c      	add	r4, r3
 800d284:	6025      	str	r5, [r4, #0]
 800d286:	e004      	b.n	800d292 <_malloc_r+0x72>
 800d288:	6863      	ldr	r3, [r4, #4]
 800d28a:	42a2      	cmp	r2, r4
 800d28c:	bf0c      	ite	eq
 800d28e:	600b      	streq	r3, [r1, #0]
 800d290:	6053      	strne	r3, [r2, #4]
 800d292:	4630      	mov	r0, r6
 800d294:	f000 f8a0 	bl	800d3d8 <__malloc_unlock>
 800d298:	f104 000b 	add.w	r0, r4, #11
 800d29c:	1d23      	adds	r3, r4, #4
 800d29e:	f020 0007 	bic.w	r0, r0, #7
 800d2a2:	1ac2      	subs	r2, r0, r3
 800d2a4:	d0cc      	beq.n	800d240 <_malloc_r+0x20>
 800d2a6:	1a1b      	subs	r3, r3, r0
 800d2a8:	50a3      	str	r3, [r4, r2]
 800d2aa:	e7c9      	b.n	800d240 <_malloc_r+0x20>
 800d2ac:	4622      	mov	r2, r4
 800d2ae:	6864      	ldr	r4, [r4, #4]
 800d2b0:	e7cc      	b.n	800d24c <_malloc_r+0x2c>
 800d2b2:	1cc4      	adds	r4, r0, #3
 800d2b4:	f024 0403 	bic.w	r4, r4, #3
 800d2b8:	42a0      	cmp	r0, r4
 800d2ba:	d0e3      	beq.n	800d284 <_malloc_r+0x64>
 800d2bc:	1a21      	subs	r1, r4, r0
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f000 f808 	bl	800d2d4 <_sbrk_r>
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	d1dd      	bne.n	800d284 <_malloc_r+0x64>
 800d2c8:	e7cf      	b.n	800d26a <_malloc_r+0x4a>
 800d2ca:	bf00      	nop
 800d2cc:	200003ec 	.word	0x200003ec
 800d2d0:	200003f0 	.word	0x200003f0

0800d2d4 <_sbrk_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4d06      	ldr	r5, [pc, #24]	; (800d2f0 <_sbrk_r+0x1c>)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4604      	mov	r4, r0
 800d2dc:	4608      	mov	r0, r1
 800d2de:	602b      	str	r3, [r5, #0]
 800d2e0:	f7f6 fb06 	bl	80038f0 <_sbrk>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_sbrk_r+0x1a>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_sbrk_r+0x1a>
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	20000490 	.word	0x20000490

0800d2f4 <_raise_r>:
 800d2f4:	291f      	cmp	r1, #31
 800d2f6:	b538      	push	{r3, r4, r5, lr}
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	460d      	mov	r5, r1
 800d2fc:	d904      	bls.n	800d308 <_raise_r+0x14>
 800d2fe:	2316      	movs	r3, #22
 800d300:	6003      	str	r3, [r0, #0]
 800d302:	f04f 30ff 	mov.w	r0, #4294967295
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d30a:	b112      	cbz	r2, 800d312 <_raise_r+0x1e>
 800d30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d310:	b94b      	cbnz	r3, 800d326 <_raise_r+0x32>
 800d312:	4620      	mov	r0, r4
 800d314:	f000 f830 	bl	800d378 <_getpid_r>
 800d318:	462a      	mov	r2, r5
 800d31a:	4601      	mov	r1, r0
 800d31c:	4620      	mov	r0, r4
 800d31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d322:	f000 b817 	b.w	800d354 <_kill_r>
 800d326:	2b01      	cmp	r3, #1
 800d328:	d00a      	beq.n	800d340 <_raise_r+0x4c>
 800d32a:	1c59      	adds	r1, r3, #1
 800d32c:	d103      	bne.n	800d336 <_raise_r+0x42>
 800d32e:	2316      	movs	r3, #22
 800d330:	6003      	str	r3, [r0, #0]
 800d332:	2001      	movs	r0, #1
 800d334:	e7e7      	b.n	800d306 <_raise_r+0x12>
 800d336:	2400      	movs	r4, #0
 800d338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d33c:	4628      	mov	r0, r5
 800d33e:	4798      	blx	r3
 800d340:	2000      	movs	r0, #0
 800d342:	e7e0      	b.n	800d306 <_raise_r+0x12>

0800d344 <raise>:
 800d344:	4b02      	ldr	r3, [pc, #8]	; (800d350 <raise+0xc>)
 800d346:	4601      	mov	r1, r0
 800d348:	6818      	ldr	r0, [r3, #0]
 800d34a:	f7ff bfd3 	b.w	800d2f4 <_raise_r>
 800d34e:	bf00      	nop
 800d350:	2000001c 	.word	0x2000001c

0800d354 <_kill_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4d07      	ldr	r5, [pc, #28]	; (800d374 <_kill_r+0x20>)
 800d358:	2300      	movs	r3, #0
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	4611      	mov	r1, r2
 800d360:	602b      	str	r3, [r5, #0]
 800d362:	f7f6 faab 	bl	80038bc <_kill>
 800d366:	1c43      	adds	r3, r0, #1
 800d368:	d102      	bne.n	800d370 <_kill_r+0x1c>
 800d36a:	682b      	ldr	r3, [r5, #0]
 800d36c:	b103      	cbz	r3, 800d370 <_kill_r+0x1c>
 800d36e:	6023      	str	r3, [r4, #0]
 800d370:	bd38      	pop	{r3, r4, r5, pc}
 800d372:	bf00      	nop
 800d374:	20000490 	.word	0x20000490

0800d378 <_getpid_r>:
 800d378:	f7f6 ba98 	b.w	80038ac <_getpid>

0800d37c <siprintf>:
 800d37c:	b40e      	push	{r1, r2, r3}
 800d37e:	b500      	push	{lr}
 800d380:	b09c      	sub	sp, #112	; 0x70
 800d382:	ab1d      	add	r3, sp, #116	; 0x74
 800d384:	9002      	str	r0, [sp, #8]
 800d386:	9006      	str	r0, [sp, #24]
 800d388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d38c:	4809      	ldr	r0, [pc, #36]	; (800d3b4 <siprintf+0x38>)
 800d38e:	9107      	str	r1, [sp, #28]
 800d390:	9104      	str	r1, [sp, #16]
 800d392:	4909      	ldr	r1, [pc, #36]	; (800d3b8 <siprintf+0x3c>)
 800d394:	f853 2b04 	ldr.w	r2, [r3], #4
 800d398:	9105      	str	r1, [sp, #20]
 800d39a:	6800      	ldr	r0, [r0, #0]
 800d39c:	9301      	str	r3, [sp, #4]
 800d39e:	a902      	add	r1, sp, #8
 800d3a0:	f000 f87c 	bl	800d49c <_svfiprintf_r>
 800d3a4:	9b02      	ldr	r3, [sp, #8]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	701a      	strb	r2, [r3, #0]
 800d3aa:	b01c      	add	sp, #112	; 0x70
 800d3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3b0:	b003      	add	sp, #12
 800d3b2:	4770      	bx	lr
 800d3b4:	2000001c 	.word	0x2000001c
 800d3b8:	ffff0208 	.word	0xffff0208

0800d3bc <strcpy>:
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3c2:	f803 2b01 	strb.w	r2, [r3], #1
 800d3c6:	2a00      	cmp	r2, #0
 800d3c8:	d1f9      	bne.n	800d3be <strcpy+0x2>
 800d3ca:	4770      	bx	lr

0800d3cc <__malloc_lock>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	; (800d3d4 <__malloc_lock+0x8>)
 800d3ce:	f000 baf9 	b.w	800d9c4 <__retarget_lock_acquire_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	20000498 	.word	0x20000498

0800d3d8 <__malloc_unlock>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	; (800d3e0 <__malloc_unlock+0x8>)
 800d3da:	f000 baf4 	b.w	800d9c6 <__retarget_lock_release_recursive>
 800d3de:	bf00      	nop
 800d3e0:	20000498 	.word	0x20000498

0800d3e4 <__ssputs_r>:
 800d3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e8:	688e      	ldr	r6, [r1, #8]
 800d3ea:	429e      	cmp	r6, r3
 800d3ec:	4682      	mov	sl, r0
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	4690      	mov	r8, r2
 800d3f2:	461f      	mov	r7, r3
 800d3f4:	d838      	bhi.n	800d468 <__ssputs_r+0x84>
 800d3f6:	898a      	ldrh	r2, [r1, #12]
 800d3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3fc:	d032      	beq.n	800d464 <__ssputs_r+0x80>
 800d3fe:	6825      	ldr	r5, [r4, #0]
 800d400:	6909      	ldr	r1, [r1, #16]
 800d402:	eba5 0901 	sub.w	r9, r5, r1
 800d406:	6965      	ldr	r5, [r4, #20]
 800d408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d410:	3301      	adds	r3, #1
 800d412:	444b      	add	r3, r9
 800d414:	106d      	asrs	r5, r5, #1
 800d416:	429d      	cmp	r5, r3
 800d418:	bf38      	it	cc
 800d41a:	461d      	movcc	r5, r3
 800d41c:	0553      	lsls	r3, r2, #21
 800d41e:	d531      	bpl.n	800d484 <__ssputs_r+0xa0>
 800d420:	4629      	mov	r1, r5
 800d422:	f7ff fefd 	bl	800d220 <_malloc_r>
 800d426:	4606      	mov	r6, r0
 800d428:	b950      	cbnz	r0, 800d440 <__ssputs_r+0x5c>
 800d42a:	230c      	movs	r3, #12
 800d42c:	f8ca 3000 	str.w	r3, [sl]
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d436:	81a3      	strh	r3, [r4, #12]
 800d438:	f04f 30ff 	mov.w	r0, #4294967295
 800d43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d440:	6921      	ldr	r1, [r4, #16]
 800d442:	464a      	mov	r2, r9
 800d444:	f7ff fe5c 	bl	800d100 <memcpy>
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	6126      	str	r6, [r4, #16]
 800d456:	6165      	str	r5, [r4, #20]
 800d458:	444e      	add	r6, r9
 800d45a:	eba5 0509 	sub.w	r5, r5, r9
 800d45e:	6026      	str	r6, [r4, #0]
 800d460:	60a5      	str	r5, [r4, #8]
 800d462:	463e      	mov	r6, r7
 800d464:	42be      	cmp	r6, r7
 800d466:	d900      	bls.n	800d46a <__ssputs_r+0x86>
 800d468:	463e      	mov	r6, r7
 800d46a:	4632      	mov	r2, r6
 800d46c:	6820      	ldr	r0, [r4, #0]
 800d46e:	4641      	mov	r1, r8
 800d470:	f7ff fe54 	bl	800d11c <memmove>
 800d474:	68a3      	ldr	r3, [r4, #8]
 800d476:	6822      	ldr	r2, [r4, #0]
 800d478:	1b9b      	subs	r3, r3, r6
 800d47a:	4432      	add	r2, r6
 800d47c:	60a3      	str	r3, [r4, #8]
 800d47e:	6022      	str	r2, [r4, #0]
 800d480:	2000      	movs	r0, #0
 800d482:	e7db      	b.n	800d43c <__ssputs_r+0x58>
 800d484:	462a      	mov	r2, r5
 800d486:	f000 fa9f 	bl	800d9c8 <_realloc_r>
 800d48a:	4606      	mov	r6, r0
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d1e1      	bne.n	800d454 <__ssputs_r+0x70>
 800d490:	6921      	ldr	r1, [r4, #16]
 800d492:	4650      	mov	r0, sl
 800d494:	f7ff fe74 	bl	800d180 <_free_r>
 800d498:	e7c7      	b.n	800d42a <__ssputs_r+0x46>
	...

0800d49c <_svfiprintf_r>:
 800d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a0:	4698      	mov	r8, r3
 800d4a2:	898b      	ldrh	r3, [r1, #12]
 800d4a4:	061b      	lsls	r3, r3, #24
 800d4a6:	b09d      	sub	sp, #116	; 0x74
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	460d      	mov	r5, r1
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	d50e      	bpl.n	800d4ce <_svfiprintf_r+0x32>
 800d4b0:	690b      	ldr	r3, [r1, #16]
 800d4b2:	b963      	cbnz	r3, 800d4ce <_svfiprintf_r+0x32>
 800d4b4:	2140      	movs	r1, #64	; 0x40
 800d4b6:	f7ff feb3 	bl	800d220 <_malloc_r>
 800d4ba:	6028      	str	r0, [r5, #0]
 800d4bc:	6128      	str	r0, [r5, #16]
 800d4be:	b920      	cbnz	r0, 800d4ca <_svfiprintf_r+0x2e>
 800d4c0:	230c      	movs	r3, #12
 800d4c2:	603b      	str	r3, [r7, #0]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e0d1      	b.n	800d66e <_svfiprintf_r+0x1d2>
 800d4ca:	2340      	movs	r3, #64	; 0x40
 800d4cc:	616b      	str	r3, [r5, #20]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d2:	2320      	movs	r3, #32
 800d4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4dc:	2330      	movs	r3, #48	; 0x30
 800d4de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d688 <_svfiprintf_r+0x1ec>
 800d4e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4e6:	f04f 0901 	mov.w	r9, #1
 800d4ea:	4623      	mov	r3, r4
 800d4ec:	469a      	mov	sl, r3
 800d4ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4f2:	b10a      	cbz	r2, 800d4f8 <_svfiprintf_r+0x5c>
 800d4f4:	2a25      	cmp	r2, #37	; 0x25
 800d4f6:	d1f9      	bne.n	800d4ec <_svfiprintf_r+0x50>
 800d4f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4fc:	d00b      	beq.n	800d516 <_svfiprintf_r+0x7a>
 800d4fe:	465b      	mov	r3, fp
 800d500:	4622      	mov	r2, r4
 800d502:	4629      	mov	r1, r5
 800d504:	4638      	mov	r0, r7
 800d506:	f7ff ff6d 	bl	800d3e4 <__ssputs_r>
 800d50a:	3001      	adds	r0, #1
 800d50c:	f000 80aa 	beq.w	800d664 <_svfiprintf_r+0x1c8>
 800d510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d512:	445a      	add	r2, fp
 800d514:	9209      	str	r2, [sp, #36]	; 0x24
 800d516:	f89a 3000 	ldrb.w	r3, [sl]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 80a2 	beq.w	800d664 <_svfiprintf_r+0x1c8>
 800d520:	2300      	movs	r3, #0
 800d522:	f04f 32ff 	mov.w	r2, #4294967295
 800d526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d52a:	f10a 0a01 	add.w	sl, sl, #1
 800d52e:	9304      	str	r3, [sp, #16]
 800d530:	9307      	str	r3, [sp, #28]
 800d532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d536:	931a      	str	r3, [sp, #104]	; 0x68
 800d538:	4654      	mov	r4, sl
 800d53a:	2205      	movs	r2, #5
 800d53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d540:	4851      	ldr	r0, [pc, #324]	; (800d688 <_svfiprintf_r+0x1ec>)
 800d542:	f7f2 fee5 	bl	8000310 <memchr>
 800d546:	9a04      	ldr	r2, [sp, #16]
 800d548:	b9d8      	cbnz	r0, 800d582 <_svfiprintf_r+0xe6>
 800d54a:	06d0      	lsls	r0, r2, #27
 800d54c:	bf44      	itt	mi
 800d54e:	2320      	movmi	r3, #32
 800d550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d554:	0711      	lsls	r1, r2, #28
 800d556:	bf44      	itt	mi
 800d558:	232b      	movmi	r3, #43	; 0x2b
 800d55a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d55e:	f89a 3000 	ldrb.w	r3, [sl]
 800d562:	2b2a      	cmp	r3, #42	; 0x2a
 800d564:	d015      	beq.n	800d592 <_svfiprintf_r+0xf6>
 800d566:	9a07      	ldr	r2, [sp, #28]
 800d568:	4654      	mov	r4, sl
 800d56a:	2000      	movs	r0, #0
 800d56c:	f04f 0c0a 	mov.w	ip, #10
 800d570:	4621      	mov	r1, r4
 800d572:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d576:	3b30      	subs	r3, #48	; 0x30
 800d578:	2b09      	cmp	r3, #9
 800d57a:	d94e      	bls.n	800d61a <_svfiprintf_r+0x17e>
 800d57c:	b1b0      	cbz	r0, 800d5ac <_svfiprintf_r+0x110>
 800d57e:	9207      	str	r2, [sp, #28]
 800d580:	e014      	b.n	800d5ac <_svfiprintf_r+0x110>
 800d582:	eba0 0308 	sub.w	r3, r0, r8
 800d586:	fa09 f303 	lsl.w	r3, r9, r3
 800d58a:	4313      	orrs	r3, r2
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	46a2      	mov	sl, r4
 800d590:	e7d2      	b.n	800d538 <_svfiprintf_r+0x9c>
 800d592:	9b03      	ldr	r3, [sp, #12]
 800d594:	1d19      	adds	r1, r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	9103      	str	r1, [sp, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	bfbb      	ittet	lt
 800d59e:	425b      	neglt	r3, r3
 800d5a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d5a4:	9307      	strge	r3, [sp, #28]
 800d5a6:	9307      	strlt	r3, [sp, #28]
 800d5a8:	bfb8      	it	lt
 800d5aa:	9204      	strlt	r2, [sp, #16]
 800d5ac:	7823      	ldrb	r3, [r4, #0]
 800d5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800d5b0:	d10c      	bne.n	800d5cc <_svfiprintf_r+0x130>
 800d5b2:	7863      	ldrb	r3, [r4, #1]
 800d5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d5b6:	d135      	bne.n	800d624 <_svfiprintf_r+0x188>
 800d5b8:	9b03      	ldr	r3, [sp, #12]
 800d5ba:	1d1a      	adds	r2, r3, #4
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	9203      	str	r2, [sp, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bfb8      	it	lt
 800d5c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5c8:	3402      	adds	r4, #2
 800d5ca:	9305      	str	r3, [sp, #20]
 800d5cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d698 <_svfiprintf_r+0x1fc>
 800d5d0:	7821      	ldrb	r1, [r4, #0]
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	4650      	mov	r0, sl
 800d5d6:	f7f2 fe9b 	bl	8000310 <memchr>
 800d5da:	b140      	cbz	r0, 800d5ee <_svfiprintf_r+0x152>
 800d5dc:	2340      	movs	r3, #64	; 0x40
 800d5de:	eba0 000a 	sub.w	r0, r0, sl
 800d5e2:	fa03 f000 	lsl.w	r0, r3, r0
 800d5e6:	9b04      	ldr	r3, [sp, #16]
 800d5e8:	4303      	orrs	r3, r0
 800d5ea:	3401      	adds	r4, #1
 800d5ec:	9304      	str	r3, [sp, #16]
 800d5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f2:	4826      	ldr	r0, [pc, #152]	; (800d68c <_svfiprintf_r+0x1f0>)
 800d5f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5f8:	2206      	movs	r2, #6
 800d5fa:	f7f2 fe89 	bl	8000310 <memchr>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d038      	beq.n	800d674 <_svfiprintf_r+0x1d8>
 800d602:	4b23      	ldr	r3, [pc, #140]	; (800d690 <_svfiprintf_r+0x1f4>)
 800d604:	bb1b      	cbnz	r3, 800d64e <_svfiprintf_r+0x1b2>
 800d606:	9b03      	ldr	r3, [sp, #12]
 800d608:	3307      	adds	r3, #7
 800d60a:	f023 0307 	bic.w	r3, r3, #7
 800d60e:	3308      	adds	r3, #8
 800d610:	9303      	str	r3, [sp, #12]
 800d612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d614:	4433      	add	r3, r6
 800d616:	9309      	str	r3, [sp, #36]	; 0x24
 800d618:	e767      	b.n	800d4ea <_svfiprintf_r+0x4e>
 800d61a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d61e:	460c      	mov	r4, r1
 800d620:	2001      	movs	r0, #1
 800d622:	e7a5      	b.n	800d570 <_svfiprintf_r+0xd4>
 800d624:	2300      	movs	r3, #0
 800d626:	3401      	adds	r4, #1
 800d628:	9305      	str	r3, [sp, #20]
 800d62a:	4619      	mov	r1, r3
 800d62c:	f04f 0c0a 	mov.w	ip, #10
 800d630:	4620      	mov	r0, r4
 800d632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d636:	3a30      	subs	r2, #48	; 0x30
 800d638:	2a09      	cmp	r2, #9
 800d63a:	d903      	bls.n	800d644 <_svfiprintf_r+0x1a8>
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d0c5      	beq.n	800d5cc <_svfiprintf_r+0x130>
 800d640:	9105      	str	r1, [sp, #20]
 800d642:	e7c3      	b.n	800d5cc <_svfiprintf_r+0x130>
 800d644:	fb0c 2101 	mla	r1, ip, r1, r2
 800d648:	4604      	mov	r4, r0
 800d64a:	2301      	movs	r3, #1
 800d64c:	e7f0      	b.n	800d630 <_svfiprintf_r+0x194>
 800d64e:	ab03      	add	r3, sp, #12
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	462a      	mov	r2, r5
 800d654:	4b0f      	ldr	r3, [pc, #60]	; (800d694 <_svfiprintf_r+0x1f8>)
 800d656:	a904      	add	r1, sp, #16
 800d658:	4638      	mov	r0, r7
 800d65a:	f3af 8000 	nop.w
 800d65e:	1c42      	adds	r2, r0, #1
 800d660:	4606      	mov	r6, r0
 800d662:	d1d6      	bne.n	800d612 <_svfiprintf_r+0x176>
 800d664:	89ab      	ldrh	r3, [r5, #12]
 800d666:	065b      	lsls	r3, r3, #25
 800d668:	f53f af2c 	bmi.w	800d4c4 <_svfiprintf_r+0x28>
 800d66c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d66e:	b01d      	add	sp, #116	; 0x74
 800d670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d674:	ab03      	add	r3, sp, #12
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	462a      	mov	r2, r5
 800d67a:	4b06      	ldr	r3, [pc, #24]	; (800d694 <_svfiprintf_r+0x1f8>)
 800d67c:	a904      	add	r1, sp, #16
 800d67e:	4638      	mov	r0, r7
 800d680:	f000 f87a 	bl	800d778 <_printf_i>
 800d684:	e7eb      	b.n	800d65e <_svfiprintf_r+0x1c2>
 800d686:	bf00      	nop
 800d688:	08036b48 	.word	0x08036b48
 800d68c:	08036b52 	.word	0x08036b52
 800d690:	00000000 	.word	0x00000000
 800d694:	0800d3e5 	.word	0x0800d3e5
 800d698:	08036b4e 	.word	0x08036b4e

0800d69c <_printf_common>:
 800d69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a0:	4616      	mov	r6, r2
 800d6a2:	4699      	mov	r9, r3
 800d6a4:	688a      	ldr	r2, [r1, #8]
 800d6a6:	690b      	ldr	r3, [r1, #16]
 800d6a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	bfb8      	it	lt
 800d6b0:	4613      	movlt	r3, r2
 800d6b2:	6033      	str	r3, [r6, #0]
 800d6b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6b8:	4607      	mov	r7, r0
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	b10a      	cbz	r2, 800d6c2 <_printf_common+0x26>
 800d6be:	3301      	adds	r3, #1
 800d6c0:	6033      	str	r3, [r6, #0]
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	0699      	lsls	r1, r3, #26
 800d6c6:	bf42      	ittt	mi
 800d6c8:	6833      	ldrmi	r3, [r6, #0]
 800d6ca:	3302      	addmi	r3, #2
 800d6cc:	6033      	strmi	r3, [r6, #0]
 800d6ce:	6825      	ldr	r5, [r4, #0]
 800d6d0:	f015 0506 	ands.w	r5, r5, #6
 800d6d4:	d106      	bne.n	800d6e4 <_printf_common+0x48>
 800d6d6:	f104 0a19 	add.w	sl, r4, #25
 800d6da:	68e3      	ldr	r3, [r4, #12]
 800d6dc:	6832      	ldr	r2, [r6, #0]
 800d6de:	1a9b      	subs	r3, r3, r2
 800d6e0:	42ab      	cmp	r3, r5
 800d6e2:	dc26      	bgt.n	800d732 <_printf_common+0x96>
 800d6e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6e8:	1e13      	subs	r3, r2, #0
 800d6ea:	6822      	ldr	r2, [r4, #0]
 800d6ec:	bf18      	it	ne
 800d6ee:	2301      	movne	r3, #1
 800d6f0:	0692      	lsls	r2, r2, #26
 800d6f2:	d42b      	bmi.n	800d74c <_printf_common+0xb0>
 800d6f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	47c0      	blx	r8
 800d6fe:	3001      	adds	r0, #1
 800d700:	d01e      	beq.n	800d740 <_printf_common+0xa4>
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	68e5      	ldr	r5, [r4, #12]
 800d706:	6832      	ldr	r2, [r6, #0]
 800d708:	f003 0306 	and.w	r3, r3, #6
 800d70c:	2b04      	cmp	r3, #4
 800d70e:	bf08      	it	eq
 800d710:	1aad      	subeq	r5, r5, r2
 800d712:	68a3      	ldr	r3, [r4, #8]
 800d714:	6922      	ldr	r2, [r4, #16]
 800d716:	bf0c      	ite	eq
 800d718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d71c:	2500      	movne	r5, #0
 800d71e:	4293      	cmp	r3, r2
 800d720:	bfc4      	itt	gt
 800d722:	1a9b      	subgt	r3, r3, r2
 800d724:	18ed      	addgt	r5, r5, r3
 800d726:	2600      	movs	r6, #0
 800d728:	341a      	adds	r4, #26
 800d72a:	42b5      	cmp	r5, r6
 800d72c:	d11a      	bne.n	800d764 <_printf_common+0xc8>
 800d72e:	2000      	movs	r0, #0
 800d730:	e008      	b.n	800d744 <_printf_common+0xa8>
 800d732:	2301      	movs	r3, #1
 800d734:	4652      	mov	r2, sl
 800d736:	4649      	mov	r1, r9
 800d738:	4638      	mov	r0, r7
 800d73a:	47c0      	blx	r8
 800d73c:	3001      	adds	r0, #1
 800d73e:	d103      	bne.n	800d748 <_printf_common+0xac>
 800d740:	f04f 30ff 	mov.w	r0, #4294967295
 800d744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d748:	3501      	adds	r5, #1
 800d74a:	e7c6      	b.n	800d6da <_printf_common+0x3e>
 800d74c:	18e1      	adds	r1, r4, r3
 800d74e:	1c5a      	adds	r2, r3, #1
 800d750:	2030      	movs	r0, #48	; 0x30
 800d752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d756:	4422      	add	r2, r4
 800d758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d75c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d760:	3302      	adds	r3, #2
 800d762:	e7c7      	b.n	800d6f4 <_printf_common+0x58>
 800d764:	2301      	movs	r3, #1
 800d766:	4622      	mov	r2, r4
 800d768:	4649      	mov	r1, r9
 800d76a:	4638      	mov	r0, r7
 800d76c:	47c0      	blx	r8
 800d76e:	3001      	adds	r0, #1
 800d770:	d0e6      	beq.n	800d740 <_printf_common+0xa4>
 800d772:	3601      	adds	r6, #1
 800d774:	e7d9      	b.n	800d72a <_printf_common+0x8e>
	...

0800d778 <_printf_i>:
 800d778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d77c:	460c      	mov	r4, r1
 800d77e:	4691      	mov	r9, r2
 800d780:	7e27      	ldrb	r7, [r4, #24]
 800d782:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d784:	2f78      	cmp	r7, #120	; 0x78
 800d786:	4680      	mov	r8, r0
 800d788:	469a      	mov	sl, r3
 800d78a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d78e:	d807      	bhi.n	800d7a0 <_printf_i+0x28>
 800d790:	2f62      	cmp	r7, #98	; 0x62
 800d792:	d80a      	bhi.n	800d7aa <_printf_i+0x32>
 800d794:	2f00      	cmp	r7, #0
 800d796:	f000 80d8 	beq.w	800d94a <_printf_i+0x1d2>
 800d79a:	2f58      	cmp	r7, #88	; 0x58
 800d79c:	f000 80a3 	beq.w	800d8e6 <_printf_i+0x16e>
 800d7a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7a8:	e03a      	b.n	800d820 <_printf_i+0xa8>
 800d7aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7ae:	2b15      	cmp	r3, #21
 800d7b0:	d8f6      	bhi.n	800d7a0 <_printf_i+0x28>
 800d7b2:	a001      	add	r0, pc, #4	; (adr r0, 800d7b8 <_printf_i+0x40>)
 800d7b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d7b8:	0800d811 	.word	0x0800d811
 800d7bc:	0800d825 	.word	0x0800d825
 800d7c0:	0800d7a1 	.word	0x0800d7a1
 800d7c4:	0800d7a1 	.word	0x0800d7a1
 800d7c8:	0800d7a1 	.word	0x0800d7a1
 800d7cc:	0800d7a1 	.word	0x0800d7a1
 800d7d0:	0800d825 	.word	0x0800d825
 800d7d4:	0800d7a1 	.word	0x0800d7a1
 800d7d8:	0800d7a1 	.word	0x0800d7a1
 800d7dc:	0800d7a1 	.word	0x0800d7a1
 800d7e0:	0800d7a1 	.word	0x0800d7a1
 800d7e4:	0800d931 	.word	0x0800d931
 800d7e8:	0800d855 	.word	0x0800d855
 800d7ec:	0800d913 	.word	0x0800d913
 800d7f0:	0800d7a1 	.word	0x0800d7a1
 800d7f4:	0800d7a1 	.word	0x0800d7a1
 800d7f8:	0800d953 	.word	0x0800d953
 800d7fc:	0800d7a1 	.word	0x0800d7a1
 800d800:	0800d855 	.word	0x0800d855
 800d804:	0800d7a1 	.word	0x0800d7a1
 800d808:	0800d7a1 	.word	0x0800d7a1
 800d80c:	0800d91b 	.word	0x0800d91b
 800d810:	680b      	ldr	r3, [r1, #0]
 800d812:	1d1a      	adds	r2, r3, #4
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	600a      	str	r2, [r1, #0]
 800d818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d81c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d820:	2301      	movs	r3, #1
 800d822:	e0a3      	b.n	800d96c <_printf_i+0x1f4>
 800d824:	6825      	ldr	r5, [r4, #0]
 800d826:	6808      	ldr	r0, [r1, #0]
 800d828:	062e      	lsls	r6, r5, #24
 800d82a:	f100 0304 	add.w	r3, r0, #4
 800d82e:	d50a      	bpl.n	800d846 <_printf_i+0xce>
 800d830:	6805      	ldr	r5, [r0, #0]
 800d832:	600b      	str	r3, [r1, #0]
 800d834:	2d00      	cmp	r5, #0
 800d836:	da03      	bge.n	800d840 <_printf_i+0xc8>
 800d838:	232d      	movs	r3, #45	; 0x2d
 800d83a:	426d      	negs	r5, r5
 800d83c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d840:	485e      	ldr	r0, [pc, #376]	; (800d9bc <_printf_i+0x244>)
 800d842:	230a      	movs	r3, #10
 800d844:	e019      	b.n	800d87a <_printf_i+0x102>
 800d846:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d84a:	6805      	ldr	r5, [r0, #0]
 800d84c:	600b      	str	r3, [r1, #0]
 800d84e:	bf18      	it	ne
 800d850:	b22d      	sxthne	r5, r5
 800d852:	e7ef      	b.n	800d834 <_printf_i+0xbc>
 800d854:	680b      	ldr	r3, [r1, #0]
 800d856:	6825      	ldr	r5, [r4, #0]
 800d858:	1d18      	adds	r0, r3, #4
 800d85a:	6008      	str	r0, [r1, #0]
 800d85c:	0628      	lsls	r0, r5, #24
 800d85e:	d501      	bpl.n	800d864 <_printf_i+0xec>
 800d860:	681d      	ldr	r5, [r3, #0]
 800d862:	e002      	b.n	800d86a <_printf_i+0xf2>
 800d864:	0669      	lsls	r1, r5, #25
 800d866:	d5fb      	bpl.n	800d860 <_printf_i+0xe8>
 800d868:	881d      	ldrh	r5, [r3, #0]
 800d86a:	4854      	ldr	r0, [pc, #336]	; (800d9bc <_printf_i+0x244>)
 800d86c:	2f6f      	cmp	r7, #111	; 0x6f
 800d86e:	bf0c      	ite	eq
 800d870:	2308      	moveq	r3, #8
 800d872:	230a      	movne	r3, #10
 800d874:	2100      	movs	r1, #0
 800d876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d87a:	6866      	ldr	r6, [r4, #4]
 800d87c:	60a6      	str	r6, [r4, #8]
 800d87e:	2e00      	cmp	r6, #0
 800d880:	bfa2      	ittt	ge
 800d882:	6821      	ldrge	r1, [r4, #0]
 800d884:	f021 0104 	bicge.w	r1, r1, #4
 800d888:	6021      	strge	r1, [r4, #0]
 800d88a:	b90d      	cbnz	r5, 800d890 <_printf_i+0x118>
 800d88c:	2e00      	cmp	r6, #0
 800d88e:	d04d      	beq.n	800d92c <_printf_i+0x1b4>
 800d890:	4616      	mov	r6, r2
 800d892:	fbb5 f1f3 	udiv	r1, r5, r3
 800d896:	fb03 5711 	mls	r7, r3, r1, r5
 800d89a:	5dc7      	ldrb	r7, [r0, r7]
 800d89c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8a0:	462f      	mov	r7, r5
 800d8a2:	42bb      	cmp	r3, r7
 800d8a4:	460d      	mov	r5, r1
 800d8a6:	d9f4      	bls.n	800d892 <_printf_i+0x11a>
 800d8a8:	2b08      	cmp	r3, #8
 800d8aa:	d10b      	bne.n	800d8c4 <_printf_i+0x14c>
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	07df      	lsls	r7, r3, #31
 800d8b0:	d508      	bpl.n	800d8c4 <_printf_i+0x14c>
 800d8b2:	6923      	ldr	r3, [r4, #16]
 800d8b4:	6861      	ldr	r1, [r4, #4]
 800d8b6:	4299      	cmp	r1, r3
 800d8b8:	bfde      	ittt	le
 800d8ba:	2330      	movle	r3, #48	; 0x30
 800d8bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8c4:	1b92      	subs	r2, r2, r6
 800d8c6:	6122      	str	r2, [r4, #16]
 800d8c8:	f8cd a000 	str.w	sl, [sp]
 800d8cc:	464b      	mov	r3, r9
 800d8ce:	aa03      	add	r2, sp, #12
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	4640      	mov	r0, r8
 800d8d4:	f7ff fee2 	bl	800d69c <_printf_common>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	d14c      	bne.n	800d976 <_printf_i+0x1fe>
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e0:	b004      	add	sp, #16
 800d8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e6:	4835      	ldr	r0, [pc, #212]	; (800d9bc <_printf_i+0x244>)
 800d8e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d8ec:	6823      	ldr	r3, [r4, #0]
 800d8ee:	680e      	ldr	r6, [r1, #0]
 800d8f0:	061f      	lsls	r7, r3, #24
 800d8f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d8f6:	600e      	str	r6, [r1, #0]
 800d8f8:	d514      	bpl.n	800d924 <_printf_i+0x1ac>
 800d8fa:	07d9      	lsls	r1, r3, #31
 800d8fc:	bf44      	itt	mi
 800d8fe:	f043 0320 	orrmi.w	r3, r3, #32
 800d902:	6023      	strmi	r3, [r4, #0]
 800d904:	b91d      	cbnz	r5, 800d90e <_printf_i+0x196>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	f023 0320 	bic.w	r3, r3, #32
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	2310      	movs	r3, #16
 800d910:	e7b0      	b.n	800d874 <_printf_i+0xfc>
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	f043 0320 	orr.w	r3, r3, #32
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	2378      	movs	r3, #120	; 0x78
 800d91c:	4828      	ldr	r0, [pc, #160]	; (800d9c0 <_printf_i+0x248>)
 800d91e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d922:	e7e3      	b.n	800d8ec <_printf_i+0x174>
 800d924:	065e      	lsls	r6, r3, #25
 800d926:	bf48      	it	mi
 800d928:	b2ad      	uxthmi	r5, r5
 800d92a:	e7e6      	b.n	800d8fa <_printf_i+0x182>
 800d92c:	4616      	mov	r6, r2
 800d92e:	e7bb      	b.n	800d8a8 <_printf_i+0x130>
 800d930:	680b      	ldr	r3, [r1, #0]
 800d932:	6826      	ldr	r6, [r4, #0]
 800d934:	6960      	ldr	r0, [r4, #20]
 800d936:	1d1d      	adds	r5, r3, #4
 800d938:	600d      	str	r5, [r1, #0]
 800d93a:	0635      	lsls	r5, r6, #24
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	d501      	bpl.n	800d944 <_printf_i+0x1cc>
 800d940:	6018      	str	r0, [r3, #0]
 800d942:	e002      	b.n	800d94a <_printf_i+0x1d2>
 800d944:	0671      	lsls	r1, r6, #25
 800d946:	d5fb      	bpl.n	800d940 <_printf_i+0x1c8>
 800d948:	8018      	strh	r0, [r3, #0]
 800d94a:	2300      	movs	r3, #0
 800d94c:	6123      	str	r3, [r4, #16]
 800d94e:	4616      	mov	r6, r2
 800d950:	e7ba      	b.n	800d8c8 <_printf_i+0x150>
 800d952:	680b      	ldr	r3, [r1, #0]
 800d954:	1d1a      	adds	r2, r3, #4
 800d956:	600a      	str	r2, [r1, #0]
 800d958:	681e      	ldr	r6, [r3, #0]
 800d95a:	6862      	ldr	r2, [r4, #4]
 800d95c:	2100      	movs	r1, #0
 800d95e:	4630      	mov	r0, r6
 800d960:	f7f2 fcd6 	bl	8000310 <memchr>
 800d964:	b108      	cbz	r0, 800d96a <_printf_i+0x1f2>
 800d966:	1b80      	subs	r0, r0, r6
 800d968:	6060      	str	r0, [r4, #4]
 800d96a:	6863      	ldr	r3, [r4, #4]
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	2300      	movs	r3, #0
 800d970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d974:	e7a8      	b.n	800d8c8 <_printf_i+0x150>
 800d976:	6923      	ldr	r3, [r4, #16]
 800d978:	4632      	mov	r2, r6
 800d97a:	4649      	mov	r1, r9
 800d97c:	4640      	mov	r0, r8
 800d97e:	47d0      	blx	sl
 800d980:	3001      	adds	r0, #1
 800d982:	d0ab      	beq.n	800d8dc <_printf_i+0x164>
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	079b      	lsls	r3, r3, #30
 800d988:	d413      	bmi.n	800d9b2 <_printf_i+0x23a>
 800d98a:	68e0      	ldr	r0, [r4, #12]
 800d98c:	9b03      	ldr	r3, [sp, #12]
 800d98e:	4298      	cmp	r0, r3
 800d990:	bfb8      	it	lt
 800d992:	4618      	movlt	r0, r3
 800d994:	e7a4      	b.n	800d8e0 <_printf_i+0x168>
 800d996:	2301      	movs	r3, #1
 800d998:	4632      	mov	r2, r6
 800d99a:	4649      	mov	r1, r9
 800d99c:	4640      	mov	r0, r8
 800d99e:	47d0      	blx	sl
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	d09b      	beq.n	800d8dc <_printf_i+0x164>
 800d9a4:	3501      	adds	r5, #1
 800d9a6:	68e3      	ldr	r3, [r4, #12]
 800d9a8:	9903      	ldr	r1, [sp, #12]
 800d9aa:	1a5b      	subs	r3, r3, r1
 800d9ac:	42ab      	cmp	r3, r5
 800d9ae:	dcf2      	bgt.n	800d996 <_printf_i+0x21e>
 800d9b0:	e7eb      	b.n	800d98a <_printf_i+0x212>
 800d9b2:	2500      	movs	r5, #0
 800d9b4:	f104 0619 	add.w	r6, r4, #25
 800d9b8:	e7f5      	b.n	800d9a6 <_printf_i+0x22e>
 800d9ba:	bf00      	nop
 800d9bc:	08036b59 	.word	0x08036b59
 800d9c0:	08036b6a 	.word	0x08036b6a

0800d9c4 <__retarget_lock_acquire_recursive>:
 800d9c4:	4770      	bx	lr

0800d9c6 <__retarget_lock_release_recursive>:
 800d9c6:	4770      	bx	lr

0800d9c8 <_realloc_r>:
 800d9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ca:	4607      	mov	r7, r0
 800d9cc:	4614      	mov	r4, r2
 800d9ce:	460e      	mov	r6, r1
 800d9d0:	b921      	cbnz	r1, 800d9dc <_realloc_r+0x14>
 800d9d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	f7ff bc22 	b.w	800d220 <_malloc_r>
 800d9dc:	b922      	cbnz	r2, 800d9e8 <_realloc_r+0x20>
 800d9de:	f7ff fbcf 	bl	800d180 <_free_r>
 800d9e2:	4625      	mov	r5, r4
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9e8:	f000 f814 	bl	800da14 <_malloc_usable_size_r>
 800d9ec:	42a0      	cmp	r0, r4
 800d9ee:	d20f      	bcs.n	800da10 <_realloc_r+0x48>
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	f7ff fc14 	bl	800d220 <_malloc_r>
 800d9f8:	4605      	mov	r5, r0
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d0f2      	beq.n	800d9e4 <_realloc_r+0x1c>
 800d9fe:	4631      	mov	r1, r6
 800da00:	4622      	mov	r2, r4
 800da02:	f7ff fb7d 	bl	800d100 <memcpy>
 800da06:	4631      	mov	r1, r6
 800da08:	4638      	mov	r0, r7
 800da0a:	f7ff fbb9 	bl	800d180 <_free_r>
 800da0e:	e7e9      	b.n	800d9e4 <_realloc_r+0x1c>
 800da10:	4635      	mov	r5, r6
 800da12:	e7e7      	b.n	800d9e4 <_realloc_r+0x1c>

0800da14 <_malloc_usable_size_r>:
 800da14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da18:	1f18      	subs	r0, r3, #4
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	bfbc      	itt	lt
 800da1e:	580b      	ldrlt	r3, [r1, r0]
 800da20:	18c0      	addlt	r0, r0, r3
 800da22:	4770      	bx	lr

0800da24 <_init>:
 800da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da26:	bf00      	nop
 800da28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da2a:	bc08      	pop	{r3}
 800da2c:	469e      	mov	lr, r3
 800da2e:	4770      	bx	lr

0800da30 <_fini>:
 800da30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da32:	bf00      	nop
 800da34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da36:	bc08      	pop	{r3}
 800da38:	469e      	mov	lr, r3
 800da3a:	4770      	bx	lr
