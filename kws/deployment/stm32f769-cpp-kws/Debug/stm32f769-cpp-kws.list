
stm32f769-cpp-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe24  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b25c  08010028  08010028  00020028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b284  0802b284  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  0802b284  0802b284  0003b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b28c  0802b28c  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b28c  0802b28c  0003b28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b290  0802b290  0003b290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0802b294  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000080  0802b314  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0802b314  000404a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f963  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007bfd  00000000  00000000  0009fa11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  000a7610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  000a8fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037d75  00000000  00000000  000aa6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a23  00000000  00000000  000e244d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bb73  00000000  00000000  0010ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002969e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d8  00000000  00000000  00296a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0801000c 	.word	0x0801000c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0801000c 	.word	0x0801000c

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 80006d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80006d6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000704 <_ZN4MFCC8MelScaleEf+0x3c>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	f00e f965 	bl	800e9b8 <logf>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000708 <_ZN4MFCC8MelScaleEf+0x40>
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 80006fa:	eeb0 0a67 	vmov.f32	s0, s15
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	442f0000 	.word	0x442f0000
 8000708:	448ce000 	.word	0x448ce000

0800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f00d fc01 	bl	800df28 <log>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eeb0 0b47 	vmov.f64	d0, d7
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800074a:	ed97 1b00 	vldr	d1, [r7]
 800074e:	eeb0 0b47 	vmov.f64	d0, d7
 8000752:	f00d fdad 	bl	800e2b0 <pow>
 8000756:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800075a:	eeb0 0b47 	vmov.f64	d0, d7
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0000      	movs	r0, r0
	...

08000768 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8000768:	b580      	push	{r7, lr}
 800076a:	ed2d 8b02 	vpush	{d8}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffbd 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000792:	eeb0 8b40 	vmov.f64	d8, d0
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff ffb8 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800079c:	eeb0 6b40 	vmov.f64	d6, d0
 80007a0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80007a4:	eeb0 0b47 	vmov.f64	d0, d7
 80007a8:	f00e f846 	bl	800e838 <ceil>
 80007ac:	eeb0 7b40 	vmov.f64	d7, d0
 80007b0:	eeb0 0b47 	vmov.f64	d0, d7
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ffbd 	bl	8000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d201      	bcs.n	80007da <_ZN4MFCCC1Eiii+0x72>
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	e001      	b.n	80007de <_ZN4MFCCC1Eiii+0x76>
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4618      	mov	r0, r3
 80007e0:	f00d fb80 	bl	800dee4 <_Znaj>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d201      	bcs.n	80007fc <_ZN4MFCCC1Eiii+0x94>
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e001      	b.n	8000800 <_ZN4MFCCC1Eiii+0x98>
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4618      	mov	r0, r3
 8000802:	f00d fb6f 	bl	800dee4 <_Znaj>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 800080e:	20a0      	movs	r0, #160	; 0xa0
 8000810:	f00d fb68 	bl	800dee4 <_Znaj>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000822:	4293      	cmp	r3, r2
 8000824:	d201      	bcs.n	800082a <_ZN4MFCCC1Eiii+0xc2>
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	e001      	b.n	800082e <_ZN4MFCCC1Eiii+0xc6>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4618      	mov	r0, r3
 8000830:	f00d fb58 	bl	800dee4 <_Znaj>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	da26      	bge.n	8000896 <_ZN4MFCCC1Eiii+0x12e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000900 <_ZN4MFCCC1Eiii+0x198>
 800085a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000868:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000874:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000878:	ee36 7b47 	vsub.f64	d7, d6, d7
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < frame_len; i++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e7d4      	b.n	8000840 <_ZN4MFCCC1Eiii+0xd8>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8000896:	20a0      	movs	r0, #160	; 0xa0
 8000898:	f00d fb24 	bl	800dee4 <_Znaj>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 80008a4:	20a0      	movs	r0, #160	; 0xa0
 80008a6:	f00d fb1d 	bl	800dee4 <_Znaj>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f928 	bl	8000b08 <_ZN4MFCC16create_mel_fbankEv>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	2128      	movs	r1, #40	; 0x28
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 f890 	bl	80009e8 <_ZN4MFCC17create_dct_matrixEll>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80008ce:	2018      	movs	r0, #24
 80008d0:	f00d faf7 	bl	800dec2 <_Znwj>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f005 fd67 	bl	80063bc <arm_rfft_fast_init_f32>

}
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	ecbd 8b02 	vpop	{d8}
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f3af 8000 	nop.w
 8000900:	54442d18 	.word	0x54442d18
 8000904:	401921fb 	.word	0x401921fb

08000908 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  delete []frame;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <_ZN4MFCCD1Ev+0x1a>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4618      	mov	r0, r3
 800091e:	f00d face 	bl	800debe <_ZdaPv>
  delete [] buffer;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <_ZN4MFCCD1Ev+0x2c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4618      	mov	r0, r3
 8000930:	f00d fac5 	bl	800debe <_ZdaPv>
  delete []mel_energies;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <_ZN4MFCCD1Ev+0x3e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4618      	mov	r0, r3
 8000942:	f00d fabc 	bl	800debe <_ZdaPv>
  delete []window_func;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <_ZN4MFCCD1Ev+0x50>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4618      	mov	r0, r3
 8000954:	f00d fab3 	bl	800debe <_ZdaPv>
  delete []fbank_filter_first;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <_ZN4MFCCD1Ev+0x62>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4618      	mov	r0, r3
 8000966:	f00d faaa 	bl	800debe <_ZdaPv>
  delete []fbank_filter_last;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <_ZN4MFCCD1Ev+0x74>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f00d faa1 	bl	800debe <_ZdaPv>
  delete []dct_matrix;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <_ZN4MFCCD1Ev+0x86>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4618      	mov	r0, r3
 800098a:	f00d fa98 	bl	800debe <_ZdaPv>
  delete rfft;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <_ZN4MFCCD1Ev+0x96>
 8000996:	2118      	movs	r1, #24
 8000998:	4618      	mov	r0, r3
 800099a:	f00d fa8e 	bl	800deba <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b27      	cmp	r3, #39	; 0x27
 80009a6:	dc0f      	bgt.n	80009c8 <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <_ZN4MFCCD1Ev+0xb8>
 80009b8:	2104      	movs	r1, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00d fa7d 	bl	800deba <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7ec      	b.n	80009a2 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <_ZN4MFCCD1Ev+0xd0>
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00d fa71 	bl	800deba <_ZdlPvj>
}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	0000      	movs	r0, r0
 80009e4:	0000      	movs	r0, r0
	...

080009e8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	ed2d 8b02 	vpush	{d8}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d201      	bcs.n	8000a0c <_ZN4MFCC17create_dct_matrixEll+0x24>
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	e001      	b.n	8000a10 <_ZN4MFCC17create_dct_matrixEll+0x28>
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00d fa67 	bl	800dee4 <_Znaj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	db09      	blt.n	8000a58 <_ZN4MFCC17create_dct_matrixEll+0x70>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8000a44:	ed97 0a06 	vldr	s0, [r7, #24]
 8000a48:	f00e f81c 	bl	800ea84 <sqrtf>
 8000a4c:	eef0 7a40 	vmov.f32	s15, s0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000a56:	e004      	b.n	8000a62 <_ZN4MFCC17create_dct_matrixEll+0x7a>
    }
    else
    {
      *pOut = 0.0f;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a60:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	da41      	bge.n	8000af2 <_ZN4MFCC17create_dct_matrixEll+0x10a>
    for (n = 0; n < input_length; n++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3a      	ldr	r2, [r7, #32]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da37      	bge.n	8000aea <_ZN4MFCC17create_dct_matrixEll+0x102>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8000a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a7e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000b00 <_ZN4MFCC17create_dct_matrixEll+0x118>
 8000a90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	ee07 3a90 	vmov	s15, r3
 8000a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000aa2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000aa6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab8:	eeb0 0b47 	vmov.f64	d0, d7
 8000abc:	f00d ff34 	bl	800e928 <cos>
 8000ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	fb02 f203 	mul.w	r2, r2, r3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < input_length; n++) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	e7c3      	b.n	8000a72 <_ZN4MFCC17create_dct_matrixEll+0x8a>
  for (k = 0; k < coefficient_count; k++) {
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
 8000af0:	e7b9      	b.n	8000a66 <_ZN4MFCC17create_dct_matrixEll+0x7e>
    }
  }
  return M;
 8000af2:	69fb      	ldr	r3, [r7, #28]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	ecbd 8b02 	vpop	{d8}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	54442d18 	.word	0x54442d18
 8000b04:	400921fb 	.word	0x400921fb

08000b08 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b095      	sub	sp, #84	; 0x54
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <_ZN4MFCC16create_mel_fbankEv+0x12>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000d78 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8000b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8000b36:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000b3a:	f7ff fdc5 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 8000b42:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8000d7c <_ZN4MFCC16create_mel_fbankEv+0x274>
 8000b46:	f7ff fdbf 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b4a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8000b4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b5a:	eddf 6a89 	vldr	s13, [pc, #548]	; 8000d80 <_ZN4MFCC16create_mel_fbankEv+0x278>
 8000b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d201      	bcs.n	8000b74 <_ZN4MFCC16create_mel_fbankEv+0x6c>
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e001      	b.n	8000b78 <_ZN4MFCC16create_mel_fbankEv+0x70>
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00d f9b3 	bl	800dee4 <_Znaj>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 8000b82:	20a0      	movs	r0, #160	; 0xa0
 8000b84:	f00d f9ae 	bl	800dee4 <_Znaj>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b92:	2b27      	cmp	r3, #39	; 0x27
 8000b94:	f300 80e4 	bgt.w	8000d60 <_ZN4MFCC16create_mel_fbankEv+0x258>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 8000b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd8:	3302      	adds	r3, #2
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	da65      	bge.n	8000cda <_ZN4MFCC16create_mel_fbankEv+0x1d2>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8000c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c20:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 8000c24:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c28:	f7ff fd4e 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 8000c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8000c3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	dd40      	ble.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
 8000c50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d537      	bpl.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
        float weight;
        if (mel <= center_mel) {
 8000c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	d810      	bhi.n	8000c96 <_ZN4MFCC16create_mel_fbankEv+0x18e>
          weight = (mel - left_mel) / (center_mel - left_mel);
 8000c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8000c94:	e00f      	b.n	8000cb6 <_ZN4MFCC16create_mel_fbankEv+0x1ae>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 8000c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	6a3a      	ldr	r2, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc0:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d101      	bne.n	8000cce <_ZN4MFCC16create_mel_fbankEv+0x1c6>
          first_index = i;
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 8000cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd8:	e795      	b.n	8000c06 <_ZN4MFCC16create_mel_fbankEv+0xfe>
      }
    }

    fbank_filter_first[bin] = first_index;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ce6:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf4:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8000cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d201      	bcs.n	8000d0a <_ZN4MFCC16create_mel_fbankEv+0x202>
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	e001      	b.n	8000d0e <_ZN4MFCC16create_mel_fbankEv+0x206>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	69f9      	ldr	r1, [r7, #28]
 8000d14:	188c      	adds	r4, r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00d f8e4 	bl	800dee4 <_Znaj>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 8000d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dc13      	bgt.n	8000d58 <_ZN4MFCC16create_mel_fbankEv+0x250>
      mel_fbank[bin][j++] = this_bin[i];
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	6a3a      	ldr	r2, [r7, #32]
 8000d36:	441a      	add	r2, r3
 8000d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	69f9      	ldr	r1, [r7, #28]
 8000d3e:	440b      	add	r3, r1
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d44:	1c58      	adds	r0, r3, #1
 8000d46:	63b8      	str	r0, [r7, #56]	; 0x38
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 8000d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d52:	3301      	adds	r3, #1
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d56:	e7e7      	b.n	8000d28 <_ZN4MFCC16create_mel_fbankEv+0x220>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d5e:	e717      	b.n	8000b90 <_ZN4MFCC16create_mel_fbankEv+0x88>
    }
  }
  delete []this_bin;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <_ZN4MFCC16create_mel_fbankEv+0x264>
 8000d66:	6a38      	ldr	r0, [r7, #32]
 8000d68:	f00d f8a9 	bl	800debe <_ZdaPv>
  return mel_fbank;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3754      	adds	r7, #84	; 0x54
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	467a0000 	.word	0x467a0000
 8000d7c:	457a0000 	.word	0x457a0000
 8000d80:	42240000 	.word	0x42240000

08000d84 <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b095      	sub	sp, #84	; 0x54
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da18      	bge.n	8000dd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 8000d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001074 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dce:	e7e1      	b.n	8000d94 <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18d0      	adds	r0, r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	461a      	mov	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00e fca4 	bl	800f738 <memset>

  for (i = 0; i < frame_len; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	da1a      	bge.n	8000e34 <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	3301      	adds	r3, #1
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e32:	e7df      	b.n	8000df4 <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	2300      	movs	r3, #0
 8000e42:	f005 fa8d 	bl	8006360 <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da00      	bge.n	8000e50 <_ZN4MFCC12mfcc_computeEPKsPa+0xcc>
 8000e4e:	3301      	adds	r3, #1
 8000e50:	105b      	asrs	r3, r3, #1
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	3304      	adds	r3, #4
 8000e72:	ed93 7a00 	vldr	s14, [r3]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 8000e88:	2301      	movs	r3, #1
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da23      	bge.n	8000edc <_ZN4MFCC12mfcc_computeEPKsPa+0x158>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eda:	e7d7      	b.n	8000e8c <_ZN4MFCC12mfcc_computeEPKsPa+0x108>
  }
  buffer[0] = first_energy;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ee2:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef0:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef8:	2b27      	cmp	r3, #39	; 0x27
 8000efa:	dc6d      	bgt.n	8000fd8 <_ZN4MFCC12mfcc_computeEPKsPa+0x254>
    j = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dc3a      	bgt.n	8000fa4 <_ZN4MFCC12mfcc_computeEPKsPa+0x220>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8000f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	db09      	blt.n	8000f64 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e0>
      *pOut = sqrtf(in);
 8000f50:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f54:	f00d fd96 	bl	800ea84 <sqrtf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000f62:	e004      	b.n	8000f6e <_ZN4MFCC12mfcc_computeEPKsPa+0x1ea>
      *pOut = 0.0f;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f6c:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 8000f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa2:	e7c0      	b.n	8000f26 <_ZN4MFCC12mfcc_computeEPKsPa+0x1a2>
    }
    mel_energies[bin] = mel_energy;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 8000fb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d107      	bne.n	8000fd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x24c>
      mel_energies[bin] = FLT_MIN;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fce:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fd6:	e78e      	b.n	8000ef6 <_ZN4MFCC12mfcc_computeEPKsPa+0x172>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	2b27      	cmp	r3, #39	; 0x27
 8000fe0:	dc17      	bgt.n	8001012 <_ZN4MFCC12mfcc_computeEPKsPa+0x28e>
    mel_energies[bin] = logf(mel_energies[bin]);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18d4      	adds	r4, r2, r3
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f00d fcdb 	bl	800e9b8 <logf>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 800100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100c:	3301      	adds	r3, #1
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
 8001010:	e7e4      	b.n	8000fdc <_ZN4MFCC12mfcc_computeEPKsPa+0x258>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101c:	429a      	cmp	r2, r3
 800101e:	da72      	bge.n	8001106 <_ZN4MFCC12mfcc_computeEPKsPa+0x382>
    float sum = 0.0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b27      	cmp	r3, #39	; 0x27
 800102e:	dc27      	bgt.n	8001080 <_ZN4MFCC12mfcc_computeEPKsPa+0x2fc>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	461a      	mov	r2, r3
 8001040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106c:	3301      	adds	r3, #1
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001070:	e7db      	b.n	800102a <_ZN4MFCC12mfcc_computeEPKsPa+0x2a6>
 8001072:	bf00      	nop
 8001074:	47000000 	.word	0x47000000
 8001078:	42fe0000 	.word	0x42fe0000
 800107c:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 800109e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80010a2:	f7ff fb01 	bl	80006a8 <_ZSt5roundf>
 80010a6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80010aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010ae:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8001078 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	db05      	blt.n	80010c8 <_ZN4MFCC12mfcc_computeEPKsPa+0x344>
      mfcc_out[i] = 127;
 80010bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	227f      	movs	r2, #127	; 0x7f
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e01a      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else if(sum <= -128)
 80010c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010cc:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800107c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d805      	bhi.n	80010e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x362>
      mfcc_out[i] = -128;
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else
      mfcc_out[i] = sum; 
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	edc7 7a00 	vstr	s15, [r7]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b252      	sxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 80010fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001100:	3301      	adds	r3, #1
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001104:	e787      	b.n	8001016 <_ZN4MFCC12mfcc_computeEPKsPa+0x292>
  }

}
 8001106:	bf00      	nop
 8001108:	3754      	adds	r7, #84	; 0x54
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop

08001110 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <_ZN2NNC1Ev+0x1c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	0801598c 	.word	0x0801598c

08001130 <_ZN6DS_CNNC1Ev>:
const q7_t DS_CNN::conv5_pw_wt[CONV5_OUT_CH*CONV4_OUT_CH]=CONV5_PW_WT;
const q7_t DS_CNN::conv5_pw_bias[CONV5_OUT_CH]=CONV5_PW_BIAS;
const q7_t DS_CNN::final_fc_wt[CONV5_OUT_CH*OUT_DIM]=FINAL_FC_WT;
const q7_t DS_CNN::final_fc_bias[OUT_DIM]=FINAL_FC_BIAS;

DS_CNN::DS_CNN()
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffe8 	bl	8001110 <_ZN2NNC1Ev>
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <_ZN6DS_CNNC1Ev+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8001146:	f44f 408f 	mov.w	r0, #18304	; 0x4780
 800114a:	f00c fecb 	bl	800dee4 <_Znaj>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	61da      	str	r2, [r3, #28]
  buffer1 = scratch_pad;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  buffer2 = buffer1 + (CONV1_OUT_CH*CONV1_OUT_X*CONV1_OUT_Y);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  col_buffer = buffer2 + (CONV2_OUT_CH*CONV2_OUT_X*CONV2_OUT_Y);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	621a      	str	r2, [r3, #32]
  frame_len = FRAME_LEN;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f44f 7220 	mov.w	r2, #640	; 0x280
 800117c:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001184:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	220a      	movs	r2, #10
 800118a:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2231      	movs	r2, #49	; 0x31
 8001190:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08015978 	.word	0x08015978

080011ac <_ZN6DS_CNND1Ev>:

DS_CNN::~DS_CNN()
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <_ZN6DS_CNND1Ev+0x30>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <_ZN6DS_CNND1Ev+0x1e>
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c fe78 	bl	800deba <_ZdlPvj>
DS_CNN::~DS_CNN()
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa29 	bl	8001624 <_ZN2NND1Ev>
}
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	08015978 	.word	0x08015978

080011e0 <_ZN6DS_CNND0Ev>:
DS_CNN::~DS_CNN()
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
}
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffdf 	bl	80011ac <_ZN6DS_CNND1Ev>
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f00c fe62 	bl	800deba <_ZdlPvj>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN6DS_CNN6run_nnEPaS0_>:

void DS_CNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af10      	add	r7, sp, #64	; 0x40
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  //CONV1 : regular convolution
  arm_convolve_HWC_q7_basic_nonsquare(in_data, CONV1_IN_X, CONV1_IN_Y, 1, conv1_wt, CONV1_OUT_CH, CONV1_KX, CONV1_KY, CONV1_PX, CONV1_PY, CONV1_SX, CONV1_SY, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_X, CONV1_OUT_Y, (q15_t*)col_buffer, NULL);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6a12      	ldr	r2, [r2, #32]
 8001214:	2100      	movs	r1, #0
 8001216:	910f      	str	r1, [sp, #60]	; 0x3c
 8001218:	920e      	str	r2, [sp, #56]	; 0x38
 800121a:	2219      	movs	r2, #25
 800121c:	920d      	str	r2, [sp, #52]	; 0x34
 800121e:	2205      	movs	r2, #5
 8001220:	920c      	str	r2, [sp, #48]	; 0x30
 8001222:	930b      	str	r3, [sp, #44]	; 0x2c
 8001224:	2306      	movs	r3, #6
 8001226:	930a      	str	r3, [sp, #40]	; 0x28
 8001228:	2302      	movs	r3, #2
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <_ZN6DS_CNN6run_nnEPaS0_+0x2c0>)
 800122e:	9308      	str	r3, [sp, #32]
 8001230:	2302      	movs	r3, #2
 8001232:	9307      	str	r3, [sp, #28]
 8001234:	2302      	movs	r3, #2
 8001236:	9306      	str	r3, [sp, #24]
 8001238:	2304      	movs	r3, #4
 800123a:	9305      	str	r3, [sp, #20]
 800123c:	2301      	movs	r3, #1
 800123e:	9304      	str	r3, [sp, #16]
 8001240:	230a      	movs	r3, #10
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	2304      	movs	r3, #4
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <_ZN6DS_CNN6run_nnEPaS0_+0x2c4>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2231      	movs	r2, #49	; 0x31
 8001254:	210a      	movs	r1, #10
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f005 fb98 	bl	800698c <arm_convolve_HWC_q7_basic_nonsquare>
  arm_relu_q7(buffer1,CONV1_OUT_X*CONV1_OUT_Y*CONV1_OUT_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001264:	4618      	mov	r0, r3
 8001266:	f005 f98b 	bl	8006580 <arm_relu_q7>

  //CONV2 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV2_IN_X,CONV2_IN_Y,CONV1_OUT_CH,conv2_ds_wt,CONV1_OUT_CH,CONV2_DS_KX,CONV2_DS_KY,CONV2_DS_PX,CONV2_DS_PY,CONV2_DS_SX,CONV2_DS_SY,conv2_ds_bias,CONV2_DS_BIAS_LSHIFT,CONV2_DS_OUT_RSHIFT,buffer2,CONV2_OUT_X,CONV2_OUT_Y,(q15_t*)col_buffer, NULL);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6a12      	ldr	r2, [r2, #32]
 8001276:	2100      	movs	r1, #0
 8001278:	910f      	str	r1, [sp, #60]	; 0x3c
 800127a:	920e      	str	r2, [sp, #56]	; 0x38
 800127c:	2219      	movs	r2, #25
 800127e:	920d      	str	r2, [sp, #52]	; 0x34
 8001280:	2205      	movs	r2, #5
 8001282:	920c      	str	r2, [sp, #48]	; 0x30
 8001284:	930b      	str	r3, [sp, #44]	; 0x2c
 8001286:	2305      	movs	r3, #5
 8001288:	930a      	str	r3, [sp, #40]	; 0x28
 800128a:	2302      	movs	r3, #2
 800128c:	9309      	str	r3, [sp, #36]	; 0x24
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <_ZN6DS_CNN6run_nnEPaS0_+0x2c8>)
 8001290:	9308      	str	r3, [sp, #32]
 8001292:	2301      	movs	r3, #1
 8001294:	9307      	str	r3, [sp, #28]
 8001296:	2301      	movs	r3, #1
 8001298:	9306      	str	r3, [sp, #24]
 800129a:	2301      	movs	r3, #1
 800129c:	9305      	str	r3, [sp, #20]
 800129e:	2301      	movs	r3, #1
 80012a0:	9304      	str	r3, [sp, #16]
 80012a2:	2303      	movs	r3, #3
 80012a4:	9303      	str	r3, [sp, #12]
 80012a6:	2303      	movs	r3, #3
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b87      	ldr	r3, [pc, #540]	; (80014cc <_ZN6DS_CNN6run_nnEPaS0_+0x2cc>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	2219      	movs	r2, #25
 80012b6:	2105      	movs	r1, #5
 80012b8:	f005 fd60 	bl	8006d7c <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 f95b 	bl	8006580 <arm_relu_q7>

  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV2_OUT_X, CONV2_OUT_Y, CONV1_OUT_CH, conv2_pw_wt, CONV2_OUT_CH, 1, 1, 0, 0, 1, 1, conv2_pw_bias, CONV2_PW_BIAS_LSHIFT, CONV2_PW_OUT_RSHIFT, buffer1, CONV2_OUT_X, CONV2_OUT_Y, (q15_t*)col_buffer, NULL);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6a12      	ldr	r2, [r2, #32]
 80012d6:	2100      	movs	r1, #0
 80012d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80012da:	920e      	str	r2, [sp, #56]	; 0x38
 80012dc:	2219      	movs	r2, #25
 80012de:	920d      	str	r2, [sp, #52]	; 0x34
 80012e0:	2205      	movs	r2, #5
 80012e2:	920c      	str	r2, [sp, #48]	; 0x30
 80012e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80012e6:	2308      	movs	r3, #8
 80012e8:	930a      	str	r3, [sp, #40]	; 0x28
 80012ea:	2304      	movs	r3, #4
 80012ec:	9309      	str	r3, [sp, #36]	; 0x24
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <_ZN6DS_CNN6run_nnEPaS0_+0x2d0>)
 80012f0:	9308      	str	r3, [sp, #32]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9307      	str	r3, [sp, #28]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9306      	str	r3, [sp, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9305      	str	r3, [sp, #20]
 80012fe:	2300      	movs	r3, #0
 8001300:	9304      	str	r3, [sp, #16]
 8001302:	2301      	movs	r3, #1
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	2301      	movs	r3, #1
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <_ZN6DS_CNN6run_nnEPaS0_+0x2d4>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	2219      	movs	r2, #25
 8001316:	2105      	movs	r1, #5
 8001318:	f005 f993 	bl	8006642 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f92b 	bl	8006580 <arm_relu_q7>

  //CONV3 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV3_IN_X,CONV3_IN_Y,CONV2_OUT_CH,conv3_ds_wt,CONV2_OUT_CH,CONV3_DS_KX,CONV3_DS_KY,CONV3_DS_PX,CONV3_DS_PY,CONV3_DS_SX,CONV3_DS_SY,conv3_ds_bias,CONV3_DS_BIAS_LSHIFT,CONV3_DS_OUT_RSHIFT,buffer2,CONV3_OUT_X,CONV3_OUT_Y,(q15_t*)col_buffer, NULL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6a12      	ldr	r2, [r2, #32]
 8001336:	2100      	movs	r1, #0
 8001338:	910f      	str	r1, [sp, #60]	; 0x3c
 800133a:	920e      	str	r2, [sp, #56]	; 0x38
 800133c:	2219      	movs	r2, #25
 800133e:	920d      	str	r2, [sp, #52]	; 0x34
 8001340:	2205      	movs	r2, #5
 8001342:	920c      	str	r2, [sp, #48]	; 0x30
 8001344:	930b      	str	r3, [sp, #44]	; 0x2c
 8001346:	2304      	movs	r3, #4
 8001348:	930a      	str	r3, [sp, #40]	; 0x28
 800134a:	2302      	movs	r3, #2
 800134c:	9309      	str	r3, [sp, #36]	; 0x24
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <_ZN6DS_CNN6run_nnEPaS0_+0x2d8>)
 8001350:	9308      	str	r3, [sp, #32]
 8001352:	2301      	movs	r3, #1
 8001354:	9307      	str	r3, [sp, #28]
 8001356:	2301      	movs	r3, #1
 8001358:	9306      	str	r3, [sp, #24]
 800135a:	2301      	movs	r3, #1
 800135c:	9305      	str	r3, [sp, #20]
 800135e:	2301      	movs	r3, #1
 8001360:	9304      	str	r3, [sp, #16]
 8001362:	2303      	movs	r3, #3
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	2303      	movs	r3, #3
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <_ZN6DS_CNN6run_nnEPaS0_+0x2dc>)
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2340      	movs	r3, #64	; 0x40
 8001374:	2219      	movs	r2, #25
 8001376:	2105      	movs	r1, #5
 8001378:	f005 fd00 	bl	8006d7c <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001384:	4618      	mov	r0, r3
 8001386:	f005 f8fb 	bl	8006580 <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV3_OUT_X, CONV3_OUT_Y, CONV2_OUT_CH, conv3_pw_wt, CONV3_OUT_CH, 1, 1, 0, 0, 1, 1, conv3_pw_bias, CONV3_PW_BIAS_LSHIFT, CONV3_PW_OUT_RSHIFT, buffer1, CONV3_OUT_X, CONV3_OUT_Y, (q15_t*)col_buffer, NULL);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	6a12      	ldr	r2, [r2, #32]
 8001396:	2100      	movs	r1, #0
 8001398:	910f      	str	r1, [sp, #60]	; 0x3c
 800139a:	920e      	str	r2, [sp, #56]	; 0x38
 800139c:	2219      	movs	r2, #25
 800139e:	920d      	str	r2, [sp, #52]	; 0x34
 80013a0:	2205      	movs	r2, #5
 80013a2:	920c      	str	r2, [sp, #48]	; 0x30
 80013a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80013a6:	2308      	movs	r3, #8
 80013a8:	930a      	str	r3, [sp, #40]	; 0x28
 80013aa:	2305      	movs	r3, #5
 80013ac:	9309      	str	r3, [sp, #36]	; 0x24
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <_ZN6DS_CNN6run_nnEPaS0_+0x2e0>)
 80013b0:	9308      	str	r3, [sp, #32]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9307      	str	r3, [sp, #28]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9306      	str	r3, [sp, #24]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9305      	str	r3, [sp, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <_ZN6DS_CNN6run_nnEPaS0_+0x2e4>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	2219      	movs	r2, #25
 80013d6:	2105      	movs	r1, #5
 80013d8:	f005 f933 	bl	8006642 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 f8cb 	bl	8006580 <arm_relu_q7>

  //CONV4 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV4_IN_X,CONV4_IN_Y,CONV3_OUT_CH,conv4_ds_wt,CONV3_OUT_CH,CONV4_DS_KX,CONV4_DS_KY,CONV4_DS_PX,CONV4_DS_PY,CONV4_DS_SX,CONV4_DS_SY,conv4_ds_bias,CONV4_DS_BIAS_LSHIFT,CONV4_DS_OUT_RSHIFT,buffer2,CONV4_OUT_X,CONV4_OUT_Y,(q15_t*)col_buffer, NULL);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	6a12      	ldr	r2, [r2, #32]
 80013f6:	2100      	movs	r1, #0
 80013f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80013fa:	920e      	str	r2, [sp, #56]	; 0x38
 80013fc:	2219      	movs	r2, #25
 80013fe:	920d      	str	r2, [sp, #52]	; 0x34
 8001400:	2205      	movs	r2, #5
 8001402:	920c      	str	r2, [sp, #48]	; 0x30
 8001404:	930b      	str	r3, [sp, #44]	; 0x2c
 8001406:	2305      	movs	r3, #5
 8001408:	930a      	str	r3, [sp, #40]	; 0x28
 800140a:	2303      	movs	r3, #3
 800140c:	9309      	str	r3, [sp, #36]	; 0x24
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <_ZN6DS_CNN6run_nnEPaS0_+0x2e8>)
 8001410:	9308      	str	r3, [sp, #32]
 8001412:	2301      	movs	r3, #1
 8001414:	9307      	str	r3, [sp, #28]
 8001416:	2301      	movs	r3, #1
 8001418:	9306      	str	r3, [sp, #24]
 800141a:	2301      	movs	r3, #1
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	2301      	movs	r3, #1
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	2303      	movs	r3, #3
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	2303      	movs	r3, #3
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2340      	movs	r3, #64	; 0x40
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <_ZN6DS_CNN6run_nnEPaS0_+0x2ec>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	2219      	movs	r2, #25
 8001436:	2105      	movs	r1, #5
 8001438:	f005 fca0 	bl	8006d7c <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f89b 	bl	8006580 <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV4_OUT_X, CONV4_OUT_Y, CONV3_OUT_CH, conv4_pw_wt, CONV4_OUT_CH, 1, 1, 0, 0, 1, 1, conv4_pw_bias, CONV4_PW_BIAS_LSHIFT, CONV4_PW_OUT_RSHIFT, buffer1, CONV4_OUT_X, CONV4_OUT_Y, (q15_t*)col_buffer, NULL);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6a12      	ldr	r2, [r2, #32]
 8001456:	2100      	movs	r1, #0
 8001458:	910f      	str	r1, [sp, #60]	; 0x3c
 800145a:	920e      	str	r2, [sp, #56]	; 0x38
 800145c:	2219      	movs	r2, #25
 800145e:	920d      	str	r2, [sp, #52]	; 0x34
 8001460:	2205      	movs	r2, #5
 8001462:	920c      	str	r2, [sp, #48]	; 0x30
 8001464:	930b      	str	r3, [sp, #44]	; 0x2c
 8001466:	2307      	movs	r3, #7
 8001468:	930a      	str	r3, [sp, #40]	; 0x28
 800146a:	2305      	movs	r3, #5
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <_ZN6DS_CNN6run_nnEPaS0_+0x2f0>)
 8001470:	9308      	str	r3, [sp, #32]
 8001472:	2301      	movs	r3, #1
 8001474:	9307      	str	r3, [sp, #28]
 8001476:	2301      	movs	r3, #1
 8001478:	9306      	str	r3, [sp, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	9305      	str	r3, [sp, #20]
 800147e:	2300      	movs	r3, #0
 8001480:	9304      	str	r3, [sp, #16]
 8001482:	2301      	movs	r3, #1
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	2301      	movs	r3, #1
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_ZN6DS_CNN6run_nnEPaS0_+0x2f4>)
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	2219      	movs	r2, #25
 8001496:	2105      	movs	r1, #5
 8001498:	f005 f8d3 	bl	8006642 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 f86b 	bl	8006580 <arm_relu_q7>

  //CONV5 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV5_IN_X,CONV5_IN_Y,CONV4_OUT_CH,conv5_ds_wt,CONV4_OUT_CH,CONV5_DS_KX,CONV5_DS_KY,CONV5_DS_PX,CONV5_DS_PY,CONV5_DS_SX,CONV5_DS_SY,conv5_ds_bias,CONV5_DS_BIAS_LSHIFT,CONV5_DS_OUT_RSHIFT,buffer2,CONV5_OUT_X,CONV5_OUT_Y,(q15_t*)col_buffer, NULL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	6a12      	ldr	r2, [r2, #32]
 80014b6:	2100      	movs	r1, #0
 80014b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80014ba:	920e      	str	r2, [sp, #56]	; 0x38
 80014bc:	2219      	movs	r2, #25
 80014be:	e01b      	b.n	80014f8 <_ZN6DS_CNN6run_nnEPaS0_+0x2f8>
 80014c0:	08010b24 	.word	0x08010b24
 80014c4:	08010124 	.word	0x08010124
 80014c8:	08010da4 	.word	0x08010da4
 80014cc:	08010b64 	.word	0x08010b64
 80014d0:	08011de4 	.word	0x08011de4
 80014d4:	08010de4 	.word	0x08010de4
 80014d8:	08012064 	.word	0x08012064
 80014dc:	08011e24 	.word	0x08011e24
 80014e0:	080130a4 	.word	0x080130a4
 80014e4:	080120a4 	.word	0x080120a4
 80014e8:	08013324 	.word	0x08013324
 80014ec:	080130e4 	.word	0x080130e4
 80014f0:	08014364 	.word	0x08014364
 80014f4:	08013364 	.word	0x08013364
 80014f8:	920d      	str	r2, [sp, #52]	; 0x34
 80014fa:	2205      	movs	r2, #5
 80014fc:	920c      	str	r2, [sp, #48]	; 0x30
 80014fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001500:	2305      	movs	r3, #5
 8001502:	930a      	str	r3, [sp, #40]	; 0x28
 8001504:	2303      	movs	r3, #3
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
 8001508:	4b40      	ldr	r3, [pc, #256]	; (800160c <_ZN6DS_CNN6run_nnEPaS0_+0x40c>)
 800150a:	9308      	str	r3, [sp, #32]
 800150c:	2301      	movs	r3, #1
 800150e:	9307      	str	r3, [sp, #28]
 8001510:	2301      	movs	r3, #1
 8001512:	9306      	str	r3, [sp, #24]
 8001514:	2301      	movs	r3, #1
 8001516:	9305      	str	r3, [sp, #20]
 8001518:	2301      	movs	r3, #1
 800151a:	9304      	str	r3, [sp, #16]
 800151c:	2303      	movs	r3, #3
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	2303      	movs	r3, #3
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2340      	movs	r3, #64	; 0x40
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <_ZN6DS_CNN6run_nnEPaS0_+0x410>)
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	2219      	movs	r2, #25
 8001530:	2105      	movs	r1, #5
 8001532:	f005 fc23 	bl	8006d7c <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f81e 	bl	8006580 <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV5_OUT_X, CONV5_OUT_Y, CONV4_OUT_CH, conv5_pw_wt, CONV5_OUT_CH, 1, 1, 0, 0, 1, 1, conv5_pw_bias, CONV5_PW_BIAS_LSHIFT, CONV5_PW_OUT_RSHIFT, buffer1, CONV5_OUT_X, CONV5_OUT_Y, (q15_t*)col_buffer, NULL);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6a12      	ldr	r2, [r2, #32]
 8001550:	2100      	movs	r1, #0
 8001552:	910f      	str	r1, [sp, #60]	; 0x3c
 8001554:	920e      	str	r2, [sp, #56]	; 0x38
 8001556:	2219      	movs	r2, #25
 8001558:	920d      	str	r2, [sp, #52]	; 0x34
 800155a:	2205      	movs	r2, #5
 800155c:	920c      	str	r2, [sp, #48]	; 0x30
 800155e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001560:	2308      	movs	r3, #8
 8001562:	930a      	str	r3, [sp, #40]	; 0x28
 8001564:	2305      	movs	r3, #5
 8001566:	9309      	str	r3, [sp, #36]	; 0x24
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <_ZN6DS_CNN6run_nnEPaS0_+0x414>)
 800156a:	9308      	str	r3, [sp, #32]
 800156c:	2301      	movs	r3, #1
 800156e:	9307      	str	r3, [sp, #28]
 8001570:	2301      	movs	r3, #1
 8001572:	9306      	str	r3, [sp, #24]
 8001574:	2300      	movs	r3, #0
 8001576:	9305      	str	r3, [sp, #20]
 8001578:	2300      	movs	r3, #0
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	2301      	movs	r3, #1
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	2301      	movs	r3, #1
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <_ZN6DS_CNN6run_nnEPaS0_+0x418>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	2219      	movs	r2, #25
 8001590:	2105      	movs	r1, #5
 8001592:	f005 f856 	bl	8006642 <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 ffee 	bl	8006580 <arm_relu_q7>

  //Average pool
  arm_avepool_q7_HWC_nonsquare (buffer1,CONV5_OUT_X,CONV5_OUT_Y,CONV5_OUT_CH,CONV5_OUT_X,CONV5_OUT_Y,0,0,1,1,1,1,NULL,buffer2, 2);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2202      	movs	r2, #2
 80015ae:	920a      	str	r2, [sp, #40]	; 0x28
 80015b0:	9309      	str	r3, [sp, #36]	; 0x24
 80015b2:	2300      	movs	r3, #0
 80015b4:	9308      	str	r3, [sp, #32]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9307      	str	r3, [sp, #28]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9306      	str	r3, [sp, #24]
 80015be:	2301      	movs	r3, #1
 80015c0:	9305      	str	r3, [sp, #20]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9303      	str	r3, [sp, #12]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2319      	movs	r3, #25
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2305      	movs	r3, #5
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	2219      	movs	r2, #25
 80015da:	2105      	movs	r1, #5
 80015dc:	f000 f832 	bl	8001644 <arm_avepool_q7_HWC_nonsquare>

  arm_fully_connected_q7(buffer2, final_fc_wt, CONV5_OUT_CH, OUT_DIM, FINAL_FC_BIAS_LSHIFT, FINAL_FC_OUT_RSHIFT, final_fc_bias, out_data, (q15_t*)col_buffer);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	9303      	str	r3, [sp, #12]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <_ZN6DS_CNN6run_nnEPaS0_+0x41c>)
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2307      	movs	r3, #7
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	2302      	movs	r3, #2
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	230c      	movs	r3, #12
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <_ZN6DS_CNN6run_nnEPaS0_+0x420>)
 8001600:	f007 f8a0 	bl	8008744 <arm_fully_connected_q7>

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	080145e4 	.word	0x080145e4
 8001610:	080143a4 	.word	0x080143a4
 8001614:	08015624 	.word	0x08015624
 8001618:	08014624 	.word	0x08014624
 800161c:	08015964 	.word	0x08015964
 8001620:	08015664 	.word	0x08015664

08001624 <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "ML-KWS-for-MCU/NN/nn.h"

NN::~NN() {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <_ZN2NND1Ev+0x1c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	0801598c 	.word	0x0801598c

08001644 <arm_avepool_q7_HWC_nonsquare>:
        const uint16_t dim_im_out_x,  // output image dimension
        const uint16_t dim_im_out_y,  // output image dimension
        q7_t * bufferA,               // a buffer for local storage
        q7_t * Im_out,                // output feature
        const uint16_t out_lshift)    // output left shift (scaling)
{
 8001644:	b4b0      	push	{r4, r5, r7}
 8001646:	b08b      	sub	sp, #44	; 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	460b      	mov	r3, r1
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	80fb      	strh	r3, [r7, #6]
  int16_t i_ch_in, i_x, i_y;
  int16_t k_x, k_y;
  
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 800165e:	2300      	movs	r3, #0
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001662:	e0b2      	b.n	80017ca <arm_avepool_q7_HWC_nonsquare+0x186>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 8001664:	2300      	movs	r3, #0
 8001666:	847b      	strh	r3, [r7, #34]	; 0x22
 8001668:	e0a2      	b.n	80017b0 <arm_avepool_q7_HWC_nonsquare+0x16c>
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800166a:	2300      	movs	r3, #0
 800166c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800166e:	e092      	b.n	8001796 <arm_avepool_q7_HWC_nonsquare+0x152>
        int sum = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
        int count = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 8001678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800167a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800167e:	fb12 f303 	smulbb	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	83fb      	strh	r3, [r7, #30]
 800168e:	e052      	b.n	8001736 <arm_avepool_q7_HWC_nonsquare+0xf2>
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001692:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001696:	fb12 f303 	smulbb	r3, r2, r3
 800169a:	b29a      	uxth	r2, r3
 800169c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	843b      	strh	r3, [r7, #32]
 80016a6:	e031      	b.n	800170c <arm_avepool_q7_HWC_nonsquare+0xc8>
            if (k_y >= 0 && k_x >= 0 && k_y<dim_im_in_y && k_x<dim_im_in_x) {
 80016a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db27      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db23      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80016bc:	893b      	ldrh	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	da1e      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da19      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
              sum += Im_in[i_ch_in + ch_im_in*(k_x+k_y*dim_im_in_x)];
 80016cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80016d6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80016da:	897c      	ldrh	r4, [r7, #10]
 80016dc:	fb04 f101 	mul.w	r1, r4, r1
 80016e0:	4401      	add	r1, r0
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	f993 3000 	ldrsb.w	r3, [r3]
 80016f2:	461a      	mov	r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4413      	add	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
              count++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	843b      	strh	r3, [r7, #32]
 800170c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001710:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001714:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001718:	fb01 f103 	mul.w	r1, r1, r3
 800171c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001720:	1ac9      	subs	r1, r1, r3
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	440b      	add	r3, r1
 8001726:	429a      	cmp	r2, r3
 8001728:	dbbe      	blt.n	80016a8 <arm_avepool_q7_HWC_nonsquare+0x64>
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 800172a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	83fb      	strh	r3, [r7, #30]
 8001736:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800173a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800173e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8001742:	fb01 f103 	mul.w	r1, r1, r3
 8001746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174e:	440b      	add	r3, r1
 8001750:	429a      	cmp	r2, r3
 8001752:	db9d      	blt.n	8001690 <arm_avepool_q7_HWC_nonsquare+0x4c>
            }
          }
        }
        Im_out[i_ch_in+ch_im_in*(i_x+i_y*dim_im_out_x)] = sum*(0x1<<out_lshift)/count;
 8001754:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	409a      	lsls	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fb92 f5f3 	sdiv	r5, r2, r3
 8001762:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 800176c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001770:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8001774:	fb04 f101 	mul.w	r1, r4, r1
 8001778:	4401      	add	r1, r0
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001784:	4413      	add	r3, r2
 8001786:	b26a      	sxtb	r2, r5
 8001788:	701a      	strb	r2, [r3, #0]
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800178a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800178e:	b29b      	uxth	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001796:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800179a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800179e:	429a      	cmp	r2, r3
 80017a0:	f6ff af66 	blt.w	8001670 <arm_avepool_q7_HWC_nonsquare+0x2c>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 80017a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80017b0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80017b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f6ff af56 	blt.w	800166a <arm_avepool_q7_HWC_nonsquare+0x26>
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 80017be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f6ff af47 	blt.w	8001664 <arm_avepool_q7_HWC_nonsquare+0x20>
      }
    }
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr

080017e2 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>


AudioPlayer::AudioPlayer(SAI_HandleTypeDef *hsai)
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
:hsai(hsai)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	611a      	str	r2, [r3, #16]
{
	sai_stop_flag = 1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	731a      	strb	r2, [r3, #12]

}
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	609a      	str	r2, [r3, #8]
	played_samples = 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
	converted_samples = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]

	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001838:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800183c:	f00c fb52 	bl	800dee4 <_Znaj>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	605a      	str	r2, [r3, #4]
	sai_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001848:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800184c:	f00c fb4a 	bl	800dee4 <_Znaj>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]


	// initial full read
	update_sai_buffer(0, PLAY_BUFFER_LENGTH);
 8001858:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800185c:	2100      	movs	r1, #0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f832 	bl	80018c8 <_ZN11AudioPlayer17update_sai_bufferEmm>

	// Start SAI in circular mode
	sai_stop_flag = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	731a      	strb	r2, [r3, #12]

	if (HAL_SAI_Transmit_DMA(hsai, (uint8_t*)sai_buffer, PLAY_BUFFER_LENGTH*sizeof(uint8_t)) == HAL_ERROR) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6918      	ldr	r0, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001876:	4619      	mov	r1, r3
 8001878:	f00b f886 	bl	800c988 <HAL_SAI_Transmit_DMA>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <_ZN11AudioPlayer10play_audioEP8WaveData+0x74>
		Error_Handler();
 800188c:	f000 fff6 	bl	800287c <Error_Handler>
	}

	while(!sai_stop_flag);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7b1b      	ldrb	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d100      	bne.n	800189a <_ZN11AudioPlayer10play_audioEP8WaveData+0x7e>
 8001898:	e7fa      	b.n	8001890 <_ZN11AudioPlayer10play_audioEP8WaveData+0x74>
	delete [] sai_buffer;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <_ZN11AudioPlayer10play_audioEP8WaveData+0x90>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00c fb09 	bl	800debe <_ZdaPv>
	delete [] conversion_buffer;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <_ZN11AudioPlayer10play_audioEP8WaveData+0xa2>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00c fb00 	bl	800debe <_ZdaPv>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <_ZN11AudioPlayer17update_sai_bufferEmm>:

// update buffer. Method called by sai callbacks functions.
void AudioPlayer::update_sai_buffer(uint32_t offset, uint32_t data_length) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 80018dc:	617b      	str	r3, [r7, #20]
	uint32_t read_length = data_length;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	61fb      	str	r3, [r7, #28]
	if (read_length >= remaining_samples) {
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d301      	bcc.n	80018ee <_ZN11AudioPlayer17update_sai_bufferEmm+0x26>
		read_length = remaining_samples;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	61fb      	str	r3, [r7, #28]
	}
	if (read_length > 0) {
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d046      	beq.n	8001982 <_ZN11AudioPlayer17update_sai_bufferEmm+0xba>
		qspi_read((uint8_t*)conversion_buffer, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6858      	ldr	r0, [r3, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	18d1      	adds	r1, r2, r3
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	461a      	mov	r2, r3
 800190c:	f000 ffbb 	bl	8002886 <_Z9qspi_readPhmm>
		for (uint32_t i = 0; i < read_length; i++){
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	429a      	cmp	r2, r3
 800191a:	d220      	bcs.n	800195e <_ZN11AudioPlayer17update_sai_bufferEmm+0x96>
			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_SAI_SCALE_FACTOR + WAVE_TO_SAI_BIAS);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001930:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800198c <_ZN11AudioPlayer17update_sai_bufferEmm+0xc4>
 8001934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001938:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001990 <_ZN11AudioPlayer17update_sai_bufferEmm+0xc8>
 800193c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194e:	ee17 2a90 	vmov	r2, s15
 8001952:	b292      	uxth	r2, r2
 8001954:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < read_length; i++){
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3301      	adds	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	e7da      	b.n	8001914 <_ZN11AudioPlayer17update_sai_bufferEmm+0x4c>
		}
		converted_samples += read_length;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	699a      	ldr	r2, [r3, #24]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	441a      	add	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	619a      	str	r2, [r3, #24]
		memcpy(sai_buffer + offset, conversion_buffer, read_length * SAI_DATA_WIDTH);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	18d0      	adds	r0, r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	461a      	mov	r2, r3
 800197e:	f00d feb3 	bl	800f6e8 <memcpy>
	}
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	3d7ff100 	.word	0x3d7ff100
 8001990:	44fff100 	.word	0x44fff100

08001994 <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
}
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	731a      	strb	r2, [r3, #12]
}
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
}
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 80019fe:	2008      	movs	r0, #8
 8001a00:	f00c fa5f 	bl	800dec2 <_Znwj>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461c      	mov	r4, r3
 8001a08:	6839      	ldr	r1, [r7, #0]
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff ffc2 	bl	8001994 <_ZN8WaveDataC1Em>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 8001a14:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001a18:	f00c fa64 	bl	800dee4 <_Znaj>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 8001a24:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001a28:	f00c fa5c 	bl	800dee4 <_Znaj>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6918      	ldr	r0, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a46:	4619      	mov	r1, r3
 8001a48:	f007 fd9e 	bl	8009588 <HAL_DFSDM_FilterRegularStart_DMA>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 8001a5c:	f000 ff0e 	bl	800287c <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <_ZN13AudioRecorder12record_audioEm+0xb8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 8001a68:	f000 f94c 	bl	8001d04 <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 8001a6c:	f002 f8c4 	bl	8003bf8 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d100      	bne.n	8001a7a <_ZN13AudioRecorder12record_audioEm+0x86>
 8001a78:	e7fa      	b.n	8001a70 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <_ZN13AudioRecorder12record_audioEm+0x98>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00c fa19 	bl	800debe <_ZdaPv>
	delete [] wave_buffer;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <_ZN13AudioRecorder12record_audioEm+0xaa>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00c fa10 	bl	800debe <_ZdaPv>
	return cur_data;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200003b0 	.word	0x200003b0

08001ab0 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001ac6:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d301      	bcc.n	8001ad8 <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d213      	bcs.n	8001b0c <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	440b      	add	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	1419      	asrs	r1, r3, #16
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	b20a      	sxth	r2, r1
 8001b02:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	e7e7      	b.n	8001adc <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6858      	ldr	r0, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	18d1      	adds	r1, r2, r3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	461a      	mov	r2, r3
 8001b26:	f000 fec7 	bl	80028b8 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	440a      	add	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <_Z13get_top_classPa>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(q7_t* nn_output) {
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8001b50:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001b54:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_Z13get_top_classPa+0x58>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d214      	bcs.n	8001b8e <_Z13get_top_classPa+0x4a>
		if (nn_output[i] > max_value) {
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4293      	cmp	r3, r2
 8001b74:	da07      	bge.n	8001b86 <_Z13get_top_classPa+0x42>
			max_index = i;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f993 3000 	ldrsb.w	r3, [r3]
 8001b84:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e7e5      	b.n	8001b5a <_Z13get_top_classPa+0x16>
		}
	}
	return max_index;
 8001b8e:	697b      	ldr	r3, [r7, #20]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000000 	.word	0x20000000

08001ba0 <_Z19average_predictionsPaS_mm>:

void average_predictions(q7_t *average_out, q7_t* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6178      	str	r0, [r7, #20]
 8001ba8:	6139      	str	r1, [r7, #16]
 8001baa:	60fa      	str	r2, [r7, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
	q15_t *sum = new q15_t[num_output_classes];
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <_Z19average_predictionsPaS_mm+0xdc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d801      	bhi.n	8001bba <_Z19average_predictionsPaS_mm+0x1a>
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	e001      	b.n	8001bbe <_Z19average_predictionsPaS_mm+0x1e>
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f00c f990 	bl	800dee4 <_Znaj>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d248      	bcs.n	8001c66 <_Z19average_predictionsPaS_mm+0xc6>
		sum[i] = 0;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d21d      	bcs.n	8001c28 <_Z19average_predictionsPaS_mm+0x88>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	fb01 f103 	mul.w	r1, r1, r3
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	440b      	add	r3, r1
 8001c06:	6939      	ldr	r1, [r7, #16]
 8001c08:	440b      	add	r3, r1
 8001c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b299      	uxth	r1, r3
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b20a      	sxth	r2, r1
 8001c1e:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	3301      	adds	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	e7dd      	b.n	8001be4 <_Z19average_predictionsPaS_mm+0x44>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	4413      	add	r3, r2
 8001c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c54:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c58:	793a      	ldrb	r2, [r7, #4]
 8001c5a:	b252      	sxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	3301      	adds	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
 8001c64:	e7b2      	b.n	8001bcc <_Z19average_predictionsPaS_mm+0x2c>
	}
	delete [] sum;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <_Z19average_predictionsPaS_mm+0xd2>
 8001c6c:	69f8      	ldr	r0, [r7, #28]
 8001c6e:	f00c f926 	bl	800debe <_ZdaPv>
}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	3ffffffc 	.word	0x3ffffffc

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db12      	blt.n	8001cf4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	490a      	ldr	r1, [pc, #40]	; (8001d00 <__NVIC_DisableIRQ+0x44>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	3320      	adds	r3, #32
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
}
 8001cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cee:	f3bf 8f6f 	isb	sy
}
 8001cf2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001d08:	f001 ff64 	bl	8003bd4 <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001d0c:	201c      	movs	r0, #28
 8001d0e:	f7ff ffd5 	bl	8001cbc <__NVIC_DisableIRQ>
//	NVIC_DisableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f008 fcdf 	bl	800a6d8 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001d1a:	201c      	movs	r0, #28
 8001d1c:	f7ff ffb0 	bl	8001c80 <__NVIC_EnableIRQ>
//	NVIC_EnableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	HAL_ResumeTick();
 8001d20:	f001 ff6a 	bl	8003bf8 <HAL_ResumeTick>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b0a7      	sub	sp, #156	; 0x9c
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2e:	f007 f918 	bl	8008f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d32:	f000 fa0d 	bl	8002150 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d36:	f000 fbe9 	bl	800250c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d3a:	f000 fbc1 	bl	80024c0 <_ZL11MX_DMA_Initv>
  MX_DFSDM1_Init();
 8001d3e:	f000 fac1 	bl	80022c4 <_ZL14MX_DFSDM1_Initv>
  MX_QUADSPI_Init();
 8001d42:	f000 fb1f 	bl	8002384 <_ZL15MX_QUADSPI_Initv>
  MX_USART1_UART_Init();
 8001d46:	f000 fb87 	bl	8002458 <_ZL19MX_USART1_UART_Initv>
  MX_SAI1_Init();
 8001d4a:	f000 fb4b 	bl	80023e4 <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */

  qspi_init();
 8001d4e:	f000 fdcc 	bl	80028ea <_Z9qspi_initv>
  main_state = SETUP;
 8001d52:	4bc1      	ldr	r3, [pc, #772]	; (8002058 <main+0x330>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"Silence", "Unknown","yes","no","up","down","left","right","on","off","stop","go"};
 8001d58:	4ac0      	ldr	r2, [pc, #768]	; (800205c <main+0x334>)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	2260      	movs	r2, #96	; 0x60
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00d fcc1 	bl	800f6e8 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(main_state) {
 8001d66:	4bbc      	ldr	r3, [pc, #752]	; (8002058 <main+0x330>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d8fa      	bhi.n	8001d66 <main+0x3e>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <main+0x50>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08002125 	.word	0x08002125
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001ddb 	.word	0x08001ddb
 8001d84:	08001e37 	.word	0x08001e37
 8001d88:	080020ed 	.word	0x080020ed
	case SETUP:
	{
		ITM_Port32(31) = 1;
 8001d8c:	4bb4      	ldr	r3, [pc, #720]	; (8002060 <main+0x338>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2120      	movs	r1, #32
 8001d96:	48b3      	ldr	r0, [pc, #716]	; (8002064 <main+0x33c>)
 8001d98:	f008 fc84 	bl	800a6a4 <HAL_GPIO_WritePin>

		// To indicate to user, don't do nothing when red light
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da2:	48b0      	ldr	r0, [pc, #704]	; (8002064 <main+0x33c>)
 8001da4:	f008 fc7e 	bl	800a6a4 <HAL_GPIO_WritePin>
		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 8001da8:	2106      	movs	r1, #6
 8001daa:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8001dae:	f000 fdad 	bl	800290c <_Z17qspi_erase_blocksmm>
		HAL_Delay(2000);
 8001db2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001db6:	f007 f901 	bl	8008fbc <HAL_Delay>

		ITM_Port32(31) = 2;
 8001dba:	4ba9      	ldr	r3, [pc, #676]	; (8002060 <main+0x338>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
		print("Press the blue button and say a keyword\r\n");
 8001dc0:	48a9      	ldr	r0, [pc, #676]	; (8002068 <main+0x340>)
 8001dc2:	f000 fd2f 	bl	8002824 <print>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dcc:	48a5      	ldr	r0, [pc, #660]	; (8002064 <main+0x33c>)
 8001dce:	f008 fc69 	bl	800a6a4 <HAL_GPIO_WritePin>
		main_state = READY;
 8001dd2:	4ba1      	ldr	r3, [pc, #644]	; (8002058 <main+0x330>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
		break;
 8001dd8:	e1ad      	b.n	8002136 <main+0x40e>
	}
	case RECORDING:
	{
		ITM_Port32(31) = 3;
 8001dda:	4ba1      	ldr	r3, [pc, #644]	; (8002060 <main+0x338>)
 8001ddc:	2203      	movs	r2, #3
 8001dde:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2120      	movs	r1, #32
 8001de4:	489f      	ldr	r0, [pc, #636]	; (8002064 <main+0x33c>)
 8001de6:	f008 fc5d 	bl	800a6a4 <HAL_GPIO_WritePin>
		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 8001dea:	2014      	movs	r0, #20
 8001dec:	f00c f869 	bl	800dec2 <_Znwj>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461c      	mov	r4, r3
 8001df4:	499d      	ldr	r1, [pc, #628]	; (800206c <main+0x344>)
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff fdde 	bl	80019b8 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8001dfc:	4b9c      	ldr	r3, [pc, #624]	; (8002070 <main+0x348>)
 8001dfe:	601c      	str	r4, [r3, #0]
		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8001e00:	4b9b      	ldr	r3, [pc, #620]	; (8002070 <main+0x348>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fdf3 	bl	80019f4 <_ZN13AudioRecorder12record_audioEm>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a98      	ldr	r2, [pc, #608]	; (8002074 <main+0x34c>)
 8001e12:	6013      	str	r3, [r2, #0]

		ITM_Port32(31) = 4;
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <main+0x338>)
 8001e16:	2204      	movs	r2, #4
 8001e18:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	4891      	ldr	r0, [pc, #580]	; (8002064 <main+0x33c>)
 8001e20:	f008 fc40 	bl	800a6a4 <HAL_GPIO_WritePin>
//		main_state = NN;
		audio_recorder->~AudioRecorder();
 8001e24:	4b92      	ldr	r3, [pc, #584]	; (8002070 <main+0x348>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fdd7 	bl	80019dc <_ZN13AudioRecorderD1Ev>
		main_state = AUDIO_TEST;
 8001e2e:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <main+0x330>)
 8001e30:	2204      	movs	r2, #4
 8001e32:	701a      	strb	r2, [r3, #0]
		break;
 8001e34:	e17f      	b.n	8002136 <main+0x40e>
	}
	case NN:
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e3c:	4889      	ldr	r0, [pc, #548]	; (8002064 <main+0x33c>)
 8001e3e:	f008 fc31 	bl	800a6a4 <HAL_GPIO_WritePin>

		// input buffer
		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 8001e42:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e46:	f00c f84d 	bl	800dee4 <_Znaj>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// mfcc coefficients
		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 8001e50:	2101      	movs	r1, #1
 8001e52:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8001e56:	f00d fc05 	bl	800f664 <calloc>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// output buffer
		q7_t *predictions = (q7_t*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(q7_t));
 8001e5e:	2101      	movs	r1, #1
 8001e60:	206c      	movs	r0, #108	; 0x6c
 8001e62:	f00d fbff 	bl	800f664 <calloc>
 8001e66:	4603      	mov	r3, r0
 8001e68:	67bb      	str	r3, [r7, #120]	; 0x78

		// average predictions
		q7_t *average = new q7_t[NUM_OUTPUT_CLASSES];
 8001e6a:	200c      	movs	r0, #12
 8001e6c:	f00c f83a 	bl	800dee4 <_Znaj>
 8001e70:	4603      	mov	r3, r0
 8001e72:	677b      	str	r3, [r7, #116]	; 0x74

		uint32_t pred_index;

		q7_t *mfcc_head;
		DS_CNN *ds_cnn = new DS_CNN();
 8001e74:	202c      	movs	r0, #44	; 0x2c
 8001e76:	f00c f824 	bl	800dec2 <_Znwj>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461c      	mov	r4, r3
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff f956 	bl	8001130 <_ZN6DS_CNNC1Ev>
 8001e84:	673c      	str	r4, [r7, #112]	; 0x70
		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 8001e86:	2034      	movs	r0, #52	; 0x34
 8001e88:	f00c f81b 	bl	800dec2 <_Znwj>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461c      	mov	r4, r3
 8001e90:	2301      	movs	r3, #1
 8001e92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001e96:	210a      	movs	r1, #10
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7fe fc65 	bl	8000768 <_ZN4MFCCC1Eiii>
 8001e9e:	66fc      	str	r4, [r7, #108]	; 0x6c

		bool keyword_detected = false;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		q7_t *average_window_head = predictions;
 8001ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ea8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	f200 80e8 	bhi.w	800208c <main+0x364>
				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 8001ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ec0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001ecc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001ed6:	f000 fcd6 	bl	8002886 <_Z9qspi_readPhmm>
				// move old data to the left
				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS * sizeof(q7_t));
 8001eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001edc:	3332      	adds	r3, #50	; 0x32
 8001ede:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001ee2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 ff76 	bl	8003dd6 <arm_copy_q7>
				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8001eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ef0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d81a      	bhi.n	8001f38 <main+0x210>
					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8001f02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	01db      	lsls	r3, r3, #7
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f14:	4413      	add	r3, r2
 8001f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f1e:	f7fe ff31 	bl	8000d84 <_ZN4MFCC12mfcc_computeEPKsPa>
					mfcc_head += NUM_MFCC_COEFFS;
 8001f22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f26:	330a      	adds	r3, #10
 8001f28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f30:	3301      	adds	r3, #1
 8001f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f36:	e7e0      	b.n	8001efa <main+0x1d2>
				}
				q7_t* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8001f38:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	461a      	mov	r2, r3
 8001f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f48:	4413      	add	r3, r2
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
				ds_cnn->run_nn(mfcc_out, nn_out);
 8001f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3308      	adds	r3, #8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f58:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f5a:	4798      	blx	r3
//				arm_softmax_q7(nn_out,NUM_OUTPUT_CLASSES,nn_out);

				// get prediction for each recording window
				if (DEBUG_MODE) {
 8001f5c:	4b46      	ldr	r3, [pc, #280]	; (8002078 <main+0x350>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d014      	beq.n	8001f8e <main+0x266>
					pred_index = get_top_class(nn_out);
 8001f64:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001f66:	f7ff fded 	bl	8001b44 <_Z13get_top_classPa>
 8001f6a:	6678      	str	r0, [r7, #100]	; 0x64
					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], nn_out[pred_index]);
 8001f6c:	1d3a      	adds	r2, r7, #4
 8001f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	18d1      	adds	r1, r2, r3
 8001f74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f78:	4413      	add	r3, r2
 8001f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7e:	460a      	mov	r2, r1
 8001f80:	493e      	ldr	r1, [pc, #248]	; (800207c <main+0x354>)
 8001f82:	483f      	ldr	r0, [pc, #252]	; (8002080 <main+0x358>)
 8001f84:	f00d fcee 	bl	800f964 <siprintf>
					print(uart_buffer);
 8001f88:	483d      	ldr	r0, [pc, #244]	; (8002080 <main+0x358>)
 8001f8a:	f000 fc4b 	bl	8002824 <print>
				}

				// increment average window pointer
				if (i >= AVERAGE_WINDOW_LENGTH) {
 8001f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d904      	bls.n	8001fa0 <main+0x278>
					average_window_head += NUM_OUTPUT_CLASSES;
 8001f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f9a:	330c      	adds	r3, #12
 8001f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001fa8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001faa:	f7ff fdf9 	bl	8001ba0 <_Z19average_predictionsPaS_mm>
				pred_index = get_top_class(average);
 8001fae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fb0:	f7ff fdc8 	bl	8001b44 <_Z13get_top_classPa>
 8001fb4:	6678      	str	r0, [r7, #100]	; 0x64

				if (DEBUG_MODE) {
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <main+0x350>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d010      	beq.n	8001fe0 <main+0x2b8>
					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], average[pred_index]);
 8001fbe:	1d3a      	adds	r2, r7, #4
 8001fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	18d1      	adds	r1, r2, r3
 8001fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fca:	4413      	add	r3, r2
 8001fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	492c      	ldr	r1, [pc, #176]	; (8002084 <main+0x35c>)
 8001fd4:	482a      	ldr	r0, [pc, #168]	; (8002080 <main+0x358>)
 8001fd6:	f00d fcc5 	bl	800f964 <siprintf>
					print(uart_buffer);
 8001fda:	4829      	ldr	r0, [pc, #164]	; (8002080 <main+0x358>)
 8001fdc:	f000 fc22 	bl	8002824 <print>
				}

				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 8001fe0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ff2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002040 <main+0x318>
 8001ff6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ffa:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002048 <main+0x320>
 8001ffe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002002:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002050 <main+0x328>
 8002006:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	dd0f      	ble.n	8002030 <main+0x308>
					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 8002010:	1d3a      	adds	r2, r7, #4
 8002012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	461a      	mov	r2, r3
 800201a:	491b      	ldr	r1, [pc, #108]	; (8002088 <main+0x360>)
 800201c:	4818      	ldr	r0, [pc, #96]	; (8002080 <main+0x358>)
 800201e:	f00d fca1 	bl	800f964 <siprintf>
					print(uart_buffer);
 8002022:	4817      	ldr	r0, [pc, #92]	; (8002080 <main+0x358>)
 8002024:	f000 fbfe 	bl	8002824 <print>
					keyword_detected = true;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
					break;
 800202e:	e02d      	b.n	800208c <main+0x364>
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8002030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002034:	3301      	adds	r3, #1
 8002036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800203a:	e73a      	b.n	8001eb2 <main+0x18a>
 800203c:	f3af 8000 	nop.w
 8002040:	00000000 	.word	0x00000000
 8002044:	40600000 	.word	0x40600000
 8002048:	00000000 	.word	0x00000000
 800204c:	40590000 	.word	0x40590000
 8002050:	00000000 	.word	0x00000000
 8002054:	40418000 	.word	0x40418000
 8002058:	2000033c 	.word	0x2000033c
 800205c:	080100c4 	.word	0x080100c4
 8002060:	e000007c 	.word	0xe000007c
 8002064:	40022400 	.word	0x40022400
 8002068:	08010028 	.word	0x08010028
 800206c:	2000009c 	.word	0x2000009c
 8002070:	200003a4 	.word	0x200003a4
 8002074:	200003a8 	.word	0x200003a8
 8002078:	20000004 	.word	0x20000004
 800207c:	08010054 	.word	0x08010054
 8002080:	20000340 	.word	0x20000340
 8002084:	08010074 	.word	0x08010074
 8002088:	08010090 	.word	0x08010090
				}
		}

		if (!keyword_detected) {
 800208c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <main+0x378>
			print("No keyword detected.");
 800209a:	4827      	ldr	r0, [pc, #156]	; (8002138 <main+0x410>)
 800209c:	f000 fbc2 	bl	8002824 <print>
		}

		mfcc->~MFCC();
 80020a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020a2:	f7fe fc31 	bl	8000908 <_ZN4MFCCD1Ev>
		ds_cnn->~DS_CNN();
 80020a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80020ae:	4798      	blx	r3
		delete [] mfcc_out;
 80020b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <main+0x394>
 80020b6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80020b8:	f00b ff01 	bl	800debe <_ZdaPv>
		delete [] predictions;
 80020bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <main+0x3a0>
 80020c2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80020c4:	f00b fefb 	bl	800debe <_ZdaPv>
		delete [] average;
 80020c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <main+0x3ac>
 80020ce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80020d0:	f00b fef5 	bl	800debe <_ZdaPv>
		delete [] audio_buffer;
 80020d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <main+0x3bc>
 80020dc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80020e0:	f00b feed 	bl	800debe <_ZdaPv>
		main_state = SETUP;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <main+0x414>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
		break;
 80020ea:	e024      	b.n	8002136 <main+0x40e>
	}
	case AUDIO_TEST:
	{
		audio_player = new AudioPlayer(&hsai_BlockA1);
 80020ec:	201c      	movs	r0, #28
 80020ee:	f00b fee8 	bl	800dec2 <_Znwj>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461c      	mov	r4, r3
 80020f6:	4912      	ldr	r1, [pc, #72]	; (8002140 <main+0x418>)
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff fb72 	bl	80017e2 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <main+0x41c>)
 8002100:	601c      	str	r4, [r3, #0]
		audio_player->play_audio(wave_data);
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <main+0x41c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <main+0x420>)
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fb85 	bl	800181c <_ZN11AudioPlayer10play_audioEP8WaveData>

//		audio_recorder->print_data(wave_data);
		main_state = NN;
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <main+0x414>)
 8002114:	2203      	movs	r2, #3
 8002116:	701a      	strb	r2, [r3, #0]
//		main_state = SETUP;
		audio_player->~AudioPlayer();
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <main+0x41c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb72 	bl	8001806 <_ZN11AudioPlayerD1Ev>

		break;
 8002122:	e008      	b.n	8002136 <main+0x40e>
	}
	case READY:
	{
		BLUE_BUTTON_WAIT();
 8002124:	f000 fa72 	bl	800260c <BLUE_BUTTON_WAIT>
		if (LOW_POWER_MODE)
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <main+0x424>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <main+0x40c>
			enter_sleep_mode();
 8002130:	f7ff fde8 	bl	8001d04 <_Z16enter_sleep_modev>
		break;
 8002134:	bf00      	nop
	}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002136:	e616      	b.n	8001d66 <main+0x3e>
 8002138:	080100ac 	.word	0x080100ac
 800213c:	2000033c 	.word	0x2000033c
 8002140:	200001d4 	.word	0x200001d4
 8002144:	200003ac 	.word	0x200003ac
 8002148:	200003a8 	.word	0x200003a8
 800214c:	200003b0 	.word	0x200003b0

08002150 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0b8      	sub	sp, #224	; 0xe0
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800215a:	2234      	movs	r2, #52	; 0x34
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f00d faea 	bl	800f738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	2290      	movs	r2, #144	; 0x90
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f00d fadb 	bl	800f738 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <_Z18SystemClock_Configv+0x168>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <_Z18SystemClock_Configv+0x168>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <_Z18SystemClock_Configv+0x168>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219a:	4b48      	ldr	r3, [pc, #288]	; (80022bc <_Z18SystemClock_Configv+0x16c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a47      	ldr	r2, [pc, #284]	; (80022bc <_Z18SystemClock_Configv+0x16c>)
 80021a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b45      	ldr	r3, [pc, #276]	; (80022bc <_Z18SystemClock_Configv+0x16c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021be:	2310      	movs	r3, #16
 80021c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d0:	2308      	movs	r3, #8
 80021d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80021d6:	23d8      	movs	r3, #216	; 0xd8
 80021d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e2:	2304      	movs	r3, #4
 80021e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021f2:	4618      	mov	r0, r3
 80021f4:	f008 ff52 	bl	800b09c <HAL_RCC_OscConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8002208:	f000 fb38 	bl	800287c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800220c:	f008 fa86 	bl	800a71c <HAL_PWREx_EnableOverDrive>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002220:	f000 fb2c 	bl	800287c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002224:	230f      	movs	r3, #15
 8002226:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002236:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800223a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002246:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800224a:	2107      	movs	r1, #7
 800224c:	4618      	mov	r0, r3
 800224e:	f009 f9d3 	bl	800b5f8 <HAL_RCC_ClockConfig>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 8002262:	f000 fb0b 	bl	800287c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <_Z18SystemClock_Configv+0x170>)
 8002268:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800226e:	2302      	movs	r3, #2
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8002272:	2306      	movs	r3, #6
 8002274:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8002276:	2301      	movs	r3, #1
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8002282:	2300      	movs	r3, #0
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002286:	2300      	movs	r3, #0
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	4618      	mov	r0, r3
 8002296:	f009 fbb7 	bl	800ba08 <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <_Z18SystemClock_Configv+0x15e>
  {
    Error_Handler();
 80022aa:	f000 fae7 	bl	800287c <Error_Handler>
  }
}
 80022ae:	bf00      	nop
 80022b0:	37e0      	adds	r7, #224	; 0xe0
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000
 80022c0:	08080040 	.word	0x08080040

080022c4 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <_ZL14MX_DFSDM1_Initv+0xb0>)
 80022cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80022da:	4b25      	ldr	r3, [pc, #148]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022dc:	2201      	movs	r2, #1
 80022de:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022e2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80022e6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 200;
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022ea:	22c8      	movs	r2, #200	; 0xc8
 80022ec:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80022f4:	481e      	ldr	r0, [pc, #120]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 80022f6:	f007 f827 	bl	8009348 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <_ZL14MX_DFSDM1_Initv+0xb8>)
 80022fe:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002302:	2201      	movs	r2, #1
 8002304:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 68;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800230e:	2244      	movs	r2, #68	; 0x44
 8002310:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800232c:	2204      	movs	r2, #4
 800232e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002338:	2201      	movs	r2, #1
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800233e:	2200      	movs	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800234a:	f006 ff3d 	bl	80091c8 <HAL_DFSDM_ChannelInit>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_ZL14MX_DFSDM1_Initv+0x9e>
  {
    Error_Handler();
 800235e:	f000 fa8d 	bl	800287c <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON);
 8002362:	2201      	movs	r2, #1
 8002364:	4906      	ldr	r1, [pc, #24]	; (8002380 <_ZL14MX_DFSDM1_Initv+0xbc>)
 8002366:	4802      	ldr	r0, [pc, #8]	; (8002370 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002368:	f007 f8c8 	bl	80094fc <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000009c 	.word	0x2000009c
 8002374:	40017500 	.word	0x40017500
 8002378:	200000f0 	.word	0x200000f0
 800237c:	40017440 	.word	0x40017440
 8002380:	00020004 	.word	0x00020004

08002384 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <_ZL15MX_QUADSPI_Initv+0x5c>)
 800238c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 8002390:	22ff      	movs	r2, #255	; 0xff
 8002392:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 8002396:	2201      	movs	r2, #1
 8002398:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80023be:	4807      	ldr	r0, [pc, #28]	; (80023dc <_ZL15MX_QUADSPI_Initv+0x58>)
 80023c0:	f008 f9fc 	bl	800a7bc <HAL_QSPI_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 80023d4:	f000 fa52 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000188 	.word	0x20000188
 80023e0:	a0001000 	.word	0xa0001000

080023e4 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <_ZL12MX_SAI1_Initv+0x70>)
 80023ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 800240e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002412:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 8002422:	2200      	movs	r2, #0
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 8002428:	2200      	movs	r2, #0
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800242c:	2302      	movs	r3, #2
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	4807      	ldr	r0, [pc, #28]	; (8002450 <_ZL12MX_SAI1_Initv+0x6c>)
 8002434:	f00a f882 	bl	800c53c <HAL_SAI_InitProtocol>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <_ZL12MX_SAI1_Initv+0x68>
  {
    Error_Handler();
 8002448:	f000 fa18 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200001d4 	.word	0x200001d4
 8002454:	40015804 	.word	0x40015804

08002458 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <_ZL19MX_USART1_UART_Initv+0x64>)
 8002460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800249c:	f00b f81a 	bl	800d4d4 <HAL_UART_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80024b0:	f000 f9e4 	bl	800287c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200002b8 	.word	0x200002b8
 80024bc:	40011000 	.word	0x40011000

080024c0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_ZL11MX_DMA_Initv+0x48>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a0f      	ldr	r2, [pc, #60]	; (8002508 <_ZL11MX_DMA_Initv+0x48>)
 80024cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <_ZL11MX_DMA_Initv+0x48>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2038      	movs	r0, #56	; 0x38
 80024e4:	f006 fe46 	bl	8009174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024e8:	2038      	movs	r0, #56	; 0x38
 80024ea:	f006 fe5f 	bl	80091ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2039      	movs	r0, #57	; 0x39
 80024f4:	f006 fe3e 	bl	8009174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80024f8:	2039      	movs	r0, #57	; 0x39
 80024fa:	f006 fe57 	bl	80091ac <HAL_NVIC_EnableIRQ>

}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	; 0x30
 8002510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002522:	4b37      	ldr	r3, [pc, #220]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a36      	ldr	r2, [pc, #216]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b28      	ldr	r3, [pc, #160]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a24      	ldr	r2, [pc, #144]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <_ZL12MX_GPIO_Initv+0xf4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f242 0120 	movw	r1, #8224	; 0x2020
 80025b8:	4812      	ldr	r0, [pc, #72]	; (8002604 <_ZL12MX_GPIO_Initv+0xf8>)
 80025ba:	f008 f873 	bl	800a6a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80025be:	f242 0320 	movw	r3, #8224	; 0x2020
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	480b      	ldr	r0, [pc, #44]	; (8002604 <_ZL12MX_GPIO_Initv+0xf8>)
 80025d8:	f007 fd94 	bl	800a104 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80025dc:	2301      	movs	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <_ZL12MX_GPIO_Initv+0xfc>)
 80025f2:	f007 fd87 	bl	800a104 <HAL_GPIO_Init>

}
 80025f6:	bf00      	nop
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	40022400 	.word	0x40022400
 8002608:	40020000 	.word	0x40020000

0800260c <BLUE_BUTTON_WAIT>:
//		}
//		break;
//	}
//}
void BLUE_BUTTON_WAIT()
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin)==GPIO_PIN_RESET);
 8002610:	2101      	movs	r1, #1
 8002612:	4816      	ldr	r0, [pc, #88]	; (800266c <BLUE_BUTTON_WAIT+0x60>)
 8002614:	f008 f82e 	bl	800a674 <HAL_GPIO_ReadPin>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d000      	beq.n	800262a <BLUE_BUTTON_WAIT+0x1e>
 8002628:	e7f2      	b.n	8002610 <BLUE_BUTTON_WAIT+0x4>
	switch(main_state) {
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <BLUE_BUTTON_WAIT+0x64>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b05      	cmp	r3, #5
 8002632:	d819      	bhi.n	8002668 <BLUE_BUTTON_WAIT+0x5c>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <BLUE_BUTTON_WAIT+0x30>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002655 	.word	0x08002655
 8002640:	08002667 	.word	0x08002667
 8002644:	0800265d 	.word	0x0800265d
 8002648:	08002667 	.word	0x08002667
 800264c:	08002667 	.word	0x08002667
 8002650:	08002667 	.word	0x08002667
	case READY:
		main_state = RECORDING;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <BLUE_BUTTON_WAIT+0x64>)
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]
		break;
 800265a:	e005      	b.n	8002668 <BLUE_BUTTON_WAIT+0x5c>
	case RECORDING:
		audio_recorder->dfsdm_stop_flag = 1;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <BLUE_BUTTON_WAIT+0x68>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2201      	movs	r2, #1
 8002662:	731a      	strb	r2, [r3, #12]
		break;
 8002664:	e000      	b.n	8002668 <BLUE_BUTTON_WAIT+0x5c>
	case SETUP:
	case MFCC_TEST:
	case AUDIO_TEST:
	case NN:
		break;
 8002666:	bf00      	nop
	}
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40020000 	.word	0x40020000
 8002670:	2000033c 	.word	0x2000033c
 8002674:	200003a4 	.word	0x200003a4

08002678 <HAL_SAI_TxHalfCpltCallback>:

// SAI Circular DMA callback functions
void HAL_SAI_TxHalfCpltCallback (SAI_HandleTypeDef *hsai) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	if (hsai->Instance == SAI1_Block_A) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d127      	bne.n	80026da <HAL_SAI_TxHalfCpltCallback+0x62>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_SAI_TxHalfCpltCallback+0x70>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_SAI_TxHalfCpltCallback+0x70>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002698:	615a      	str	r2, [r3, #20]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_SAI_TxHalfCpltCallback+0x70>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80026a4:	d311      	bcc.n	80026ca <HAL_SAI_TxHalfCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f00a f8fa 	bl	800c8a0 <HAL_SAI_DMAStop>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_SAI_TxHalfCpltCallback+0x48>
				Error_Handler();
 80026bc:	f000 f8de 	bl	800287c <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 80026c8:	e007      	b.n	80026da <HAL_SAI_TxHalfCpltCallback+0x62>
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff f8f7 	bl	80018c8 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40015804 	.word	0x40015804
 80026e8:	200003ac 	.word	0x200003ac

080026ec <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback (SAI_HandleTypeDef *hsai) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_SAI_TxCpltCallback+0x6c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_SAI_TxCpltCallback+0x6c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002702:	615a      	str	r2, [r3, #20]
	if (hsai->Instance == SAI1_Block_A) {
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_SAI_TxCpltCallback+0x70>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d120      	bne.n	8002750 <HAL_SAI_TxCpltCallback+0x64>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_SAI_TxCpltCallback+0x6c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002718:	d311      	bcc.n	800273e <HAL_SAI_TxCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f00a f8c0 	bl	800c8a0 <HAL_SAI_DMAStop>
 8002720:	4603      	mov	r3, r0
 8002722:	2b01      	cmp	r3, #1
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_SAI_TxCpltCallback+0x48>
				Error_Handler();
 8002730:	f000 f8a4 	bl	800287c <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_SAI_TxCpltCallback+0x6c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 800273c:	e008      	b.n	8002750 <HAL_SAI_TxCpltCallback+0x64>
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_SAI_TxCpltCallback+0x6c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002746:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f8bc 	bl	80018c8 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200003ac 	.word	0x200003ac
 800275c:	40015804 	.word	0x40015804

08002760 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d11f      	bne.n	80027b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f998 	bl	8001ab0 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800278c:	d310      	bcc.n	80027b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2201      	movs	r2, #1
 8002794:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f006 ff7a 	bl	8009690 <HAL_DFSDM_FilterRegularStop_DMA>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 80027ac:	f000 f866 	bl	800287c <Error_Handler>
			}
		}
	}
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000009c 	.word	0x2000009c
 80027bc:	200003a4 	.word	0x200003a4

080027c0 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a14      	ldr	r2, [pc, #80]	; (800281c <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d120      	bne.n	8002812 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80027d8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f967 	bl	8001ab0 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027ee:	d310      	bcc.n	8002812 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f006 ff49 	bl	8009690 <HAL_DFSDM_FilterRegularStop_DMA>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 800280e:	f000 f835 	bl	800287c <Error_Handler>
			}
		}

	}
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000009c 	.word	0x2000009c
 8002820:	200003a4 	.word	0x200003a4

08002824 <print>:

void print(const char* txt) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4808      	ldr	r0, [pc, #32]	; (8002850 <print+0x2c>)
 8002830:	f00d f8b8 	bl	800f9a4 <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fd fd63 	bl	8000300 <strlen>
 800283a:	4603      	mov	r3, r0
 800283c:	b29a      	uxth	r2, r3
 800283e:	230a      	movs	r3, #10
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <print+0x2c>)
 8002842:	4804      	ldr	r0, [pc, #16]	; (8002854 <print+0x30>)
 8002844:	f00a fe94 	bl	800d570 <HAL_UART_Transmit>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000340 	.word	0x20000340
 8002854:	200002b8 	.word	0x200002b8

08002858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800286a:	f006 fb87 	bl	8008f7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40001c00 	.word	0x40001c00

0800287c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002880:	b672      	cpsid	i
}
 8002882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002884:	e7fe      	b.n	8002884 <Error_Handler+0x8>

08002886 <_Z9qspi_readPhmm>:
#include <stdint.h>
#include "stm32f769i_discovery_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8c4 	bl	8002a24 <BSP_QSPI_Read>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 80028ac:	f7ff ffe6 	bl	800287c <Error_Handler>
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f8ff 	bl	8002acc <BSP_QSPI_Write>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 80028de:	f7ff ffcd 	bl	800287c <Error_Handler>
	}
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_Z9qspi_initv>:

void qspi_init() {
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 80028ee:	f000 f829 	bl	8002944 <BSP_QSPI_Init>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f962 	bl	8002bc8 <BSP_QSPI_Erase_Block>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d90b      	bls.n	800293a <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25L512_SUBSECTOR_SIZE);
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	031b      	lsls	r3, r3, #12
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ffe2 	bl	80028f6 <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3301      	adds	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e7ef      	b.n	800291a <_Z17qspi_erase_blocksmm+0xe>
	}
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800294a:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 800294c:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <BSP_QSPI_Init+0xdc>)
 800294e:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002950:	4832      	ldr	r0, [pc, #200]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 8002952:	f007 ffaf 	bl	800a8b4 <HAL_QSPI_DeInit>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e059      	b.n	8002a14 <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002960:	2100      	movs	r1, #0
 8002962:	482e      	ldr	r0, [pc, #184]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 8002964:	f000 f974 	bl	8002c50 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 800296a:	2201      	movs	r2, #1
 800296c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 8002970:	2210      	movs	r2, #16
 8002972:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 8002974:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 8002976:	2210      	movs	r2, #16
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800297e:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002988:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	461a      	mov	r2, r3
 8002994:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 8002996:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 800299a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800299e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80029b2:	481a      	ldr	r0, [pc, #104]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029b4:	f007 ff02 	bl	800a7bc <HAL_QSPI_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e028      	b.n	8002a14 <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80029c2:	4816      	ldr	r0, [pc, #88]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029c4:	f000 fa06 	bl	8002dd4 <QSPI_ResetMemory>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 80029ce:	2304      	movs	r3, #4
 80029d0:	e020      	b.n	8002a14 <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029d4:	f000 fc1d 	bl	8003212 <QSPI_EnterMemory_QPI>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 80029de:	2304      	movs	r3, #4
 80029e0:	e018      	b.n	8002a14 <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 80029e2:	480e      	ldr	r0, [pc, #56]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029e4:	f000 fb1e 	bl	8003024 <QSPI_EnterFourBytesAddress>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 80029ee:	2304      	movs	r3, #4
 80029f0:	e010      	b.n	8002a14 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 80029f2:	480a      	ldr	r0, [pc, #40]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 80029f4:	f000 fb51 	bl	800309a <QSPI_DummyCyclesCfg>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 80029fe:	2304      	movs	r3, #4
 8002a00:	e008      	b.n	8002a14 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8002a02:	4806      	ldr	r0, [pc, #24]	; (8002a1c <BSP_QSPI_Init+0xd8>)
 8002a04:	f000 fc52 	bl	80032ac <QSPI_OutDrvStrengthCfg>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e000      	b.n	8002a14 <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	200003f4 	.word	0x200003f4
 8002a20:	a0001000 	.word	0xa0001000

08002a24 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b092      	sub	sp, #72	; 0x48
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002a30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8002a36:	23ec      	movs	r3, #236	; 0xec
 8002a38:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002a3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002a40:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a44:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002a4e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8002a54:	230a      	movs	r3, #10
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002a60:	2300      	movs	r3, #0
 8002a62:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002a64:	2300      	movs	r3, #0
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4619      	mov	r1, r3
 8002a72:	4815      	ldr	r0, [pc, #84]	; (8002ac8 <BSP_QSPI_Read+0xa4>)
 8002a74:	f007 ff42 	bl	800a8fc <HAL_QSPI_Command>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e01d      	b.n	8002abe <BSP_QSPI_Read+0x9a>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_1_CYCLE);
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <BSP_QSPI_Read+0xa4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <BSP_QSPI_Read+0xa4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a90:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <BSP_QSPI_Read+0xa4>)
 8002a9a:	f008 f81f 	bl	800aadc <HAL_QSPI_Receive>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <BSP_QSPI_Read+0x84>
  {
    return QSPI_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e00a      	b.n	8002abe <BSP_QSPI_Read+0x9a>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <BSP_QSPI_Read+0xa4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <BSP_QSPI_Read+0xa4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002aba:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3748      	adds	r7, #72	; 0x48
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200003f4 	.word	0x200003f4

08002acc <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b096      	sub	sp, #88	; 0x58
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25L512_PAGE_SIZE - (WriteAddr % MX25L512_PAGE_SIZE);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002ae2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d901      	bls.n	8002aee <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 8002b00:	2312      	movs	r3, #18
 8002b02:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002b04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002b0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b0e:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002b14:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b22:	2300      	movs	r3, #0
 8002b24:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b26:	2300      	movs	r3, #0
 8002b28:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2c:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002b32:	4824      	ldr	r0, [pc, #144]	; (8002bc4 <BSP_QSPI_Write+0xf8>)
 8002b34:	f000 fc76 	bl	8003424 <QSPI_WriteEnable>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e03b      	b.n	8002bba <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	481d      	ldr	r0, [pc, #116]	; (8002bc4 <BSP_QSPI_Write+0xf8>)
 8002b4e:	f007 fed5 	bl	800a8fc <HAL_QSPI_Command>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e02e      	b.n	8002bba <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	4818      	ldr	r0, [pc, #96]	; (8002bc4 <BSP_QSPI_Write+0xf8>)
 8002b64:	f007 ff28 	bl	800a9b8 <HAL_QSPI_Transmit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e023      	b.n	8002bba <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002b72:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b76:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <BSP_QSPI_Write+0xf8>)
 8002b78:	f000 fc9d 	bl	80034b6 <QSPI_AutoPollingMemReady>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e019      	b.n	8002bba <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8a:	4413      	add	r3, r2
 8002b8c:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25L512_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25L512_PAGE_SIZE;
 8002b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d203      	bcs.n	8002baa <BSP_QSPI_Write+0xde>
 8002ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	e001      	b.n	8002bae <BSP_QSPI_Write+0xe2>
 8002baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bae:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002bb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d3b8      	bcc.n	8002b2a <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3758      	adds	r7, #88	; 0x58
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200003f4 	.word	0x200003f4

08002bc8 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b090      	sub	sp, #64	; 0x40
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002bd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bd4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 8002bd6:	2321      	movs	r3, #33	; 0x21
 8002bd8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002bda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002be0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002be4:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002c02:	4812      	ldr	r0, [pc, #72]	; (8002c4c <BSP_QSPI_Erase_Block+0x84>)
 8002c04:	f000 fc0e 	bl	8003424 <QSPI_WriteEnable>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e017      	b.n	8002c42 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480b      	ldr	r0, [pc, #44]	; (8002c4c <BSP_QSPI_Erase_Block+0x84>)
 8002c1e:	f007 fe6d 	bl	800a8fc <HAL_QSPI_Command>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e00a      	b.n	8002c42 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25L512_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002c2c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c30:	4806      	ldr	r0, [pc, #24]	; (8002c4c <BSP_QSPI_Erase_Block+0x84>)
 8002c32:	f000 fc40 	bl	80034b6 <QSPI_AutoPollingMemReady>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3740      	adds	r7, #64	; 0x40
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200003f4 	.word	0x200003f4

08002c50 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002c5a:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6393      	str	r3, [r2, #56]	; 0x38
 8002c66:	4b56      	ldr	r3, [pc, #344]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002c7e:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c84:	f023 0302 	bic.w	r3, r3, #2
 8002c88:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a4c      	ldr	r2, [pc, #304]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a46      	ldr	r2, [pc, #280]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002cea:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a34      	ldr	r2, [pc, #208]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cf0:	f043 0310 	orr.w	r3, r3, #16
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002d08:	f043 0308 	orr.w	r3, r3, #8
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <BSP_QSPI_MspInit+0x170>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002d1a:	2340      	movs	r3, #64	; 0x40
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8002d1e:	230a      	movs	r3, #10
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d32:	4619      	mov	r1, r3
 8002d34:	4823      	ldr	r0, [pc, #140]	; (8002dc4 <BSP_QSPI_MspInit+0x174>)
 8002d36:	f007 f9e5 	bl	800a104 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8002d3e:	2309      	movs	r3, #9
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	481d      	ldr	r0, [pc, #116]	; (8002dc4 <BSP_QSPI_MspInit+0x174>)
 8002d4e:	f007 f9d9 	bl	800a104 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8002d58:	2309      	movs	r3, #9
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d60:	4619      	mov	r1, r3
 8002d62:	4819      	ldr	r0, [pc, #100]	; (8002dc8 <BSP_QSPI_MspInit+0x178>)
 8002d64:	f007 f9ce 	bl	800a104 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8002d6e:	2309      	movs	r3, #9
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d76:	4619      	mov	r1, r3
 8002d78:	4813      	ldr	r0, [pc, #76]	; (8002dc8 <BSP_QSPI_MspInit+0x178>)
 8002d7a:	f007 f9c3 	bl	800a104 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 8002d82:	2309      	movs	r3, #9
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	480f      	ldr	r0, [pc, #60]	; (8002dcc <BSP_QSPI_MspInit+0x17c>)
 8002d8e:	f007 f9b9 	bl	800a104 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8002d98:	2309      	movs	r3, #9
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <BSP_QSPI_MspInit+0x180>)
 8002da4:	f007 f9ae 	bl	800a104 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002da8:	2200      	movs	r2, #0
 8002daa:	210f      	movs	r1, #15
 8002dac:	205c      	movs	r0, #92	; 0x5c
 8002dae:	f006 f9e1 	bl	8009174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002db2:	205c      	movs	r0, #92	; 0x5c
 8002db4:	f006 f9fa 	bl	80091ac <HAL_NVIC_EnableIRQ>
}
 8002db8:	bf00      	nop
 8002dba:	3738      	adds	r7, #56	; 0x38
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40020c00 	.word	0x40020c00

08002dd4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b098      	sub	sp, #96	; 0x60
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002ddc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002de0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002de2:	2366      	movs	r3, #102	; 0x66
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f007 fd75 	bl	800a8fc <HAL_QSPI_Command>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0ff      	b.n	800301c <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002e1c:	2399      	movs	r3, #153	; 0x99
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f007 fd66 	bl	800a8fc <HAL_QSPI_Command>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0f0      	b.n	800301c <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e3e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002e40:	2366      	movs	r3, #102	; 0x66
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f007 fd54 	bl	800a8fc <HAL_QSPI_Command>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0de      	b.n	800301c <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002e5e:	2399      	movs	r3, #153	; 0x99
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f007 fd45 	bl	800a8fc <HAL_QSPI_Command>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cf      	b.n	800301c <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8002e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e80:	f006 f89c 	bl	8008fbc <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002e90:	2301      	movs	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002e94:	2310      	movs	r3, #16
 8002e96:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002e98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8002ea4:	2305      	movs	r3, #5
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8002ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002eae:	f107 0210 	add.w	r2, r7, #16
 8002eb2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002eb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f007 feab 	bl	800ac16 <HAL_QSPI_AutoPolling>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0a8      	b.n	800301c <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f007 fcfb 	bl	800a8fc <HAL_QSPI_Command>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e085      	b.n	800301c <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f10:	f107 030f 	add.w	r3, r7, #15
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f007 fdde 	bl	800aadc <HAL_QSPI_Receive>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e078      	b.n	800301c <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002f30:	2306      	movs	r3, #6
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f007 fcce 	bl	800a8fc <HAL_QSPI_Command>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e058      	b.n	800301c <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002f7a:	2310      	movs	r3, #16
 8002f7c:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002f84:	2305      	movs	r3, #5
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f8c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f8e:	f107 0210 	add.w	r2, r7, #16
 8002f92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f96:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f007 fe3b 	bl	800ac16 <HAL_QSPI_AutoPolling>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e038      	b.n	800301c <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fae:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f007 fc86 	bl	800a8fc <HAL_QSPI_Command>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e010      	b.n	800301c <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ffa:	f107 030f 	add.w	r3, r7, #15
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f007 fcd7 	bl	800a9b8 <HAL_QSPI_Transmit>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e003      	b.n	800301c <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8003014:	2028      	movs	r0, #40	; 0x28
 8003016:	f005 ffd1 	bl	8008fbc <HAL_Delay>

  return QSPI_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3760      	adds	r7, #96	; 0x60
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b090      	sub	sp, #64	; 0x40
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800302c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003030:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003032:	23b7      	movs	r3, #183	; 0xb7
 8003034:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800303a:	2300      	movs	r3, #0
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800304a:	2300      	movs	r3, #0
 800304c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800304e:	2300      	movs	r3, #0
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9e6 	bl	8003424 <QSPI_WriteEnable>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e017      	b.n	8003092 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003062:	f107 0308 	add.w	r3, r7, #8
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f007 fc45 	bl	800a8fc <HAL_QSPI_Command>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e00a      	b.n	8003092 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800307c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fa18 	bl	80034b6 <QSPI_AutoPollingMemReady>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3740      	adds	r7, #64	; 0x40
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b094      	sub	sp, #80	; 0x50
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80030a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80030a8:	2305      	movs	r3, #5
 80030aa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80030b4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80030c6:	2300      	movs	r3, #0
 80030c8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80030ca:	2300      	movs	r3, #0
 80030cc:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030ce:	f107 0310 	add.w	r3, r7, #16
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4619      	mov	r1, r3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f007 fc0f 	bl	800a8fc <HAL_QSPI_Command>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e090      	b.n	800320a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4619      	mov	r1, r3
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f007 fcf2 	bl	800aadc <HAL_QSPI_Receive>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e083      	b.n	800320a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003108:	2315      	movs	r3, #21
 800310a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003110:	2300      	movs	r3, #0
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003114:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003126:	2300      	movs	r3, #0
 8003128:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800312a:	2300      	movs	r3, #0
 800312c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800312e:	f107 0310 	add.w	r3, r7, #16
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f007 fbdf 	bl	800a8fc <HAL_QSPI_Command>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e060      	b.n	800320a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003148:	f107 030c 	add.w	r3, r7, #12
 800314c:	3301      	adds	r3, #1
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f007 fcc1 	bl	800aadc <HAL_QSPI_Receive>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e052      	b.n	800320a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f95d 	bl	8003424 <QSPI_WriteEnable>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04a      	b.n	800320a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003174:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800317a:	2301      	movs	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800317e:	2300      	movs	r3, #0
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003182:	2300      	movs	r3, #0
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003186:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8003190:	2302      	movs	r3, #2
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003198:	2300      	movs	r3, #0
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800319c:	2300      	movs	r3, #0
 800319e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80031a0:	7b7b      	ldrb	r3, [r7, #13]
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a8:	b25a      	sxtb	r2, r3
 80031aa:	23c0      	movs	r3, #192	; 0xc0
 80031ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	2303      	movs	r3, #3
 80031c2:	408b      	lsls	r3, r1
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f007 fb8f 	bl	800a8fc <HAL_QSPI_Command>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e010      	b.n	800320a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f007 fbe0 	bl	800a9b8 <HAL_QSPI_Transmit>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e003      	b.n	800320a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8003202:	2028      	movs	r0, #40	; 0x28
 8003204:	f005 feda 	bl	8008fbc <HAL_Delay>
  
  return QSPI_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3750      	adds	r7, #80	; 0x50
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b096      	sub	sp, #88	; 0x58
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 800321a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8003220:	2335      	movs	r3, #53	; 0x35
 8003222:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003224:	2300      	movs	r3, #0
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003228:	2300      	movs	r3, #0
 800322a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800322c:	2300      	movs	r3, #0
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003238:	2300      	movs	r3, #0
 800323a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800323c:	2300      	movs	r3, #0
 800323e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003240:	f107 0320 	add.w	r3, r7, #32
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f007 fb56 	bl	800a8fc <HAL_QSPI_Command>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e023      	b.n	80032a2 <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 800325e:	2341      	movs	r3, #65	; 0x41
 8003260:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800326a:	2310      	movs	r3, #16
 800326c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800326e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003272:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003274:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003278:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800327a:	2305      	movs	r3, #5
 800327c:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800327e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003282:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003284:	f107 0208 	add.w	r2, r7, #8
 8003288:	f107 0120 	add.w	r1, r7, #32
 800328c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f007 fcc0 	bl	800ac16 <HAL_QSPI_AutoPolling>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3758      	adds	r7, #88	; 0x58
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b094      	sub	sp, #80	; 0x50
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80032b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80032ba:	2305      	movs	r3, #5
 80032bc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80032be:	2300      	movs	r3, #0
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80032c6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80032d8:	2300      	movs	r3, #0
 80032da:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80032dc:	2300      	movs	r3, #0
 80032de:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4619      	mov	r1, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f007 fb06 	bl	800a8fc <HAL_QSPI_Command>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e08d      	b.n	8003416 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f007 fbe9 	bl	800aadc <HAL_QSPI_Receive>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e080      	b.n	8003416 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003314:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 800331a:	2315      	movs	r3, #21
 800331c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800331e:	2300      	movs	r3, #0
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003322:	2300      	movs	r3, #0
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003326:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003330:	2301      	movs	r3, #1
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003334:	2300      	movs	r3, #0
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003338:	2300      	movs	r3, #0
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800333c:	2300      	movs	r3, #0
 800333e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f007 fad6 	bl	800a8fc <HAL_QSPI_Command>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e05d      	b.n	8003416 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800335a:	f107 030c 	add.w	r3, r7, #12
 800335e:	3301      	adds	r3, #1
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f007 fbb8 	bl	800aadc <HAL_QSPI_Receive>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e04f      	b.n	8003416 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003376:	482a      	ldr	r0, [pc, #168]	; (8003420 <QSPI_OutDrvStrengthCfg+0x174>)
 8003378:	f000 f854 	bl	8003424 <QSPI_WriteEnable>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e047      	b.n	8003416 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800338c:	2301      	movs	r3, #1
 800338e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003394:	2300      	movs	r3, #0
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003398:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80033a2:	2302      	movs	r3, #2
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033aa:	2300      	movs	r3, #0
 80033ac:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033ae:	2300      	movs	r3, #0
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80033b2:	7b7b      	ldrb	r3, [r7, #13]
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	f023 0307 	bic.w	r3, r3, #7
 80033ba:	b25a      	sxtb	r2, r3
 80033bc:	2307      	movs	r3, #7
 80033be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	2306      	movs	r3, #6
 80033d4:	408b      	lsls	r3, r1
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b25b      	sxtb	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f007 fa86 	bl	800a8fc <HAL_QSPI_Command>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00d      	b.n	8003416 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4619      	mov	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f007 fad7 	bl	800a9b8 <HAL_QSPI_Transmit>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3750      	adds	r7, #80	; 0x50
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200003f4 	.word	0x200003f4

08003424 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b096      	sub	sp, #88	; 0x58
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800342c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003432:	2306      	movs	r3, #6
 8003434:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003436:	2300      	movs	r3, #0
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800343a:	2300      	movs	r3, #0
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800343e:	2300      	movs	r3, #0
 8003440:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800344a:	2300      	movs	r3, #0
 800344c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800344e:	2300      	movs	r3, #0
 8003450:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f007 fa4d 	bl	800a8fc <HAL_QSPI_Command>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e020      	b.n	80034ae <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 800346c:	2302      	movs	r3, #2
 800346e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 8003470:	2302      	movs	r3, #2
 8003472:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003478:	2301      	movs	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800347c:	2310      	movs	r3, #16
 800347e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003480:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003484:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003486:	2305      	movs	r3, #5
 8003488:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 800348a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800348e:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003490:	f107 0208 	add.w	r2, r7, #8
 8003494:	f107 0120 	add.w	r1, r7, #32
 8003498:	f241 3388 	movw	r3, #5000	; 0x1388
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f007 fbba 	bl	800ac16 <HAL_QSPI_AutoPolling>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3758      	adds	r7, #88	; 0x58
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b096      	sub	sp, #88	; 0x58
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80034c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034c4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80034c6:	2305      	movs	r3, #5
 80034c8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80034d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80034dc:	2300      	movs	r3, #0
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80034e0:	2300      	movs	r3, #0
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80034e4:	2300      	movs	r3, #0
 80034e6:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 80034ec:	2301      	movs	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80034f4:	2301      	movs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80034f8:	2310      	movs	r3, #16
 80034fa:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80034fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003500:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003502:	f107 0208 	add.w	r2, r7, #8
 8003506:	f107 0120 	add.w	r1, r7, #32
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f007 fb82 	bl	800ac16 <HAL_QSPI_AutoPolling>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3758      	adds	r7, #88	; 0x58
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b0f      	ldr	r3, [pc, #60]	; (800356c <HAL_MspInit+0x44>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a0e      	ldr	r2, [pc, #56]	; (800356c <HAL_MspInit+0x44>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_MspInit+0x44>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_MspInit+0x44>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_MspInit+0x44>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_MspInit+0x44>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003588:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <HAL_DFSDM_FilterMspInit+0x144>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d151      	bne.n	8003634 <HAL_DFSDM_FilterMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003590:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <HAL_DFSDM_FilterMspInit+0x148>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	4a48      	ldr	r2, [pc, #288]	; (80036b8 <HAL_DFSDM_FilterMspInit+0x148>)
 8003598:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_DFSDM_FilterMspInit+0x148>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10b      	bne.n	80035ba <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80035a2:	4b46      	ldr	r3, [pc, #280]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	4a45      	ldr	r2, [pc, #276]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ac:	6453      	str	r3, [r2, #68]	; 0x44
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ba:	4b40      	ldr	r3, [pc, #256]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035c0:	f043 0308 	orr.w	r3, r3, #8
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a39      	ldr	r2, [pc, #228]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_DFSDM_FilterMspInit+0x14c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_CKOUT
    PC5     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035ea:	2308      	movs	r3, #8
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80035fa:	2303      	movs	r3, #3
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	482e      	ldr	r0, [pc, #184]	; (80036c0 <HAL_DFSDM_FilterMspInit+0x150>)
 8003606:	f006 fd7d 	bl	800a104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800360a:	2320      	movs	r3, #32
 800360c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800361a:	2303      	movs	r3, #3
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4619      	mov	r1, r3
 8003624:	4827      	ldr	r0, [pc, #156]	; (80036c4 <HAL_DFSDM_FilterMspInit+0x154>)
 8003626:	f006 fd6d 	bl	800a104 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_DFSDM_FilterMspInit+0x144>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_DFSDM_FilterMspInit+0x144>)
 8003632:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_DFSDM_FilterMspInit+0x158>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d136      	bne.n	80036ac <HAL_DFSDM_FilterMspInit+0x13c>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003640:	4a23      	ldr	r2, [pc, #140]	; (80036d0 <HAL_DFSDM_FilterMspInit+0x160>)
 8003642:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8003644:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003652:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003666:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800366a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800366e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003676:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800367a:	2200      	movs	r2, #0
 800367c:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003680:	2200      	movs	r2, #0
 8003682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8003684:	4811      	ldr	r0, [pc, #68]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003686:	f006 f955 	bl	8009934 <HAL_DMA_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_DFSDM_FilterMspInit+0x124>
    {
      Error_Handler();
 8003690:	f7ff f8f4 	bl	800287c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_DFSDM_FilterMspInit+0x15c>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80036ac:	bf00      	nop
 80036ae:	3728      	adds	r7, #40	; 0x28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200003b8 	.word	0x200003b8
 80036b8:	200003b4 	.word	0x200003b4
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40017500 	.word	0x40017500
 80036cc:	20000128 	.word	0x20000128
 80036d0:	40026410 	.word	0x40026410

080036d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80036ec:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d151      	bne.n	8003798 <HAL_DFSDM_ChannelMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80036f4:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80036fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80036fe:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10b      	bne.n	800371e <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800370c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_CKOUT
    PC5     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800374e:	2308      	movs	r3, #8
 8003750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2300      	movs	r3, #0
 800375c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800375e:	2303      	movs	r3, #3
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	4619      	mov	r1, r3
 8003768:	4810      	ldr	r0, [pc, #64]	; (80037ac <HAL_DFSDM_ChannelMspInit+0xd8>)
 800376a:	f006 fccb 	bl	800a104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800376e:	2320      	movs	r3, #32
 8003770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800377e:	2303      	movs	r3, #3
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	4619      	mov	r1, r3
 8003788:	4809      	ldr	r0, [pc, #36]	; (80037b0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800378a:	f006 fcbb 	bl	800a104 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	4a02      	ldr	r2, [pc, #8]	; (80037a0 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8003796:	6013      	str	r3, [r2, #0]
  }

}
 8003798:	bf00      	nop
 800379a:	3728      	adds	r7, #40	; 0x28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	200003b8 	.word	0x200003b8
 80037a4:	200003b4 	.word	0x200003b4
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020c00 	.word	0x40020c00
 80037b0:	40020800 	.word	0x40020800

080037b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08c      	sub	sp, #48	; 0x30
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 031c 	add.w	r3, r7, #28
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <HAL_QSPI_MspInit+0x148>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	f040 808e 	bne.w	80038f4 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80037d8:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	4a48      	ldr	r2, [pc, #288]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	6393      	str	r3, [r2, #56]	; 0x38
 80037e4:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4a42      	ldr	r2, [pc, #264]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 80037f6:	f043 0310 	orr.w	r3, r3, #16
 80037fa:	6313      	str	r3, [r2, #48]	; 0x30
 80037fc:	4b40      	ldr	r3, [pc, #256]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003808:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	6313      	str	r3, [r2, #48]	; 0x30
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003820:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4a36      	ldr	r2, [pc, #216]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6313      	str	r3, [r2, #48]	; 0x30
 800382c:	4b34      	ldr	r3, [pc, #208]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003838:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4a30      	ldr	r2, [pc, #192]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	6313      	str	r3, [r2, #48]	; 0x30
 8003844:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <HAL_QSPI_MspInit+0x14c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003850:	2304      	movs	r3, #4
 8003852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385c:	2303      	movs	r3, #3
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003860:	2309      	movs	r3, #9
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003864:	f107 031c 	add.w	r3, r7, #28
 8003868:	4619      	mov	r1, r3
 800386a:	4826      	ldr	r0, [pc, #152]	; (8003904 <HAL_QSPI_MspInit+0x150>)
 800386c:	f006 fc4a 	bl	800a104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003870:	2340      	movs	r3, #64	; 0x40
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	2303      	movs	r3, #3
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003880:	230a      	movs	r3, #10
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003884:	f107 031c 	add.w	r3, r7, #28
 8003888:	4619      	mov	r1, r3
 800388a:	481f      	ldr	r0, [pc, #124]	; (8003908 <HAL_QSPI_MspInit+0x154>)
 800388c:	f006 fc3a 	bl	800a104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003890:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003896:	2302      	movs	r3, #2
 8003898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389e:	2303      	movs	r3, #3
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038a2:	2309      	movs	r3, #9
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	4619      	mov	r1, r3
 80038ac:	4817      	ldr	r0, [pc, #92]	; (800390c <HAL_QSPI_MspInit+0x158>)
 80038ae:	f006 fc29 	bl	800a104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038b2:	2304      	movs	r3, #4
 80038b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b6:	2302      	movs	r3, #2
 80038b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038be:	2303      	movs	r3, #3
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038c2:	2309      	movs	r3, #9
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4619      	mov	r1, r3
 80038cc:	480e      	ldr	r0, [pc, #56]	; (8003908 <HAL_QSPI_MspInit+0x154>)
 80038ce:	f006 fc19 	bl	800a104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e0:	2303      	movs	r3, #3
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038e4:	2309      	movs	r3, #9
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038e8:	f107 031c 	add.w	r3, r7, #28
 80038ec:	4619      	mov	r1, r3
 80038ee:	4808      	ldr	r0, [pc, #32]	; (8003910 <HAL_QSPI_MspInit+0x15c>)
 80038f0:	f006 fc08 	bl	800a104 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80038f4:	bf00      	nop
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	a0001000 	.word	0xa0001000
 8003900:	40023800 	.word	0x40023800
 8003904:	40021000 	.word	0x40021000
 8003908:	40020400 	.word	0x40020400
 800390c:	40020800 	.word	0x40020800
 8003910:	40020c00 	.word	0x40020c00

08003914 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <HAL_QSPI_MspDeInit+0x4c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d117      	bne.n	8003956 <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <HAL_QSPI_MspDeInit+0x50>)
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <HAL_QSPI_MspDeInit+0x50>)
 800392c:	f023 0302 	bic.w	r3, r3, #2
 8003930:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8003932:	2104      	movs	r1, #4
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <HAL_QSPI_MspDeInit+0x54>)
 8003936:	f006 fd91 	bl	800a45c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 800393a:	2144      	movs	r1, #68	; 0x44
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <HAL_QSPI_MspDeInit+0x58>)
 800393e:	f006 fd8d 	bl	800a45c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_9);
 8003942:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003946:	480a      	ldr	r0, [pc, #40]	; (8003970 <HAL_QSPI_MspDeInit+0x5c>)
 8003948:	f006 fd88 	bl	800a45c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800394c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003950:	4808      	ldr	r0, [pc, #32]	; (8003974 <HAL_QSPI_MspDeInit+0x60>)
 8003952:	f006 fd83 	bl	800a45c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	a0001000 	.word	0xa0001000
 8003964:	40023800 	.word	0x40023800
 8003968:	40021000 	.word	0x40021000
 800396c:	40020400 	.word	0x40020400
 8003970:	40020800 	.word	0x40020800
 8003974:	40020c00 	.word	0x40020c00

08003978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <HAL_UART_MspInit+0xb4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d144      	bne.n	8003a24 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800399a:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039a0:	f043 0310 	orr.w	r3, r3, #16
 80039a4:	6453      	str	r3, [r2, #68]	; 0x44
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6313      	str	r3, [r2, #48]	; 0x30
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <HAL_UART_MspInit+0xb8>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ee:	2303      	movs	r3, #3
 80039f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039f2:	2307      	movs	r3, #7
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <HAL_UART_MspInit+0xbc>)
 80039fe:	f006 fb81 	bl	800a104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a14:	2307      	movs	r3, #7
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4806      	ldr	r0, [pc, #24]	; (8003a38 <HAL_UART_MspInit+0xc0>)
 8003a20:	f006 fb70 	bl	800a104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a24:	bf00      	nop
 8003a26:	3728      	adds	r7, #40	; 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40020000 	.word	0x40020000

08003a3c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a30      	ldr	r2, [pc, #192]	; (8003b0c <HAL_SAI_MspInit+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d15a      	bne.n	8003b04 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003a4e:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <HAL_SAI_MspInit+0xd4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003a56:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_SAI_MspInit+0xd8>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <HAL_SAI_MspInit+0xd8>)
 8003a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <HAL_SAI_MspInit+0xd8>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <HAL_SAI_MspInit+0xd4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <HAL_SAI_MspInit+0xd4>)
 8003a76:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003a78:	2370      	movs	r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003a88:	2306      	movs	r3, #6
 8003a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a8c:	f107 030c 	add.w	r3, r7, #12
 8003a90:	4619      	mov	r1, r3
 8003a92:	4821      	ldr	r0, [pc, #132]	; (8003b18 <HAL_SAI_MspInit+0xdc>)
 8003a94:	f006 fb36 	bl	800a104 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8003a98:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_SAI_MspInit+0xe4>)
 8003a9c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ab8:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003abe:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ac0:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ac6:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ace:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003adc:	480f      	ldr	r0, [pc, #60]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003ade:	f005 ff29 	bl	8009934 <HAL_DMA_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8003ae8:	f7fe fec8 	bl	800287c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003af0:	671a      	str	r2, [r3, #112]	; 0x70
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003afc:	66da      	str	r2, [r3, #108]	; 0x6c
 8003afe:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <HAL_SAI_MspInit+0xe0>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8003b04:	bf00      	nop
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40015804 	.word	0x40015804
 8003b10:	200003bc 	.word	0x200003bc
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	20000258 	.word	0x20000258
 8003b20:	40026428 	.word	0x40026428

08003b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8003b34:	2200      	movs	r2, #0
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	202c      	movs	r0, #44	; 0x2c
 8003b3a:	f005 fb1b 	bl	8009174 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003b3e:	202c      	movs	r0, #44	; 0x2c
 8003b40:	f005 fb34 	bl	80091ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <HAL_InitTick+0xa0>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <HAL_InitTick+0xa0>)
 8003b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b50:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <HAL_InitTick+0xa0>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b5c:	f107 0210 	add.w	r2, r7, #16
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 ff1c 	bl	800b9a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003b6c:	f007 fef2 	bl	800b954 <HAL_RCC_GetPCLK1Freq>
 8003b70:	4603      	mov	r3, r0
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_InitTick+0xa4>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	0c9b      	lsrs	r3, r3, #18
 8003b80:	3b01      	subs	r3, #1
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_InitTick+0xa8>)
 8003b86:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <HAL_InitTick+0xac>)
 8003b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_InitTick+0xa8>)
 8003b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b90:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8003b92:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_InitTick+0xa8>)
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <HAL_InitTick+0xa8>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_InitTick+0xa8>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <HAL_InitTick+0xa8>)
 8003ba6:	f009 f9b6 	bl	800cf16 <HAL_TIM_Base_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8003bb0:	4806      	ldr	r0, [pc, #24]	; (8003bcc <HAL_InitTick+0xa8>)
 8003bb2:	f009 fa11 	bl	800cfd8 <HAL_TIM_Base_Start_IT>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	e000      	b.n	8003bbc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3730      	adds	r7, #48	; 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	431bde83 	.word	0x431bde83
 8003bcc:	20000440 	.word	0x20000440
 8003bd0:	40001c00 	.word	0x40001c00

08003bd4 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* Disable TIM13 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim13, TIM_IT_UPDATE);
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_SuspendTick+0x20>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_SuspendTick+0x20>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	60da      	str	r2, [r3, #12]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000440 	.word	0x20000440

08003bf8 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* Enable TIM13 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_ResumeTick+0x20>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_ResumeTick+0x20>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	60da      	str	r2, [r3, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000440 	.word	0x20000440

08003c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c20:	e7fe      	b.n	8003c20 <NMI_Handler+0x4>

08003c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c26:	e7fe      	b.n	8003c26 <HardFault_Handler+0x4>

08003c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c2c:	e7fe      	b.n	8003c2c <MemManage_Handler+0x4>

08003c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c32:	e7fe      	b.n	8003c32 <BusFault_Handler+0x4>

08003c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c38:	e7fe      	b.n	8003c38 <UsageFault_Handler+0x4>

08003c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003c7a:	f009 fa25 	bl	800d0c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000440 	.word	0x20000440

08003c88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <DMA2_Stream0_IRQHandler+0x10>)
 8003c8e:	f005 ffcf 	bl	8009c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000128 	.word	0x20000128

08003c9c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <DMA2_Stream1_IRQHandler+0x10>)
 8003ca2:	f005 ffc5 	bl	8009c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000258 	.word	0x20000258

08003cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
	return 1;
 8003cb4:	2301      	movs	r3, #1
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_kill>:

int _kill(int pid, int sig)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cca:	f00b fcd3 	bl	800f674 <__errno>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2216      	movs	r2, #22
 8003cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_exit>:

void _exit (int status)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ffe7 	bl	8003cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cf2:	e7fe      	b.n	8003cf2 <_exit+0x12>

08003cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <_sbrk+0x5c>)
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <_sbrk+0x60>)
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d08:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <_sbrk+0x64>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <_sbrk+0x64>)
 8003d12:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <_sbrk+0x68>)
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <_sbrk+0x64>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d207      	bcs.n	8003d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d24:	f00b fca6 	bl	800f674 <__errno>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	e009      	b.n	8003d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <_sbrk+0x64>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <_sbrk+0x64>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <_sbrk+0x64>)
 8003d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20080000 	.word	0x20080000
 8003d54:	00000400 	.word	0x00000400
 8003d58:	200003c0 	.word	0x200003c0
 8003d5c:	200004a0 	.word	0x200004a0

08003d60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <SystemInit+0x20>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <SystemInit+0x20>)
 8003d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d88:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d8a:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d8c:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d90:	e002      	b.n	8003d98 <LoopCopyDataInit>

08003d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d96:	3304      	adds	r3, #4

08003d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d9c:	d3f9      	bcc.n	8003d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003da0:	4c0b      	ldr	r4, [pc, #44]	; (8003dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003da4:	e001      	b.n	8003daa <LoopFillZerobss>

08003da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003da8:	3204      	adds	r2, #4

08003daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dac:	d3fb      	bcc.n	8003da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dae:	f7ff ffd7 	bl	8003d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003db2:	f00b fc65 	bl	800f680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003db6:	f7fd ffb7 	bl	8001d28 <main>
  bx  lr    
 8003dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dbc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003dc8:	0802b294 	.word	0x0802b294
  ldr r2, =_sbss
 8003dcc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003dd0:	200004a0 	.word	0x200004a0

08003dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd4:	e7fe      	b.n	8003dd4 <ADC_IRQHandler>

08003dd6 <arm_copy_q7>:

void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8003de8:	e00e      	b.n	8003e08 <arm_copy_q7+0x32>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    /* 4 samples are copied and stored at a time using SIMD */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003dea:	f107 030c 	add.w	r3, r7, #12
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	1d11      	adds	r1, r2, #4
 8003df2:	6019      	str	r1, [r3, #0]
 8003df4:	f107 0108 	add.w	r1, r7, #8
 8003df8:	680b      	ldr	r3, [r1, #0]
 8003dfa:	1d18      	adds	r0, r3, #4
 8003dfc:	6008      	str	r0, [r1, #0]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ed      	bne.n	8003dea <arm_copy_q7+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	617b      	str	r3, [r7, #20]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8003e16:	e00b      	b.n	8003e30 <arm_copy_q7+0x5a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	1c53      	adds	r3, r2, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1c59      	adds	r1, r3, #1
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	f992 2000 	ldrsb.w	r2, [r2]
 8003e28:	701a      	strb	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <arm_copy_q7+0x42>
  }
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b0a0      	sub	sp, #128	; 0x80
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8003e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8003e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6a:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8003e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8003e72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8003e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e82:	4413      	add	r3, r2
 8003e84:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8003e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e8c:	e1b6      	b.n	80041fc <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8003eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8003eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8003ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8003ec4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8003ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8003eee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003ef2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	1d1a      	adds	r2, r3, #4
 8003efa:	603a      	str	r2, [r7, #0]
 8003efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f00:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8003f04:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	603a      	str	r2, [r7, #0]
 8003f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f16:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8003f1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003f1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1d1a      	adds	r2, r3, #4
 8003f26:	603a      	str	r2, [r7, #0]
 8003f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8003f30:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	603a      	str	r2, [r7, #0]
 8003f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f42:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8003f46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8003f56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8003f66:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003f6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8003f76:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f7a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f82:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8003f86:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f90:	1d1a      	adds	r2, r3, #4
 8003f92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f98:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8003f9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fa6:	1d1a      	adds	r2, r3, #4
 8003fa8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fae:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8003fb2:	ed97 7a08 	vldr	s14, [r7, #32]
 8003fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8003fc8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fd2:	1d1a      	adds	r2, r3, #4
 8003fd4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fda:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8003fde:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fea:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8003fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ff2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffa:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8003ffe:	ed97 7a04 	vldr	s14, [r7, #16]
 8004002:	edd7 7a08 	vldr	s15, [r7, #32]
 8004006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800400a:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800400e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004012:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800401a:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004020:	1d1a      	adds	r2, r3, #4
 8004022:	673a      	str	r2, [r7, #112]	; 0x70
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	673a      	str	r2, [r7, #112]	; 0x70
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8004032:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004036:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8004042:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004046:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8004052:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004056:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8004062:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004066:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8004072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004074:	1d1a      	adds	r2, r3, #4
 8004076:	677a      	str	r2, [r7, #116]	; 0x74
 8004078:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800407c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004084:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	1d1a      	adds	r2, r3, #4
 800408c:	677a      	str	r2, [r7, #116]	; 0x74
 800408e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004092:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800409a:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800409e:	edd7 7a02 	vldr	s15, [r7, #8]
 80040a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80040ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80040b2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80040be:	edd7 7a03 	vldr	s15, [r7, #12]
 80040c2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80040c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80040ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80040d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80040d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040da:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80040de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	67ba      	str	r2, [r7, #120]	; 0x78
 80040e4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80040e8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80040ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f0:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80040f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	67ba      	str	r2, [r7, #120]	; 0x78
 80040fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80040fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004106:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 800410a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800410c:	1d1a      	adds	r2, r3, #4
 800410e:	673a      	str	r2, [r7, #112]	; 0x70
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	673a      	str	r2, [r7, #112]	; 0x70
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 800411e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004122:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800412e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004132:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800413e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004142:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800414e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004152:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 800415e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	677a      	str	r2, [r7, #116]	; 0x74
 8004164:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004168:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800416c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004170:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8004174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004176:	1d1a      	adds	r2, r3, #4
 8004178:	677a      	str	r2, [r7, #116]	; 0x74
 800417a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800417e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004186:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 800418a:	edd7 7a04 	vldr	s15, [r7, #16]
 800418e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800419a:	edd7 7a05 	vldr	s15, [r7, #20]
 800419e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80041aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80041ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80041ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80041be:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80041ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041cc:	1d1a      	adds	r2, r3, #4
 80041ce:	67ba      	str	r2, [r7, #120]	; 0x78
 80041d0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80041d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80041d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041dc:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80041e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e2:	1d1a      	adds	r2, r3, #4
 80041e4:	67ba      	str	r2, [r7, #120]	; 0x78
 80041e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f2:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	3b01      	subs	r3, #1
 80041fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f ae45 	bne.w	8003e8e <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8004204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004206:	b299      	uxth	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	2302      	movs	r3, #2
 800420e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004210:	f000 fef2 	bl	8004ff8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8004214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004216:	b299      	uxth	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	2302      	movs	r3, #2
 800421e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004220:	f000 feea 	bl	8004ff8 <arm_radix8_butterfly_f32>
}
 8004224:	bf00      	nop
 8004226:	3780      	adds	r7, #128	; 0x80
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b0ac      	sub	sp, #176	; 0xb0
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8004242:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	4413      	add	r3, r2
 800424c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8004250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800425a:	4413      	add	r3, r2
 800425c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8004260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800426a:	4413      	add	r3, r2
 800426c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8004274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004278:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800427a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800427e:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8004280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004284:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8004286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800428a:	3b04      	subs	r3, #4
 800428c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8004290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004294:	3b04      	subs	r3, #4
 8004296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800429a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800429e:	3b04      	subs	r3, #4
 80042a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80042a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042ae:	4413      	add	r3, r2
 80042b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80042cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80042d6:	2302      	movs	r3, #2
 80042d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80042da:	2304      	movs	r3, #4
 80042dc:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80042de:	2306      	movs	r3, #6
 80042e0:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	ed93 7a00 	vldr	s14, [r3]
 80042fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004302:	edd3 7a00 	vldr	s15, [r3]
 8004306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800430a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	3304      	adds	r3, #4
 8004312:	ed93 7a00 	vldr	s14, [r3]
 8004316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800431a:	3304      	adds	r3, #4
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004324:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	3304      	adds	r3, #4
 800432c:	ed93 7a00 	vldr	s14, [r3]
 8004330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004334:	3304      	adds	r3, #4
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800433e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004346:	3304      	adds	r3, #4
 8004348:	ed93 7a00 	vldr	s14, [r3]
 800434c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004358:	3304      	adds	r3, #4
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004362:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004366:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800436a:	edd3 7a00 	vldr	s15, [r3]
 800436e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004382:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004386:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043a2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80043a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043aa:	3304      	adds	r3, #4
 80043ac:	edd3 7a00 	vldr	s15, [r3]
 80043b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80043b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043bc:	3304      	adds	r3, #4
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c6:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80043ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ce:	3304      	adds	r3, #4
 80043d0:	edd3 7a00 	vldr	s15, [r3]
 80043d4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80043d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e0:	3304      	adds	r3, #4
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ea:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80043ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043f2:	ed93 7a00 	vldr	s14, [r3]
 80043f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80043fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800440a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800440e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004412:	ed93 7a00 	vldr	s14, [r3]
 8004416:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800441a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800441e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	1d1a      	adds	r2, r3, #4
 800442a:	603a      	str	r2, [r7, #0]
 800442c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004430:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004438:	3304      	adds	r3, #4
 800443a:	ed93 7a00 	vldr	s14, [r3]
 800443e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800444a:	3304      	adds	r3, #4
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	603a      	str	r2, [r7, #0]
 8004456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800445a:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800445e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004462:	1d1a      	adds	r2, r3, #4
 8004464:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446a:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800446c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004478:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800447a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8004488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800448c:	1d1a      	adds	r2, r3, #4
 800448e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8004496:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80044a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a8:	1d1a      	adds	r2, r3, #4
 80044aa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80044ba:	4413      	add	r3, r2
 80044bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80044c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80044c8:	4413      	add	r3, r2
 80044ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80044ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044d6:	4413      	add	r3, r2
 80044d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80044dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044e0:	3b02      	subs	r3, #2
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044e8:	e31a      	b.n	8004b20 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	ed93 7a00 	vldr	s14, [r3]
 80044f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044fc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	ed93 7a00 	vldr	s14, [r3]
 8004506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800450a:	edd3 7a00 	vldr	s15, [r3]
 800450e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004512:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	3304      	adds	r3, #4
 800451a:	ed93 7a00 	vldr	s14, [r3]
 800451e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004522:	3304      	adds	r3, #4
 8004524:	edd3 7a00 	vldr	s15, [r3]
 8004528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800452c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3304      	adds	r3, #4
 8004534:	ed93 7a00 	vldr	s14, [r3]
 8004538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453c:	3304      	adds	r3, #4
 800453e:	edd3 7a00 	vldr	s15, [r3]
 8004542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004546:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 800454a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800454e:	3304      	adds	r3, #4
 8004550:	ed93 7a00 	vldr	s14, [r3]
 8004554:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800455c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004560:	3304      	adds	r3, #4
 8004562:	edd3 7a00 	vldr	s15, [r3]
 8004566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800456a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800456e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004572:	edd3 7a00 	vldr	s15, [r3]
 8004576:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800457a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800457e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004582:	edd3 7a00 	vldr	s15, [r3]
 8004586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800458e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800459a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800459e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a2:	edd3 7a00 	vldr	s15, [r3]
 80045a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80045ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045b2:	3304      	adds	r3, #4
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80045bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045c4:	3304      	adds	r3, #4
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ce:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80045d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045d6:	3304      	adds	r3, #4
 80045d8:	edd3 7a00 	vldr	s15, [r3]
 80045dc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80045e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045e8:	3304      	adds	r3, #4
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80045f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045fa:	ed93 7a00 	vldr	s14, [r3]
 80045fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004602:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800460a:	edd3 7a00 	vldr	s15, [r3]
 800460e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004612:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800461a:	ed93 7a00 	vldr	s14, [r3]
 800461e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	1d1a      	adds	r2, r3, #4
 8004632:	603a      	str	r2, [r7, #0]
 8004634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004638:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 800463c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004640:	3304      	adds	r3, #4
 8004642:	ed93 7a00 	vldr	s14, [r3]
 8004646:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800464a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800464e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004652:	3304      	adds	r3, #4
 8004654:	edd3 7a00 	vldr	s15, [r3]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	603a      	str	r2, [r7, #0]
 800465e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004662:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8004666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800466a:	3b04      	subs	r3, #4
 800466c:	ed93 7a00 	vldr	s14, [r3]
 8004670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004674:	3b04      	subs	r3, #4
 8004676:	edd3 7a00 	vldr	s15, [r3]
 800467a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800467e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8004682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004686:	3b04      	subs	r3, #4
 8004688:	ed93 7a00 	vldr	s14, [r3]
 800468c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004690:	3b04      	subs	r3, #4
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800469a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 800469e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046a2:	ed93 7a00 	vldr	s14, [r3]
 80046a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046aa:	edd3 7a00 	vldr	s15, [r3]
 80046ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046b2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80046b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046ba:	ed93 7a00 	vldr	s14, [r3]
 80046be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046c2:	edd3 7a00 	vldr	s15, [r3]
 80046c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ca:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80046ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046d2:	ed93 7a00 	vldr	s14, [r3]
 80046d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046da:	edd3 7a00 	vldr	s15, [r3]
 80046de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046e2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80046e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80046ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046f2:	ed93 7a00 	vldr	s14, [r3]
 80046f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046fa:	edd3 7a00 	vldr	s15, [r3]
 80046fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004706:	3b04      	subs	r3, #4
 8004708:	edd3 7a00 	vldr	s15, [r3]
 800470c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004710:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004714:	3b04      	subs	r3, #4
 8004716:	edd3 7a00 	vldr	s15, [r3]
 800471a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8004722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004726:	3b04      	subs	r3, #4
 8004728:	edd3 7a00 	vldr	s15, [r3]
 800472c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004734:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004738:	3b04      	subs	r3, #4
 800473a:	edd3 7a00 	vldr	s15, [r3]
 800473e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004742:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8004746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800474a:	edd3 7a00 	vldr	s15, [r3]
 800474e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004762:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8004766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800476a:	ed93 7a00 	vldr	s14, [r3]
 800476e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004772:	edd3 7a00 	vldr	s15, [r3]
 8004776:	ee37 7a67 	vsub.f32	s14, s14, s15
 800477a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800477e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004782:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8004786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800478a:	3b04      	subs	r3, #4
 800478c:	ed93 7a00 	vldr	s14, [r3]
 8004790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004794:	3b04      	subs	r3, #4
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800479e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80047a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a6:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80047aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047ae:	ed93 7a00 	vldr	s14, [r3]
 80047b2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80047b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047be:	edd3 7a00 	vldr	s15, [r3]
 80047c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047c6:	1f1a      	subs	r2, r3, #4
 80047c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047d0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80047d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047d8:	3b04      	subs	r3, #4
 80047da:	ed93 7a00 	vldr	s14, [r3]
 80047de:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80047e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ea:	3b04      	subs	r3, #4
 80047ec:	edd3 7a00 	vldr	s15, [r3]
 80047f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047f4:	1f1a      	subs	r2, r3, #4
 80047f6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047fe:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8004802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004806:	1d1a      	adds	r2, r3, #4
 8004808:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8004810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800481e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004822:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800482e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004832:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800483e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004842:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800484e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004852:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 800485e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004868:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800486c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004874:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8004878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800487c:	1d1a      	adds	r2, r3, #4
 800487e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004882:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004886:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800488a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800488e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8004892:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004896:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 80048a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80048a6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 80048b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80048b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 80048c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80048c6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 80048d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048d6:	1f1a      	subs	r2, r3, #4
 80048d8:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80048e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80048e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 80048ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048f0:	1f1a      	subs	r2, r3, #4
 80048f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048f6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80048fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80048fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004902:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8004906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800490e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8004916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800491e:	4413      	add	r3, r2
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8004924:	edd7 7a07 	vldr	s15, [r7, #28]
 8004928:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800492c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004930:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8004934:	edd7 7a08 	vldr	s15, [r7, #32]
 8004938:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800493c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004940:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8004944:	edd7 7a08 	vldr	s15, [r7, #32]
 8004948:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800494c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004950:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8004954:	edd7 7a07 	vldr	s15, [r7, #28]
 8004958:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800495c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004960:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8004964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004968:	1d1a      	adds	r2, r3, #4
 800496a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800496e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004972:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497a:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 800497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004988:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800498c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004994:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8004998:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800499c:	eef1 7a67 	vneg.f32	s15, s15
 80049a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 80049ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 80049bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80049cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 80049dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049e0:	1f1a      	subs	r2, r3, #4
 80049e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049e6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80049ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80049ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f2:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80049f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049fa:	1f1a      	subs	r2, r3, #4
 80049fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a00:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a04:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a0c:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8004a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8004a18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8004a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a28:	4413      	add	r3, r2
 8004a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8004a2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8004a3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8004a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a52:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8004a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a62:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8004a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a78:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a84:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8004a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a8c:	1d1a      	adds	r2, r3, #4
 8004a8e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a92:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004a96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9e:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8004aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004aa6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8004ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ab6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8004ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ac6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8004ad2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ad6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8004ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ae6:	1f1a      	subs	r2, r3, #4
 8004ae8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004aec:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004af0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004af8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8004afc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b00:	1f1a      	subs	r2, r3, #4
 8004b02:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b06:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004b0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b12:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f47f ace0 	bne.w	80044ea <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	ed93 7a00 	vldr	s14, [r3]
 8004b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b34:	edd3 7a00 	vldr	s15, [r3]
 8004b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b3c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	ed93 7a00 	vldr	s14, [r3]
 8004b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4a:	edd3 7a00 	vldr	s15, [r3]
 8004b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b52:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	ed93 7a00 	vldr	s14, [r3]
 8004b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b62:	3304      	adds	r3, #4
 8004b64:	edd3 7a00 	vldr	s15, [r3]
 8004b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	3304      	adds	r3, #4
 8004b74:	ed93 7a00 	vldr	s14, [r3]
 8004b78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	edd3 7a00 	vldr	s15, [r3]
 8004b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b8e:	3304      	adds	r3, #4
 8004b90:	ed93 7a00 	vldr	s14, [r3]
 8004b94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	edd3 7a00 	vldr	s15, [r3]
 8004ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004baa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bb2:	edd3 7a00 	vldr	s15, [r3]
 8004bb6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bd2:	edd3 7a00 	vldr	s15, [r3]
 8004bd6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004be2:	edd3 7a00 	vldr	s15, [r3]
 8004be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bea:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	edd3 7a00 	vldr	s15, [r3]
 8004bf8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c04:	3304      	adds	r3, #4
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c0e:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c16:	3304      	adds	r3, #4
 8004c18:	edd3 7a00 	vldr	s15, [r3]
 8004c1c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004c20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c28:	3304      	adds	r3, #4
 8004c2a:	edd3 7a00 	vldr	s15, [r3]
 8004c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c32:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c3a:	ed93 7a00 	vldr	s14, [r3]
 8004c3e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c52:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c5a:	ed93 7a00 	vldr	s14, [r3]
 8004c5e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c6a:	edd3 7a00 	vldr	s15, [r3]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	603a      	str	r2, [r7, #0]
 8004c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c78:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c80:	3304      	adds	r3, #4
 8004c82:	ed93 7a00 	vldr	s14, [r3]
 8004c86:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004c8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c92:	3304      	adds	r3, #4
 8004c94:	edd3 7a00 	vldr	s15, [r3]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	603a      	str	r2, [r7, #0]
 8004c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca2:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8004ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8004cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8004cb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004cba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8004cc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004cca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8004cd6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004cda:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8004ce6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004cea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8004cf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d00:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004d04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0c:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8004d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d14:	1d1a      	adds	r2, r3, #4
 8004d16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d1a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d26:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8004d32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004d3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d3e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d46:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004d4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004d5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d5e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8004d6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d76:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8004d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d7e:	1d1a      	adds	r2, r3, #4
 8004d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d84:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004d88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d90:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8004d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d98:	1d1a      	adds	r2, r3, #4
 8004d9a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004da2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004daa:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8004dae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8004db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8004dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8004dce:	edd7 7a04 	vldr	s15, [r7, #16]
 8004dd2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8004dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8004de2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8004dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8004df2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8004dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e08:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004e0c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e14:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e1c:	1d1a      	adds	r2, r3, #4
 8004e1e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e22:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004e26:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2e:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e36:	b299      	uxth	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004e40:	f000 f8da 	bl	8004ff8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004e44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e48:	b299      	uxth	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	2304      	movs	r3, #4
 8004e50:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004e52:	f000 f8d1 	bl	8004ff8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8004e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e5a:	b299      	uxth	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	2304      	movs	r3, #4
 8004e62:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004e64:	f000 f8c8 	bl	8004ff8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8004e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	2304      	movs	r3, #4
 8004e74:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004e76:	f000 f8bf 	bl	8004ff8 <arm_radix8_butterfly_f32>
}
 8004e7a:	bf00      	nop
 8004e7c:	37b0      	adds	r7, #176	; 0xb0
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b088      	sub	sp, #32
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	460b      	mov	r3, r1
 8004e92:	71fb      	strb	r3, [r7, #7]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d117      	bne.n	8004ed4 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	e00d      	b.n	8004ecc <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	edd3 7a00 	vldr	s15, [r3]
 8004eb6:	eef1 7a67 	vneg.f32	s15, s15
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d3ed      	bcc.n	8004eb0 <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eda:	d040      	beq.n	8004f5e <arm_cfft_f32+0xdc>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee2:	d845      	bhi.n	8004f70 <arm_cfft_f32+0xee>
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eea:	d033      	beq.n	8004f54 <arm_cfft_f32+0xd2>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef2:	d83d      	bhi.n	8004f70 <arm_cfft_f32+0xee>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efa:	d026      	beq.n	8004f4a <arm_cfft_f32+0xc8>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	d835      	bhi.n	8004f70 <arm_cfft_f32+0xee>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0a:	d028      	beq.n	8004f5e <arm_cfft_f32+0xdc>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f12:	d82d      	bhi.n	8004f70 <arm_cfft_f32+0xee>
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1a:	d01b      	beq.n	8004f54 <arm_cfft_f32+0xd2>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f22:	d825      	bhi.n	8004f70 <arm_cfft_f32+0xee>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d00f      	beq.n	8004f4a <arm_cfft_f32+0xc8>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d81f      	bhi.n	8004f70 <arm_cfft_f32+0xee>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d013      	beq.n	8004f5e <arm_cfft_f32+0xdc>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d819      	bhi.n	8004f70 <arm_cfft_f32+0xee>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d003      	beq.n	8004f4a <arm_cfft_f32+0xc8>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d005      	beq.n	8004f54 <arm_cfft_f32+0xd2>
 8004f48:	e012      	b.n	8004f70 <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7fe ff79 	bl	8003e44 <arm_cfft_radix8by2_f32>
        break;
 8004f52:	e00d      	b.n	8004f70 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff f968 	bl	800422c <arm_cfft_radix8by4_f32>
        break;
 8004f5c:	e008      	b.n	8004f70 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	b299      	uxth	r1, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	2301      	movs	r3, #1
 8004f68:	68b8      	ldr	r0, [r7, #8]
 8004f6a:	f000 f845 	bl	8004ff8 <arm_radix8_butterfly_f32>
        break;
 8004f6e:	bf00      	nop
    }

    if ( bitReverseFlag )
 8004f70:	79bb      	ldrb	r3, [r7, #6]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8999      	ldrh	r1, [r3, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	f7fb f95d 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d130      	bne.n	8004fee <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9e:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	e01c      	b.n	8004fe6 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	61ba      	str	r2, [r7, #24]
 8004fb2:	ed93 7a00 	vldr	s14, [r3]
 8004fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	edd3 7a00 	vldr	s15, [r3]
 8004fc8:	eeb1 7a67 	vneg.f32	s14, s15
 8004fcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d3de      	bcc.n	8004fac <arm_cfft_f32+0x12a>
        }
    }
}
 8004fee:	bf00      	nop
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b0bd      	sub	sp, #244	; 0xf4
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	461a      	mov	r2, r3
 8005004:	460b      	mov	r3, r1
 8005006:	817b      	strh	r3, [r7, #10]
 8005008:	4613      	mov	r3, r2
 800500a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <arm_radix8_butterfly_f32+0x3c>)
 800500e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8005012:	897b      	ldrh	r3, [r7, #10]
 8005014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	08db      	lsrs	r3, r3, #3
 8005026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005030:	e002      	b.n	8005038 <arm_radix8_butterfly_f32+0x40>
 8005032:	bf00      	nop
 8005034:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8005038:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800503c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005040:	4413      	add	r3, r2
 8005042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8005046:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800504a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504e:	4413      	add	r3, r2
 8005050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8005054:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505c:	4413      	add	r3, r2
 800505e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8005062:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	4413      	add	r3, r2
 800506c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8005070:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005078:	4413      	add	r3, r2
 800507a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800507e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005086:	4413      	add	r3, r2
 8005088:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800508c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	4413      	add	r3, r2
 8005096:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800509a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	ed93 7a00 	vldr	s14, [r3]
 80050a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	edd3 7a00 	vldr	s15, [r3]
 80050b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ba:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80050be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	ed93 7a00 	vldr	s14, [r3]
 80050cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	edd3 7a00 	vldr	s15, [r3]
 80050da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050de:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80050e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	ed93 7a00 	vldr	s14, [r3]
 80050f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	edd3 7a00 	vldr	s15, [r3]
 80050fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005102:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	ed93 7a00 	vldr	s14, [r3]
 8005114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	edd3 7a00 	vldr	s15, [r3]
 8005122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005126:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800512a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	ed93 7a00 	vldr	s14, [r3]
 8005138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	edd3 7a00 	vldr	s15, [r3]
 8005146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800514a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800514e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	ed93 7a00 	vldr	s14, [r3]
 800515c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	edd3 7a00 	vldr	s15, [r3]
 800516a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800516e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	ed93 7a00 	vldr	s14, [r3]
 8005180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005192:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8005196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	ed93 7a00 	vldr	s14, [r3]
 80051a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	edd3 7a00 	vldr	s15, [r3]
 80051b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051b6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80051ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80051be:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80051c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051c6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80051ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80051ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80051d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80051da:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80051de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80051e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051e6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80051ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80051ee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80051f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80051fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005208:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800520c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005210:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8005214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005222:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800522a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800522e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	3304      	adds	r3, #4
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	ed93 7a00 	vldr	s14, [r3]
 800523e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	3304      	adds	r3, #4
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	edd3 7a00 	vldr	s15, [r3]
 800524e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005252:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	3304      	adds	r3, #4
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	ed93 7a00 	vldr	s14, [r3]
 8005266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	3304      	adds	r3, #4
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	edd3 7a00 	vldr	s15, [r3]
 8005276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800527a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800527e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	3304      	adds	r3, #4
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	ed93 7a00 	vldr	s14, [r3]
 800528e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	3304      	adds	r3, #4
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	edd3 7a00 	vldr	s15, [r3]
 800529e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80052a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	3304      	adds	r3, #4
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	ed93 7a00 	vldr	s14, [r3]
 80052b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	3304      	adds	r3, #4
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	edd3 7a00 	vldr	s15, [r3]
 80052c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ca:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80052ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	3304      	adds	r3, #4
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	ed93 7a00 	vldr	s14, [r3]
 80052de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	3304      	adds	r3, #4
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	edd3 7a00 	vldr	s15, [r3]
 80052ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80052f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	3304      	adds	r3, #4
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	ed93 7a00 	vldr	s14, [r3]
 8005306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	3304      	adds	r3, #4
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	edd3 7a00 	vldr	s15, [r3]
 8005316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800531a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800531e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	3304      	adds	r3, #4
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	ed93 7a00 	vldr	s14, [r3]
 800532e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	3304      	adds	r3, #4
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	edd3 7a00 	vldr	s15, [r3]
 800533e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005342:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	3304      	adds	r3, #4
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	ed93 7a00 	vldr	s14, [r3]
 8005356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	3304      	adds	r3, #4
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	edd3 7a00 	vldr	s15, [r3]
 8005366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800536a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800536e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005372:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800537a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800537e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005382:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800538a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800538e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005392:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800539a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800539e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80053a2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80053ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	3304      	adds	r3, #4
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80053c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80053ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	3304      	adds	r3, #4
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80053de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80053e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80053f4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053fc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8005400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800540e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005416:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800541a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	3304      	adds	r3, #4
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800542a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800542e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005432:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	3304      	adds	r3, #4
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005446:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8005452:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005456:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800545a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800545e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005466:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800546a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800546e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005476:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800547a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8005482:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005486:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800548a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800548e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005496:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800549a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800549e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80054b2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80054b6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80054ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054be:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80054c2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80054c6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80054ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ce:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80054d2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80054d6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80054da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054de:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80054e2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80054e6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80054ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ee:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80054f2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80054f6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80054fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8005502:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005506:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800550a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8005512:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005516:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800551a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800551e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8005522:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005526:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800552a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800552e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8005532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005540:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005548:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800554c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800555a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800555e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005562:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8005566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005574:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800557c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8005580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800558e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005596:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800559a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	3304      	adds	r3, #4
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80055aa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80055ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80055b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	3304      	adds	r3, #4
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80055c6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80055ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ce:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80055d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	3304      	adds	r3, #4
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80055e2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80055e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80055ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	3304      	adds	r3, #4
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80055fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005606:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800560a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800560e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005612:	4413      	add	r3, r2
 8005614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8005618:	897b      	ldrh	r3, [r7, #10]
 800561a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800561e:	429a      	cmp	r2, r3
 8005620:	f4ff ad0a 	bcc.w	8005038 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005628:	2b07      	cmp	r3, #7
 800562a:	f240 84e3 	bls.w	8005ff4 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8005634:	2301      	movs	r3, #1
 8005636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800563a:	893b      	ldrh	r3, [r7, #8]
 800563c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005640:	4413      	add	r3, r2
 8005642:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8005644:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005646:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800564a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800564e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005650:	4413      	add	r3, r2
 8005652:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8005654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005658:	4413      	add	r3, r2
 800565a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800565c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800565e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005660:	4413      	add	r3, r2
 8005662:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8005664:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005666:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005668:	4413      	add	r3, r2
 800566a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800566c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800566e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005670:	4413      	add	r3, r2
 8005672:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8005674:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005678:	4413      	add	r3, r2
 800567a:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800567c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800568a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8005696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80056a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4413      	add	r3, r2
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4413      	add	r3, r2
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80056ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80056c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80056d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	3304      	adds	r3, #4
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80056e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	3304      	adds	r3, #4
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80056f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	3304      	adds	r3, #4
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80056fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	3304      	adds	r3, #4
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4413      	add	r3, r2
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	3304      	adds	r3, #4
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800571a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	3304      	adds	r3, #4
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4413      	add	r3, r2
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	3304      	adds	r3, #4
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8005736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800573e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	4413      	add	r3, r2
 8005748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800574c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005754:	4413      	add	r3, r2
 8005756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800575a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	4413      	add	r3, r2
 8005764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8005768:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005770:	4413      	add	r3, r2
 8005772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8005776:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	4413      	add	r3, r2
 8005780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8005784:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578c:	4413      	add	r3, r2
 800578e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8005792:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	4413      	add	r3, r2
 800579c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80057a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	ed93 7a00 	vldr	s14, [r3]
 80057ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	edd3 7a00 	vldr	s15, [r3]
 80057bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80057c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	ed93 7a00 	vldr	s14, [r3]
 80057d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	edd3 7a00 	vldr	s15, [r3]
 80057e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057e4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80057e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	ed93 7a00 	vldr	s14, [r3]
 80057f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	edd3 7a00 	vldr	s15, [r3]
 8005804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005808:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800580c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	ed93 7a00 	vldr	s14, [r3]
 800581a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	edd3 7a00 	vldr	s15, [r3]
 8005828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800582c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005830:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	ed93 7a00 	vldr	s14, [r3]
 800583e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	edd3 7a00 	vldr	s15, [r3]
 800584c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005850:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005854:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	ed93 7a00 	vldr	s14, [r3]
 8005862:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	edd3 7a00 	vldr	s15, [r3]
 8005870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005874:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	ed93 7a00 	vldr	s14, [r3]
 8005886:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	edd3 7a00 	vldr	s15, [r3]
 8005894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005898:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800589c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	ed93 7a00 	vldr	s14, [r3]
 80058aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	edd3 7a00 	vldr	s15, [r3]
 80058b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058bc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80058c0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80058c4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80058c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058cc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80058d0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80058d4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80058d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058dc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80058e0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80058e4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80058e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ec:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80058f0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80058f4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80058f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058fc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8005900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800590e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005916:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800591a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800591e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005926:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800592a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	3304      	adds	r3, #4
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	ed93 7a00 	vldr	s14, [r3]
 800593a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	3304      	adds	r3, #4
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	edd3 7a00 	vldr	s15, [r3]
 800594a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800594e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005952:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	3304      	adds	r3, #4
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	ed93 7a00 	vldr	s14, [r3]
 8005962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	3304      	adds	r3, #4
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	edd3 7a00 	vldr	s15, [r3]
 8005972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005976:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800597a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	3304      	adds	r3, #4
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	ed93 7a00 	vldr	s14, [r3]
 800598a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	3304      	adds	r3, #4
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	edd3 7a00 	vldr	s15, [r3]
 800599a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800599e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80059a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	3304      	adds	r3, #4
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	ed93 7a00 	vldr	s14, [r3]
 80059b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	3304      	adds	r3, #4
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	edd3 7a00 	vldr	s15, [r3]
 80059c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059c6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80059ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	3304      	adds	r3, #4
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	ed93 7a00 	vldr	s14, [r3]
 80059da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	3304      	adds	r3, #4
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	edd3 7a00 	vldr	s15, [r3]
 80059ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ee:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80059f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	3304      	adds	r3, #4
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	ed93 7a00 	vldr	s14, [r3]
 8005a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	3304      	adds	r3, #4
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	edd3 7a00 	vldr	s15, [r3]
 8005a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a16:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	3304      	adds	r3, #4
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	ed93 7a00 	vldr	s14, [r3]
 8005a2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	3304      	adds	r3, #4
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	edd3 7a00 	vldr	s15, [r3]
 8005a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a3e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	3304      	adds	r3, #4
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	ed93 7a00 	vldr	s14, [r3]
 8005a52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	3304      	adds	r3, #4
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	edd3 7a00 	vldr	s15, [r3]
 8005a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a66:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8005a6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005a6e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a76:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8005a7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005a7e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a86:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8005a8a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005a8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a96:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005a9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005a9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8005aaa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005aae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8005aba:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005abe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8005aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ada:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005ae6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005aea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005af2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8005af6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005afa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b02:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8005b06:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005b0a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b12:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005b16:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b1a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005b26:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b32:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005b36:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b42:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005b46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b4a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b6c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8005b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	3304      	adds	r3, #4
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b88:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8005b8c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005b90:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b98:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005b9c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005ba0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8005bac:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005bb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8005bbc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005bc0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8005bcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8005bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8005bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005be6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	3304      	adds	r3, #4
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bfe:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005c02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c06:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005c12:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c16:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005c22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c26:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005c32:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c36:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c58:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8005c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	3304      	adds	r3, #4
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c74:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005c78:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005c7c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c84:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8005c90:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005c94:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c9c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005ca8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005cac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cb4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8005cc0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005cc4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ccc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8005cd8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005cdc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8005ce8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005cec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cf4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8005cf8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005cfc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d04:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005d08:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005d0c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d14:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005d18:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d24:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005d28:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d34:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005d38:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005d3c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d44:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005d48:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005d4c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d54:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005d58:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d5c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d64:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005d68:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d6c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d74:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005d78:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005d7c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d84:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005d88:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005d8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d94:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005d98:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d9c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005da8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005dac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005db4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8005db8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005dbc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dc4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8005dc8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005dcc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8005dd8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005ddc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005de8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005dec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005df8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005dfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e04:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005e08:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e0c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e26:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	3304      	adds	r3, #4
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e42:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e4a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005e4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005e52:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005e5e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005e62:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005e6e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005e72:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005e7e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005e82:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005e8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005ea8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	3304      	adds	r3, #4
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005eb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ec0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005ec4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005ec8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005ed4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005ed8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005ee4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005ee8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005ef4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005ef8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f00:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f12:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f1a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8005f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	3304      	adds	r3, #4
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f36:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8005f3a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005f3e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8005f4a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005f4e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8005f5a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005f5e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f66:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8005f6a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005f6e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8005f7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f88:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f90:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8005f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fac:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8005fb0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fb8:	4413      	add	r3, r2
 8005fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8005fbe:	897b      	ldrh	r3, [r7, #10]
 8005fc0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	f4ff abba 	bcc.w	800573e <arm_radix8_butterfly_f32+0x746>

         j++;
 8005fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fce:	3301      	adds	r3, #1
 8005fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8005fd4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	f4ff ab2c 	bcc.w	800563a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8005fe2:	893b      	ldrh	r3, [r7, #8]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8005fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fec:	2b07      	cmp	r3, #7
 8005fee:	f63f a813 	bhi.w	8005018 <arm_radix8_butterfly_f32+0x20>
}
 8005ff2:	e000      	b.n	8005ff6 <arm_radix8_butterfly_f32+0xffe>
         break;
 8005ff4:	bf00      	nop
}
 8005ff6:	bf00      	nop
 8005ff8:	37f4      	adds	r7, #244	; 0xf4
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop

08006004 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8006004:	b480      	push	{r7}
 8006006:	b095      	sub	sp, #84	; 0x54
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	3b01      	subs	r3, #1
 8006024:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8006026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800602c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8006032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8006038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800603e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	64ba      	str	r2, [r7, #72]	; 0x48
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	1d1a      	adds	r2, r3, #4
 800604c:	64ba      	str	r2, [r7, #72]	; 0x48
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8006052:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006056:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800605a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800605e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8006062:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006066:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800606a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800606e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8006072:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006076:	edd7 7a08 	vldr	s15, [r7, #32]
 800607a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	1d1a      	adds	r2, r3, #4
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800608c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8006090:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006094:	edd7 7a08 	vldr	s15, [r7, #32]
 8006098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060aa:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80060ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4413      	add	r3, r2
 80060b6:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80060b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ba:	3308      	adds	r3, #8
 80060bc:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80060be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80060c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80060ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80060d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80060d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	64ba      	str	r2, [r7, #72]	; 0x48
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80060e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e2:	1d1a      	adds	r2, r3, #4
 80060e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80060ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80060ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80060f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80060fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80060fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006106:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800610a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800610e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800611a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800611e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800612a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800612e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800613a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800613e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006146:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800614a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800614e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006156:	edd7 7a07 	vldr	s15, [r7, #28]
 800615a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800615e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	1d1a      	adds	r2, r3, #4
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006174:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8006178:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800617c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006180:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006184:	edd7 7a06 	vldr	s15, [r7, #24]
 8006188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800618c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	1d1a      	adds	r2, r3, #4
 8006198:	607a      	str	r2, [r7, #4]
 800619a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800619e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a2:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80061a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a8:	3308      	adds	r3, #8
 80061aa:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80061ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ae:	3b08      	subs	r3, #8
 80061b0:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	3b01      	subs	r3, #1
 80061b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f47f af7f 	bne.w	80060be <stage_rfft_f32+0xba>
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	3754      	adds	r7, #84	; 0x54
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b095      	sub	sp, #84	; 0x54
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80061f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80061f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80061fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fe:	3308      	adds	r3, #8
 8006200:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8006202:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006206:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800620a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	1d1a      	adds	r2, r3, #4
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800621c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8006220:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006224:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1d1a      	adds	r2, r3, #4
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800623a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4413      	add	r3, r2
 8006246:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8006248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624a:	3308      	adds	r3, #8
 800624c:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800624e:	e07c      	b.n	800634a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8006250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8006256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800625c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8006268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	64ba      	str	r2, [r7, #72]	; 0x48
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8006272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006274:	1d1a      	adds	r2, r3, #4
 8006276:	64ba      	str	r2, [r7, #72]	; 0x48
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800627c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006280:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006288:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800628c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006290:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006298:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800629c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80062a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a8:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80062ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80062b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80062b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b8:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80062bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80062c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c8:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80062cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80062d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80062d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d8:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80062dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80062e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80062e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80062ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80062f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	607a      	str	r2, [r7, #4]
 80062fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006306:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800630a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800630e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006312:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006316:	edd7 7a05 	vldr	s15, [r7, #20]
 800631a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800631e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	1d1a      	adds	r2, r3, #4
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006334:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8006338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633a:	3308      	adds	r3, #8
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800633e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006340:	3b08      	subs	r3, #8
 8006342:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8006344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006346:	3b01      	subs	r3, #1
 8006348:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f af7f 	bne.w	8006250 <merge_rfft_f32+0x82>
   }

}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	3754      	adds	r7, #84	; 0x54
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8a1b      	ldrh	r3, [r3, #16]
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff ff20 	bl	80061ce <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	2301      	movs	r3, #1
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f7fe fd74 	bl	8004e82 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800639a:	e00a      	b.n	80063b2 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800639c:	78fa      	ldrb	r2, [r7, #3]
 800639e:	2301      	movs	r3, #1
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	6978      	ldr	r0, [r7, #20]
 80063a4:	f7fe fd6d 	bl	8004e82 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff fe29 	bl	8006004 <stage_rfft_f32>
}
 80063b2:	bf00      	nop
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	887a      	ldrh	r2, [r7, #2]
 80063de:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e8:	d023      	beq.n	8006432 <arm_rfft_fast_init_f32+0x76>
 80063ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ee:	f300 808c 	bgt.w	800650a <arm_rfft_fast_init_f32+0x14e>
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f6:	d02a      	beq.n	800644e <arm_rfft_fast_init_f32+0x92>
 80063f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fc:	f300 8085 	bgt.w	800650a <arm_rfft_fast_init_f32+0x14e>
 8006400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006404:	d031      	beq.n	800646a <arm_rfft_fast_init_f32+0xae>
 8006406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640a:	dc7e      	bgt.n	800650a <arm_rfft_fast_init_f32+0x14e>
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	d039      	beq.n	8006486 <arm_rfft_fast_init_f32+0xca>
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	dc78      	bgt.n	800650a <arm_rfft_fast_init_f32+0x14e>
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d042      	beq.n	80064a2 <arm_rfft_fast_init_f32+0xe6>
 800641c:	2b80      	cmp	r3, #128	; 0x80
 800641e:	dc74      	bgt.n	800650a <arm_rfft_fast_init_f32+0x14e>
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d04b      	beq.n	80064bc <arm_rfft_fast_init_f32+0x100>
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	dc70      	bgt.n	800650a <arm_rfft_fast_init_f32+0x14e>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d061      	beq.n	80064f0 <arm_rfft_fast_init_f32+0x134>
 800642c:	2b20      	cmp	r3, #32
 800642e:	d052      	beq.n	80064d6 <arm_rfft_fast_init_f32+0x11a>
 8006430:	e06b      	b.n	800650a <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8006438:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4a38      	ldr	r2, [pc, #224]	; (8006520 <arm_rfft_fast_init_f32+0x164>)
 800643e:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4a38      	ldr	r2, [pc, #224]	; (8006524 <arm_rfft_fast_init_f32+0x168>)
 8006444:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a37      	ldr	r2, [pc, #220]	; (8006528 <arm_rfft_fast_init_f32+0x16c>)
 800644a:	615a      	str	r2, [r3, #20]
    break;
 800644c:	e060      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006454:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4a34      	ldr	r2, [pc, #208]	; (800652c <arm_rfft_fast_init_f32+0x170>)
 800645a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4a34      	ldr	r2, [pc, #208]	; (8006530 <arm_rfft_fast_init_f32+0x174>)
 8006460:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a33      	ldr	r2, [pc, #204]	; (8006534 <arm_rfft_fast_init_f32+0x178>)
 8006466:	615a      	str	r2, [r3, #20]
    break;
 8006468:	e052      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006470:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4a30      	ldr	r2, [pc, #192]	; (8006538 <arm_rfft_fast_init_f32+0x17c>)
 8006476:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4a30      	ldr	r2, [pc, #192]	; (800653c <arm_rfft_fast_init_f32+0x180>)
 800647c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2f      	ldr	r2, [pc, #188]	; (8006540 <arm_rfft_fast_init_f32+0x184>)
 8006482:	615a      	str	r2, [r3, #20]
    break;
 8006484:	e044      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800648c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4a2c      	ldr	r2, [pc, #176]	; (8006544 <arm_rfft_fast_init_f32+0x188>)
 8006492:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <arm_rfft_fast_init_f32+0x18c>)
 8006498:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a2b      	ldr	r2, [pc, #172]	; (800654c <arm_rfft_fast_init_f32+0x190>)
 800649e:	615a      	str	r2, [r3, #20]
    break;
 80064a0:	e036      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	22d0      	movs	r2, #208	; 0xd0
 80064a6:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4a29      	ldr	r2, [pc, #164]	; (8006550 <arm_rfft_fast_init_f32+0x194>)
 80064ac:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <arm_rfft_fast_init_f32+0x198>)
 80064b2:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a28      	ldr	r2, [pc, #160]	; (8006558 <arm_rfft_fast_init_f32+0x19c>)
 80064b8:	615a      	str	r2, [r3, #20]
    break;
 80064ba:	e029      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2238      	movs	r2, #56	; 0x38
 80064c0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a25      	ldr	r2, [pc, #148]	; (800655c <arm_rfft_fast_init_f32+0x1a0>)
 80064c6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4a25      	ldr	r2, [pc, #148]	; (8006560 <arm_rfft_fast_init_f32+0x1a4>)
 80064cc:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a24      	ldr	r2, [pc, #144]	; (8006564 <arm_rfft_fast_init_f32+0x1a8>)
 80064d2:	615a      	str	r2, [r3, #20]
    break;
 80064d4:	e01c      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2230      	movs	r2, #48	; 0x30
 80064da:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a22      	ldr	r2, [pc, #136]	; (8006568 <arm_rfft_fast_init_f32+0x1ac>)
 80064e0:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4a21      	ldr	r2, [pc, #132]	; (800656c <arm_rfft_fast_init_f32+0x1b0>)
 80064e6:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a21      	ldr	r2, [pc, #132]	; (8006570 <arm_rfft_fast_init_f32+0x1b4>)
 80064ec:	615a      	str	r2, [r3, #20]
    break;
 80064ee:	e00f      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2214      	movs	r2, #20
 80064f4:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <arm_rfft_fast_init_f32+0x1b8>)
 80064fa:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a1e      	ldr	r2, [pc, #120]	; (8006578 <arm_rfft_fast_init_f32+0x1bc>)
 8006500:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <arm_rfft_fast_init_f32+0x1c0>)
 8006506:	615a      	str	r2, [r3, #20]
    break;
 8006508:	e002      	b.n	8006510 <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 800650a:	23ff      	movs	r3, #255	; 0xff
 800650c:	73fb      	strb	r3, [r7, #15]
    break;
 800650e:	bf00      	nop
  }

  return (status);
 8006510:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	0801f0c8 	.word	0x0801f0c8
 8006524:	08019930 	.word	0x08019930
 8006528:	08024e08 	.word	0x08024e08
 800652c:	0801e2b8 	.word	0x0801e2b8
 8006530:	08017930 	.word	0x08017930
 8006534:	08022e08 	.word	0x08022e08
 8006538:	0801df38 	.word	0x0801df38
 800653c:	08016930 	.word	0x08016930
 8006540:	08021e08 	.word	0x08021e08
 8006544:	0801dbc8 	.word	0x0801dbc8
 8006548:	08016130 	.word	0x08016130
 800654c:	08021608 	.word	0x08021608
 8006550:	0801da28 	.word	0x0801da28
 8006554:	08015d30 	.word	0x08015d30
 8006558:	08021208 	.word	0x08021208
 800655c:	0801d9b8 	.word	0x0801d9b8
 8006560:	08015b30 	.word	0x08015b30
 8006564:	08021008 	.word	0x08021008
 8006568:	0801d958 	.word	0x0801d958
 800656c:	08015a30 	.word	0x08015a30
 8006570:	08020f08 	.word	0x08020f08
 8006574:	0801d930 	.word	0x0801d930
 8006578:	080159b0 	.word	0x080159b0
 800657c:	08020e88 	.word	0x08020e88

08006580 <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 8006580:	b480      	push	{r7}
 8006582:	b08f      	sub	sp, #60	; 0x3c
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 800658c:	887b      	ldrh	r3, [r7, #2]
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 800659a:	e032      	b.n	8006602 <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 800659c:	f107 0210 	add.w	r2, r7, #16
 80065a0:	6813      	ldr	r3, [r2, #0]
 80065a2:	1d19      	adds	r1, r3, #4
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	2307      	movs	r3, #7
 80065b4:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <arm_relu_q7+0x48>
    return op1;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	e003      	b.n	80065d0 <arm_relu_q7+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	fa62 f303 	ror.w	r3, r2, r3
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	2200      	movs	r2, #0
 80065d6:	627a      	str	r2, [r7, #36]	; 0x24
 80065d8:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	fac3 f312 	qsub8	r3, r3, r2
 80065e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	43d9      	mvns	r1, r3
 80065ec:	f107 020c 	add.w	r2, r7, #12
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	1d18      	adds	r0, r3, #4
 80065f4:	6010      	str	r0, [r2, #0]
 80065f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f8:	400a      	ands	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]
        i--;
 80065fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065fe:	3b01      	subs	r3, #1
 8006600:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8006602:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1c9      	bne.n	800659c <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8006608:	887b      	ldrh	r3, [r7, #2]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 8006610:	e00d      	b.n	800662e <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f993 3000 	ldrsb.w	r3, [r3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	da02      	bge.n	8006622 <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3301      	adds	r3, #1
 8006626:	613b      	str	r3, [r7, #16]
        i--;
 8006628:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800662a:	3b01      	subs	r3, #1
 800662c:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800662e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ee      	bne.n	8006612 <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	373c      	adds	r7, #60	; 0x3c
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t * Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y, 
                                                  q15_t * bufferA, 
                                                  q7_t * bufferB)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b0aa      	sub	sp, #168	; 0xa8
 8006646:	af04      	add	r7, sp, #16
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	4608      	mov	r0, r1
 800664c:	4611      	mov	r1, r2
 800664e:	461a      	mov	r2, r3
 8006650:	4603      	mov	r3, r0
 8006652:	817b      	strh	r3, [r7, #10]
 8006654:	460b      	mov	r3, r1
 8006656:	813b      	strh	r3, [r7, #8]
 8006658:	4613      	mov	r3, r2
 800665a:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 800665c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006660:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8006664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11e      	bne.n	80066b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8006678:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d117      	bne.n	80066b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8006686:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800668a:	2b01      	cmp	r3, #1
 800668c:	d113      	bne.n	80066b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 800668e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006692:	2b01      	cmp	r3, #1
 8006694:	d10f      	bne.n	80066b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        || padding_x != 0 || padding_y != 0 || stride_x != 1 || stride_y != 1)
 8006696:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 800669e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d107      	bne.n	80066b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066a6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d103      	bne.n	80066b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066ae:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d002      	beq.n	80066bc <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 80066b6:	f06f 0302 	mvn.w	r3, #2
 80066ba:	e162      	b.n	8006982 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x340>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80066bc:	2300      	movs	r3, #0
 80066be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80066c2:	e05f      	b.n	8006784 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x142>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80066ca:	e04e      	b.n	800676a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x128>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer,
 80066cc:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80066d0:	897a      	ldrh	r2, [r7, #10]
 80066d2:	fb02 f203 	mul.w	r2, r2, r3
 80066d6:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80066da:	4413      	add	r3, r2
 80066dc:	88fa      	ldrh	r2, [r7, #6]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80066ee:	4618      	mov	r0, r3
 80066f0:	f002 fbd4 	bl	8008e9c <arm_q7_to_q15_reordered_no_shift>
                                             ch_im_in);
            pBuffer += ch_im_in;
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80066fc:	4413      	add	r3, r2
 80066fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006708:	fb02 f303 	mul.w	r3, r2, r3
 800670c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006710:	fb02 f303 	mul.w	r3, r2, r3
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800671a:	4413      	add	r3, r2
 800671c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006720:	429a      	cmp	r2, r3
 8006722:	d11b      	bne.n	800675c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
 8006724:	88f9      	ldrh	r1, [r7, #6]
 8006726:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800672a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800672e:	9303      	str	r3, [sp, #12]
 8006730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006734:	9302      	str	r3, [sp, #8]
 8006736:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	460b      	mov	r3, r1
 8006744:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006748:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800674c:	f001 fcea 	bl	8008124 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8006750:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                /* counter reset */
                pBuffer = bufferA;
 8006754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 800675c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8006760:	b29b      	uxth	r3, r3
 8006762:	3301      	adds	r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800676a:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 800676e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006772:	429a      	cmp	r2, r3
 8006774:	dbaa      	blt.n	80066cc <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006776:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800677a:	b29b      	uxth	r3, r3
 800677c:	3301      	adds	r3, #1
 800677e:	b29b      	uxth	r3, r3
 8006780:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8006784:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8006788:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800678c:	429a      	cmp	r2, r3
 800678e:	db99      	blt.n	80066c4 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8006790:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006798:	429a      	cmp	r2, r3
 800679a:	f000 80f1 	beq.w	8006980 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x33e>
    {
        const q7_t *pA = wt;
 800679e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80067a6:	2300      	movs	r3, #0
 80067a8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80067ac:	e0e1      	b.n	8006972 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x330>
        {
            q31_t     sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 80067ae:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80067b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067b6:	4413      	add	r3, r2
 80067b8:	f993 3000 	ldrsb.w	r3, [r3]
 80067bc:	461a      	mov	r2, r3
 80067be:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80067c2:	409a      	lsls	r2, r3
 80067c4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80067c8:	3b01      	subs	r3, #1
 80067ca:	2101      	movs	r1, #1
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            q15_t    *pB = bufferA;
 80067d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067da:	623b      	str	r3, [r7, #32]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	109b      	asrs	r3, r3, #2
 80067f0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            while (colCnt)
 80067f4:	e06b      	b.n	80068ce <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x28c>
 80067f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	f107 031c 	add.w	r3, r7, #28
 8006800:	647b      	str	r3, [r7, #68]	; 0x44
 8006802:	f107 0318 	add.w	r3, r7, #24
 8006806:	643b      	str	r3, [r7, #64]	; 0x40
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8006808:	f107 0214 	add.w	r2, r7, #20
 800680c:	6813      	ldr	r3, [r2, #0]
 800680e:	1d19      	adds	r1, r3, #4
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38
 800681a:	2308      	movs	r3, #8
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
  op2 %= 32U;
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
  if (op2 == 0U)
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1ee>
    return op1;
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	e003      	b.n	8006838 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1f6>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	fa62 f303 	ror.w	r3, r2, r3
 8006838:	633b      	str	r3, [r7, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	fa2f f383 	sxtb16	r3, r3
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	461a      	mov	r2, r3
 8006846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006848:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	fa2f f383 	sxtb16	r3, r3
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	461a      	mov	r2, r3
 800685a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800685c:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 800685e:	697b      	ldr	r3, [r7, #20]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (const q7_t *)read_and_pad_reordered((void *)pA, &inA1, &inA2);
 8006860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8006864:	f107 0220 	add.w	r2, r7, #32
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	1d19      	adds	r1, r3, #4
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA1, inB1, sum);
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4619      	mov	r1, r3
 8006876:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800687c:	6579      	str	r1, [r7, #84]	; 0x54
 800687e:	653a      	str	r2, [r7, #80]	; 0x50
 8006880:	64fb      	str	r3, [r7, #76]	; 0x4c

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006886:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006888:	fb23 1302 	smlad	r3, r3, r2, r1
 800688c:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800688e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                inB2 = *__SIMD32(pB)++;
 8006894:	f107 0220 	add.w	r2, r7, #32
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	1d19      	adds	r1, r3, #4
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA2, inB2, sum);
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068ac:	6679      	str	r1, [r7, #100]	; 0x64
 80068ae:	663a      	str	r2, [r7, #96]	; 0x60
 80068b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80068b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80068b8:	fb23 1302 	smlad	r3, r3, r2, r1
 80068bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 80068be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                colCnt--;
 80068c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80068c8:	3b01      	subs	r3, #1
 80068ca:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 80068ce:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d18f      	bne.n	80067f6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b4>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80068dc:	fb12 f303 	smulbb	r3, r2, r3
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80068e6:	fb12 f303 	smulbb	r3, r2, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 80068f4:	e01d      	b.n	8006932 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2f0>
            {
                q7_t      inA1 = *pA++;
 80068f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                q15_t     inB1 = *pB++;
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	623a      	str	r2, [r7, #32]
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                sum += inA1 * inB1;
 8006912:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8006916:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006922:	4413      	add	r3, r2
 8006924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                colCnt--;
 8006928:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800692c:	3b01      	subs	r3, #1
 800692e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8006932:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1dd      	bne.n	80068f6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2b4>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 800693a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800693e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006942:	fa42 f303 	asr.w	r3, r2, r3
 8006946:	67bb      	str	r3, [r7, #120]	; 0x78
 8006948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694a:	f303 0307 	ssat	r3, #8, r3
 800694e:	677b      	str	r3, [r7, #116]	; 0x74
 8006950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006952:	b25a      	sxtb	r2, r3
 8006954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006958:	701a      	strb	r2, [r3, #0]
            pOut++;
 800695a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800695e:	3301      	adds	r3, #1
 8006960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 8006964:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8006968:	b29b      	uxth	r3, r3
 800696a:	3301      	adds	r3, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8006972:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8006976:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800697a:	429a      	cmp	r2, r3
 800697c:	f6ff af17 	blt.w	80067ae <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16c>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3798      	adds	r7, #152	; 0x98
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t * Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t * bufferA,
                                               q7_t * bufferB)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b0ac      	sub	sp, #176	; 0xb0
 8006990:	af04      	add	r7, sp, #16
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	461a      	mov	r2, r3
 800699a:	4603      	mov	r3, r0
 800699c:	817b      	strh	r3, [r7, #10]
 800699e:	460b      	mov	r3, r1
 80069a0:	813b      	strh	r3, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 80069a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80069bc:	e0cf      	b.n	8006b5e <arm_convolve_HWC_q7_basic_nonsquare+0x1d2>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80069be:	2300      	movs	r3, #0
 80069c0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80069c4:	e0bd      	b.n	8006b42 <arm_convolve_HWC_q7_basic_nonsquare+0x1b6>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 80069c6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80069ca:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80069ce:	fb12 f303 	smulbb	r3, r2, r3
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80069e0:	e061      	b.n	8006aa6 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 80069e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80069e6:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 80069ea:	fb12 f303 	smulbb	r3, r2, r3
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80069fc:	e03c      	b.n	8006a78 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 80069fe:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	db0d      	blt.n	8006a22 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a06:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006a0a:	893b      	ldrh	r3, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	da08      	bge.n	8006a22 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a10:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db04      	blt.n	8006a22 <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a18:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006a1c:	897b      	ldrh	r3, [r7, #10]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	db08      	blt.n	8006a34 <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	461a      	mov	r2, r3
 8006a28:	2100      	movs	r1, #0
 8006a2a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006a2e:	f008 fe83 	bl	800f738 <memset>
 8006a32:	e013      	b.n	8006a5c <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8006a34:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006a38:	897a      	ldrh	r2, [r7, #10]
 8006a3a:	fb02 f203 	mul.w	r2, r2, r3
 8006a3e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006a42:	4413      	add	r3, r2
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4413      	add	r3, r2
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006a56:	4618      	mov	r0, r3
 8006a58:	f002 f9ae 	bl	8008db8 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a64:	4413      	add	r3, r2
 8006a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006a6a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3301      	adds	r3, #1
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006a78:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006a7c:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006a80:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8006a84:	fb01 f103 	mul.w	r1, r1, r3
 8006a88:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006a8c:	1ac9      	subs	r1, r1, r3
 8006a8e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006a92:	440b      	add	r3, r1
 8006a94:	429a      	cmp	r2, r3
 8006a96:	dbb2      	blt.n	80069fe <arm_convolve_HWC_q7_basic_nonsquare+0x72>
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006a98:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006aa6:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006aaa:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006aae:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8006ab2:	fb01 f103 	mul.w	r1, r1, r3
 8006ab6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006aba:	1ac9      	subs	r1, r1, r3
 8006abc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006ac0:	440b      	add	r3, r1
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	db8d      	blt.n	80069e2 <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006acc:	fb02 f303 	mul.w	r3, r2, r3
 8006ad0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ade:	4413      	add	r3, r2
 8006ae0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d125      	bne.n	8006b34 <arm_convolve_HWC_q7_basic_nonsquare+0x1a8>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006aee:	fb12 f303 	smulbb	r3, r2, r3
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006af8:	fb12 f303 	smulbb	r3, r2, r3
 8006afc:	b299      	uxth	r1, r3
 8006afe:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b06:	9303      	str	r3, [sp, #12]
 8006b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006b20:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006b24:	f000 fd8c 	bl	8007640 <arm_nn_mat_mult_kernel_q7_q15>
 8006b28:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8006b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006b34:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006b42:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8006b46:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f6ff af3b 	blt.w	80069c6 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006b50:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3301      	adds	r3, #1
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006b5e:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 8006b62:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8006b66:	429a      	cmp	r2, r3
 8006b68:	f6ff af29 	blt.w	80069be <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8006b6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b74:	429a      	cmp	r2, r3
 8006b76:	f000 80fa 	beq.w	8006d6e <arm_convolve_HWC_q7_basic_nonsquare+0x3e2>
    {
        const q7_t *pA = wt;
 8006b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b88:	e0ea      	b.n	8006d60 <arm_convolve_HWC_q7_basic_nonsquare+0x3d4>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8006b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b92:	4413      	add	r3, r2
 8006b94:	f993 3000 	ldrsb.w	r3, [r3]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb6:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	109b      	asrs	r3, r3, #2
 8006bcc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 8006bd0:	e078      	b.n	8006cc4 <arm_convolve_HWC_q7_basic_nonsquare+0x338>
 8006bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	f107 0318 	add.w	r3, r7, #24
 8006bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bde:	f107 0314 	add.w	r3, r7, #20
 8006be2:	647b      	str	r3, [r7, #68]	; 0x44
        q31_t     inA = *__SIMD32(source)++;
 8006be4:	f107 0210 	add.w	r2, r7, #16
 8006be8:	6813      	ldr	r3, [r2, #0]
 8006bea:	1d19      	adds	r1, r3, #4
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <arm_convolve_HWC_q7_basic_nonsquare+0x280>
    return op1;
 8006c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0a:	e003      	b.n	8006c14 <arm_convolve_HWC_q7_basic_nonsquare+0x288>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	fa62 f303 	ror.w	r3, r2, r3
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	fa2f f383 	sxtb16	r3, r3
 8006c1c:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 8006c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	fa2f f383 	sxtb16	r3, r3
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	623b      	str	r3, [r7, #32]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8006c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c34:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <arm_convolve_HWC_q7_basic_nonsquare+0x3ec>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	6a3a      	ldr	r2, [r7, #32]
 8006c3a:	0c12      	lsrs	r2, r2, #16
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c42:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c52:	601a      	str	r2, [r3, #0]
        return source;
 8006c54:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8006c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 8006c5a:	f107 021c 	add.w	r2, r7, #28
 8006c5e:	6813      	ldr	r3, [r2, #0]
 8006c60:	1d19      	adds	r1, r3, #4
 8006c62:	6011      	str	r1, [r2, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA1, inB1, sum);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c72:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c74:	657a      	str	r2, [r7, #84]	; 0x54
 8006c76:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c7e:	fb23 1302 	smlad	r3, r3, r2, r1
 8006c82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8006c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 8006c8a:	f107 021c 	add.w	r2, r7, #28
 8006c8e:	6813      	ldr	r3, [r2, #0]
 8006c90:	1d19      	adds	r1, r3, #4
 8006c92:	6011      	str	r1, [r2, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA2, inB2, sum);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca2:	66b9      	str	r1, [r7, #104]	; 0x68
 8006ca4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ca6:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006caa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006cac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006cae:	fb23 1302 	smlad	r3, r3, r2, r1
 8006cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8006cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 8006cba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006cc4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d182      	bne.n	8006bd2 <arm_convolve_HWC_q7_basic_nonsquare+0x246>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006ccc:	88fa      	ldrh	r2, [r7, #6]
 8006cce:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006cd2:	fb12 f303 	smulbb	r3, r2, r3
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006cdc:	fb12 f303 	smulbb	r3, r2, r3
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006cea:	e01d      	b.n	8006d28 <arm_convolve_HWC_q7_basic_nonsquare+0x39c>
            {
                q7_t      inA1 = *pA++;
 8006cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	1c9a      	adds	r2, r3, #2
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 8006d08:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8006d0c:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d18:	4413      	add	r3, r2
 8006d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 8006d1e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d22:	3b01      	subs	r3, #1
 8006d24:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d28:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1dd      	bne.n	8006cec <arm_convolve_HWC_q7_basic_nonsquare+0x360>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8006d30:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006d34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d38:	fa42 f303 	asr.w	r3, r2, r3
 8006d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d40:	f303 0307 	ssat	r3, #8, r3
 8006d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d46:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006d52:	b24a      	sxtb	r2, r1
 8006d54:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8006d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d60:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006d64:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	f6ff af0e 	blt.w	8006b8a <arm_convolve_HWC_q7_basic_nonsquare+0x1fe>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	37a0      	adds	r7, #160	; 0xa0
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	ffff0000 	.word	0xffff0000

08006d7c <arm_depthwise_separable_conv_HWC_q7_nonsquare>:
                                                         q7_t * Im_out,
                                                         const uint16_t dim_im_out_x,
                                                         const uint16_t dim_im_out_y, 
                                                         q15_t * bufferA, 
                                                         q7_t * bufferB)
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b0d3      	sub	sp, #332	; 0x14c
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	f107 040c 	add.w	r4, r7, #12
 8006d86:	6020      	str	r0, [r4, #0]
 8006d88:	460c      	mov	r4, r1
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f107 030a 	add.w	r3, r7, #10
 8006d92:	4622      	mov	r2, r4
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	f107 0308 	add.w	r3, r7, #8
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	1dbb      	adds	r3, r7, #6
 8006da0:	460a      	mov	r2, r1
 8006da2:	801a      	strh	r2, [r3, #0]
 *
 */

    int16_t   i_out_y, i_out_x;
    int16_t   i_ker_y, i_ker_x;
    q7_t     *colBuffer = (q7_t *) bufferA;
 8006da4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006da8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q7_t     *pBuffer = colBuffer;
 8006dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006db0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    const q7_t *pBias = bias;
 8006db4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006db8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    q7_t     *pOut = Im_out;
 8006dbc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006dc0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t  rowCnt;
    uint16_t  row_shift;

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8006dc4:	1dbb      	adds	r3, r7, #6
 8006dc6:	881a      	ldrh	r2, [r3, #0]
 8006dc8:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d003      	beq.n	8006dd8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8006dd0:	f06f 0302 	mvn.w	r3, #2
 8006dd4:	f000 bc2f 	b.w	8007636 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8ba>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8006dde:	f000 bc22 	b.w	8007626 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8aa>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8006de8:	f000 bc0f 	b.w	800760a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x88e>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006dec:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006df0:	f8b7 2174 	ldrh.w	r2, [r7, #372]	; 0x174
 8006df4:	fb12 f303 	smulbb	r3, r2, r3
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
 8006e06:	e06b      	b.n	8006ee0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x164>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006e08:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 8006e0c:	f8b7 2170 	ldrh.w	r2, [r7, #368]	; 0x170
 8006e10:	fb12 f303 	smulbb	r3, r2, r3
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8006e22:	e046      	b.n	8006eb2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x136>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006e24:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db11      	blt.n	8006e50 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e2c:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006e30:	f107 0308 	add.w	r3, r7, #8
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	da0a      	bge.n	8006e50 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e3a:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	db06      	blt.n	8006e50 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e42:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006e46:	f107 030a 	add.w	r3, r7, #10
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	db08      	blt.n	8006e62 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xe6>
                    {
                        /* arm_fill_q7(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, ch_im_in);
 8006e50:	1dbb      	adds	r3, r7, #6
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	2100      	movs	r1, #0
 8006e58:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006e5c:	f008 fc6c 	bl	800f738 <memset>
 8006e60:	e019      	b.n	8006e96 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x11a>
                    } else
                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
 8006e62:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006e66:	f107 020a 	add.w	r2, r7, #10
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	fb02 f203 	mul.w	r2, r2, r3
 8006e70:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006e74:	4413      	add	r3, r2
 8006e76:	1dba      	adds	r2, r7, #6
 8006e78:	8812      	ldrh	r2, [r2, #0]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f107 030c 	add.w	r3, r7, #12
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1899      	adds	r1, r3, r2
 8006e88:	1dbb      	adds	r3, r7, #6
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006e92:	f008 fc29 	bl	800f6e8 <memcpy>
                    }
                    pBuffer += ch_im_in;
 8006e96:	1dbb      	adds	r3, r7, #6
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                     i_ker_x++)
 8006ea4:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3301      	adds	r3, #1
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006eb2:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006eb6:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8006eba:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 8006ebe:	fb01 f103 	mul.w	r1, r1, r3
 8006ec2:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006ec6:	1ac9      	subs	r1, r1, r3
 8006ec8:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8006ecc:	440b      	add	r3, r1
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	dba8      	blt.n	8006e24 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa8>
                 i_ker_y++)
 8006ed2:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006ee0:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006ee4:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8006ee8:	f8b7 1174 	ldrh.w	r1, [r7, #372]	; 0x174
 8006eec:	fb01 f103 	mul.w	r1, r1, r3
 8006ef0:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006ef4:	1ac9      	subs	r1, r1, r3
 8006ef6:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8006efa:	440b      	add	r3, r1
 8006efc:	429a      	cmp	r2, r3
 8006efe:	db83      	blt.n	8006e08 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8c>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 8006f00:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006f04:	089b      	lsrs	r3, r3, #2
 8006f06:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            row_shift = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
            pBias = bias;
 8006f10:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006f14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

            while (rowCnt)
 8006f18:	e2e4      	b.n	80074e4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x768>
            {
                q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006f24:	f993 3000 	ldrsb.w	r3, [r3]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006f34:	3b01      	subs	r3, #1
 8006f36:	2101      	movs	r1, #1
 8006f38:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8006f50:	461a      	mov	r2, r3
 8006f52:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006f56:	409a      	lsls	r2, r3
 8006f58:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	2101      	movs	r1, #1
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	4413      	add	r3, r2
 8006f66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006f74:	f993 3000 	ldrsb.w	r3, [r3]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006f84:	3b01      	subs	r3, #1
 8006f86:	2101      	movs	r1, #1
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006fac:	3b01      	subs	r3, #1
 8006fae:	2101      	movs	r1, #1
 8006fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
 8006fba:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8006fbe:	f8b7 2164 	ldrh.w	r2, [r7, #356]	; 0x164
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	105b      	asrs	r3, r3, #1
 8006fc8:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                q7_t     *pB = colBuffer + row_shift;
 8006fcc:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8006fd0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8006fd4:	441a      	add	r2, r3
 8006fd6:	f107 0320 	add.w	r3, r7, #32
 8006fda:	601a      	str	r2, [r3, #0]
                const q7_t *pA = wt + row_shift;
 8006fdc:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8006fe0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8006fe4:	441a      	add	r2, r3
 8006fe6:	f107 031c 	add.w	r3, r7, #28
 8006fea:	601a      	str	r2, [r3, #0]
                row_shift += 4;
 8006fec:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 8006ff6:	e198      	b.n	800732a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5ae>
                {
                    q31_t     inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = *__SIMD32(pB);
 8006ff8:	f107 0320 	add.w	r3, r7, #32
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    pB += ch_im_in;
 8007004:	f107 0320 	add.w	r3, r7, #32
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	1dbb      	adds	r3, r7, #6
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	441a      	add	r2, r3
 8007010:	f107 0320 	add.w	r3, r7, #32
 8007014:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pB);
 8007016:	f107 0320 	add.w	r3, r7, #32
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pB += ch_im_in;
 8007022:	f107 0320 	add.w	r3, r7, #32
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	1dbb      	adds	r3, r7, #6
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	441a      	add	r2, r3
 800702e:	f107 0320 	add.w	r3, r7, #32
 8007032:	601a      	str	r2, [r3, #0]
                    inB2 = __PKHTB(opB, inB1, 16);
 8007034:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007038:	4bc4      	ldr	r3, [pc, #784]	; (800734c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 800703a:	4013      	ands	r3, r2
 800703c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007040:	0c12      	lsrs	r2, r2, #16
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                    inB1 = __PKHBT(inB1, opB, 16);
 8007048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800704c:	b29a      	uxth	r2, r3
 800704e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    inA1 = *__SIMD32(pA);
 800705a:	f107 031c 	add.w	r3, r7, #28
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    pA += ch_im_in;
 8007066:	f107 031c 	add.w	r3, r7, #28
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	1dbb      	adds	r3, r7, #6
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	441a      	add	r2, r3
 8007072:	f107 031c 	add.w	r3, r7, #28
 8007076:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pA);
 8007078:	f107 031c 	add.w	r3, r7, #28
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pA += ch_im_in;
 8007084:	f107 031c 	add.w	r3, r7, #28
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	1dbb      	adds	r3, r7, #6
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	441a      	add	r2, r3
 8007090:	f107 031c 	add.w	r3, r7, #28
 8007094:	601a      	str	r2, [r3, #0]
                    inA2 = __PKHTB(opB, inA1, 16);
 8007096:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800709a:	4bac      	ldr	r3, [pc, #688]	; (800734c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 800709c:	4013      	ands	r3, r2
 800709e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80070a2:	0c12      	lsrs	r2, r2, #16
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    inA1 = __PKHBT(inA1, opB, 16);
 80070aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    opA = __SXTB16(inA1);
 80070bc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80070c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80070c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	fa2f f283 	sxtb16	r2, r3
 80070d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d4:	601a      	str	r2, [r3, #0]
  return(result);
 80070d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB1);
 80070e0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80070e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80070ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	fa2f f283 	sxtb16	r2, r3
 80070f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070f8:	601a      	str	r2, [r3, #0]
  return(result);
 80070fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum = __SMLAD(opA, opB, sum);
 8007104:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8007108:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800710c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007110:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007114:	6018      	str	r0, [r3, #0]
 8007116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800711a:	6019      	str	r1, [r3, #0]
 800711c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007122:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007132:	6809      	ldr	r1, [r1, #0]
 8007134:	fb23 1202 	smlad	r2, r3, r2, r1
 8007138:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800713c:	601a      	str	r2, [r3, #0]
  return(result);
 800713e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    opA = __SXTB16(__ROR(inA1, 8));
 8007148:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800714c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007156:	2208      	movs	r2, #8
 8007158:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800715a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800715e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	f002 021f 	and.w	r2, r2, #31
 8007168:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800716a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x400>
    return op1;
 8007174:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	e007      	b.n	800718c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x410>
  return (op1 >> op2) | (op1 << (32U - op2));
 800717c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	fa62 f303 	ror.w	r3, r2, r3
 800718c:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800718e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007190:	fa2f f383 	sxtb16	r3, r3
 8007194:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8007196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB1, 8));
 800719c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80071a2:	2308      	movs	r3, #8
 80071a4:	657b      	str	r3, [r7, #84]	; 0x54
  op2 %= 32U;
 80071a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (op2 == 0U)
 80071ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x43c>
    return op1;
 80071b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071b6:	e003      	b.n	80071c0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x444>
  return (op1 >> op2) | (op1 << (32U - op2));
 80071b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071bc:	fa62 f303 	ror.w	r3, r2, r3
 80071c0:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071c4:	fa2f f383 	sxtb16	r3, r3
 80071c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80071ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum2 = __SMLAD(opA, opB, sum2);
 80071d0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80071d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80071d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071dc:	6739      	str	r1, [r7, #112]	; 0x70
 80071de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071e0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80071e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071e8:	fb23 1302 	smlad	r3, r3, r2, r1
 80071ec:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80071ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    opA = __SXTB16(inA2);
 80071f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071f8:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071fc:	fa2f f383 	sxtb16	r3, r3
 8007200:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8007202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB2);
 8007208:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800720c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007214:	fa2f f383 	sxtb16	r3, r3
 8007218:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 800721a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800721c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum3 = __SMLAD(opA, opB, sum3);
 8007220:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007224:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007228:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800722c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8007230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007238:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800723c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007240:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007244:	fb23 1302 	smlad	r3, r3, r2, r1
 8007248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 800724c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007250:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    opA = __SXTB16(__ROR(inA2, 8));
 8007254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800725c:	2308      	movs	r3, #8
 800725e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  op2 %= 32U;
 8007262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (op2 == 0U)
 800726e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x500>
    return op1;
 8007276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800727a:	e005      	b.n	8007288 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x50c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800727c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007284:	fa62 f303 	ror.w	r3, r2, r3
 8007288:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800728c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007290:	fa2f f383 	sxtb16	r3, r3
 8007294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8007298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800729c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB2, 8));
 80072a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072a8:	2308      	movs	r3, #8
 80072aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  op2 %= 32U;
 80072ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (op2 == 0U)
 80072ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x54c>
    return op1;
 80072c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072c6:	e005      	b.n	80072d4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x558>
  return (op1 >> op2) | (op1 << (32U - op2));
 80072c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072d0:	fa62 f303 	ror.w	r3, r2, r3
 80072d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80072d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072dc:	fa2f f383 	sxtb16	r3, r3
 80072e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 80072e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum4 = __SMLAD(opA, opB, sum4);
 80072ec:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80072f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80072f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072f8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80072fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007308:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800730c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007310:	fb23 1302 	smlad	r3, r3, r2, r1
 8007314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8007318:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800731c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 8007320:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007324:	3b01      	subs	r3, #1
 8007326:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 800732a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800732e:	2b00      	cmp	r3, #0
 8007330:	f47f ae62 	bne.w	8006ff8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x27c>
                              [ch_im_in] "r"(ch_im_in):"r0", "r1", "r2", "r3", "r4", "r5");
#endif                          /*ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

                colCnt = (dim_kernel_x * dim_kernel_y) & 0x1;
 8007334:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007338:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 800733c:	fb12 f303 	smulbb	r3, r2, r3
 8007340:	b29b      	uxth	r3, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 800734a:	e066      	b.n	800741a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x69e>
 800734c:	ffff0000 	.word	0xffff0000
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 8007350:	f107 031c 	add.w	r3, r7, #28
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	f107 0318 	add.w	r3, r7, #24
 800735c:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 800735e:	f107 031c 	add.w	r3, r7, #28
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	1dbb      	adds	r3, r7, #6
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	441a      	add	r2, r3
 800736a:	f107 031c 	add.w	r3, r7, #28
 800736e:	601a      	str	r2, [r3, #0]
                    inB.word = *__SIMD32(pB);
 8007370:	f107 0320 	add.w	r3, r7, #32
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 800737e:	f107 0320 	add.w	r3, r7, #32
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	1dbb      	adds	r3, r7, #6
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	441a      	add	r2, r3
 800738a:	f107 0320 	add.w	r3, r7, #32
 800738e:	601a      	str	r2, [r3, #0]
                    sum += inA.bytes[0] * inB.bytes[0];
 8007390:	f107 0318 	add.w	r3, r7, #24
 8007394:	f993 3000 	ldrsb.w	r3, [r3]
 8007398:	461a      	mov	r2, r3
 800739a:	f107 0314 	add.w	r3, r7, #20
 800739e:	f993 3000 	ldrsb.w	r3, [r3]
 80073a2:	fb03 f302 	mul.w	r3, r3, r2
 80073a6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80073aa:	4413      	add	r3, r2
 80073ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum2 += inA.bytes[1] * inB.bytes[1];
 80073b0:	f107 0318 	add.w	r3, r7, #24
 80073b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f107 0314 	add.w	r3, r7, #20
 80073be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80073c2:	fb03 f302 	mul.w	r3, r3, r2
 80073c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073ca:	4413      	add	r3, r2
 80073cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    sum3 += inA.bytes[2] * inB.bytes[2];
 80073d0:	f107 0318 	add.w	r3, r7, #24
 80073d4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80073d8:	461a      	mov	r2, r3
 80073da:	f107 0314 	add.w	r3, r7, #20
 80073de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80073e2:	fb03 f302 	mul.w	r3, r3, r2
 80073e6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80073ea:	4413      	add	r3, r2
 80073ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    sum4 += inA.bytes[3] * inB.bytes[3];
 80073f0:	f107 0318 	add.w	r3, r7, #24
 80073f4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80073f8:	461a      	mov	r2, r3
 80073fa:	f107 0314 	add.w	r3, r7, #20
 80073fe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007402:	fb03 f302 	mul.w	r3, r3, r2
 8007406:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800740a:	4413      	add	r3, r2
 800740c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 8007410:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007414:	3b01      	subs	r3, #1
 8007416:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 800741a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800741e:	2b00      	cmp	r3, #0
 8007420:	d196      	bne.n	8007350 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d4>
                }

                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007422:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007426:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800742a:	fa42 f303 	asr.w	r3, r2, r3
 800742e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007432:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007436:	f303 0307 	ssat	r3, #8, r3
 800743a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800743e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8007442:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800744c:	b24a      	sxtb	r2, r1
 800744e:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8007450:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007454:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007458:	fa42 f303 	asr.w	r3, r2, r3
 800745c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007460:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007464:	f303 0307 	ssat	r3, #8, r3
 8007468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800746c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8007470:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800747a:	b24a      	sxtb	r2, r1
 800747c:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 800747e:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007482:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007486:	fa42 f303 	asr.w	r3, r2, r3
 800748a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800748e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007492:	f303 0307 	ssat	r3, #8, r3
 8007496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800749a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800749e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80074a8:	b24a      	sxtb	r2, r1
 80074aa:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 80074ac:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80074b0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80074b4:	fa42 f303 	asr.w	r3, r2, r3
 80074b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f303 0307 	ssat	r3, #8, r3
 80074c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074c8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80074cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80074d6:	b24a      	sxtb	r2, r1
 80074d8:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 80074da:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80074de:	3b01      	subs	r3, #1
 80074e0:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 80074e4:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f47f ad16 	bne.w	8006f1a <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x19e>
            }

            rowCnt = ch_im_out & 0x3;
 80074ee:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 80074fa:	e077      	b.n	80075ec <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x870>
            {
                q7_t     *pB = colBuffer + row_shift;
 80074fc:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8007500:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007504:	4413      	add	r3, r2
 8007506:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                const q7_t *pA = wt + row_shift;
 800750a:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800750e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8007512:	4413      	add	r3, r2
 8007514:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007518:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007522:	f993 3000 	ldrsb.w	r3, [r3]
 8007526:	461a      	mov	r2, r3
 8007528:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 800752c:	409a      	lsls	r2, r3
 800752e:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007532:	3b01      	subs	r3, #1
 8007534:	2101      	movs	r1, #1
 8007536:	fa01 f303 	lsl.w	r3, r1, r3
 800753a:	4413      	add	r3, r2
 800753c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y);
 8007540:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007544:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007548:	fb12 f303 	smulbb	r3, r2, r3
 800754c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

                row_shift += 1;
 8007550:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8007554:	3301      	adds	r3, #1
 8007556:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

                while (colCnt)
 800755a:	e027      	b.n	80075ac <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x830>
                {
                    q7_t      A1 = *pA;
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
                    q7_t      B1 = *pB;
 8007566:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
                    pA += ch_im_in;
 8007570:	1dbb      	adds	r3, r7, #6
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007578:	4413      	add	r3, r2
 800757a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                    pB += ch_im_in;
 800757e:	1dbb      	adds	r3, r7, #6
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007586:	4413      	add	r3, r2
 8007588:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                    sum += A1 * B1;
 800758c:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 8007590:	f997 20fe 	ldrsb.w	r2, [r7, #254]	; 0xfe
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800759c:	4413      	add	r3, r2
 800759e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

                    colCnt--;
 80075a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80075a6:	3b01      	subs	r3, #1
 80075a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
                while (colCnt)
 80075ac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1d3      	bne.n	800755c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x7e0>
                }
                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80075b4:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80075b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80075bc:	fa42 f303 	asr.w	r3, r2, r3
 80075c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c8:	f303 0307 	ssat	r3, #8, r3
 80075cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075d0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80075d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80075de:	b24a      	sxtb	r2, r1
 80075e0:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 80075e2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80075e6:	3b01      	subs	r3, #1
 80075e8:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 80075ec:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d183      	bne.n	80074fc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x780>
            }

            // clear counter and pointers
            pBuffer = colBuffer;
 80075f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80075fc:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8007600:	b29b      	uxth	r3, r3
 8007602:	3301      	adds	r3, #1
 8007604:	b29b      	uxth	r3, r3
 8007606:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 800760a:	f9b7 2144 	ldrsh.w	r2, [r7, #324]	; 0x144
 800760e:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 8007612:	429a      	cmp	r2, r3
 8007614:	f6ff abea 	blt.w	8006dec <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x70>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8007618:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 800761c:	b29b      	uxth	r3, r3
 800761e:	3301      	adds	r3, #1
 8007620:	b29b      	uxth	r3, r3
 8007622:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8007626:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 800762a:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800762e:	429a      	cmp	r2, r3
 8007630:	f6ff abd7 	blt.w	8006de2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x66>

#endif                          /* ARM_MATH_DSP */


    /* Return to application */
    return ARM_MATH_SUCCESS;
 8007634:	2300      	movs	r3, #0

}
 8007636:	4618      	mov	r0, r3
 8007638:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 800763c:	46bd      	mov	sp, r7
 800763e:	bd90      	pop	{r4, r7, pc}

08007640 <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 8007640:	b490      	push	{r4, r7}
 8007642:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007646:	af00      	add	r7, sp, #0
 8007648:	f107 040c 	add.w	r4, r7, #12
 800764c:	6020      	str	r0, [r4, #0]
 800764e:	f107 0008 	add.w	r0, r7, #8
 8007652:	6001      	str	r1, [r0, #0]
 8007654:	4619      	mov	r1, r3
 8007656:	1dbb      	adds	r3, r7, #6
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	1d3b      	adds	r3, r7, #4
 800765c:	460a      	mov	r2, r1
 800765e:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8007660:	1dbb      	adds	r3, r7, #6
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8007668:	4413      	add	r3, r2
 800766a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 800766e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007672:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 8007676:	1dbb      	adds	r3, r7, #6
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 8007680:	e347      	b.n	8007d12 <arm_nn_mat_mult_kernel_q7_q15+0x6d2>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8007682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007686:	f107 0208 	add.w	r2, r7, #8
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 800768e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	1d3b      	adds	r3, r7, #4
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	441a      	add	r2, r3
 800769c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076a0:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	f107 020c 	add.w	r2, r7, #12
 80076aa:	6812      	ldr	r2, [r2, #0]
 80076ac:	4413      	add	r3, r2
 80076ae:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80076b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80076b6:	f993 3000 	ldrsb.w	r3, [r3]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80076c0:	409a      	lsls	r2, r3
 80076c2:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80076c6:	3b01      	subs	r3, #1
 80076c8:	2101      	movs	r1, #1
 80076ca:	fa01 f303 	lsl.w	r3, r1, r3
 80076ce:	4413      	add	r3, r2
 80076d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80076d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 80076de:	f993 3000 	ldrsb.w	r3, [r3]
 80076e2:	461a      	mov	r2, r3
 80076e4:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80076e8:	409a      	lsls	r2, r3
 80076ea:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80076ee:	3b01      	subs	r3, #1
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f303 	lsl.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80076fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007700:	f993 3000 	ldrsb.w	r3, [r3]
 8007704:	461a      	mov	r2, r3
 8007706:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800770a:	409a      	lsls	r2, r3
 800770c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007710:	3b01      	subs	r3, #1
 8007712:	2101      	movs	r1, #1
 8007714:	fa01 f303 	lsl.w	r3, r1, r3
 8007718:	4413      	add	r3, r2
 800771a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800771e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007728:	f993 3000 	ldrsb.w	r3, [r3]
 800772c:	461a      	mov	r2, r3
 800772e:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007732:	409a      	lsls	r2, r3
 8007734:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007738:	3b01      	subs	r3, #1
 800773a:	2101      	movs	r1, #1
 800773c:	fa01 f303 	lsl.w	r3, r1, r3
 8007740:	4413      	add	r3, r2
 8007742:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	089b      	lsrs	r3, r3, #2
 800774c:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 8007750:	e20c      	b.n	8007b6c <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8007752:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007756:	6813      	ldr	r3, [r2, #0]
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	6011      	str	r1, [r2, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            q31_t     inB2 = *__SIMD32(pB2)++;
 8007762:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	1d19      	adds	r1, r3, #4
 800776a:	6011      	str	r1, [r2, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007776:	f107 020c 	add.w	r2, r7, #12
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007782:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800778c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007790:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	1d19      	adds	r1, r3, #4
 800779a:	6011      	str	r1, [r2, #0]
 800779c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80077a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80077b4:	2208      	movs	r2, #8
 80077b6:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80077b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80077bc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	f002 021f 	and.w	r2, r2, #31
 80077c6:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80077c8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d103      	bne.n	80077da <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 80077d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	e007      	b.n	80077ea <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 80077da:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80077de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	fa62 f303 	ror.w	r3, r2, r3
 80077ea:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80077ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80077f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	fa2f f283 	sxtb16	r2, r3
 80077fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80077fe:	601a      	str	r2, [r3, #0]
  return(result);
 8007800:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800780a:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 800780c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007818:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	fa2f f283 	sxtb16	r2, r3
 8007822:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007826:	601a      	str	r2, [r3, #0]
  return(result);
 8007828:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007832:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007834:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4bd2      	ldr	r3, [pc, #840]	; (8007b84 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 800783c:	4013      	ands	r3, r2
 800783e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	0c12      	lsrs	r2, r2, #16
 8007846:	4313      	orrs	r3, r2
 8007848:	461a      	mov	r2, r3
 800784a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007852:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b29a      	uxth	r2, r3
 800785a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	4313      	orrs	r3, r2
 8007864:	461a      	mov	r2, r3
 8007866:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	601a      	str	r2, [r3, #0]
        return source;
 800786e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007872:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800787e:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007888:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007892:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007896:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007898:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	1d19      	adds	r1, r3, #4
 80078a0:	6011      	str	r1, [r2, #0]
 80078a2:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80078aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80078ba:	2208      	movs	r2, #8
 80078bc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80078be:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80078c2:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	f002 021f 	and.w	r2, r2, #31
 80078cc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80078ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d103      	bne.n	80078e0 <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 80078d8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	e007      	b.n	80078f0 <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 80078e0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80078e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	fa62 f303 	ror.w	r3, r2, r3
 80078f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80078f4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80078f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	fa2f f283 	sxtb16	r2, r3
 8007900:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007904:	601a      	str	r2, [r3, #0]
  return(result);
 8007906:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007910:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007912:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800791c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800791e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	fa2f f283 	sxtb16	r2, r3
 8007928:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800792c:	601a      	str	r2, [r3, #0]
  return(result);
 800792e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007938:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 800793a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	4b90      	ldr	r3, [pc, #576]	; (8007b84 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 8007942:	4013      	ands	r3, r2
 8007944:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	0c12      	lsrs	r2, r2, #16
 800794c:	4313      	orrs	r3, r2
 800794e:	461a      	mov	r2, r3
 8007950:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007958:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	b29a      	uxth	r2, r3
 8007960:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	041b      	lsls	r3, r3, #16
 8007968:	4313      	orrs	r3, r2
 800796a:	461a      	mov	r2, r3
 800796c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	601a      	str	r2, [r3, #0]
        return source;
 8007974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007978:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 800797a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 800797e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800798a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800798e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8007992:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8007996:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80079a2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80079a6:	fb23 1202 	smlad	r2, r3, r2, r1
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	601a      	str	r2, [r3, #0]
  return(result);
 80079b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 80079ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4619      	mov	r1, r3
 80079c2:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80079c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80079ca:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 80079ce:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80079d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80079d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80079da:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80079de:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80079e2:	fb23 1302 	smlad	r3, r3, r2, r1
 80079e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 80079ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80079ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 80079f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4619      	mov	r1, r3
 80079fa:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80079fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007a02:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8007a06:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007a0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a12:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007a16:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8007a1a:	fb23 1302 	smlad	r3, r3, r2, r1
 8007a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8007a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 8007a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4619      	mov	r1, r3
 8007a32:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007a36:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007a3a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8007a3e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8007a42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a46:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007a4a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007a4e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007a52:	fb23 1302 	smlad	r3, r3, r2, r1
 8007a56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8007a5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a5e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8007a62:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a66:	6813      	ldr	r3, [r2, #0]
 8007a68:	1d19      	adds	r1, r3, #4
 8007a6a:	6011      	str	r1, [r2, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inB2 = *__SIMD32(pB2)++;
 8007a72:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	1d19      	adds	r1, r3, #4
 8007a7a:	6011      	str	r1, [r2, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

            sum = __SMLAD(inA12, inB1, sum);
 8007a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007a8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007a92:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8007a96:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8007a9a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007aa2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007aa6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8007aaa:	fb23 1302 	smlad	r3, r3, r2, r1
 8007aae:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8007ab2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007ab6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 8007aba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007ac6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007aca:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8007ace:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8007ad2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007ad6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007ada:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8007ade:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8007ae2:	fb23 1302 	smlad	r3, r3, r2, r1
 8007ae6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 8007aea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007aee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 8007af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4619      	mov	r1, r3
 8007afa:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007afe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007b02:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8007b06:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8007b0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b0e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007b12:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8007b16:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007b1a:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8007b22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007b26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 8007b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4619      	mov	r1, r3
 8007b32:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007b36:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007b3a:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8007b3e:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8007b42:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b46:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007b4a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8007b4e:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8007b52:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b56:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8007b5a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007b5e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8007b62:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007b66:	3b01      	subs	r3, #1
 8007b68:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007b6c:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f47f adee 	bne.w	8007752 <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8007b76:	1d3b      	adds	r3, r7, #4
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007b82:	e058      	b.n	8007c36 <arm_nn_mat_mult_kernel_q7_q15+0x5f6>
 8007b84:	ffff0000 	.word	0xffff0000
        {
            q7_t      inA1 = *pA++;
 8007b88:	f107 030c 	add.w	r3, r7, #12
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f107 020c 	add.w	r2, r7, #12
 8007b92:	1c59      	adds	r1, r3, #1
 8007b94:	6011      	str	r1, [r2, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
            q15_t     inB1 = *pB++;
 8007b9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	1c99      	adds	r1, r3, #2
 8007ba4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
            q7_t      inA2 = *pA2++;
 8007bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
            q15_t     inB2 = *pB2++;
 8007bc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	1c99      	adds	r1, r3, #2
 8007bc8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007bcc:	6011      	str	r1, [r2, #0]
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

            sum += inA1 * inB1;
 8007bd4:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007bd8:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007bdc:	fb02 f303 	mul.w	r3, r2, r3
 8007be0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007be4:	4413      	add	r3, r2
 8007be6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8007bea:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007bee:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 8007c00:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007c04:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007c10:	4413      	add	r3, r2
 8007c12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8007c16:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007c1a:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007c26:	4413      	add	r3, r2
 8007c28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 8007c2c:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c30:	3b01      	subs	r3, #1
 8007c32:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007c36:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1a4      	bne.n	8007b88 <arm_nn_mat_mult_kernel_q7_q15+0x548>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007c3e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007c42:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007c46:	fa42 f303 	asr.w	r3, r2, r3
 8007c4a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007c4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007c52:	f303 0307 	ssat	r3, #8, r3
 8007c56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007c5a:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8007c5e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007c68:	b24a      	sxtb	r2, r1
 8007c6a:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8007c6c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007c70:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007c74:	fa42 f303 	asr.w	r3, r2, r3
 8007c78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8007c7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007c80:	f303 0307 	ssat	r3, #8, r3
 8007c84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007c88:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8007c8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007c96:	b24a      	sxtb	r2, r1
 8007c98:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8007c9a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007c9e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007ca2:	fa42 f303 	asr.w	r3, r2, r3
 8007ca6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007caa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007cae:	f303 0307 	ssat	r3, #8, r3
 8007cb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007cb6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8007cba:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007cc4:	b24a      	sxtb	r2, r1
 8007cc6:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8007cc8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007ccc:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007cd0:	fa42 f303 	asr.w	r3, r2, r3
 8007cd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007cd8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007cdc:	f303 0307 	ssat	r3, #8, r3
 8007ce0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8007ce4:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8007ce8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007cf2:	b24a      	sxtb	r2, r1
 8007cf4:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	881a      	ldrh	r2, [r3, #0]
 8007cfa:	f107 030c 	add.w	r3, r7, #12
 8007cfe:	f107 010c 	add.w	r1, r7, #12
 8007d02:	6809      	ldr	r1, [r1, #0]
 8007d04:	440a      	add	r2, r1
 8007d06:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8007d08:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8007d12:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f47f acb3 	bne.w	8007682 <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8007d1c:	1dbb      	adds	r3, r7, #6
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 81eb 	beq.w	8008100 <arm_nn_mat_mult_kernel_q7_q15+0xac0>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8007d2a:	f107 0320 	add.w	r3, r7, #32
 8007d2e:	f107 0208 	add.w	r2, r7, #8
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8007d36:	f107 0320 	add.w	r3, r7, #32
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	1d3b      	adds	r3, r7, #4
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	441a      	add	r2, r3
 8007d44:	f107 031c 	add.w	r3, r7, #28
 8007d48:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007d4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007d58:	409a      	lsls	r2, r3
 8007d5a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	2101      	movs	r1, #1
 8007d62:	fa01 f303 	lsl.w	r3, r1, r3
 8007d66:	4413      	add	r3, r2
 8007d68:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007d6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007d76:	f993 3000 	ldrsb.w	r3, [r3]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007d80:	409a      	lsls	r2, r3
 8007d82:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d86:	3b01      	subs	r3, #1
 8007d88:	2101      	movs	r1, #1
 8007d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8e:	4413      	add	r3, r2
 8007d90:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8007d94:	1d3b      	adds	r3, r7, #4
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	089b      	lsrs	r3, r3, #2
 8007d9a:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8007d9e:	e138      	b.n	8008012 <arm_nn_mat_mult_kernel_q7_q15+0x9d2>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8007da0:	f107 0220 	add.w	r2, r7, #32
 8007da4:	6813      	ldr	r3, [r2, #0]
 8007da6:	1d19      	adds	r1, r3, #4
 8007da8:	6011      	str	r1, [r2, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8007db0:	f107 021c 	add.w	r2, r7, #28
 8007db4:	6813      	ldr	r3, [r2, #0]
 8007db6:	1d19      	adds	r1, r3, #4
 8007db8:	6011      	str	r1, [r2, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007dc0:	f107 0310 	add.w	r3, r7, #16
 8007dc4:	f107 020c 	add.w	r2, r7, #12
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007dd0:	f107 0218 	add.w	r2, r7, #24
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007dda:	f107 0214 	add.w	r2, r7, #20
 8007dde:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007de0:	f107 0210 	add.w	r2, r7, #16
 8007de4:	6813      	ldr	r3, [r2, #0]
 8007de6:	1d19      	adds	r1, r3, #4
 8007de8:	6011      	str	r1, [r2, #0]
 8007dea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007df2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e02:	2208      	movs	r2, #8
 8007e04:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007e06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e0a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	f002 021f 	and.w	r2, r2, #31
 8007e14:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007e16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d103      	bne.n	8007e28 <arm_nn_mat_mult_kernel_q7_q15+0x7e8>
    return op1;
 8007e20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	e007      	b.n	8007e38 <arm_nn_mat_mult_kernel_q7_q15+0x7f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007e28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	fa62 f303 	ror.w	r3, r2, r3
 8007e38:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e3c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	fa2f f283 	sxtb16	r2, r3
 8007e48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e4c:	601a      	str	r2, [r3, #0]
  return(result);
 8007e4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e58:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007e5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	fa2f f283 	sxtb16	r2, r3
 8007e70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e74:	601a      	str	r2, [r3, #0]
  return(result);
 8007e76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e80:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007e82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	4ba5      	ldr	r3, [pc, #660]	; (8008120 <arm_nn_mat_mult_kernel_q7_q15+0xae0>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	0c12      	lsrs	r2, r2, #16
 8007e94:	4313      	orrs	r3, r2
 8007e96:	461a      	mov	r2, r3
 8007e98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	041b      	lsls	r3, r3, #16
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	601a      	str	r2, [r3, #0]
        return source;
 8007ebc:	f107 0310 	add.w	r3, r7, #16
 8007ec0:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007ec2:	f107 030c 	add.w	r3, r7, #12
 8007ec6:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8007ec8:	f107 0318 	add.w	r3, r7, #24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007ed4:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007ed8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007edc:	6018      	str	r0, [r3, #0]
 8007ede:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007ee2:	6019      	str	r1, [r3, #0]
 8007ee4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007ee8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007eea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8007efa:	6809      	ldr	r1, [r1, #0]
 8007efc:	fb23 1202 	smlad	r2, r3, r2, r1
 8007f00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f04:	601a      	str	r2, [r3, #0]
  return(result);
 8007f06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007f10:	f107 0318 	add.w	r3, r7, #24
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8007f1c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007f20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f24:	6018      	str	r0, [r3, #0]
 8007f26:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f2a:	6019      	str	r1, [r3, #0]
 8007f2c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007f32:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8007f42:	6809      	ldr	r1, [r1, #0]
 8007f44:	fb23 1202 	smlad	r2, r3, r2, r1
 8007f48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007f4c:	601a      	str	r2, [r3, #0]
  return(result);
 8007f4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8007f58:	f107 0220 	add.w	r2, r7, #32
 8007f5c:	6813      	ldr	r3, [r2, #0]
 8007f5e:	1d19      	adds	r1, r3, #4
 8007f60:	6011      	str	r1, [r2, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            inB2 = *__SIMD32(pB2)++;
 8007f68:	f107 021c 	add.w	r2, r7, #28
 8007f6c:	6813      	ldr	r3, [r2, #0]
 8007f6e:	1d19      	adds	r1, r3, #4
 8007f70:	6011      	str	r1, [r2, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            sum = __SMLAD(inA12, inB1, sum);
 8007f78:	f107 0314 	add.w	r3, r7, #20
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007f84:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007f88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007f8c:	6018      	str	r0, [r3, #0]
 8007f8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007f92:	6019      	str	r1, [r3, #0]
 8007f94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007f98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007f9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8007faa:	6809      	ldr	r1, [r1, #0]
 8007fac:	fb23 1202 	smlad	r2, r3, r2, r1
 8007fb0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007fb4:	601a      	str	r2, [r3, #0]
  return(result);
 8007fb6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8007fcc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007fd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007fd4:	6018      	str	r0, [r3, #0]
 8007fd6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007fda:	6019      	str	r1, [r3, #0]
 8007fdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007fe0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007fe2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8007ff2:	6809      	ldr	r1, [r1, #0]
 8007ff4:	fb23 1202 	smlad	r2, r3, r2, r1
 8007ff8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007ffc:	601a      	str	r2, [r3, #0]
  return(result);
 8007ffe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 8008008:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 800800c:	3b01      	subs	r3, #1
 800800e:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8008012:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008016:	2b00      	cmp	r3, #0
 8008018:	f47f aec2 	bne.w	8007da0 <arm_nn_mat_mult_kernel_q7_q15+0x760>
        }
        colCnt = numCol_A & 0x3;
 800801c:	1d3b      	adds	r3, r7, #4
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	f003 0303 	and.w	r3, r3, #3
 8008024:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8008028:	e038      	b.n	800809c <arm_nn_mat_mult_kernel_q7_q15+0xa5c>
        {
            q7_t      inA1 = *pA++;
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f107 020c 	add.w	r2, r7, #12
 8008034:	1c59      	adds	r1, r3, #1
 8008036:	6011      	str	r1, [r2, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
            q15_t     inB1 = *pB++;
 800803e:	f107 0320 	add.w	r3, r7, #32
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	1c99      	adds	r1, r3, #2
 8008046:	f107 0220 	add.w	r2, r7, #32
 800804a:	6011      	str	r1, [r2, #0]
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
            q15_t     inB2 = *pB2++;
 8008052:	f107 031c 	add.w	r3, r7, #28
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	1c99      	adds	r1, r3, #2
 800805a:	f107 021c 	add.w	r2, r7, #28
 800805e:	6011      	str	r1, [r2, #0]
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

            sum += inA1 * inB1;
 8008066:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 800806a:	f9b7 21c4 	ldrsh.w	r2, [r7, #452]	; 0x1c4
 800806e:	fb02 f303 	mul.w	r3, r2, r3
 8008072:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008076:	4413      	add	r3, r2
 8008078:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 800807c:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 8008080:	f9b7 21c2 	ldrsh.w	r2, [r7, #450]	; 0x1c2
 8008084:	fb02 f303 	mul.w	r3, r2, r3
 8008088:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800808c:	4413      	add	r3, r2
 800808e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 8008092:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008096:	3b01      	subs	r3, #1
 8008098:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800809c:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1c2      	bne.n	800802a <arm_nn_mat_mult_kernel_q7_q15+0x9ea>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80080a4:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80080a8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80080ac:	fa42 f303 	asr.w	r3, r2, r3
 80080b0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80080b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80080b8:	f303 0307 	ssat	r3, #8, r3
 80080bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80080c0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80080c4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 80080ce:	b24a      	sxtb	r2, r1
 80080d0:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80080d2:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80080d6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80080da:	fa42 f303 	asr.w	r3, r2, r3
 80080de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80080e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80080e6:	f303 0307 	ssat	r3, #8, r3
 80080ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80080ee:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 80080f2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80080fc:	b24a      	sxtb	r2, r1
 80080fe:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 8008100:	1dbb      	adds	r3, r7, #6
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8008108:	4413      	add	r3, r2
 800810a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 800810e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 8008112:	4618      	mov	r0, r3
 8008114:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008118:	46bd      	mov	sp, r7
 800811a:	bc90      	pop	{r4, r7}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	ffff0000 	.word	0xffff0000

08008124 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 8008124:	b490      	push	{r4, r7}
 8008126:	b0d2      	sub	sp, #328	; 0x148
 8008128:	af00      	add	r7, sp, #0
 800812a:	f107 040c 	add.w	r4, r7, #12
 800812e:	6020      	str	r0, [r4, #0]
 8008130:	f107 0008 	add.w	r0, r7, #8
 8008134:	6001      	str	r1, [r0, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	1dbb      	adds	r3, r7, #6
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	1d3b      	adds	r3, r7, #4
 800813e:	460a      	mov	r2, r1
 8008140:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8008142:	1dbb      	adds	r3, r7, #6
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800814a:	4413      	add	r3, r2
 800814c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 8008150:	2300      	movs	r3, #0
 8008152:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008156:	e2df      	b.n	8008718 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8008158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800815c:	f107 0208 	add.w	r2, r7, #8
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8008164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	441a      	add	r2, r3
 8008172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008176:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	f107 020c 	add.w	r2, r7, #12
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	4413      	add	r3, r2
 8008184:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8008188:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800818c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008190:	4413      	add	r3, r2
 8008192:	f993 3000 	ldrsb.w	r3, [r3]
 8008196:	461a      	mov	r2, r3
 8008198:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 800819c:	409a      	lsls	r2, r3
 800819e:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80081a2:	3b01      	subs	r3, #1
 80081a4:	2101      	movs	r1, #1
 80081a6:	fa01 f303 	lsl.w	r3, r1, r3
 80081aa:	4413      	add	r3, r2
 80081ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 80081b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80081b4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80081b8:	4413      	add	r3, r2
 80081ba:	f993 3000 	ldrsb.w	r3, [r3]
 80081be:	461a      	mov	r2, r3
 80081c0:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80081c4:	409a      	lsls	r2, r3
 80081c6:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80081ca:	3b01      	subs	r3, #1
 80081cc:	2101      	movs	r1, #1
 80081ce:	fa01 f303 	lsl.w	r3, r1, r3
 80081d2:	4413      	add	r3, r2
 80081d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80081d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80081dc:	3301      	adds	r3, #1
 80081de:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80081e2:	4413      	add	r3, r2
 80081e4:	f993 3000 	ldrsb.w	r3, [r3]
 80081e8:	461a      	mov	r2, r3
 80081ea:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80081ee:	409a      	lsls	r2, r3
 80081f0:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80081f4:	3b01      	subs	r3, #1
 80081f6:	2101      	movs	r1, #1
 80081f8:	fa01 f303 	lsl.w	r3, r1, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8008202:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008206:	3301      	adds	r3, #1
 8008208:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800820c:	4413      	add	r3, r2
 800820e:	f993 3000 	ldrsb.w	r3, [r3]
 8008212:	461a      	mov	r2, r3
 8008214:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008218:	409a      	lsls	r2, r3
 800821a:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800821e:	3b01      	subs	r3, #1
 8008220:	2101      	movs	r1, #1
 8008222:	fa01 f303 	lsl.w	r3, r1, r3
 8008226:	4413      	add	r3, r2
 8008228:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 800822c:	1d3b      	adds	r3, r7, #4
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	089b      	lsrs	r3, r3, #2
 8008232:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 8008236:	e19e      	b.n	8008576 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8008238:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800823c:	6813      	ldr	r3, [r2, #0]
 800823e:	1d19      	adds	r1, r3, #4
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8008248:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800824c:	6813      	ldr	r3, [r2, #0]
 800824e:	1d19      	adds	r1, r3, #4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	f107 020c 	add.w	r2, r7, #12
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008268:	653b      	str	r3, [r7, #80]	; 0x50
 800826a:	f107 0320 	add.w	r3, r7, #32
 800826e:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 8008270:	f107 0214 	add.w	r2, r7, #20
 8008274:	6813      	ldr	r3, [r2, #0]
 8008276:	1d19      	adds	r1, r3, #4
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8008282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008292:	2208      	movs	r2, #8
 8008294:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8008296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800829a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	f002 021f 	and.w	r2, r2, #31
 80082a4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80082a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d103      	bne.n	80082b8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 80082b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	e007      	b.n	80082c8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80082b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80082bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082c0:	6812      	ldr	r2, [r2, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	fa62 f303 	ror.w	r3, r2, r3
 80082c8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80082cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80082ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	fa2f f283 	sxtb16	r2, r3
 80082d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082dc:	601a      	str	r2, [r3, #0]
  return(result);
 80082de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e8:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80082ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80082f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	fa2f f283 	sxtb16	r2, r3
 8008300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008304:	601a      	str	r2, [r3, #0]
  return(result);
 8008306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008310:	601a      	str	r2, [r3, #0]
        return source;
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 8008318:	f107 030c 	add.w	r3, r7, #12
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	f107 0310 	add.w	r3, r7, #16
 8008322:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	f107 031c 	add.w	r3, r7, #28
 800832c:	677b      	str	r3, [r7, #116]	; 0x74
 800832e:	f107 0318 	add.w	r3, r7, #24
 8008332:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 8008334:	f107 0210 	add.w	r2, r7, #16
 8008338:	6813      	ldr	r3, [r2, #0]
 800833a:	1d19      	adds	r1, r3, #4
 800833c:	6011      	str	r1, [r2, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 8008342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008344:	66bb      	str	r3, [r7, #104]	; 0x68
 8008346:	2308      	movs	r3, #8
 8008348:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 800834a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800834c:	f003 031f 	and.w	r3, r3, #31
 8008350:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 8008352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 8008358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800835a:	e003      	b.n	8008364 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 800835c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800835e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008360:	fa62 f303 	ror.w	r3, r2, r3
 8008364:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008368:	fa2f f383 	sxtb16	r3, r3
 800836c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800836e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008370:	461a      	mov	r2, r3
 8008372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008374:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008378:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800837a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800837c:	fa2f f383 	sxtb16	r3, r3
 8008380:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008384:	461a      	mov	r2, r3
 8008386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008388:	601a      	str	r2, [r3, #0]
        return source;
 800838a:	f107 0310 	add.w	r3, r7, #16
 800838e:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 8008390:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 8008394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4619      	mov	r1, r3
 800839c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80083a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083a4:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80083a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80083ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083b8:	fb23 1302 	smlad	r3, r3, r2, r1
 80083bc:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 80083be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 80083c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80083d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083d4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80083d8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80083dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80083e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80083e8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80083ec:	fb23 1302 	smlad	r3, r3, r2, r1
 80083f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 80083f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 80083fc:	f107 031c 	add.w	r3, r7, #28
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4619      	mov	r1, r3
 8008404:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008408:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800840c:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8008410:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800841c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008420:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008424:	fb23 1302 	smlad	r3, r3, r2, r1
 8008428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 800842c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008430:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 8008434:	f107 031c 	add.w	r3, r7, #28
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008444:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8008448:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800844c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008454:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008458:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800845c:	fb23 1302 	smlad	r3, r3, r2, r1
 8008460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8008464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008468:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 800846c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008470:	6813      	ldr	r3, [r2, #0]
 8008472:	1d19      	adds	r1, r3, #4
 8008474:	6011      	str	r1, [r2, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            inB2 = *__SIMD32(pB2)++;
 800847c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008480:	6813      	ldr	r3, [r2, #0]
 8008482:	1d19      	adds	r1, r3, #4
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            sum = __SMLAD(inA12, inB1, sum);
 800848c:	f107 0320 	add.w	r3, r7, #32
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4619      	mov	r1, r3
 8008494:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008498:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800849c:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80084a0:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80084a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084b0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80084b4:	fb23 1302 	smlad	r3, r3, r2, r1
 80084b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80084bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 80084c4:	f107 0320 	add.w	r3, r7, #32
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4619      	mov	r1, r3
 80084cc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80084d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80084d4:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80084d8:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80084dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084e4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084e8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80084ec:	fb23 1302 	smlad	r3, r3, r2, r1
 80084f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80084f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 80084fc:	f107 0318 	add.w	r3, r7, #24
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4619      	mov	r1, r3
 8008504:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008508:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800850c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8008510:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008520:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008524:	fb23 1302 	smlad	r3, r3, r2, r1
 8008528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 800852c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008530:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 8008534:	f107 0318 	add.w	r3, r7, #24
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4619      	mov	r1, r3
 800853c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008544:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8008548:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800854c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008554:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008558:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800855c:	fb23 1302 	smlad	r3, r3, r2, r1
 8008560:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8008564:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 800856c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008570:	3b01      	subs	r3, #1
 8008572:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8008576:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800857a:	2b00      	cmp	r3, #0
 800857c:	f47f ae5c 	bne.w	8008238 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8008580:	1d3b      	adds	r3, r7, #4
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 800858c:	e056      	b.n	800863c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 800858e:	f107 030c 	add.w	r3, r7, #12
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f107 020c 	add.w	r2, r7, #12
 8008598:	1c59      	adds	r1, r3, #1
 800859a:	6011      	str	r1, [r2, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            q15_t     inB1 = *pB++;
 80085a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1c99      	adds	r1, r3, #2
 80085aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80085ae:	6011      	str	r1, [r2, #0]
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
            q7_t      inA2 = *pA2++;
 80085b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            q15_t     inB2 = *pB2++;
 80085c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	1c99      	adds	r1, r3, #2
 80085ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085d2:	6011      	str	r1, [r2, #0]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

            sum += inA1 * inB1;
 80085da:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80085de:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
 80085e6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80085ea:	4413      	add	r3, r2
 80085ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 80085f0:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80085f4:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 80085f8:	fb02 f303 	mul.w	r3, r2, r3
 80085fc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008600:	4413      	add	r3, r2
 8008602:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 8008606:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 800860a:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 800860e:	fb02 f303 	mul.w	r3, r2, r3
 8008612:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008616:	4413      	add	r3, r2
 8008618:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 800861c:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 8008620:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800862c:	4413      	add	r3, r2
 800862e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 8008632:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008636:	3b01      	subs	r3, #1
 8008638:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 800863c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1a4      	bne.n	800858e <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8008644:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008648:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800864c:	fa42 f303 	asr.w	r3, r2, r3
 8008650:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008654:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008658:	f303 0307 	ssat	r3, #8, r3
 800865c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008660:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008664:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800866e:	b24a      	sxtb	r2, r1
 8008670:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8008672:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008676:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800867a:	fa42 f303 	asr.w	r3, r2, r3
 800867e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008682:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008686:	f303 0307 	ssat	r3, #8, r3
 800868a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800868e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008692:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800869c:	b24a      	sxtb	r2, r1
 800869e:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80086a0:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80086a4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80086a8:	fa42 f303 	asr.w	r3, r2, r3
 80086ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b4:	f303 0307 	ssat	r3, #8, r3
 80086b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80086bc:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80086c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80086ca:	b24a      	sxtb	r2, r1
 80086cc:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 80086ce:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80086d2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80086d6:	fa42 f303 	asr.w	r3, r2, r3
 80086da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80086de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086e2:	f303 0307 	ssat	r3, #8, r3
 80086e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80086ea:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80086ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80086f8:	b24a      	sxtb	r2, r1
 80086fa:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	881a      	ldrh	r2, [r3, #0]
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	f107 010c 	add.w	r1, r7, #12
 8008708:	6809      	ldr	r1, [r1, #0]
 800870a:	440a      	add	r2, r1
 800870c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 800870e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008712:	3302      	adds	r3, #2
 8008714:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008718:	1dbb      	adds	r3, r7, #6
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008720:	429a      	cmp	r2, r3
 8008722:	f6ff ad19 	blt.w	8008158 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 8008726:	1dbb      	adds	r3, r7, #6
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800872e:	4413      	add	r3, r2
 8008730:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 8008734:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 8008738:	4618      	mov	r0, r3
 800873a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800873e:	46bd      	mov	sp, r7
 8008740:	bc90      	pop	{r4, r7}
 8008742:	4770      	bx	lr

08008744 <arm_fully_connected_q7>:
                       const q7_t * pM,
                       const uint16_t dim_vec,
                       const uint16_t num_of_rows,
                       const uint16_t bias_shift,
                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
{
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b0d7      	sub	sp, #348	; 0x15c
 8008748:	af00      	add	r7, sp, #0
 800874a:	f107 040c 	add.w	r4, r7, #12
 800874e:	6020      	str	r0, [r4, #0]
 8008750:	f107 0008 	add.w	r0, r7, #8
 8008754:	6001      	str	r1, [r0, #0]
 8008756:	4619      	mov	r1, r3
 8008758:	1dbb      	adds	r3, r7, #6
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	1d3b      	adds	r3, r7, #4
 800875e:	460a      	mov	r2, r1
 8008760:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    const q7_t *pB2;
    q7_t     *pO = pOut;
 800876c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008770:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    const q7_t *pBias = bias;
 8008774:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008778:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
 800877c:	1d3b      	adds	r3, r7, #4
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 8008786:	1dbb      	adds	r3, r7, #6
 8008788:	881a      	ldrh	r2, [r3, #0]
 800878a:	f107 030c 	add.w	r3, r7, #12
 800878e:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	f000 fb82 	bl	8008e9c <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 8008798:	e1e2      	b.n	8008b60 <arm_fully_connected_q7+0x41c>
    {
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800879a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80087a4:	f993 3000 	ldrsb.w	r3, [r3]
 80087a8:	461a      	mov	r2, r3
 80087aa:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80087ae:	409a      	lsls	r2, r3
 80087b0:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80087b4:	3b01      	subs	r3, #1
 80087b6:	2101      	movs	r1, #1
 80087b8:	fa01 f303 	lsl.w	r3, r1, r3
 80087bc:	4413      	add	r3, r2
 80087be:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80087c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80087cc:	f993 3000 	ldrsb.w	r3, [r3]
 80087d0:	461a      	mov	r2, r3
 80087d2:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80087d6:	409a      	lsls	r2, r3
 80087d8:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80087dc:	3b01      	subs	r3, #1
 80087de:	2101      	movs	r1, #1
 80087e0:	fa01 f303 	lsl.w	r3, r1, r3
 80087e4:	4413      	add	r3, r2
 80087e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        uint16_t  colCnt = dim_vec >> 2;
 80087ea:	1dbb      	adds	r3, r7, #6
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	089b      	lsrs	r3, r3, #2
 80087f0:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

        pA = vec_buffer;
 80087f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80087f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80087fc:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 80087fe:	1dbb      	adds	r3, r7, #6
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008806:	4413      	add	r3, r2
 8008808:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        while (colCnt)
 800880c:	e126      	b.n	8008a5c <arm_fully_connected_q7+0x318>
 800880e:	f107 0320 	add.w	r3, r7, #32
 8008812:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800881c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        q31_t     inA = *__SIMD32(source)++;
 8008828:	f107 0220 	add.w	r2, r7, #32
 800882c:	6813      	ldr	r3, [r2, #0]
 800882e:	1d19      	adds	r1, r3, #4
 8008830:	6011      	str	r1, [r2, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *out2 = __SXTB16(__ROR(inA, 8));
 8008838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800883c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008840:	2308      	movs	r3, #8
 8008842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  op2 %= 32U;
 8008846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (op2 == 0U)
 8008852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d102      	bne.n	8008860 <arm_fully_connected_q7+0x11c>
    return op1;
 800885a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800885e:	e005      	b.n	800886c <arm_fully_connected_q7+0x128>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008860:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008868:	fa62 f303 	ror.w	r3, r2, r3
 800886c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008874:	fa2f f383 	sxtb16	r3, r3
 8008878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 800887c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008880:	461a      	mov	r2, r3
 8008882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008886:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008888:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800888c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008894:	fa2f f383 	sxtb16	r3, r3
 8008898:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 800889a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800889c:	461a      	mov	r2, r3
 800889e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088a2:	601a      	str	r2, [r3, #0]
        return source;
 80088a4:	f107 0320 	add.w	r3, r7, #32
 80088a8:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV, inM11, inM12, inM21, inM22;
            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 80088aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80088ae:	f107 031c 	add.w	r3, r7, #28
 80088b2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        q31_t     inA = *__SIMD32(source)++;
 80088c8:	f107 021c 	add.w	r2, r7, #28
 80088cc:	6813      	ldr	r3, [r2, #0]
 80088ce:	1d19      	adds	r1, r3, #4
 80088d0:	6011      	str	r1, [r2, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        *out2 = __SXTB16(__ROR(inA, 8));
 80088d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088e0:	2308      	movs	r3, #8
 80088e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  op2 %= 32U;
 80088e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088ea:	f003 031f 	and.w	r3, r3, #31
 80088ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (op2 == 0U)
 80088f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <arm_fully_connected_q7+0x1bc>
    return op1;
 80088fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088fe:	e005      	b.n	800890c <arm_fully_connected_q7+0x1c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008900:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008904:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008908:	fa62 f303 	ror.w	r3, r2, r3
 800890c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008914:	fa2f f383 	sxtb16	r3, r3
 8008918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 800891c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008920:	461a      	mov	r2, r3
 8008922:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008926:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800892c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008934:	fa2f f383 	sxtb16	r3, r3
 8008938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 800893c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008940:	461a      	mov	r2, r3
 8008942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008946:	601a      	str	r2, [r3, #0]
        return source;
 8008948:	f107 031c 	add.w	r3, r7, #28
 800894c:	681b      	ldr	r3, [r3, #0]
            pB2 = (q7_t *) read_and_pad_reordered((void *)pB2, &inM21, &inM22);
 800894e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

            inV = *__SIMD32(pA)++;
 8008952:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008956:	6813      	ldr	r3, [r2, #0]
 8008958:	1d19      	adds	r1, r3, #4
 800895a:	6011      	str	r1, [r2, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM11, sum);
 8008962:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008972:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008976:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800897a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800897e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008982:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008986:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800898a:	fb23 1302 	smlad	r3, r3, r2, r1
 800898e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8008992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008996:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM21, sum2);
 800899a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800899e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4619      	mov	r1, r3
 80089a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80089aa:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80089ae:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80089b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80089b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80089be:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80089c2:	fb23 1302 	smlad	r3, r3, r2, r1
 80089c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 80089ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089ce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            inV = *__SIMD32(pA)++;
 80089d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80089d6:	6813      	ldr	r3, [r2, #0]
 80089d8:	1d19      	adds	r1, r3, #4
 80089da:	6011      	str	r1, [r2, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM12, sum);
 80089e2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80089e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4619      	mov	r1, r3
 80089ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80089f2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80089f6:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80089fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80089fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008a06:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008a0a:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8008a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a16:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM22, sum2);
 8008a1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008a2a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8008a2e:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8008a32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a3a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008a3e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008a42:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8008a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            colCnt--;
 8008a52:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008a56:	3b01      	subs	r3, #1
 8008a58:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008a5c:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f47f aed4 	bne.w	800880e <arm_fully_connected_q7+0xca>
        }
        colCnt = dim_vec & 0x3;
 8008a66:	1dbb      	adds	r3, r7, #6
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008a72:	e037      	b.n	8008ae4 <arm_fully_connected_q7+0x3a0>
        {
            q7_t      inV = *pA++;
 8008a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	1c99      	adds	r1, r3, #2
 8008a7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            q15_t     inM = *pB++;
 8008a8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008a94:	f993 3000 	ldrsb.w	r3, [r3]
 8008a98:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
            q15_t     inM2 = *pB2++;
 8008a9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8008aaa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            sum += inV * inM;
 8008aae:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008ab2:	f9b7 210c 	ldrsh.w	r2, [r7, #268]	; 0x10c
 8008ab6:	fb02 f303 	mul.w	r3, r2, r3
 8008aba:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008abe:	4413      	add	r3, r2
 8008ac0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 += inV * inM2;
 8008ac4:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008ac8:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 8008acc:	fb02 f303 	mul.w	r3, r2, r3
 8008ad0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            colCnt--;
 8008ada:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008ae4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1c3      	bne.n	8008a74 <arm_fully_connected_q7+0x330>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008aec:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008af0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008af4:	fa42 f303 	asr.w	r3, r2, r3
 8008af8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b00:	f303 0307 	ssat	r3, #8, r3
 8008b04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b08:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008b16:	b24a      	sxtb	r2, r1
 8008b18:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8008b1a:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008b1e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008b22:	fa42 f303 	asr.w	r3, r2, r3
 8008b26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2e:	f303 0307 	ssat	r3, #8, r3
 8008b32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008b36:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008b44:	b24a      	sxtb	r2, r1
 8008b46:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8008b48:	1dbb      	adds	r3, r7, #6
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008b50:	4413      	add	r3, r2
 8008b52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        rowCnt--;
 8008b56:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008b60:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f47f ae18 	bne.w	800879a <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8008b6a:	1d3b      	adds	r3, r7, #4
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    while (rowCnt)
 8008b76:	e114      	b.n	8008da2 <arm_fully_connected_q7+0x65e>
    {
        uint16_t  colCnt = dim_vec >> 2;
 8008b78:	1dbb      	adds	r3, r7, #6
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	089b      	lsrs	r3, r3, #2
 8008b7e:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8008b82:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8008b90:	461a      	mov	r2, r3
 8008b92:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008b96:	409a      	lsls	r2, r3
 8008b98:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        pA = vec_buffer;
 8008baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008bb2:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8008bb4:	e0a5      	b.n	8008d02 <arm_fully_connected_q7+0x5be>
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bc4:	f107 0218 	add.w	r2, r7, #24
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008bce:	f107 0214 	add.w	r2, r7, #20
 8008bd2:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8008bd4:	f107 0210 	add.w	r2, r7, #16
 8008bd8:	6813      	ldr	r3, [r2, #0]
 8008bda:	1d19      	adds	r1, r3, #4
 8008bdc:	6011      	str	r1, [r2, #0]
 8008bde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8008be6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008bf6:	2208      	movs	r2, #8
 8008bf8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8008bfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008bfe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c02:	6812      	ldr	r2, [r2, #0]
 8008c04:	f002 021f 	and.w	r2, r2, #31
 8008c08:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8008c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d103      	bne.n	8008c1c <arm_fully_connected_q7+0x4d8>
    return op1;
 8008c14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	e007      	b.n	8008c2c <arm_fully_connected_q7+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c1c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	fa62 f303 	ror.w	r3, r2, r3
 8008c2c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008c30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	fa2f f283 	sxtb16	r2, r3
 8008c3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c40:	601a      	str	r2, [r3, #0]
  return(result);
 8008c42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	fa2f f283 	sxtb16	r2, r3
 8008c68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c6c:	601a      	str	r2, [r3, #0]
  return(result);
 8008c6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	601a      	str	r2, [r3, #0]
        return source;
 8008c7e:	f107 0310 	add.w	r3, r7, #16
 8008c82:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8008c84:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

            inV1 = *__SIMD32(pA)++;
 8008c88:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008c8c:	6813      	ldr	r3, [r2, #0]
 8008c8e:	1d19      	adds	r1, r3, #4
 8008c90:	6011      	str	r1, [r2, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            sum = __SMLAD(inV1, inM11, sum);
 8008c98:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008c9c:	f107 0318 	add.w	r3, r7, #24
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ca8:	66ba      	str	r2, [r7, #104]	; 0x68
 8008caa:	6679      	str	r1, [r7, #100]	; 0x64
 8008cac:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008cb4:	fb23 1302 	smlad	r3, r3, r2, r1
 8008cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8008cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            inV2 = *__SIMD32(pA)++;
 8008cc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008cc4:	6813      	ldr	r3, [r2, #0]
 8008cc6:	1d19      	adds	r1, r3, #4
 8008cc8:	6011      	str	r1, [r2, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            sum = __SMLAD(inV2, inM12, sum);
 8008cd0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008cd4:	f107 0314 	add.w	r3, r7, #20
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ce0:	67ba      	str	r2, [r7, #120]	; 0x78
 8008ce2:	6779      	str	r1, [r7, #116]	; 0x74
 8008ce4:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ce8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008cea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008cec:	fb23 1302 	smlad	r3, r3, r2, r1
 8008cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8008cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            colCnt--;
 8008cf8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008d02:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f47f af55 	bne.w	8008bb6 <arm_fully_connected_q7+0x472>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8008d0c:	1dbb      	adds	r3, r7, #6
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008d18:	e023      	b.n	8008d62 <arm_fully_connected_q7+0x61e>
        {
            q7_t      inV = *pA++;
 8008d1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	1c99      	adds	r1, r3, #2
 8008d22:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008d26:	6011      	str	r1, [r2, #0]
 8008d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d2c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            q15_t     inM = *pB++;
 8008d30:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008d3a:	f993 3000 	ldrsb.w	r3, [r3]
 8008d3e:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
            sum += inV * inM;
 8008d42:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8008d46:	f9b7 2128 	ldrsh.w	r2, [r7, #296]	; 0x128
 8008d4a:	fb02 f303 	mul.w	r3, r2, r3
 8008d4e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008d52:	4413      	add	r3, r2
 8008d54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            colCnt--;
 8008d58:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008d62:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1d7      	bne.n	8008d1a <arm_fully_connected_q7+0x5d6>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008d6a:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008d6e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008d72:	fa42 f303 	asr.w	r3, r2, r3
 8008d76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008d7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d7e:	f303 0307 	ssat	r3, #8, r3
 8008d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008d86:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8008d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008d94:	b24a      	sxtb	r2, r1
 8008d96:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8008d98:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008da2:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f47f aee6 	bne.w	8008b78 <arm_fully_connected_q7+0x434>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8008dac:	2300      	movs	r3, #0

}
 8008dae:	4618      	mov	r0, r3
 8008db0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd90      	pop	{r4, r7, pc}

08008db8 <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b093      	sub	sp, #76	; 0x4c
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	089b      	lsrs	r3, r3, #2
 8008dcc:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008dce:	e044      	b.n	8008e5a <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008dd0:	f107 0214 	add.w	r2, r7, #20
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	1d19      	adds	r1, r3, #4
 8008dd8:	6011      	str	r1, [r2, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de0:	61fb      	str	r3, [r7, #28]
 8008de2:	2308      	movs	r3, #8
 8008de4:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	f003 031f 	and.w	r3, r3, #31
 8008dec:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <arm_q7_to_q15_no_shift+0x40>
    return op1;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	e003      	b.n	8008e00 <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008df8:	69fa      	ldr	r2, [r7, #28]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	fa62 f303 	ror.w	r3, r2, r3
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	fa2f f383 	sxtb16	r3, r3
 8008e08:	623b      	str	r3, [r7, #32]
  return(result);
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	fa2f f383 	sxtb16	r3, r3
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8008e1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e20:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <arm_q7_to_q15_no_shift+0xe0>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e26:	0c12      	lsrs	r2, r2, #16
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e32:	041b      	lsls	r3, r3, #16
 8008e34:	4313      	orrs	r3, r2
 8008e36:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 8008e38:	f107 0208 	add.w	r2, r7, #8
 8008e3c:	6813      	ldr	r3, [r2, #0]
 8008e3e:	1d19      	adds	r1, r3, #4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e44:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 8008e46:	f107 0208 	add.w	r2, r7, #8
 8008e4a:	6813      	ldr	r3, [r2, #0]
 8008e4c:	1d19      	adds	r1, r3, #4
 8008e4e:	6011      	str	r1, [r2, #0]
 8008e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e52:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e56:	3b01      	subs	r3, #1
 8008e58:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1b7      	bne.n	8008dd0 <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008e68:	e00c      	b.n	8008e84 <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	617a      	str	r2, [r7, #20]
 8008e70:	f993 1000 	ldrsb.w	r1, [r3]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	1c9a      	adds	r2, r3, #2
 8008e78:	60ba      	str	r2, [r7, #8]
 8008e7a:	b20a      	sxth	r2, r1
 8008e7c:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e80:	3b01      	subs	r3, #1
 8008e82:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1ef      	bne.n	8008e6a <arm_q7_to_q15_no_shift+0xb2>
    }

}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	374c      	adds	r7, #76	; 0x4c
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	ffff0000 	.word	0xffff0000

08008e9c <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b091      	sub	sp, #68	; 0x44
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	089b      	lsrs	r3, r3, #2
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008eb2:	e037      	b.n	8008f24 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008eb4:	f107 0214 	add.w	r2, r7, #20
 8008eb8:	6813      	ldr	r3, [r2, #0]
 8008eba:	1d19      	adds	r1, r3, #4
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	e003      	b.n	8008ee4 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008edc:	69fa      	ldr	r2, [r7, #28]
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	fa62 f303 	ror.w	r3, r2, r3
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	fa2f f383 	sxtb16	r3, r3
 8008eec:	623b      	str	r3, [r7, #32]
  return(result);
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef8:	fa2f f383 	sxtb16	r3, r3
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8008f02:	f107 0208 	add.w	r2, r7, #8
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	1d19      	adds	r1, r3, #4
 8008f0a:	6011      	str	r1, [r2, #0]
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0e:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8008f10:	f107 0208 	add.w	r2, r7, #8
 8008f14:	6813      	ldr	r3, [r2, #0]
 8008f16:	1d19      	adds	r1, r3, #4
 8008f18:	6011      	str	r1, [r2, #0]
 8008f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f1c:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f20:	3b01      	subs	r3, #1
 8008f22:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1c4      	bne.n	8008eb4 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f003 0303 	and.w	r3, r3, #3
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008f32:	e00c      	b.n	8008f4e <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	617a      	str	r2, [r7, #20]
 8008f3a:	f993 1000 	ldrsb.w	r1, [r3]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	1c9a      	adds	r2, r3, #2
 8008f42:	60ba      	str	r2, [r7, #8]
 8008f44:	b20a      	sxth	r2, r1
 8008f46:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1ef      	bne.n	8008f34 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	3744      	adds	r7, #68	; 0x44
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f66:	2003      	movs	r0, #3
 8008f68:	f000 f8f9 	bl	800915e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f6c:	200f      	movs	r0, #15
 8008f6e:	f7fa fdd9 	bl	8003b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008f72:	f7fa fad9 	bl	8003528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f80:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <HAL_IncTick+0x20>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <HAL_IncTick+0x24>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <HAL_IncTick+0x24>)
 8008f8e:	6013      	str	r3, [r2, #0]
}
 8008f90:	bf00      	nop
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	20000010 	.word	0x20000010
 8008fa0:	2000048c 	.word	0x2000048c

08008fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8008fa8:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <HAL_GetTick+0x14>)
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	2000048c 	.word	0x2000048c

08008fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008fc4:	f7ff ffee 	bl	8008fa4 <HAL_GetTick>
 8008fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	d005      	beq.n	8008fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <HAL_Delay+0x44>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008fe2:	bf00      	nop
 8008fe4:	f7ff ffde 	bl	8008fa4 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d8f7      	bhi.n	8008fe4 <HAL_Delay+0x28>
  {
  }
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000010 	.word	0x20000010

08009004 <__NVIC_SetPriorityGrouping>:
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009014:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <__NVIC_SetPriorityGrouping+0x40>)
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009020:	4013      	ands	r3, r2
 8009022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <__NVIC_SetPriorityGrouping+0x44>)
 800902e:	4313      	orrs	r3, r2
 8009030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <__NVIC_SetPriorityGrouping+0x40>)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	60d3      	str	r3, [r2, #12]
}
 8009038:	bf00      	nop
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	e000ed00 	.word	0xe000ed00
 8009048:	05fa0000 	.word	0x05fa0000

0800904c <__NVIC_GetPriorityGrouping>:
{
 800904c:	b480      	push	{r7}
 800904e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009050:	4b04      	ldr	r3, [pc, #16]	; (8009064 <__NVIC_GetPriorityGrouping+0x18>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	0a1b      	lsrs	r3, r3, #8
 8009056:	f003 0307 	and.w	r3, r3, #7
}
 800905a:	4618      	mov	r0, r3
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	e000ed00 	.word	0xe000ed00

08009068 <__NVIC_EnableIRQ>:
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	db0b      	blt.n	8009092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	f003 021f 	and.w	r2, r3, #31
 8009080:	4907      	ldr	r1, [pc, #28]	; (80090a0 <__NVIC_EnableIRQ+0x38>)
 8009082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009086:	095b      	lsrs	r3, r3, #5
 8009088:	2001      	movs	r0, #1
 800908a:	fa00 f202 	lsl.w	r2, r0, r2
 800908e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009092:	bf00      	nop
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	e000e100 	.word	0xe000e100

080090a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	db0a      	blt.n	80090ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	490c      	ldr	r1, [pc, #48]	; (80090f0 <__NVIC_SetPriority+0x4c>)
 80090be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c2:	0112      	lsls	r2, r2, #4
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	440b      	add	r3, r1
 80090c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80090cc:	e00a      	b.n	80090e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	4908      	ldr	r1, [pc, #32]	; (80090f4 <__NVIC_SetPriority+0x50>)
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	3b04      	subs	r3, #4
 80090dc:	0112      	lsls	r2, r2, #4
 80090de:	b2d2      	uxtb	r2, r2
 80090e0:	440b      	add	r3, r1
 80090e2:	761a      	strb	r2, [r3, #24]
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	e000e100 	.word	0xe000e100
 80090f4:	e000ed00 	.word	0xe000ed00

080090f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b089      	sub	sp, #36	; 0x24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f1c3 0307 	rsb	r3, r3, #7
 8009112:	2b04      	cmp	r3, #4
 8009114:	bf28      	it	cs
 8009116:	2304      	movcs	r3, #4
 8009118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	3304      	adds	r3, #4
 800911e:	2b06      	cmp	r3, #6
 8009120:	d902      	bls.n	8009128 <NVIC_EncodePriority+0x30>
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	3b03      	subs	r3, #3
 8009126:	e000      	b.n	800912a <NVIC_EncodePriority+0x32>
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800912c:	f04f 32ff 	mov.w	r2, #4294967295
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	fa02 f303 	lsl.w	r3, r2, r3
 8009136:	43da      	mvns	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	401a      	ands	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009140:	f04f 31ff 	mov.w	r1, #4294967295
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	fa01 f303 	lsl.w	r3, r1, r3
 800914a:	43d9      	mvns	r1, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009150:	4313      	orrs	r3, r2
         );
}
 8009152:	4618      	mov	r0, r3
 8009154:	3724      	adds	r7, #36	; 0x24
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff ff4c 	bl	8009004 <__NVIC_SetPriorityGrouping>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009186:	f7ff ff61 	bl	800904c <__NVIC_GetPriorityGrouping>
 800918a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	6978      	ldr	r0, [r7, #20]
 8009192:	f7ff ffb1 	bl	80090f8 <NVIC_EncodePriority>
 8009196:	4602      	mov	r2, r0
 8009198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff ff80 	bl	80090a4 <__NVIC_SetPriority>
}
 80091a4:	bf00      	nop
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff ff54 	bl	8009068 <__NVIC_EnableIRQ>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e0ac      	b.n	8009334 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fab8 	bl	8009754 <DFSDM_GetChannelFromInstance>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4a55      	ldr	r2, [pc, #340]	; (800933c <HAL_DFSDM_ChannelInit+0x174>)
 80091e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e09f      	b.n	8009334 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7fa fa6d 	bl	80036d4 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80091fa:	4b51      	ldr	r3, [pc, #324]	; (8009340 <HAL_DFSDM_ChannelInit+0x178>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3301      	adds	r3, #1
 8009200:	4a4f      	ldr	r2, [pc, #316]	; (8009340 <HAL_DFSDM_ChannelInit+0x178>)
 8009202:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8009204:	4b4e      	ldr	r3, [pc, #312]	; (8009340 <HAL_DFSDM_ChannelInit+0x178>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d125      	bne.n	8009258 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800920c:	4b4d      	ldr	r3, [pc, #308]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a4c      	ldr	r2, [pc, #304]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 8009212:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009216:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009218:	4b4a      	ldr	r3, [pc, #296]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	4948      	ldr	r1, [pc, #288]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 8009222:	4313      	orrs	r3, r2
 8009224:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009226:	4b47      	ldr	r3, [pc, #284]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a46      	ldr	r2, [pc, #280]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 800922c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8009230:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	791b      	ldrb	r3, [r3, #4]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d108      	bne.n	800924c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 800923a:	4b42      	ldr	r3, [pc, #264]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	3b01      	subs	r3, #1
 8009244:	041b      	lsls	r3, r3, #16
 8009246:	493f      	ldr	r1, [pc, #252]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 8009248:	4313      	orrs	r3, r2
 800924a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800924c:	4b3d      	ldr	r3, [pc, #244]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a3c      	ldr	r2, [pc, #240]	; (8009344 <HAL_DFSDM_ChannelInit+0x17c>)
 8009252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009256:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8009266:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6819      	ldr	r1, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8009276:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800927c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 020f 	bic.w	r2, r2, #15
 8009294:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6819      	ldr	r1, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80092a4:	431a      	orrs	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80092bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6899      	ldr	r1, [r3, #8]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092cc:	3b01      	subs	r3, #1
 80092ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f002 0207 	and.w	r2, r2, #7
 80092e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6859      	ldr	r1, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009314:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fa16 	bl	8009754 <DFSDM_GetChannelFromInstance>
 8009328:	4602      	mov	r2, r0
 800932a:	4904      	ldr	r1, [pc, #16]	; (800933c <HAL_DFSDM_ChannelInit+0x174>)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  
  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200003c8 	.word	0x200003c8
 8009340:	200003c4 	.word	0x200003c4
 8009344:	40017400 	.word	0x40017400

08009348 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e0c6      	b.n	80094e8 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a64      	ldr	r2, [pc, #400]	; (80094f0 <HAL_DFSDM_FilterInit+0x1a8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d109      	bne.n	8009378 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8009368:	2b01      	cmp	r3, #1
 800936a:	d003      	beq.n	8009374 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e0b7      	b.n	80094e8 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fa f8ed 	bl	8003570 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80093a4:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	7a1b      	ldrb	r3, [r3, #8]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d108      	bne.n	80093c0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e007      	b.n	80093d0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80093ce:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7a5b      	ldrb	r3, [r3, #9]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d108      	bne.n	80093ea <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	e007      	b.n	80093fa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80093f8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	4b3b      	ldr	r3, [pc, #236]	; (80094f4 <HAL_DFSDM_FilterInit+0x1ac>)
 8009406:	400b      	ands	r3, r1
 8009408:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	2b02      	cmp	r3, #2
 8009410:	d108      	bne.n	8009424 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6819      	ldr	r1, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	695a      	ldr	r2, [r3, #20]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7c1b      	ldrb	r3, [r3, #16]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d108      	bne.n	800943e <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0210 	orr.w	r2, r2, #16
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	e007      	b.n	800944e <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 0210 	bic.w	r2, r2, #16
 800944c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	7c5b      	ldrb	r3, [r3, #17]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d108      	bne.n	8009468 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0220 	orr.w	r2, r2, #32
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	e007      	b.n	8009478 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0220 	bic.w	r2, r2, #32
 8009476:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6959      	ldr	r1, [r3, #20]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4b1d      	ldr	r3, [pc, #116]	; (80094f8 <HAL_DFSDM_FilterInit+0x1b0>)
 8009484:	400b      	ands	r3, r1
 8009486:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6959      	ldr	r1, [r3, #20]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	3b01      	subs	r3, #1
 8009498:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800949a:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80094a2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	699a      	ldr	r2, [r3, #24]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7c1a      	ldrb	r2, [r3, #16]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0201 	orr.w	r2, r2, #1
 80094dc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	40017500 	.word	0x40017500
 80094f4:	ffff80f7 	.word	0xffff80f7
 80094f8:	1c00ff00 	.word	0x1c00ff00

080094fc <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d02c      	beq.n	8009570 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800951c:	2bff      	cmp	r3, #255	; 0xff
 800951e:	d027      	beq.n	8009570 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6819      	ldr	r1, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	4b16      	ldr	r3, [pc, #88]	; (8009584 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 800952c:	400b      	ands	r3, r1
 800952e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d10d      	bne.n	8009552 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009544:	431a      	orrs	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	e00a      	b.n	8009568 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6819      	ldr	r1, [r3, #0]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	021b      	lsls	r3, r3, #8
 800955c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	631a      	str	r2, [r3, #48]	; 0x30
 800956e:	e001      	b.n	8009574 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }  
  else
  {
    status = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	f8fbffff 	.word	0xf8fbffff

08009588 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d102      	bne.n	80095aa <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	75fb      	strb	r3, [r7, #23]
 80095a8:	e066      	b.n	8009678 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095b8:	d002      	beq.n	80095c0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	75fb      	strb	r3, [r7, #23]
 80095be:	e05b      	b.n	8009678 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10e      	bne.n	80095e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d105      	bne.n	80095e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d002      	beq.n	80095e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	75fb      	strb	r3, [r7, #23]
 80095e4:	e048      	b.n	8009678 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d108      	bne.n	8009608 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80095fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009600:	d102      	bne.n	8009608 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	75fb      	strb	r3, [r7, #23]
 8009606:	e037      	b.n	8009678 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800960e:	2b01      	cmp	r3, #1
 8009610:	d004      	beq.n	800961c <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009618:	2b03      	cmp	r3, #3
 800961a:	d12b      	bne.n	8009674 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	4a18      	ldr	r2, [pc, #96]	; (8009684 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8009622:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009628:	4a17      	ldr	r2, [pc, #92]	; (8009688 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800962a:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8009632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009636:	d101      	bne.n	800963c <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8009638:	4a14      	ldr	r2, [pc, #80]	; (800968c <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800963a:	e000      	b.n	800963e <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 800963c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	331c      	adds	r3, #28
 800964e:	4619      	mov	r1, r3
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f000 fa1c 	bl	8009a90 <HAL_DMA_Start_IT>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	22ff      	movs	r2, #255	; 0xff
 8009662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800966a:	e005      	b.n	8009678 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 f8bd 	bl	80097ec <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009672:	e001      	b.n	8009678 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8009678:	7dfb      	ldrb	r3, [r7, #23]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	08009715 	.word	0x08009715
 8009688:	08009731 	.word	0x08009731
 800968c:	080096f9 	.word	0x080096f9

08009690 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d007      	beq.n	80096b6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d002      	beq.n	80096b6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	73fb      	strb	r3, [r7, #15]
 80096b4:	e011      	b.n	80096da <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 fa48 	bl	8009b50 <HAL_DMA_Abort>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d006      	beq.n	80096d4 <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	22ff      	movs	r2, #255	; 0xff
 80096ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	73fb      	strb	r3, [r7, #15]
 80096d2:	e002      	b.n	80096da <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f8df 	bl	8009898 <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7f9 f82a 	bl	8002760 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7f9 f84c 	bl	80027c0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2203      	movs	r2, #3
 8009742:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff ffcd 	bl	80096e4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a1c      	ldr	r2, [pc, #112]	; (80097d0 <DFSDM_GetChannelFromInstance+0x7c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d102      	bne.n	800976a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e02b      	b.n	80097c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a19      	ldr	r2, [pc, #100]	; (80097d4 <DFSDM_GetChannelFromInstance+0x80>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d102      	bne.n	8009778 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8009772:	2301      	movs	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	e024      	b.n	80097c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a17      	ldr	r2, [pc, #92]	; (80097d8 <DFSDM_GetChannelFromInstance+0x84>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d102      	bne.n	8009786 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8009780:	2302      	movs	r3, #2
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	e01d      	b.n	80097c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a14      	ldr	r2, [pc, #80]	; (80097dc <DFSDM_GetChannelFromInstance+0x88>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d102      	bne.n	8009794 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800978e:	2303      	movs	r3, #3
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e016      	b.n	80097c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a12      	ldr	r2, [pc, #72]	; (80097e0 <DFSDM_GetChannelFromInstance+0x8c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d102      	bne.n	80097a2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800979c:	2304      	movs	r3, #4
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e00f      	b.n	80097c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a0f      	ldr	r2, [pc, #60]	; (80097e4 <DFSDM_GetChannelFromInstance+0x90>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d102      	bne.n	80097b0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80097aa:	2305      	movs	r3, #5
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	e008      	b.n	80097c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a0d      	ldr	r2, [pc, #52]	; (80097e8 <DFSDM_GetChannelFromInstance+0x94>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d102      	bne.n	80097be <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80097b8:	2306      	movs	r3, #6
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	e001      	b.n	80097c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80097be:	2307      	movs	r3, #7
 80097c0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80097c2:	68fb      	ldr	r3, [r7, #12]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	40017400 	.word	0x40017400
 80097d4:	40017420 	.word	0x40017420
 80097d8:	40017440 	.word	0x40017440
 80097dc:	40017460 	.word	0x40017460
 80097e0:	40017480 	.word	0x40017480
 80097e4:	400174a0 	.word	0x400174a0
 80097e8:	400174c0 	.word	0x400174c0

080097ec <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d108      	bne.n	800980e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	e033      	b.n	8009876 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 0201 	bic.w	r2, r2, #1
 800981c:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800982c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0201 	orr.w	r2, r2, #1
 800983c:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009844:	2b03      	cmp	r3, #3
 8009846:	d116      	bne.n	8009876 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	2b00      	cmp	r3, #0
 800984e:	d107      	bne.n	8009860 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0202 	orr.w	r2, r2, #2
 800985e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8009866:	2b01      	cmp	r3, #1
 8009868:	d102      	bne.n	8009870 <DFSDM_RegConvStart+0x84>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800986e:	e000      	b.n	8009872 <DFSDM_RegConvStart+0x86>
 8009870:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <DFSDM_RegConvStart+0x98>
 8009880:	2202      	movs	r2, #2
 8009882:	e000      	b.n	8009886 <DFSDM_RegConvStart+0x9a>
 8009884:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0201 	bic.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d107      	bne.n	80098c8 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80098c6:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0201 	orr.w	r2, r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80098de:	2b04      	cmp	r3, #4
 80098e0:	d116      	bne.n	8009910 <DFSDM_RegConvStop+0x78>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d107      	bne.n	80098fa <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0202 	orr.w	r2, r2, #2
 80098f8:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 8009900:	2b01      	cmp	r3, #1
 8009902:	d102      	bne.n	800990a <DFSDM_RegConvStop+0x72>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009908:	e000      	b.n	800990c <DFSDM_RegConvStop+0x74>
 800990a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6493      	str	r3, [r2, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8009916:	2b02      	cmp	r3, #2
 8009918:	d101      	bne.n	800991e <DFSDM_RegConvStop+0x86>
 800991a:	2201      	movs	r2, #1
 800991c:	e000      	b.n	8009920 <DFSDM_RegConvStop+0x88>
 800991e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
	...

08009934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009940:	f7ff fb30 	bl	8008fa4 <HAL_GetTick>
 8009944:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e099      	b.n	8009a84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 0201 	bic.w	r2, r2, #1
 800996e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009970:	e00f      	b.n	8009992 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009972:	f7ff fb17 	bl	8008fa4 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b05      	cmp	r3, #5
 800997e:	d908      	bls.n	8009992 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2220      	movs	r2, #32
 8009984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2203      	movs	r2, #3
 800998a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e078      	b.n	8009a84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e8      	bne.n	8009972 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	4b38      	ldr	r3, [pc, #224]	; (8009a8c <HAL_DMA_Init+0x158>)
 80099ac:	4013      	ands	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80099be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d107      	bne.n	80099fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	4313      	orrs	r3, r2
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f023 0307 	bic.w	r3, r3, #7
 8009a12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d117      	bne.n	8009a56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00e      	beq.n	8009a56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fae7 	bl	800a00c <DMA_CheckFifoParam>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d008      	beq.n	8009a56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2240      	movs	r2, #64	; 0x40
 8009a48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009a52:	2301      	movs	r3, #1
 8009a54:	e016      	b.n	8009a84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa9e 	bl	8009fa0 <DMA_CalcBaseAndBitshift>
 8009a64:	4603      	mov	r3, r0
 8009a66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6c:	223f      	movs	r2, #63	; 0x3f
 8009a6e:	409a      	lsls	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	e010803f 	.word	0xe010803f

08009a90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_DMA_Start_IT+0x26>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e048      	b.n	8009b48 <HAL_DMA_Start_IT+0xb8>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d137      	bne.n	8009b3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2202      	movs	r2, #2
 8009ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	68b9      	ldr	r1, [r7, #8]
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fa30 	bl	8009f44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ae8:	223f      	movs	r2, #63	; 0x3f
 8009aea:	409a      	lsls	r2, r3
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f042 0216 	orr.w	r2, r2, #22
 8009afe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	695a      	ldr	r2, [r3, #20]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b0e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0208 	orr.w	r2, r2, #8
 8009b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f042 0201 	orr.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e005      	b.n	8009b46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009b42:	2302      	movs	r3, #2
 8009b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009b5e:	f7ff fa21 	bl	8008fa4 <HAL_GetTick>
 8009b62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d008      	beq.n	8009b82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2280      	movs	r2, #128	; 0x80
 8009b74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e052      	b.n	8009c28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0216 	bic.w	r2, r2, #22
 8009b90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	695a      	ldr	r2, [r3, #20]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ba0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d103      	bne.n	8009bb2 <HAL_DMA_Abort+0x62>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d007      	beq.n	8009bc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0208 	bic.w	r2, r2, #8
 8009bc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0201 	bic.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009bd2:	e013      	b.n	8009bfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009bd4:	f7ff f9e6 	bl	8008fa4 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b05      	cmp	r3, #5
 8009be0:	d90c      	bls.n	8009bfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2203      	movs	r2, #3
 8009bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e015      	b.n	8009c28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e4      	bne.n	8009bd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0e:	223f      	movs	r2, #63	; 0x3f
 8009c10:	409a      	lsls	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8009c3c:	4b92      	ldr	r3, [pc, #584]	; (8009e88 <HAL_DMA_IRQHandler+0x258>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a92      	ldr	r2, [pc, #584]	; (8009e8c <HAL_DMA_IRQHandler+0x25c>)
 8009c42:	fba2 2303 	umull	r2, r3, r2, r3
 8009c46:	0a9b      	lsrs	r3, r3, #10
 8009c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5a:	2208      	movs	r2, #8
 8009c5c:	409a      	lsls	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01a      	beq.n	8009c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d013      	beq.n	8009c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0204 	bic.w	r2, r2, #4
 8009c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c88:	2208      	movs	r2, #8
 8009c8a:	409a      	lsls	r2, r3
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c94:	f043 0201 	orr.w	r2, r3, #1
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	409a      	lsls	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d012      	beq.n	8009cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	409a      	lsls	r2, r3
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cca:	f043 0202 	orr.w	r2, r3, #2
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd6:	2204      	movs	r2, #4
 8009cd8:	409a      	lsls	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d012      	beq.n	8009d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0302 	and.w	r3, r3, #2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00b      	beq.n	8009d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf4:	2204      	movs	r2, #4
 8009cf6:	409a      	lsls	r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d00:	f043 0204 	orr.w	r2, r3, #4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	409a      	lsls	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4013      	ands	r3, r2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d043      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d03c      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	409a      	lsls	r2, r3
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d018      	beq.n	8009d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d108      	bne.n	8009d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d024      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
 8009d5e:	e01f      	b.n	8009da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01b      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	4798      	blx	r3
 8009d70:	e016      	b.n	8009da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d107      	bne.n	8009d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0208 	bic.w	r2, r2, #8
 8009d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009da4:	2220      	movs	r2, #32
 8009da6:	409a      	lsls	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4013      	ands	r3, r2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 808e 	beq.w	8009ece <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0310 	and.w	r3, r3, #16
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8086 	beq.w	8009ece <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	409a      	lsls	r2, r3
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b05      	cmp	r3, #5
 8009dd8:	d136      	bne.n	8009e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0216 	bic.w	r2, r2, #22
 8009de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	695a      	ldr	r2, [r3, #20]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d103      	bne.n	8009e0a <HAL_DMA_IRQHandler+0x1da>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0208 	bic.w	r2, r2, #8
 8009e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e1e:	223f      	movs	r2, #63	; 0x3f
 8009e20:	409a      	lsls	r2, r3
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d07d      	beq.n	8009f3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
        }
        return;
 8009e46:	e078      	b.n	8009f3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d01c      	beq.n	8009e90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d108      	bne.n	8009e76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d030      	beq.n	8009ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	4798      	blx	r3
 8009e74:	e02b      	b.n	8009ece <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d027      	beq.n	8009ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	4798      	blx	r3
 8009e86:	e022      	b.n	8009ece <HAL_DMA_IRQHandler+0x29e>
 8009e88:	20000008 	.word	0x20000008
 8009e8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10f      	bne.n	8009ebe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f022 0210 	bic.w	r2, r2, #16
 8009eac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d032      	beq.n	8009f3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d022      	beq.n	8009f28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2205      	movs	r2, #5
 8009ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0201 	bic.w	r2, r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	3301      	adds	r3, #1
 8009efe:	60bb      	str	r3, [r7, #8]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d307      	bcc.n	8009f16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1f2      	bne.n	8009efa <HAL_DMA_IRQHandler+0x2ca>
 8009f14:	e000      	b.n	8009f18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009f16:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
 8009f38:	e000      	b.n	8009f3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8009f3a:	bf00      	nop
    }
  }
}
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop

08009f44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	2b40      	cmp	r3, #64	; 0x40
 8009f70:	d108      	bne.n	8009f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009f82:	e007      	b.n	8009f94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	60da      	str	r2, [r3, #12]
}
 8009f94:	bf00      	nop
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	3b10      	subs	r3, #16
 8009fb0:	4a13      	ldr	r2, [pc, #76]	; (800a000 <DMA_CalcBaseAndBitshift+0x60>)
 8009fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb6:	091b      	lsrs	r3, r3, #4
 8009fb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009fba:	4a12      	ldr	r2, [pc, #72]	; (800a004 <DMA_CalcBaseAndBitshift+0x64>)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d908      	bls.n	8009fe0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <DMA_CalcBaseAndBitshift+0x68>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	1d1a      	adds	r2, r3, #4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	659a      	str	r2, [r3, #88]	; 0x58
 8009fde:	e006      	b.n	8009fee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4b08      	ldr	r3, [pc, #32]	; (800a008 <DMA_CalcBaseAndBitshift+0x68>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	aaaaaaab 	.word	0xaaaaaaab
 800a004:	08028e08 	.word	0x08028e08
 800a008:	fffffc00 	.word	0xfffffc00

0800a00c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d11f      	bne.n	800a066 <DMA_CheckFifoParam+0x5a>
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d856      	bhi.n	800a0da <DMA_CheckFifoParam+0xce>
 800a02c:	a201      	add	r2, pc, #4	; (adr r2, 800a034 <DMA_CheckFifoParam+0x28>)
 800a02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a032:	bf00      	nop
 800a034:	0800a045 	.word	0x0800a045
 800a038:	0800a057 	.word	0x0800a057
 800a03c:	0800a045 	.word	0x0800a045
 800a040:	0800a0db 	.word	0x0800a0db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d046      	beq.n	800a0de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a054:	e043      	b.n	800a0de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a05e:	d140      	bne.n	800a0e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a064:	e03d      	b.n	800a0e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a06e:	d121      	bne.n	800a0b4 <DMA_CheckFifoParam+0xa8>
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2b03      	cmp	r3, #3
 800a074:	d837      	bhi.n	800a0e6 <DMA_CheckFifoParam+0xda>
 800a076:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <DMA_CheckFifoParam+0x70>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a08d 	.word	0x0800a08d
 800a080:	0800a093 	.word	0x0800a093
 800a084:	0800a08d 	.word	0x0800a08d
 800a088:	0800a0a5 	.word	0x0800a0a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	73fb      	strb	r3, [r7, #15]
      break;
 800a090:	e030      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d025      	beq.n	800a0ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0a2:	e022      	b.n	800a0ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a0ac:	d11f      	bne.n	800a0ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a0b2:	e01c      	b.n	800a0ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d903      	bls.n	800a0c2 <DMA_CheckFifoParam+0xb6>
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d003      	beq.n	800a0c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a0c0:	e018      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c6:	e015      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00e      	beq.n	800a0f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d8:	e00b      	b.n	800a0f2 <DMA_CheckFifoParam+0xe6>
      break;
 800a0da:	bf00      	nop
 800a0dc:	e00a      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a0de:	bf00      	nop
 800a0e0:	e008      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a0e2:	bf00      	nop
 800a0e4:	e006      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a0e6:	bf00      	nop
 800a0e8:	e004      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a0ea:	bf00      	nop
 800a0ec:	e002      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      break;   
 800a0ee:	bf00      	nop
 800a0f0:	e000      	b.n	800a0f4 <DMA_CheckFifoParam+0xe8>
      break;
 800a0f2:	bf00      	nop
    }
  } 
  
  return status; 
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop

0800a104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a104:	b480      	push	{r7}
 800a106:	b089      	sub	sp, #36	; 0x24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a112:	2300      	movs	r3, #0
 800a114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a116:	2300      	movs	r3, #0
 800a118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a11a:	2300      	movs	r3, #0
 800a11c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a11e:	2300      	movs	r3, #0
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	e175      	b.n	800a410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a124:	2201      	movs	r2, #1
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	fa02 f303 	lsl.w	r3, r2, r3
 800a12c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	4013      	ands	r3, r2
 800a136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	f040 8164 	bne.w	800a40a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d005      	beq.n	800a15a <HAL_GPIO_Init+0x56>
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b02      	cmp	r3, #2
 800a158:	d130      	bne.n	800a1bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	2203      	movs	r2, #3
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	43db      	mvns	r3, r3
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	4013      	ands	r3, r2
 800a170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68da      	ldr	r2, [r3, #12]
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	fa02 f303 	lsl.w	r3, r2, r3
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	4313      	orrs	r3, r2
 800a182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a190:	2201      	movs	r2, #1
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	43db      	mvns	r3, r3
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	4013      	ands	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	091b      	lsrs	r3, r3, #4
 800a1a6:	f003 0201 	and.w	r2, r3, #1
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d017      	beq.n	800a1f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d8:	43db      	mvns	r3, r3
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f003 0303 	and.w	r3, r3, #3
 800a200:	2b02      	cmp	r3, #2
 800a202:	d123      	bne.n	800a24c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	08da      	lsrs	r2, r3, #3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3208      	adds	r2, #8
 800a20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	220f      	movs	r2, #15
 800a21c:	fa02 f303 	lsl.w	r3, r2, r3
 800a220:	43db      	mvns	r3, r3
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	4013      	ands	r3, r2
 800a226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	fa02 f303 	lsl.w	r3, r2, r3
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	08da      	lsrs	r2, r3, #3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3208      	adds	r2, #8
 800a246:	69b9      	ldr	r1, [r7, #24]
 800a248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	2203      	movs	r2, #3
 800a258:	fa02 f303 	lsl.w	r3, r2, r3
 800a25c:	43db      	mvns	r3, r3
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	4013      	ands	r3, r2
 800a262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f003 0203 	and.w	r2, r3, #3
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	fa02 f303 	lsl.w	r3, r2, r3
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	4313      	orrs	r3, r2
 800a278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	69ba      	ldr	r2, [r7, #24]
 800a27e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 80be 	beq.w	800a40a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a28e:	4b66      	ldr	r3, [pc, #408]	; (800a428 <HAL_GPIO_Init+0x324>)
 800a290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a292:	4a65      	ldr	r2, [pc, #404]	; (800a428 <HAL_GPIO_Init+0x324>)
 800a294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a298:	6453      	str	r3, [r2, #68]	; 0x44
 800a29a:	4b63      	ldr	r3, [pc, #396]	; (800a428 <HAL_GPIO_Init+0x324>)
 800a29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a2a6:	4a61      	ldr	r2, [pc, #388]	; (800a42c <HAL_GPIO_Init+0x328>)
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	089b      	lsrs	r3, r3, #2
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	f003 0303 	and.w	r3, r3, #3
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	220f      	movs	r2, #15
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	43db      	mvns	r3, r3
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a58      	ldr	r2, [pc, #352]	; (800a430 <HAL_GPIO_Init+0x32c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d037      	beq.n	800a342 <HAL_GPIO_Init+0x23e>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a57      	ldr	r2, [pc, #348]	; (800a434 <HAL_GPIO_Init+0x330>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d031      	beq.n	800a33e <HAL_GPIO_Init+0x23a>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a56      	ldr	r2, [pc, #344]	; (800a438 <HAL_GPIO_Init+0x334>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d02b      	beq.n	800a33a <HAL_GPIO_Init+0x236>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a55      	ldr	r2, [pc, #340]	; (800a43c <HAL_GPIO_Init+0x338>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d025      	beq.n	800a336 <HAL_GPIO_Init+0x232>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a54      	ldr	r2, [pc, #336]	; (800a440 <HAL_GPIO_Init+0x33c>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d01f      	beq.n	800a332 <HAL_GPIO_Init+0x22e>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a53      	ldr	r2, [pc, #332]	; (800a444 <HAL_GPIO_Init+0x340>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d019      	beq.n	800a32e <HAL_GPIO_Init+0x22a>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a52      	ldr	r2, [pc, #328]	; (800a448 <HAL_GPIO_Init+0x344>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d013      	beq.n	800a32a <HAL_GPIO_Init+0x226>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a51      	ldr	r2, [pc, #324]	; (800a44c <HAL_GPIO_Init+0x348>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00d      	beq.n	800a326 <HAL_GPIO_Init+0x222>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a50      	ldr	r2, [pc, #320]	; (800a450 <HAL_GPIO_Init+0x34c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d007      	beq.n	800a322 <HAL_GPIO_Init+0x21e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a4f      	ldr	r2, [pc, #316]	; (800a454 <HAL_GPIO_Init+0x350>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d101      	bne.n	800a31e <HAL_GPIO_Init+0x21a>
 800a31a:	2309      	movs	r3, #9
 800a31c:	e012      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a31e:	230a      	movs	r3, #10
 800a320:	e010      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a322:	2308      	movs	r3, #8
 800a324:	e00e      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a326:	2307      	movs	r3, #7
 800a328:	e00c      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a32a:	2306      	movs	r3, #6
 800a32c:	e00a      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a32e:	2305      	movs	r3, #5
 800a330:	e008      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a332:	2304      	movs	r3, #4
 800a334:	e006      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a336:	2303      	movs	r3, #3
 800a338:	e004      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a33a:	2302      	movs	r3, #2
 800a33c:	e002      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a33e:	2301      	movs	r3, #1
 800a340:	e000      	b.n	800a344 <HAL_GPIO_Init+0x240>
 800a342:	2300      	movs	r3, #0
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	f002 0203 	and.w	r2, r2, #3
 800a34a:	0092      	lsls	r2, r2, #2
 800a34c:	4093      	lsls	r3, r2
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	4313      	orrs	r3, r2
 800a352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a354:	4935      	ldr	r1, [pc, #212]	; (800a42c <HAL_GPIO_Init+0x328>)
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	089b      	lsrs	r3, r3, #2
 800a35a:	3302      	adds	r3, #2
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a362:	4b3d      	ldr	r3, [pc, #244]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	43db      	mvns	r3, r3
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	4013      	ands	r3, r2
 800a370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a386:	4a34      	ldr	r2, [pc, #208]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a38c:	4b32      	ldr	r3, [pc, #200]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	43db      	mvns	r3, r3
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	4013      	ands	r3, r2
 800a39a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a3b0:	4a29      	ldr	r2, [pc, #164]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a3b6:	4b28      	ldr	r3, [pc, #160]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	43db      	mvns	r3, r3
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a3da:	4a1f      	ldr	r2, [pc, #124]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a3e0:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	43db      	mvns	r3, r3
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a404:	4a14      	ldr	r2, [pc, #80]	; (800a458 <HAL_GPIO_Init+0x354>)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	3301      	adds	r3, #1
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	2b0f      	cmp	r3, #15
 800a414:	f67f ae86 	bls.w	800a124 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
 800a41c:	3724      	adds	r7, #36	; 0x24
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	40023800 	.word	0x40023800
 800a42c:	40013800 	.word	0x40013800
 800a430:	40020000 	.word	0x40020000
 800a434:	40020400 	.word	0x40020400
 800a438:	40020800 	.word	0x40020800
 800a43c:	40020c00 	.word	0x40020c00
 800a440:	40021000 	.word	0x40021000
 800a444:	40021400 	.word	0x40021400
 800a448:	40021800 	.word	0x40021800
 800a44c:	40021c00 	.word	0x40021c00
 800a450:	40022000 	.word	0x40022000
 800a454:	40022400 	.word	0x40022400
 800a458:	40013c00 	.word	0x40013c00

0800a45c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800a466:	2300      	movs	r3, #0
 800a468:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800a46e:	2300      	movs	r3, #0
 800a470:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
 800a476:	e0d9      	b.n	800a62c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a478:	2201      	movs	r2, #1
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	fa02 f303 	lsl.w	r3, r2, r3
 800a480:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	4013      	ands	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	429a      	cmp	r2, r3
 800a490:	f040 80c9 	bne.w	800a626 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800a494:	4a6b      	ldr	r2, [pc, #428]	; (800a644 <HAL_GPIO_DeInit+0x1e8>)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	089b      	lsrs	r3, r3, #2
 800a49a:	3302      	adds	r3, #2
 800a49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4a0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f003 0303 	and.w	r3, r3, #3
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	220f      	movs	r2, #15
 800a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a63      	ldr	r2, [pc, #396]	; (800a648 <HAL_GPIO_DeInit+0x1ec>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d037      	beq.n	800a52e <HAL_GPIO_DeInit+0xd2>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a62      	ldr	r2, [pc, #392]	; (800a64c <HAL_GPIO_DeInit+0x1f0>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d031      	beq.n	800a52a <HAL_GPIO_DeInit+0xce>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a61      	ldr	r2, [pc, #388]	; (800a650 <HAL_GPIO_DeInit+0x1f4>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d02b      	beq.n	800a526 <HAL_GPIO_DeInit+0xca>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a60      	ldr	r2, [pc, #384]	; (800a654 <HAL_GPIO_DeInit+0x1f8>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d025      	beq.n	800a522 <HAL_GPIO_DeInit+0xc6>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a5f      	ldr	r2, [pc, #380]	; (800a658 <HAL_GPIO_DeInit+0x1fc>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d01f      	beq.n	800a51e <HAL_GPIO_DeInit+0xc2>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a5e      	ldr	r2, [pc, #376]	; (800a65c <HAL_GPIO_DeInit+0x200>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d019      	beq.n	800a51a <HAL_GPIO_DeInit+0xbe>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a5d      	ldr	r2, [pc, #372]	; (800a660 <HAL_GPIO_DeInit+0x204>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d013      	beq.n	800a516 <HAL_GPIO_DeInit+0xba>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a5c      	ldr	r2, [pc, #368]	; (800a664 <HAL_GPIO_DeInit+0x208>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00d      	beq.n	800a512 <HAL_GPIO_DeInit+0xb6>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a5b      	ldr	r2, [pc, #364]	; (800a668 <HAL_GPIO_DeInit+0x20c>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d007      	beq.n	800a50e <HAL_GPIO_DeInit+0xb2>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a5a      	ldr	r2, [pc, #360]	; (800a66c <HAL_GPIO_DeInit+0x210>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d101      	bne.n	800a50a <HAL_GPIO_DeInit+0xae>
 800a506:	2309      	movs	r3, #9
 800a508:	e012      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a50a:	230a      	movs	r3, #10
 800a50c:	e010      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a50e:	2308      	movs	r3, #8
 800a510:	e00e      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a512:	2307      	movs	r3, #7
 800a514:	e00c      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a516:	2306      	movs	r3, #6
 800a518:	e00a      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a51a:	2305      	movs	r3, #5
 800a51c:	e008      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a51e:	2304      	movs	r3, #4
 800a520:	e006      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a522:	2303      	movs	r3, #3
 800a524:	e004      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a526:	2302      	movs	r3, #2
 800a528:	e002      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <HAL_GPIO_DeInit+0xd4>
 800a52e:	2300      	movs	r3, #0
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	f002 0203 	and.w	r2, r2, #3
 800a536:	0092      	lsls	r2, r2, #2
 800a538:	4093      	lsls	r3, r2
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d132      	bne.n	800a5a6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a540:	4b4b      	ldr	r3, [pc, #300]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	43db      	mvns	r3, r3
 800a548:	4949      	ldr	r1, [pc, #292]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a54a:	4013      	ands	r3, r2
 800a54c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a54e:	4b48      	ldr	r3, [pc, #288]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	43db      	mvns	r3, r3
 800a556:	4946      	ldr	r1, [pc, #280]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a558:	4013      	ands	r3, r2
 800a55a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a55c:	4b44      	ldr	r3, [pc, #272]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a55e:	68da      	ldr	r2, [r3, #12]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	43db      	mvns	r3, r3
 800a564:	4942      	ldr	r1, [pc, #264]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a566:	4013      	ands	r3, r2
 800a568:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a56a:	4b41      	ldr	r3, [pc, #260]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a56c:	689a      	ldr	r2, [r3, #8]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	43db      	mvns	r3, r3
 800a572:	493f      	ldr	r1, [pc, #252]	; (800a670 <HAL_GPIO_DeInit+0x214>)
 800a574:	4013      	ands	r3, r2
 800a576:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	220f      	movs	r2, #15
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a588:	4a2e      	ldr	r2, [pc, #184]	; (800a644 <HAL_GPIO_DeInit+0x1e8>)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	089b      	lsrs	r3, r3, #2
 800a58e:	3302      	adds	r3, #2
 800a590:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	43da      	mvns	r2, r3
 800a598:	482a      	ldr	r0, [pc, #168]	; (800a644 <HAL_GPIO_DeInit+0x1e8>)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	089b      	lsrs	r3, r3, #2
 800a59e:	400a      	ands	r2, r1
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	2103      	movs	r1, #3
 800a5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b4:	43db      	mvns	r3, r3
 800a5b6:	401a      	ands	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	08da      	lsrs	r2, r3, #3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3208      	adds	r2, #8
 800a5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f003 0307 	and.w	r3, r3, #7
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	220f      	movs	r2, #15
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	43db      	mvns	r3, r3
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	08d2      	lsrs	r2, r2, #3
 800a5dc:	4019      	ands	r1, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3208      	adds	r2, #8
 800a5e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	2103      	movs	r1, #3
 800a5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	401a      	ands	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	2101      	movs	r1, #1
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	fa01 f303 	lsl.w	r3, r1, r3
 800a608:	43db      	mvns	r3, r3
 800a60a:	401a      	ands	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	2103      	movs	r1, #3
 800a61a:	fa01 f303 	lsl.w	r3, r1, r3
 800a61e:	43db      	mvns	r3, r3
 800a620:	401a      	ands	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	3301      	adds	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2b0f      	cmp	r3, #15
 800a630:	f67f af22 	bls.w	800a478 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	371c      	adds	r7, #28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	40013800 	.word	0x40013800
 800a648:	40020000 	.word	0x40020000
 800a64c:	40020400 	.word	0x40020400
 800a650:	40020800 	.word	0x40020800
 800a654:	40020c00 	.word	0x40020c00
 800a658:	40021000 	.word	0x40021000
 800a65c:	40021400 	.word	0x40021400
 800a660:	40021800 	.word	0x40021800
 800a664:	40021c00 	.word	0x40021c00
 800a668:	40022000 	.word	0x40022000
 800a66c:	40022400 	.word	0x40022400
 800a670:	40013c00 	.word	0x40013c00

0800a674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	691a      	ldr	r2, [r3, #16]
 800a684:	887b      	ldrh	r3, [r7, #2]
 800a686:	4013      	ands	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a68c:	2301      	movs	r3, #1
 800a68e:	73fb      	strb	r3, [r7, #15]
 800a690:	e001      	b.n	800a696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a696:	7bfb      	ldrb	r3, [r7, #15]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	807b      	strh	r3, [r7, #2]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a6b4:	787b      	ldrb	r3, [r7, #1]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6ba:	887a      	ldrh	r2, [r7, #2]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a6c0:	e003      	b.n	800a6ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a6c2:	887b      	ldrh	r3, [r7, #2]
 800a6c4:	041a      	lsls	r2, r3, #16
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	619a      	str	r2, [r3, #24]
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a6e4:	4b0c      	ldr	r3, [pc, #48]	; (800a718 <HAL_PWR_EnterSLEEPMode+0x40>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	4a0b      	ldr	r2, [pc, #44]	; (800a718 <HAL_PWR_EnterSLEEPMode+0x40>)
 800a6ea:	f023 0304 	bic.w	r3, r3, #4
 800a6ee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a6f0:	f3bf 8f4f 	dsb	sy
}
 800a6f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a6f6:	f3bf 8f6f 	isb	sy
}
 800a6fa:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d101      	bne.n	800a706 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800a702:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800a704:	e002      	b.n	800a70c <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800a706:	bf40      	sev
    __WFE();
 800a708:	bf20      	wfe
    __WFE();
 800a70a:	bf20      	wfe
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	e000ed00 	.word	0xe000ed00

0800a71c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a726:	4b23      	ldr	r3, [pc, #140]	; (800a7b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	4a22      	ldr	r2, [pc, #136]	; (800a7b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a72c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a730:	6413      	str	r3, [r2, #64]	; 0x40
 800a732:	4b20      	ldr	r3, [pc, #128]	; (800a7b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a73e:	4b1e      	ldr	r3, [pc, #120]	; (800a7b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a1d      	ldr	r2, [pc, #116]	; (800a7b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a748:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a74a:	f7fe fc2b 	bl	8008fa4 <HAL_GetTick>
 800a74e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a750:	e009      	b.n	800a766 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a752:	f7fe fc27 	bl	8008fa4 <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a760:	d901      	bls.n	800a766 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e022      	b.n	800a7ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a766:	4b14      	ldr	r3, [pc, #80]	; (800a7b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a772:	d1ee      	bne.n	800a752 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a0f      	ldr	r2, [pc, #60]	; (800a7b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a77a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a77e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a780:	f7fe fc10 	bl	8008fa4 <HAL_GetTick>
 800a784:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a786:	e009      	b.n	800a79c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a788:	f7fe fc0c 	bl	8008fa4 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a796:	d901      	bls.n	800a79c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e007      	b.n	800a7ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7a8:	d1ee      	bne.n	800a788 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	40023800 	.word	0x40023800
 800a7b8:	40007000 	.word	0x40007000

0800a7bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af02      	add	r7, sp, #8
 800a7c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a7c4:	f7fe fbee 	bl	8008fa4 <HAL_GetTick>
 800a7c8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e067      	b.n	800a8a4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10b      	bne.n	800a7f8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7f8 ffe3 	bl	80037b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a7ee:	f241 3188 	movw	r1, #5000	; 0x1388
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa86 	bl	800ad04 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	3b01      	subs	r3, #1
 800a808:	021a      	lsls	r2, r3, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	430a      	orrs	r2, r1
 800a810:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	2120      	movs	r1, #32
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fa7e 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800a824:	4603      	mov	r3, r0
 800a826:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d135      	bne.n	800a89a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	4b1d      	ldr	r3, [pc, #116]	; (800a8ac <HAL_QSPI_Init+0xf0>)
 800a836:	4013      	ands	r3, r2
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	6852      	ldr	r2, [r2, #4]
 800a83c:	0611      	lsls	r1, r2, #24
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68d2      	ldr	r2, [r2, #12]
 800a842:	4311      	orrs	r1, r2
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	69d2      	ldr	r2, [r2, #28]
 800a848:	4311      	orrs	r1, r2
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6a12      	ldr	r2, [r2, #32]
 800a84e:	4311      	orrs	r1, r2
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	6812      	ldr	r2, [r2, #0]
 800a854:	430b      	orrs	r3, r1
 800a856:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	4b14      	ldr	r3, [pc, #80]	; (800a8b0 <HAL_QSPI_Init+0xf4>)
 800a860:	4013      	ands	r3, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6912      	ldr	r2, [r2, #16]
 800a866:	0411      	lsls	r1, r2, #16
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6952      	ldr	r2, [r2, #20]
 800a86c:	4311      	orrs	r1, r2
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	6992      	ldr	r2, [r2, #24]
 800a872:	4311      	orrs	r1, r2
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	6812      	ldr	r2, [r2, #0]
 800a878:	430b      	orrs	r3, r1
 800a87a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a8a2:	7afb      	ldrb	r3, [r7, #11]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	00ffff2f 	.word	0x00ffff2f
 800a8b0:	ffe0f8fe 	.word	0xffe0f8fe

0800a8b4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e016      	b.n	800a8f4 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f022 0201 	bic.w	r2, r2, #1
 800a8d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7f9 f81c 	bl	8003914 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af02      	add	r7, sp, #8
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a908:	f7fe fb4c 	bl	8008fa4 <HAL_GetTick>
 800a90c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b01      	cmp	r3, #1
 800a918:	d101      	bne.n	800a91e <HAL_QSPI_Command+0x22>
 800a91a:	2302      	movs	r3, #2
 800a91c:	e048      	b.n	800a9b0 <HAL_QSPI_Command+0xb4>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d137      	bne.n	800a9a2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2200      	movs	r2, #0
 800a948:	2120      	movs	r1, #32
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f9e8 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d125      	bne.n	800a9a6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a95a:	2200      	movs	r2, #0
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 fa15 	bl	800ad8e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d115      	bne.n	800a998 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	2201      	movs	r2, #1
 800a974:	2102      	movs	r1, #2
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 f9d2 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800a97c:	4603      	mov	r3, r0
 800a97e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a980:	7dfb      	ldrb	r3, [r7, #23]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10f      	bne.n	800a9a6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2202      	movs	r2, #2
 800a98c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a996:	e006      	b.n	800a9a6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9a0:	e001      	b.n	800a9a6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08a      	sub	sp, #40	; 0x28
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a9c8:	f7fe faec 	bl	8008fa4 <HAL_GetTick>
 800a9cc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3320      	adds	r3, #32
 800a9d4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <HAL_QSPI_Transmit+0x2e>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	e076      	b.n	800aad4 <HAL_QSPI_Transmit+0x11c>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d165      	bne.n	800aac6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d056      	beq.n	800aab4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2212      	movs	r2, #18
 800aa0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	695a      	ldr	r2, [r3, #20]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800aa3a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800aa3c:	e01b      	b.n	800aa76 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2201      	movs	r2, #1
 800aa46:	2104      	movs	r1, #4
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 f969 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800aa52:	7ffb      	ldrb	r3, [r7, #31]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d113      	bne.n	800aa80 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	781a      	ldrb	r2, [r3, #0]
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	1e5a      	subs	r2, r3, #1
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1df      	bne.n	800aa3e <HAL_QSPI_Transmit+0x86>
 800aa7e:	e000      	b.n	800aa82 <HAL_QSPI_Transmit+0xca>
          break;
 800aa80:	bf00      	nop
      }

      if (status == HAL_OK)
 800aa82:	7ffb      	ldrb	r3, [r7, #31]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d110      	bne.n	800aaaa <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	2102      	movs	r1, #2
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 f944 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800aa9c:	7ffb      	ldrb	r3, [r7, #31]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d103      	bne.n	800aaaa <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aab2:	e00a      	b.n	800aaca <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab8:	f043 0208 	orr.w	r2, r3, #8
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	77fb      	strb	r3, [r7, #31]
 800aac4:	e001      	b.n	800aaca <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800aac6:	2302      	movs	r3, #2
 800aac8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800aad2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08a      	sub	sp, #40	; 0x28
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800aaec:	f7fe fa5a 	bl	8008fa4 <HAL_GetTick>
 800aaf0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3320      	adds	r3, #32
 800ab00:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d101      	bne.n	800ab12 <HAL_QSPI_Receive+0x36>
 800ab0e:	2302      	movs	r3, #2
 800ab10:	e07d      	b.n	800ac0e <HAL_QSPI_Receive+0x132>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d16c      	bne.n	800ac00 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d05d      	beq.n	800abee <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2222      	movs	r2, #34	; 0x22
 800ab36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ab6a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800ab74:	e01c      	b.n	800abb0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	2106      	movs	r1, #6
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 f8cd 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800ab86:	4603      	mov	r3, r0
 800ab88:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800ab8a:	7ffb      	ldrb	r3, [r7, #31]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d114      	bne.n	800abba <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	1e5a      	subs	r2, r3, #1
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1de      	bne.n	800ab76 <HAL_QSPI_Receive+0x9a>
 800abb8:	e000      	b.n	800abbc <HAL_QSPI_Receive+0xe0>
          break;
 800abba:	bf00      	nop
      }

      if (status == HAL_OK)
 800abbc:	7ffb      	ldrb	r3, [r7, #31]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d110      	bne.n	800abe4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2201      	movs	r2, #1
 800abca:	2102      	movs	r1, #2
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f8a7 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800abd6:	7ffb      	ldrb	r3, [r7, #31]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d103      	bne.n	800abe4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2202      	movs	r2, #2
 800abe2:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abec:	e00a      	b.n	800ac04 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf2:	f043 0208 	orr.w	r2, r3, #8
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	77fb      	strb	r3, [r7, #31]
 800abfe:	e001      	b.n	800ac04 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ac00:	2302      	movs	r3, #2
 800ac02:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ac0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3720      	adds	r7, #32
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b088      	sub	sp, #32
 800ac1a:	af02      	add	r7, sp, #8
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac24:	f7fe f9be 	bl	8008fa4 <HAL_GetTick>
 800ac28:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d101      	bne.n	800ac3a <HAL_QSPI_AutoPolling+0x24>
 800ac36:	2302      	movs	r3, #2
 800ac38:	e060      	b.n	800acfc <HAL_QSPI_AutoPolling+0xe6>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d14f      	bne.n	800acee <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2242      	movs	r2, #66	; 0x42
 800ac58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2200      	movs	r2, #0
 800ac64:	2120      	movs	r1, #32
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 f85a 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d13d      	bne.n	800acf2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	6852      	ldr	r2, [r2, #4]
 800ac88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6892      	ldr	r2, [r2, #8]
 800ac92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	431a      	orrs	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800acac:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800acb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 f866 	bl	800ad8e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2201      	movs	r2, #1
 800acca:	2108      	movs	r1, #8
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 f827 	bl	800ad20 <QSPI_WaitFlagStateUntilTimeout>
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2208      	movs	r2, #8
 800ace2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acec:	e001      	b.n	800acf2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800acee:	2302      	movs	r3, #2
 800acf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ad30:	e01a      	b.n	800ad68 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad38:	d016      	beq.n	800ad68 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3a:	f7fe f933 	bl	8008fa4 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d302      	bcc.n	800ad50 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10b      	bne.n	800ad68 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2204      	movs	r2, #4
 800ad54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5c:	f043 0201 	orr.w	r2, r3, #1
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e00e      	b.n	800ad86 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689a      	ldr	r2, [r3, #8]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	4013      	ands	r3, r2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bf14      	ite	ne
 800ad76:	2301      	movne	r3, #1
 800ad78:	2300      	moveq	r3, #0
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	79fb      	ldrb	r3, [r7, #7]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d1d6      	bne.n	800ad32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d009      	beq.n	800adb6 <QSPI_Config+0x28>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ada8:	d005      	beq.n	800adb6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3a01      	subs	r2, #1
 800adb4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 80b9 	beq.w	800af32 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	6a1b      	ldr	r3, [r3, #32]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d05f      	beq.n	800ae88 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	6892      	ldr	r2, [r2, #8]
 800add0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d031      	beq.n	800ae3e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade2:	431a      	orrs	r2, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade8:	431a      	orrs	r2, r3
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	431a      	orrs	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	049b      	lsls	r3, r3, #18
 800adf6:	431a      	orrs	r2, r3
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	431a      	orrs	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	431a      	orrs	r2, r3
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	ea42 0103 	orr.w	r1, r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ae2e:	f000 812e 	beq.w	800b08e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	6852      	ldr	r2, [r2, #4]
 800ae3a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800ae3c:	e127      	b.n	800b08e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae46:	431a      	orrs	r2, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	431a      	orrs	r2, r3
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	049b      	lsls	r3, r3, #18
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	431a      	orrs	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	431a      	orrs	r2, r3
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	69db      	ldr	r3, [r3, #28]
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	431a      	orrs	r2, r3
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	ea42 0103 	orr.w	r1, r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	615a      	str	r2, [r3, #20]
}
 800ae86:	e102      	b.n	800b08e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d02e      	beq.n	800aeee <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	431a      	orrs	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	049b      	lsls	r3, r3, #18
 800aeac:	431a      	orrs	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	431a      	orrs	r2, r3
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	ea42 0103 	orr.w	r1, r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	430a      	orrs	r2, r1
 800aed6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aede:	f000 80d6 	beq.w	800b08e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	6852      	ldr	r2, [r2, #4]
 800aeea:	619a      	str	r2, [r3, #24]
}
 800aeec:	e0cf      	b.n	800b08e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef6:	431a      	orrs	r2, r3
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefc:	431a      	orrs	r2, r3
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af02:	431a      	orrs	r2, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	049b      	lsls	r3, r3, #18
 800af0a:	431a      	orrs	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	431a      	orrs	r2, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	431a      	orrs	r2, r3
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	431a      	orrs	r2, r3
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	ea42 0103 	orr.w	r1, r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	615a      	str	r2, [r3, #20]
}
 800af30:	e0ad      	b.n	800b08e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d058      	beq.n	800afec <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	6892      	ldr	r2, [r2, #8]
 800af42:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d02d      	beq.n	800afa8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af54:	431a      	orrs	r2, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	431a      	orrs	r2, r3
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af60:	431a      	orrs	r2, r3
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	049b      	lsls	r3, r3, #18
 800af68:	431a      	orrs	r2, r3
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	431a      	orrs	r2, r3
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6a1b      	ldr	r3, [r3, #32]
 800af74:	431a      	orrs	r2, r3
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	431a      	orrs	r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	ea42 0103 	orr.w	r1, r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	430a      	orrs	r2, r1
 800af92:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800af9a:	d078      	beq.n	800b08e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	6852      	ldr	r2, [r2, #4]
 800afa4:	619a      	str	r2, [r3, #24]
}
 800afa6:	e072      	b.n	800b08e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb0:	431a      	orrs	r2, r3
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb6:	431a      	orrs	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	431a      	orrs	r2, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	049b      	lsls	r3, r3, #18
 800afc4:	431a      	orrs	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	431a      	orrs	r2, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	431a      	orrs	r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	431a      	orrs	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	ea42 0103 	orr.w	r1, r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	615a      	str	r2, [r3, #20]
}
 800afea:	e050      	b.n	800b08e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d02a      	beq.n	800b04a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affc:	431a      	orrs	r2, r3
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b002:	431a      	orrs	r2, r3
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	431a      	orrs	r2, r3
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	049b      	lsls	r3, r3, #18
 800b010:	431a      	orrs	r2, r3
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	431a      	orrs	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	431a      	orrs	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	431a      	orrs	r2, r3
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	ea42 0103 	orr.w	r1, r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	430a      	orrs	r2, r1
 800b034:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b03c:	d027      	beq.n	800b08e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	6852      	ldr	r2, [r2, #4]
 800b046:	619a      	str	r2, [r3, #24]
}
 800b048:	e021      	b.n	800b08e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01d      	beq.n	800b08e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05a:	431a      	orrs	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b060:	431a      	orrs	r2, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	431a      	orrs	r2, r3
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	049b      	lsls	r3, r3, #18
 800b06e:	431a      	orrs	r2, r3
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	431a      	orrs	r2, r3
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	431a      	orrs	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	ea42 0103 	orr.w	r1, r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	615a      	str	r2, [r3, #20]
}
 800b08e:	bf00      	nop
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
	...

0800b09c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e29b      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 8087 	beq.w	800b1ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b0c0:	4b96      	ldr	r3, [pc, #600]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f003 030c 	and.w	r3, r3, #12
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d00c      	beq.n	800b0e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b0cc:	4b93      	ldr	r3, [pc, #588]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f003 030c 	and.w	r3, r3, #12
 800b0d4:	2b08      	cmp	r3, #8
 800b0d6:	d112      	bne.n	800b0fe <HAL_RCC_OscConfig+0x62>
 800b0d8:	4b90      	ldr	r3, [pc, #576]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0e4:	d10b      	bne.n	800b0fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0e6:	4b8d      	ldr	r3, [pc, #564]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d06c      	beq.n	800b1cc <HAL_RCC_OscConfig+0x130>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d168      	bne.n	800b1cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e275      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b106:	d106      	bne.n	800b116 <HAL_RCC_OscConfig+0x7a>
 800b108:	4b84      	ldr	r3, [pc, #528]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a83      	ldr	r2, [pc, #524]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b10e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	e02e      	b.n	800b174 <HAL_RCC_OscConfig+0xd8>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10c      	bne.n	800b138 <HAL_RCC_OscConfig+0x9c>
 800b11e:	4b7f      	ldr	r3, [pc, #508]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a7e      	ldr	r2, [pc, #504]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b128:	6013      	str	r3, [r2, #0]
 800b12a:	4b7c      	ldr	r3, [pc, #496]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a7b      	ldr	r2, [pc, #492]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	e01d      	b.n	800b174 <HAL_RCC_OscConfig+0xd8>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b140:	d10c      	bne.n	800b15c <HAL_RCC_OscConfig+0xc0>
 800b142:	4b76      	ldr	r3, [pc, #472]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a75      	ldr	r2, [pc, #468]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	4b73      	ldr	r3, [pc, #460]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a72      	ldr	r2, [pc, #456]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	e00b      	b.n	800b174 <HAL_RCC_OscConfig+0xd8>
 800b15c:	4b6f      	ldr	r3, [pc, #444]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a6e      	ldr	r2, [pc, #440]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	4b6c      	ldr	r3, [pc, #432]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a6b      	ldr	r2, [pc, #428]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b16e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d013      	beq.n	800b1a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b17c:	f7fd ff12 	bl	8008fa4 <HAL_GetTick>
 800b180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b182:	e008      	b.n	800b196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b184:	f7fd ff0e 	bl	8008fa4 <HAL_GetTick>
 800b188:	4602      	mov	r2, r0
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	2b64      	cmp	r3, #100	; 0x64
 800b190:	d901      	bls.n	800b196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	e229      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b196:	4b61      	ldr	r3, [pc, #388]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d0f0      	beq.n	800b184 <HAL_RCC_OscConfig+0xe8>
 800b1a2:	e014      	b.n	800b1ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a4:	f7fd fefe 	bl	8008fa4 <HAL_GetTick>
 800b1a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1aa:	e008      	b.n	800b1be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1ac:	f7fd fefa 	bl	8008fa4 <HAL_GetTick>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	2b64      	cmp	r3, #100	; 0x64
 800b1b8:	d901      	bls.n	800b1be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e215      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1be:	4b57      	ldr	r3, [pc, #348]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1f0      	bne.n	800b1ac <HAL_RCC_OscConfig+0x110>
 800b1ca:	e000      	b.n	800b1ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0302 	and.w	r3, r3, #2
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d069      	beq.n	800b2ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1da:	4b50      	ldr	r3, [pc, #320]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f003 030c 	and.w	r3, r3, #12
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00b      	beq.n	800b1fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b1e6:	4b4d      	ldr	r3, [pc, #308]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	f003 030c 	and.w	r3, r3, #12
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d11c      	bne.n	800b22c <HAL_RCC_OscConfig+0x190>
 800b1f2:	4b4a      	ldr	r3, [pc, #296]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d116      	bne.n	800b22c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b1fe:	4b47      	ldr	r3, [pc, #284]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b00      	cmp	r3, #0
 800b208:	d005      	beq.n	800b216 <HAL_RCC_OscConfig+0x17a>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d001      	beq.n	800b216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e1e9      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b216:	4b41      	ldr	r3, [pc, #260]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	493d      	ldr	r1, [pc, #244]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b226:	4313      	orrs	r3, r2
 800b228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b22a:	e040      	b.n	800b2ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d023      	beq.n	800b27c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b234:	4b39      	ldr	r3, [pc, #228]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a38      	ldr	r2, [pc, #224]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b23a:	f043 0301 	orr.w	r3, r3, #1
 800b23e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b240:	f7fd feb0 	bl	8008fa4 <HAL_GetTick>
 800b244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b248:	f7fd feac 	bl	8008fa4 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b02      	cmp	r3, #2
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e1c7      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b25a:	4b30      	ldr	r3, [pc, #192]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0f0      	beq.n	800b248 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b266:	4b2d      	ldr	r3, [pc, #180]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	00db      	lsls	r3, r3, #3
 800b274:	4929      	ldr	r1, [pc, #164]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b276:	4313      	orrs	r3, r2
 800b278:	600b      	str	r3, [r1, #0]
 800b27a:	e018      	b.n	800b2ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b27c:	4b27      	ldr	r3, [pc, #156]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a26      	ldr	r2, [pc, #152]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b282:	f023 0301 	bic.w	r3, r3, #1
 800b286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b288:	f7fd fe8c 	bl	8008fa4 <HAL_GetTick>
 800b28c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b28e:	e008      	b.n	800b2a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b290:	f7fd fe88 	bl	8008fa4 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e1a3      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2a2:	4b1e      	ldr	r3, [pc, #120]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0302 	and.w	r3, r3, #2
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1f0      	bne.n	800b290 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0308 	and.w	r3, r3, #8
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d038      	beq.n	800b32c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d019      	beq.n	800b2f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2c2:	4b16      	ldr	r3, [pc, #88]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c6:	4a15      	ldr	r2, [pc, #84]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b2c8:	f043 0301 	orr.w	r3, r3, #1
 800b2cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ce:	f7fd fe69 	bl	8008fa4 <HAL_GetTick>
 800b2d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b2d4:	e008      	b.n	800b2e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b2d6:	f7fd fe65 	bl	8008fa4 <HAL_GetTick>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d901      	bls.n	800b2e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e180      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b2e8:	4b0c      	ldr	r3, [pc, #48]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ec:	f003 0302 	and.w	r3, r3, #2
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d0f0      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x23a>
 800b2f4:	e01a      	b.n	800b32c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b2f6:	4b09      	ldr	r3, [pc, #36]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2fa:	4a08      	ldr	r2, [pc, #32]	; (800b31c <HAL_RCC_OscConfig+0x280>)
 800b2fc:	f023 0301 	bic.w	r3, r3, #1
 800b300:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b302:	f7fd fe4f 	bl	8008fa4 <HAL_GetTick>
 800b306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b308:	e00a      	b.n	800b320 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b30a:	f7fd fe4b 	bl	8008fa4 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	2b02      	cmp	r3, #2
 800b316:	d903      	bls.n	800b320 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e166      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
 800b31c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b320:	4b92      	ldr	r3, [pc, #584]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b324:	f003 0302 	and.w	r3, r3, #2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1ee      	bne.n	800b30a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 80a4 	beq.w	800b482 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b33a:	4b8c      	ldr	r3, [pc, #560]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10d      	bne.n	800b362 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b346:	4b89      	ldr	r3, [pc, #548]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34a:	4a88      	ldr	r2, [pc, #544]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b34c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b350:	6413      	str	r3, [r2, #64]	; 0x40
 800b352:	4b86      	ldr	r3, [pc, #536]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b35a:	60bb      	str	r3, [r7, #8]
 800b35c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b35e:	2301      	movs	r3, #1
 800b360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b362:	4b83      	ldr	r3, [pc, #524]	; (800b570 <HAL_RCC_OscConfig+0x4d4>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d118      	bne.n	800b3a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b36e:	4b80      	ldr	r3, [pc, #512]	; (800b570 <HAL_RCC_OscConfig+0x4d4>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a7f      	ldr	r2, [pc, #508]	; (800b570 <HAL_RCC_OscConfig+0x4d4>)
 800b374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b37a:	f7fd fe13 	bl	8008fa4 <HAL_GetTick>
 800b37e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b380:	e008      	b.n	800b394 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b382:	f7fd fe0f 	bl	8008fa4 <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b64      	cmp	r3, #100	; 0x64
 800b38e:	d901      	bls.n	800b394 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e12a      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b394:	4b76      	ldr	r3, [pc, #472]	; (800b570 <HAL_RCC_OscConfig+0x4d4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0f0      	beq.n	800b382 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d106      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x31a>
 800b3a8:	4b70      	ldr	r3, [pc, #448]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ac:	4a6f      	ldr	r2, [pc, #444]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	6713      	str	r3, [r2, #112]	; 0x70
 800b3b4:	e02d      	b.n	800b412 <HAL_RCC_OscConfig+0x376>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10c      	bne.n	800b3d8 <HAL_RCC_OscConfig+0x33c>
 800b3be:	4b6b      	ldr	r3, [pc, #428]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3c2:	4a6a      	ldr	r2, [pc, #424]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3c4:	f023 0301 	bic.w	r3, r3, #1
 800b3c8:	6713      	str	r3, [r2, #112]	; 0x70
 800b3ca:	4b68      	ldr	r3, [pc, #416]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ce:	4a67      	ldr	r2, [pc, #412]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3d0:	f023 0304 	bic.w	r3, r3, #4
 800b3d4:	6713      	str	r3, [r2, #112]	; 0x70
 800b3d6:	e01c      	b.n	800b412 <HAL_RCC_OscConfig+0x376>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	2b05      	cmp	r3, #5
 800b3de:	d10c      	bne.n	800b3fa <HAL_RCC_OscConfig+0x35e>
 800b3e0:	4b62      	ldr	r3, [pc, #392]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e4:	4a61      	ldr	r2, [pc, #388]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3e6:	f043 0304 	orr.w	r3, r3, #4
 800b3ea:	6713      	str	r3, [r2, #112]	; 0x70
 800b3ec:	4b5f      	ldr	r3, [pc, #380]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f0:	4a5e      	ldr	r2, [pc, #376]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3f2:	f043 0301 	orr.w	r3, r3, #1
 800b3f6:	6713      	str	r3, [r2, #112]	; 0x70
 800b3f8:	e00b      	b.n	800b412 <HAL_RCC_OscConfig+0x376>
 800b3fa:	4b5c      	ldr	r3, [pc, #368]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fe:	4a5b      	ldr	r2, [pc, #364]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b400:	f023 0301 	bic.w	r3, r3, #1
 800b404:	6713      	str	r3, [r2, #112]	; 0x70
 800b406:	4b59      	ldr	r3, [pc, #356]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40a:	4a58      	ldr	r2, [pc, #352]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b40c:	f023 0304 	bic.w	r3, r3, #4
 800b410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d015      	beq.n	800b446 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b41a:	f7fd fdc3 	bl	8008fa4 <HAL_GetTick>
 800b41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b420:	e00a      	b.n	800b438 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b422:	f7fd fdbf 	bl	8008fa4 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b430:	4293      	cmp	r3, r2
 800b432:	d901      	bls.n	800b438 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e0d8      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b438:	4b4c      	ldr	r3, [pc, #304]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0ee      	beq.n	800b422 <HAL_RCC_OscConfig+0x386>
 800b444:	e014      	b.n	800b470 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b446:	f7fd fdad 	bl	8008fa4 <HAL_GetTick>
 800b44a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b44c:	e00a      	b.n	800b464 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b44e:	f7fd fda9 	bl	8008fa4 <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	f241 3288 	movw	r2, #5000	; 0x1388
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d901      	bls.n	800b464 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e0c2      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b464:	4b41      	ldr	r3, [pc, #260]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1ee      	bne.n	800b44e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b470:	7dfb      	ldrb	r3, [r7, #23]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d105      	bne.n	800b482 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b476:	4b3d      	ldr	r3, [pc, #244]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47a:	4a3c      	ldr	r2, [pc, #240]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b47c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 80ae 	beq.w	800b5e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b48c:	4b37      	ldr	r3, [pc, #220]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f003 030c 	and.w	r3, r3, #12
 800b494:	2b08      	cmp	r3, #8
 800b496:	d06d      	beq.n	800b574 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d14b      	bne.n	800b538 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4a0:	4b32      	ldr	r3, [pc, #200]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a31      	ldr	r2, [pc, #196]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b4a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4ac:	f7fd fd7a 	bl	8008fa4 <HAL_GetTick>
 800b4b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4b2:	e008      	b.n	800b4c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4b4:	f7fd fd76 	bl	8008fa4 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d901      	bls.n	800b4c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e091      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4c6:	4b29      	ldr	r3, [pc, #164]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1f0      	bne.n	800b4b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	69da      	ldr	r2, [r3, #28]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	019b      	lsls	r3, r3, #6
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e8:	085b      	lsrs	r3, r3, #1
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	041b      	lsls	r3, r3, #16
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	061b      	lsls	r3, r3, #24
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fc:	071b      	lsls	r3, r3, #28
 800b4fe:	491b      	ldr	r1, [pc, #108]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b500:	4313      	orrs	r3, r2
 800b502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b504:	4b19      	ldr	r3, [pc, #100]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a18      	ldr	r2, [pc, #96]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b50a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b50e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b510:	f7fd fd48 	bl	8008fa4 <HAL_GetTick>
 800b514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b516:	e008      	b.n	800b52a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b518:	f7fd fd44 	bl	8008fa4 <HAL_GetTick>
 800b51c:	4602      	mov	r2, r0
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	2b02      	cmp	r3, #2
 800b524:	d901      	bls.n	800b52a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b526:	2303      	movs	r3, #3
 800b528:	e05f      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b52a:	4b10      	ldr	r3, [pc, #64]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b532:	2b00      	cmp	r3, #0
 800b534:	d0f0      	beq.n	800b518 <HAL_RCC_OscConfig+0x47c>
 800b536:	e057      	b.n	800b5e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b538:	4b0c      	ldr	r3, [pc, #48]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a0b      	ldr	r2, [pc, #44]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b53e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b544:	f7fd fd2e 	bl	8008fa4 <HAL_GetTick>
 800b548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b54a:	e008      	b.n	800b55e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b54c:	f7fd fd2a 	bl	8008fa4 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	2b02      	cmp	r3, #2
 800b558:	d901      	bls.n	800b55e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e045      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b55e:	4b03      	ldr	r3, [pc, #12]	; (800b56c <HAL_RCC_OscConfig+0x4d0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f0      	bne.n	800b54c <HAL_RCC_OscConfig+0x4b0>
 800b56a:	e03d      	b.n	800b5e8 <HAL_RCC_OscConfig+0x54c>
 800b56c:	40023800 	.word	0x40023800
 800b570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b574:	4b1f      	ldr	r3, [pc, #124]	; (800b5f4 <HAL_RCC_OscConfig+0x558>)
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d030      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d129      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d122      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b5aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d119      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ba:	085b      	lsrs	r3, r3, #1
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d10f      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d107      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d001      	beq.n	800b5e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e000      	b.n	800b5ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	40023800 	.word	0x40023800

0800b5f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	e0d0      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b610:	4b6a      	ldr	r3, [pc, #424]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 030f 	and.w	r3, r3, #15
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d910      	bls.n	800b640 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b61e:	4b67      	ldr	r3, [pc, #412]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f023 020f 	bic.w	r2, r3, #15
 800b626:	4965      	ldr	r1, [pc, #404]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b62e:	4b63      	ldr	r3, [pc, #396]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d001      	beq.n	800b640 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e0b8      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0302 	and.w	r3, r3, #2
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d020      	beq.n	800b68e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b658:	4b59      	ldr	r3, [pc, #356]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	4a58      	ldr	r2, [pc, #352]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b65e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 0308 	and.w	r3, r3, #8
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d005      	beq.n	800b67c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b670:	4b53      	ldr	r3, [pc, #332]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	4a52      	ldr	r2, [pc, #328]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b67a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b67c:	4b50      	ldr	r3, [pc, #320]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	494d      	ldr	r1, [pc, #308]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d040      	beq.n	800b71c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d107      	bne.n	800b6b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6a2:	4b47      	ldr	r3, [pc, #284]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d115      	bne.n	800b6da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e07f      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d107      	bne.n	800b6ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6ba:	4b41      	ldr	r3, [pc, #260]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d109      	bne.n	800b6da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e073      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6ca:	4b3d      	ldr	r3, [pc, #244]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 0302 	and.w	r3, r3, #2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e06b      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b6da:	4b39      	ldr	r3, [pc, #228]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f023 0203 	bic.w	r2, r3, #3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	4936      	ldr	r1, [pc, #216]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ec:	f7fd fc5a 	bl	8008fa4 <HAL_GetTick>
 800b6f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6f2:	e00a      	b.n	800b70a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6f4:	f7fd fc56 	bl	8008fa4 <HAL_GetTick>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b702:	4293      	cmp	r3, r2
 800b704:	d901      	bls.n	800b70a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	e053      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b70a:	4b2d      	ldr	r3, [pc, #180]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f003 020c 	and.w	r2, r3, #12
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	429a      	cmp	r2, r3
 800b71a:	d1eb      	bne.n	800b6f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b71c:	4b27      	ldr	r3, [pc, #156]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 030f 	and.w	r3, r3, #15
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	429a      	cmp	r2, r3
 800b728:	d210      	bcs.n	800b74c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b72a:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f023 020f 	bic.w	r2, r3, #15
 800b732:	4922      	ldr	r1, [pc, #136]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	4313      	orrs	r3, r2
 800b738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b73a:	4b20      	ldr	r3, [pc, #128]	; (800b7bc <HAL_RCC_ClockConfig+0x1c4>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 030f 	and.w	r3, r3, #15
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d001      	beq.n	800b74c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e032      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0304 	and.w	r3, r3, #4
 800b754:	2b00      	cmp	r3, #0
 800b756:	d008      	beq.n	800b76a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b758:	4b19      	ldr	r3, [pc, #100]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	4916      	ldr	r1, [pc, #88]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b766:	4313      	orrs	r3, r2
 800b768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 0308 	and.w	r3, r3, #8
 800b772:	2b00      	cmp	r3, #0
 800b774:	d009      	beq.n	800b78a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b776:	4b12      	ldr	r3, [pc, #72]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	490e      	ldr	r1, [pc, #56]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b786:	4313      	orrs	r3, r2
 800b788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b78a:	f000 f821 	bl	800b7d0 <HAL_RCC_GetSysClockFreq>
 800b78e:	4602      	mov	r2, r0
 800b790:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	091b      	lsrs	r3, r3, #4
 800b796:	f003 030f 	and.w	r3, r3, #15
 800b79a:	490a      	ldr	r1, [pc, #40]	; (800b7c4 <HAL_RCC_ClockConfig+0x1cc>)
 800b79c:	5ccb      	ldrb	r3, [r1, r3]
 800b79e:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a2:	4a09      	ldr	r2, [pc, #36]	; (800b7c8 <HAL_RCC_ClockConfig+0x1d0>)
 800b7a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b7a6:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <HAL_RCC_ClockConfig+0x1d4>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7f8 f9ba 	bl	8003b24 <HAL_InitTick>

  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	40023c00 	.word	0x40023c00
 800b7c0:	40023800 	.word	0x40023800
 800b7c4:	08015998 	.word	0x08015998
 800b7c8:	20000008 	.word	0x20000008
 800b7cc:	2000000c 	.word	0x2000000c

0800b7d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7d0:	b5b0      	push	{r4, r5, r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6079      	str	r1, [r7, #4]
 800b7da:	2100      	movs	r1, #0
 800b7dc:	60f9      	str	r1, [r7, #12]
 800b7de:	2100      	movs	r1, #0
 800b7e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7e6:	4952      	ldr	r1, [pc, #328]	; (800b930 <HAL_RCC_GetSysClockFreq+0x160>)
 800b7e8:	6889      	ldr	r1, [r1, #8]
 800b7ea:	f001 010c 	and.w	r1, r1, #12
 800b7ee:	2908      	cmp	r1, #8
 800b7f0:	d00d      	beq.n	800b80e <HAL_RCC_GetSysClockFreq+0x3e>
 800b7f2:	2908      	cmp	r1, #8
 800b7f4:	f200 8094 	bhi.w	800b920 <HAL_RCC_GetSysClockFreq+0x150>
 800b7f8:	2900      	cmp	r1, #0
 800b7fa:	d002      	beq.n	800b802 <HAL_RCC_GetSysClockFreq+0x32>
 800b7fc:	2904      	cmp	r1, #4
 800b7fe:	d003      	beq.n	800b808 <HAL_RCC_GetSysClockFreq+0x38>
 800b800:	e08e      	b.n	800b920 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b802:	4b4c      	ldr	r3, [pc, #304]	; (800b934 <HAL_RCC_GetSysClockFreq+0x164>)
 800b804:	60bb      	str	r3, [r7, #8]
      break;
 800b806:	e08e      	b.n	800b926 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b808:	4b4b      	ldr	r3, [pc, #300]	; (800b938 <HAL_RCC_GetSysClockFreq+0x168>)
 800b80a:	60bb      	str	r3, [r7, #8]
      break;
 800b80c:	e08b      	b.n	800b926 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b80e:	4948      	ldr	r1, [pc, #288]	; (800b930 <HAL_RCC_GetSysClockFreq+0x160>)
 800b810:	6849      	ldr	r1, [r1, #4]
 800b812:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b816:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b818:	4945      	ldr	r1, [pc, #276]	; (800b930 <HAL_RCC_GetSysClockFreq+0x160>)
 800b81a:	6849      	ldr	r1, [r1, #4]
 800b81c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b820:	2900      	cmp	r1, #0
 800b822:	d024      	beq.n	800b86e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b824:	4942      	ldr	r1, [pc, #264]	; (800b930 <HAL_RCC_GetSysClockFreq+0x160>)
 800b826:	6849      	ldr	r1, [r1, #4]
 800b828:	0989      	lsrs	r1, r1, #6
 800b82a:	4608      	mov	r0, r1
 800b82c:	f04f 0100 	mov.w	r1, #0
 800b830:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b834:	f04f 0500 	mov.w	r5, #0
 800b838:	ea00 0204 	and.w	r2, r0, r4
 800b83c:	ea01 0305 	and.w	r3, r1, r5
 800b840:	493d      	ldr	r1, [pc, #244]	; (800b938 <HAL_RCC_GetSysClockFreq+0x168>)
 800b842:	fb01 f003 	mul.w	r0, r1, r3
 800b846:	2100      	movs	r1, #0
 800b848:	fb01 f102 	mul.w	r1, r1, r2
 800b84c:	1844      	adds	r4, r0, r1
 800b84e:	493a      	ldr	r1, [pc, #232]	; (800b938 <HAL_RCC_GetSysClockFreq+0x168>)
 800b850:	fba2 0101 	umull	r0, r1, r2, r1
 800b854:	1863      	adds	r3, r4, r1
 800b856:	4619      	mov	r1, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	461a      	mov	r2, r3
 800b85c:	f04f 0300 	mov.w	r3, #0
 800b860:	f7f4 fda6 	bl	80003b0 <__aeabi_uldivmod>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4613      	mov	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	e04a      	b.n	800b904 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b86e:	4b30      	ldr	r3, [pc, #192]	; (800b930 <HAL_RCC_GetSysClockFreq+0x160>)
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	099b      	lsrs	r3, r3, #6
 800b874:	461a      	mov	r2, r3
 800b876:	f04f 0300 	mov.w	r3, #0
 800b87a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b87e:	f04f 0100 	mov.w	r1, #0
 800b882:	ea02 0400 	and.w	r4, r2, r0
 800b886:	ea03 0501 	and.w	r5, r3, r1
 800b88a:	4620      	mov	r0, r4
 800b88c:	4629      	mov	r1, r5
 800b88e:	f04f 0200 	mov.w	r2, #0
 800b892:	f04f 0300 	mov.w	r3, #0
 800b896:	014b      	lsls	r3, r1, #5
 800b898:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b89c:	0142      	lsls	r2, r0, #5
 800b89e:	4610      	mov	r0, r2
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	1b00      	subs	r0, r0, r4
 800b8a4:	eb61 0105 	sbc.w	r1, r1, r5
 800b8a8:	f04f 0200 	mov.w	r2, #0
 800b8ac:	f04f 0300 	mov.w	r3, #0
 800b8b0:	018b      	lsls	r3, r1, #6
 800b8b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b8b6:	0182      	lsls	r2, r0, #6
 800b8b8:	1a12      	subs	r2, r2, r0
 800b8ba:	eb63 0301 	sbc.w	r3, r3, r1
 800b8be:	f04f 0000 	mov.w	r0, #0
 800b8c2:	f04f 0100 	mov.w	r1, #0
 800b8c6:	00d9      	lsls	r1, r3, #3
 800b8c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b8cc:	00d0      	lsls	r0, r2, #3
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	1912      	adds	r2, r2, r4
 800b8d4:	eb45 0303 	adc.w	r3, r5, r3
 800b8d8:	f04f 0000 	mov.w	r0, #0
 800b8dc:	f04f 0100 	mov.w	r1, #0
 800b8e0:	0299      	lsls	r1, r3, #10
 800b8e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b8e6:	0290      	lsls	r0, r2, #10
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	f04f 0300 	mov.w	r3, #0
 800b8f8:	f7f4 fd5a 	bl	80003b0 <__aeabi_uldivmod>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4613      	mov	r3, r2
 800b902:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b904:	4b0a      	ldr	r3, [pc, #40]	; (800b930 <HAL_RCC_GetSysClockFreq+0x160>)
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	0c1b      	lsrs	r3, r3, #16
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	3301      	adds	r3, #1
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91c:	60bb      	str	r3, [r7, #8]
      break;
 800b91e:	e002      	b.n	800b926 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b920:	4b04      	ldr	r3, [pc, #16]	; (800b934 <HAL_RCC_GetSysClockFreq+0x164>)
 800b922:	60bb      	str	r3, [r7, #8]
      break;
 800b924:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b926:	68bb      	ldr	r3, [r7, #8]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bdb0      	pop	{r4, r5, r7, pc}
 800b930:	40023800 	.word	0x40023800
 800b934:	00f42400 	.word	0x00f42400
 800b938:	017d7840 	.word	0x017d7840

0800b93c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b93c:	b480      	push	{r7}
 800b93e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b940:	4b03      	ldr	r3, [pc, #12]	; (800b950 <HAL_RCC_GetHCLKFreq+0x14>)
 800b942:	681b      	ldr	r3, [r3, #0]
}
 800b944:	4618      	mov	r0, r3
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	20000008 	.word	0x20000008

0800b954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b958:	f7ff fff0 	bl	800b93c <HAL_RCC_GetHCLKFreq>
 800b95c:	4602      	mov	r2, r0
 800b95e:	4b05      	ldr	r3, [pc, #20]	; (800b974 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	0a9b      	lsrs	r3, r3, #10
 800b964:	f003 0307 	and.w	r3, r3, #7
 800b968:	4903      	ldr	r1, [pc, #12]	; (800b978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b96a:	5ccb      	ldrb	r3, [r1, r3]
 800b96c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b970:	4618      	mov	r0, r3
 800b972:	bd80      	pop	{r7, pc}
 800b974:	40023800 	.word	0x40023800
 800b978:	080159a8 	.word	0x080159a8

0800b97c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b980:	f7ff ffdc 	bl	800b93c <HAL_RCC_GetHCLKFreq>
 800b984:	4602      	mov	r2, r0
 800b986:	4b05      	ldr	r3, [pc, #20]	; (800b99c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	0b5b      	lsrs	r3, r3, #13
 800b98c:	f003 0307 	and.w	r3, r3, #7
 800b990:	4903      	ldr	r1, [pc, #12]	; (800b9a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b992:	5ccb      	ldrb	r3, [r1, r3]
 800b994:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b998:	4618      	mov	r0, r3
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	40023800 	.word	0x40023800
 800b9a0:	080159a8 	.word	0x080159a8

0800b9a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	220f      	movs	r2, #15
 800b9b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b9b4:	4b12      	ldr	r3, [pc, #72]	; (800ba00 <HAL_RCC_GetClockConfig+0x5c>)
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f003 0203 	and.w	r2, r3, #3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <HAL_RCC_GetClockConfig+0x5c>)
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <HAL_RCC_GetClockConfig+0x5c>)
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b9d8:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <HAL_RCC_GetClockConfig+0x5c>)
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	08db      	lsrs	r3, r3, #3
 800b9de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b9e6:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <HAL_RCC_GetClockConfig+0x60>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 020f 	and.w	r2, r3, #15
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	601a      	str	r2, [r3, #0]
}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	40023800 	.word	0x40023800
 800ba04:	40023c00 	.word	0x40023c00

0800ba08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ba20:	2300      	movs	r3, #0
 800ba22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d012      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ba30:	4b69      	ldr	r3, [pc, #420]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	4a68      	ldr	r2, [pc, #416]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba3a:	6093      	str	r3, [r2, #8]
 800ba3c:	4b66      	ldr	r3, [pc, #408]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba3e:	689a      	ldr	r2, [r3, #8]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba44:	4964      	ldr	r1, [pc, #400]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ba52:	2301      	movs	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d017      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba62:	4b5d      	ldr	r3, [pc, #372]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba70:	4959      	ldr	r1, [pc, #356]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba72:	4313      	orrs	r3, r2
 800ba74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba80:	d101      	bne.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ba82:	2301      	movs	r3, #1
 800ba84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d017      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba9e:	4b4e      	ldr	r3, [pc, #312]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baac:	494a      	ldr	r1, [pc, #296]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800babc:	d101      	bne.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800babe:	2301      	movs	r3, #1
 800bac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800baca:	2301      	movs	r3, #1
 800bacc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bada:	2301      	movs	r3, #1
 800badc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 0320 	and.w	r3, r3, #32
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 808b 	beq.w	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800baec:	4b3a      	ldr	r3, [pc, #232]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf0:	4a39      	ldr	r2, [pc, #228]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baf6:	6413      	str	r3, [r2, #64]	; 0x40
 800baf8:	4b37      	ldr	r3, [pc, #220]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb00:	60bb      	str	r3, [r7, #8]
 800bb02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb04:	4b35      	ldr	r3, [pc, #212]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a34      	ldr	r2, [pc, #208]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb10:	f7fd fa48 	bl	8008fa4 <HAL_GetTick>
 800bb14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bb16:	e008      	b.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb18:	f7fd fa44 	bl	8008fa4 <HAL_GetTick>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	2b64      	cmp	r3, #100	; 0x64
 800bb24:	d901      	bls.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bb26:	2303      	movs	r3, #3
 800bb28:	e38f      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bb2a:	4b2c      	ldr	r3, [pc, #176]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0f0      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bb36:	4b28      	ldr	r3, [pc, #160]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d035      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d02e      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb54:	4b20      	ldr	r3, [pc, #128]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bb5e:	4b1e      	ldr	r3, [pc, #120]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb62:	4a1d      	ldr	r2, [pc, #116]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bb6a:	4b1b      	ldr	r3, [pc, #108]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb6e:	4a1a      	ldr	r2, [pc, #104]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bb76:	4a18      	ldr	r2, [pc, #96]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bb7c:	4b16      	ldr	r3, [pc, #88]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d114      	bne.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb88:	f7fd fa0c 	bl	8008fa4 <HAL_GetTick>
 800bb8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb8e:	e00a      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb90:	f7fd fa08 	bl	8008fa4 <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d901      	bls.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e351      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bba6:	4b0c      	ldr	r3, [pc, #48]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0ee      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbbe:	d111      	bne.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bbcc:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bbce:	400b      	ands	r3, r1
 800bbd0:	4901      	ldr	r1, [pc, #4]	; (800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	608b      	str	r3, [r1, #8]
 800bbd6:	e00b      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bbd8:	40023800 	.word	0x40023800
 800bbdc:	40007000 	.word	0x40007000
 800bbe0:	0ffffcff 	.word	0x0ffffcff
 800bbe4:	4bb3      	ldr	r3, [pc, #716]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	4ab2      	ldr	r2, [pc, #712]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bbee:	6093      	str	r3, [r2, #8]
 800bbf0:	4bb0      	ldr	r3, [pc, #704]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbfc:	49ad      	ldr	r1, [pc, #692]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f003 0310 	and.w	r3, r3, #16
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d010      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc0e:	4ba9      	ldr	r3, [pc, #676]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc14:	4aa7      	ldr	r2, [pc, #668]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bc1e:	4ba5      	ldr	r3, [pc, #660]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc28:	49a2      	ldr	r1, [pc, #648]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00a      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc3c:	4b9d      	ldr	r3, [pc, #628]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc4a:	499a      	ldr	r1, [pc, #616]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00a      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bc5e:	4b95      	ldr	r3, [pc, #596]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc6c:	4991      	ldr	r1, [pc, #580]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00a      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bc80:	4b8c      	ldr	r3, [pc, #560]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc8e:	4989      	ldr	r1, [pc, #548]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc90:	4313      	orrs	r3, r2
 800bc92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bca2:	4b84      	ldr	r3, [pc, #528]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb0:	4980      	ldr	r1, [pc, #512]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00a      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bcc4:	4b7b      	ldr	r3, [pc, #492]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcca:	f023 0203 	bic.w	r2, r3, #3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd2:	4978      	ldr	r1, [pc, #480]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00a      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bce6:	4b73      	ldr	r3, [pc, #460]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcec:	f023 020c 	bic.w	r2, r3, #12
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf4:	496f      	ldr	r1, [pc, #444]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00a      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd08:	4b6a      	ldr	r3, [pc, #424]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd16:	4967      	ldr	r1, [pc, #412]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd2a:	4b62      	ldr	r3, [pc, #392]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd38:	495e      	ldr	r1, [pc, #376]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00a      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bd4c:	4b59      	ldr	r3, [pc, #356]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd5a:	4956      	ldr	r1, [pc, #344]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00a      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bd6e:	4b51      	ldr	r3, [pc, #324]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd7c:	494d      	ldr	r1, [pc, #308]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00a      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bd90:	4b48      	ldr	r3, [pc, #288]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd9e:	4945      	ldr	r1, [pc, #276]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bda0:	4313      	orrs	r3, r2
 800bda2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bdb2:	4b40      	ldr	r3, [pc, #256]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdc0:	493c      	ldr	r1, [pc, #240]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00a      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bdd4:	4b37      	ldr	r3, [pc, #220]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bde2:	4934      	ldr	r1, [pc, #208]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bde4:	4313      	orrs	r3, r2
 800bde6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d011      	beq.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bdf6:	4b2f      	ldr	r3, [pc, #188]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be04:	492b      	ldr	r1, [pc, #172]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be06:	4313      	orrs	r3, r2
 800be08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be14:	d101      	bne.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800be16:	2301      	movs	r3, #1
 800be18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f003 0308 	and.w	r3, r3, #8
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800be26:	2301      	movs	r3, #1
 800be28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be36:	4b1f      	ldr	r3, [pc, #124]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be44:	491b      	ldr	r1, [pc, #108]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be46:	4313      	orrs	r3, r2
 800be48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800be58:	4b16      	ldr	r3, [pc, #88]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be68:	4912      	ldr	r1, [pc, #72]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800be7c:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be8c:	4909      	ldr	r1, [pc, #36]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00f      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bea0:	4b04      	ldr	r3, [pc, #16]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb0:	e002      	b.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800beb2:	bf00      	nop
 800beb4:	40023800 	.word	0x40023800
 800beb8:	4986      	ldr	r1, [pc, #536]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800beba:	4313      	orrs	r3, r2
 800bebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800becc:	4b81      	ldr	r3, [pc, #516]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bedc:	497d      	ldr	r1, [pc, #500]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d006      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 80d6 	beq.w	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bef8:	4b76      	ldr	r3, [pc, #472]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a75      	ldr	r2, [pc, #468]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800befe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf04:	f7fd f84e 	bl	8008fa4 <HAL_GetTick>
 800bf08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf0a:	e008      	b.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bf0c:	f7fd f84a 	bl	8008fa4 <HAL_GetTick>
 800bf10:	4602      	mov	r2, r0
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	2b64      	cmp	r3, #100	; 0x64
 800bf18:	d901      	bls.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e195      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf1e:	4b6d      	ldr	r3, [pc, #436]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1f0      	bne.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d021      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d11d      	bne.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bf3e:	4b65      	ldr	r3, [pc, #404]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf44:	0c1b      	lsrs	r3, r3, #16
 800bf46:	f003 0303 	and.w	r3, r3, #3
 800bf4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bf4c:	4b61      	ldr	r3, [pc, #388]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf52:	0e1b      	lsrs	r3, r3, #24
 800bf54:	f003 030f 	and.w	r3, r3, #15
 800bf58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	019a      	lsls	r2, r3, #6
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	041b      	lsls	r3, r3, #16
 800bf64:	431a      	orrs	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	061b      	lsls	r3, r3, #24
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	071b      	lsls	r3, r3, #28
 800bf72:	4958      	ldr	r1, [pc, #352]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d004      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf8e:	d00a      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d02e      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfa4:	d129      	bne.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bfa6:	4b4b      	ldr	r3, [pc, #300]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfac:	0c1b      	lsrs	r3, r3, #16
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bfb4:	4b47      	ldr	r3, [pc, #284]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfba:	0f1b      	lsrs	r3, r3, #28
 800bfbc:	f003 0307 	and.w	r3, r3, #7
 800bfc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	019a      	lsls	r2, r3, #6
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	041b      	lsls	r3, r3, #16
 800bfcc:	431a      	orrs	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	061b      	lsls	r3, r3, #24
 800bfd4:	431a      	orrs	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	071b      	lsls	r3, r3, #28
 800bfda:	493e      	ldr	r1, [pc, #248]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bfe2:	4b3c      	ldr	r3, [pc, #240]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfe8:	f023 021f 	bic.w	r2, r3, #31
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	3b01      	subs	r3, #1
 800bff2:	4938      	ldr	r1, [pc, #224]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bff4:	4313      	orrs	r3, r2
 800bff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d01d      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c006:	4b33      	ldr	r3, [pc, #204]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c00c:	0e1b      	lsrs	r3, r3, #24
 800c00e:	f003 030f 	and.w	r3, r3, #15
 800c012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c014:	4b2f      	ldr	r3, [pc, #188]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c01a:	0f1b      	lsrs	r3, r3, #28
 800c01c:	f003 0307 	and.w	r3, r3, #7
 800c020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	019a      	lsls	r2, r3, #6
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	041b      	lsls	r3, r3, #16
 800c02e:	431a      	orrs	r2, r3
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	061b      	lsls	r3, r3, #24
 800c034:	431a      	orrs	r2, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	071b      	lsls	r3, r3, #28
 800c03a:	4926      	ldr	r1, [pc, #152]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c03c:	4313      	orrs	r3, r2
 800c03e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d011      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	019a      	lsls	r2, r3, #6
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	041b      	lsls	r3, r3, #16
 800c05a:	431a      	orrs	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	061b      	lsls	r3, r3, #24
 800c062:	431a      	orrs	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	071b      	lsls	r3, r3, #28
 800c06a:	491a      	ldr	r1, [pc, #104]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c072:	4b18      	ldr	r3, [pc, #96]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a17      	ldr	r2, [pc, #92]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c07e:	f7fc ff91 	bl	8008fa4 <HAL_GetTick>
 800c082:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c084:	e008      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c086:	f7fc ff8d 	bl	8008fa4 <HAL_GetTick>
 800c08a:	4602      	mov	r2, r0
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	2b64      	cmp	r3, #100	; 0x64
 800c092:	d901      	bls.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c094:	2303      	movs	r3, #3
 800c096:	e0d8      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c098:	4b0e      	ldr	r3, [pc, #56]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0f0      	beq.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	f040 80ce 	bne.w	800c248 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c0ac:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a08      	ldr	r2, [pc, #32]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0b8:	f7fc ff74 	bl	8008fa4 <HAL_GetTick>
 800c0bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c0be:	e00b      	b.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c0c0:	f7fc ff70 	bl	8008fa4 <HAL_GetTick>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2b64      	cmp	r3, #100	; 0x64
 800c0cc:	d904      	bls.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	e0bb      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c0d2:	bf00      	nop
 800c0d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c0d8:	4b5e      	ldr	r3, [pc, #376]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e4:	d0ec      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d009      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c102:	2b00      	cmp	r3, #0
 800c104:	d02e      	beq.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d12a      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c10e:	4b51      	ldr	r3, [pc, #324]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c114:	0c1b      	lsrs	r3, r3, #16
 800c116:	f003 0303 	and.w	r3, r3, #3
 800c11a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c11c:	4b4d      	ldr	r3, [pc, #308]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c122:	0f1b      	lsrs	r3, r3, #28
 800c124:	f003 0307 	and.w	r3, r3, #7
 800c128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	019a      	lsls	r2, r3, #6
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	041b      	lsls	r3, r3, #16
 800c134:	431a      	orrs	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	061b      	lsls	r3, r3, #24
 800c13c:	431a      	orrs	r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	071b      	lsls	r3, r3, #28
 800c142:	4944      	ldr	r1, [pc, #272]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c144:	4313      	orrs	r3, r2
 800c146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c14a:	4b42      	ldr	r3, [pc, #264]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c150:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c158:	3b01      	subs	r3, #1
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	493d      	ldr	r1, [pc, #244]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d022      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c178:	d11d      	bne.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c17a:	4b36      	ldr	r3, [pc, #216]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c180:	0e1b      	lsrs	r3, r3, #24
 800c182:	f003 030f 	and.w	r3, r3, #15
 800c186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c188:	4b32      	ldr	r3, [pc, #200]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c18e:	0f1b      	lsrs	r3, r3, #28
 800c190:	f003 0307 	and.w	r3, r3, #7
 800c194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	019a      	lsls	r2, r3, #6
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	041b      	lsls	r3, r3, #16
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	061b      	lsls	r3, r3, #24
 800c1a8:	431a      	orrs	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	071b      	lsls	r3, r3, #28
 800c1ae:	4929      	ldr	r1, [pc, #164]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 0308 	and.w	r3, r3, #8
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d028      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c1c2:	4b24      	ldr	r3, [pc, #144]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1c8:	0e1b      	lsrs	r3, r3, #24
 800c1ca:	f003 030f 	and.w	r3, r3, #15
 800c1ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c1d0:	4b20      	ldr	r3, [pc, #128]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d6:	0c1b      	lsrs	r3, r3, #16
 800c1d8:	f003 0303 	and.w	r3, r3, #3
 800c1dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	695b      	ldr	r3, [r3, #20]
 800c1e2:	019a      	lsls	r2, r3, #6
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	041b      	lsls	r3, r3, #16
 800c1e8:	431a      	orrs	r2, r3
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	061b      	lsls	r3, r3, #24
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	69db      	ldr	r3, [r3, #28]
 800c1f4:	071b      	lsls	r3, r3, #28
 800c1f6:	4917      	ldr	r1, [pc, #92]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c1fe:	4b15      	ldr	r3, [pc, #84]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	4911      	ldr	r1, [pc, #68]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c20e:	4313      	orrs	r3, r2
 800c210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c214:	4b0f      	ldr	r3, [pc, #60]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a0e      	ldr	r2, [pc, #56]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c21a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c21e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c220:	f7fc fec0 	bl	8008fa4 <HAL_GetTick>
 800c224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c226:	e008      	b.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c228:	f7fc febc 	bl	8008fa4 <HAL_GetTick>
 800c22c:	4602      	mov	r2, r0
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	2b64      	cmp	r3, #100	; 0x64
 800c234:	d901      	bls.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	e007      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c23a:	4b06      	ldr	r3, [pc, #24]	; (800c254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c246:	d1ef      	bne.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	40023800 	.word	0x40023800

0800c258 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c276:	f040 80a3 	bne.w	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c27a:	4bac      	ldr	r3, [pc, #688]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c280:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c288:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c290:	f000 808a 	beq.w	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c29a:	f200 8093 	bhi.w	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2a4:	d07d      	beq.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2ac:	f200 808a 	bhi.w	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d004      	beq.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2bc:	d039      	beq.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c2be:	e081      	b.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c2c0:	4b9a      	ldr	r3, [pc, #616]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d108      	bne.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c2cc:	4b97      	ldr	r3, [pc, #604]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2d4:	4a96      	ldr	r2, [pc, #600]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2da:	613b      	str	r3, [r7, #16]
 800c2dc:	e007      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c2de:	4b93      	ldr	r3, [pc, #588]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2e6:	4a93      	ldr	r2, [pc, #588]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c2ee:	4b8f      	ldr	r3, [pc, #572]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c2f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2f4:	0e1b      	lsrs	r3, r3, #24
 800c2f6:	f003 030f 	and.w	r3, r3, #15
 800c2fa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c2fc:	4b8b      	ldr	r3, [pc, #556]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c302:	099b      	lsrs	r3, r3, #6
 800c304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	fb02 f203 	mul.w	r2, r2, r3
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	fbb2 f3f3 	udiv	r3, r2, r3
 800c314:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c316:	4b85      	ldr	r3, [pc, #532]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c31c:	0a1b      	lsrs	r3, r3, #8
 800c31e:	f003 031f 	and.w	r3, r3, #31
 800c322:	3301      	adds	r3, #1
 800c324:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32e:	617b      	str	r3, [r7, #20]
        break;
 800c330:	e049      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c332:	4b7e      	ldr	r3, [pc, #504]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d108      	bne.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c33e:	4b7b      	ldr	r3, [pc, #492]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c346:	4a7a      	ldr	r2, [pc, #488]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c348:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34c:	613b      	str	r3, [r7, #16]
 800c34e:	e007      	b.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c350:	4b76      	ldr	r3, [pc, #472]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c358:	4a76      	ldr	r2, [pc, #472]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c35e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c360:	4b72      	ldr	r3, [pc, #456]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c366:	0e1b      	lsrs	r3, r3, #24
 800c368:	f003 030f 	and.w	r3, r3, #15
 800c36c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c36e:	4b6f      	ldr	r3, [pc, #444]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c374:	099b      	lsrs	r3, r3, #6
 800c376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	fb02 f203 	mul.w	r2, r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	fbb2 f3f3 	udiv	r3, r2, r3
 800c386:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c388:	4b68      	ldr	r3, [pc, #416]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38e:	f003 031f 	and.w	r3, r3, #31
 800c392:	3301      	adds	r3, #1
 800c394:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c39e:	617b      	str	r3, [r7, #20]
        break;
 800c3a0:	e011      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3a2:	4b65      	ldr	r3, [pc, #404]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800c3a4:	617b      	str	r3, [r7, #20]
        break;
 800c3a6:	e00e      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c3a8:	4b60      	ldr	r3, [pc, #384]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d102      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800c3b4:	4b5e      	ldr	r3, [pc, #376]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c3b6:	617b      	str	r3, [r7, #20]
        break;
 800c3b8:	e005      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800c3ba:	4b5e      	ldr	r3, [pc, #376]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c3bc:	617b      	str	r3, [r7, #20]
        break;
 800c3be:	e002      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800c3c0:	bf00      	nop
 800c3c2:	e000      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 800c3c4:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3cc:	f040 80a3 	bne.w	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c3d0:	4b56      	ldr	r3, [pc, #344]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3d6:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c3de:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c3e6:	f000 808a 	beq.w	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c3f0:	f200 8093 	bhi.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3fa:	d07d      	beq.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c402:	f200 808a 	bhi.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d004      	beq.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c412:	d039      	beq.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c414:	e081      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c416:	4b45      	ldr	r3, [pc, #276]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d108      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c422:	4b42      	ldr	r3, [pc, #264]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c42a:	4a41      	ldr	r2, [pc, #260]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c42c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c430:	613b      	str	r3, [r7, #16]
 800c432:	e007      	b.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c434:	4b3d      	ldr	r3, [pc, #244]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c43c:	4a3d      	ldr	r2, [pc, #244]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c442:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c444:	4b39      	ldr	r3, [pc, #228]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c44a:	0e1b      	lsrs	r3, r3, #24
 800c44c:	f003 030f 	and.w	r3, r3, #15
 800c450:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c452:	4b36      	ldr	r3, [pc, #216]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c458:	099b      	lsrs	r3, r3, #6
 800c45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	fb02 f203 	mul.w	r2, r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	fbb2 f3f3 	udiv	r3, r2, r3
 800c46a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c46c:	4b2f      	ldr	r3, [pc, #188]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c472:	0a1b      	lsrs	r3, r3, #8
 800c474:	f003 031f 	and.w	r3, r3, #31
 800c478:	3301      	adds	r3, #1
 800c47a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	fbb2 f3f3 	udiv	r3, r2, r3
 800c484:	617b      	str	r3, [r7, #20]
        break;
 800c486:	e049      	b.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c488:	4b28      	ldr	r3, [pc, #160]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d108      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c494:	4b25      	ldr	r3, [pc, #148]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c49c:	4a24      	ldr	r2, [pc, #144]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a2:	613b      	str	r3, [r7, #16]
 800c4a4:	e007      	b.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c4a6:	4b21      	ldr	r3, [pc, #132]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4ae:	4a21      	ldr	r2, [pc, #132]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c4b6:	4b1d      	ldr	r3, [pc, #116]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4bc:	0e1b      	lsrs	r3, r3, #24
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c4c4:	4b19      	ldr	r3, [pc, #100]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ca:	099b      	lsrs	r3, r3, #6
 800c4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	fb02 f203 	mul.w	r2, r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4dc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c4de:	4b13      	ldr	r3, [pc, #76]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4e4:	f003 031f 	and.w	r3, r3, #31
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4f4:	617b      	str	r3, [r7, #20]
        break;
 800c4f6:	e011      	b.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4f8:	4b0f      	ldr	r3, [pc, #60]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800c4fa:	617b      	str	r3, [r7, #20]
        break;
 800c4fc:	e00e      	b.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800c50a:	4b09      	ldr	r3, [pc, #36]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c50c:	617b      	str	r3, [r7, #20]
        break;
 800c50e:	e005      	b.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 800c510:	4b08      	ldr	r3, [pc, #32]	; (800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c512:	617b      	str	r3, [r7, #20]
        break;
 800c514:	e002      	b.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 800c516:	bf00      	nop
 800c518:	e000      	b.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 800c51a:	bf00      	nop

  return frequency;
 800c51c:	697b      	ldr	r3, [r7, #20]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	371c      	adds	r7, #28
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	40023800 	.word	0x40023800
 800c530:	00f42400 	.word	0x00f42400
 800c534:	017d7840 	.word	0x017d7840
 800c538:	00bb8000 	.word	0x00bb8000

0800c53c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b02      	cmp	r3, #2
 800c552:	d904      	bls.n	800c55e <HAL_SAI_InitProtocol+0x22>
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	3b03      	subs	r3, #3
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d812      	bhi.n	800c582 <HAL_SAI_InitProtocol+0x46>
 800c55c:	e008      	b.n	800c570 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	68b9      	ldr	r1, [r7, #8]
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f000 fac9 	bl	800cafc <SAI_InitI2S>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
      break;
 800c56e:	e00b      	b.n	800c588 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	68b9      	ldr	r1, [r7, #8]
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f000 fb6e 	bl	800cc58 <SAI_InitPCM>
 800c57c:	4603      	mov	r3, r0
 800c57e:	75fb      	strb	r3, [r7, #23]
      break;
 800c580:	e002      	b.n	800c588 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	75fb      	strb	r3, [r7, #23]
      break;
 800c586:	bf00      	nop
  }

  if (status == HAL_OK)
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d104      	bne.n	800c598 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f000 f808 	bl	800c5a4 <HAL_SAI_Init>
 800c594:	4603      	mov	r3, r0
 800c596:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c598:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
	...

0800c5a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b088      	sub	sp, #32
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e156      	b.n	800c870 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7f7 fa30 	bl	8003a3c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fbed 	bl	800cdc4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d00c      	beq.n	800c60c <HAL_SAI_Init+0x68>
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d80d      	bhi.n	800c612 <HAL_SAI_Init+0x6e>
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d002      	beq.n	800c600 <HAL_SAI_Init+0x5c>
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d003      	beq.n	800c606 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c5fe:	e008      	b.n	800c612 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	61fb      	str	r3, [r7, #28]
      break;
 800c604:	e006      	b.n	800c614 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c606:	2310      	movs	r3, #16
 800c608:	61fb      	str	r3, [r7, #28]
      break;
 800c60a:	e003      	b.n	800c614 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c60c:	2320      	movs	r3, #32
 800c60e:	61fb      	str	r3, [r7, #28]
      break;
 800c610:	e000      	b.n	800c614 <HAL_SAI_Init+0x70>
      break;
 800c612:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d81e      	bhi.n	800c65a <HAL_SAI_Init+0xb6>
 800c61c:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <HAL_SAI_Init+0x80>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c635 	.word	0x0800c635
 800c628:	0800c63b 	.word	0x0800c63b
 800c62c:	0800c643 	.word	0x0800c643
 800c630:	0800c64b 	.word	0x0800c64b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	617b      	str	r3, [r7, #20]
    }
    break;
 800c638:	e010      	b.n	800c65c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c63e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c640:	e00c      	b.n	800c65c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c646:	617b      	str	r3, [r7, #20]
    }
    break;
 800c648:	e008      	b.n	800c65c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c64a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c64e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	f043 0301 	orr.w	r3, r3, #1
 800c656:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c658:	e000      	b.n	800c65c <HAL_SAI_Init+0xb8>
    default:
      break;
 800c65a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a85      	ldr	r2, [pc, #532]	; (800c878 <HAL_SAI_Init+0x2d4>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d004      	beq.n	800c670 <HAL_SAI_Init+0xcc>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a84      	ldr	r2, [pc, #528]	; (800c87c <HAL_SAI_Init+0x2d8>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d103      	bne.n	800c678 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c670:	4a83      	ldr	r2, [pc, #524]	; (800c880 <HAL_SAI_Init+0x2dc>)
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	e002      	b.n	800c67e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c678:	4a82      	ldr	r2, [pc, #520]	; (800c884 <HAL_SAI_Init+0x2e0>)
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d04c      	beq.n	800c720 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a7a      	ldr	r2, [pc, #488]	; (800c878 <HAL_SAI_Init+0x2d4>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d004      	beq.n	800c69e <HAL_SAI_Init+0xfa>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a78      	ldr	r2, [pc, #480]	; (800c87c <HAL_SAI_Init+0x2d8>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d104      	bne.n	800c6a8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c69e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c6a2:	f7ff fdd9 	bl	800c258 <HAL_RCCEx_GetPeriphCLKFreq>
 800c6a6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a76      	ldr	r2, [pc, #472]	; (800c888 <HAL_SAI_Init+0x2e4>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d004      	beq.n	800c6bc <HAL_SAI_Init+0x118>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a75      	ldr	r2, [pc, #468]	; (800c88c <HAL_SAI_Init+0x2e8>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d104      	bne.n	800c6c6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c6bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c6c0:	f7ff fdca 	bl	800c258 <HAL_RCCEx_GetPeriphCLKFreq>
 800c6c4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c6c6:	693a      	ldr	r2, [r7, #16]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69db      	ldr	r3, [r3, #28]
 800c6d6:	025b      	lsls	r3, r3, #9
 800c6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6dc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4a6b      	ldr	r2, [pc, #428]	; (800c890 <HAL_SAI_Init+0x2ec>)
 800c6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e6:	08da      	lsrs	r2, r3, #3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c6ec:	68f9      	ldr	r1, [r7, #12]
 800c6ee:	4b68      	ldr	r3, [pc, #416]	; (800c890 <HAL_SAI_Init+0x2ec>)
 800c6f0:	fba3 2301 	umull	r2, r3, r3, r1
 800c6f4:	08da      	lsrs	r2, r3, #3
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	005b      	lsls	r3, r3, #1
 800c6fe:	1aca      	subs	r2, r1, r3
 800c700:	2a08      	cmp	r2, #8
 800c702:	d904      	bls.n	800c70e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c712:	2b04      	cmp	r3, #4
 800c714:	d104      	bne.n	800c720 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	085a      	lsrs	r2, r3, #1
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d003      	beq.n	800c730 <HAL_SAI_Init+0x18c>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d109      	bne.n	800c744 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c734:	2b01      	cmp	r3, #1
 800c736:	d101      	bne.n	800c73c <HAL_SAI_Init+0x198>
 800c738:	2300      	movs	r3, #0
 800c73a:	e001      	b.n	800c740 <HAL_SAI_Init+0x19c>
 800c73c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c740:	61bb      	str	r3, [r7, #24]
 800c742:	e008      	b.n	800c756 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d102      	bne.n	800c752 <HAL_SAI_Init+0x1ae>
 800c74c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c750:	e000      	b.n	800c754 <HAL_SAI_Init+0x1b0>
 800c752:	2300      	movs	r3, #0
 800c754:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6819      	ldr	r1, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	4b4c      	ldr	r3, [pc, #304]	; (800c894 <HAL_SAI_Init+0x2f0>)
 800c762:	400b      	ands	r3, r1
 800c764:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	6819      	ldr	r1, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c774:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c77a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	431a      	orrs	r2, r3
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800c78e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c79a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a1b      	ldr	r3, [r3, #32]
 800c7a0:	051b      	lsls	r3, r3, #20
 800c7a2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6859      	ldr	r1, [r3, #4]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	4b38      	ldr	r3, [pc, #224]	; (800c898 <HAL_SAI_Init+0x2f4>)
 800c7b8:	400b      	ands	r3, r1
 800c7ba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6859      	ldr	r1, [r3, #4]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	699a      	ldr	r2, [r3, #24]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ca:	431a      	orrs	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	431a      	orrs	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	430a      	orrs	r2, r1
 800c7d8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6899      	ldr	r1, [r3, #8]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	4b2d      	ldr	r3, [pc, #180]	; (800c89c <HAL_SAI_Init+0x2f8>)
 800c7e6:	400b      	ands	r3, r1
 800c7e8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6899      	ldr	r1, [r3, #8]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c7fa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800c800:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800c806:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c80c:	3b01      	subs	r3, #1
 800c80e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c810:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	430a      	orrs	r2, r1
 800c818:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68d9      	ldr	r1, [r3, #12]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c828:	400b      	ands	r3, r1
 800c82a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68d9      	ldr	r1, [r3, #12]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c83a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c840:	041b      	lsls	r3, r3, #16
 800c842:	431a      	orrs	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c848:	3b01      	subs	r3, #1
 800c84a:	021b      	lsls	r3, r3, #8
 800c84c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	430a      	orrs	r2, r1
 800c854:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3720      	adds	r7, #32
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	40015804 	.word	0x40015804
 800c87c:	40015824 	.word	0x40015824
 800c880:	40015800 	.word	0x40015800
 800c884:	40015c00 	.word	0x40015c00
 800c888:	40015c04 	.word	0x40015c04
 800c88c:	40015c24 	.word	0x40015c24
 800c890:	cccccccd 	.word	0xcccccccd
 800c894:	ff05c010 	.word	0xff05c010
 800c898:	ffff1ff0 	.word	0xffff1ff0
 800c89c:	fff88000 	.word	0xfff88000

0800c8a0 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d101      	bne.n	800c8ba <HAL_SAI_DMAStop+0x1a>
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	e061      	b.n	800c97e <HAL_SAI_DMAStop+0xde>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c8d0:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d01c      	beq.n	800c914 <HAL_SAI_DMAStop+0x74>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	2b12      	cmp	r3, #18
 800c8e4:	d116      	bne.n	800c914 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fd f930 	bl	8009b50 <HAL_DMA_Abort>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00e      	beq.n	800c914 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8fc:	2b80      	cmp	r3, #128	; 0x80
 800c8fe:	d009      	beq.n	800c914 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c90a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d01c      	beq.n	800c956 <HAL_SAI_DMAStop+0xb6>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b22      	cmp	r3, #34	; 0x22
 800c926:	d116      	bne.n	800c956 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fd f90f 	bl	8009b50 <HAL_DMA_Abort>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00e      	beq.n	800c956 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93e:	2b80      	cmp	r3, #128	; 0x80
 800c940:	d009      	beq.n	800c956 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c94c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fa34 	bl	800cdc4 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f042 0208 	orr.w	r2, r2, #8
 800c96a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
	...

0800c988 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	4613      	mov	r3, r2
 800c994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c996:	f7fc fb05 	bl	8008fa4 <HAL_GetTick>
 800c99a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <HAL_SAI_Transmit_DMA+0x20>
 800c9a2:	88fb      	ldrh	r3, [r7, #6]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e093      	b.n	800cad4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	f040 808c 	bne.w	800cad2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d101      	bne.n	800c9c8 <HAL_SAI_Transmit_DMA+0x40>
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	e085      	b.n	800cad4 <HAL_SAI_Transmit_DMA+0x14c>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	88fa      	ldrh	r2, [r7, #6]
 800c9da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	88fa      	ldrh	r2, [r7, #6]
 800c9e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2212      	movs	r2, #18
 800c9f2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9fa:	4a38      	ldr	r2, [pc, #224]	; (800cadc <HAL_SAI_Transmit_DMA+0x154>)
 800c9fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca02:	4a37      	ldr	r2, [pc, #220]	; (800cae0 <HAL_SAI_Transmit_DMA+0x158>)
 800ca04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca0a:	4a36      	ldr	r2, [pc, #216]	; (800cae4 <HAL_SAI_Transmit_DMA+0x15c>)
 800ca0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca12:	2200      	movs	r2, #0
 800ca14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca1e:	4619      	mov	r1, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	331c      	adds	r3, #28
 800ca26:	461a      	mov	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca2e:	f7fd f82f 	bl	8009a90 <HAL_DMA_Start_IT>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d005      	beq.n	800ca44 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ca40:	2301      	movs	r3, #1
 800ca42:	e047      	b.n	800cad4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ca44:	2100      	movs	r1, #0
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f000 f986 	bl	800cd58 <SAI_InterruptFlag>
 800ca4c:	4601      	mov	r1, r0
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	691a      	ldr	r2, [r3, #16]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	430a      	orrs	r2, r1
 800ca5a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ca6a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ca6c:	e015      	b.n	800ca9a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800ca6e:	f7fc fa99 	bl	8008fa4 <HAL_GetTick>
 800ca72:	4602      	mov	r2, r0
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca7c:	d90d      	bls.n	800ca9a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e01c      	b.n	800cad4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0e2      	beq.n	800ca6e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d107      	bne.n	800cac6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cac4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	e000      	b.n	800cad4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800cad2:	2302      	movs	r3, #2
  }
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3718      	adds	r7, #24
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	0800ce95 	.word	0x0800ce95
 800cae0:	0800ce35 	.word	0x0800ce35
 800cae4:	0800ceb1 	.word	0x0800ceb1

0800cae8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <SAI_InitI2S+0x2a>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d103      	bne.n	800cb2e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb2c:	e002      	b.n	800cb34 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2201      	movs	r2, #1
 800cb32:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cb3a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb42:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e076      	b.n	800cc4c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d107      	bne.n	800cb74 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cb70:	651a      	str	r2, [r3, #80]	; 0x50
 800cb72:	e006      	b.n	800cb82 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cb7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	651a      	str	r2, [r3, #80]	; 0x50
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d84f      	bhi.n	800cc28 <SAI_InitI2S+0x12c>
 800cb88:	a201      	add	r2, pc, #4	; (adr r2, 800cb90 <SAI_InitI2S+0x94>)
 800cb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb8e:	bf00      	nop
 800cb90:	0800cba1 	.word	0x0800cba1
 800cb94:	0800cbc3 	.word	0x0800cbc3
 800cb98:	0800cbe5 	.word	0x0800cbe5
 800cb9c:	0800cc07 	.word	0x0800cc07

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2280      	movs	r2, #128	; 0x80
 800cba4:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	085b      	lsrs	r3, r3, #1
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	085b      	lsrs	r3, r3, #1
 800cbb4:	011a      	lsls	r2, r3, #4
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2240      	movs	r2, #64	; 0x40
 800cbbe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cbc0:	e034      	b.n	800cc2c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2280      	movs	r2, #128	; 0x80
 800cbc6:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	085b      	lsrs	r3, r3, #1
 800cbcc:	019a      	lsls	r2, r3, #6
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	085b      	lsrs	r3, r3, #1
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2280      	movs	r2, #128	; 0x80
 800cbe0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cbe2:	e023      	b.n	800cc2c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	22c0      	movs	r2, #192	; 0xc0
 800cbe8:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	085b      	lsrs	r3, r3, #1
 800cbee:	019a      	lsls	r2, r3, #6
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	085b      	lsrs	r3, r3, #1
 800cbf8:	015a      	lsls	r2, r3, #5
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2280      	movs	r2, #128	; 0x80
 800cc02:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc04:	e012      	b.n	800cc2c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	22e0      	movs	r2, #224	; 0xe0
 800cc0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	085b      	lsrs	r3, r3, #1
 800cc10:	019a      	lsls	r2, r3, #6
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	085b      	lsrs	r3, r3, #1
 800cc1a:	015a      	lsls	r2, r3, #5
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2280      	movs	r2, #128	; 0x80
 800cc24:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc26:	e001      	b.n	800cc2c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e00f      	b.n	800cc4c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d10b      	bne.n	800cc4a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d102      	bne.n	800cc3e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2210      	movs	r2, #16
 800cc3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d102      	bne.n	800cc4a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2208      	movs	r2, #8
 800cc48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3714      	adds	r7, #20
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d003      	beq.n	800cc82 <SAI_InitPCM+0x2a>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	d103      	bne.n	800cc8a <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2201      	movs	r2, #1
 800cc86:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc88:	e002      	b.n	800cc90 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cc9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cca4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccb8:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2b04      	cmp	r3, #4
 800ccbe:	d103      	bne.n	800ccc8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	645a      	str	r2, [r3, #68]	; 0x44
 800ccc6:	e002      	b.n	800ccce <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	220d      	movs	r2, #13
 800cccc:	645a      	str	r2, [r3, #68]	; 0x44
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d837      	bhi.n	800cd44 <SAI_InitPCM+0xec>
 800ccd4:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <SAI_InitPCM+0x84>)
 800ccd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccda:	bf00      	nop
 800ccdc:	0800cced 	.word	0x0800cced
 800cce0:	0800cd03 	.word	0x0800cd03
 800cce4:	0800cd19 	.word	0x0800cd19
 800cce8:	0800cd2f 	.word	0x0800cd2f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2280      	movs	r2, #128	; 0x80
 800ccf0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	011a      	lsls	r2, r3, #4
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2240      	movs	r2, #64	; 0x40
 800ccfe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd00:	e022      	b.n	800cd48 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2280      	movs	r2, #128	; 0x80
 800cd06:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	015a      	lsls	r2, r3, #5
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2280      	movs	r2, #128	; 0x80
 800cd14:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd16:	e017      	b.n	800cd48 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	22c0      	movs	r2, #192	; 0xc0
 800cd1c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	015a      	lsls	r2, r3, #5
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2280      	movs	r2, #128	; 0x80
 800cd2a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd2c:	e00c      	b.n	800cd48 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	22e0      	movs	r2, #224	; 0xe0
 800cd32:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	015a      	lsls	r2, r3, #5
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2280      	movs	r2, #128	; 0x80
 800cd40:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd42:	e001      	b.n	800cd48 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e000      	b.n	800cd4a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop

0800cd58 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d103      	bne.n	800cd74 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f043 0308 	orr.w	r3, r3, #8
 800cd72:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd78:	2b08      	cmp	r3, #8
 800cd7a:	d10b      	bne.n	800cd94 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d003      	beq.n	800cd8c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d103      	bne.n	800cd94 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f043 0310 	orr.w	r3, r3, #16
 800cd92:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	2b03      	cmp	r3, #3
 800cd9a:	d003      	beq.n	800cda4 <SAI_InterruptFlag+0x4c>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d104      	bne.n	800cdae <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	e003      	b.n	800cdb6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f043 0304 	orr.w	r3, r3, #4
 800cdb4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800cdcc:	4b17      	ldr	r3, [pc, #92]	; (800ce2c <SAI_Disable+0x68>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a17      	ldr	r2, [pc, #92]	; (800ce30 <SAI_Disable+0x6c>)
 800cdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd6:	0b1b      	lsrs	r3, r3, #12
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cdee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	1e5a      	subs	r2, r3, #1
 800cdf4:	60fa      	str	r2, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10a      	bne.n	800ce10 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	72fb      	strb	r3, [r7, #11]
      break;
 800ce0e:	e006      	b.n	800ce1e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1e8      	bne.n	800cdf0 <SAI_Disable+0x2c>

  return status;
 800ce1e:	7afb      	ldrb	r3, [r7, #11]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	20000008 	.word	0x20000008
 800ce30:	95cbec1b 	.word	0x95cbec1b

0800ce34 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce40:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce4a:	d01c      	beq.n	800ce86 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ce62:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ce64:	2100      	movs	r1, #0
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f7ff ff76 	bl	800cd58 <SAI_InterruptFlag>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	43d9      	mvns	r1, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	691a      	ldr	r2, [r3, #16]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	400a      	ands	r2, r1
 800ce7c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f7f5 fc30 	bl	80026ec <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ce8c:	bf00      	nop
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f7f5 fbe8 	bl	8002678 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cea8:	bf00      	nop
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cebc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cec4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ced2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d004      	beq.n	800cee2 <SAI_DMAError+0x32>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d112      	bne.n	800cf08 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cef0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f7ff ff66 	bl	800cdc4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f7ff fded 	bl	800cae8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b082      	sub	sp, #8
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e049      	b.n	800cfbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d106      	bne.n	800cf42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f841 	bl	800cfc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2202      	movs	r2, #2
 800cf46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	3304      	adds	r3, #4
 800cf52:	4619      	mov	r1, r3
 800cf54:	4610      	mov	r0, r2
 800cf56:	f000 f9ff 	bl	800d358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2201      	movs	r2, #1
 800cf76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d001      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfec:	2301      	movs	r3, #1
 800cfee:	e054      	b.n	800d09a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2202      	movs	r2, #2
 800cff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68da      	ldr	r2, [r3, #12]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0201 	orr.w	r2, r2, #1
 800d006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a26      	ldr	r2, [pc, #152]	; (800d0a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d022      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d01a:	d01d      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a22      	ldr	r2, [pc, #136]	; (800d0ac <HAL_TIM_Base_Start_IT+0xd4>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d018      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a21      	ldr	r2, [pc, #132]	; (800d0b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d013      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a1f      	ldr	r2, [pc, #124]	; (800d0b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d00e      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a1e      	ldr	r2, [pc, #120]	; (800d0b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d009      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a1c      	ldr	r2, [pc, #112]	; (800d0bc <HAL_TIM_Base_Start_IT+0xe4>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d004      	beq.n	800d058 <HAL_TIM_Base_Start_IT+0x80>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a1b      	ldr	r2, [pc, #108]	; (800d0c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d115      	bne.n	800d084 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689a      	ldr	r2, [r3, #8]
 800d05e:	4b19      	ldr	r3, [pc, #100]	; (800d0c4 <HAL_TIM_Base_Start_IT+0xec>)
 800d060:	4013      	ands	r3, r2
 800d062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b06      	cmp	r3, #6
 800d068:	d015      	beq.n	800d096 <HAL_TIM_Base_Start_IT+0xbe>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d070:	d011      	beq.n	800d096 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f042 0201 	orr.w	r2, r2, #1
 800d080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d082:	e008      	b.n	800d096 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f042 0201 	orr.w	r2, r2, #1
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e000      	b.n	800d098 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	40010000 	.word	0x40010000
 800d0ac:	40000400 	.word	0x40000400
 800d0b0:	40000800 	.word	0x40000800
 800d0b4:	40000c00 	.word	0x40000c00
 800d0b8:	40010400 	.word	0x40010400
 800d0bc:	40014000 	.word	0x40014000
 800d0c0:	40001800 	.word	0x40001800
 800d0c4:	00010007 	.word	0x00010007

0800d0c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	f003 0302 	and.w	r3, r3, #2
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d122      	bne.n	800d124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	f003 0302 	and.w	r3, r3, #2
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d11b      	bne.n	800d124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f06f 0202 	mvn.w	r2, #2
 800d0f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	699b      	ldr	r3, [r3, #24]
 800d102:	f003 0303 	and.w	r3, r3, #3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d003      	beq.n	800d112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f905 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800d110:	e005      	b.n	800d11e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f8f7 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f908 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	f003 0304 	and.w	r3, r3, #4
 800d12e:	2b04      	cmp	r3, #4
 800d130:	d122      	bne.n	800d178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f003 0304 	and.w	r3, r3, #4
 800d13c:	2b04      	cmp	r3, #4
 800d13e:	d11b      	bne.n	800d178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f06f 0204 	mvn.w	r2, #4
 800d148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2202      	movs	r2, #2
 800d14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	699b      	ldr	r3, [r3, #24]
 800d156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d003      	beq.n	800d166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f8db 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800d164:	e005      	b.n	800d172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f8cd 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f8de 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	f003 0308 	and.w	r3, r3, #8
 800d182:	2b08      	cmp	r3, #8
 800d184:	d122      	bne.n	800d1cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	f003 0308 	and.w	r3, r3, #8
 800d190:	2b08      	cmp	r3, #8
 800d192:	d11b      	bne.n	800d1cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f06f 0208 	mvn.w	r2, #8
 800d19c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	69db      	ldr	r3, [r3, #28]
 800d1aa:	f003 0303 	and.w	r3, r3, #3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d003      	beq.n	800d1ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f8b1 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800d1b8:	e005      	b.n	800d1c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f8a3 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 f8b4 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	f003 0310 	and.w	r3, r3, #16
 800d1d6:	2b10      	cmp	r3, #16
 800d1d8:	d122      	bne.n	800d220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	f003 0310 	and.w	r3, r3, #16
 800d1e4:	2b10      	cmp	r3, #16
 800d1e6:	d11b      	bne.n	800d220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f06f 0210 	mvn.w	r2, #16
 800d1f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2208      	movs	r2, #8
 800d1f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d202:	2b00      	cmp	r3, #0
 800d204:	d003      	beq.n	800d20e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f887 	bl	800d31a <HAL_TIM_IC_CaptureCallback>
 800d20c:	e005      	b.n	800d21a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f879 	bl	800d306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f88a 	bl	800d32e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	691b      	ldr	r3, [r3, #16]
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d10e      	bne.n	800d24c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d107      	bne.n	800d24c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f06f 0201 	mvn.w	r2, #1
 800d244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7f5 fb06 	bl	8002858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d256:	2b80      	cmp	r3, #128	; 0x80
 800d258:	d10e      	bne.n	800d278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d264:	2b80      	cmp	r3, #128	; 0x80
 800d266:	d107      	bne.n	800d278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f91a 	bl	800d4ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d286:	d10e      	bne.n	800d2a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d292:	2b80      	cmp	r3, #128	; 0x80
 800d294:	d107      	bne.n	800d2a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d29e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f90d 	bl	800d4c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2b0:	2b40      	cmp	r3, #64	; 0x40
 800d2b2:	d10e      	bne.n	800d2d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2be:	2b40      	cmp	r3, #64	; 0x40
 800d2c0:	d107      	bne.n	800d2d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d2ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f838 	bl	800d342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	f003 0320 	and.w	r3, r3, #32
 800d2dc:	2b20      	cmp	r3, #32
 800d2de:	d10e      	bne.n	800d2fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	f003 0320 	and.w	r3, r3, #32
 800d2ea:	2b20      	cmp	r3, #32
 800d2ec:	d107      	bne.n	800d2fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f06f 0220 	mvn.w	r2, #32
 800d2f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f8cd 	bl	800d498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d306:	b480      	push	{r7}
 800d308:	b083      	sub	sp, #12
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d30e:	bf00      	nop
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d322:	bf00      	nop
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d342:	b480      	push	{r7}
 800d344:	b083      	sub	sp, #12
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
	...

0800d358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a40      	ldr	r2, [pc, #256]	; (800d46c <TIM_Base_SetConfig+0x114>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d013      	beq.n	800d398 <TIM_Base_SetConfig+0x40>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d376:	d00f      	beq.n	800d398 <TIM_Base_SetConfig+0x40>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a3d      	ldr	r2, [pc, #244]	; (800d470 <TIM_Base_SetConfig+0x118>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d00b      	beq.n	800d398 <TIM_Base_SetConfig+0x40>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a3c      	ldr	r2, [pc, #240]	; (800d474 <TIM_Base_SetConfig+0x11c>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d007      	beq.n	800d398 <TIM_Base_SetConfig+0x40>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a3b      	ldr	r2, [pc, #236]	; (800d478 <TIM_Base_SetConfig+0x120>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d003      	beq.n	800d398 <TIM_Base_SetConfig+0x40>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a3a      	ldr	r2, [pc, #232]	; (800d47c <TIM_Base_SetConfig+0x124>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d108      	bne.n	800d3aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d39e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4a2f      	ldr	r2, [pc, #188]	; (800d46c <TIM_Base_SetConfig+0x114>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d02b      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3b8:	d027      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4a2c      	ldr	r2, [pc, #176]	; (800d470 <TIM_Base_SetConfig+0x118>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d023      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a2b      	ldr	r2, [pc, #172]	; (800d474 <TIM_Base_SetConfig+0x11c>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d01f      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4a2a      	ldr	r2, [pc, #168]	; (800d478 <TIM_Base_SetConfig+0x120>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d01b      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a29      	ldr	r2, [pc, #164]	; (800d47c <TIM_Base_SetConfig+0x124>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d017      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a28      	ldr	r2, [pc, #160]	; (800d480 <TIM_Base_SetConfig+0x128>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d013      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a27      	ldr	r2, [pc, #156]	; (800d484 <TIM_Base_SetConfig+0x12c>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d00f      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a26      	ldr	r2, [pc, #152]	; (800d488 <TIM_Base_SetConfig+0x130>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d00b      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a25      	ldr	r2, [pc, #148]	; (800d48c <TIM_Base_SetConfig+0x134>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d007      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a24      	ldr	r2, [pc, #144]	; (800d490 <TIM_Base_SetConfig+0x138>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d003      	beq.n	800d40a <TIM_Base_SetConfig+0xb2>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a23      	ldr	r2, [pc, #140]	; (800d494 <TIM_Base_SetConfig+0x13c>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d108      	bne.n	800d41c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	4313      	orrs	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	695b      	ldr	r3, [r3, #20]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a0a      	ldr	r2, [pc, #40]	; (800d46c <TIM_Base_SetConfig+0x114>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d003      	beq.n	800d450 <TIM_Base_SetConfig+0xf8>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a0c      	ldr	r2, [pc, #48]	; (800d47c <TIM_Base_SetConfig+0x124>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d103      	bne.n	800d458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	615a      	str	r2, [r3, #20]
}
 800d45e:	bf00      	nop
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	40010000 	.word	0x40010000
 800d470:	40000400 	.word	0x40000400
 800d474:	40000800 	.word	0x40000800
 800d478:	40000c00 	.word	0x40000c00
 800d47c:	40010400 	.word	0x40010400
 800d480:	40014000 	.word	0x40014000
 800d484:	40014400 	.word	0x40014400
 800d488:	40014800 	.word	0x40014800
 800d48c:	40001800 	.word	0x40001800
 800d490:	40001c00 	.word	0x40001c00
 800d494:	40002000 	.word	0x40002000

0800d498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e040      	b.n	800d568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d106      	bne.n	800d4fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7f6 fa3e 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2224      	movs	r2, #36	; 0x24
 800d500:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f022 0201 	bic.w	r2, r2, #1
 800d510:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f8c0 	bl	800d698 <UART_SetConfig>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d101      	bne.n	800d522 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	e022      	b.n	800d568 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	d002      	beq.n	800d530 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fb16 	bl	800db5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d53e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	689a      	ldr	r2, [r3, #8]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d54e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f042 0201 	orr.w	r2, r2, #1
 800d55e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fb9d 	bl	800dca0 <UART_CheckIdleState>
 800d566:	4603      	mov	r3, r0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08a      	sub	sp, #40	; 0x28
 800d574:	af02      	add	r7, sp, #8
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	4613      	mov	r3, r2
 800d57e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d584:	2b20      	cmp	r3, #32
 800d586:	f040 8081 	bne.w	800d68c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <HAL_UART_Transmit+0x26>
 800d590:	88fb      	ldrh	r3, [r7, #6]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	e079      	b.n	800d68e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d101      	bne.n	800d5a8 <HAL_UART_Transmit+0x38>
 800d5a4:	2302      	movs	r3, #2
 800d5a6:	e072      	b.n	800d68e <HAL_UART_Transmit+0x11e>
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2221      	movs	r2, #33	; 0x21
 800d5bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5be:	f7fb fcf1 	bl	8008fa4 <HAL_GetTick>
 800d5c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	88fa      	ldrh	r2, [r7, #6]
 800d5c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	88fa      	ldrh	r2, [r7, #6]
 800d5d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5dc:	d108      	bne.n	800d5f0 <HAL_UART_Transmit+0x80>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d104      	bne.n	800d5f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	61bb      	str	r3, [r7, #24]
 800d5ee:	e003      	b.n	800d5f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d600:	e02c      	b.n	800d65c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	2200      	movs	r2, #0
 800d60a:	2180      	movs	r1, #128	; 0x80
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f000 fb90 	bl	800dd32 <UART_WaitOnFlagUntilTimeout>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e038      	b.n	800d68e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10b      	bne.n	800d63a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d630:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	3302      	adds	r3, #2
 800d636:	61bb      	str	r3, [r7, #24]
 800d638:	e007      	b.n	800d64a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	781a      	ldrb	r2, [r3, #0]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	3301      	adds	r3, #1
 800d648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d650:	b29b      	uxth	r3, r3
 800d652:	3b01      	subs	r3, #1
 800d654:	b29a      	uxth	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d662:	b29b      	uxth	r3, r3
 800d664:	2b00      	cmp	r3, #0
 800d666:	d1cc      	bne.n	800d602 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	2200      	movs	r2, #0
 800d670:	2140      	movs	r1, #64	; 0x40
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 fb5d 	bl	800dd32 <UART_WaitOnFlagUntilTimeout>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d001      	beq.n	800d682 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800d67e:	2303      	movs	r3, #3
 800d680:	e005      	b.n	800d68e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2220      	movs	r2, #32
 800d686:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d688:	2300      	movs	r3, #0
 800d68a:	e000      	b.n	800d68e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800d68c:	2302      	movs	r3, #2
  }
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3720      	adds	r7, #32
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
	...

0800d698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b088      	sub	sp, #32
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	689a      	ldr	r2, [r3, #8]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	431a      	orrs	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	431a      	orrs	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	69db      	ldr	r3, [r3, #28]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	4ba7      	ldr	r3, [pc, #668]	; (800d960 <UART_SetConfig+0x2c8>)
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	6812      	ldr	r2, [r2, #0]
 800d6ca:	6979      	ldr	r1, [r7, #20]
 800d6cc:	430b      	orrs	r3, r1
 800d6ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	68da      	ldr	r2, [r3, #12]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	430a      	orrs	r2, r1
 800d6e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	699b      	ldr	r3, [r3, #24]
 800d6ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	697a      	ldr	r2, [r7, #20]
 800d706:	430a      	orrs	r2, r1
 800d708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a95      	ldr	r2, [pc, #596]	; (800d964 <UART_SetConfig+0x2cc>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d120      	bne.n	800d756 <UART_SetConfig+0xbe>
 800d714:	4b94      	ldr	r3, [pc, #592]	; (800d968 <UART_SetConfig+0x2d0>)
 800d716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d71a:	f003 0303 	and.w	r3, r3, #3
 800d71e:	2b03      	cmp	r3, #3
 800d720:	d816      	bhi.n	800d750 <UART_SetConfig+0xb8>
 800d722:	a201      	add	r2, pc, #4	; (adr r2, 800d728 <UART_SetConfig+0x90>)
 800d724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d728:	0800d739 	.word	0x0800d739
 800d72c:	0800d745 	.word	0x0800d745
 800d730:	0800d73f 	.word	0x0800d73f
 800d734:	0800d74b 	.word	0x0800d74b
 800d738:	2301      	movs	r3, #1
 800d73a:	77fb      	strb	r3, [r7, #31]
 800d73c:	e14f      	b.n	800d9de <UART_SetConfig+0x346>
 800d73e:	2302      	movs	r3, #2
 800d740:	77fb      	strb	r3, [r7, #31]
 800d742:	e14c      	b.n	800d9de <UART_SetConfig+0x346>
 800d744:	2304      	movs	r3, #4
 800d746:	77fb      	strb	r3, [r7, #31]
 800d748:	e149      	b.n	800d9de <UART_SetConfig+0x346>
 800d74a:	2308      	movs	r3, #8
 800d74c:	77fb      	strb	r3, [r7, #31]
 800d74e:	e146      	b.n	800d9de <UART_SetConfig+0x346>
 800d750:	2310      	movs	r3, #16
 800d752:	77fb      	strb	r3, [r7, #31]
 800d754:	e143      	b.n	800d9de <UART_SetConfig+0x346>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a84      	ldr	r2, [pc, #528]	; (800d96c <UART_SetConfig+0x2d4>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d132      	bne.n	800d7c6 <UART_SetConfig+0x12e>
 800d760:	4b81      	ldr	r3, [pc, #516]	; (800d968 <UART_SetConfig+0x2d0>)
 800d762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d766:	f003 030c 	and.w	r3, r3, #12
 800d76a:	2b0c      	cmp	r3, #12
 800d76c:	d828      	bhi.n	800d7c0 <UART_SetConfig+0x128>
 800d76e:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <UART_SetConfig+0xdc>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d7a9 	.word	0x0800d7a9
 800d778:	0800d7c1 	.word	0x0800d7c1
 800d77c:	0800d7c1 	.word	0x0800d7c1
 800d780:	0800d7c1 	.word	0x0800d7c1
 800d784:	0800d7b5 	.word	0x0800d7b5
 800d788:	0800d7c1 	.word	0x0800d7c1
 800d78c:	0800d7c1 	.word	0x0800d7c1
 800d790:	0800d7c1 	.word	0x0800d7c1
 800d794:	0800d7af 	.word	0x0800d7af
 800d798:	0800d7c1 	.word	0x0800d7c1
 800d79c:	0800d7c1 	.word	0x0800d7c1
 800d7a0:	0800d7c1 	.word	0x0800d7c1
 800d7a4:	0800d7bb 	.word	0x0800d7bb
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	77fb      	strb	r3, [r7, #31]
 800d7ac:	e117      	b.n	800d9de <UART_SetConfig+0x346>
 800d7ae:	2302      	movs	r3, #2
 800d7b0:	77fb      	strb	r3, [r7, #31]
 800d7b2:	e114      	b.n	800d9de <UART_SetConfig+0x346>
 800d7b4:	2304      	movs	r3, #4
 800d7b6:	77fb      	strb	r3, [r7, #31]
 800d7b8:	e111      	b.n	800d9de <UART_SetConfig+0x346>
 800d7ba:	2308      	movs	r3, #8
 800d7bc:	77fb      	strb	r3, [r7, #31]
 800d7be:	e10e      	b.n	800d9de <UART_SetConfig+0x346>
 800d7c0:	2310      	movs	r3, #16
 800d7c2:	77fb      	strb	r3, [r7, #31]
 800d7c4:	e10b      	b.n	800d9de <UART_SetConfig+0x346>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a69      	ldr	r2, [pc, #420]	; (800d970 <UART_SetConfig+0x2d8>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d120      	bne.n	800d812 <UART_SetConfig+0x17a>
 800d7d0:	4b65      	ldr	r3, [pc, #404]	; (800d968 <UART_SetConfig+0x2d0>)
 800d7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d7da:	2b30      	cmp	r3, #48	; 0x30
 800d7dc:	d013      	beq.n	800d806 <UART_SetConfig+0x16e>
 800d7de:	2b30      	cmp	r3, #48	; 0x30
 800d7e0:	d814      	bhi.n	800d80c <UART_SetConfig+0x174>
 800d7e2:	2b20      	cmp	r3, #32
 800d7e4:	d009      	beq.n	800d7fa <UART_SetConfig+0x162>
 800d7e6:	2b20      	cmp	r3, #32
 800d7e8:	d810      	bhi.n	800d80c <UART_SetConfig+0x174>
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d002      	beq.n	800d7f4 <UART_SetConfig+0x15c>
 800d7ee:	2b10      	cmp	r3, #16
 800d7f0:	d006      	beq.n	800d800 <UART_SetConfig+0x168>
 800d7f2:	e00b      	b.n	800d80c <UART_SetConfig+0x174>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	77fb      	strb	r3, [r7, #31]
 800d7f8:	e0f1      	b.n	800d9de <UART_SetConfig+0x346>
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	77fb      	strb	r3, [r7, #31]
 800d7fe:	e0ee      	b.n	800d9de <UART_SetConfig+0x346>
 800d800:	2304      	movs	r3, #4
 800d802:	77fb      	strb	r3, [r7, #31]
 800d804:	e0eb      	b.n	800d9de <UART_SetConfig+0x346>
 800d806:	2308      	movs	r3, #8
 800d808:	77fb      	strb	r3, [r7, #31]
 800d80a:	e0e8      	b.n	800d9de <UART_SetConfig+0x346>
 800d80c:	2310      	movs	r3, #16
 800d80e:	77fb      	strb	r3, [r7, #31]
 800d810:	e0e5      	b.n	800d9de <UART_SetConfig+0x346>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a57      	ldr	r2, [pc, #348]	; (800d974 <UART_SetConfig+0x2dc>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d120      	bne.n	800d85e <UART_SetConfig+0x1c6>
 800d81c:	4b52      	ldr	r3, [pc, #328]	; (800d968 <UART_SetConfig+0x2d0>)
 800d81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d826:	2bc0      	cmp	r3, #192	; 0xc0
 800d828:	d013      	beq.n	800d852 <UART_SetConfig+0x1ba>
 800d82a:	2bc0      	cmp	r3, #192	; 0xc0
 800d82c:	d814      	bhi.n	800d858 <UART_SetConfig+0x1c0>
 800d82e:	2b80      	cmp	r3, #128	; 0x80
 800d830:	d009      	beq.n	800d846 <UART_SetConfig+0x1ae>
 800d832:	2b80      	cmp	r3, #128	; 0x80
 800d834:	d810      	bhi.n	800d858 <UART_SetConfig+0x1c0>
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <UART_SetConfig+0x1a8>
 800d83a:	2b40      	cmp	r3, #64	; 0x40
 800d83c:	d006      	beq.n	800d84c <UART_SetConfig+0x1b4>
 800d83e:	e00b      	b.n	800d858 <UART_SetConfig+0x1c0>
 800d840:	2300      	movs	r3, #0
 800d842:	77fb      	strb	r3, [r7, #31]
 800d844:	e0cb      	b.n	800d9de <UART_SetConfig+0x346>
 800d846:	2302      	movs	r3, #2
 800d848:	77fb      	strb	r3, [r7, #31]
 800d84a:	e0c8      	b.n	800d9de <UART_SetConfig+0x346>
 800d84c:	2304      	movs	r3, #4
 800d84e:	77fb      	strb	r3, [r7, #31]
 800d850:	e0c5      	b.n	800d9de <UART_SetConfig+0x346>
 800d852:	2308      	movs	r3, #8
 800d854:	77fb      	strb	r3, [r7, #31]
 800d856:	e0c2      	b.n	800d9de <UART_SetConfig+0x346>
 800d858:	2310      	movs	r3, #16
 800d85a:	77fb      	strb	r3, [r7, #31]
 800d85c:	e0bf      	b.n	800d9de <UART_SetConfig+0x346>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a45      	ldr	r2, [pc, #276]	; (800d978 <UART_SetConfig+0x2e0>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d125      	bne.n	800d8b4 <UART_SetConfig+0x21c>
 800d868:	4b3f      	ldr	r3, [pc, #252]	; (800d968 <UART_SetConfig+0x2d0>)
 800d86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d86e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d876:	d017      	beq.n	800d8a8 <UART_SetConfig+0x210>
 800d878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d87c:	d817      	bhi.n	800d8ae <UART_SetConfig+0x216>
 800d87e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d882:	d00b      	beq.n	800d89c <UART_SetConfig+0x204>
 800d884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d888:	d811      	bhi.n	800d8ae <UART_SetConfig+0x216>
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d003      	beq.n	800d896 <UART_SetConfig+0x1fe>
 800d88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d892:	d006      	beq.n	800d8a2 <UART_SetConfig+0x20a>
 800d894:	e00b      	b.n	800d8ae <UART_SetConfig+0x216>
 800d896:	2300      	movs	r3, #0
 800d898:	77fb      	strb	r3, [r7, #31]
 800d89a:	e0a0      	b.n	800d9de <UART_SetConfig+0x346>
 800d89c:	2302      	movs	r3, #2
 800d89e:	77fb      	strb	r3, [r7, #31]
 800d8a0:	e09d      	b.n	800d9de <UART_SetConfig+0x346>
 800d8a2:	2304      	movs	r3, #4
 800d8a4:	77fb      	strb	r3, [r7, #31]
 800d8a6:	e09a      	b.n	800d9de <UART_SetConfig+0x346>
 800d8a8:	2308      	movs	r3, #8
 800d8aa:	77fb      	strb	r3, [r7, #31]
 800d8ac:	e097      	b.n	800d9de <UART_SetConfig+0x346>
 800d8ae:	2310      	movs	r3, #16
 800d8b0:	77fb      	strb	r3, [r7, #31]
 800d8b2:	e094      	b.n	800d9de <UART_SetConfig+0x346>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a30      	ldr	r2, [pc, #192]	; (800d97c <UART_SetConfig+0x2e4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d125      	bne.n	800d90a <UART_SetConfig+0x272>
 800d8be:	4b2a      	ldr	r3, [pc, #168]	; (800d968 <UART_SetConfig+0x2d0>)
 800d8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d8c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8cc:	d017      	beq.n	800d8fe <UART_SetConfig+0x266>
 800d8ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d8d2:	d817      	bhi.n	800d904 <UART_SetConfig+0x26c>
 800d8d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8d8:	d00b      	beq.n	800d8f2 <UART_SetConfig+0x25a>
 800d8da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8de:	d811      	bhi.n	800d904 <UART_SetConfig+0x26c>
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d003      	beq.n	800d8ec <UART_SetConfig+0x254>
 800d8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8e8:	d006      	beq.n	800d8f8 <UART_SetConfig+0x260>
 800d8ea:	e00b      	b.n	800d904 <UART_SetConfig+0x26c>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	77fb      	strb	r3, [r7, #31]
 800d8f0:	e075      	b.n	800d9de <UART_SetConfig+0x346>
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	77fb      	strb	r3, [r7, #31]
 800d8f6:	e072      	b.n	800d9de <UART_SetConfig+0x346>
 800d8f8:	2304      	movs	r3, #4
 800d8fa:	77fb      	strb	r3, [r7, #31]
 800d8fc:	e06f      	b.n	800d9de <UART_SetConfig+0x346>
 800d8fe:	2308      	movs	r3, #8
 800d900:	77fb      	strb	r3, [r7, #31]
 800d902:	e06c      	b.n	800d9de <UART_SetConfig+0x346>
 800d904:	2310      	movs	r3, #16
 800d906:	77fb      	strb	r3, [r7, #31]
 800d908:	e069      	b.n	800d9de <UART_SetConfig+0x346>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a1c      	ldr	r2, [pc, #112]	; (800d980 <UART_SetConfig+0x2e8>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d137      	bne.n	800d984 <UART_SetConfig+0x2ec>
 800d914:	4b14      	ldr	r3, [pc, #80]	; (800d968 <UART_SetConfig+0x2d0>)
 800d916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d91a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d91e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d922:	d017      	beq.n	800d954 <UART_SetConfig+0x2bc>
 800d924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d928:	d817      	bhi.n	800d95a <UART_SetConfig+0x2c2>
 800d92a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d92e:	d00b      	beq.n	800d948 <UART_SetConfig+0x2b0>
 800d930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d934:	d811      	bhi.n	800d95a <UART_SetConfig+0x2c2>
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <UART_SetConfig+0x2aa>
 800d93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d93e:	d006      	beq.n	800d94e <UART_SetConfig+0x2b6>
 800d940:	e00b      	b.n	800d95a <UART_SetConfig+0x2c2>
 800d942:	2300      	movs	r3, #0
 800d944:	77fb      	strb	r3, [r7, #31]
 800d946:	e04a      	b.n	800d9de <UART_SetConfig+0x346>
 800d948:	2302      	movs	r3, #2
 800d94a:	77fb      	strb	r3, [r7, #31]
 800d94c:	e047      	b.n	800d9de <UART_SetConfig+0x346>
 800d94e:	2304      	movs	r3, #4
 800d950:	77fb      	strb	r3, [r7, #31]
 800d952:	e044      	b.n	800d9de <UART_SetConfig+0x346>
 800d954:	2308      	movs	r3, #8
 800d956:	77fb      	strb	r3, [r7, #31]
 800d958:	e041      	b.n	800d9de <UART_SetConfig+0x346>
 800d95a:	2310      	movs	r3, #16
 800d95c:	77fb      	strb	r3, [r7, #31]
 800d95e:	e03e      	b.n	800d9de <UART_SetConfig+0x346>
 800d960:	efff69f3 	.word	0xefff69f3
 800d964:	40011000 	.word	0x40011000
 800d968:	40023800 	.word	0x40023800
 800d96c:	40004400 	.word	0x40004400
 800d970:	40004800 	.word	0x40004800
 800d974:	40004c00 	.word	0x40004c00
 800d978:	40005000 	.word	0x40005000
 800d97c:	40011400 	.word	0x40011400
 800d980:	40007800 	.word	0x40007800
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a71      	ldr	r2, [pc, #452]	; (800db50 <UART_SetConfig+0x4b8>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d125      	bne.n	800d9da <UART_SetConfig+0x342>
 800d98e:	4b71      	ldr	r3, [pc, #452]	; (800db54 <UART_SetConfig+0x4bc>)
 800d990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d998:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d99c:	d017      	beq.n	800d9ce <UART_SetConfig+0x336>
 800d99e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d9a2:	d817      	bhi.n	800d9d4 <UART_SetConfig+0x33c>
 800d9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9a8:	d00b      	beq.n	800d9c2 <UART_SetConfig+0x32a>
 800d9aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ae:	d811      	bhi.n	800d9d4 <UART_SetConfig+0x33c>
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d003      	beq.n	800d9bc <UART_SetConfig+0x324>
 800d9b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9b8:	d006      	beq.n	800d9c8 <UART_SetConfig+0x330>
 800d9ba:	e00b      	b.n	800d9d4 <UART_SetConfig+0x33c>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	77fb      	strb	r3, [r7, #31]
 800d9c0:	e00d      	b.n	800d9de <UART_SetConfig+0x346>
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	77fb      	strb	r3, [r7, #31]
 800d9c6:	e00a      	b.n	800d9de <UART_SetConfig+0x346>
 800d9c8:	2304      	movs	r3, #4
 800d9ca:	77fb      	strb	r3, [r7, #31]
 800d9cc:	e007      	b.n	800d9de <UART_SetConfig+0x346>
 800d9ce:	2308      	movs	r3, #8
 800d9d0:	77fb      	strb	r3, [r7, #31]
 800d9d2:	e004      	b.n	800d9de <UART_SetConfig+0x346>
 800d9d4:	2310      	movs	r3, #16
 800d9d6:	77fb      	strb	r3, [r7, #31]
 800d9d8:	e001      	b.n	800d9de <UART_SetConfig+0x346>
 800d9da:	2310      	movs	r3, #16
 800d9dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	69db      	ldr	r3, [r3, #28]
 800d9e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9e6:	d15a      	bne.n	800da9e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800d9e8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ea:	2b08      	cmp	r3, #8
 800d9ec:	d827      	bhi.n	800da3e <UART_SetConfig+0x3a6>
 800d9ee:	a201      	add	r2, pc, #4	; (adr r2, 800d9f4 <UART_SetConfig+0x35c>)
 800d9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f4:	0800da19 	.word	0x0800da19
 800d9f8:	0800da21 	.word	0x0800da21
 800d9fc:	0800da29 	.word	0x0800da29
 800da00:	0800da3f 	.word	0x0800da3f
 800da04:	0800da2f 	.word	0x0800da2f
 800da08:	0800da3f 	.word	0x0800da3f
 800da0c:	0800da3f 	.word	0x0800da3f
 800da10:	0800da3f 	.word	0x0800da3f
 800da14:	0800da37 	.word	0x0800da37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da18:	f7fd ff9c 	bl	800b954 <HAL_RCC_GetPCLK1Freq>
 800da1c:	61b8      	str	r0, [r7, #24]
        break;
 800da1e:	e013      	b.n	800da48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da20:	f7fd ffac 	bl	800b97c <HAL_RCC_GetPCLK2Freq>
 800da24:	61b8      	str	r0, [r7, #24]
        break;
 800da26:	e00f      	b.n	800da48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da28:	4b4b      	ldr	r3, [pc, #300]	; (800db58 <UART_SetConfig+0x4c0>)
 800da2a:	61bb      	str	r3, [r7, #24]
        break;
 800da2c:	e00c      	b.n	800da48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da2e:	f7fd fecf 	bl	800b7d0 <HAL_RCC_GetSysClockFreq>
 800da32:	61b8      	str	r0, [r7, #24]
        break;
 800da34:	e008      	b.n	800da48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da3a:	61bb      	str	r3, [r7, #24]
        break;
 800da3c:	e004      	b.n	800da48 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800da3e:	2300      	movs	r3, #0
 800da40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	77bb      	strb	r3, [r7, #30]
        break;
 800da46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d074      	beq.n	800db38 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	005a      	lsls	r2, r3, #1
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	085b      	lsrs	r3, r3, #1
 800da58:	441a      	add	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2b0f      	cmp	r3, #15
 800da68:	d916      	bls.n	800da98 <UART_SetConfig+0x400>
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da70:	d212      	bcs.n	800da98 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	b29b      	uxth	r3, r3
 800da76:	f023 030f 	bic.w	r3, r3, #15
 800da7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	085b      	lsrs	r3, r3, #1
 800da80:	b29b      	uxth	r3, r3
 800da82:	f003 0307 	and.w	r3, r3, #7
 800da86:	b29a      	uxth	r2, r3
 800da88:	89fb      	ldrh	r3, [r7, #14]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	89fa      	ldrh	r2, [r7, #14]
 800da94:	60da      	str	r2, [r3, #12]
 800da96:	e04f      	b.n	800db38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	77bb      	strb	r3, [r7, #30]
 800da9c:	e04c      	b.n	800db38 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da9e:	7ffb      	ldrb	r3, [r7, #31]
 800daa0:	2b08      	cmp	r3, #8
 800daa2:	d828      	bhi.n	800daf6 <UART_SetConfig+0x45e>
 800daa4:	a201      	add	r2, pc, #4	; (adr r2, 800daac <UART_SetConfig+0x414>)
 800daa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daaa:	bf00      	nop
 800daac:	0800dad1 	.word	0x0800dad1
 800dab0:	0800dad9 	.word	0x0800dad9
 800dab4:	0800dae1 	.word	0x0800dae1
 800dab8:	0800daf7 	.word	0x0800daf7
 800dabc:	0800dae7 	.word	0x0800dae7
 800dac0:	0800daf7 	.word	0x0800daf7
 800dac4:	0800daf7 	.word	0x0800daf7
 800dac8:	0800daf7 	.word	0x0800daf7
 800dacc:	0800daef 	.word	0x0800daef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dad0:	f7fd ff40 	bl	800b954 <HAL_RCC_GetPCLK1Freq>
 800dad4:	61b8      	str	r0, [r7, #24]
        break;
 800dad6:	e013      	b.n	800db00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dad8:	f7fd ff50 	bl	800b97c <HAL_RCC_GetPCLK2Freq>
 800dadc:	61b8      	str	r0, [r7, #24]
        break;
 800dade:	e00f      	b.n	800db00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dae0:	4b1d      	ldr	r3, [pc, #116]	; (800db58 <UART_SetConfig+0x4c0>)
 800dae2:	61bb      	str	r3, [r7, #24]
        break;
 800dae4:	e00c      	b.n	800db00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dae6:	f7fd fe73 	bl	800b7d0 <HAL_RCC_GetSysClockFreq>
 800daea:	61b8      	str	r0, [r7, #24]
        break;
 800daec:	e008      	b.n	800db00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800daee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daf2:	61bb      	str	r3, [r7, #24]
        break;
 800daf4:	e004      	b.n	800db00 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800daf6:	2300      	movs	r3, #0
 800daf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dafa:	2301      	movs	r3, #1
 800dafc:	77bb      	strb	r3, [r7, #30]
        break;
 800dafe:	bf00      	nop
    }

    if (pclk != 0U)
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d018      	beq.n	800db38 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	085a      	lsrs	r2, r3, #1
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	441a      	add	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	fbb2 f3f3 	udiv	r3, r2, r3
 800db18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2b0f      	cmp	r3, #15
 800db1e:	d909      	bls.n	800db34 <UART_SetConfig+0x49c>
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db26:	d205      	bcs.n	800db34 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	60da      	str	r2, [r3, #12]
 800db32:	e001      	b.n	800db38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800db44:	7fbb      	ldrb	r3, [r7, #30]
}
 800db46:	4618      	mov	r0, r3
 800db48:	3720      	adds	r7, #32
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	40007c00 	.word	0x40007c00
 800db54:	40023800 	.word	0x40023800
 800db58:	00f42400 	.word	0x00f42400

0800db5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00a      	beq.n	800db86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	430a      	orrs	r2, r1
 800db84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00a      	beq.n	800dba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	430a      	orrs	r2, r1
 800dba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	f003 0304 	and.w	r3, r3, #4
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00a      	beq.n	800dbca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbce:	f003 0308 	and.w	r3, r3, #8
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00a      	beq.n	800dbec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	430a      	orrs	r2, r1
 800dbea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf0:	f003 0310 	and.w	r3, r3, #16
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00a      	beq.n	800dc0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	430a      	orrs	r2, r1
 800dc0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc12:	f003 0320 	and.w	r3, r3, #32
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00a      	beq.n	800dc30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	430a      	orrs	r2, r1
 800dc2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01a      	beq.n	800dc72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	430a      	orrs	r2, r1
 800dc50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc5a:	d10a      	bne.n	800dc72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00a      	beq.n	800dc94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	430a      	orrs	r2, r1
 800dc92:	605a      	str	r2, [r3, #4]
  }
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af02      	add	r7, sp, #8
 800dca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dcb0:	f7fb f978 	bl	8008fa4 <HAL_GetTick>
 800dcb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f003 0308 	and.w	r3, r3, #8
 800dcc0:	2b08      	cmp	r3, #8
 800dcc2:	d10e      	bne.n	800dce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f82d 	bl	800dd32 <UART_WaitOnFlagUntilTimeout>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dcde:	2303      	movs	r3, #3
 800dce0:	e023      	b.n	800dd2a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f003 0304 	and.w	r3, r3, #4
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	d10e      	bne.n	800dd0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f817 	bl	800dd32 <UART_WaitOnFlagUntilTimeout>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	e00d      	b.n	800dd2a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2220      	movs	r2, #32
 800dd12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2220      	movs	r2, #32
 800dd18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b09c      	sub	sp, #112	; 0x70
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	60f8      	str	r0, [r7, #12]
 800dd3a:	60b9      	str	r1, [r7, #8]
 800dd3c:	603b      	str	r3, [r7, #0]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd42:	e0a5      	b.n	800de90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4a:	f000 80a1 	beq.w	800de90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd4e:	f7fb f929 	bl	8008fa4 <HAL_GetTick>
 800dd52:	4602      	mov	r2, r0
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d302      	bcc.n	800dd64 <UART_WaitOnFlagUntilTimeout+0x32>
 800dd5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d13e      	bne.n	800dde2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd6c:	e853 3f00 	ldrex	r3, [r3]
 800dd70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dd78:	667b      	str	r3, [r7, #100]	; 0x64
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	461a      	mov	r2, r3
 800dd80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd8a:	e841 2300 	strex	r3, r2, [r1]
 800dd8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dd90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1e6      	bne.n	800dd64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3308      	adds	r3, #8
 800dd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda0:	e853 3f00 	ldrex	r3, [r3]
 800dda4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda8:	f023 0301 	bic.w	r3, r3, #1
 800ddac:	663b      	str	r3, [r7, #96]	; 0x60
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ddb6:	64ba      	str	r2, [r7, #72]	; 0x48
 800ddb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddbe:	e841 2300 	strex	r3, r2, [r1]
 800ddc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ddc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e5      	bne.n	800dd96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2220      	movs	r2, #32
 800ddce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2220      	movs	r2, #32
 800ddd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ddde:	2303      	movs	r3, #3
 800dde0:	e067      	b.n	800deb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f003 0304 	and.w	r3, r3, #4
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d04f      	beq.n	800de90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	69db      	ldr	r3, [r3, #28]
 800ddf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddfe:	d147      	bne.n	800de90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de12:	e853 3f00 	ldrex	r3, [r3]
 800de16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	461a      	mov	r2, r3
 800de26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de28:	637b      	str	r3, [r7, #52]	; 0x34
 800de2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de30:	e841 2300 	strex	r3, r2, [r1]
 800de34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1e6      	bne.n	800de0a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3308      	adds	r3, #8
 800de42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	e853 3f00 	ldrex	r3, [r3]
 800de4a:	613b      	str	r3, [r7, #16]
   return(result);
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	f023 0301 	bic.w	r3, r3, #1
 800de52:	66bb      	str	r3, [r7, #104]	; 0x68
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	3308      	adds	r3, #8
 800de5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de5c:	623a      	str	r2, [r7, #32]
 800de5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de60:	69f9      	ldr	r1, [r7, #28]
 800de62:	6a3a      	ldr	r2, [r7, #32]
 800de64:	e841 2300 	strex	r3, r2, [r1]
 800de68:	61bb      	str	r3, [r7, #24]
   return(result);
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1e5      	bne.n	800de3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2220      	movs	r2, #32
 800de74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2220      	movs	r2, #32
 800de7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2220      	movs	r2, #32
 800de80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800de8c:	2303      	movs	r3, #3
 800de8e:	e010      	b.n	800deb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	69da      	ldr	r2, [r3, #28]
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	4013      	ands	r3, r2
 800de9a:	68ba      	ldr	r2, [r7, #8]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	bf0c      	ite	eq
 800dea0:	2301      	moveq	r3, #1
 800dea2:	2300      	movne	r3, #0
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	461a      	mov	r2, r3
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	429a      	cmp	r2, r3
 800deac:	f43f af4a 	beq.w	800dd44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800deb0:	2300      	movs	r3, #0
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3770      	adds	r7, #112	; 0x70
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <_ZdlPvj>:
 800deba:	f000 b818 	b.w	800deee <_ZdlPv>

0800debe <_ZdaPv>:
 800debe:	f000 b816 	b.w	800deee <_ZdlPv>

0800dec2 <_Znwj>:
 800dec2:	2801      	cmp	r0, #1
 800dec4:	bf38      	it	cc
 800dec6:	2001      	movcc	r0, #1
 800dec8:	b510      	push	{r4, lr}
 800deca:	4604      	mov	r4, r0
 800decc:	4620      	mov	r0, r4
 800dece:	f001 fbfb 	bl	800f6c8 <malloc>
 800ded2:	b930      	cbnz	r0, 800dee2 <_Znwj+0x20>
 800ded4:	f000 f820 	bl	800df18 <_ZSt15get_new_handlerv>
 800ded8:	b908      	cbnz	r0, 800dede <_Znwj+0x1c>
 800deda:	f001 fbbb 	bl	800f654 <abort>
 800dede:	4780      	blx	r0
 800dee0:	e7f4      	b.n	800decc <_Znwj+0xa>
 800dee2:	bd10      	pop	{r4, pc}

0800dee4 <_Znaj>:
 800dee4:	f7ff bfed 	b.w	800dec2 <_Znwj>

0800dee8 <__cxa_pure_virtual>:
 800dee8:	b508      	push	{r3, lr}
 800deea:	f000 f80f 	bl	800df0c <_ZSt9terminatev>

0800deee <_ZdlPv>:
 800deee:	f001 bbf3 	b.w	800f6d8 <free>

0800def2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800def2:	b508      	push	{r3, lr}
 800def4:	4780      	blx	r0
 800def6:	f001 fbad 	bl	800f654 <abort>
	...

0800defc <_ZSt13get_terminatev>:
 800defc:	4b02      	ldr	r3, [pc, #8]	; (800df08 <_ZSt13get_terminatev+0xc>)
 800defe:	6818      	ldr	r0, [r3, #0]
 800df00:	f3bf 8f5b 	dmb	ish
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop
 800df08:	20000014 	.word	0x20000014

0800df0c <_ZSt9terminatev>:
 800df0c:	b508      	push	{r3, lr}
 800df0e:	f7ff fff5 	bl	800defc <_ZSt13get_terminatev>
 800df12:	f7ff ffee 	bl	800def2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800df18 <_ZSt15get_new_handlerv>:
 800df18:	4b02      	ldr	r3, [pc, #8]	; (800df24 <_ZSt15get_new_handlerv+0xc>)
 800df1a:	6818      	ldr	r0, [r3, #0]
 800df1c:	f3bf 8f5b 	dmb	ish
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	200003e8 	.word	0x200003e8

0800df28 <log>:
 800df28:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800df2c:	ed2d 8b02 	vpush	{d8}
 800df30:	b082      	sub	sp, #8
 800df32:	ed8d 0b00 	vstr	d0, [sp]
 800df36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df3a:	2600      	movs	r6, #0
 800df3c:	1994      	adds	r4, r2, r6
 800df3e:	4e80      	ldr	r6, [pc, #512]	; (800e140 <log+0x218>)
 800df40:	4f80      	ldr	r7, [pc, #512]	; (800e144 <log+0x21c>)
 800df42:	eb43 0506 	adc.w	r5, r3, r6
 800df46:	42af      	cmp	r7, r5
 800df48:	f04f 36ff 	mov.w	r6, #4294967295
 800df4c:	bf08      	it	eq
 800df4e:	42a6      	cmpeq	r6, r4
 800df50:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800df54:	d363      	bcc.n	800e01e <log+0xf6>
 800df56:	497c      	ldr	r1, [pc, #496]	; (800e148 <log+0x220>)
 800df58:	2000      	movs	r0, #0
 800df5a:	428b      	cmp	r3, r1
 800df5c:	bf08      	it	eq
 800df5e:	4282      	cmpeq	r2, r0
 800df60:	f000 80de 	beq.w	800e120 <log+0x1f8>
 800df64:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800df68:	ee30 7b47 	vsub.f64	d7, d0, d7
 800df6c:	4b77      	ldr	r3, [pc, #476]	; (800e14c <log+0x224>)
 800df6e:	ee27 1b07 	vmul.f64	d1, d7, d7
 800df72:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800df76:	ee27 3b01 	vmul.f64	d3, d7, d1
 800df7a:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800df7e:	eea6 4b07 	vfma.f64	d4, d6, d7
 800df82:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800df86:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800df8a:	eea6 4b01 	vfma.f64	d4, d6, d1
 800df8e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800df92:	eea5 6b07 	vfma.f64	d6, d5, d7
 800df96:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800df9a:	eea5 6b01 	vfma.f64	d6, d5, d1
 800df9e:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800dfa2:	eeb0 2b46 	vmov.f64	d2, d6
 800dfa6:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800dfaa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dfae:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800dfb2:	eea5 6b01 	vfma.f64	d6, d5, d1
 800dfb6:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800dfba:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 800dfbe:	eea5 6b03 	vfma.f64	d6, d5, d3
 800dfc2:	eea6 2b03 	vfma.f64	d2, d6, d3
 800dfc6:	ed9f 6b58 	vldr	d6, [pc, #352]	; 800e128 <log+0x200>
 800dfca:	eea2 4b03 	vfma.f64	d4, d2, d3
 800dfce:	eeb0 2b47 	vmov.f64	d2, d7
 800dfd2:	eea7 2b06 	vfma.f64	d2, d7, d6
 800dfd6:	eea7 2b46 	vfms.f64	d2, d7, d6
 800dfda:	eeb0 6b47 	vmov.f64	d6, d7
 800dfde:	ee37 8b42 	vsub.f64	d8, d7, d2
 800dfe2:	ee22 0b02 	vmul.f64	d0, d2, d2
 800dfe6:	eea0 6b01 	vfma.f64	d6, d0, d1
 800dfea:	ee37 5b46 	vsub.f64	d5, d7, d6
 800dfee:	ee37 7b02 	vadd.f64	d7, d7, d2
 800dff2:	eea0 5b01 	vfma.f64	d5, d0, d1
 800dff6:	ee21 1b08 	vmul.f64	d1, d1, d8
 800dffa:	eea1 5b07 	vfma.f64	d5, d1, d7
 800dffe:	eeb0 7b45 	vmov.f64	d7, d5
 800e002:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e006:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e00a:	ed8d 7b00 	vstr	d7, [sp]
 800e00e:	ed9d 0b00 	vldr	d0, [sp]
 800e012:	b002      	add	sp, #8
 800e014:	ecbd 8b02 	vpop	{d8}
 800e018:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e01c:	4770      	bx	lr
 800e01e:	f1ac 0510 	sub.w	r5, ip, #16
 800e022:	f647 74df 	movw	r4, #32735	; 0x7fdf
 800e026:	42a5      	cmp	r5, r4
 800e028:	d930      	bls.n	800e08c <log+0x164>
 800e02a:	1890      	adds	r0, r2, r2
 800e02c:	eb43 0103 	adc.w	r1, r3, r3
 800e030:	4301      	orrs	r1, r0
 800e032:	d107      	bne.n	800e044 <log+0x11c>
 800e034:	2001      	movs	r0, #1
 800e036:	b002      	add	sp, #8
 800e038:	ecbd 8b02 	vpop	{d8}
 800e03c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e040:	f000 b8ba 	b.w	800e1b8 <__math_divzero>
 800e044:	4942      	ldr	r1, [pc, #264]	; (800e150 <log+0x228>)
 800e046:	2000      	movs	r0, #0
 800e048:	428b      	cmp	r3, r1
 800e04a:	bf08      	it	eq
 800e04c:	4282      	cmpeq	r2, r0
 800e04e:	d0de      	beq.n	800e00e <log+0xe6>
 800e050:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800e054:	d104      	bne.n	800e060 <log+0x138>
 800e056:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800e05a:	ea31 010c 	bics.w	r1, r1, ip
 800e05e:	d108      	bne.n	800e072 <log+0x14a>
 800e060:	ed9d 0b00 	vldr	d0, [sp]
 800e064:	b002      	add	sp, #8
 800e066:	ecbd 8b02 	vpop	{d8}
 800e06a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e06e:	f000 b8bb 	b.w	800e1e8 <__math_invalid>
 800e072:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e130 <log+0x208>
 800e076:	ed9d 6b00 	vldr	d6, [sp]
 800e07a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e07e:	ec56 5b17 	vmov	r5, r6, d7
 800e082:	4834      	ldr	r0, [pc, #208]	; (800e154 <log+0x22c>)
 800e084:	2400      	movs	r4, #0
 800e086:	192a      	adds	r2, r5, r4
 800e088:	eb46 0300 	adc.w	r3, r6, r0
 800e08c:	2100      	movs	r1, #0
 800e08e:	1851      	adds	r1, r2, r1
 800e090:	4931      	ldr	r1, [pc, #196]	; (800e158 <log+0x230>)
 800e092:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800e096:	eb43 0101 	adc.w	r1, r3, r1
 800e09a:	0d0c      	lsrs	r4, r1, #20
 800e09c:	2500      	movs	r5, #0
 800e09e:	ebb2 0805 	subs.w	r8, r2, r5
 800e0a2:	ea4f 5404 	mov.w	r4, r4, lsl #20
 800e0a6:	eb63 0904 	sbc.w	r9, r3, r4
 800e0aa:	4b28      	ldr	r3, [pc, #160]	; (800e14c <log+0x224>)
 800e0ac:	f3c1 3046 	ubfx	r0, r1, #13, #7
 800e0b0:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 800e0b4:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 800e0b8:	ec49 8b16 	vmov	d6, r8, r9
 800e0bc:	1509      	asrs	r1, r1, #20
 800e0be:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e0c2:	ee07 1a90 	vmov	s15, r1
 800e0c6:	ee24 1b04 	vmul.f64	d1, d4, d4
 800e0ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e0ce:	ed93 5b00 	vldr	d5, [r3]
 800e0d2:	ee24 0b01 	vmul.f64	d0, d4, d1
 800e0d6:	ed93 3b02 	vldr	d3, [r3, #8]
 800e0da:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 800e0de:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e0e2:	ee34 5b07 	vadd.f64	d5, d4, d7
 800e0e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e0ea:	ee37 7b04 	vadd.f64	d7, d7, d4
 800e0ee:	eea3 7b06 	vfma.f64	d7, d3, d6
 800e0f2:	ed93 6b04 	vldr	d6, [r3, #16]
 800e0f6:	ed93 3b08 	vldr	d3, [r3, #32]
 800e0fa:	eea6 7b01 	vfma.f64	d7, d6, d1
 800e0fe:	ed93 6b06 	vldr	d6, [r3, #24]
 800e102:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e106:	eea3 6b04 	vfma.f64	d6, d3, d4
 800e10a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e10e:	eea2 3b04 	vfma.f64	d3, d2, d4
 800e112:	eea3 6b01 	vfma.f64	d6, d3, d1
 800e116:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e11a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e11e:	e774      	b.n	800e00a <log+0xe2>
 800e120:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800e138 <log+0x210>
 800e124:	e771      	b.n	800e00a <log+0xe2>
 800e126:	bf00      	nop
 800e128:	00000000 	.word	0x00000000
 800e12c:	41a00000 	.word	0x41a00000
 800e130:	00000000 	.word	0x00000000
 800e134:	43300000 	.word	0x43300000
	...
 800e140:	c0120000 	.word	0xc0120000
 800e144:	000308ff 	.word	0x000308ff
 800e148:	3ff00000 	.word	0x3ff00000
 800e14c:	08028e10 	.word	0x08028e10
 800e150:	7ff00000 	.word	0x7ff00000
 800e154:	fcc00000 	.word	0xfcc00000
 800e158:	c01a0000 	.word	0xc01a0000

0800e15c <with_errno>:
 800e15c:	b513      	push	{r0, r1, r4, lr}
 800e15e:	4604      	mov	r4, r0
 800e160:	ed8d 0b00 	vstr	d0, [sp]
 800e164:	f001 fa86 	bl	800f674 <__errno>
 800e168:	ed9d 0b00 	vldr	d0, [sp]
 800e16c:	6004      	str	r4, [r0, #0]
 800e16e:	b002      	add	sp, #8
 800e170:	bd10      	pop	{r4, pc}

0800e172 <xflow>:
 800e172:	b082      	sub	sp, #8
 800e174:	b158      	cbz	r0, 800e18e <xflow+0x1c>
 800e176:	eeb1 7b40 	vneg.f64	d7, d0
 800e17a:	ed8d 7b00 	vstr	d7, [sp]
 800e17e:	ed9d 7b00 	vldr	d7, [sp]
 800e182:	2022      	movs	r0, #34	; 0x22
 800e184:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e188:	b002      	add	sp, #8
 800e18a:	f7ff bfe7 	b.w	800e15c <with_errno>
 800e18e:	eeb0 7b40 	vmov.f64	d7, d0
 800e192:	e7f2      	b.n	800e17a <xflow+0x8>
 800e194:	0000      	movs	r0, r0
	...

0800e198 <__math_uflow>:
 800e198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1a0 <__math_uflow+0x8>
 800e19c:	f7ff bfe9 	b.w	800e172 <xflow>
 800e1a0:	00000000 	.word	0x00000000
 800e1a4:	10000000 	.word	0x10000000

0800e1a8 <__math_oflow>:
 800e1a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1b0 <__math_oflow+0x8>
 800e1ac:	f7ff bfe1 	b.w	800e172 <xflow>
 800e1b0:	00000000 	.word	0x00000000
 800e1b4:	70000000 	.word	0x70000000

0800e1b8 <__math_divzero>:
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e1c0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e1c4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e1c8:	ed8d 7b00 	vstr	d7, [sp]
 800e1cc:	ed9d 0b00 	vldr	d0, [sp]
 800e1d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e1e0 <__math_divzero+0x28>
 800e1d4:	2022      	movs	r0, #34	; 0x22
 800e1d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e1da:	b002      	add	sp, #8
 800e1dc:	f7ff bfbe 	b.w	800e15c <with_errno>
	...

0800e1e8 <__math_invalid>:
 800e1e8:	eeb0 7b40 	vmov.f64	d7, d0
 800e1ec:	eeb4 7b47 	vcmp.f64	d7, d7
 800e1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e1f8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e1fc:	d602      	bvs.n	800e204 <__math_invalid+0x1c>
 800e1fe:	2021      	movs	r0, #33	; 0x21
 800e200:	f7ff bfac 	b.w	800e15c <with_errno>
 800e204:	4770      	bx	lr

0800e206 <__math_check_uflow>:
 800e206:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e20e:	d102      	bne.n	800e216 <__math_check_uflow+0x10>
 800e210:	2022      	movs	r0, #34	; 0x22
 800e212:	f7ff bfa3 	b.w	800e15c <with_errno>
 800e216:	4770      	bx	lr

0800e218 <__math_check_oflow>:
 800e218:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e238 <__math_check_oflow+0x20>
 800e21c:	eeb0 7bc0 	vabs.f64	d7, d0
 800e220:	eeb4 7b46 	vcmp.f64	d7, d6
 800e224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e228:	dd02      	ble.n	800e230 <__math_check_oflow+0x18>
 800e22a:	2022      	movs	r0, #34	; 0x22
 800e22c:	f7ff bf96 	b.w	800e15c <with_errno>
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	f3af 8000 	nop.w
 800e238:	ffffffff 	.word	0xffffffff
 800e23c:	7fefffff 	.word	0x7fefffff

0800e240 <checkint>:
 800e240:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e244:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800e248:	429a      	cmp	r2, r3
 800e24a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24c:	dd2b      	ble.n	800e2a6 <checkint+0x66>
 800e24e:	f240 4333 	movw	r3, #1075	; 0x433
 800e252:	429a      	cmp	r2, r3
 800e254:	dc25      	bgt.n	800e2a2 <checkint+0x62>
 800e256:	1a9b      	subs	r3, r3, r2
 800e258:	f1a3 0620 	sub.w	r6, r3, #32
 800e25c:	f04f 32ff 	mov.w	r2, #4294967295
 800e260:	fa02 f606 	lsl.w	r6, r2, r6
 800e264:	fa02 f403 	lsl.w	r4, r2, r3
 800e268:	f1c3 0520 	rsb	r5, r3, #32
 800e26c:	4334      	orrs	r4, r6
 800e26e:	fa22 f505 	lsr.w	r5, r2, r5
 800e272:	432c      	orrs	r4, r5
 800e274:	409a      	lsls	r2, r3
 800e276:	ea20 0602 	bic.w	r6, r0, r2
 800e27a:	ea21 0704 	bic.w	r7, r1, r4
 800e27e:	ea56 0207 	orrs.w	r2, r6, r7
 800e282:	f1a3 0420 	sub.w	r4, r3, #32
 800e286:	f1c3 0220 	rsb	r2, r3, #32
 800e28a:	d10c      	bne.n	800e2a6 <checkint+0x66>
 800e28c:	40d8      	lsrs	r0, r3
 800e28e:	fa01 f302 	lsl.w	r3, r1, r2
 800e292:	4318      	orrs	r0, r3
 800e294:	40e1      	lsrs	r1, r4
 800e296:	4308      	orrs	r0, r1
 800e298:	f000 0301 	and.w	r3, r0, #1
 800e29c:	f1c3 0002 	rsb	r0, r3, #2
 800e2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2a2:	2002      	movs	r0, #2
 800e2a4:	e7fc      	b.n	800e2a0 <checkint+0x60>
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	e7fa      	b.n	800e2a0 <checkint+0x60>
 800e2aa:	0000      	movs	r0, r0
 800e2ac:	0000      	movs	r0, r0
	...

0800e2b0 <pow>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	ed2d 8b0a 	vpush	{d8-d12}
 800e2b8:	b09b      	sub	sp, #108	; 0x6c
 800e2ba:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e2be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2c2:	ed8d 1b00 	vstr	d1, [sp]
 800e2c6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800e2ca:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e2ce:	f109 30ff 	add.w	r0, r9, #4294967295
 800e2d2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800e2d6:	4288      	cmp	r0, r1
 800e2d8:	46cc      	mov	ip, r9
 800e2da:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800e2de:	d806      	bhi.n	800e2ee <pow+0x3e>
 800e2e0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800e2e4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800e2e8:	297f      	cmp	r1, #127	; 0x7f
 800e2ea:	f240 81ab 	bls.w	800e644 <pow+0x394>
 800e2ee:	19b1      	adds	r1, r6, r6
 800e2f0:	9104      	str	r1, [sp, #16]
 800e2f2:	eb47 0107 	adc.w	r1, r7, r7
 800e2f6:	9105      	str	r1, [sp, #20]
 800e2f8:	9904      	ldr	r1, [sp, #16]
 800e2fa:	f111 31ff 	adds.w	r1, r1, #4294967295
 800e2fe:	460a      	mov	r2, r1
 800e300:	9905      	ldr	r1, [sp, #20]
 800e302:	f141 31ff 	adc.w	r1, r1, #4294967295
 800e306:	460b      	mov	r3, r1
 800e308:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800e30c:	f06f 0001 	mvn.w	r0, #1
 800e310:	4299      	cmp	r1, r3
 800e312:	bf08      	it	eq
 800e314:	4290      	cmpeq	r0, r2
 800e316:	d260      	bcs.n	800e3da <pow+0x12a>
 800e318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	d11a      	bne.n	800e356 <pow+0xa6>
 800e320:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800e324:	1923      	adds	r3, r4, r4
 800e326:	930c      	str	r3, [sp, #48]	; 0x30
 800e328:	eb42 0302 	adc.w	r3, r2, r2
 800e32c:	930d      	str	r3, [sp, #52]	; 0x34
 800e32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e332:	4bcf      	ldr	r3, [pc, #828]	; (800e670 <pow+0x3c0>)
 800e334:	2200      	movs	r2, #0
 800e336:	428b      	cmp	r3, r1
 800e338:	bf08      	it	eq
 800e33a:	4282      	cmpeq	r2, r0
 800e33c:	f080 8265 	bcs.w	800e80a <pow+0x55a>
 800e340:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e344:	ed9d 6b00 	vldr	d6, [sp]
 800e348:	ee37 0b06 	vadd.f64	d0, d7, d6
 800e34c:	b01b      	add	sp, #108	; 0x6c
 800e34e:	ecbd 8b0a 	vpop	{d8-d12}
 800e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e356:	49c7      	ldr	r1, [pc, #796]	; (800e674 <pow+0x3c4>)
 800e358:	2000      	movs	r0, #0
 800e35a:	428d      	cmp	r5, r1
 800e35c:	bf08      	it	eq
 800e35e:	4284      	cmpeq	r4, r0
 800e360:	d10b      	bne.n	800e37a <pow+0xca>
 800e362:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e366:	19b3      	adds	r3, r6, r6
 800e368:	930e      	str	r3, [sp, #56]	; 0x38
 800e36a:	eb42 0302 	adc.w	r3, r2, r2
 800e36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e370:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e374:	4bbe      	ldr	r3, [pc, #760]	; (800e670 <pow+0x3c0>)
 800e376:	2200      	movs	r2, #0
 800e378:	e7dd      	b.n	800e336 <pow+0x86>
 800e37a:	1921      	adds	r1, r4, r4
 800e37c:	9106      	str	r1, [sp, #24]
 800e37e:	eb45 0105 	adc.w	r1, r5, r5
 800e382:	9107      	str	r1, [sp, #28]
 800e384:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e388:	49bb      	ldr	r1, [pc, #748]	; (800e678 <pow+0x3c8>)
 800e38a:	2000      	movs	r0, #0
 800e38c:	42a1      	cmp	r1, r4
 800e38e:	bf08      	it	eq
 800e390:	4298      	cmpeq	r0, r3
 800e392:	d3d5      	bcc.n	800e340 <pow+0x90>
 800e394:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e398:	428c      	cmp	r4, r1
 800e39a:	bf08      	it	eq
 800e39c:	4283      	cmpeq	r3, r0
 800e39e:	d1cf      	bne.n	800e340 <pow+0x90>
 800e3a0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e3a4:	49b5      	ldr	r1, [pc, #724]	; (800e67c <pow+0x3cc>)
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	428c      	cmp	r4, r1
 800e3aa:	bf08      	it	eq
 800e3ac:	4283      	cmpeq	r3, r0
 800e3ae:	f000 822c 	beq.w	800e80a <pow+0x55a>
 800e3b2:	49b3      	ldr	r1, [pc, #716]	; (800e680 <pow+0x3d0>)
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b8:	42a1      	cmp	r1, r4
 800e3ba:	bf08      	it	eq
 800e3bc:	4298      	cmpeq	r0, r3
 800e3be:	ea6f 0307 	mvn.w	r3, r7
 800e3c2:	bf34      	ite	cc
 800e3c4:	2201      	movcc	r2, #1
 800e3c6:	2200      	movcs	r2, #0
 800e3c8:	0fdb      	lsrs	r3, r3, #31
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	f040 821a 	bne.w	800e804 <pow+0x554>
 800e3d0:	ed9d 7b00 	vldr	d7, [sp]
 800e3d4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e3d8:	e7b8      	b.n	800e34c <pow+0x9c>
 800e3da:	1923      	adds	r3, r4, r4
 800e3dc:	9308      	str	r3, [sp, #32]
 800e3de:	eb45 0305 	adc.w	r3, r5, r5
 800e3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e4:	9b08      	ldr	r3, [sp, #32]
 800e3e6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e3ea:	9310      	str	r3, [sp, #64]	; 0x40
 800e3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ee:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e3f2:	9311      	str	r3, [sp, #68]	; 0x44
 800e3f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e3f8:	4299      	cmp	r1, r3
 800e3fa:	bf08      	it	eq
 800e3fc:	4290      	cmpeq	r0, r2
 800e3fe:	d22d      	bcs.n	800e45c <pow+0x1ac>
 800e400:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e404:	2c00      	cmp	r4, #0
 800e406:	f175 0300 	sbcs.w	r3, r5, #0
 800e40a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e40e:	da16      	bge.n	800e43e <pow+0x18e>
 800e410:	4630      	mov	r0, r6
 800e412:	4639      	mov	r1, r7
 800e414:	f7ff ff14 	bl	800e240 <checkint>
 800e418:	2801      	cmp	r0, #1
 800e41a:	d110      	bne.n	800e43e <pow+0x18e>
 800e41c:	eeb1 0b40 	vneg.f64	d0, d0
 800e420:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e424:	4323      	orrs	r3, r4
 800e426:	d10c      	bne.n	800e442 <pow+0x192>
 800e428:	2e00      	cmp	r6, #0
 800e42a:	f177 0300 	sbcs.w	r3, r7, #0
 800e42e:	da8d      	bge.n	800e34c <pow+0x9c>
 800e430:	b01b      	add	sp, #108	; 0x6c
 800e432:	ecbd 8b0a 	vpop	{d8-d12}
 800e436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43a:	f7ff bebd 	b.w	800e1b8 <__math_divzero>
 800e43e:	2000      	movs	r0, #0
 800e440:	e7ee      	b.n	800e420 <pow+0x170>
 800e442:	2e00      	cmp	r6, #0
 800e444:	f177 0300 	sbcs.w	r3, r7, #0
 800e448:	da80      	bge.n	800e34c <pow+0x9c>
 800e44a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e44e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e452:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e456:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e45a:	e777      	b.n	800e34c <pow+0x9c>
 800e45c:	2c00      	cmp	r4, #0
 800e45e:	f175 0300 	sbcs.w	r3, r5, #0
 800e462:	da35      	bge.n	800e4d0 <pow+0x220>
 800e464:	4630      	mov	r0, r6
 800e466:	4639      	mov	r1, r7
 800e468:	f7ff feea 	bl	800e240 <checkint>
 800e46c:	b940      	cbnz	r0, 800e480 <pow+0x1d0>
 800e46e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e472:	b01b      	add	sp, #108	; 0x6c
 800e474:	ecbd 8b0a 	vpop	{d8-d12}
 800e478:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	f7ff beb4 	b.w	800e1e8 <__math_invalid>
 800e480:	2801      	cmp	r0, #1
 800e482:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e486:	bf14      	ite	ne
 800e488:	2000      	movne	r0, #0
 800e48a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e48e:	461d      	mov	r5, r3
 800e490:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e494:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e498:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e49c:	2a7f      	cmp	r2, #127	; 0x7f
 800e49e:	d933      	bls.n	800e508 <pow+0x258>
 800e4a0:	4974      	ldr	r1, [pc, #464]	; (800e674 <pow+0x3c4>)
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	428d      	cmp	r5, r1
 800e4a6:	bf08      	it	eq
 800e4a8:	4284      	cmpeq	r4, r0
 800e4aa:	f000 81ae 	beq.w	800e80a <pow+0x55a>
 800e4ae:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d80e      	bhi.n	800e4d4 <pow+0x224>
 800e4b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e4ba:	ed9d 7b00 	vldr	d7, [sp]
 800e4be:	42a9      	cmp	r1, r5
 800e4c0:	bf08      	it	eq
 800e4c2:	42a0      	cmpeq	r0, r4
 800e4c4:	bf34      	ite	cc
 800e4c6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e4ca:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e4ce:	e73d      	b.n	800e34c <pow+0x9c>
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	e7df      	b.n	800e494 <pow+0x1e4>
 800e4d4:	42a9      	cmp	r1, r5
 800e4d6:	bf08      	it	eq
 800e4d8:	42a0      	cmpeq	r0, r4
 800e4da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e4de:	bf2c      	ite	cs
 800e4e0:	2301      	movcs	r3, #1
 800e4e2:	2300      	movcc	r3, #0
 800e4e4:	4590      	cmp	r8, r2
 800e4e6:	bf8c      	ite	hi
 800e4e8:	f04f 0800 	movhi.w	r8, #0
 800e4ec:	f04f 0801 	movls.w	r8, #1
 800e4f0:	4543      	cmp	r3, r8
 800e4f2:	f04f 0000 	mov.w	r0, #0
 800e4f6:	f000 80af 	beq.w	800e658 <pow+0x3a8>
 800e4fa:	b01b      	add	sp, #108	; 0x6c
 800e4fc:	ecbd 8b0a 	vpop	{d8-d12}
 800e500:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	f7ff be50 	b.w	800e1a8 <__math_oflow>
 800e508:	f1bc 0f00 	cmp.w	ip, #0
 800e50c:	d10e      	bne.n	800e52c <pow+0x27c>
 800e50e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e668 <pow+0x3b8>
 800e512:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e516:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e51a:	ec57 6b17 	vmov	r6, r7, d7
 800e51e:	4b59      	ldr	r3, [pc, #356]	; (800e684 <pow+0x3d4>)
 800e520:	2100      	movs	r1, #0
 800e522:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e526:	1874      	adds	r4, r6, r1
 800e528:	eb42 0503 	adc.w	r5, r2, r3
 800e52c:	2300      	movs	r3, #0
 800e52e:	18e3      	adds	r3, r4, r3
 800e530:	4b55      	ldr	r3, [pc, #340]	; (800e688 <pow+0x3d8>)
 800e532:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e536:	eb45 0303 	adc.w	r3, r5, r3
 800e53a:	1519      	asrs	r1, r3, #20
 800e53c:	ee03 1a10 	vmov	s6, r1
 800e540:	0d1e      	lsrs	r6, r3, #20
 800e542:	2100      	movs	r1, #0
 800e544:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e548:	0536      	lsls	r6, r6, #20
 800e54a:	1a63      	subs	r3, r4, r1
 800e54c:	9312      	str	r3, [sp, #72]	; 0x48
 800e54e:	eb65 0306 	sbc.w	r3, r5, r6
 800e552:	9313      	str	r3, [sp, #76]	; 0x4c
 800e554:	4b4d      	ldr	r3, [pc, #308]	; (800e68c <pow+0x3dc>)
 800e556:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e55a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e55e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e562:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e566:	ed93 7b00 	vldr	d7, [r3]
 800e56a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e56e:	ed93 4b02 	vldr	d4, [r3, #8]
 800e572:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e576:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e57a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e57e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e582:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e586:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e58a:	ed93 4b04 	vldr	d4, [r3, #16]
 800e58e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e592:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e596:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e59a:	ed93 3b08 	vldr	d3, [r3, #32]
 800e59e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e5a2:	eeb0 8b40 	vmov.f64	d8, d0
 800e5a6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e5aa:	ed93 4b06 	vldr	d4, [r3, #24]
 800e5ae:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e5b2:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e5b6:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e5ba:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e5be:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e5c2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e5c6:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e5ca:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e5ce:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e5d2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e5d6:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e5da:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e5de:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e5e2:	ed9d 6b00 	vldr	d6, [sp]
 800e5e6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e5ea:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e5ee:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e5f2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e5f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e5fa:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e5fe:	eeb0 3b46 	vmov.f64	d3, d6
 800e602:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e60a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e60e:	ed9d 6b00 	vldr	d6, [sp]
 800e612:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e616:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e61a:	193c      	adds	r4, r7, r4
 800e61c:	2c3e      	cmp	r4, #62	; 0x3e
 800e61e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e622:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e626:	d934      	bls.n	800e692 <pow+0x3e2>
 800e628:	428c      	cmp	r4, r1
 800e62a:	da0d      	bge.n	800e648 <pow+0x398>
 800e62c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e630:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e634:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e638:	2800      	cmp	r0, #0
 800e63a:	f43f ae87 	beq.w	800e34c <pow+0x9c>
 800e63e:	eeb1 0b40 	vneg.f64	d0, d0
 800e642:	e683      	b.n	800e34c <pow+0x9c>
 800e644:	2000      	movs	r0, #0
 800e646:	e771      	b.n	800e52c <pow+0x27c>
 800e648:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e64c:	d920      	bls.n	800e690 <pow+0x3e0>
 800e64e:	2a00      	cmp	r2, #0
 800e650:	f173 0300 	sbcs.w	r3, r3, #0
 800e654:	f6bf af51 	bge.w	800e4fa <pow+0x24a>
 800e658:	b01b      	add	sp, #108	; 0x6c
 800e65a:	ecbd 8b0a 	vpop	{d8-d12}
 800e65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e662:	f7ff bd99 	b.w	800e198 <__math_uflow>
 800e666:	bf00      	nop
 800e668:	00000000 	.word	0x00000000
 800e66c:	43300000 	.word	0x43300000
 800e670:	fff00000 	.word	0xfff00000
 800e674:	3ff00000 	.word	0x3ff00000
 800e678:	ffe00000 	.word	0xffe00000
 800e67c:	7fe00000 	.word	0x7fe00000
 800e680:	7fdfffff 	.word	0x7fdfffff
 800e684:	fcc00000 	.word	0xfcc00000
 800e688:	c0196aab 	.word	0xc0196aab
 800e68c:	080296a0 	.word	0x080296a0
 800e690:	460f      	mov	r7, r1
 800e692:	4e65      	ldr	r6, [pc, #404]	; (800e828 <pow+0x578>)
 800e694:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e698:	ed96 6b02 	vldr	d6, [r6, #8]
 800e69c:	ed96 7b00 	vldr	d7, [r6]
 800e6a0:	eeb0 5b46 	vmov.f64	d5, d6
 800e6a4:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e6a8:	ed8d 5b00 	vstr	d5, [sp]
 800e6ac:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e6b0:	eeb0 5b44 	vmov.f64	d5, d4
 800e6b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6b8:	ed96 7b04 	vldr	d7, [r6, #16]
 800e6bc:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e6c0:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e6c4:	eeb0 7b45 	vmov.f64	d7, d5
 800e6c8:	ed96 5b06 	vldr	d5, [r6, #24]
 800e6cc:	1849      	adds	r1, r1, r1
 800e6ce:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e6d2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e6d6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e6da:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e6de:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e6e2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e6e6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e6ea:	ed96 5b08 	vldr	d5, [r6, #32]
 800e6ee:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e6f2:	1814      	adds	r4, r2, r0
 800e6f4:	0365      	lsls	r5, r4, #13
 800e6f6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e6fa:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e6fe:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e702:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e706:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e70a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e70e:	2000      	movs	r0, #0
 800e710:	eb10 0a04 	adds.w	sl, r0, r4
 800e714:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e718:	eb45 0b0c 	adc.w	fp, r5, ip
 800e71c:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e720:	2f00      	cmp	r7, #0
 800e722:	d16a      	bne.n	800e7fa <pow+0x54a>
 800e724:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e728:	4639      	mov	r1, r7
 800e72a:	ea50 0301 	orrs.w	r3, r0, r1
 800e72e:	f04f 0300 	mov.w	r3, #0
 800e732:	d115      	bne.n	800e760 <pow+0x4b0>
 800e734:	eb1a 0303 	adds.w	r3, sl, r3
 800e738:	ee0b 3a10 	vmov	s22, r3
 800e73c:	4b3b      	ldr	r3, [pc, #236]	; (800e82c <pow+0x57c>)
 800e73e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e810 <pow+0x560>
 800e742:	eb4b 0303 	adc.w	r3, fp, r3
 800e746:	ee0b 3a90 	vmov	s23, r3
 800e74a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e74e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e752:	b01b      	add	sp, #108	; 0x6c
 800e754:	ecbd 8b0a 	vpop	{d8-d12}
 800e758:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75c:	f7ff bd5c 	b.w	800e218 <__math_check_oflow>
 800e760:	eb1a 0303 	adds.w	r3, sl, r3
 800e764:	930a      	str	r3, [sp, #40]	; 0x28
 800e766:	4b32      	ldr	r3, [pc, #200]	; (800e830 <pow+0x580>)
 800e768:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e76c:	eb4b 0303 	adc.w	r3, fp, r3
 800e770:	930b      	str	r3, [sp, #44]	; 0x2c
 800e772:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e776:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e77a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e77e:	eeb0 3bc7 	vabs.f64	d3, d7
 800e782:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e818 <pow+0x568>
 800e78e:	d52b      	bpl.n	800e7e8 <pow+0x538>
 800e790:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e794:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e7a0:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e7a4:	bf48      	it	mi
 800e7a6:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e7aa:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e7ae:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e7b2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e7b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7ba:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e7be:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e7c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ca:	d105      	bne.n	800e7d8 <pow+0x528>
 800e7cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7ce:	463a      	mov	r2, r7
 800e7d0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e7d4:	ec43 2b17 	vmov	d7, r2, r3
 800e7d8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e7dc:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e7e0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e7e4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e7e8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e7ec:	b01b      	add	sp, #108	; 0x6c
 800e7ee:	ecbd 8b0a 	vpop	{d8-d12}
 800e7f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f6:	f7ff bd06 	b.w	800e206 <__math_check_uflow>
 800e7fa:	ec4b ab10 	vmov	d0, sl, fp
 800e7fe:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e802:	e5a3      	b.n	800e34c <pow+0x9c>
 800e804:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e820 <pow+0x570>
 800e808:	e5a0      	b.n	800e34c <pow+0x9c>
 800e80a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e80e:	e59d      	b.n	800e34c <pow+0x9c>
 800e810:	00000000 	.word	0x00000000
 800e814:	7f000000 	.word	0x7f000000
 800e818:	00000000 	.word	0x00000000
 800e81c:	00100000 	.word	0x00100000
	...
 800e828:	0802a990 	.word	0x0802a990
 800e82c:	c0f00000 	.word	0xc0f00000
 800e830:	3fe00000 	.word	0x3fe00000
 800e834:	00000000 	.word	0x00000000

0800e838 <ceil>:
 800e838:	ee10 1a90 	vmov	r1, s1
 800e83c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e840:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e844:	2b13      	cmp	r3, #19
 800e846:	b530      	push	{r4, r5, lr}
 800e848:	ee10 0a10 	vmov	r0, s0
 800e84c:	ee10 5a10 	vmov	r5, s0
 800e850:	dc2f      	bgt.n	800e8b2 <ceil+0x7a>
 800e852:	2b00      	cmp	r3, #0
 800e854:	da13      	bge.n	800e87e <ceil+0x46>
 800e856:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e918 <ceil+0xe0>
 800e85a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e85e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e866:	dd05      	ble.n	800e874 <ceil+0x3c>
 800e868:	2900      	cmp	r1, #0
 800e86a:	db4c      	blt.n	800e906 <ceil+0xce>
 800e86c:	4301      	orrs	r1, r0
 800e86e:	d04e      	beq.n	800e90e <ceil+0xd6>
 800e870:	492b      	ldr	r1, [pc, #172]	; (800e920 <ceil+0xe8>)
 800e872:	2000      	movs	r0, #0
 800e874:	460b      	mov	r3, r1
 800e876:	4602      	mov	r2, r0
 800e878:	ec43 2b10 	vmov	d0, r2, r3
 800e87c:	e020      	b.n	800e8c0 <ceil+0x88>
 800e87e:	4a29      	ldr	r2, [pc, #164]	; (800e924 <ceil+0xec>)
 800e880:	411a      	asrs	r2, r3
 800e882:	ea01 0402 	and.w	r4, r1, r2
 800e886:	4304      	orrs	r4, r0
 800e888:	d01a      	beq.n	800e8c0 <ceil+0x88>
 800e88a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800e918 <ceil+0xe0>
 800e88e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e892:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89a:	ddeb      	ble.n	800e874 <ceil+0x3c>
 800e89c:	2900      	cmp	r1, #0
 800e89e:	bfc2      	ittt	gt
 800e8a0:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800e8a4:	fa40 f303 	asrgt.w	r3, r0, r3
 800e8a8:	18c9      	addgt	r1, r1, r3
 800e8aa:	ea21 0102 	bic.w	r1, r1, r2
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	e7e0      	b.n	800e874 <ceil+0x3c>
 800e8b2:	2b33      	cmp	r3, #51	; 0x33
 800e8b4:	dd05      	ble.n	800e8c2 <ceil+0x8a>
 800e8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8ba:	d101      	bne.n	800e8c0 <ceil+0x88>
 800e8bc:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e8c0:	bd30      	pop	{r4, r5, pc}
 800e8c2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ca:	40e2      	lsrs	r2, r4
 800e8cc:	4202      	tst	r2, r0
 800e8ce:	d0f7      	beq.n	800e8c0 <ceil+0x88>
 800e8d0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800e918 <ceil+0xe0>
 800e8d4:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e0:	ddc8      	ble.n	800e874 <ceil+0x3c>
 800e8e2:	2900      	cmp	r1, #0
 800e8e4:	dd02      	ble.n	800e8ec <ceil+0xb4>
 800e8e6:	2b14      	cmp	r3, #20
 800e8e8:	d103      	bne.n	800e8f2 <ceil+0xba>
 800e8ea:	3101      	adds	r1, #1
 800e8ec:	ea20 0002 	bic.w	r0, r0, r2
 800e8f0:	e7c0      	b.n	800e874 <ceil+0x3c>
 800e8f2:	2401      	movs	r4, #1
 800e8f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e8f8:	fa04 f303 	lsl.w	r3, r4, r3
 800e8fc:	4418      	add	r0, r3
 800e8fe:	42a8      	cmp	r0, r5
 800e900:	bf38      	it	cc
 800e902:	1909      	addcc	r1, r1, r4
 800e904:	e7f2      	b.n	800e8ec <ceil+0xb4>
 800e906:	2000      	movs	r0, #0
 800e908:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e90c:	e7b2      	b.n	800e874 <ceil+0x3c>
 800e90e:	4608      	mov	r0, r1
 800e910:	e7b0      	b.n	800e874 <ceil+0x3c>
 800e912:	bf00      	nop
 800e914:	f3af 8000 	nop.w
 800e918:	8800759c 	.word	0x8800759c
 800e91c:	7e37e43c 	.word	0x7e37e43c
 800e920:	3ff00000 	.word	0x3ff00000
 800e924:	000fffff 	.word	0x000fffff

0800e928 <cos>:
 800e928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e92a:	eeb0 7b40 	vmov.f64	d7, d0
 800e92e:	ee17 3a90 	vmov	r3, s15
 800e932:	4a1f      	ldr	r2, [pc, #124]	; (800e9b0 <cos+0x88>)
 800e934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e938:	4293      	cmp	r3, r2
 800e93a:	dc04      	bgt.n	800e946 <cos+0x1e>
 800e93c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e9a8 <cos+0x80>
 800e940:	f000 fa0a 	bl	800ed58 <__kernel_cos>
 800e944:	e004      	b.n	800e950 <cos+0x28>
 800e946:	4a1b      	ldr	r2, [pc, #108]	; (800e9b4 <cos+0x8c>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	dd04      	ble.n	800e956 <cos+0x2e>
 800e94c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e950:	b005      	add	sp, #20
 800e952:	f85d fb04 	ldr.w	pc, [sp], #4
 800e956:	4668      	mov	r0, sp
 800e958:	f000 f8ba 	bl	800ead0 <__ieee754_rem_pio2>
 800e95c:	f000 0003 	and.w	r0, r0, #3
 800e960:	2801      	cmp	r0, #1
 800e962:	d007      	beq.n	800e974 <cos+0x4c>
 800e964:	2802      	cmp	r0, #2
 800e966:	d00e      	beq.n	800e986 <cos+0x5e>
 800e968:	b9a0      	cbnz	r0, 800e994 <cos+0x6c>
 800e96a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e96e:	ed9d 0b00 	vldr	d0, [sp]
 800e972:	e7e5      	b.n	800e940 <cos+0x18>
 800e974:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e978:	ed9d 0b00 	vldr	d0, [sp]
 800e97c:	f000 fcd8 	bl	800f330 <__kernel_sin>
 800e980:	eeb1 0b40 	vneg.f64	d0, d0
 800e984:	e7e4      	b.n	800e950 <cos+0x28>
 800e986:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e98a:	ed9d 0b00 	vldr	d0, [sp]
 800e98e:	f000 f9e3 	bl	800ed58 <__kernel_cos>
 800e992:	e7f5      	b.n	800e980 <cos+0x58>
 800e994:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e998:	ed9d 0b00 	vldr	d0, [sp]
 800e99c:	2001      	movs	r0, #1
 800e99e:	f000 fcc7 	bl	800f330 <__kernel_sin>
 800e9a2:	e7d5      	b.n	800e950 <cos+0x28>
 800e9a4:	f3af 8000 	nop.w
	...
 800e9b0:	3fe921fb 	.word	0x3fe921fb
 800e9b4:	7fefffff 	.word	0x7fefffff

0800e9b8 <logf>:
 800e9b8:	ee10 3a10 	vmov	r3, s0
 800e9bc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e9c0:	b410      	push	{r4}
 800e9c2:	d055      	beq.n	800ea70 <logf+0xb8>
 800e9c4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800e9c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800e9cc:	d31a      	bcc.n	800ea04 <logf+0x4c>
 800e9ce:	005a      	lsls	r2, r3, #1
 800e9d0:	d104      	bne.n	800e9dc <logf+0x24>
 800e9d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9d6:	2001      	movs	r0, #1
 800e9d8:	f000 bd0e 	b.w	800f3f8 <__math_divzerof>
 800e9dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e9e0:	d043      	beq.n	800ea6a <logf+0xb2>
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	db02      	blt.n	800e9ec <logf+0x34>
 800e9e6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800e9ea:	d303      	bcc.n	800e9f4 <logf+0x3c>
 800e9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9f0:	f000 bd12 	b.w	800f418 <__math_invalidf>
 800e9f4:	eddf 7a20 	vldr	s15, [pc, #128]	; 800ea78 <logf+0xc0>
 800e9f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e9fc:	ee10 3a10 	vmov	r3, s0
 800ea00:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800ea04:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800ea08:	491c      	ldr	r1, [pc, #112]	; (800ea7c <logf+0xc4>)
 800ea0a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800ea0e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800ea12:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800ea16:	0dd4      	lsrs	r4, r2, #23
 800ea18:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800ea1c:	05e4      	lsls	r4, r4, #23
 800ea1e:	ed90 6b00 	vldr	d6, [r0]
 800ea22:	1b1b      	subs	r3, r3, r4
 800ea24:	ee07 3a90 	vmov	s15, r3
 800ea28:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800ea2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ea30:	15d2      	asrs	r2, r2, #23
 800ea32:	eea6 0b07 	vfma.f64	d0, d6, d7
 800ea36:	ed90 6b02 	vldr	d6, [r0, #8]
 800ea3a:	ee07 2a90 	vmov	s15, r2
 800ea3e:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800ea42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea46:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ea4a:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800ea4e:	ee20 5b00 	vmul.f64	d5, d0, d0
 800ea52:	eea4 7b00 	vfma.f64	d7, d4, d0
 800ea56:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800ea5a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800ea5e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ea62:	eea5 0b07 	vfma.f64	d0, d5, d7
 800ea66:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ea6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea6e:	4770      	bx	lr
 800ea70:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ea80 <logf+0xc8>
 800ea74:	e7f9      	b.n	800ea6a <logf+0xb2>
 800ea76:	bf00      	nop
 800ea78:	4b000000 	.word	0x4b000000
 800ea7c:	0802a6e8 	.word	0x0802a6e8
 800ea80:	00000000 	.word	0x00000000

0800ea84 <sqrtf>:
 800ea84:	b508      	push	{r3, lr}
 800ea86:	ed2d 8b02 	vpush	{d8}
 800ea8a:	eeb0 8a40 	vmov.f32	s16, s0
 800ea8e:	f000 f95f 	bl	800ed50 <__ieee754_sqrtf>
 800ea92:	4b0d      	ldr	r3, [pc, #52]	; (800eac8 <sqrtf+0x44>)
 800ea94:	f993 3000 	ldrsb.w	r3, [r3]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	d011      	beq.n	800eac0 <sqrtf+0x3c>
 800ea9c:	eeb4 8a48 	vcmp.f32	s16, s16
 800eaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa4:	d60c      	bvs.n	800eac0 <sqrtf+0x3c>
 800eaa6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800eacc <sqrtf+0x48>
 800eaaa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab2:	d505      	bpl.n	800eac0 <sqrtf+0x3c>
 800eab4:	f000 fdde 	bl	800f674 <__errno>
 800eab8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eabc:	2321      	movs	r3, #33	; 0x21
 800eabe:	6003      	str	r3, [r0, #0]
 800eac0:	ecbd 8b02 	vpop	{d8}
 800eac4:	bd08      	pop	{r3, pc}
 800eac6:	bf00      	nop
 800eac8:	20000018 	.word	0x20000018
 800eacc:	00000000 	.word	0x00000000

0800ead0 <__ieee754_rem_pio2>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	eeb0 7b40 	vmov.f64	d7, d0
 800ead6:	ee17 5a90 	vmov	r5, s15
 800eada:	4b97      	ldr	r3, [pc, #604]	; (800ed38 <__ieee754_rem_pio2+0x268>)
 800eadc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eae0:	429e      	cmp	r6, r3
 800eae2:	b088      	sub	sp, #32
 800eae4:	4604      	mov	r4, r0
 800eae6:	dc07      	bgt.n	800eaf8 <__ieee754_rem_pio2+0x28>
 800eae8:	2200      	movs	r2, #0
 800eaea:	2300      	movs	r3, #0
 800eaec:	ed84 0b00 	vstr	d0, [r4]
 800eaf0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	e01b      	b.n	800eb30 <__ieee754_rem_pio2+0x60>
 800eaf8:	4b90      	ldr	r3, [pc, #576]	; (800ed3c <__ieee754_rem_pio2+0x26c>)
 800eafa:	429e      	cmp	r6, r3
 800eafc:	dc3b      	bgt.n	800eb76 <__ieee754_rem_pio2+0xa6>
 800eafe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800eb02:	2d00      	cmp	r5, #0
 800eb04:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ecf8 <__ieee754_rem_pio2+0x228>
 800eb08:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800eb0c:	dd19      	ble.n	800eb42 <__ieee754_rem_pio2+0x72>
 800eb0e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800eb12:	429e      	cmp	r6, r3
 800eb14:	d00e      	beq.n	800eb34 <__ieee754_rem_pio2+0x64>
 800eb16:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ed00 <__ieee754_rem_pio2+0x230>
 800eb1a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800eb1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb22:	ed84 5b00 	vstr	d5, [r4]
 800eb26:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb2a:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb2e:	2001      	movs	r0, #1
 800eb30:	b008      	add	sp, #32
 800eb32:	bd70      	pop	{r4, r5, r6, pc}
 800eb34:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ed08 <__ieee754_rem_pio2+0x238>
 800eb38:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb3c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ed10 <__ieee754_rem_pio2+0x240>
 800eb40:	e7eb      	b.n	800eb1a <__ieee754_rem_pio2+0x4a>
 800eb42:	429e      	cmp	r6, r3
 800eb44:	ee30 7b06 	vadd.f64	d7, d0, d6
 800eb48:	d00e      	beq.n	800eb68 <__ieee754_rem_pio2+0x98>
 800eb4a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800ed00 <__ieee754_rem_pio2+0x230>
 800eb4e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800eb52:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb56:	ed84 5b00 	vstr	d5, [r4]
 800eb5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb62:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb66:	e7e3      	b.n	800eb30 <__ieee754_rem_pio2+0x60>
 800eb68:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ed08 <__ieee754_rem_pio2+0x238>
 800eb6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eb70:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ed10 <__ieee754_rem_pio2+0x240>
 800eb74:	e7eb      	b.n	800eb4e <__ieee754_rem_pio2+0x7e>
 800eb76:	4b72      	ldr	r3, [pc, #456]	; (800ed40 <__ieee754_rem_pio2+0x270>)
 800eb78:	429e      	cmp	r6, r3
 800eb7a:	dc6e      	bgt.n	800ec5a <__ieee754_rem_pio2+0x18a>
 800eb7c:	f000 fc5b 	bl	800f436 <fabs>
 800eb80:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eb84:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800ed18 <__ieee754_rem_pio2+0x248>
 800eb88:	eea0 7b06 	vfma.f64	d7, d0, d6
 800eb8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800eb90:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800eb94:	ee17 0a90 	vmov	r0, s15
 800eb98:	eeb1 4b45 	vneg.f64	d4, d5
 800eb9c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ecf8 <__ieee754_rem_pio2+0x228>
 800eba0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800eba4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ed00 <__ieee754_rem_pio2+0x230>
 800eba8:	281f      	cmp	r0, #31
 800ebaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ebae:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ebb2:	dc08      	bgt.n	800ebc6 <__ieee754_rem_pio2+0xf6>
 800ebb4:	4b63      	ldr	r3, [pc, #396]	; (800ed44 <__ieee754_rem_pio2+0x274>)
 800ebb6:	1e42      	subs	r2, r0, #1
 800ebb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebbc:	42b3      	cmp	r3, r6
 800ebbe:	d002      	beq.n	800ebc6 <__ieee754_rem_pio2+0xf6>
 800ebc0:	ed84 6b00 	vstr	d6, [r4]
 800ebc4:	e024      	b.n	800ec10 <__ieee754_rem_pio2+0x140>
 800ebc6:	ee16 3a90 	vmov	r3, s13
 800ebca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ebce:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ebd2:	2b10      	cmp	r3, #16
 800ebd4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ebd8:	ddf2      	ble.n	800ebc0 <__ieee754_rem_pio2+0xf0>
 800ebda:	eeb0 6b40 	vmov.f64	d6, d0
 800ebde:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800ed08 <__ieee754_rem_pio2+0x238>
 800ebe2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800ebe6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ebea:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ebee:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800ed10 <__ieee754_rem_pio2+0x240>
 800ebf2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ebf6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ebfa:	ee13 3a90 	vmov	r3, s7
 800ebfe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec02:	1ad3      	subs	r3, r2, r3
 800ec04:	2b31      	cmp	r3, #49	; 0x31
 800ec06:	dc17      	bgt.n	800ec38 <__ieee754_rem_pio2+0x168>
 800ec08:	eeb0 0b46 	vmov.f64	d0, d6
 800ec0c:	ed84 3b00 	vstr	d3, [r4]
 800ec10:	ed94 6b00 	vldr	d6, [r4]
 800ec14:	2d00      	cmp	r5, #0
 800ec16:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ec1a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ec1e:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec22:	da85      	bge.n	800eb30 <__ieee754_rem_pio2+0x60>
 800ec24:	eeb1 6b46 	vneg.f64	d6, d6
 800ec28:	ed84 6b00 	vstr	d6, [r4]
 800ec2c:	eeb1 7b47 	vneg.f64	d7, d7
 800ec30:	4240      	negs	r0, r0
 800ec32:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec36:	e77b      	b.n	800eb30 <__ieee754_rem_pio2+0x60>
 800ec38:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800ed20 <__ieee754_rem_pio2+0x250>
 800ec3c:	eeb0 0b46 	vmov.f64	d0, d6
 800ec40:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ec44:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ec48:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800ed28 <__ieee754_rem_pio2+0x258>
 800ec4c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ec50:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ec54:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ec58:	e7b2      	b.n	800ebc0 <__ieee754_rem_pio2+0xf0>
 800ec5a:	4b3b      	ldr	r3, [pc, #236]	; (800ed48 <__ieee754_rem_pio2+0x278>)
 800ec5c:	429e      	cmp	r6, r3
 800ec5e:	dd06      	ble.n	800ec6e <__ieee754_rem_pio2+0x19e>
 800ec60:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ec64:	ed80 7b02 	vstr	d7, [r0, #8]
 800ec68:	ed80 7b00 	vstr	d7, [r0]
 800ec6c:	e742      	b.n	800eaf4 <__ieee754_rem_pio2+0x24>
 800ec6e:	1532      	asrs	r2, r6, #20
 800ec70:	ee10 0a10 	vmov	r0, s0
 800ec74:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ec78:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ec7c:	ec41 0b17 	vmov	d7, r0, r1
 800ec80:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ec84:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800ed30 <__ieee754_rem_pio2+0x260>
 800ec88:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ec8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ec90:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ec94:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec98:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ec9c:	a902      	add	r1, sp, #8
 800ec9e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800eca2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eca6:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ecaa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ecae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ecb2:	2603      	movs	r6, #3
 800ecb4:	4608      	mov	r0, r1
 800ecb6:	ed91 7b04 	vldr	d7, [r1, #16]
 800ecba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ecbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc2:	4633      	mov	r3, r6
 800ecc4:	f1a1 0108 	sub.w	r1, r1, #8
 800ecc8:	f106 36ff 	add.w	r6, r6, #4294967295
 800eccc:	d0f3      	beq.n	800ecb6 <__ieee754_rem_pio2+0x1e6>
 800ecce:	491f      	ldr	r1, [pc, #124]	; (800ed4c <__ieee754_rem_pio2+0x27c>)
 800ecd0:	9101      	str	r1, [sp, #4]
 800ecd2:	2102      	movs	r1, #2
 800ecd4:	9100      	str	r1, [sp, #0]
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	f000 f8aa 	bl	800ee30 <__kernel_rem_pio2>
 800ecdc:	2d00      	cmp	r5, #0
 800ecde:	f6bf af27 	bge.w	800eb30 <__ieee754_rem_pio2+0x60>
 800ece2:	ed94 7b00 	vldr	d7, [r4]
 800ece6:	eeb1 7b47 	vneg.f64	d7, d7
 800ecea:	ed84 7b00 	vstr	d7, [r4]
 800ecee:	ed94 7b02 	vldr	d7, [r4, #8]
 800ecf2:	e79b      	b.n	800ec2c <__ieee754_rem_pio2+0x15c>
 800ecf4:	f3af 8000 	nop.w
 800ecf8:	54400000 	.word	0x54400000
 800ecfc:	3ff921fb 	.word	0x3ff921fb
 800ed00:	1a626331 	.word	0x1a626331
 800ed04:	3dd0b461 	.word	0x3dd0b461
 800ed08:	1a600000 	.word	0x1a600000
 800ed0c:	3dd0b461 	.word	0x3dd0b461
 800ed10:	2e037073 	.word	0x2e037073
 800ed14:	3ba3198a 	.word	0x3ba3198a
 800ed18:	6dc9c883 	.word	0x6dc9c883
 800ed1c:	3fe45f30 	.word	0x3fe45f30
 800ed20:	2e000000 	.word	0x2e000000
 800ed24:	3ba3198a 	.word	0x3ba3198a
 800ed28:	252049c1 	.word	0x252049c1
 800ed2c:	397b839a 	.word	0x397b839a
 800ed30:	00000000 	.word	0x00000000
 800ed34:	41700000 	.word	0x41700000
 800ed38:	3fe921fb 	.word	0x3fe921fb
 800ed3c:	4002d97b 	.word	0x4002d97b
 800ed40:	413921fb 	.word	0x413921fb
 800ed44:	0802a808 	.word	0x0802a808
 800ed48:	7fefffff 	.word	0x7fefffff
 800ed4c:	0802a888 	.word	0x0802a888

0800ed50 <__ieee754_sqrtf>:
 800ed50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ed54:	4770      	bx	lr
	...

0800ed58 <__kernel_cos>:
 800ed58:	ee10 1a90 	vmov	r1, s1
 800ed5c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800ed60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ed64:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800ed68:	da05      	bge.n	800ed76 <__kernel_cos+0x1e>
 800ed6a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ed6e:	ee17 3a90 	vmov	r3, s15
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d03d      	beq.n	800edf2 <__kernel_cos+0x9a>
 800ed76:	ee20 3b00 	vmul.f64	d3, d0, d0
 800ed7a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800edf8 <__kernel_cos+0xa0>
 800ed7e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee00 <__kernel_cos+0xa8>
 800ed82:	eea3 6b07 	vfma.f64	d6, d3, d7
 800ed86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee08 <__kernel_cos+0xb0>
 800ed8a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ed8e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee10 <__kernel_cos+0xb8>
 800ed92:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ed96:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee18 <__kernel_cos+0xc0>
 800ed9a:	4b23      	ldr	r3, [pc, #140]	; (800ee28 <__kernel_cos+0xd0>)
 800ed9c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800eda0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ee20 <__kernel_cos+0xc8>
 800eda4:	4299      	cmp	r1, r3
 800eda6:	eea7 6b03 	vfma.f64	d6, d7, d3
 800edaa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800edae:	ee26 5b03 	vmul.f64	d5, d6, d3
 800edb2:	ee23 7b07 	vmul.f64	d7, d3, d7
 800edb6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800edba:	eea3 6b05 	vfma.f64	d6, d3, d5
 800edbe:	dc04      	bgt.n	800edca <__kernel_cos+0x72>
 800edc0:	ee37 6b46 	vsub.f64	d6, d7, d6
 800edc4:	ee34 0b46 	vsub.f64	d0, d4, d6
 800edc8:	4770      	bx	lr
 800edca:	4b18      	ldr	r3, [pc, #96]	; (800ee2c <__kernel_cos+0xd4>)
 800edcc:	4299      	cmp	r1, r3
 800edce:	dc0d      	bgt.n	800edec <__kernel_cos+0x94>
 800edd0:	2200      	movs	r2, #0
 800edd2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800edd6:	ec43 2b15 	vmov	d5, r2, r3
 800edda:	ee34 0b45 	vsub.f64	d0, d4, d5
 800edde:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ede2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ede6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800edea:	4770      	bx	lr
 800edec:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800edf0:	e7f3      	b.n	800edda <__kernel_cos+0x82>
 800edf2:	eeb0 0b44 	vmov.f64	d0, d4
 800edf6:	4770      	bx	lr
 800edf8:	be8838d4 	.word	0xbe8838d4
 800edfc:	bda8fae9 	.word	0xbda8fae9
 800ee00:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee04:	3e21ee9e 	.word	0x3e21ee9e
 800ee08:	809c52ad 	.word	0x809c52ad
 800ee0c:	be927e4f 	.word	0xbe927e4f
 800ee10:	19cb1590 	.word	0x19cb1590
 800ee14:	3efa01a0 	.word	0x3efa01a0
 800ee18:	16c15177 	.word	0x16c15177
 800ee1c:	bf56c16c 	.word	0xbf56c16c
 800ee20:	5555554c 	.word	0x5555554c
 800ee24:	3fa55555 	.word	0x3fa55555
 800ee28:	3fd33332 	.word	0x3fd33332
 800ee2c:	3fe90000 	.word	0x3fe90000

0800ee30 <__kernel_rem_pio2>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	ed2d 8b06 	vpush	{d8-d10}
 800ee38:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800ee3c:	469b      	mov	fp, r3
 800ee3e:	460f      	mov	r7, r1
 800ee40:	4bcf      	ldr	r3, [pc, #828]	; (800f180 <__kernel_rem_pio2+0x350>)
 800ee42:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800ee44:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800ee48:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ee4c:	9000      	str	r0, [sp, #0]
 800ee4e:	f112 0f14 	cmn.w	r2, #20
 800ee52:	bfa8      	it	ge
 800ee54:	2318      	movge	r3, #24
 800ee56:	f10b 31ff 	add.w	r1, fp, #4294967295
 800ee5a:	bfb8      	it	lt
 800ee5c:	2300      	movlt	r3, #0
 800ee5e:	f06f 0417 	mvn.w	r4, #23
 800ee62:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800f168 <__kernel_rem_pio2+0x338>
 800ee66:	bfa4      	itt	ge
 800ee68:	f1a2 0a03 	subge.w	sl, r2, #3
 800ee6c:	fb9a f3f3 	sdivge	r3, sl, r3
 800ee70:	fb03 4404 	mla	r4, r3, r4, r4
 800ee74:	1a5d      	subs	r5, r3, r1
 800ee76:	4414      	add	r4, r2
 800ee78:	eb09 0601 	add.w	r6, r9, r1
 800ee7c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800ee80:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800ee84:	2200      	movs	r2, #0
 800ee86:	42b2      	cmp	r2, r6
 800ee88:	dd12      	ble.n	800eeb0 <__kernel_rem_pio2+0x80>
 800ee8a:	aa18      	add	r2, sp, #96	; 0x60
 800ee8c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ee90:	460e      	mov	r6, r1
 800ee92:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800ee96:	f1cb 0a01 	rsb	sl, fp, #1
 800ee9a:	eb0a 0006 	add.w	r0, sl, r6
 800ee9e:	4581      	cmp	r9, r0
 800eea0:	db25      	blt.n	800eeee <__kernel_rem_pio2+0xbe>
 800eea2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800f168 <__kernel_rem_pio2+0x338>
 800eea6:	f8dd e000 	ldr.w	lr, [sp]
 800eeaa:	4615      	mov	r5, r2
 800eeac:	2000      	movs	r0, #0
 800eeae:	e015      	b.n	800eedc <__kernel_rem_pio2+0xac>
 800eeb0:	42d5      	cmn	r5, r2
 800eeb2:	d409      	bmi.n	800eec8 <__kernel_rem_pio2+0x98>
 800eeb4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800eeb8:	ee07 0a90 	vmov	s15, r0
 800eebc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eec0:	eca8 7b02 	vstmia	r8!, {d7}
 800eec4:	3201      	adds	r2, #1
 800eec6:	e7de      	b.n	800ee86 <__kernel_rem_pio2+0x56>
 800eec8:	eeb0 7b46 	vmov.f64	d7, d6
 800eecc:	e7f8      	b.n	800eec0 <__kernel_rem_pio2+0x90>
 800eece:	ecbe 5b02 	vldmia	lr!, {d5}
 800eed2:	ed95 6b00 	vldr	d6, [r5]
 800eed6:	3001      	adds	r0, #1
 800eed8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800eedc:	4288      	cmp	r0, r1
 800eede:	f1a5 0508 	sub.w	r5, r5, #8
 800eee2:	ddf4      	ble.n	800eece <__kernel_rem_pio2+0x9e>
 800eee4:	eca8 7b02 	vstmia	r8!, {d7}
 800eee8:	3208      	adds	r2, #8
 800eeea:	3601      	adds	r6, #1
 800eeec:	e7d5      	b.n	800ee9a <__kernel_rem_pio2+0x6a>
 800eeee:	aa04      	add	r2, sp, #16
 800eef0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800f170 <__kernel_rem_pio2+0x340>
 800eef4:	ed9f aba0 	vldr	d10, [pc, #640]	; 800f178 <__kernel_rem_pio2+0x348>
 800eef8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800eefc:	9201      	str	r2, [sp, #4]
 800eefe:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ef02:	464e      	mov	r6, r9
 800ef04:	ab90      	add	r3, sp, #576	; 0x240
 800ef06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ef0a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ef0e:	ab04      	add	r3, sp, #16
 800ef10:	4618      	mov	r0, r3
 800ef12:	4632      	mov	r2, r6
 800ef14:	2a00      	cmp	r2, #0
 800ef16:	dc4e      	bgt.n	800efb6 <__kernel_rem_pio2+0x186>
 800ef18:	4620      	mov	r0, r4
 800ef1a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800ef1e:	f000 fb07 	bl	800f530 <scalbn>
 800ef22:	eeb0 8b40 	vmov.f64	d8, d0
 800ef26:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ef2a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ef2e:	f000 fa8b 	bl	800f448 <floor>
 800ef32:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ef36:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ef3a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ef3e:	2c00      	cmp	r4, #0
 800ef40:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800ef44:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800ef48:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ef4c:	ee17 8a90 	vmov	r8, s15
 800ef50:	dd46      	ble.n	800efe0 <__kernel_rem_pio2+0x1b0>
 800ef52:	1e70      	subs	r0, r6, #1
 800ef54:	aa04      	add	r2, sp, #16
 800ef56:	f1c4 0c18 	rsb	ip, r4, #24
 800ef5a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800ef5e:	fa45 f20c 	asr.w	r2, r5, ip
 800ef62:	4490      	add	r8, r2
 800ef64:	fa02 f20c 	lsl.w	r2, r2, ip
 800ef68:	1aad      	subs	r5, r5, r2
 800ef6a:	aa04      	add	r2, sp, #16
 800ef6c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800ef70:	f1c4 0217 	rsb	r2, r4, #23
 800ef74:	4115      	asrs	r5, r2
 800ef76:	2d00      	cmp	r5, #0
 800ef78:	dd41      	ble.n	800effe <__kernel_rem_pio2+0x1ce>
 800ef7a:	f04f 0c00 	mov.w	ip, #0
 800ef7e:	f108 0801 	add.w	r8, r8, #1
 800ef82:	4660      	mov	r0, ip
 800ef84:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800ef88:	4566      	cmp	r6, ip
 800ef8a:	dc69      	bgt.n	800f060 <__kernel_rem_pio2+0x230>
 800ef8c:	2c00      	cmp	r4, #0
 800ef8e:	dd03      	ble.n	800ef98 <__kernel_rem_pio2+0x168>
 800ef90:	2c01      	cmp	r4, #1
 800ef92:	d076      	beq.n	800f082 <__kernel_rem_pio2+0x252>
 800ef94:	2c02      	cmp	r4, #2
 800ef96:	d07f      	beq.n	800f098 <__kernel_rem_pio2+0x268>
 800ef98:	2d02      	cmp	r5, #2
 800ef9a:	d130      	bne.n	800effe <__kernel_rem_pio2+0x1ce>
 800ef9c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800efa0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800efa4:	b358      	cbz	r0, 800effe <__kernel_rem_pio2+0x1ce>
 800efa6:	4620      	mov	r0, r4
 800efa8:	9102      	str	r1, [sp, #8]
 800efaa:	f000 fac1 	bl	800f530 <scalbn>
 800efae:	9902      	ldr	r1, [sp, #8]
 800efb0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800efb4:	e023      	b.n	800effe <__kernel_rem_pio2+0x1ce>
 800efb6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800efba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800efbe:	3a01      	subs	r2, #1
 800efc0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800efc4:	ad68      	add	r5, sp, #416	; 0x1a0
 800efc6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800efca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800efce:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800efd2:	eca0 0a01 	vstmia	r0!, {s0}
 800efd6:	ed95 0b00 	vldr	d0, [r5]
 800efda:	ee37 0b00 	vadd.f64	d0, d7, d0
 800efde:	e799      	b.n	800ef14 <__kernel_rem_pio2+0xe4>
 800efe0:	d105      	bne.n	800efee <__kernel_rem_pio2+0x1be>
 800efe2:	1e72      	subs	r2, r6, #1
 800efe4:	a804      	add	r0, sp, #16
 800efe6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800efea:	15ed      	asrs	r5, r5, #23
 800efec:	e7c3      	b.n	800ef76 <__kernel_rem_pio2+0x146>
 800efee:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eff2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800effa:	da2f      	bge.n	800f05c <__kernel_rem_pio2+0x22c>
 800effc:	2500      	movs	r5, #0
 800effe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	f040 8087 	bne.w	800f118 <__kernel_rem_pio2+0x2e8>
 800f00a:	1e73      	subs	r3, r6, #1
 800f00c:	4618      	mov	r0, r3
 800f00e:	f04f 0c00 	mov.w	ip, #0
 800f012:	4548      	cmp	r0, r9
 800f014:	da47      	bge.n	800f0a6 <__kernel_rem_pio2+0x276>
 800f016:	f1bc 0f00 	cmp.w	ip, #0
 800f01a:	d070      	beq.n	800f0fe <__kernel_rem_pio2+0x2ce>
 800f01c:	aa04      	add	r2, sp, #16
 800f01e:	3c18      	subs	r4, #24
 800f020:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f024:	2a00      	cmp	r2, #0
 800f026:	d075      	beq.n	800f114 <__kernel_rem_pio2+0x2e4>
 800f028:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f02c:	4620      	mov	r0, r4
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	f000 fa7e 	bl	800f530 <scalbn>
 800f034:	9b00      	ldr	r3, [sp, #0]
 800f036:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f170 <__kernel_rem_pio2+0x340>
 800f03a:	461a      	mov	r2, r3
 800f03c:	2a00      	cmp	r2, #0
 800f03e:	f280 80ac 	bge.w	800f19a <__kernel_rem_pio2+0x36a>
 800f042:	4619      	mov	r1, r3
 800f044:	2000      	movs	r0, #0
 800f046:	2900      	cmp	r1, #0
 800f048:	f2c0 80cd 	blt.w	800f1e6 <__kernel_rem_pio2+0x3b6>
 800f04c:	aa68      	add	r2, sp, #416	; 0x1a0
 800f04e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800f052:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800f168 <__kernel_rem_pio2+0x338>
 800f056:	4e4b      	ldr	r6, [pc, #300]	; (800f184 <__kernel_rem_pio2+0x354>)
 800f058:	2200      	movs	r2, #0
 800f05a:	e0b8      	b.n	800f1ce <__kernel_rem_pio2+0x39e>
 800f05c:	2502      	movs	r5, #2
 800f05e:	e78c      	b.n	800ef7a <__kernel_rem_pio2+0x14a>
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	b948      	cbnz	r0, 800f078 <__kernel_rem_pio2+0x248>
 800f064:	b11a      	cbz	r2, 800f06e <__kernel_rem_pio2+0x23e>
 800f066:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	2201      	movs	r2, #1
 800f06e:	f10c 0c01 	add.w	ip, ip, #1
 800f072:	3304      	adds	r3, #4
 800f074:	4610      	mov	r0, r2
 800f076:	e787      	b.n	800ef88 <__kernel_rem_pio2+0x158>
 800f078:	ebae 0202 	sub.w	r2, lr, r2
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	4602      	mov	r2, r0
 800f080:	e7f5      	b.n	800f06e <__kernel_rem_pio2+0x23e>
 800f082:	1e72      	subs	r2, r6, #1
 800f084:	ab04      	add	r3, sp, #16
 800f086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f08a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f08e:	f10d 0c10 	add.w	ip, sp, #16
 800f092:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800f096:	e77f      	b.n	800ef98 <__kernel_rem_pio2+0x168>
 800f098:	1e72      	subs	r2, r6, #1
 800f09a:	ab04      	add	r3, sp, #16
 800f09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f0a4:	e7f3      	b.n	800f08e <__kernel_rem_pio2+0x25e>
 800f0a6:	aa04      	add	r2, sp, #16
 800f0a8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800f0ac:	3801      	subs	r0, #1
 800f0ae:	ea4c 0c02 	orr.w	ip, ip, r2
 800f0b2:	e7ae      	b.n	800f012 <__kernel_rem_pio2+0x1e2>
 800f0b4:	3001      	adds	r0, #1
 800f0b6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	d0fa      	beq.n	800f0b4 <__kernel_rem_pio2+0x284>
 800f0be:	eb06 020b 	add.w	r2, r6, fp
 800f0c2:	ad18      	add	r5, sp, #96	; 0x60
 800f0c4:	1c73      	adds	r3, r6, #1
 800f0c6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800f0ca:	4406      	add	r6, r0
 800f0cc:	429e      	cmp	r6, r3
 800f0ce:	f6ff af19 	blt.w	800ef04 <__kernel_rem_pio2+0xd4>
 800f0d2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800f0d6:	9d00      	ldr	r5, [sp, #0]
 800f0d8:	ee07 0a90 	vmov	s15, r0
 800f0dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	eca2 7b02 	vstmia	r2!, {d7}
 800f0e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f168 <__kernel_rem_pio2+0x338>
 800f0ea:	4694      	mov	ip, r2
 800f0ec:	4288      	cmp	r0, r1
 800f0ee:	dd09      	ble.n	800f104 <__kernel_rem_pio2+0x2d4>
 800f0f0:	a868      	add	r0, sp, #416	; 0x1a0
 800f0f2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800f0f6:	ed80 7b00 	vstr	d7, [r0]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	e7e6      	b.n	800f0cc <__kernel_rem_pio2+0x29c>
 800f0fe:	9b01      	ldr	r3, [sp, #4]
 800f100:	2001      	movs	r0, #1
 800f102:	e7d8      	b.n	800f0b6 <__kernel_rem_pio2+0x286>
 800f104:	ecb5 5b02 	vldmia	r5!, {d5}
 800f108:	ed3c 6b02 	vldmdb	ip!, {d6}
 800f10c:	3001      	adds	r0, #1
 800f10e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f112:	e7eb      	b.n	800f0ec <__kernel_rem_pio2+0x2bc>
 800f114:	3b01      	subs	r3, #1
 800f116:	e781      	b.n	800f01c <__kernel_rem_pio2+0x1ec>
 800f118:	4260      	negs	r0, r4
 800f11a:	eeb0 0b48 	vmov.f64	d0, d8
 800f11e:	f000 fa07 	bl	800f530 <scalbn>
 800f122:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f178 <__kernel_rem_pio2+0x348>
 800f126:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f12e:	db2b      	blt.n	800f188 <__kernel_rem_pio2+0x358>
 800f130:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800f170 <__kernel_rem_pio2+0x340>
 800f134:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f138:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f13c:	aa04      	add	r2, sp, #16
 800f13e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f142:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f146:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f14a:	a904      	add	r1, sp, #16
 800f14c:	ee10 3a10 	vmov	r3, s0
 800f150:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f154:	ee17 2a10 	vmov	r2, s14
 800f158:	1c73      	adds	r3, r6, #1
 800f15a:	3418      	adds	r4, #24
 800f15c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f160:	e762      	b.n	800f028 <__kernel_rem_pio2+0x1f8>
 800f162:	bf00      	nop
 800f164:	f3af 8000 	nop.w
	...
 800f174:	3e700000 	.word	0x3e700000
 800f178:	00000000 	.word	0x00000000
 800f17c:	41700000 	.word	0x41700000
 800f180:	0802b240 	.word	0x0802b240
 800f184:	0802b200 	.word	0x0802b200
 800f188:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f18c:	aa04      	add	r2, sp, #16
 800f18e:	ee10 3a10 	vmov	r3, s0
 800f192:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f196:	4633      	mov	r3, r6
 800f198:	e746      	b.n	800f028 <__kernel_rem_pio2+0x1f8>
 800f19a:	a804      	add	r0, sp, #16
 800f19c:	a968      	add	r1, sp, #416	; 0x1a0
 800f19e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f1a2:	9000      	str	r0, [sp, #0]
 800f1a4:	ee07 0a90 	vmov	s15, r0
 800f1a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f1ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f1b0:	3a01      	subs	r2, #1
 800f1b2:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f1b6:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f1ba:	ed81 7b00 	vstr	d7, [r1]
 800f1be:	e73d      	b.n	800f03c <__kernel_rem_pio2+0x20c>
 800f1c0:	ecb6 5b02 	vldmia	r6!, {d5}
 800f1c4:	ecb4 6b02 	vldmia	r4!, {d6}
 800f1c8:	3201      	adds	r2, #1
 800f1ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f1ce:	454a      	cmp	r2, r9
 800f1d0:	dc01      	bgt.n	800f1d6 <__kernel_rem_pio2+0x3a6>
 800f1d2:	4290      	cmp	r0, r2
 800f1d4:	daf4      	bge.n	800f1c0 <__kernel_rem_pio2+0x390>
 800f1d6:	aa40      	add	r2, sp, #256	; 0x100
 800f1d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f1dc:	ed82 7b00 	vstr	d7, [r2]
 800f1e0:	3901      	subs	r1, #1
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	e72f      	b.n	800f046 <__kernel_rem_pio2+0x216>
 800f1e6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f1e8:	2a02      	cmp	r2, #2
 800f1ea:	dc0a      	bgt.n	800f202 <__kernel_rem_pio2+0x3d2>
 800f1ec:	2a00      	cmp	r2, #0
 800f1ee:	dc5a      	bgt.n	800f2a6 <__kernel_rem_pio2+0x476>
 800f1f0:	d039      	beq.n	800f266 <__kernel_rem_pio2+0x436>
 800f1f2:	f008 0007 	and.w	r0, r8, #7
 800f1f6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800f1fa:	ecbd 8b06 	vpop	{d8-d10}
 800f1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f202:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f204:	2a03      	cmp	r2, #3
 800f206:	d1f4      	bne.n	800f1f2 <__kernel_rem_pio2+0x3c2>
 800f208:	aa40      	add	r2, sp, #256	; 0x100
 800f20a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f20e:	4611      	mov	r1, r2
 800f210:	4618      	mov	r0, r3
 800f212:	2800      	cmp	r0, #0
 800f214:	f1a1 0108 	sub.w	r1, r1, #8
 800f218:	dc52      	bgt.n	800f2c0 <__kernel_rem_pio2+0x490>
 800f21a:	4619      	mov	r1, r3
 800f21c:	2901      	cmp	r1, #1
 800f21e:	f1a2 0208 	sub.w	r2, r2, #8
 800f222:	dc5d      	bgt.n	800f2e0 <__kernel_rem_pio2+0x4b0>
 800f224:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800f328 <__kernel_rem_pio2+0x4f8>
 800f228:	2b01      	cmp	r3, #1
 800f22a:	dc69      	bgt.n	800f300 <__kernel_rem_pio2+0x4d0>
 800f22c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800f230:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800f234:	2d00      	cmp	r5, #0
 800f236:	d16c      	bne.n	800f312 <__kernel_rem_pio2+0x4e2>
 800f238:	ed87 5b00 	vstr	d5, [r7]
 800f23c:	ed87 6b02 	vstr	d6, [r7, #8]
 800f240:	ed87 7b04 	vstr	d7, [r7, #16]
 800f244:	e7d5      	b.n	800f1f2 <__kernel_rem_pio2+0x3c2>
 800f246:	aa40      	add	r2, sp, #256	; 0x100
 800f248:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f24c:	ed92 6b00 	vldr	d6, [r2]
 800f250:	3b01      	subs	r3, #1
 800f252:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f256:	2b00      	cmp	r3, #0
 800f258:	daf5      	bge.n	800f246 <__kernel_rem_pio2+0x416>
 800f25a:	b10d      	cbz	r5, 800f260 <__kernel_rem_pio2+0x430>
 800f25c:	eeb1 7b47 	vneg.f64	d7, d7
 800f260:	ed87 7b00 	vstr	d7, [r7]
 800f264:	e7c5      	b.n	800f1f2 <__kernel_rem_pio2+0x3c2>
 800f266:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f328 <__kernel_rem_pio2+0x4f8>
 800f26a:	e7f4      	b.n	800f256 <__kernel_rem_pio2+0x426>
 800f26c:	a940      	add	r1, sp, #256	; 0x100
 800f26e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f272:	ed91 7b00 	vldr	d7, [r1]
 800f276:	3a01      	subs	r2, #1
 800f278:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	daf5      	bge.n	800f26c <__kernel_rem_pio2+0x43c>
 800f280:	b1ad      	cbz	r5, 800f2ae <__kernel_rem_pio2+0x47e>
 800f282:	eeb1 7b46 	vneg.f64	d7, d6
 800f286:	ed87 7b00 	vstr	d7, [r7]
 800f28a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800f28e:	a942      	add	r1, sp, #264	; 0x108
 800f290:	2201      	movs	r2, #1
 800f292:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f296:	4293      	cmp	r3, r2
 800f298:	da0c      	bge.n	800f2b4 <__kernel_rem_pio2+0x484>
 800f29a:	b10d      	cbz	r5, 800f2a0 <__kernel_rem_pio2+0x470>
 800f29c:	eeb1 7b47 	vneg.f64	d7, d7
 800f2a0:	ed87 7b02 	vstr	d7, [r7, #8]
 800f2a4:	e7a5      	b.n	800f1f2 <__kernel_rem_pio2+0x3c2>
 800f2a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800f328 <__kernel_rem_pio2+0x4f8>
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	e7e6      	b.n	800f27c <__kernel_rem_pio2+0x44c>
 800f2ae:	eeb0 7b46 	vmov.f64	d7, d6
 800f2b2:	e7e8      	b.n	800f286 <__kernel_rem_pio2+0x456>
 800f2b4:	ecb1 6b02 	vldmia	r1!, {d6}
 800f2b8:	3201      	adds	r2, #1
 800f2ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f2be:	e7ea      	b.n	800f296 <__kernel_rem_pio2+0x466>
 800f2c0:	ed91 7b00 	vldr	d7, [r1]
 800f2c4:	ed91 5b02 	vldr	d5, [r1, #8]
 800f2c8:	3801      	subs	r0, #1
 800f2ca:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f2ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2d2:	ed81 6b00 	vstr	d6, [r1]
 800f2d6:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f2da:	ed81 7b02 	vstr	d7, [r1, #8]
 800f2de:	e798      	b.n	800f212 <__kernel_rem_pio2+0x3e2>
 800f2e0:	ed92 7b00 	vldr	d7, [r2]
 800f2e4:	ed92 5b02 	vldr	d5, [r2, #8]
 800f2e8:	3901      	subs	r1, #1
 800f2ea:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f2ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2f2:	ed82 6b00 	vstr	d6, [r2]
 800f2f6:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f2fa:	ed82 7b02 	vstr	d7, [r2, #8]
 800f2fe:	e78d      	b.n	800f21c <__kernel_rem_pio2+0x3ec>
 800f300:	aa40      	add	r2, sp, #256	; 0x100
 800f302:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f306:	ed92 6b00 	vldr	d6, [r2]
 800f30a:	3b01      	subs	r3, #1
 800f30c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f310:	e78a      	b.n	800f228 <__kernel_rem_pio2+0x3f8>
 800f312:	eeb1 5b45 	vneg.f64	d5, d5
 800f316:	eeb1 6b46 	vneg.f64	d6, d6
 800f31a:	ed87 5b00 	vstr	d5, [r7]
 800f31e:	eeb1 7b47 	vneg.f64	d7, d7
 800f322:	ed87 6b02 	vstr	d6, [r7, #8]
 800f326:	e78b      	b.n	800f240 <__kernel_rem_pio2+0x410>
	...

0800f330 <__kernel_sin>:
 800f330:	ee10 3a90 	vmov	r3, s1
 800f334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f338:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f33c:	da04      	bge.n	800f348 <__kernel_sin+0x18>
 800f33e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f342:	ee17 3a90 	vmov	r3, s15
 800f346:	b35b      	cbz	r3, 800f3a0 <__kernel_sin+0x70>
 800f348:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f34c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f350:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f3a8 <__kernel_sin+0x78>
 800f354:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f3b0 <__kernel_sin+0x80>
 800f358:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f35c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f3b8 <__kernel_sin+0x88>
 800f360:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f364:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f3c0 <__kernel_sin+0x90>
 800f368:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f36c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f3c8 <__kernel_sin+0x98>
 800f370:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f374:	b930      	cbnz	r0, 800f384 <__kernel_sin+0x54>
 800f376:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f3d0 <__kernel_sin+0xa0>
 800f37a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f37e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f382:	4770      	bx	lr
 800f384:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f388:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f38c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f390:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f394:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f3d8 <__kernel_sin+0xa8>
 800f398:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f39c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	f3af 8000 	nop.w
 800f3a8:	5acfd57c 	.word	0x5acfd57c
 800f3ac:	3de5d93a 	.word	0x3de5d93a
 800f3b0:	8a2b9ceb 	.word	0x8a2b9ceb
 800f3b4:	be5ae5e6 	.word	0xbe5ae5e6
 800f3b8:	57b1fe7d 	.word	0x57b1fe7d
 800f3bc:	3ec71de3 	.word	0x3ec71de3
 800f3c0:	19c161d5 	.word	0x19c161d5
 800f3c4:	bf2a01a0 	.word	0xbf2a01a0
 800f3c8:	1110f8a6 	.word	0x1110f8a6
 800f3cc:	3f811111 	.word	0x3f811111
 800f3d0:	55555549 	.word	0x55555549
 800f3d4:	bfc55555 	.word	0xbfc55555
 800f3d8:	55555549 	.word	0x55555549
 800f3dc:	3fc55555 	.word	0x3fc55555

0800f3e0 <with_errnof>:
 800f3e0:	b513      	push	{r0, r1, r4, lr}
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f3e8:	f000 f944 	bl	800f674 <__errno>
 800f3ec:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f3f0:	6004      	str	r4, [r0, #0]
 800f3f2:	b002      	add	sp, #8
 800f3f4:	bd10      	pop	{r4, pc}
	...

0800f3f8 <__math_divzerof>:
 800f3f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f3fc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f400:	2800      	cmp	r0, #0
 800f402:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800f406:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800f414 <__math_divzerof+0x1c>
 800f40a:	2022      	movs	r0, #34	; 0x22
 800f40c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f410:	f7ff bfe6 	b.w	800f3e0 <with_errnof>
 800f414:	00000000 	.word	0x00000000

0800f418 <__math_invalidf>:
 800f418:	eef0 7a40 	vmov.f32	s15, s0
 800f41c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f420:	eef4 7a67 	vcmp.f32	s15, s15
 800f424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f428:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f42c:	d602      	bvs.n	800f434 <__math_invalidf+0x1c>
 800f42e:	2021      	movs	r0, #33	; 0x21
 800f430:	f7ff bfd6 	b.w	800f3e0 <with_errnof>
 800f434:	4770      	bx	lr

0800f436 <fabs>:
 800f436:	ec51 0b10 	vmov	r0, r1, d0
 800f43a:	ee10 2a10 	vmov	r2, s0
 800f43e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f442:	ec43 2b10 	vmov	d0, r2, r3
 800f446:	4770      	bx	lr

0800f448 <floor>:
 800f448:	ee10 1a90 	vmov	r1, s1
 800f44c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f450:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f454:	2b13      	cmp	r3, #19
 800f456:	b530      	push	{r4, r5, lr}
 800f458:	ee10 0a10 	vmov	r0, s0
 800f45c:	ee10 5a10 	vmov	r5, s0
 800f460:	dc31      	bgt.n	800f4c6 <floor+0x7e>
 800f462:	2b00      	cmp	r3, #0
 800f464:	da15      	bge.n	800f492 <floor+0x4a>
 800f466:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f520 <floor+0xd8>
 800f46a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f46e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	dd07      	ble.n	800f488 <floor+0x40>
 800f478:	2900      	cmp	r1, #0
 800f47a:	da4e      	bge.n	800f51a <floor+0xd2>
 800f47c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f480:	4318      	orrs	r0, r3
 800f482:	d001      	beq.n	800f488 <floor+0x40>
 800f484:	4928      	ldr	r1, [pc, #160]	; (800f528 <floor+0xe0>)
 800f486:	2000      	movs	r0, #0
 800f488:	460b      	mov	r3, r1
 800f48a:	4602      	mov	r2, r0
 800f48c:	ec43 2b10 	vmov	d0, r2, r3
 800f490:	e020      	b.n	800f4d4 <floor+0x8c>
 800f492:	4a26      	ldr	r2, [pc, #152]	; (800f52c <floor+0xe4>)
 800f494:	411a      	asrs	r2, r3
 800f496:	ea01 0402 	and.w	r4, r1, r2
 800f49a:	4304      	orrs	r4, r0
 800f49c:	d01a      	beq.n	800f4d4 <floor+0x8c>
 800f49e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f520 <floor+0xd8>
 800f4a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f4a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ae:	ddeb      	ble.n	800f488 <floor+0x40>
 800f4b0:	2900      	cmp	r1, #0
 800f4b2:	bfbe      	ittt	lt
 800f4b4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f4b8:	fa40 f303 	asrlt.w	r3, r0, r3
 800f4bc:	18c9      	addlt	r1, r1, r3
 800f4be:	ea21 0102 	bic.w	r1, r1, r2
 800f4c2:	2000      	movs	r0, #0
 800f4c4:	e7e0      	b.n	800f488 <floor+0x40>
 800f4c6:	2b33      	cmp	r3, #51	; 0x33
 800f4c8:	dd05      	ble.n	800f4d6 <floor+0x8e>
 800f4ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4ce:	d101      	bne.n	800f4d4 <floor+0x8c>
 800f4d0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f4d4:	bd30      	pop	{r4, r5, pc}
 800f4d6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f4da:	f04f 32ff 	mov.w	r2, #4294967295
 800f4de:	40e2      	lsrs	r2, r4
 800f4e0:	4202      	tst	r2, r0
 800f4e2:	d0f7      	beq.n	800f4d4 <floor+0x8c>
 800f4e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f520 <floor+0xd8>
 800f4e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f4ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f4:	ddc8      	ble.n	800f488 <floor+0x40>
 800f4f6:	2900      	cmp	r1, #0
 800f4f8:	da02      	bge.n	800f500 <floor+0xb8>
 800f4fa:	2b14      	cmp	r3, #20
 800f4fc:	d103      	bne.n	800f506 <floor+0xbe>
 800f4fe:	3101      	adds	r1, #1
 800f500:	ea20 0002 	bic.w	r0, r0, r2
 800f504:	e7c0      	b.n	800f488 <floor+0x40>
 800f506:	2401      	movs	r4, #1
 800f508:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f50c:	fa04 f303 	lsl.w	r3, r4, r3
 800f510:	4418      	add	r0, r3
 800f512:	42a8      	cmp	r0, r5
 800f514:	bf38      	it	cc
 800f516:	1909      	addcc	r1, r1, r4
 800f518:	e7f2      	b.n	800f500 <floor+0xb8>
 800f51a:	2000      	movs	r0, #0
 800f51c:	4601      	mov	r1, r0
 800f51e:	e7b3      	b.n	800f488 <floor+0x40>
 800f520:	8800759c 	.word	0x8800759c
 800f524:	7e37e43c 	.word	0x7e37e43c
 800f528:	bff00000 	.word	0xbff00000
 800f52c:	000fffff 	.word	0x000fffff

0800f530 <scalbn>:
 800f530:	b082      	sub	sp, #8
 800f532:	ed8d 0b00 	vstr	d0, [sp]
 800f536:	9b01      	ldr	r3, [sp, #4]
 800f538:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f53c:	b9a2      	cbnz	r2, 800f568 <scalbn+0x38>
 800f53e:	9a00      	ldr	r2, [sp, #0]
 800f540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f544:	4313      	orrs	r3, r2
 800f546:	d03a      	beq.n	800f5be <scalbn+0x8e>
 800f548:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f620 <scalbn+0xf0>
 800f54c:	4b40      	ldr	r3, [pc, #256]	; (800f650 <scalbn+0x120>)
 800f54e:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f552:	4298      	cmp	r0, r3
 800f554:	ed8d 7b00 	vstr	d7, [sp]
 800f558:	da11      	bge.n	800f57e <scalbn+0x4e>
 800f55a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f628 <scalbn+0xf8>
 800f55e:	ed9d 6b00 	vldr	d6, [sp]
 800f562:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f566:	e007      	b.n	800f578 <scalbn+0x48>
 800f568:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f56c:	428a      	cmp	r2, r1
 800f56e:	d10a      	bne.n	800f586 <scalbn+0x56>
 800f570:	ed9d 7b00 	vldr	d7, [sp]
 800f574:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f578:	ed8d 7b00 	vstr	d7, [sp]
 800f57c:	e01f      	b.n	800f5be <scalbn+0x8e>
 800f57e:	9b01      	ldr	r3, [sp, #4]
 800f580:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f584:	3a36      	subs	r2, #54	; 0x36
 800f586:	4402      	add	r2, r0
 800f588:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f58c:	428a      	cmp	r2, r1
 800f58e:	dd0a      	ble.n	800f5a6 <scalbn+0x76>
 800f590:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f630 <scalbn+0x100>
 800f594:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f638 <scalbn+0x108>
 800f598:	eeb0 6b47 	vmov.f64	d6, d7
 800f59c:	9b01      	ldr	r3, [sp, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f5a4:	e7dd      	b.n	800f562 <scalbn+0x32>
 800f5a6:	2a00      	cmp	r2, #0
 800f5a8:	dd0d      	ble.n	800f5c6 <scalbn+0x96>
 800f5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5b6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f5ba:	e9cd 0100 	strd	r0, r1, [sp]
 800f5be:	ed9d 0b00 	vldr	d0, [sp]
 800f5c2:	b002      	add	sp, #8
 800f5c4:	4770      	bx	lr
 800f5c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f5ca:	da18      	bge.n	800f5fe <scalbn+0xce>
 800f5cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f5d0:	4298      	cmp	r0, r3
 800f5d2:	9b01      	ldr	r3, [sp, #4]
 800f5d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f5d8:	dd09      	ble.n	800f5ee <scalbn+0xbe>
 800f5da:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f630 <scalbn+0x100>
 800f5de:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f638 <scalbn+0x108>
 800f5e2:	eeb0 6b47 	vmov.f64	d6, d7
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f5ec:	e7b9      	b.n	800f562 <scalbn+0x32>
 800f5ee:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f628 <scalbn+0xf8>
 800f5f2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f640 <scalbn+0x110>
 800f5f6:	eeb0 6b47 	vmov.f64	d6, d7
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	e7f4      	b.n	800f5e8 <scalbn+0xb8>
 800f5fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f602:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f606:	3236      	adds	r2, #54	; 0x36
 800f608:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f60c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f610:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f648 <scalbn+0x118>
 800f614:	ec41 0b17 	vmov	d7, r0, r1
 800f618:	e7a3      	b.n	800f562 <scalbn+0x32>
 800f61a:	bf00      	nop
 800f61c:	f3af 8000 	nop.w
 800f620:	00000000 	.word	0x00000000
 800f624:	43500000 	.word	0x43500000
 800f628:	c2f8f359 	.word	0xc2f8f359
 800f62c:	01a56e1f 	.word	0x01a56e1f
 800f630:	8800759c 	.word	0x8800759c
 800f634:	7e37e43c 	.word	0x7e37e43c
 800f638:	8800759c 	.word	0x8800759c
 800f63c:	fe37e43c 	.word	0xfe37e43c
 800f640:	c2f8f359 	.word	0xc2f8f359
 800f644:	81a56e1f 	.word	0x81a56e1f
 800f648:	00000000 	.word	0x00000000
 800f64c:	3c900000 	.word	0x3c900000
 800f650:	ffff3cb0 	.word	0xffff3cb0

0800f654 <abort>:
 800f654:	b508      	push	{r3, lr}
 800f656:	2006      	movs	r0, #6
 800f658:	f000 f968 	bl	800f92c <raise>
 800f65c:	2001      	movs	r0, #1
 800f65e:	f7f4 fb3f 	bl	8003ce0 <_exit>
	...

0800f664 <calloc>:
 800f664:	4b02      	ldr	r3, [pc, #8]	; (800f670 <calloc+0xc>)
 800f666:	460a      	mov	r2, r1
 800f668:	4601      	mov	r1, r0
 800f66a:	6818      	ldr	r0, [r3, #0]
 800f66c:	f000 b86c 	b.w	800f748 <_calloc_r>
 800f670:	2000001c 	.word	0x2000001c

0800f674 <__errno>:
 800f674:	4b01      	ldr	r3, [pc, #4]	; (800f67c <__errno+0x8>)
 800f676:	6818      	ldr	r0, [r3, #0]
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	2000001c 	.word	0x2000001c

0800f680 <__libc_init_array>:
 800f680:	b570      	push	{r4, r5, r6, lr}
 800f682:	4d0d      	ldr	r5, [pc, #52]	; (800f6b8 <__libc_init_array+0x38>)
 800f684:	4c0d      	ldr	r4, [pc, #52]	; (800f6bc <__libc_init_array+0x3c>)
 800f686:	1b64      	subs	r4, r4, r5
 800f688:	10a4      	asrs	r4, r4, #2
 800f68a:	2600      	movs	r6, #0
 800f68c:	42a6      	cmp	r6, r4
 800f68e:	d109      	bne.n	800f6a4 <__libc_init_array+0x24>
 800f690:	4d0b      	ldr	r5, [pc, #44]	; (800f6c0 <__libc_init_array+0x40>)
 800f692:	4c0c      	ldr	r4, [pc, #48]	; (800f6c4 <__libc_init_array+0x44>)
 800f694:	f000 fcba 	bl	801000c <_init>
 800f698:	1b64      	subs	r4, r4, r5
 800f69a:	10a4      	asrs	r4, r4, #2
 800f69c:	2600      	movs	r6, #0
 800f69e:	42a6      	cmp	r6, r4
 800f6a0:	d105      	bne.n	800f6ae <__libc_init_array+0x2e>
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}
 800f6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6a8:	4798      	blx	r3
 800f6aa:	3601      	adds	r6, #1
 800f6ac:	e7ee      	b.n	800f68c <__libc_init_array+0xc>
 800f6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6b2:	4798      	blx	r3
 800f6b4:	3601      	adds	r6, #1
 800f6b6:	e7f2      	b.n	800f69e <__libc_init_array+0x1e>
 800f6b8:	0802b28c 	.word	0x0802b28c
 800f6bc:	0802b28c 	.word	0x0802b28c
 800f6c0:	0802b28c 	.word	0x0802b28c
 800f6c4:	0802b290 	.word	0x0802b290

0800f6c8 <malloc>:
 800f6c8:	4b02      	ldr	r3, [pc, #8]	; (800f6d4 <malloc+0xc>)
 800f6ca:	4601      	mov	r1, r0
 800f6cc:	6818      	ldr	r0, [r3, #0]
 800f6ce:	f000 b89b 	b.w	800f808 <_malloc_r>
 800f6d2:	bf00      	nop
 800f6d4:	2000001c 	.word	0x2000001c

0800f6d8 <free>:
 800f6d8:	4b02      	ldr	r3, [pc, #8]	; (800f6e4 <free+0xc>)
 800f6da:	4601      	mov	r1, r0
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	f000 b843 	b.w	800f768 <_free_r>
 800f6e2:	bf00      	nop
 800f6e4:	2000001c 	.word	0x2000001c

0800f6e8 <memcpy>:
 800f6e8:	440a      	add	r2, r1
 800f6ea:	4291      	cmp	r1, r2
 800f6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6f0:	d100      	bne.n	800f6f4 <memcpy+0xc>
 800f6f2:	4770      	bx	lr
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6fe:	4291      	cmp	r1, r2
 800f700:	d1f9      	bne.n	800f6f6 <memcpy+0xe>
 800f702:	bd10      	pop	{r4, pc}

0800f704 <memmove>:
 800f704:	4288      	cmp	r0, r1
 800f706:	b510      	push	{r4, lr}
 800f708:	eb01 0402 	add.w	r4, r1, r2
 800f70c:	d902      	bls.n	800f714 <memmove+0x10>
 800f70e:	4284      	cmp	r4, r0
 800f710:	4623      	mov	r3, r4
 800f712:	d807      	bhi.n	800f724 <memmove+0x20>
 800f714:	1e43      	subs	r3, r0, #1
 800f716:	42a1      	cmp	r1, r4
 800f718:	d008      	beq.n	800f72c <memmove+0x28>
 800f71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f722:	e7f8      	b.n	800f716 <memmove+0x12>
 800f724:	4402      	add	r2, r0
 800f726:	4601      	mov	r1, r0
 800f728:	428a      	cmp	r2, r1
 800f72a:	d100      	bne.n	800f72e <memmove+0x2a>
 800f72c:	bd10      	pop	{r4, pc}
 800f72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f736:	e7f7      	b.n	800f728 <memmove+0x24>

0800f738 <memset>:
 800f738:	4402      	add	r2, r0
 800f73a:	4603      	mov	r3, r0
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d100      	bne.n	800f742 <memset+0xa>
 800f740:	4770      	bx	lr
 800f742:	f803 1b01 	strb.w	r1, [r3], #1
 800f746:	e7f9      	b.n	800f73c <memset+0x4>

0800f748 <_calloc_r>:
 800f748:	b513      	push	{r0, r1, r4, lr}
 800f74a:	434a      	muls	r2, r1
 800f74c:	4611      	mov	r1, r2
 800f74e:	9201      	str	r2, [sp, #4]
 800f750:	f000 f85a 	bl	800f808 <_malloc_r>
 800f754:	4604      	mov	r4, r0
 800f756:	b118      	cbz	r0, 800f760 <_calloc_r+0x18>
 800f758:	9a01      	ldr	r2, [sp, #4]
 800f75a:	2100      	movs	r1, #0
 800f75c:	f7ff ffec 	bl	800f738 <memset>
 800f760:	4620      	mov	r0, r4
 800f762:	b002      	add	sp, #8
 800f764:	bd10      	pop	{r4, pc}
	...

0800f768 <_free_r>:
 800f768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f76a:	2900      	cmp	r1, #0
 800f76c:	d048      	beq.n	800f800 <_free_r+0x98>
 800f76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f772:	9001      	str	r0, [sp, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	f1a1 0404 	sub.w	r4, r1, #4
 800f77a:	bfb8      	it	lt
 800f77c:	18e4      	addlt	r4, r4, r3
 800f77e:	f000 f919 	bl	800f9b4 <__malloc_lock>
 800f782:	4a20      	ldr	r2, [pc, #128]	; (800f804 <_free_r+0x9c>)
 800f784:	9801      	ldr	r0, [sp, #4]
 800f786:	6813      	ldr	r3, [r2, #0]
 800f788:	4615      	mov	r5, r2
 800f78a:	b933      	cbnz	r3, 800f79a <_free_r+0x32>
 800f78c:	6063      	str	r3, [r4, #4]
 800f78e:	6014      	str	r4, [r2, #0]
 800f790:	b003      	add	sp, #12
 800f792:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f796:	f000 b913 	b.w	800f9c0 <__malloc_unlock>
 800f79a:	42a3      	cmp	r3, r4
 800f79c:	d90b      	bls.n	800f7b6 <_free_r+0x4e>
 800f79e:	6821      	ldr	r1, [r4, #0]
 800f7a0:	1862      	adds	r2, r4, r1
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	bf04      	itt	eq
 800f7a6:	681a      	ldreq	r2, [r3, #0]
 800f7a8:	685b      	ldreq	r3, [r3, #4]
 800f7aa:	6063      	str	r3, [r4, #4]
 800f7ac:	bf04      	itt	eq
 800f7ae:	1852      	addeq	r2, r2, r1
 800f7b0:	6022      	streq	r2, [r4, #0]
 800f7b2:	602c      	str	r4, [r5, #0]
 800f7b4:	e7ec      	b.n	800f790 <_free_r+0x28>
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	b10b      	cbz	r3, 800f7c0 <_free_r+0x58>
 800f7bc:	42a3      	cmp	r3, r4
 800f7be:	d9fa      	bls.n	800f7b6 <_free_r+0x4e>
 800f7c0:	6811      	ldr	r1, [r2, #0]
 800f7c2:	1855      	adds	r5, r2, r1
 800f7c4:	42a5      	cmp	r5, r4
 800f7c6:	d10b      	bne.n	800f7e0 <_free_r+0x78>
 800f7c8:	6824      	ldr	r4, [r4, #0]
 800f7ca:	4421      	add	r1, r4
 800f7cc:	1854      	adds	r4, r2, r1
 800f7ce:	42a3      	cmp	r3, r4
 800f7d0:	6011      	str	r1, [r2, #0]
 800f7d2:	d1dd      	bne.n	800f790 <_free_r+0x28>
 800f7d4:	681c      	ldr	r4, [r3, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	6053      	str	r3, [r2, #4]
 800f7da:	4421      	add	r1, r4
 800f7dc:	6011      	str	r1, [r2, #0]
 800f7de:	e7d7      	b.n	800f790 <_free_r+0x28>
 800f7e0:	d902      	bls.n	800f7e8 <_free_r+0x80>
 800f7e2:	230c      	movs	r3, #12
 800f7e4:	6003      	str	r3, [r0, #0]
 800f7e6:	e7d3      	b.n	800f790 <_free_r+0x28>
 800f7e8:	6825      	ldr	r5, [r4, #0]
 800f7ea:	1961      	adds	r1, r4, r5
 800f7ec:	428b      	cmp	r3, r1
 800f7ee:	bf04      	itt	eq
 800f7f0:	6819      	ldreq	r1, [r3, #0]
 800f7f2:	685b      	ldreq	r3, [r3, #4]
 800f7f4:	6063      	str	r3, [r4, #4]
 800f7f6:	bf04      	itt	eq
 800f7f8:	1949      	addeq	r1, r1, r5
 800f7fa:	6021      	streq	r1, [r4, #0]
 800f7fc:	6054      	str	r4, [r2, #4]
 800f7fe:	e7c7      	b.n	800f790 <_free_r+0x28>
 800f800:	b003      	add	sp, #12
 800f802:	bd30      	pop	{r4, r5, pc}
 800f804:	200003ec 	.word	0x200003ec

0800f808 <_malloc_r>:
 800f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80a:	1ccd      	adds	r5, r1, #3
 800f80c:	f025 0503 	bic.w	r5, r5, #3
 800f810:	3508      	adds	r5, #8
 800f812:	2d0c      	cmp	r5, #12
 800f814:	bf38      	it	cc
 800f816:	250c      	movcc	r5, #12
 800f818:	2d00      	cmp	r5, #0
 800f81a:	4606      	mov	r6, r0
 800f81c:	db01      	blt.n	800f822 <_malloc_r+0x1a>
 800f81e:	42a9      	cmp	r1, r5
 800f820:	d903      	bls.n	800f82a <_malloc_r+0x22>
 800f822:	230c      	movs	r3, #12
 800f824:	6033      	str	r3, [r6, #0]
 800f826:	2000      	movs	r0, #0
 800f828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f82a:	f000 f8c3 	bl	800f9b4 <__malloc_lock>
 800f82e:	4921      	ldr	r1, [pc, #132]	; (800f8b4 <_malloc_r+0xac>)
 800f830:	680a      	ldr	r2, [r1, #0]
 800f832:	4614      	mov	r4, r2
 800f834:	b99c      	cbnz	r4, 800f85e <_malloc_r+0x56>
 800f836:	4f20      	ldr	r7, [pc, #128]	; (800f8b8 <_malloc_r+0xb0>)
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	b923      	cbnz	r3, 800f846 <_malloc_r+0x3e>
 800f83c:	4621      	mov	r1, r4
 800f83e:	4630      	mov	r0, r6
 800f840:	f000 f83c 	bl	800f8bc <_sbrk_r>
 800f844:	6038      	str	r0, [r7, #0]
 800f846:	4629      	mov	r1, r5
 800f848:	4630      	mov	r0, r6
 800f84a:	f000 f837 	bl	800f8bc <_sbrk_r>
 800f84e:	1c43      	adds	r3, r0, #1
 800f850:	d123      	bne.n	800f89a <_malloc_r+0x92>
 800f852:	230c      	movs	r3, #12
 800f854:	6033      	str	r3, [r6, #0]
 800f856:	4630      	mov	r0, r6
 800f858:	f000 f8b2 	bl	800f9c0 <__malloc_unlock>
 800f85c:	e7e3      	b.n	800f826 <_malloc_r+0x1e>
 800f85e:	6823      	ldr	r3, [r4, #0]
 800f860:	1b5b      	subs	r3, r3, r5
 800f862:	d417      	bmi.n	800f894 <_malloc_r+0x8c>
 800f864:	2b0b      	cmp	r3, #11
 800f866:	d903      	bls.n	800f870 <_malloc_r+0x68>
 800f868:	6023      	str	r3, [r4, #0]
 800f86a:	441c      	add	r4, r3
 800f86c:	6025      	str	r5, [r4, #0]
 800f86e:	e004      	b.n	800f87a <_malloc_r+0x72>
 800f870:	6863      	ldr	r3, [r4, #4]
 800f872:	42a2      	cmp	r2, r4
 800f874:	bf0c      	ite	eq
 800f876:	600b      	streq	r3, [r1, #0]
 800f878:	6053      	strne	r3, [r2, #4]
 800f87a:	4630      	mov	r0, r6
 800f87c:	f000 f8a0 	bl	800f9c0 <__malloc_unlock>
 800f880:	f104 000b 	add.w	r0, r4, #11
 800f884:	1d23      	adds	r3, r4, #4
 800f886:	f020 0007 	bic.w	r0, r0, #7
 800f88a:	1ac2      	subs	r2, r0, r3
 800f88c:	d0cc      	beq.n	800f828 <_malloc_r+0x20>
 800f88e:	1a1b      	subs	r3, r3, r0
 800f890:	50a3      	str	r3, [r4, r2]
 800f892:	e7c9      	b.n	800f828 <_malloc_r+0x20>
 800f894:	4622      	mov	r2, r4
 800f896:	6864      	ldr	r4, [r4, #4]
 800f898:	e7cc      	b.n	800f834 <_malloc_r+0x2c>
 800f89a:	1cc4      	adds	r4, r0, #3
 800f89c:	f024 0403 	bic.w	r4, r4, #3
 800f8a0:	42a0      	cmp	r0, r4
 800f8a2:	d0e3      	beq.n	800f86c <_malloc_r+0x64>
 800f8a4:	1a21      	subs	r1, r4, r0
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f000 f808 	bl	800f8bc <_sbrk_r>
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	d1dd      	bne.n	800f86c <_malloc_r+0x64>
 800f8b0:	e7cf      	b.n	800f852 <_malloc_r+0x4a>
 800f8b2:	bf00      	nop
 800f8b4:	200003ec 	.word	0x200003ec
 800f8b8:	200003f0 	.word	0x200003f0

0800f8bc <_sbrk_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4d06      	ldr	r5, [pc, #24]	; (800f8d8 <_sbrk_r+0x1c>)
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	4608      	mov	r0, r1
 800f8c6:	602b      	str	r3, [r5, #0]
 800f8c8:	f7f4 fa14 	bl	8003cf4 <_sbrk>
 800f8cc:	1c43      	adds	r3, r0, #1
 800f8ce:	d102      	bne.n	800f8d6 <_sbrk_r+0x1a>
 800f8d0:	682b      	ldr	r3, [r5, #0]
 800f8d2:	b103      	cbz	r3, 800f8d6 <_sbrk_r+0x1a>
 800f8d4:	6023      	str	r3, [r4, #0]
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	20000490 	.word	0x20000490

0800f8dc <_raise_r>:
 800f8dc:	291f      	cmp	r1, #31
 800f8de:	b538      	push	{r3, r4, r5, lr}
 800f8e0:	4604      	mov	r4, r0
 800f8e2:	460d      	mov	r5, r1
 800f8e4:	d904      	bls.n	800f8f0 <_raise_r+0x14>
 800f8e6:	2316      	movs	r3, #22
 800f8e8:	6003      	str	r3, [r0, #0]
 800f8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ee:	bd38      	pop	{r3, r4, r5, pc}
 800f8f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8f2:	b112      	cbz	r2, 800f8fa <_raise_r+0x1e>
 800f8f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8f8:	b94b      	cbnz	r3, 800f90e <_raise_r+0x32>
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f000 f830 	bl	800f960 <_getpid_r>
 800f900:	462a      	mov	r2, r5
 800f902:	4601      	mov	r1, r0
 800f904:	4620      	mov	r0, r4
 800f906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f90a:	f000 b817 	b.w	800f93c <_kill_r>
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d00a      	beq.n	800f928 <_raise_r+0x4c>
 800f912:	1c59      	adds	r1, r3, #1
 800f914:	d103      	bne.n	800f91e <_raise_r+0x42>
 800f916:	2316      	movs	r3, #22
 800f918:	6003      	str	r3, [r0, #0]
 800f91a:	2001      	movs	r0, #1
 800f91c:	e7e7      	b.n	800f8ee <_raise_r+0x12>
 800f91e:	2400      	movs	r4, #0
 800f920:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f924:	4628      	mov	r0, r5
 800f926:	4798      	blx	r3
 800f928:	2000      	movs	r0, #0
 800f92a:	e7e0      	b.n	800f8ee <_raise_r+0x12>

0800f92c <raise>:
 800f92c:	4b02      	ldr	r3, [pc, #8]	; (800f938 <raise+0xc>)
 800f92e:	4601      	mov	r1, r0
 800f930:	6818      	ldr	r0, [r3, #0]
 800f932:	f7ff bfd3 	b.w	800f8dc <_raise_r>
 800f936:	bf00      	nop
 800f938:	2000001c 	.word	0x2000001c

0800f93c <_kill_r>:
 800f93c:	b538      	push	{r3, r4, r5, lr}
 800f93e:	4d07      	ldr	r5, [pc, #28]	; (800f95c <_kill_r+0x20>)
 800f940:	2300      	movs	r3, #0
 800f942:	4604      	mov	r4, r0
 800f944:	4608      	mov	r0, r1
 800f946:	4611      	mov	r1, r2
 800f948:	602b      	str	r3, [r5, #0]
 800f94a:	f7f4 f9b9 	bl	8003cc0 <_kill>
 800f94e:	1c43      	adds	r3, r0, #1
 800f950:	d102      	bne.n	800f958 <_kill_r+0x1c>
 800f952:	682b      	ldr	r3, [r5, #0]
 800f954:	b103      	cbz	r3, 800f958 <_kill_r+0x1c>
 800f956:	6023      	str	r3, [r4, #0]
 800f958:	bd38      	pop	{r3, r4, r5, pc}
 800f95a:	bf00      	nop
 800f95c:	20000490 	.word	0x20000490

0800f960 <_getpid_r>:
 800f960:	f7f4 b9a6 	b.w	8003cb0 <_getpid>

0800f964 <siprintf>:
 800f964:	b40e      	push	{r1, r2, r3}
 800f966:	b500      	push	{lr}
 800f968:	b09c      	sub	sp, #112	; 0x70
 800f96a:	ab1d      	add	r3, sp, #116	; 0x74
 800f96c:	9002      	str	r0, [sp, #8]
 800f96e:	9006      	str	r0, [sp, #24]
 800f970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f974:	4809      	ldr	r0, [pc, #36]	; (800f99c <siprintf+0x38>)
 800f976:	9107      	str	r1, [sp, #28]
 800f978:	9104      	str	r1, [sp, #16]
 800f97a:	4909      	ldr	r1, [pc, #36]	; (800f9a0 <siprintf+0x3c>)
 800f97c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f980:	9105      	str	r1, [sp, #20]
 800f982:	6800      	ldr	r0, [r0, #0]
 800f984:	9301      	str	r3, [sp, #4]
 800f986:	a902      	add	r1, sp, #8
 800f988:	f000 f87c 	bl	800fa84 <_svfiprintf_r>
 800f98c:	9b02      	ldr	r3, [sp, #8]
 800f98e:	2200      	movs	r2, #0
 800f990:	701a      	strb	r2, [r3, #0]
 800f992:	b01c      	add	sp, #112	; 0x70
 800f994:	f85d eb04 	ldr.w	lr, [sp], #4
 800f998:	b003      	add	sp, #12
 800f99a:	4770      	bx	lr
 800f99c:	2000001c 	.word	0x2000001c
 800f9a0:	ffff0208 	.word	0xffff0208

0800f9a4 <strcpy>:
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9aa:	f803 2b01 	strb.w	r2, [r3], #1
 800f9ae:	2a00      	cmp	r2, #0
 800f9b0:	d1f9      	bne.n	800f9a6 <strcpy+0x2>
 800f9b2:	4770      	bx	lr

0800f9b4 <__malloc_lock>:
 800f9b4:	4801      	ldr	r0, [pc, #4]	; (800f9bc <__malloc_lock+0x8>)
 800f9b6:	f000 baf9 	b.w	800ffac <__retarget_lock_acquire_recursive>
 800f9ba:	bf00      	nop
 800f9bc:	20000498 	.word	0x20000498

0800f9c0 <__malloc_unlock>:
 800f9c0:	4801      	ldr	r0, [pc, #4]	; (800f9c8 <__malloc_unlock+0x8>)
 800f9c2:	f000 baf4 	b.w	800ffae <__retarget_lock_release_recursive>
 800f9c6:	bf00      	nop
 800f9c8:	20000498 	.word	0x20000498

0800f9cc <__ssputs_r>:
 800f9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d0:	688e      	ldr	r6, [r1, #8]
 800f9d2:	429e      	cmp	r6, r3
 800f9d4:	4682      	mov	sl, r0
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	4690      	mov	r8, r2
 800f9da:	461f      	mov	r7, r3
 800f9dc:	d838      	bhi.n	800fa50 <__ssputs_r+0x84>
 800f9de:	898a      	ldrh	r2, [r1, #12]
 800f9e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9e4:	d032      	beq.n	800fa4c <__ssputs_r+0x80>
 800f9e6:	6825      	ldr	r5, [r4, #0]
 800f9e8:	6909      	ldr	r1, [r1, #16]
 800f9ea:	eba5 0901 	sub.w	r9, r5, r1
 800f9ee:	6965      	ldr	r5, [r4, #20]
 800f9f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	444b      	add	r3, r9
 800f9fc:	106d      	asrs	r5, r5, #1
 800f9fe:	429d      	cmp	r5, r3
 800fa00:	bf38      	it	cc
 800fa02:	461d      	movcc	r5, r3
 800fa04:	0553      	lsls	r3, r2, #21
 800fa06:	d531      	bpl.n	800fa6c <__ssputs_r+0xa0>
 800fa08:	4629      	mov	r1, r5
 800fa0a:	f7ff fefd 	bl	800f808 <_malloc_r>
 800fa0e:	4606      	mov	r6, r0
 800fa10:	b950      	cbnz	r0, 800fa28 <__ssputs_r+0x5c>
 800fa12:	230c      	movs	r3, #12
 800fa14:	f8ca 3000 	str.w	r3, [sl]
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa1e:	81a3      	strh	r3, [r4, #12]
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa28:	6921      	ldr	r1, [r4, #16]
 800fa2a:	464a      	mov	r2, r9
 800fa2c:	f7ff fe5c 	bl	800f6e8 <memcpy>
 800fa30:	89a3      	ldrh	r3, [r4, #12]
 800fa32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa3a:	81a3      	strh	r3, [r4, #12]
 800fa3c:	6126      	str	r6, [r4, #16]
 800fa3e:	6165      	str	r5, [r4, #20]
 800fa40:	444e      	add	r6, r9
 800fa42:	eba5 0509 	sub.w	r5, r5, r9
 800fa46:	6026      	str	r6, [r4, #0]
 800fa48:	60a5      	str	r5, [r4, #8]
 800fa4a:	463e      	mov	r6, r7
 800fa4c:	42be      	cmp	r6, r7
 800fa4e:	d900      	bls.n	800fa52 <__ssputs_r+0x86>
 800fa50:	463e      	mov	r6, r7
 800fa52:	4632      	mov	r2, r6
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	4641      	mov	r1, r8
 800fa58:	f7ff fe54 	bl	800f704 <memmove>
 800fa5c:	68a3      	ldr	r3, [r4, #8]
 800fa5e:	6822      	ldr	r2, [r4, #0]
 800fa60:	1b9b      	subs	r3, r3, r6
 800fa62:	4432      	add	r2, r6
 800fa64:	60a3      	str	r3, [r4, #8]
 800fa66:	6022      	str	r2, [r4, #0]
 800fa68:	2000      	movs	r0, #0
 800fa6a:	e7db      	b.n	800fa24 <__ssputs_r+0x58>
 800fa6c:	462a      	mov	r2, r5
 800fa6e:	f000 fa9f 	bl	800ffb0 <_realloc_r>
 800fa72:	4606      	mov	r6, r0
 800fa74:	2800      	cmp	r0, #0
 800fa76:	d1e1      	bne.n	800fa3c <__ssputs_r+0x70>
 800fa78:	6921      	ldr	r1, [r4, #16]
 800fa7a:	4650      	mov	r0, sl
 800fa7c:	f7ff fe74 	bl	800f768 <_free_r>
 800fa80:	e7c7      	b.n	800fa12 <__ssputs_r+0x46>
	...

0800fa84 <_svfiprintf_r>:
 800fa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa88:	4698      	mov	r8, r3
 800fa8a:	898b      	ldrh	r3, [r1, #12]
 800fa8c:	061b      	lsls	r3, r3, #24
 800fa8e:	b09d      	sub	sp, #116	; 0x74
 800fa90:	4607      	mov	r7, r0
 800fa92:	460d      	mov	r5, r1
 800fa94:	4614      	mov	r4, r2
 800fa96:	d50e      	bpl.n	800fab6 <_svfiprintf_r+0x32>
 800fa98:	690b      	ldr	r3, [r1, #16]
 800fa9a:	b963      	cbnz	r3, 800fab6 <_svfiprintf_r+0x32>
 800fa9c:	2140      	movs	r1, #64	; 0x40
 800fa9e:	f7ff feb3 	bl	800f808 <_malloc_r>
 800faa2:	6028      	str	r0, [r5, #0]
 800faa4:	6128      	str	r0, [r5, #16]
 800faa6:	b920      	cbnz	r0, 800fab2 <_svfiprintf_r+0x2e>
 800faa8:	230c      	movs	r3, #12
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	f04f 30ff 	mov.w	r0, #4294967295
 800fab0:	e0d1      	b.n	800fc56 <_svfiprintf_r+0x1d2>
 800fab2:	2340      	movs	r3, #64	; 0x40
 800fab4:	616b      	str	r3, [r5, #20]
 800fab6:	2300      	movs	r3, #0
 800fab8:	9309      	str	r3, [sp, #36]	; 0x24
 800faba:	2320      	movs	r3, #32
 800fabc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fac0:	f8cd 800c 	str.w	r8, [sp, #12]
 800fac4:	2330      	movs	r3, #48	; 0x30
 800fac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc70 <_svfiprintf_r+0x1ec>
 800faca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800face:	f04f 0901 	mov.w	r9, #1
 800fad2:	4623      	mov	r3, r4
 800fad4:	469a      	mov	sl, r3
 800fad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fada:	b10a      	cbz	r2, 800fae0 <_svfiprintf_r+0x5c>
 800fadc:	2a25      	cmp	r2, #37	; 0x25
 800fade:	d1f9      	bne.n	800fad4 <_svfiprintf_r+0x50>
 800fae0:	ebba 0b04 	subs.w	fp, sl, r4
 800fae4:	d00b      	beq.n	800fafe <_svfiprintf_r+0x7a>
 800fae6:	465b      	mov	r3, fp
 800fae8:	4622      	mov	r2, r4
 800faea:	4629      	mov	r1, r5
 800faec:	4638      	mov	r0, r7
 800faee:	f7ff ff6d 	bl	800f9cc <__ssputs_r>
 800faf2:	3001      	adds	r0, #1
 800faf4:	f000 80aa 	beq.w	800fc4c <_svfiprintf_r+0x1c8>
 800faf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fafa:	445a      	add	r2, fp
 800fafc:	9209      	str	r2, [sp, #36]	; 0x24
 800fafe:	f89a 3000 	ldrb.w	r3, [sl]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 80a2 	beq.w	800fc4c <_svfiprintf_r+0x1c8>
 800fb08:	2300      	movs	r3, #0
 800fb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb12:	f10a 0a01 	add.w	sl, sl, #1
 800fb16:	9304      	str	r3, [sp, #16]
 800fb18:	9307      	str	r3, [sp, #28]
 800fb1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb1e:	931a      	str	r3, [sp, #104]	; 0x68
 800fb20:	4654      	mov	r4, sl
 800fb22:	2205      	movs	r2, #5
 800fb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb28:	4851      	ldr	r0, [pc, #324]	; (800fc70 <_svfiprintf_r+0x1ec>)
 800fb2a:	f7f0 fbf1 	bl	8000310 <memchr>
 800fb2e:	9a04      	ldr	r2, [sp, #16]
 800fb30:	b9d8      	cbnz	r0, 800fb6a <_svfiprintf_r+0xe6>
 800fb32:	06d0      	lsls	r0, r2, #27
 800fb34:	bf44      	itt	mi
 800fb36:	2320      	movmi	r3, #32
 800fb38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb3c:	0711      	lsls	r1, r2, #28
 800fb3e:	bf44      	itt	mi
 800fb40:	232b      	movmi	r3, #43	; 0x2b
 800fb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb46:	f89a 3000 	ldrb.w	r3, [sl]
 800fb4a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb4c:	d015      	beq.n	800fb7a <_svfiprintf_r+0xf6>
 800fb4e:	9a07      	ldr	r2, [sp, #28]
 800fb50:	4654      	mov	r4, sl
 800fb52:	2000      	movs	r0, #0
 800fb54:	f04f 0c0a 	mov.w	ip, #10
 800fb58:	4621      	mov	r1, r4
 800fb5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb5e:	3b30      	subs	r3, #48	; 0x30
 800fb60:	2b09      	cmp	r3, #9
 800fb62:	d94e      	bls.n	800fc02 <_svfiprintf_r+0x17e>
 800fb64:	b1b0      	cbz	r0, 800fb94 <_svfiprintf_r+0x110>
 800fb66:	9207      	str	r2, [sp, #28]
 800fb68:	e014      	b.n	800fb94 <_svfiprintf_r+0x110>
 800fb6a:	eba0 0308 	sub.w	r3, r0, r8
 800fb6e:	fa09 f303 	lsl.w	r3, r9, r3
 800fb72:	4313      	orrs	r3, r2
 800fb74:	9304      	str	r3, [sp, #16]
 800fb76:	46a2      	mov	sl, r4
 800fb78:	e7d2      	b.n	800fb20 <_svfiprintf_r+0x9c>
 800fb7a:	9b03      	ldr	r3, [sp, #12]
 800fb7c:	1d19      	adds	r1, r3, #4
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	9103      	str	r1, [sp, #12]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	bfbb      	ittet	lt
 800fb86:	425b      	neglt	r3, r3
 800fb88:	f042 0202 	orrlt.w	r2, r2, #2
 800fb8c:	9307      	strge	r3, [sp, #28]
 800fb8e:	9307      	strlt	r3, [sp, #28]
 800fb90:	bfb8      	it	lt
 800fb92:	9204      	strlt	r2, [sp, #16]
 800fb94:	7823      	ldrb	r3, [r4, #0]
 800fb96:	2b2e      	cmp	r3, #46	; 0x2e
 800fb98:	d10c      	bne.n	800fbb4 <_svfiprintf_r+0x130>
 800fb9a:	7863      	ldrb	r3, [r4, #1]
 800fb9c:	2b2a      	cmp	r3, #42	; 0x2a
 800fb9e:	d135      	bne.n	800fc0c <_svfiprintf_r+0x188>
 800fba0:	9b03      	ldr	r3, [sp, #12]
 800fba2:	1d1a      	adds	r2, r3, #4
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	9203      	str	r2, [sp, #12]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	bfb8      	it	lt
 800fbac:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbb0:	3402      	adds	r4, #2
 800fbb2:	9305      	str	r3, [sp, #20]
 800fbb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc80 <_svfiprintf_r+0x1fc>
 800fbb8:	7821      	ldrb	r1, [r4, #0]
 800fbba:	2203      	movs	r2, #3
 800fbbc:	4650      	mov	r0, sl
 800fbbe:	f7f0 fba7 	bl	8000310 <memchr>
 800fbc2:	b140      	cbz	r0, 800fbd6 <_svfiprintf_r+0x152>
 800fbc4:	2340      	movs	r3, #64	; 0x40
 800fbc6:	eba0 000a 	sub.w	r0, r0, sl
 800fbca:	fa03 f000 	lsl.w	r0, r3, r0
 800fbce:	9b04      	ldr	r3, [sp, #16]
 800fbd0:	4303      	orrs	r3, r0
 800fbd2:	3401      	adds	r4, #1
 800fbd4:	9304      	str	r3, [sp, #16]
 800fbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbda:	4826      	ldr	r0, [pc, #152]	; (800fc74 <_svfiprintf_r+0x1f0>)
 800fbdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbe0:	2206      	movs	r2, #6
 800fbe2:	f7f0 fb95 	bl	8000310 <memchr>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d038      	beq.n	800fc5c <_svfiprintf_r+0x1d8>
 800fbea:	4b23      	ldr	r3, [pc, #140]	; (800fc78 <_svfiprintf_r+0x1f4>)
 800fbec:	bb1b      	cbnz	r3, 800fc36 <_svfiprintf_r+0x1b2>
 800fbee:	9b03      	ldr	r3, [sp, #12]
 800fbf0:	3307      	adds	r3, #7
 800fbf2:	f023 0307 	bic.w	r3, r3, #7
 800fbf6:	3308      	adds	r3, #8
 800fbf8:	9303      	str	r3, [sp, #12]
 800fbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbfc:	4433      	add	r3, r6
 800fbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800fc00:	e767      	b.n	800fad2 <_svfiprintf_r+0x4e>
 800fc02:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc06:	460c      	mov	r4, r1
 800fc08:	2001      	movs	r0, #1
 800fc0a:	e7a5      	b.n	800fb58 <_svfiprintf_r+0xd4>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	3401      	adds	r4, #1
 800fc10:	9305      	str	r3, [sp, #20]
 800fc12:	4619      	mov	r1, r3
 800fc14:	f04f 0c0a 	mov.w	ip, #10
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc1e:	3a30      	subs	r2, #48	; 0x30
 800fc20:	2a09      	cmp	r2, #9
 800fc22:	d903      	bls.n	800fc2c <_svfiprintf_r+0x1a8>
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d0c5      	beq.n	800fbb4 <_svfiprintf_r+0x130>
 800fc28:	9105      	str	r1, [sp, #20]
 800fc2a:	e7c3      	b.n	800fbb4 <_svfiprintf_r+0x130>
 800fc2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc30:	4604      	mov	r4, r0
 800fc32:	2301      	movs	r3, #1
 800fc34:	e7f0      	b.n	800fc18 <_svfiprintf_r+0x194>
 800fc36:	ab03      	add	r3, sp, #12
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	462a      	mov	r2, r5
 800fc3c:	4b0f      	ldr	r3, [pc, #60]	; (800fc7c <_svfiprintf_r+0x1f8>)
 800fc3e:	a904      	add	r1, sp, #16
 800fc40:	4638      	mov	r0, r7
 800fc42:	f3af 8000 	nop.w
 800fc46:	1c42      	adds	r2, r0, #1
 800fc48:	4606      	mov	r6, r0
 800fc4a:	d1d6      	bne.n	800fbfa <_svfiprintf_r+0x176>
 800fc4c:	89ab      	ldrh	r3, [r5, #12]
 800fc4e:	065b      	lsls	r3, r3, #25
 800fc50:	f53f af2c 	bmi.w	800faac <_svfiprintf_r+0x28>
 800fc54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc56:	b01d      	add	sp, #116	; 0x74
 800fc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5c:	ab03      	add	r3, sp, #12
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	462a      	mov	r2, r5
 800fc62:	4b06      	ldr	r3, [pc, #24]	; (800fc7c <_svfiprintf_r+0x1f8>)
 800fc64:	a904      	add	r1, sp, #16
 800fc66:	4638      	mov	r0, r7
 800fc68:	f000 f87a 	bl	800fd60 <_printf_i>
 800fc6c:	e7eb      	b.n	800fc46 <_svfiprintf_r+0x1c2>
 800fc6e:	bf00      	nop
 800fc70:	0802b250 	.word	0x0802b250
 800fc74:	0802b25a 	.word	0x0802b25a
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	0800f9cd 	.word	0x0800f9cd
 800fc80:	0802b256 	.word	0x0802b256

0800fc84 <_printf_common>:
 800fc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	4616      	mov	r6, r2
 800fc8a:	4699      	mov	r9, r3
 800fc8c:	688a      	ldr	r2, [r1, #8]
 800fc8e:	690b      	ldr	r3, [r1, #16]
 800fc90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc94:	4293      	cmp	r3, r2
 800fc96:	bfb8      	it	lt
 800fc98:	4613      	movlt	r3, r2
 800fc9a:	6033      	str	r3, [r6, #0]
 800fc9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fca0:	4607      	mov	r7, r0
 800fca2:	460c      	mov	r4, r1
 800fca4:	b10a      	cbz	r2, 800fcaa <_printf_common+0x26>
 800fca6:	3301      	adds	r3, #1
 800fca8:	6033      	str	r3, [r6, #0]
 800fcaa:	6823      	ldr	r3, [r4, #0]
 800fcac:	0699      	lsls	r1, r3, #26
 800fcae:	bf42      	ittt	mi
 800fcb0:	6833      	ldrmi	r3, [r6, #0]
 800fcb2:	3302      	addmi	r3, #2
 800fcb4:	6033      	strmi	r3, [r6, #0]
 800fcb6:	6825      	ldr	r5, [r4, #0]
 800fcb8:	f015 0506 	ands.w	r5, r5, #6
 800fcbc:	d106      	bne.n	800fccc <_printf_common+0x48>
 800fcbe:	f104 0a19 	add.w	sl, r4, #25
 800fcc2:	68e3      	ldr	r3, [r4, #12]
 800fcc4:	6832      	ldr	r2, [r6, #0]
 800fcc6:	1a9b      	subs	r3, r3, r2
 800fcc8:	42ab      	cmp	r3, r5
 800fcca:	dc26      	bgt.n	800fd1a <_printf_common+0x96>
 800fccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcd0:	1e13      	subs	r3, r2, #0
 800fcd2:	6822      	ldr	r2, [r4, #0]
 800fcd4:	bf18      	it	ne
 800fcd6:	2301      	movne	r3, #1
 800fcd8:	0692      	lsls	r2, r2, #26
 800fcda:	d42b      	bmi.n	800fd34 <_printf_common+0xb0>
 800fcdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fce0:	4649      	mov	r1, r9
 800fce2:	4638      	mov	r0, r7
 800fce4:	47c0      	blx	r8
 800fce6:	3001      	adds	r0, #1
 800fce8:	d01e      	beq.n	800fd28 <_printf_common+0xa4>
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	68e5      	ldr	r5, [r4, #12]
 800fcee:	6832      	ldr	r2, [r6, #0]
 800fcf0:	f003 0306 	and.w	r3, r3, #6
 800fcf4:	2b04      	cmp	r3, #4
 800fcf6:	bf08      	it	eq
 800fcf8:	1aad      	subeq	r5, r5, r2
 800fcfa:	68a3      	ldr	r3, [r4, #8]
 800fcfc:	6922      	ldr	r2, [r4, #16]
 800fcfe:	bf0c      	ite	eq
 800fd00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd04:	2500      	movne	r5, #0
 800fd06:	4293      	cmp	r3, r2
 800fd08:	bfc4      	itt	gt
 800fd0a:	1a9b      	subgt	r3, r3, r2
 800fd0c:	18ed      	addgt	r5, r5, r3
 800fd0e:	2600      	movs	r6, #0
 800fd10:	341a      	adds	r4, #26
 800fd12:	42b5      	cmp	r5, r6
 800fd14:	d11a      	bne.n	800fd4c <_printf_common+0xc8>
 800fd16:	2000      	movs	r0, #0
 800fd18:	e008      	b.n	800fd2c <_printf_common+0xa8>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	4652      	mov	r2, sl
 800fd1e:	4649      	mov	r1, r9
 800fd20:	4638      	mov	r0, r7
 800fd22:	47c0      	blx	r8
 800fd24:	3001      	adds	r0, #1
 800fd26:	d103      	bne.n	800fd30 <_printf_common+0xac>
 800fd28:	f04f 30ff 	mov.w	r0, #4294967295
 800fd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd30:	3501      	adds	r5, #1
 800fd32:	e7c6      	b.n	800fcc2 <_printf_common+0x3e>
 800fd34:	18e1      	adds	r1, r4, r3
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	2030      	movs	r0, #48	; 0x30
 800fd3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd3e:	4422      	add	r2, r4
 800fd40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd48:	3302      	adds	r3, #2
 800fd4a:	e7c7      	b.n	800fcdc <_printf_common+0x58>
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	4622      	mov	r2, r4
 800fd50:	4649      	mov	r1, r9
 800fd52:	4638      	mov	r0, r7
 800fd54:	47c0      	blx	r8
 800fd56:	3001      	adds	r0, #1
 800fd58:	d0e6      	beq.n	800fd28 <_printf_common+0xa4>
 800fd5a:	3601      	adds	r6, #1
 800fd5c:	e7d9      	b.n	800fd12 <_printf_common+0x8e>
	...

0800fd60 <_printf_i>:
 800fd60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd64:	460c      	mov	r4, r1
 800fd66:	4691      	mov	r9, r2
 800fd68:	7e27      	ldrb	r7, [r4, #24]
 800fd6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fd6c:	2f78      	cmp	r7, #120	; 0x78
 800fd6e:	4680      	mov	r8, r0
 800fd70:	469a      	mov	sl, r3
 800fd72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd76:	d807      	bhi.n	800fd88 <_printf_i+0x28>
 800fd78:	2f62      	cmp	r7, #98	; 0x62
 800fd7a:	d80a      	bhi.n	800fd92 <_printf_i+0x32>
 800fd7c:	2f00      	cmp	r7, #0
 800fd7e:	f000 80d8 	beq.w	800ff32 <_printf_i+0x1d2>
 800fd82:	2f58      	cmp	r7, #88	; 0x58
 800fd84:	f000 80a3 	beq.w	800fece <_printf_i+0x16e>
 800fd88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fd8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd90:	e03a      	b.n	800fe08 <_printf_i+0xa8>
 800fd92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd96:	2b15      	cmp	r3, #21
 800fd98:	d8f6      	bhi.n	800fd88 <_printf_i+0x28>
 800fd9a:	a001      	add	r0, pc, #4	; (adr r0, 800fda0 <_printf_i+0x40>)
 800fd9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fda0:	0800fdf9 	.word	0x0800fdf9
 800fda4:	0800fe0d 	.word	0x0800fe0d
 800fda8:	0800fd89 	.word	0x0800fd89
 800fdac:	0800fd89 	.word	0x0800fd89
 800fdb0:	0800fd89 	.word	0x0800fd89
 800fdb4:	0800fd89 	.word	0x0800fd89
 800fdb8:	0800fe0d 	.word	0x0800fe0d
 800fdbc:	0800fd89 	.word	0x0800fd89
 800fdc0:	0800fd89 	.word	0x0800fd89
 800fdc4:	0800fd89 	.word	0x0800fd89
 800fdc8:	0800fd89 	.word	0x0800fd89
 800fdcc:	0800ff19 	.word	0x0800ff19
 800fdd0:	0800fe3d 	.word	0x0800fe3d
 800fdd4:	0800fefb 	.word	0x0800fefb
 800fdd8:	0800fd89 	.word	0x0800fd89
 800fddc:	0800fd89 	.word	0x0800fd89
 800fde0:	0800ff3b 	.word	0x0800ff3b
 800fde4:	0800fd89 	.word	0x0800fd89
 800fde8:	0800fe3d 	.word	0x0800fe3d
 800fdec:	0800fd89 	.word	0x0800fd89
 800fdf0:	0800fd89 	.word	0x0800fd89
 800fdf4:	0800ff03 	.word	0x0800ff03
 800fdf8:	680b      	ldr	r3, [r1, #0]
 800fdfa:	1d1a      	adds	r2, r3, #4
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	600a      	str	r2, [r1, #0]
 800fe00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e0a3      	b.n	800ff54 <_printf_i+0x1f4>
 800fe0c:	6825      	ldr	r5, [r4, #0]
 800fe0e:	6808      	ldr	r0, [r1, #0]
 800fe10:	062e      	lsls	r6, r5, #24
 800fe12:	f100 0304 	add.w	r3, r0, #4
 800fe16:	d50a      	bpl.n	800fe2e <_printf_i+0xce>
 800fe18:	6805      	ldr	r5, [r0, #0]
 800fe1a:	600b      	str	r3, [r1, #0]
 800fe1c:	2d00      	cmp	r5, #0
 800fe1e:	da03      	bge.n	800fe28 <_printf_i+0xc8>
 800fe20:	232d      	movs	r3, #45	; 0x2d
 800fe22:	426d      	negs	r5, r5
 800fe24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe28:	485e      	ldr	r0, [pc, #376]	; (800ffa4 <_printf_i+0x244>)
 800fe2a:	230a      	movs	r3, #10
 800fe2c:	e019      	b.n	800fe62 <_printf_i+0x102>
 800fe2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe32:	6805      	ldr	r5, [r0, #0]
 800fe34:	600b      	str	r3, [r1, #0]
 800fe36:	bf18      	it	ne
 800fe38:	b22d      	sxthne	r5, r5
 800fe3a:	e7ef      	b.n	800fe1c <_printf_i+0xbc>
 800fe3c:	680b      	ldr	r3, [r1, #0]
 800fe3e:	6825      	ldr	r5, [r4, #0]
 800fe40:	1d18      	adds	r0, r3, #4
 800fe42:	6008      	str	r0, [r1, #0]
 800fe44:	0628      	lsls	r0, r5, #24
 800fe46:	d501      	bpl.n	800fe4c <_printf_i+0xec>
 800fe48:	681d      	ldr	r5, [r3, #0]
 800fe4a:	e002      	b.n	800fe52 <_printf_i+0xf2>
 800fe4c:	0669      	lsls	r1, r5, #25
 800fe4e:	d5fb      	bpl.n	800fe48 <_printf_i+0xe8>
 800fe50:	881d      	ldrh	r5, [r3, #0]
 800fe52:	4854      	ldr	r0, [pc, #336]	; (800ffa4 <_printf_i+0x244>)
 800fe54:	2f6f      	cmp	r7, #111	; 0x6f
 800fe56:	bf0c      	ite	eq
 800fe58:	2308      	moveq	r3, #8
 800fe5a:	230a      	movne	r3, #10
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe62:	6866      	ldr	r6, [r4, #4]
 800fe64:	60a6      	str	r6, [r4, #8]
 800fe66:	2e00      	cmp	r6, #0
 800fe68:	bfa2      	ittt	ge
 800fe6a:	6821      	ldrge	r1, [r4, #0]
 800fe6c:	f021 0104 	bicge.w	r1, r1, #4
 800fe70:	6021      	strge	r1, [r4, #0]
 800fe72:	b90d      	cbnz	r5, 800fe78 <_printf_i+0x118>
 800fe74:	2e00      	cmp	r6, #0
 800fe76:	d04d      	beq.n	800ff14 <_printf_i+0x1b4>
 800fe78:	4616      	mov	r6, r2
 800fe7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe7e:	fb03 5711 	mls	r7, r3, r1, r5
 800fe82:	5dc7      	ldrb	r7, [r0, r7]
 800fe84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe88:	462f      	mov	r7, r5
 800fe8a:	42bb      	cmp	r3, r7
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	d9f4      	bls.n	800fe7a <_printf_i+0x11a>
 800fe90:	2b08      	cmp	r3, #8
 800fe92:	d10b      	bne.n	800feac <_printf_i+0x14c>
 800fe94:	6823      	ldr	r3, [r4, #0]
 800fe96:	07df      	lsls	r7, r3, #31
 800fe98:	d508      	bpl.n	800feac <_printf_i+0x14c>
 800fe9a:	6923      	ldr	r3, [r4, #16]
 800fe9c:	6861      	ldr	r1, [r4, #4]
 800fe9e:	4299      	cmp	r1, r3
 800fea0:	bfde      	ittt	le
 800fea2:	2330      	movle	r3, #48	; 0x30
 800fea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800feac:	1b92      	subs	r2, r2, r6
 800feae:	6122      	str	r2, [r4, #16]
 800feb0:	f8cd a000 	str.w	sl, [sp]
 800feb4:	464b      	mov	r3, r9
 800feb6:	aa03      	add	r2, sp, #12
 800feb8:	4621      	mov	r1, r4
 800feba:	4640      	mov	r0, r8
 800febc:	f7ff fee2 	bl	800fc84 <_printf_common>
 800fec0:	3001      	adds	r0, #1
 800fec2:	d14c      	bne.n	800ff5e <_printf_i+0x1fe>
 800fec4:	f04f 30ff 	mov.w	r0, #4294967295
 800fec8:	b004      	add	sp, #16
 800feca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fece:	4835      	ldr	r0, [pc, #212]	; (800ffa4 <_printf_i+0x244>)
 800fed0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fed4:	6823      	ldr	r3, [r4, #0]
 800fed6:	680e      	ldr	r6, [r1, #0]
 800fed8:	061f      	lsls	r7, r3, #24
 800feda:	f856 5b04 	ldr.w	r5, [r6], #4
 800fede:	600e      	str	r6, [r1, #0]
 800fee0:	d514      	bpl.n	800ff0c <_printf_i+0x1ac>
 800fee2:	07d9      	lsls	r1, r3, #31
 800fee4:	bf44      	itt	mi
 800fee6:	f043 0320 	orrmi.w	r3, r3, #32
 800feea:	6023      	strmi	r3, [r4, #0]
 800feec:	b91d      	cbnz	r5, 800fef6 <_printf_i+0x196>
 800feee:	6823      	ldr	r3, [r4, #0]
 800fef0:	f023 0320 	bic.w	r3, r3, #32
 800fef4:	6023      	str	r3, [r4, #0]
 800fef6:	2310      	movs	r3, #16
 800fef8:	e7b0      	b.n	800fe5c <_printf_i+0xfc>
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	f043 0320 	orr.w	r3, r3, #32
 800ff00:	6023      	str	r3, [r4, #0]
 800ff02:	2378      	movs	r3, #120	; 0x78
 800ff04:	4828      	ldr	r0, [pc, #160]	; (800ffa8 <_printf_i+0x248>)
 800ff06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff0a:	e7e3      	b.n	800fed4 <_printf_i+0x174>
 800ff0c:	065e      	lsls	r6, r3, #25
 800ff0e:	bf48      	it	mi
 800ff10:	b2ad      	uxthmi	r5, r5
 800ff12:	e7e6      	b.n	800fee2 <_printf_i+0x182>
 800ff14:	4616      	mov	r6, r2
 800ff16:	e7bb      	b.n	800fe90 <_printf_i+0x130>
 800ff18:	680b      	ldr	r3, [r1, #0]
 800ff1a:	6826      	ldr	r6, [r4, #0]
 800ff1c:	6960      	ldr	r0, [r4, #20]
 800ff1e:	1d1d      	adds	r5, r3, #4
 800ff20:	600d      	str	r5, [r1, #0]
 800ff22:	0635      	lsls	r5, r6, #24
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	d501      	bpl.n	800ff2c <_printf_i+0x1cc>
 800ff28:	6018      	str	r0, [r3, #0]
 800ff2a:	e002      	b.n	800ff32 <_printf_i+0x1d2>
 800ff2c:	0671      	lsls	r1, r6, #25
 800ff2e:	d5fb      	bpl.n	800ff28 <_printf_i+0x1c8>
 800ff30:	8018      	strh	r0, [r3, #0]
 800ff32:	2300      	movs	r3, #0
 800ff34:	6123      	str	r3, [r4, #16]
 800ff36:	4616      	mov	r6, r2
 800ff38:	e7ba      	b.n	800feb0 <_printf_i+0x150>
 800ff3a:	680b      	ldr	r3, [r1, #0]
 800ff3c:	1d1a      	adds	r2, r3, #4
 800ff3e:	600a      	str	r2, [r1, #0]
 800ff40:	681e      	ldr	r6, [r3, #0]
 800ff42:	6862      	ldr	r2, [r4, #4]
 800ff44:	2100      	movs	r1, #0
 800ff46:	4630      	mov	r0, r6
 800ff48:	f7f0 f9e2 	bl	8000310 <memchr>
 800ff4c:	b108      	cbz	r0, 800ff52 <_printf_i+0x1f2>
 800ff4e:	1b80      	subs	r0, r0, r6
 800ff50:	6060      	str	r0, [r4, #4]
 800ff52:	6863      	ldr	r3, [r4, #4]
 800ff54:	6123      	str	r3, [r4, #16]
 800ff56:	2300      	movs	r3, #0
 800ff58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff5c:	e7a8      	b.n	800feb0 <_printf_i+0x150>
 800ff5e:	6923      	ldr	r3, [r4, #16]
 800ff60:	4632      	mov	r2, r6
 800ff62:	4649      	mov	r1, r9
 800ff64:	4640      	mov	r0, r8
 800ff66:	47d0      	blx	sl
 800ff68:	3001      	adds	r0, #1
 800ff6a:	d0ab      	beq.n	800fec4 <_printf_i+0x164>
 800ff6c:	6823      	ldr	r3, [r4, #0]
 800ff6e:	079b      	lsls	r3, r3, #30
 800ff70:	d413      	bmi.n	800ff9a <_printf_i+0x23a>
 800ff72:	68e0      	ldr	r0, [r4, #12]
 800ff74:	9b03      	ldr	r3, [sp, #12]
 800ff76:	4298      	cmp	r0, r3
 800ff78:	bfb8      	it	lt
 800ff7a:	4618      	movlt	r0, r3
 800ff7c:	e7a4      	b.n	800fec8 <_printf_i+0x168>
 800ff7e:	2301      	movs	r3, #1
 800ff80:	4632      	mov	r2, r6
 800ff82:	4649      	mov	r1, r9
 800ff84:	4640      	mov	r0, r8
 800ff86:	47d0      	blx	sl
 800ff88:	3001      	adds	r0, #1
 800ff8a:	d09b      	beq.n	800fec4 <_printf_i+0x164>
 800ff8c:	3501      	adds	r5, #1
 800ff8e:	68e3      	ldr	r3, [r4, #12]
 800ff90:	9903      	ldr	r1, [sp, #12]
 800ff92:	1a5b      	subs	r3, r3, r1
 800ff94:	42ab      	cmp	r3, r5
 800ff96:	dcf2      	bgt.n	800ff7e <_printf_i+0x21e>
 800ff98:	e7eb      	b.n	800ff72 <_printf_i+0x212>
 800ff9a:	2500      	movs	r5, #0
 800ff9c:	f104 0619 	add.w	r6, r4, #25
 800ffa0:	e7f5      	b.n	800ff8e <_printf_i+0x22e>
 800ffa2:	bf00      	nop
 800ffa4:	0802b261 	.word	0x0802b261
 800ffa8:	0802b272 	.word	0x0802b272

0800ffac <__retarget_lock_acquire_recursive>:
 800ffac:	4770      	bx	lr

0800ffae <__retarget_lock_release_recursive>:
 800ffae:	4770      	bx	lr

0800ffb0 <_realloc_r>:
 800ffb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb2:	4607      	mov	r7, r0
 800ffb4:	4614      	mov	r4, r2
 800ffb6:	460e      	mov	r6, r1
 800ffb8:	b921      	cbnz	r1, 800ffc4 <_realloc_r+0x14>
 800ffba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ffbe:	4611      	mov	r1, r2
 800ffc0:	f7ff bc22 	b.w	800f808 <_malloc_r>
 800ffc4:	b922      	cbnz	r2, 800ffd0 <_realloc_r+0x20>
 800ffc6:	f7ff fbcf 	bl	800f768 <_free_r>
 800ffca:	4625      	mov	r5, r4
 800ffcc:	4628      	mov	r0, r5
 800ffce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffd0:	f000 f814 	bl	800fffc <_malloc_usable_size_r>
 800ffd4:	42a0      	cmp	r0, r4
 800ffd6:	d20f      	bcs.n	800fff8 <_realloc_r+0x48>
 800ffd8:	4621      	mov	r1, r4
 800ffda:	4638      	mov	r0, r7
 800ffdc:	f7ff fc14 	bl	800f808 <_malloc_r>
 800ffe0:	4605      	mov	r5, r0
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d0f2      	beq.n	800ffcc <_realloc_r+0x1c>
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	4622      	mov	r2, r4
 800ffea:	f7ff fb7d 	bl	800f6e8 <memcpy>
 800ffee:	4631      	mov	r1, r6
 800fff0:	4638      	mov	r0, r7
 800fff2:	f7ff fbb9 	bl	800f768 <_free_r>
 800fff6:	e7e9      	b.n	800ffcc <_realloc_r+0x1c>
 800fff8:	4635      	mov	r5, r6
 800fffa:	e7e7      	b.n	800ffcc <_realloc_r+0x1c>

0800fffc <_malloc_usable_size_r>:
 800fffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010000:	1f18      	subs	r0, r3, #4
 8010002:	2b00      	cmp	r3, #0
 8010004:	bfbc      	itt	lt
 8010006:	580b      	ldrlt	r3, [r1, r0]
 8010008:	18c0      	addlt	r0, r0, r3
 801000a:	4770      	bx	lr

0801000c <_init>:
 801000c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801000e:	bf00      	nop
 8010010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010012:	bc08      	pop	{r3}
 8010014:	469e      	mov	lr, r3
 8010016:	4770      	bx	lr

08010018 <_fini>:
 8010018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001a:	bf00      	nop
 801001c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801001e:	bc08      	pop	{r3}
 8010020:	469e      	mov	lr, r3
 8010022:	4770      	bx	lr
