
stm32f769-cpp-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b26c  08010078  08010078  00020078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b2e4  0802b2e4  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  0802b2e4  0802b2e4  0003b2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b2ec  0802b2ec  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b2ec  0802b2ec  0003b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b2f0  0802b2f0  0003b2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0802b2f4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000080  0802b374  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0802b374  000404a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f944  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007be3  00000000  00000000  0009f9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  000a75d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  000a8fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037d75  00000000  00000000  000aa6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000289c0  00000000  00000000  000e2415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bb61  00000000  00000000  0010add5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00296936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d8  00000000  00000000  0029698c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0801005c 	.word	0x0801005c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0801005c 	.word	0x0801005c

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 80006d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80006d6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000704 <_ZN4MFCC8MelScaleEf+0x3c>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	f00e f98d 	bl	800ea08 <logf>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000708 <_ZN4MFCC8MelScaleEf+0x40>
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 80006fa:	eeb0 0a67 	vmov.f32	s0, s15
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	442f0000 	.word	0x442f0000
 8000708:	448ce000 	.word	0x448ce000

0800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f00d fc29 	bl	800df78 <log>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eeb0 0b47 	vmov.f64	d0, d7
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800074a:	ed97 1b00 	vldr	d1, [r7]
 800074e:	eeb0 0b47 	vmov.f64	d0, d7
 8000752:	f00d fdd5 	bl	800e300 <pow>
 8000756:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800075a:	eeb0 0b47 	vmov.f64	d0, d7
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0000      	movs	r0, r0
	...

08000768 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8000768:	b580      	push	{r7, lr}
 800076a:	ed2d 8b02 	vpush	{d8}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffbd 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000792:	eeb0 8b40 	vmov.f64	d8, d0
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff ffb8 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800079c:	eeb0 6b40 	vmov.f64	d6, d0
 80007a0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80007a4:	eeb0 0b47 	vmov.f64	d0, d7
 80007a8:	f00e f86e 	bl	800e888 <ceil>
 80007ac:	eeb0 7b40 	vmov.f64	d7, d0
 80007b0:	eeb0 0b47 	vmov.f64	d0, d7
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ffbd 	bl	8000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d201      	bcs.n	80007da <_ZN4MFCCC1Eiii+0x72>
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	e001      	b.n	80007de <_ZN4MFCCC1Eiii+0x76>
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4618      	mov	r0, r3
 80007e0:	f00d fba6 	bl	800df30 <_Znaj>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d201      	bcs.n	80007fc <_ZN4MFCCC1Eiii+0x94>
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e001      	b.n	8000800 <_ZN4MFCCC1Eiii+0x98>
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4618      	mov	r0, r3
 8000802:	f00d fb95 	bl	800df30 <_Znaj>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 800080e:	20a0      	movs	r0, #160	; 0xa0
 8000810:	f00d fb8e 	bl	800df30 <_Znaj>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000822:	4293      	cmp	r3, r2
 8000824:	d201      	bcs.n	800082a <_ZN4MFCCC1Eiii+0xc2>
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	e001      	b.n	800082e <_ZN4MFCCC1Eiii+0xc6>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4618      	mov	r0, r3
 8000830:	f00d fb7e 	bl	800df30 <_Znaj>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	da26      	bge.n	8000896 <_ZN4MFCCC1Eiii+0x12e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000900 <_ZN4MFCCC1Eiii+0x198>
 800085a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000868:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000874:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000878:	ee36 7b47 	vsub.f64	d7, d6, d7
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < frame_len; i++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e7d4      	b.n	8000840 <_ZN4MFCCC1Eiii+0xd8>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8000896:	20a0      	movs	r0, #160	; 0xa0
 8000898:	f00d fb4a 	bl	800df30 <_Znaj>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 80008a4:	20a0      	movs	r0, #160	; 0xa0
 80008a6:	f00d fb43 	bl	800df30 <_Znaj>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f928 	bl	8000b08 <_ZN4MFCC16create_mel_fbankEv>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	2128      	movs	r1, #40	; 0x28
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 f890 	bl	80009e8 <_ZN4MFCC17create_dct_matrixEll>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80008ce:	2018      	movs	r0, #24
 80008d0:	f00d fb1d 	bl	800df0e <_Znwj>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f005 fd8d 	bl	8006408 <arm_rfft_fast_init_f32>

}
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	ecbd 8b02 	vpop	{d8}
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f3af 8000 	nop.w
 8000900:	54442d18 	.word	0x54442d18
 8000904:	401921fb 	.word	0x401921fb

08000908 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  delete []frame;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <_ZN4MFCCD1Ev+0x1a>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4618      	mov	r0, r3
 800091e:	f00d faf4 	bl	800df0a <_ZdaPv>
  delete [] buffer;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <_ZN4MFCCD1Ev+0x2c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4618      	mov	r0, r3
 8000930:	f00d faeb 	bl	800df0a <_ZdaPv>
  delete []mel_energies;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <_ZN4MFCCD1Ev+0x3e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4618      	mov	r0, r3
 8000942:	f00d fae2 	bl	800df0a <_ZdaPv>
  delete []window_func;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <_ZN4MFCCD1Ev+0x50>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4618      	mov	r0, r3
 8000954:	f00d fad9 	bl	800df0a <_ZdaPv>
  delete []fbank_filter_first;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <_ZN4MFCCD1Ev+0x62>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4618      	mov	r0, r3
 8000966:	f00d fad0 	bl	800df0a <_ZdaPv>
  delete []fbank_filter_last;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <_ZN4MFCCD1Ev+0x74>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f00d fac7 	bl	800df0a <_ZdaPv>
  delete []dct_matrix;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <_ZN4MFCCD1Ev+0x86>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4618      	mov	r0, r3
 800098a:	f00d fabe 	bl	800df0a <_ZdaPv>
  delete rfft;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <_ZN4MFCCD1Ev+0x96>
 8000996:	2118      	movs	r1, #24
 8000998:	4618      	mov	r0, r3
 800099a:	f00d fab4 	bl	800df06 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b27      	cmp	r3, #39	; 0x27
 80009a6:	dc0f      	bgt.n	80009c8 <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <_ZN4MFCCD1Ev+0xb8>
 80009b8:	2104      	movs	r1, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00d faa3 	bl	800df06 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7ec      	b.n	80009a2 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <_ZN4MFCCD1Ev+0xd0>
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00d fa97 	bl	800df06 <_ZdlPvj>
}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	0000      	movs	r0, r0
 80009e4:	0000      	movs	r0, r0
	...

080009e8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	ed2d 8b02 	vpush	{d8}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d201      	bcs.n	8000a0c <_ZN4MFCC17create_dct_matrixEll+0x24>
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	e001      	b.n	8000a10 <_ZN4MFCC17create_dct_matrixEll+0x28>
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00d fa8d 	bl	800df30 <_Znaj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	db09      	blt.n	8000a58 <_ZN4MFCC17create_dct_matrixEll+0x70>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8000a44:	ed97 0a06 	vldr	s0, [r7, #24]
 8000a48:	f00e f844 	bl	800ead4 <sqrtf>
 8000a4c:	eef0 7a40 	vmov.f32	s15, s0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000a56:	e004      	b.n	8000a62 <_ZN4MFCC17create_dct_matrixEll+0x7a>
    }
    else
    {
      *pOut = 0.0f;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a60:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	da41      	bge.n	8000af2 <_ZN4MFCC17create_dct_matrixEll+0x10a>
    for (n = 0; n < input_length; n++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3a      	ldr	r2, [r7, #32]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da37      	bge.n	8000aea <_ZN4MFCC17create_dct_matrixEll+0x102>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8000a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a7e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000b00 <_ZN4MFCC17create_dct_matrixEll+0x118>
 8000a90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	ee07 3a90 	vmov	s15, r3
 8000a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000aa2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000aa6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab8:	eeb0 0b47 	vmov.f64	d0, d7
 8000abc:	f00d ff5c 	bl	800e978 <cos>
 8000ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	fb02 f203 	mul.w	r2, r2, r3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < input_length; n++) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	e7c3      	b.n	8000a72 <_ZN4MFCC17create_dct_matrixEll+0x8a>
  for (k = 0; k < coefficient_count; k++) {
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
 8000af0:	e7b9      	b.n	8000a66 <_ZN4MFCC17create_dct_matrixEll+0x7e>
    }
  }
  return M;
 8000af2:	69fb      	ldr	r3, [r7, #28]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	ecbd 8b02 	vpop	{d8}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	54442d18 	.word	0x54442d18
 8000b04:	400921fb 	.word	0x400921fb

08000b08 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b095      	sub	sp, #84	; 0x54
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <_ZN4MFCC16create_mel_fbankEv+0x12>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000d78 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8000b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8000b36:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000b3a:	f7ff fdc5 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 8000b42:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8000d7c <_ZN4MFCC16create_mel_fbankEv+0x274>
 8000b46:	f7ff fdbf 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b4a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8000b4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b5a:	eddf 6a89 	vldr	s13, [pc, #548]	; 8000d80 <_ZN4MFCC16create_mel_fbankEv+0x278>
 8000b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d201      	bcs.n	8000b74 <_ZN4MFCC16create_mel_fbankEv+0x6c>
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e001      	b.n	8000b78 <_ZN4MFCC16create_mel_fbankEv+0x70>
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00d f9d9 	bl	800df30 <_Znaj>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 8000b82:	20a0      	movs	r0, #160	; 0xa0
 8000b84:	f00d f9d4 	bl	800df30 <_Znaj>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b92:	2b27      	cmp	r3, #39	; 0x27
 8000b94:	f300 80e4 	bgt.w	8000d60 <_ZN4MFCC16create_mel_fbankEv+0x258>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 8000b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd8:	3302      	adds	r3, #2
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	da65      	bge.n	8000cda <_ZN4MFCC16create_mel_fbankEv+0x1d2>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8000c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c20:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 8000c24:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c28:	f7ff fd4e 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 8000c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8000c3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	dd40      	ble.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
 8000c50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d537      	bpl.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
        float weight;
        if (mel <= center_mel) {
 8000c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	d810      	bhi.n	8000c96 <_ZN4MFCC16create_mel_fbankEv+0x18e>
          weight = (mel - left_mel) / (center_mel - left_mel);
 8000c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8000c94:	e00f      	b.n	8000cb6 <_ZN4MFCC16create_mel_fbankEv+0x1ae>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 8000c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	6a3a      	ldr	r2, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc0:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d101      	bne.n	8000cce <_ZN4MFCC16create_mel_fbankEv+0x1c6>
          first_index = i;
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 8000cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd8:	e795      	b.n	8000c06 <_ZN4MFCC16create_mel_fbankEv+0xfe>
      }
    }

    fbank_filter_first[bin] = first_index;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ce6:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf4:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8000cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d201      	bcs.n	8000d0a <_ZN4MFCC16create_mel_fbankEv+0x202>
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	e001      	b.n	8000d0e <_ZN4MFCC16create_mel_fbankEv+0x206>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	69f9      	ldr	r1, [r7, #28]
 8000d14:	188c      	adds	r4, r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00d f90a 	bl	800df30 <_Znaj>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 8000d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dc13      	bgt.n	8000d58 <_ZN4MFCC16create_mel_fbankEv+0x250>
      mel_fbank[bin][j++] = this_bin[i];
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	6a3a      	ldr	r2, [r7, #32]
 8000d36:	441a      	add	r2, r3
 8000d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	69f9      	ldr	r1, [r7, #28]
 8000d3e:	440b      	add	r3, r1
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d44:	1c58      	adds	r0, r3, #1
 8000d46:	63b8      	str	r0, [r7, #56]	; 0x38
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 8000d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d52:	3301      	adds	r3, #1
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d56:	e7e7      	b.n	8000d28 <_ZN4MFCC16create_mel_fbankEv+0x220>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d5e:	e717      	b.n	8000b90 <_ZN4MFCC16create_mel_fbankEv+0x88>
    }
  }
  delete []this_bin;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <_ZN4MFCC16create_mel_fbankEv+0x264>
 8000d66:	6a38      	ldr	r0, [r7, #32]
 8000d68:	f00d f8cf 	bl	800df0a <_ZdaPv>
  return mel_fbank;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3754      	adds	r7, #84	; 0x54
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	467a0000 	.word	0x467a0000
 8000d7c:	457a0000 	.word	0x457a0000
 8000d80:	42240000 	.word	0x42240000

08000d84 <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b095      	sub	sp, #84	; 0x54
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da18      	bge.n	8000dd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 8000d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001074 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dce:	e7e1      	b.n	8000d94 <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18d0      	adds	r0, r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	461a      	mov	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00e fccc 	bl	800f788 <memset>

  for (i = 0; i < frame_len; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	da1a      	bge.n	8000e34 <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	3301      	adds	r3, #1
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e32:	e7df      	b.n	8000df4 <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	2300      	movs	r3, #0
 8000e42:	f005 fab3 	bl	80063ac <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da00      	bge.n	8000e50 <_ZN4MFCC12mfcc_computeEPKsPa+0xcc>
 8000e4e:	3301      	adds	r3, #1
 8000e50:	105b      	asrs	r3, r3, #1
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	3304      	adds	r3, #4
 8000e72:	ed93 7a00 	vldr	s14, [r3]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 8000e88:	2301      	movs	r3, #1
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da23      	bge.n	8000edc <_ZN4MFCC12mfcc_computeEPKsPa+0x158>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eda:	e7d7      	b.n	8000e8c <_ZN4MFCC12mfcc_computeEPKsPa+0x108>
  }
  buffer[0] = first_energy;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ee2:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef0:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef8:	2b27      	cmp	r3, #39	; 0x27
 8000efa:	dc6d      	bgt.n	8000fd8 <_ZN4MFCC12mfcc_computeEPKsPa+0x254>
    j = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dc3a      	bgt.n	8000fa4 <_ZN4MFCC12mfcc_computeEPKsPa+0x220>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8000f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	db09      	blt.n	8000f64 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e0>
      *pOut = sqrtf(in);
 8000f50:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f54:	f00d fdbe 	bl	800ead4 <sqrtf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000f62:	e004      	b.n	8000f6e <_ZN4MFCC12mfcc_computeEPKsPa+0x1ea>
      *pOut = 0.0f;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f6c:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 8000f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa2:	e7c0      	b.n	8000f26 <_ZN4MFCC12mfcc_computeEPKsPa+0x1a2>
    }
    mel_energies[bin] = mel_energy;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 8000fb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d107      	bne.n	8000fd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x24c>
      mel_energies[bin] = FLT_MIN;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fce:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fd6:	e78e      	b.n	8000ef6 <_ZN4MFCC12mfcc_computeEPKsPa+0x172>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	2b27      	cmp	r3, #39	; 0x27
 8000fe0:	dc17      	bgt.n	8001012 <_ZN4MFCC12mfcc_computeEPKsPa+0x28e>
    mel_energies[bin] = logf(mel_energies[bin]);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18d4      	adds	r4, r2, r3
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f00d fd03 	bl	800ea08 <logf>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 800100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100c:	3301      	adds	r3, #1
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
 8001010:	e7e4      	b.n	8000fdc <_ZN4MFCC12mfcc_computeEPKsPa+0x258>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101c:	429a      	cmp	r2, r3
 800101e:	da72      	bge.n	8001106 <_ZN4MFCC12mfcc_computeEPKsPa+0x382>
    float sum = 0.0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b27      	cmp	r3, #39	; 0x27
 800102e:	dc27      	bgt.n	8001080 <_ZN4MFCC12mfcc_computeEPKsPa+0x2fc>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	461a      	mov	r2, r3
 8001040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106c:	3301      	adds	r3, #1
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001070:	e7db      	b.n	800102a <_ZN4MFCC12mfcc_computeEPKsPa+0x2a6>
 8001072:	bf00      	nop
 8001074:	47000000 	.word	0x47000000
 8001078:	42fe0000 	.word	0x42fe0000
 800107c:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 800109e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80010a2:	f7ff fb01 	bl	80006a8 <_ZSt5roundf>
 80010a6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80010aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010ae:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8001078 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	db05      	blt.n	80010c8 <_ZN4MFCC12mfcc_computeEPKsPa+0x344>
      mfcc_out[i] = 127;
 80010bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	227f      	movs	r2, #127	; 0x7f
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e01a      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else if(sum <= -128)
 80010c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010cc:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800107c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d805      	bhi.n	80010e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x362>
      mfcc_out[i] = -128;
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else
      mfcc_out[i] = sum; 
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	edc7 7a00 	vstr	s15, [r7]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b252      	sxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 80010fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001100:	3301      	adds	r3, #1
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001104:	e787      	b.n	8001016 <_ZN4MFCC12mfcc_computeEPKsPa+0x292>
  }

}
 8001106:	bf00      	nop
 8001108:	3754      	adds	r7, #84	; 0x54
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop

08001110 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <_ZN2NNC1Ev+0x1c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	080159e8 	.word	0x080159e8

08001130 <_ZN6DS_CNNC1Ev>:
const q7_t DS_CNN::conv5_pw_wt[CONV5_OUT_CH*CONV4_OUT_CH]=CONV5_PW_WT;
const q7_t DS_CNN::conv5_pw_bias[CONV5_OUT_CH]=CONV5_PW_BIAS;
const q7_t DS_CNN::final_fc_wt[CONV5_OUT_CH*OUT_DIM]=FINAL_FC_WT;
const q7_t DS_CNN::final_fc_bias[OUT_DIM]=FINAL_FC_BIAS;

DS_CNN::DS_CNN()
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffe8 	bl	8001110 <_ZN2NNC1Ev>
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <_ZN6DS_CNNC1Ev+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8001146:	f44f 408f 	mov.w	r0, #18304	; 0x4780
 800114a:	f00c fef1 	bl	800df30 <_Znaj>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	61da      	str	r2, [r3, #28]
  buffer1 = scratch_pad;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  buffer2 = buffer1 + (CONV1_OUT_CH*CONV1_OUT_X*CONV1_OUT_Y);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  col_buffer = buffer2 + (CONV2_OUT_CH*CONV2_OUT_X*CONV2_OUT_Y);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	621a      	str	r2, [r3, #32]
  frame_len = FRAME_LEN;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f44f 7220 	mov.w	r2, #640	; 0x280
 800117c:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001184:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	220a      	movs	r2, #10
 800118a:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2231      	movs	r2, #49	; 0x31
 8001190:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	080159d4 	.word	0x080159d4

080011ac <_ZN6DS_CNND1Ev>:

DS_CNN::~DS_CNN()
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <_ZN6DS_CNND1Ev+0x30>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <_ZN6DS_CNND1Ev+0x1e>
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c fe9e 	bl	800df06 <_ZdlPvj>
DS_CNN::~DS_CNN()
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa29 	bl	8001624 <_ZN2NND1Ev>
}
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	080159d4 	.word	0x080159d4

080011e0 <_ZN6DS_CNND0Ev>:
DS_CNN::~DS_CNN()
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
}
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffdf 	bl	80011ac <_ZN6DS_CNND1Ev>
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f00c fe88 	bl	800df06 <_ZdlPvj>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN6DS_CNN6run_nnEPaS0_>:

void DS_CNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af10      	add	r7, sp, #64	; 0x40
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  //CONV1 : regular convolution
  arm_convolve_HWC_q7_basic_nonsquare(in_data, CONV1_IN_X, CONV1_IN_Y, 1, conv1_wt, CONV1_OUT_CH, CONV1_KX, CONV1_KY, CONV1_PX, CONV1_PY, CONV1_SX, CONV1_SY, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_X, CONV1_OUT_Y, (q15_t*)col_buffer, NULL);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6a12      	ldr	r2, [r2, #32]
 8001214:	2100      	movs	r1, #0
 8001216:	910f      	str	r1, [sp, #60]	; 0x3c
 8001218:	920e      	str	r2, [sp, #56]	; 0x38
 800121a:	2219      	movs	r2, #25
 800121c:	920d      	str	r2, [sp, #52]	; 0x34
 800121e:	2205      	movs	r2, #5
 8001220:	920c      	str	r2, [sp, #48]	; 0x30
 8001222:	930b      	str	r3, [sp, #44]	; 0x2c
 8001224:	2306      	movs	r3, #6
 8001226:	930a      	str	r3, [sp, #40]	; 0x28
 8001228:	2302      	movs	r3, #2
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <_ZN6DS_CNN6run_nnEPaS0_+0x2c0>)
 800122e:	9308      	str	r3, [sp, #32]
 8001230:	2302      	movs	r3, #2
 8001232:	9307      	str	r3, [sp, #28]
 8001234:	2302      	movs	r3, #2
 8001236:	9306      	str	r3, [sp, #24]
 8001238:	2304      	movs	r3, #4
 800123a:	9305      	str	r3, [sp, #20]
 800123c:	2301      	movs	r3, #1
 800123e:	9304      	str	r3, [sp, #16]
 8001240:	230a      	movs	r3, #10
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	2304      	movs	r3, #4
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <_ZN6DS_CNN6run_nnEPaS0_+0x2c4>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2231      	movs	r2, #49	; 0x31
 8001254:	210a      	movs	r1, #10
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f005 fbbe 	bl	80069d8 <arm_convolve_HWC_q7_basic_nonsquare>
  arm_relu_q7(buffer1,CONV1_OUT_X*CONV1_OUT_Y*CONV1_OUT_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001264:	4618      	mov	r0, r3
 8001266:	f005 f9b1 	bl	80065cc <arm_relu_q7>

  //CONV2 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV2_IN_X,CONV2_IN_Y,CONV1_OUT_CH,conv2_ds_wt,CONV1_OUT_CH,CONV2_DS_KX,CONV2_DS_KY,CONV2_DS_PX,CONV2_DS_PY,CONV2_DS_SX,CONV2_DS_SY,conv2_ds_bias,CONV2_DS_BIAS_LSHIFT,CONV2_DS_OUT_RSHIFT,buffer2,CONV2_OUT_X,CONV2_OUT_Y,(q15_t*)col_buffer, NULL);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6a12      	ldr	r2, [r2, #32]
 8001276:	2100      	movs	r1, #0
 8001278:	910f      	str	r1, [sp, #60]	; 0x3c
 800127a:	920e      	str	r2, [sp, #56]	; 0x38
 800127c:	2219      	movs	r2, #25
 800127e:	920d      	str	r2, [sp, #52]	; 0x34
 8001280:	2205      	movs	r2, #5
 8001282:	920c      	str	r2, [sp, #48]	; 0x30
 8001284:	930b      	str	r3, [sp, #44]	; 0x2c
 8001286:	2305      	movs	r3, #5
 8001288:	930a      	str	r3, [sp, #40]	; 0x28
 800128a:	2302      	movs	r3, #2
 800128c:	9309      	str	r3, [sp, #36]	; 0x24
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <_ZN6DS_CNN6run_nnEPaS0_+0x2c8>)
 8001290:	9308      	str	r3, [sp, #32]
 8001292:	2301      	movs	r3, #1
 8001294:	9307      	str	r3, [sp, #28]
 8001296:	2301      	movs	r3, #1
 8001298:	9306      	str	r3, [sp, #24]
 800129a:	2301      	movs	r3, #1
 800129c:	9305      	str	r3, [sp, #20]
 800129e:	2301      	movs	r3, #1
 80012a0:	9304      	str	r3, [sp, #16]
 80012a2:	2303      	movs	r3, #3
 80012a4:	9303      	str	r3, [sp, #12]
 80012a6:	2303      	movs	r3, #3
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b87      	ldr	r3, [pc, #540]	; (80014cc <_ZN6DS_CNN6run_nnEPaS0_+0x2cc>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	2219      	movs	r2, #25
 80012b6:	2105      	movs	r1, #5
 80012b8:	f005 fd86 	bl	8006dc8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 f981 	bl	80065cc <arm_relu_q7>

  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV2_OUT_X, CONV2_OUT_Y, CONV1_OUT_CH, conv2_pw_wt, CONV2_OUT_CH, 1, 1, 0, 0, 1, 1, conv2_pw_bias, CONV2_PW_BIAS_LSHIFT, CONV2_PW_OUT_RSHIFT, buffer1, CONV2_OUT_X, CONV2_OUT_Y, (q15_t*)col_buffer, NULL);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6a12      	ldr	r2, [r2, #32]
 80012d6:	2100      	movs	r1, #0
 80012d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80012da:	920e      	str	r2, [sp, #56]	; 0x38
 80012dc:	2219      	movs	r2, #25
 80012de:	920d      	str	r2, [sp, #52]	; 0x34
 80012e0:	2205      	movs	r2, #5
 80012e2:	920c      	str	r2, [sp, #48]	; 0x30
 80012e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80012e6:	2308      	movs	r3, #8
 80012e8:	930a      	str	r3, [sp, #40]	; 0x28
 80012ea:	2304      	movs	r3, #4
 80012ec:	9309      	str	r3, [sp, #36]	; 0x24
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <_ZN6DS_CNN6run_nnEPaS0_+0x2d0>)
 80012f0:	9308      	str	r3, [sp, #32]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9307      	str	r3, [sp, #28]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9306      	str	r3, [sp, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9305      	str	r3, [sp, #20]
 80012fe:	2300      	movs	r3, #0
 8001300:	9304      	str	r3, [sp, #16]
 8001302:	2301      	movs	r3, #1
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	2301      	movs	r3, #1
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <_ZN6DS_CNN6run_nnEPaS0_+0x2d4>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	2219      	movs	r2, #25
 8001316:	2105      	movs	r1, #5
 8001318:	f005 f9b9 	bl	800668e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f951 	bl	80065cc <arm_relu_q7>

  //CONV3 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV3_IN_X,CONV3_IN_Y,CONV2_OUT_CH,conv3_ds_wt,CONV2_OUT_CH,CONV3_DS_KX,CONV3_DS_KY,CONV3_DS_PX,CONV3_DS_PY,CONV3_DS_SX,CONV3_DS_SY,conv3_ds_bias,CONV3_DS_BIAS_LSHIFT,CONV3_DS_OUT_RSHIFT,buffer2,CONV3_OUT_X,CONV3_OUT_Y,(q15_t*)col_buffer, NULL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6a12      	ldr	r2, [r2, #32]
 8001336:	2100      	movs	r1, #0
 8001338:	910f      	str	r1, [sp, #60]	; 0x3c
 800133a:	920e      	str	r2, [sp, #56]	; 0x38
 800133c:	2219      	movs	r2, #25
 800133e:	920d      	str	r2, [sp, #52]	; 0x34
 8001340:	2205      	movs	r2, #5
 8001342:	920c      	str	r2, [sp, #48]	; 0x30
 8001344:	930b      	str	r3, [sp, #44]	; 0x2c
 8001346:	2304      	movs	r3, #4
 8001348:	930a      	str	r3, [sp, #40]	; 0x28
 800134a:	2302      	movs	r3, #2
 800134c:	9309      	str	r3, [sp, #36]	; 0x24
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <_ZN6DS_CNN6run_nnEPaS0_+0x2d8>)
 8001350:	9308      	str	r3, [sp, #32]
 8001352:	2301      	movs	r3, #1
 8001354:	9307      	str	r3, [sp, #28]
 8001356:	2301      	movs	r3, #1
 8001358:	9306      	str	r3, [sp, #24]
 800135a:	2301      	movs	r3, #1
 800135c:	9305      	str	r3, [sp, #20]
 800135e:	2301      	movs	r3, #1
 8001360:	9304      	str	r3, [sp, #16]
 8001362:	2303      	movs	r3, #3
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	2303      	movs	r3, #3
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <_ZN6DS_CNN6run_nnEPaS0_+0x2dc>)
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2340      	movs	r3, #64	; 0x40
 8001374:	2219      	movs	r2, #25
 8001376:	2105      	movs	r1, #5
 8001378:	f005 fd26 	bl	8006dc8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001384:	4618      	mov	r0, r3
 8001386:	f005 f921 	bl	80065cc <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV3_OUT_X, CONV3_OUT_Y, CONV2_OUT_CH, conv3_pw_wt, CONV3_OUT_CH, 1, 1, 0, 0, 1, 1, conv3_pw_bias, CONV3_PW_BIAS_LSHIFT, CONV3_PW_OUT_RSHIFT, buffer1, CONV3_OUT_X, CONV3_OUT_Y, (q15_t*)col_buffer, NULL);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	6a12      	ldr	r2, [r2, #32]
 8001396:	2100      	movs	r1, #0
 8001398:	910f      	str	r1, [sp, #60]	; 0x3c
 800139a:	920e      	str	r2, [sp, #56]	; 0x38
 800139c:	2219      	movs	r2, #25
 800139e:	920d      	str	r2, [sp, #52]	; 0x34
 80013a0:	2205      	movs	r2, #5
 80013a2:	920c      	str	r2, [sp, #48]	; 0x30
 80013a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80013a6:	2308      	movs	r3, #8
 80013a8:	930a      	str	r3, [sp, #40]	; 0x28
 80013aa:	2305      	movs	r3, #5
 80013ac:	9309      	str	r3, [sp, #36]	; 0x24
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <_ZN6DS_CNN6run_nnEPaS0_+0x2e0>)
 80013b0:	9308      	str	r3, [sp, #32]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9307      	str	r3, [sp, #28]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9306      	str	r3, [sp, #24]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9305      	str	r3, [sp, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <_ZN6DS_CNN6run_nnEPaS0_+0x2e4>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	2219      	movs	r2, #25
 80013d6:	2105      	movs	r1, #5
 80013d8:	f005 f959 	bl	800668e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 f8f1 	bl	80065cc <arm_relu_q7>

  //CONV4 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV4_IN_X,CONV4_IN_Y,CONV3_OUT_CH,conv4_ds_wt,CONV3_OUT_CH,CONV4_DS_KX,CONV4_DS_KY,CONV4_DS_PX,CONV4_DS_PY,CONV4_DS_SX,CONV4_DS_SY,conv4_ds_bias,CONV4_DS_BIAS_LSHIFT,CONV4_DS_OUT_RSHIFT,buffer2,CONV4_OUT_X,CONV4_OUT_Y,(q15_t*)col_buffer, NULL);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	6a12      	ldr	r2, [r2, #32]
 80013f6:	2100      	movs	r1, #0
 80013f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80013fa:	920e      	str	r2, [sp, #56]	; 0x38
 80013fc:	2219      	movs	r2, #25
 80013fe:	920d      	str	r2, [sp, #52]	; 0x34
 8001400:	2205      	movs	r2, #5
 8001402:	920c      	str	r2, [sp, #48]	; 0x30
 8001404:	930b      	str	r3, [sp, #44]	; 0x2c
 8001406:	2305      	movs	r3, #5
 8001408:	930a      	str	r3, [sp, #40]	; 0x28
 800140a:	2303      	movs	r3, #3
 800140c:	9309      	str	r3, [sp, #36]	; 0x24
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <_ZN6DS_CNN6run_nnEPaS0_+0x2e8>)
 8001410:	9308      	str	r3, [sp, #32]
 8001412:	2301      	movs	r3, #1
 8001414:	9307      	str	r3, [sp, #28]
 8001416:	2301      	movs	r3, #1
 8001418:	9306      	str	r3, [sp, #24]
 800141a:	2301      	movs	r3, #1
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	2301      	movs	r3, #1
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	2303      	movs	r3, #3
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	2303      	movs	r3, #3
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2340      	movs	r3, #64	; 0x40
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <_ZN6DS_CNN6run_nnEPaS0_+0x2ec>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	2219      	movs	r2, #25
 8001436:	2105      	movs	r1, #5
 8001438:	f005 fcc6 	bl	8006dc8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f8c1 	bl	80065cc <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV4_OUT_X, CONV4_OUT_Y, CONV3_OUT_CH, conv4_pw_wt, CONV4_OUT_CH, 1, 1, 0, 0, 1, 1, conv4_pw_bias, CONV4_PW_BIAS_LSHIFT, CONV4_PW_OUT_RSHIFT, buffer1, CONV4_OUT_X, CONV4_OUT_Y, (q15_t*)col_buffer, NULL);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6a12      	ldr	r2, [r2, #32]
 8001456:	2100      	movs	r1, #0
 8001458:	910f      	str	r1, [sp, #60]	; 0x3c
 800145a:	920e      	str	r2, [sp, #56]	; 0x38
 800145c:	2219      	movs	r2, #25
 800145e:	920d      	str	r2, [sp, #52]	; 0x34
 8001460:	2205      	movs	r2, #5
 8001462:	920c      	str	r2, [sp, #48]	; 0x30
 8001464:	930b      	str	r3, [sp, #44]	; 0x2c
 8001466:	2307      	movs	r3, #7
 8001468:	930a      	str	r3, [sp, #40]	; 0x28
 800146a:	2305      	movs	r3, #5
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <_ZN6DS_CNN6run_nnEPaS0_+0x2f0>)
 8001470:	9308      	str	r3, [sp, #32]
 8001472:	2301      	movs	r3, #1
 8001474:	9307      	str	r3, [sp, #28]
 8001476:	2301      	movs	r3, #1
 8001478:	9306      	str	r3, [sp, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	9305      	str	r3, [sp, #20]
 800147e:	2300      	movs	r3, #0
 8001480:	9304      	str	r3, [sp, #16]
 8001482:	2301      	movs	r3, #1
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	2301      	movs	r3, #1
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_ZN6DS_CNN6run_nnEPaS0_+0x2f4>)
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	2219      	movs	r2, #25
 8001496:	2105      	movs	r1, #5
 8001498:	f005 f8f9 	bl	800668e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 f891 	bl	80065cc <arm_relu_q7>

  //CONV5 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV5_IN_X,CONV5_IN_Y,CONV4_OUT_CH,conv5_ds_wt,CONV4_OUT_CH,CONV5_DS_KX,CONV5_DS_KY,CONV5_DS_PX,CONV5_DS_PY,CONV5_DS_SX,CONV5_DS_SY,conv5_ds_bias,CONV5_DS_BIAS_LSHIFT,CONV5_DS_OUT_RSHIFT,buffer2,CONV5_OUT_X,CONV5_OUT_Y,(q15_t*)col_buffer, NULL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	6a12      	ldr	r2, [r2, #32]
 80014b6:	2100      	movs	r1, #0
 80014b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80014ba:	920e      	str	r2, [sp, #56]	; 0x38
 80014bc:	2219      	movs	r2, #25
 80014be:	e01b      	b.n	80014f8 <_ZN6DS_CNN6run_nnEPaS0_+0x2f8>
 80014c0:	08010b80 	.word	0x08010b80
 80014c4:	08010180 	.word	0x08010180
 80014c8:	08010e00 	.word	0x08010e00
 80014cc:	08010bc0 	.word	0x08010bc0
 80014d0:	08011e40 	.word	0x08011e40
 80014d4:	08010e40 	.word	0x08010e40
 80014d8:	080120c0 	.word	0x080120c0
 80014dc:	08011e80 	.word	0x08011e80
 80014e0:	08013100 	.word	0x08013100
 80014e4:	08012100 	.word	0x08012100
 80014e8:	08013380 	.word	0x08013380
 80014ec:	08013140 	.word	0x08013140
 80014f0:	080143c0 	.word	0x080143c0
 80014f4:	080133c0 	.word	0x080133c0
 80014f8:	920d      	str	r2, [sp, #52]	; 0x34
 80014fa:	2205      	movs	r2, #5
 80014fc:	920c      	str	r2, [sp, #48]	; 0x30
 80014fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001500:	2305      	movs	r3, #5
 8001502:	930a      	str	r3, [sp, #40]	; 0x28
 8001504:	2303      	movs	r3, #3
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
 8001508:	4b40      	ldr	r3, [pc, #256]	; (800160c <_ZN6DS_CNN6run_nnEPaS0_+0x40c>)
 800150a:	9308      	str	r3, [sp, #32]
 800150c:	2301      	movs	r3, #1
 800150e:	9307      	str	r3, [sp, #28]
 8001510:	2301      	movs	r3, #1
 8001512:	9306      	str	r3, [sp, #24]
 8001514:	2301      	movs	r3, #1
 8001516:	9305      	str	r3, [sp, #20]
 8001518:	2301      	movs	r3, #1
 800151a:	9304      	str	r3, [sp, #16]
 800151c:	2303      	movs	r3, #3
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	2303      	movs	r3, #3
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2340      	movs	r3, #64	; 0x40
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <_ZN6DS_CNN6run_nnEPaS0_+0x410>)
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	2219      	movs	r2, #25
 8001530:	2105      	movs	r1, #5
 8001532:	f005 fc49 	bl	8006dc8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f844 	bl	80065cc <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV5_OUT_X, CONV5_OUT_Y, CONV4_OUT_CH, conv5_pw_wt, CONV5_OUT_CH, 1, 1, 0, 0, 1, 1, conv5_pw_bias, CONV5_PW_BIAS_LSHIFT, CONV5_PW_OUT_RSHIFT, buffer1, CONV5_OUT_X, CONV5_OUT_Y, (q15_t*)col_buffer, NULL);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6a12      	ldr	r2, [r2, #32]
 8001550:	2100      	movs	r1, #0
 8001552:	910f      	str	r1, [sp, #60]	; 0x3c
 8001554:	920e      	str	r2, [sp, #56]	; 0x38
 8001556:	2219      	movs	r2, #25
 8001558:	920d      	str	r2, [sp, #52]	; 0x34
 800155a:	2205      	movs	r2, #5
 800155c:	920c      	str	r2, [sp, #48]	; 0x30
 800155e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001560:	2308      	movs	r3, #8
 8001562:	930a      	str	r3, [sp, #40]	; 0x28
 8001564:	2305      	movs	r3, #5
 8001566:	9309      	str	r3, [sp, #36]	; 0x24
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <_ZN6DS_CNN6run_nnEPaS0_+0x414>)
 800156a:	9308      	str	r3, [sp, #32]
 800156c:	2301      	movs	r3, #1
 800156e:	9307      	str	r3, [sp, #28]
 8001570:	2301      	movs	r3, #1
 8001572:	9306      	str	r3, [sp, #24]
 8001574:	2300      	movs	r3, #0
 8001576:	9305      	str	r3, [sp, #20]
 8001578:	2300      	movs	r3, #0
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	2301      	movs	r3, #1
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	2301      	movs	r3, #1
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <_ZN6DS_CNN6run_nnEPaS0_+0x418>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	2219      	movs	r2, #25
 8001590:	2105      	movs	r1, #5
 8001592:	f005 f87c 	bl	800668e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f814 	bl	80065cc <arm_relu_q7>

  //Average pool
  arm_avepool_q7_HWC_nonsquare (buffer1,CONV5_OUT_X,CONV5_OUT_Y,CONV5_OUT_CH,CONV5_OUT_X,CONV5_OUT_Y,0,0,1,1,1,1,NULL,buffer2, 2);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2202      	movs	r2, #2
 80015ae:	920a      	str	r2, [sp, #40]	; 0x28
 80015b0:	9309      	str	r3, [sp, #36]	; 0x24
 80015b2:	2300      	movs	r3, #0
 80015b4:	9308      	str	r3, [sp, #32]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9307      	str	r3, [sp, #28]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9306      	str	r3, [sp, #24]
 80015be:	2301      	movs	r3, #1
 80015c0:	9305      	str	r3, [sp, #20]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9303      	str	r3, [sp, #12]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2319      	movs	r3, #25
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2305      	movs	r3, #5
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	2219      	movs	r2, #25
 80015da:	2105      	movs	r1, #5
 80015dc:	f000 f832 	bl	8001644 <arm_avepool_q7_HWC_nonsquare>

  arm_fully_connected_q7(buffer2, final_fc_wt, CONV5_OUT_CH, OUT_DIM, FINAL_FC_BIAS_LSHIFT, FINAL_FC_OUT_RSHIFT, final_fc_bias, out_data, (q15_t*)col_buffer);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	9303      	str	r3, [sp, #12]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <_ZN6DS_CNN6run_nnEPaS0_+0x41c>)
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2307      	movs	r3, #7
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	2302      	movs	r3, #2
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	230c      	movs	r3, #12
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <_ZN6DS_CNN6run_nnEPaS0_+0x420>)
 8001600:	f007 f8c6 	bl	8008790 <arm_fully_connected_q7>

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08014640 	.word	0x08014640
 8001610:	08014400 	.word	0x08014400
 8001614:	08015680 	.word	0x08015680
 8001618:	08014680 	.word	0x08014680
 800161c:	080159c0 	.word	0x080159c0
 8001620:	080156c0 	.word	0x080156c0

08001624 <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "ML-KWS-for-MCU/NN/nn.h"

NN::~NN() {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <_ZN2NND1Ev+0x1c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	080159e8 	.word	0x080159e8

08001644 <arm_avepool_q7_HWC_nonsquare>:
        const uint16_t dim_im_out_x,  // output image dimension
        const uint16_t dim_im_out_y,  // output image dimension
        q7_t * bufferA,               // a buffer for local storage
        q7_t * Im_out,                // output feature
        const uint16_t out_lshift)    // output left shift (scaling)
{
 8001644:	b4b0      	push	{r4, r5, r7}
 8001646:	b08b      	sub	sp, #44	; 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	460b      	mov	r3, r1
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	80fb      	strh	r3, [r7, #6]
  int16_t i_ch_in, i_x, i_y;
  int16_t k_x, k_y;
  
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 800165e:	2300      	movs	r3, #0
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001662:	e0b2      	b.n	80017ca <arm_avepool_q7_HWC_nonsquare+0x186>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 8001664:	2300      	movs	r3, #0
 8001666:	847b      	strh	r3, [r7, #34]	; 0x22
 8001668:	e0a2      	b.n	80017b0 <arm_avepool_q7_HWC_nonsquare+0x16c>
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800166a:	2300      	movs	r3, #0
 800166c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800166e:	e092      	b.n	8001796 <arm_avepool_q7_HWC_nonsquare+0x152>
        int sum = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
        int count = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 8001678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800167a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800167e:	fb12 f303 	smulbb	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	83fb      	strh	r3, [r7, #30]
 800168e:	e052      	b.n	8001736 <arm_avepool_q7_HWC_nonsquare+0xf2>
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001692:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001696:	fb12 f303 	smulbb	r3, r2, r3
 800169a:	b29a      	uxth	r2, r3
 800169c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	843b      	strh	r3, [r7, #32]
 80016a6:	e031      	b.n	800170c <arm_avepool_q7_HWC_nonsquare+0xc8>
            if (k_y >= 0 && k_x >= 0 && k_y<dim_im_in_y && k_x<dim_im_in_x) {
 80016a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db27      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db23      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80016bc:	893b      	ldrh	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	da1e      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da19      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
              sum += Im_in[i_ch_in + ch_im_in*(k_x+k_y*dim_im_in_x)];
 80016cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80016d6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80016da:	897c      	ldrh	r4, [r7, #10]
 80016dc:	fb04 f101 	mul.w	r1, r4, r1
 80016e0:	4401      	add	r1, r0
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	f993 3000 	ldrsb.w	r3, [r3]
 80016f2:	461a      	mov	r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4413      	add	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
              count++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	843b      	strh	r3, [r7, #32]
 800170c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001710:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001714:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001718:	fb01 f103 	mul.w	r1, r1, r3
 800171c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001720:	1ac9      	subs	r1, r1, r3
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	440b      	add	r3, r1
 8001726:	429a      	cmp	r2, r3
 8001728:	dbbe      	blt.n	80016a8 <arm_avepool_q7_HWC_nonsquare+0x64>
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 800172a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	83fb      	strh	r3, [r7, #30]
 8001736:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800173a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800173e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8001742:	fb01 f103 	mul.w	r1, r1, r3
 8001746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174e:	440b      	add	r3, r1
 8001750:	429a      	cmp	r2, r3
 8001752:	db9d      	blt.n	8001690 <arm_avepool_q7_HWC_nonsquare+0x4c>
            }
          }
        }
        Im_out[i_ch_in+ch_im_in*(i_x+i_y*dim_im_out_x)] = sum*(0x1<<out_lshift)/count;
 8001754:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	409a      	lsls	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fb92 f5f3 	sdiv	r5, r2, r3
 8001762:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 800176c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001770:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8001774:	fb04 f101 	mul.w	r1, r4, r1
 8001778:	4401      	add	r1, r0
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001784:	4413      	add	r3, r2
 8001786:	b26a      	sxtb	r2, r5
 8001788:	701a      	strb	r2, [r3, #0]
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800178a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800178e:	b29b      	uxth	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001796:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800179a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800179e:	429a      	cmp	r2, r3
 80017a0:	f6ff af66 	blt.w	8001670 <arm_avepool_q7_HWC_nonsquare+0x2c>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 80017a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80017b0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80017b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f6ff af56 	blt.w	800166a <arm_avepool_q7_HWC_nonsquare+0x26>
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 80017be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f6ff af47 	blt.w	8001664 <arm_avepool_q7_HWC_nonsquare+0x20>
      }
    }
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr

080017e2 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>


AudioPlayer::AudioPlayer(SAI_HandleTypeDef *hsai)
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
:hsai(hsai)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	60da      	str	r2, [r3, #12]
{
	sai_stop_flag = 1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	721a      	strb	r2, [r3, #8]

}
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	605a      	str	r2, [r3, #4]
	played_samples = 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
	converted_samples = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]

//	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
	sai_buffer = new int16_t[PLAY_BUFFER_LENGTH];
 8001838:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800183c:	f00c fb78 	bl	800df30 <_Znaj>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	601a      	str	r2, [r3, #0]


	// initial full read
	update_sai_buffer(0, PLAY_BUFFER_LENGTH);
 8001848:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f828 	bl	80018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>

	// Start SAI in circular mode
	sai_stop_flag = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	721a      	strb	r2, [r3, #8]

	if (HAL_SAI_Transmit_DMA(hsai, (uint8_t*)sai_buffer, PLAY_BUFFER_LENGTH*sizeof(uint8_t)) == HAL_ERROR) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68d8      	ldr	r0, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001866:	4619      	mov	r1, r3
 8001868:	f00b f8b4 	bl	800c9d4 <HAL_SAI_Transmit_DMA>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <_ZN11AudioPlayer10play_audioEP8WaveData+0x64>
		Error_Handler();
 800187c:	f001 f820 	bl	80028c0 <Error_Handler>
	}

	while(!sai_stop_flag);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7a1b      	ldrb	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <_ZN11AudioPlayer10play_audioEP8WaveData+0x6e>
 8001888:	e7fa      	b.n	8001880 <_ZN11AudioPlayer10play_audioEP8WaveData+0x64>
	delete [] sai_buffer;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <_ZN11AudioPlayer10play_audioEP8WaveData+0x80>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f00c fb37 	bl	800df0a <_ZdaPv>
//	delete [] conversion_buffer;
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>:

// update buffer. Method called by sai callbacks functions.
void AudioPlayer::update_sai_buffer(uint32_t offset, uint32_t data_length) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 80018b8:	613b      	str	r3, [r7, #16]
	uint32_t read_length = data_length;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	617b      	str	r3, [r7, #20]
	if (read_length >= remaining_samples) {
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d301      	bcc.n	80018ca <_ZN11AudioPlayer17update_sai_bufferEmm+0x26>
		read_length = remaining_samples;
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	617b      	str	r3, [r7, #20]
	}
	if (read_length > 0) {
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00f      	beq.n	80018f0 <_ZN11AudioPlayer17update_sai_bufferEmm+0x4c>
		qspi_read((uint8_t*)sai_buffer+offset, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	18d0      	adds	r0, r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	18d1      	adds	r1, r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	461a      	mov	r2, r3
 80018ec:	f000 ffed 	bl	80028ca <_Z9qspi_readPhmm>
//		for (uint32_t i = 0; i < read_length; i++){
//			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_SAI_SCALE_FACTOR + WAVE_TO_SAI_BIAS);
	}
		converted_samples += read_length;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	441a      	add	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	615a      	str	r2, [r3, #20]
//		memcpy(sai_buffer + offset, conversion_buffer, read_length * SAI_DATA_WIDTH);
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	731a      	strb	r2, [r3, #12]
}
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
}
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 800196e:	2008      	movs	r0, #8
 8001970:	f00c facd 	bl	800df0e <_Znwj>
 8001974:	4603      	mov	r3, r0
 8001976:	461c      	mov	r4, r3
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff ffc2 	bl	8001904 <_ZN8WaveDataC1Em>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 8001984:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001988:	f00c fad2 	bl	800df30 <_Znaj>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 8001994:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001998:	f00c faca 	bl	800df30 <_Znaj>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6918      	ldr	r0, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019b6:	4619      	mov	r1, r3
 80019b8:	f007 fe0c 	bl	80095d4 <HAL_DFSDM_FilterRegularStart_DMA>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 80019cc:	f000 ff78 	bl	80028c0 <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <_ZN13AudioRecorder12record_audioEm+0xb8>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 80019d8:	f000 f9ac 	bl	8001d34 <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 80019dc:	f002 f932 	bl	8003c44 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7b1b      	ldrb	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d100      	bne.n	80019ea <_ZN13AudioRecorder12record_audioEm+0x86>
 80019e8:	e7fa      	b.n	80019e0 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <_ZN13AudioRecorder12record_audioEm+0x98>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00c fa87 	bl	800df0a <_ZdaPv>
	delete [] wave_buffer;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <_ZN13AudioRecorder12record_audioEm+0xaa>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fa7e 	bl	800df0a <_ZdaPv>
	return cur_data;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200003b0 	.word	0x200003b0

08001a20 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001a36:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d301      	bcc.n	8001a48 <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d213      	bcs.n	8001a7c <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1419      	asrs	r1, r3, #16
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	b20a      	sxth	r2, r1
 8001a72:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e7e7      	b.n	8001a4c <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6858      	ldr	r0, [r3, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	18d1      	adds	r1, r2, r3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	461a      	mov	r2, r3
 8001a96:	f000 ff31 	bl	80028fc <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <_ZN13AudioRecorder10print_dataEP8WaveData>:

// print recorded data in 16-bit signed format
void AudioRecorder::print_data(WaveData * data) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	// flash address pointers
	uint32_t printed_samples = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24

	// buffer
	int16_t *buffer = new int16_t[PRINT_BUFFER_LENGTH];
 8001ac2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001ac6:	f00c fa33 	bl	800df30 <_Znaj>
 8001aca:	4603      	mov	r3, r0
 8001acc:	61fb      	str	r3, [r7, #28]

	// navigate through all DFSDM audio memory on flash
	while (printed_samples < data->num_of_samples) {
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d23a      	bcs.n	8001b4e <_ZN13AudioRecorder10print_dataEP8WaveData+0x9a>
		uint32_t remaining_samples = data->num_of_samples - printed_samples;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	61bb      	str	r3, [r7, #24]
		uint32_t read_samples = remaining_samples < PRINT_BUFFER_LENGTH ? remaining_samples : PRINT_BUFFER_LENGTH;
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001ae8:	bf28      	it	cs
 8001aea:	f44f 53fa 	movcs.w	r3, #8000	; 0x1f40
 8001aee:	617b      	str	r3, [r7, #20]

		// read from flash
		qspi_read((uint8_t*)buffer, data->qspi_address + printed_samples*WAVE_DATA_WIDTH, read_samples*WAVE_DATA_WIDTH);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	18d1      	adds	r1, r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	461a      	mov	r2, r3
 8001b00:	69f8      	ldr	r0, [r7, #28]
 8001b02:	f000 fee2 	bl	80028ca <_Z9qspi_readPhmm>

		// print to terminal
		for (uint32_t i = 0; i < PRINT_BUFFER_LENGTH; i++) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001b10:	d218      	bcs.n	8001b44 <_ZN13AudioRecorder10print_dataEP8WaveData+0x90>
			char wav_str[10];
			sprintf(wav_str, "%d", (int)(buffer[i]));
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4910      	ldr	r1, [pc, #64]	; (8001b68 <_ZN13AudioRecorder10print_dataEP8WaveData+0xb4>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00d ff44 	bl	800f9b4 <siprintf>
			print(wav_str);
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fe99 	bl	8002868 <print>
			print(",");
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <_ZN13AudioRecorder10print_dataEP8WaveData+0xb8>)
 8001b38:	f000 fe96 	bl	8002868 <print>
		for (uint32_t i = 0; i < PRINT_BUFFER_LENGTH; i++) {
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	e7e2      	b.n	8001b0a <_ZN13AudioRecorder10print_dataEP8WaveData+0x56>
		}

		printed_samples += read_samples;
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	4413      	add	r3, r2
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
	while (printed_samples < data->num_of_samples) {
 8001b4c:	e7bf      	b.n	8001ace <_ZN13AudioRecorder10print_dataEP8WaveData+0x1a>
	}
	print("\r\n");
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <_ZN13AudioRecorder10print_dataEP8WaveData+0xbc>)
 8001b50:	f000 fe8a 	bl	8002868 <print>
	// free up memory
	delete [] buffer;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <_ZN13AudioRecorder10print_dataEP8WaveData+0xac>
 8001b5a:	69f8      	ldr	r0, [r7, #28]
 8001b5c:	f00c f9d5 	bl	800df0a <_ZdaPv>
}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08010078 	.word	0x08010078
 8001b6c:	0801007c 	.word	0x0801007c
 8001b70:	08010080 	.word	0x08010080

08001b74 <_Z13get_top_classPa>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(q7_t* nn_output) {
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8001b80:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001b84:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_Z13get_top_classPa+0x58>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d214      	bcs.n	8001bbe <_Z13get_top_classPa+0x4a>
		if (nn_output[i] > max_value) {
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	da07      	bge.n	8001bb6 <_Z13get_top_classPa+0x42>
			max_index = i;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e7e5      	b.n	8001b8a <_Z13get_top_classPa+0x16>
		}
	}
	return max_index;
 8001bbe:	697b      	ldr	r3, [r7, #20]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <_Z19average_predictionsPaS_mm>:

void average_predictions(q7_t *average_out, q7_t* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6178      	str	r0, [r7, #20]
 8001bd8:	6139      	str	r1, [r7, #16]
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
	q15_t *sum = new q15_t[num_output_classes];
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4a32      	ldr	r2, [pc, #200]	; (8001cac <_Z19average_predictionsPaS_mm+0xdc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d801      	bhi.n	8001bea <_Z19average_predictionsPaS_mm+0x1a>
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	e001      	b.n	8001bee <_Z19average_predictionsPaS_mm+0x1e>
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00c f99e 	bl	800df30 <_Znaj>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d248      	bcs.n	8001c96 <_Z19average_predictionsPaS_mm+0xc6>
		sum[i] = 0;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	6a3a      	ldr	r2, [r7, #32]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d21d      	bcs.n	8001c58 <_Z19average_predictionsPaS_mm+0x88>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	fb01 f103 	mul.w	r1, r1, r3
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	440b      	add	r3, r1
 8001c36:	6939      	ldr	r1, [r7, #16]
 8001c38:	440b      	add	r3, r1
 8001c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	b299      	uxth	r1, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b20a      	sxth	r2, r1
 8001c4e:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	3301      	adds	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	e7dd      	b.n	8001c14 <_Z19average_predictionsPaS_mm+0x44>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	4413      	add	r3, r2
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c88:	793a      	ldrb	r2, [r7, #4]
 8001c8a:	b252      	sxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3301      	adds	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	e7b2      	b.n	8001bfc <_Z19average_predictionsPaS_mm+0x2c>
	}
	delete [] sum;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <_Z19average_predictionsPaS_mm+0xd2>
 8001c9c:	69f8      	ldr	r0, [r7, #28]
 8001c9e:	f00c f934 	bl	800df0a <_ZdaPv>
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	3ffffffc 	.word	0x3ffffffc

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <__NVIC_EnableIRQ+0x38>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db12      	blt.n	8001d24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	490a      	ldr	r1, [pc, #40]	; (8001d30 <__NVIC_DisableIRQ+0x44>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	3320      	adds	r3, #32
 8001d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d18:	f3bf 8f4f 	dsb	sy
}
 8001d1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d1e:	f3bf 8f6f 	isb	sy
}
 8001d22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001d38:	f001 ff72 	bl	8003c20 <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001d3c:	201c      	movs	r0, #28
 8001d3e:	f7ff ffd5 	bl	8001cec <__NVIC_DisableIRQ>
//	NVIC_DisableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d42:	2101      	movs	r1, #1
 8001d44:	2000      	movs	r0, #0
 8001d46:	f008 fced 	bl	800a724 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001d4a:	201c      	movs	r0, #28
 8001d4c:	f7ff ffb0 	bl	8001cb0 <__NVIC_EnableIRQ>
//	NVIC_EnableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	HAL_ResumeTick();
 8001d50:	f001 ff78 	bl	8003c44 <HAL_ResumeTick>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b0a7      	sub	sp, #156	; 0x9c
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5e:	f007 f926 	bl	8008fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d62:	f000 fa17 	bl	8002194 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d66:	f000 fbf3 	bl	8002550 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d6a:	f000 fbcb 	bl	8002504 <_ZL11MX_DMA_Initv>
  MX_DFSDM1_Init();
 8001d6e:	f000 facb 	bl	8002308 <_ZL14MX_DFSDM1_Initv>
  MX_QUADSPI_Init();
 8001d72:	f000 fb29 	bl	80023c8 <_ZL15MX_QUADSPI_Initv>
  MX_USART1_UART_Init();
 8001d76:	f000 fb91 	bl	800249c <_ZL19MX_USART1_UART_Initv>
  MX_SAI1_Init();
 8001d7a:	f000 fb55 	bl	8002428 <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */

  qspi_init();
 8001d7e:	f000 fdd6 	bl	800292e <_Z9qspi_initv>
  main_state = SETUP;
 8001d82:	4bc1      	ldr	r3, [pc, #772]	; (8002088 <main+0x330>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"Silence", "Unknown","yes","no","up","down","left","right","on","off","stop","go"};
 8001d88:	4ac0      	ldr	r2, [pc, #768]	; (800208c <main+0x334>)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	2260      	movs	r2, #96	; 0x60
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00d fcd1 	bl	800f738 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(main_state) {
 8001d96:	4bbc      	ldr	r3, [pc, #752]	; (8002088 <main+0x330>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d8fa      	bhi.n	8001d96 <main+0x3e>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <main+0x50>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08002165 	.word	0x08002165
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001e0b 	.word	0x08001e0b
 8001db4:	08001e67 	.word	0x08001e67
 8001db8:	0800211d 	.word	0x0800211d
	case SETUP:
	{
		ITM_Port32(31) = 1;
 8001dbc:	4bb4      	ldr	r3, [pc, #720]	; (8002090 <main+0x338>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	48b3      	ldr	r0, [pc, #716]	; (8002094 <main+0x33c>)
 8001dc8:	f008 fc92 	bl	800a6f0 <HAL_GPIO_WritePin>

		// To indicate to user, don't do nothing when red light
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd2:	48b0      	ldr	r0, [pc, #704]	; (8002094 <main+0x33c>)
 8001dd4:	f008 fc8c 	bl	800a6f0 <HAL_GPIO_WritePin>
		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 8001dd8:	2106      	movs	r1, #6
 8001dda:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8001dde:	f000 fdb7 	bl	8002950 <_Z17qspi_erase_blocksmm>
		HAL_Delay(2000);
 8001de2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de6:	f007 f90f 	bl	8009008 <HAL_Delay>

		ITM_Port32(31) = 2;
 8001dea:	4ba9      	ldr	r3, [pc, #676]	; (8002090 <main+0x338>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
		print("Press the blue button and say a keyword\r\n");
 8001df0:	48a9      	ldr	r0, [pc, #676]	; (8002098 <main+0x340>)
 8001df2:	f000 fd39 	bl	8002868 <print>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfc:	48a5      	ldr	r0, [pc, #660]	; (8002094 <main+0x33c>)
 8001dfe:	f008 fc77 	bl	800a6f0 <HAL_GPIO_WritePin>
		main_state = READY;
 8001e02:	4ba1      	ldr	r3, [pc, #644]	; (8002088 <main+0x330>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
		break;
 8001e08:	e1b5      	b.n	8002176 <main+0x41e>
	}
	case RECORDING:
	{
		ITM_Port32(31) = 3;
 8001e0a:	4ba1      	ldr	r3, [pc, #644]	; (8002090 <main+0x338>)
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2120      	movs	r1, #32
 8001e14:	489f      	ldr	r0, [pc, #636]	; (8002094 <main+0x33c>)
 8001e16:	f008 fc6b 	bl	800a6f0 <HAL_GPIO_WritePin>
		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f00c f877 	bl	800df0e <_Znwj>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461c      	mov	r4, r3
 8001e24:	499d      	ldr	r1, [pc, #628]	; (800209c <main+0x344>)
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fd7e 	bl	8001928 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8001e2c:	4b9c      	ldr	r3, [pc, #624]	; (80020a0 <main+0x348>)
 8001e2e:	601c      	str	r4, [r3, #0]
		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8001e30:	4b9b      	ldr	r3, [pc, #620]	; (80020a0 <main+0x348>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fd93 	bl	8001964 <_ZN13AudioRecorder12record_audioEm>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <main+0x34c>)
 8001e42:	6013      	str	r3, [r2, #0]

		ITM_Port32(31) = 4;
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <main+0x338>)
 8001e46:	2204      	movs	r2, #4
 8001e48:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	4891      	ldr	r0, [pc, #580]	; (8002094 <main+0x33c>)
 8001e50:	f008 fc4e 	bl	800a6f0 <HAL_GPIO_WritePin>
//		main_state = NN;
		audio_recorder->~AudioRecorder();
 8001e54:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <main+0x348>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fd77 	bl	800194c <_ZN13AudioRecorderD1Ev>
		main_state = AUDIO_TEST;
 8001e5e:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <main+0x330>)
 8001e60:	2204      	movs	r2, #4
 8001e62:	701a      	strb	r2, [r3, #0]
		break;
 8001e64:	e187      	b.n	8002176 <main+0x41e>
	}
	case NN:
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6c:	4889      	ldr	r0, [pc, #548]	; (8002094 <main+0x33c>)
 8001e6e:	f008 fc3f 	bl	800a6f0 <HAL_GPIO_WritePin>

		// input buffer
		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 8001e72:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e76:	f00c f85b 	bl	800df30 <_Znaj>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// mfcc coefficients
		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 8001e80:	2101      	movs	r1, #1
 8001e82:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8001e86:	f00d fc15 	bl	800f6b4 <calloc>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// output buffer
		q7_t *predictions = (q7_t*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(q7_t));
 8001e8e:	2101      	movs	r1, #1
 8001e90:	206c      	movs	r0, #108	; 0x6c
 8001e92:	f00d fc0f 	bl	800f6b4 <calloc>
 8001e96:	4603      	mov	r3, r0
 8001e98:	67bb      	str	r3, [r7, #120]	; 0x78

		// average predictions
		q7_t *average = new q7_t[NUM_OUTPUT_CLASSES];
 8001e9a:	200c      	movs	r0, #12
 8001e9c:	f00c f848 	bl	800df30 <_Znaj>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	677b      	str	r3, [r7, #116]	; 0x74

		uint32_t pred_index;

		q7_t *mfcc_head;
		DS_CNN *ds_cnn = new DS_CNN();
 8001ea4:	202c      	movs	r0, #44	; 0x2c
 8001ea6:	f00c f832 	bl	800df0e <_Znwj>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461c      	mov	r4, r3
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff f93e 	bl	8001130 <_ZN6DS_CNNC1Ev>
 8001eb4:	673c      	str	r4, [r7, #112]	; 0x70
		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 8001eb6:	2034      	movs	r0, #52	; 0x34
 8001eb8:	f00c f829 	bl	800df0e <_Znwj>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001ec6:	210a      	movs	r1, #10
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7fe fc4d 	bl	8000768 <_ZN4MFCCC1Eiii>
 8001ece:	66fc      	str	r4, [r7, #108]	; 0x6c

		bool keyword_detected = false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		q7_t *average_window_head = predictions;
 8001ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	f200 80e8 	bhi.w	80020bc <main+0x364>
				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 8001eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ef0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001efc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001f00:	4619      	mov	r1, r3
 8001f02:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f06:	f000 fce0 	bl	80028ca <_Z9qspi_readPhmm>
				// move old data to the left
				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS * sizeof(q7_t));
 8001f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f0c:	3332      	adds	r3, #50	; 0x32
 8001f0e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001f12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 ff84 	bl	8003e22 <arm_copy_q7>
				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8001f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d81a      	bhi.n	8001f68 <main+0x210>
					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8001f32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	01db      	lsls	r3, r3, #7
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f44:	4413      	add	r3, r2
 8001f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f4e:	f7fe ff19 	bl	8000d84 <_ZN4MFCC12mfcc_computeEPKsPa>
					mfcc_head += NUM_MFCC_COEFFS;
 8001f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f56:	330a      	adds	r3, #10
 8001f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f60:	3301      	adds	r3, #1
 8001f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f66:	e7e0      	b.n	8001f2a <main+0x1d2>
				}
				q7_t* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8001f68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	461a      	mov	r2, r3
 8001f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f78:	4413      	add	r3, r2
 8001f7a:	66bb      	str	r3, [r7, #104]	; 0x68
				ds_cnn->run_nn(mfcc_out, nn_out);
 8001f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3308      	adds	r3, #8
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f88:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f8a:	4798      	blx	r3
//				arm_softmax_q7(nn_out,NUM_OUTPUT_CLASSES,nn_out);

				// get prediction for each recording window
				if (DEBUG_MODE) {
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <main+0x350>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d014      	beq.n	8001fbe <main+0x266>
					pred_index = get_top_class(nn_out);
 8001f94:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001f96:	f7ff fded 	bl	8001b74 <_Z13get_top_classPa>
 8001f9a:	6678      	str	r0, [r7, #100]	; 0x64
					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], nn_out[pred_index]);
 8001f9c:	1d3a      	adds	r2, r7, #4
 8001f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	18d1      	adds	r1, r2, r3
 8001fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fa8:	4413      	add	r3, r2
 8001faa:	f993 3000 	ldrsb.w	r3, [r3]
 8001fae:	460a      	mov	r2, r1
 8001fb0:	493e      	ldr	r1, [pc, #248]	; (80020ac <main+0x354>)
 8001fb2:	483f      	ldr	r0, [pc, #252]	; (80020b0 <main+0x358>)
 8001fb4:	f00d fcfe 	bl	800f9b4 <siprintf>
					print(uart_buffer);
 8001fb8:	483d      	ldr	r0, [pc, #244]	; (80020b0 <main+0x358>)
 8001fba:	f000 fc55 	bl	8002868 <print>
				}

				// increment average window pointer
				if (i >= AVERAGE_WINDOW_LENGTH) {
 8001fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d904      	bls.n	8001fd0 <main+0x278>
					average_window_head += NUM_OUTPUT_CLASSES;
 8001fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fca:	330c      	adds	r3, #12
 8001fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001fd8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fda:	f7ff fdf9 	bl	8001bd0 <_Z19average_predictionsPaS_mm>
				pred_index = get_top_class(average);
 8001fde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fe0:	f7ff fdc8 	bl	8001b74 <_Z13get_top_classPa>
 8001fe4:	6678      	str	r0, [r7, #100]	; 0x64

				if (DEBUG_MODE) {
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <main+0x350>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <main+0x2b8>
					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], average[pred_index]);
 8001fee:	1d3a      	adds	r2, r7, #4
 8001ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	18d1      	adds	r1, r2, r3
 8001ff6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8002000:	460a      	mov	r2, r1
 8002002:	492c      	ldr	r1, [pc, #176]	; (80020b4 <main+0x35c>)
 8002004:	482a      	ldr	r0, [pc, #168]	; (80020b0 <main+0x358>)
 8002006:	f00d fcd5 	bl	800f9b4 <siprintf>
					print(uart_buffer);
 800200a:	4829      	ldr	r0, [pc, #164]	; (80020b0 <main+0x358>)
 800200c:	f000 fc2c 	bl	8002868 <print>
				}

				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 8002010:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002014:	4413      	add	r3, r2
 8002016:	f993 3000 	ldrsb.w	r3, [r3]
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002022:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002070 <main+0x318>
 8002026:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800202a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002078 <main+0x320>
 800202e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002032:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002080 <main+0x328>
 8002036:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	dd0f      	ble.n	8002060 <main+0x308>
					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 8002040:	1d3a      	adds	r2, r7, #4
 8002042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	461a      	mov	r2, r3
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <main+0x360>)
 800204c:	4818      	ldr	r0, [pc, #96]	; (80020b0 <main+0x358>)
 800204e:	f00d fcb1 	bl	800f9b4 <siprintf>
					print(uart_buffer);
 8002052:	4817      	ldr	r0, [pc, #92]	; (80020b0 <main+0x358>)
 8002054:	f000 fc08 	bl	8002868 <print>
					keyword_detected = true;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
					break;
 800205e:	e02d      	b.n	80020bc <main+0x364>
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8002060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002064:	3301      	adds	r3, #1
 8002066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800206a:	e73a      	b.n	8001ee2 <main+0x18a>
 800206c:	f3af 8000 	nop.w
 8002070:	00000000 	.word	0x00000000
 8002074:	40600000 	.word	0x40600000
 8002078:	00000000 	.word	0x00000000
 800207c:	40590000 	.word	0x40590000
 8002080:	00000000 	.word	0x00000000
 8002084:	40418000 	.word	0x40418000
 8002088:	2000033c 	.word	0x2000033c
 800208c:	08010120 	.word	0x08010120
 8002090:	e000007c 	.word	0xe000007c
 8002094:	40022400 	.word	0x40022400
 8002098:	08010084 	.word	0x08010084
 800209c:	2000009c 	.word	0x2000009c
 80020a0:	200003a4 	.word	0x200003a4
 80020a4:	200003a8 	.word	0x200003a8
 80020a8:	20000004 	.word	0x20000004
 80020ac:	080100b0 	.word	0x080100b0
 80020b0:	20000340 	.word	0x20000340
 80020b4:	080100d0 	.word	0x080100d0
 80020b8:	080100ec 	.word	0x080100ec
				}
		}

		if (!keyword_detected) {
 80020bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80020c0:	f083 0301 	eor.w	r3, r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <main+0x378>
			print("No keyword detected.");
 80020ca:	482b      	ldr	r0, [pc, #172]	; (8002178 <main+0x420>)
 80020cc:	f000 fbcc 	bl	8002868 <print>
		}

		mfcc->~MFCC();
 80020d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020d2:	f7fe fc19 	bl	8000908 <_ZN4MFCCD1Ev>
		ds_cnn->~DS_CNN();
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80020de:	4798      	blx	r3
		delete [] mfcc_out;
 80020e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <main+0x394>
 80020e6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80020e8:	f00b ff0f 	bl	800df0a <_ZdaPv>
		delete [] predictions;
 80020ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <main+0x3a0>
 80020f2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80020f4:	f00b ff09 	bl	800df0a <_ZdaPv>
		delete [] average;
 80020f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <main+0x3ac>
 80020fe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002100:	f00b ff03 	bl	800df0a <_ZdaPv>
		delete [] audio_buffer;
 8002104:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <main+0x3bc>
 800210c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002110:	f00b fefb 	bl	800df0a <_ZdaPv>
		main_state = SETUP;
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <main+0x424>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
		break;
 800211a:	e02c      	b.n	8002176 <main+0x41e>
	}
	case AUDIO_TEST:
	{
		audio_player = new AudioPlayer(&hsai_BlockA1);
 800211c:	2018      	movs	r0, #24
 800211e:	f00b fef6 	bl	800df0e <_Znwj>
 8002122:	4603      	mov	r3, r0
 8002124:	461c      	mov	r4, r3
 8002126:	4916      	ldr	r1, [pc, #88]	; (8002180 <main+0x428>)
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff fb5a 	bl	80017e2 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <main+0x42c>)
 8002130:	601c      	str	r4, [r3, #0]
		audio_player->play_audio(wave_data);
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <main+0x42c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <main+0x430>)
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fb6d 	bl	800181c <_ZN11AudioPlayer10play_audioEP8WaveData>

		audio_recorder->print_data(wave_data);
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <main+0x434>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <main+0x430>)
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fcb1 	bl	8001ab4 <_ZN13AudioRecorder10print_dataEP8WaveData>
		main_state = NN;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <main+0x424>)
 8002154:	2203      	movs	r2, #3
 8002156:	701a      	strb	r2, [r3, #0]
//		main_state = SETUP;
		audio_player->~AudioPlayer();
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <main+0x42c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fb52 	bl	8001806 <_ZN11AudioPlayerD1Ev>

		break;
 8002162:	e008      	b.n	8002176 <main+0x41e>
	}
	case READY:
	{
		BLUE_BUTTON_WAIT();
 8002164:	f000 fa74 	bl	8002650 <BLUE_BUTTON_WAIT>
		if (LOW_POWER_MODE)
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <main+0x438>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <main+0x41c>
			enter_sleep_mode();
 8002170:	f7ff fde0 	bl	8001d34 <_Z16enter_sleep_modev>
		break;
 8002174:	bf00      	nop
	}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002176:	e60e      	b.n	8001d96 <main+0x3e>
 8002178:	08010108 	.word	0x08010108
 800217c:	2000033c 	.word	0x2000033c
 8002180:	200001d4 	.word	0x200001d4
 8002184:	200003ac 	.word	0x200003ac
 8002188:	200003a8 	.word	0x200003a8
 800218c:	200003a4 	.word	0x200003a4
 8002190:	200003b0 	.word	0x200003b0

08002194 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0b8      	sub	sp, #224	; 0xe0
 8002198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800219e:	2234      	movs	r2, #52	; 0x34
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f00d faf0 	bl	800f788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	2290      	movs	r2, #144	; 0x90
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00d fae1 	bl	800f788 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <_Z18SystemClock_Configv+0x168>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <_Z18SystemClock_Configv+0x168>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <_Z18SystemClock_Configv+0x168>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021de:	4b48      	ldr	r3, [pc, #288]	; (8002300 <_Z18SystemClock_Configv+0x16c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a47      	ldr	r2, [pc, #284]	; (8002300 <_Z18SystemClock_Configv+0x16c>)
 80021e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b45      	ldr	r3, [pc, #276]	; (8002300 <_Z18SystemClock_Configv+0x16c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f6:	2302      	movs	r3, #2
 80021f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002202:	2310      	movs	r3, #16
 8002204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002214:	2308      	movs	r3, #8
 8002216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800221a:	23d8      	movs	r3, #216	; 0xd8
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002220:	2302      	movs	r3, #2
 8002222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002226:	2304      	movs	r3, #4
 8002228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002232:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002236:	4618      	mov	r0, r3
 8002238:	f008 ff56 	bl	800b0e8 <HAL_RCC_OscConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800224c:	f000 fb38 	bl	80028c0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002250:	f008 fa8a 	bl	800a768 <HAL_PWREx_EnableOverDrive>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf14      	ite	ne
 800225a:	2301      	movne	r3, #1
 800225c:	2300      	moveq	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002264:	f000 fb2c 	bl	80028c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002268:	230f      	movs	r3, #15
 800226a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226e:	2302      	movs	r3, #2
 8002270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800227a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800227e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800228a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800228e:	2107      	movs	r1, #7
 8002290:	4618      	mov	r0, r3
 8002292:	f009 f9d7 	bl	800b644 <HAL_RCC_ClockConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 80022a6:	f000 fb0b 	bl	80028c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <_Z18SystemClock_Configv+0x170>)
 80022ac:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80022ae:	23c0      	movs	r3, #192	; 0xc0
 80022b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80022b6:	2306      	movs	r3, #6
 80022b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80022ba:	2301      	movs	r3, #1
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80022c6:	2300      	movs	r3, #0
 80022c8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022ca:	2300      	movs	r3, #0
 80022cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d4:	f107 0308 	add.w	r3, r7, #8
 80022d8:	4618      	mov	r0, r3
 80022da:	f009 fbbb 	bl	800ba54 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <_Z18SystemClock_Configv+0x15e>
  {
    Error_Handler();
 80022ee:	f000 fae7 	bl	80028c0 <Error_Handler>
  }
}
 80022f2:	bf00      	nop
 80022f4:	37e0      	adds	r7, #224	; 0xe0
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40007000 	.word	0x40007000
 8002304:	08080040 	.word	0x08080040

08002308 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800230c:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb0>)
 8002310:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 800231a:	2201      	movs	r2, #1
 800231c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002320:	2201      	movs	r2, #1
 8002322:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002326:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800232a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 800232e:	2264      	movs	r2, #100	; 0x64
 8002330:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002334:	2201      	movs	r2, #1
 8002336:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8002338:	481e      	ldr	r0, [pc, #120]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 800233a:	f007 f82b 	bl	8009394 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002340:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <_ZL14MX_DFSDM1_Initv+0xb8>)
 8002342:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = ENABLE;
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002346:	2201      	movs	r2, #1
 8002348:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 68;
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002352:	2244      	movs	r2, #68	; 0x44
 8002354:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002370:	2204      	movs	r2, #4
 8002372:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 800237c:	2201      	movs	r2, #1
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002382:	2200      	movs	r2, #0
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 800238c:	480b      	ldr	r0, [pc, #44]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb4>)
 800238e:	f006 ff41 	bl	8009214 <HAL_DFSDM_ChannelInit>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf14      	ite	ne
 8002398:	2301      	movne	r3, #1
 800239a:	2300      	moveq	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <_ZL14MX_DFSDM1_Initv+0x9e>
  {
    Error_Handler();
 80023a2:	f000 fa8d 	bl	80028c0 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON);
 80023a6:	2201      	movs	r2, #1
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <_ZL14MX_DFSDM1_Initv+0xbc>)
 80023aa:	4802      	ldr	r0, [pc, #8]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xac>)
 80023ac:	f007 f8cc 	bl	8009548 <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000009c 	.word	0x2000009c
 80023b8:	40017500 	.word	0x40017500
 80023bc:	200000f0 	.word	0x200000f0
 80023c0:	400174a0 	.word	0x400174a0
 80023c4:	00050020 	.word	0x00050020

080023c8 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <_ZL15MX_QUADSPI_Initv+0x5c>)
 80023d0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023da:	2201      	movs	r2, #1
 80023dc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x58>)
 8002404:	f008 fa00 	bl	800a808 <HAL_QSPI_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8002418:	f000 fa52 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000188 	.word	0x20000188
 8002424:	a0001000 	.word	0xa0001000

08002428 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <_ZL12MX_SAI1_Initv+0x70>)
 8002430:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 8002452:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002456:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 8002460:	2200      	movs	r2, #0
 8002462:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 8002466:	2200      	movs	r2, #0
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 800246c:	2200      	movs	r2, #0
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002470:	2302      	movs	r3, #2
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	4807      	ldr	r0, [pc, #28]	; (8002494 <_ZL12MX_SAI1_Initv+0x6c>)
 8002478:	f00a f886 	bl	800c588 <HAL_SAI_InitProtocol>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	bf14      	ite	ne
 8002482:	2301      	movne	r3, #1
 8002484:	2300      	moveq	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <_ZL12MX_SAI1_Initv+0x68>
  {
    Error_Handler();
 800248c:	f000 fa18 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200001d4 	.word	0x200001d4
 8002498:	40015804 	.word	0x40015804

0800249c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <_ZL19MX_USART1_UART_Initv+0x64>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024de:	4807      	ldr	r0, [pc, #28]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x60>)
 80024e0:	f00b f81e 	bl	800d520 <HAL_UART_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80024f4:	f000 f9e4 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200002b8 	.word	0x200002b8
 8002500:	40011000 	.word	0x40011000

08002504 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <_ZL11MX_DMA_Initv+0x48>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <_ZL11MX_DMA_Initv+0x48>)
 8002510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <_ZL11MX_DMA_Initv+0x48>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2038      	movs	r0, #56	; 0x38
 8002528:	f006 fe4a 	bl	80091c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800252c:	2038      	movs	r0, #56	; 0x38
 800252e:	f006 fe63 	bl	80091f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	2039      	movs	r0, #57	; 0x39
 8002538:	f006 fe42 	bl	80091c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800253c:	2039      	movs	r0, #57	; 0x39
 800253e:	f006 fe5b 	bl	80091f8 <HAL_NVIC_EnableIRQ>

}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002566:	4b37      	ldr	r3, [pc, #220]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a36      	ldr	r2, [pc, #216]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 800256c:	f043 0310 	orr.w	r3, r3, #16
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b34      	ldr	r3, [pc, #208]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a30      	ldr	r2, [pc, #192]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a24      	ldr	r2, [pc, #144]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a18      	ldr	r2, [pc, #96]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025e4:	f043 0308 	orr.w	r3, r3, #8
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <_ZL12MX_GPIO_Initv+0xf4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	f242 0120 	movw	r1, #8224	; 0x2020
 80025fc:	4812      	ldr	r0, [pc, #72]	; (8002648 <_ZL12MX_GPIO_Initv+0xf8>)
 80025fe:	f008 f877 	bl	800a6f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8002602:	f242 0320 	movw	r3, #8224	; 0x2020
 8002606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	480b      	ldr	r0, [pc, #44]	; (8002648 <_ZL12MX_GPIO_Initv+0xf8>)
 800261c:	f007 fd98 	bl	800a150 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002620:	2301      	movs	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002624:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4805      	ldr	r0, [pc, #20]	; (800264c <_ZL12MX_GPIO_Initv+0xfc>)
 8002636:	f007 fd8b 	bl	800a150 <HAL_GPIO_Init>
}
 800263a:	bf00      	nop
 800263c:	3730      	adds	r7, #48	; 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40022400 	.word	0x40022400
 800264c:	40020000 	.word	0x40020000

08002650 <BLUE_BUTTON_WAIT>:
//		}
//		break;
//	}
//}
void BLUE_BUTTON_WAIT()
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin)==GPIO_PIN_RESET);
 8002654:	2101      	movs	r1, #1
 8002656:	4816      	ldr	r0, [pc, #88]	; (80026b0 <BLUE_BUTTON_WAIT+0x60>)
 8002658:	f008 f832 	bl	800a6c0 <HAL_GPIO_ReadPin>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d000      	beq.n	800266e <BLUE_BUTTON_WAIT+0x1e>
 800266c:	e7f2      	b.n	8002654 <BLUE_BUTTON_WAIT+0x4>
	switch(main_state) {
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <BLUE_BUTTON_WAIT+0x64>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b05      	cmp	r3, #5
 8002676:	d819      	bhi.n	80026ac <BLUE_BUTTON_WAIT+0x5c>
 8002678:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <BLUE_BUTTON_WAIT+0x30>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	08002699 	.word	0x08002699
 8002684:	080026ab 	.word	0x080026ab
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026ab 	.word	0x080026ab
 8002690:	080026ab 	.word	0x080026ab
 8002694:	080026ab 	.word	0x080026ab
	case READY:
		main_state = RECORDING;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <BLUE_BUTTON_WAIT+0x64>)
 800269a:	2202      	movs	r2, #2
 800269c:	701a      	strb	r2, [r3, #0]
		break;
 800269e:	e005      	b.n	80026ac <BLUE_BUTTON_WAIT+0x5c>
	case RECORDING:
		audio_recorder->dfsdm_stop_flag = 1;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <BLUE_BUTTON_WAIT+0x68>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	731a      	strb	r2, [r3, #12]
		break;
 80026a8:	e000      	b.n	80026ac <BLUE_BUTTON_WAIT+0x5c>
	case SETUP:
	case MFCC_TEST:
	case AUDIO_TEST:
	case NN:
		break;
 80026aa:	bf00      	nop
	}
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40020000 	.word	0x40020000
 80026b4:	2000033c 	.word	0x2000033c
 80026b8:	200003a4 	.word	0x200003a4

080026bc <HAL_SAI_TxHalfCpltCallback>:

// SAI Circular DMA callback functions
void HAL_SAI_TxHalfCpltCallback (SAI_HandleTypeDef *hsai) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	if (hsai->Instance == SAI1_Block_A) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <HAL_SAI_TxHalfCpltCallback+0x6c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d127      	bne.n	800271e <HAL_SAI_TxHalfCpltCallback+0x62>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 80026dc:	611a      	str	r2, [r3, #16]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80026e8:	d311      	bcc.n	800270e <HAL_SAI_TxHalfCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f00a f8fe 	bl	800c8ec <HAL_SAI_DMAStop>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_SAI_TxHalfCpltCallback+0x48>
				Error_Handler();
 8002700:	f000 f8de 	bl	80028c0 <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_SAI_TxHalfCpltCallback+0x70>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	721a      	strb	r2, [r3, #8]
		}
		else {
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 800270c:	e007      	b.n	800271e <HAL_SAI_TxHalfCpltCallback+0x62>
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_SAI_TxHalfCpltCallback+0x70>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff f8c3 	bl	80018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40015804 	.word	0x40015804
 800272c:	200003ac 	.word	0x200003ac

08002730 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback (SAI_HandleTypeDef *hsai) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_SAI_TxCpltCallback+0x6c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_SAI_TxCpltCallback+0x6c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002746:	611a      	str	r2, [r3, #16]
	if (hsai->Instance == SAI1_Block_A) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_SAI_TxCpltCallback+0x70>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d120      	bne.n	8002794 <HAL_SAI_TxCpltCallback+0x64>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_SAI_TxCpltCallback+0x6c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800275c:	d311      	bcc.n	8002782 <HAL_SAI_TxCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f00a f8c4 	bl	800c8ec <HAL_SAI_DMAStop>
 8002764:	4603      	mov	r3, r0
 8002766:	2b01      	cmp	r3, #1
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_SAI_TxCpltCallback+0x48>
				Error_Handler();
 8002774:	f000 f8a4 	bl	80028c0 <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_SAI_TxCpltCallback+0x6c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	721a      	strb	r2, [r3, #8]
		}
		else {
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002780:	e008      	b.n	8002794 <HAL_SAI_TxCpltCallback+0x64>
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_SAI_TxCpltCallback+0x6c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800278a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f888 	bl	80018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200003ac 	.word	0x200003ac
 80027a0:	40015804 	.word	0x40015804

080027a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d11f      	bne.n	80027f4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f92e 	bl	8001a20 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027d0:	d310      	bcc.n	80027f4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2201      	movs	r2, #1
 80027d8:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f006 ff7e 	bl	80096dc <HAL_DFSDM_FilterRegularStop_DMA>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 80027f0:	f000 f866 	bl	80028c0 <Error_Handler>
			}
		}
	}
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	2000009c 	.word	0x2000009c
 8002800:	200003a4 	.word	0x200003a4

08002804 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d120      	bne.n	8002856 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800281c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff f8fd 	bl	8001a20 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002832:	d310      	bcc.n	8002856 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f006 ff4d 	bl	80096dc <HAL_DFSDM_FilterRegularStop_DMA>
 8002842:	4603      	mov	r3, r0
 8002844:	2b01      	cmp	r3, #1
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 8002852:	f000 f835 	bl	80028c0 <Error_Handler>
			}
		}

	}
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000009c 	.word	0x2000009c
 8002864:	200003a4 	.word	0x200003a4

08002868 <print>:

void print(const char* txt) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4808      	ldr	r0, [pc, #32]	; (8002894 <print+0x2c>)
 8002874:	f00d f8be 	bl	800f9f4 <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7fd fd41 	bl	8000300 <strlen>
 800287e:	4603      	mov	r3, r0
 8002880:	b29a      	uxth	r2, r3
 8002882:	230a      	movs	r3, #10
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <print+0x2c>)
 8002886:	4804      	ldr	r0, [pc, #16]	; (8002898 <print+0x30>)
 8002888:	f00a fe98 	bl	800d5bc <HAL_UART_Transmit>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000340 	.word	0x20000340
 8002898:	200002b8 	.word	0x200002b8

0800289c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028ae:	f006 fb8b 	bl	8008fc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40001c00 	.word	0x40001c00

080028c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028c4:	b672      	cpsid	i
}
 80028c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <Error_Handler+0x8>

080028ca <_Z9qspi_readPhmm>:
#include <stdint.h>
#include "stm32f769i_discovery_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8c4 	bl	8002a68 <BSP_QSPI_Read>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 80028f0:	f7ff ffe6 	bl	80028c0 <Error_Handler>
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f8ff 	bl	8002b10 <BSP_QSPI_Write>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 8002922:	f7ff ffcd 	bl	80028c0 <Error_Handler>
	}
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_Z9qspi_initv>:

void qspi_init() {
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 8002932:	f000 f829 	bl	8002988 <BSP_QSPI_Init>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}

0800293a <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f962 	bl	8002c0c <BSP_QSPI_Erase_Block>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d90b      	bls.n	800297e <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25L512_SUBSECTOR_SIZE);
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	031b      	lsls	r3, r3, #12
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ffe2 	bl	800293a <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	3301      	adds	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e7ef      	b.n	800295e <_Z17qspi_erase_blocksmm+0xe>
	}
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 8002990:	4a34      	ldr	r2, [pc, #208]	; (8002a64 <BSP_QSPI_Init+0xdc>)
 8002992:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002994:	4832      	ldr	r0, [pc, #200]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 8002996:	f007 ffb3 	bl	800a900 <HAL_QSPI_DeInit>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e059      	b.n	8002a58 <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80029a4:	2100      	movs	r1, #0
 80029a6:	482e      	ldr	r0, [pc, #184]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029a8:	f000 f974 	bl	8002c94 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 80029ac:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029b4:	2210      	movs	r2, #16
 80029b6:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029ba:	2210      	movs	r2, #16
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029c2:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029cc:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029da:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 80029dc:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029e2:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80029f6:	481a      	ldr	r0, [pc, #104]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 80029f8:	f007 ff06 	bl	800a808 <HAL_QSPI_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e028      	b.n	8002a58 <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002a06:	4816      	ldr	r0, [pc, #88]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 8002a08:	f000 fa06 	bl	8002e18 <QSPI_ResetMemory>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a12:	2304      	movs	r3, #4
 8002a14:	e020      	b.n	8002a58 <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8002a16:	4812      	ldr	r0, [pc, #72]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 8002a18:	f000 fc1d 	bl	8003256 <QSPI_EnterMemory_QPI>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a22:	2304      	movs	r3, #4
 8002a24:	e018      	b.n	8002a58 <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8002a26:	480e      	ldr	r0, [pc, #56]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 8002a28:	f000 fb1e 	bl	8003068 <QSPI_EnterFourBytesAddress>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 8002a32:	2304      	movs	r3, #4
 8002a34:	e010      	b.n	8002a58 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002a36:	480a      	ldr	r0, [pc, #40]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 8002a38:	f000 fb51 	bl	80030de <QSPI_DummyCyclesCfg>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 8002a42:	2304      	movs	r3, #4
 8002a44:	e008      	b.n	8002a58 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8002a46:	4806      	ldr	r0, [pc, #24]	; (8002a60 <BSP_QSPI_Init+0xd8>)
 8002a48:	f000 fc52 	bl	80032f0 <QSPI_OutDrvStrengthCfg>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 8002a52:	2304      	movs	r3, #4
 8002a54:	e000      	b.n	8002a58 <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200003f4 	.word	0x200003f4
 8002a64:	a0001000 	.word	0xa0001000

08002a68 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b092      	sub	sp, #72	; 0x48
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8002a7a:	23ec      	movs	r3, #236	; 0xec
 8002a7c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002a7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002a84:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a88:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002a92:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8002a98:	230a      	movs	r3, #10
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4815      	ldr	r0, [pc, #84]	; (8002b0c <BSP_QSPI_Read+0xa4>)
 8002ab8:	f007 ff46 	bl	800a948 <HAL_QSPI_Command>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e01d      	b.n	8002b02 <BSP_QSPI_Read+0x9a>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_1_CYCLE);
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <BSP_QSPI_Read+0xa4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <BSP_QSPI_Read+0xa4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ad4:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	480b      	ldr	r0, [pc, #44]	; (8002b0c <BSP_QSPI_Read+0xa4>)
 8002ade:	f008 f823 	bl	800ab28 <HAL_QSPI_Receive>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <BSP_QSPI_Read+0x84>
  {
    return QSPI_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e00a      	b.n	8002b02 <BSP_QSPI_Read+0x9a>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <BSP_QSPI_Read+0xa4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <BSP_QSPI_Read+0xa4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002afe:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3748      	adds	r7, #72	; 0x48
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200003f4 	.word	0x200003f4

08002b10 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b096      	sub	sp, #88	; 0x58
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25L512_PAGE_SIZE - (WriteAddr % MX25L512_PAGE_SIZE);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002b24:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d901      	bls.n	8002b32 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002b3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 8002b44:	2312      	movs	r3, #18
 8002b46:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002b48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002b4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b52:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002b58:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b66:	2300      	movs	r3, #0
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b70:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8002b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b74:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002b76:	4824      	ldr	r0, [pc, #144]	; (8002c08 <BSP_QSPI_Write+0xf8>)
 8002b78:	f000 fc76 	bl	8003468 <QSPI_WriteEnable>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e03b      	b.n	8002bfe <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4619      	mov	r1, r3
 8002b90:	481d      	ldr	r0, [pc, #116]	; (8002c08 <BSP_QSPI_Write+0xf8>)
 8002b92:	f007 fed9 	bl	800a948 <HAL_QSPI_Command>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e02e      	b.n	8002bfe <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	4818      	ldr	r0, [pc, #96]	; (8002c08 <BSP_QSPI_Write+0xf8>)
 8002ba8:	f007 ff2c 	bl	800aa04 <HAL_QSPI_Transmit>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e023      	b.n	8002bfe <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002bb6:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bba:	4813      	ldr	r0, [pc, #76]	; (8002c08 <BSP_QSPI_Write+0xf8>)
 8002bbc:	f000 fc9d 	bl	80034fa <QSPI_AutoPollingMemReady>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e019      	b.n	8002bfe <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002bca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bce:	4413      	add	r3, r2
 8002bd0:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25L512_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25L512_PAGE_SIZE;
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d203      	bcs.n	8002bee <BSP_QSPI_Write+0xde>
 8002be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	e001      	b.n	8002bf2 <BSP_QSPI_Write+0xe2>
 8002bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf2:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002bf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d3b8      	bcc.n	8002b6e <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3758      	adds	r7, #88	; 0x58
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200003f4 	.word	0x200003f4

08002c0c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b090      	sub	sp, #64	; 0x40
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002c14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c18:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 8002c1a:	2321      	movs	r3, #33	; 0x21
 8002c1c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002c24:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c28:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002c42:	2300      	movs	r3, #0
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002c46:	4812      	ldr	r0, [pc, #72]	; (8002c90 <BSP_QSPI_Erase_Block+0x84>)
 8002c48:	f000 fc0e 	bl	8003468 <QSPI_WriteEnable>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e017      	b.n	8002c86 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <BSP_QSPI_Erase_Block+0x84>)
 8002c62:	f007 fe71 	bl	800a948 <HAL_QSPI_Command>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e00a      	b.n	8002c86 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25L512_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002c70:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c74:	4806      	ldr	r0, [pc, #24]	; (8002c90 <BSP_QSPI_Erase_Block+0x84>)
 8002c76:	f000 fc40 	bl	80034fa <QSPI_AutoPollingMemReady>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3740      	adds	r7, #64	; 0x40
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200003f4 	.word	0x200003f4

08002c94 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6393      	str	r3, [r2, #56]	; 0x38
 8002caa:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002cb6:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4a52      	ldr	r2, [pc, #328]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002cc2:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a4f      	ldr	r2, [pc, #316]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cc8:	f023 0302 	bic.w	r3, r3, #2
 8002ccc:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a4c      	ldr	r2, [pc, #304]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002d2e:	4b35      	ldr	r3, [pc, #212]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d34:	f043 0310 	orr.w	r3, r3, #16
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002d46:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a2e      	ldr	r2, [pc, #184]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <BSP_QSPI_MspInit+0x170>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002d5e:	2340      	movs	r3, #64	; 0x40
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8002d62:	230a      	movs	r3, #10
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d76:	4619      	mov	r1, r3
 8002d78:	4823      	ldr	r0, [pc, #140]	; (8002e08 <BSP_QSPI_MspInit+0x174>)
 8002d7a:	f007 f9e9 	bl	800a150 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8002d82:	2309      	movs	r3, #9
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481d      	ldr	r0, [pc, #116]	; (8002e08 <BSP_QSPI_MspInit+0x174>)
 8002d92:	f007 f9dd 	bl	800a150 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8002d9c:	2309      	movs	r3, #9
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da4:	4619      	mov	r1, r3
 8002da6:	4819      	ldr	r0, [pc, #100]	; (8002e0c <BSP_QSPI_MspInit+0x178>)
 8002da8:	f007 f9d2 	bl	800a150 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8002db2:	2309      	movs	r3, #9
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4813      	ldr	r0, [pc, #76]	; (8002e0c <BSP_QSPI_MspInit+0x178>)
 8002dbe:	f007 f9c7 	bl	800a150 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 8002dc6:	2309      	movs	r3, #9
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480f      	ldr	r0, [pc, #60]	; (8002e10 <BSP_QSPI_MspInit+0x17c>)
 8002dd2:	f007 f9bd 	bl	800a150 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8002ddc:	2309      	movs	r3, #9
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	4619      	mov	r1, r3
 8002de6:	480b      	ldr	r0, [pc, #44]	; (8002e14 <BSP_QSPI_MspInit+0x180>)
 8002de8:	f007 f9b2 	bl	800a150 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	210f      	movs	r1, #15
 8002df0:	205c      	movs	r0, #92	; 0x5c
 8002df2:	f006 f9e5 	bl	80091c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002df6:	205c      	movs	r0, #92	; 0x5c
 8002df8:	f006 f9fe 	bl	80091f8 <HAL_NVIC_EnableIRQ>
}
 8002dfc:	bf00      	nop
 8002dfe:	3738      	adds	r7, #56	; 0x38
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40020c00 	.word	0x40020c00

08002e18 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b098      	sub	sp, #96	; 0x60
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e24:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002e26:	2366      	movs	r3, #102	; 0x66
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e42:	2300      	movs	r3, #0
 8002e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f007 fd79 	bl	800a948 <HAL_QSPI_Command>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0ff      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002e60:	2399      	movs	r3, #153	; 0x99
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f007 fd6a 	bl	800a948 <HAL_QSPI_Command>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0f0      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e82:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002e84:	2366      	movs	r3, #102	; 0x66
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f007 fd58 	bl	800a948 <HAL_QSPI_Command>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0de      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002ea2:	2399      	movs	r3, #153	; 0x99
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f007 fd49 	bl	800a948 <HAL_QSPI_Command>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cf      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8002ec0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec4:	f006 f8a0 	bl	8009008 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002ed8:	2310      	movs	r3, #16
 8002eda:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8002ee8:	2305      	movs	r3, #5
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8002eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ef0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ef2:	f107 0210 	add.w	r2, r7, #16
 8002ef6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f007 feaf 	bl	800ac62 <HAL_QSPI_AutoPolling>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0a8      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f12:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002f14:	2305      	movs	r3, #5
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f32:	2300      	movs	r3, #0
 8002f34:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f36:	2300      	movs	r3, #0
 8002f38:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4619      	mov	r1, r3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f007 fcff 	bl	800a948 <HAL_QSPI_Command>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e085      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f54:	f107 030f 	add.w	r3, r7, #15
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f007 fde2 	bl	800ab28 <HAL_QSPI_Receive>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e078      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f72:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002f74:	2306      	movs	r3, #6
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f90:	2300      	movs	r3, #0
 8002f92:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f007 fcd2 	bl	800a948 <HAL_QSPI_Command>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e058      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002fc8:	2305      	movs	r3, #5
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fd2:	f107 0210 	add.w	r2, r7, #16
 8002fd6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002fda:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f007 fe3f 	bl	800ac62 <HAL_QSPI_AutoPolling>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e038      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003004:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003012:	2300      	movs	r3, #0
 8003014:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003016:	2300      	movs	r3, #0
 8003018:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003020:	b2db      	uxtb	r3, r3
 8003022:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f007 fc8a 	bl	800a948 <HAL_QSPI_Command>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e010      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800303e:	f107 030f 	add.w	r3, r7, #15
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f007 fcdb 	bl	800aa04 <HAL_QSPI_Transmit>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e003      	b.n	8003060 <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8003058:	2028      	movs	r0, #40	; 0x28
 800305a:	f005 ffd5 	bl	8009008 <HAL_Delay>

  return QSPI_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3760      	adds	r7, #96	; 0x60
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b090      	sub	sp, #64	; 0x40
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003070:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003074:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003076:	23b7      	movs	r3, #183	; 0xb7
 8003078:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800307e:	2300      	movs	r3, #0
 8003080:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800308e:	2300      	movs	r3, #0
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003092:	2300      	movs	r3, #0
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9e6 	bl	8003468 <QSPI_WriteEnable>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e017      	b.n	80030d6 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4619      	mov	r1, r3
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f007 fc49 	bl	800a948 <HAL_QSPI_Command>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00a      	b.n	80030d6 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80030c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa18 	bl	80034fa <QSPI_AutoPollingMemReady>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3740      	adds	r7, #64	; 0x40
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b094      	sub	sp, #80	; 0x50
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80030e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80030ec:	2305      	movs	r3, #5
 80030ee:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80030f8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003102:	2301      	movs	r3, #1
 8003104:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800310a:	2300      	movs	r3, #0
 800310c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800310e:	2300      	movs	r3, #0
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003112:	f107 0310 	add.w	r3, r7, #16
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f007 fc13 	bl	800a948 <HAL_QSPI_Command>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e090      	b.n	800324e <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800312c:	f107 030c 	add.w	r3, r7, #12
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f007 fcf6 	bl	800ab28 <HAL_QSPI_Receive>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e083      	b.n	800324e <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003146:	f44f 7340 	mov.w	r3, #768	; 0x300
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 800314c:	2315      	movs	r3, #21
 800314e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003154:	2300      	movs	r3, #0
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003158:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800316a:	2300      	movs	r3, #0
 800316c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800316e:	2300      	movs	r3, #0
 8003170:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f007 fbe3 	bl	800a948 <HAL_QSPI_Command>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e060      	b.n	800324e <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	3301      	adds	r3, #1
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f007 fcc5 	bl	800ab28 <HAL_QSPI_Receive>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e052      	b.n	800324e <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f95d 	bl	8003468 <QSPI_WriteEnable>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e04a      	b.n	800324e <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80031b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80031be:	2301      	movs	r3, #1
 80031c0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80031ca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80031d4:	2302      	movs	r3, #2
 80031d6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80031dc:	2300      	movs	r3, #0
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80031e0:	2300      	movs	r3, #0
 80031e2:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80031e4:	7b7b      	ldrb	r3, [r7, #13]
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ec:	b25a      	sxtb	r2, r3
 80031ee:	23c0      	movs	r3, #192	; 0xc0
 80031f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80031fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fc:	fab3 f383 	clz	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	4619      	mov	r1, r3
 8003204:	2303      	movs	r3, #3
 8003206:	408b      	lsls	r3, r1
 8003208:	b25b      	sxtb	r3, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	b25b      	sxtb	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003212:	f107 0310 	add.w	r3, r7, #16
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f007 fb93 	bl	800a948 <HAL_QSPI_Command>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e010      	b.n	800324e <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f007 fbe4 	bl	800aa04 <HAL_QSPI_Transmit>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e003      	b.n	800324e <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8003246:	2028      	movs	r0, #40	; 0x28
 8003248:	f005 fede 	bl	8009008 <HAL_Delay>
  
  return QSPI_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3750      	adds	r7, #80	; 0x50
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b096      	sub	sp, #88	; 0x58
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 800325e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003262:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8003264:	2335      	movs	r3, #53	; 0x35
 8003266:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003268:	2300      	movs	r3, #0
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800326c:	2300      	movs	r3, #0
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003270:	2300      	movs	r3, #0
 8003272:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800327c:	2300      	movs	r3, #0
 800327e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003280:	2300      	movs	r3, #0
 8003282:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003284:	f107 0320 	add.w	r3, r7, #32
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f007 fb5a 	bl	800a948 <HAL_QSPI_Command>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e023      	b.n	80032e6 <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80032a2:	2341      	movs	r3, #65	; 0x41
 80032a4:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80032ae:	2310      	movs	r3, #16
 80032b0:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80032b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032b6:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80032b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032bc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80032be:	2305      	movs	r3, #5
 80032c0:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80032c2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032c8:	f107 0208 	add.w	r2, r7, #8
 80032cc:	f107 0120 	add.w	r1, r7, #32
 80032d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f007 fcc4 	bl	800ac62 <HAL_QSPI_AutoPolling>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3758      	adds	r7, #88	; 0x58
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b094      	sub	sp, #80	; 0x50
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80032f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80032fe:	2305      	movs	r3, #5
 8003300:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003302:	2300      	movs	r3, #0
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003306:	2300      	movs	r3, #0
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800330a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003314:	2301      	movs	r3, #1
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800331c:	2300      	movs	r3, #0
 800331e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003320:	2300      	movs	r3, #0
 8003322:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f007 fb0a 	bl	800a948 <HAL_QSPI_Command>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e08d      	b.n	800345a <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f007 fbed 	bl	800ab28 <HAL_QSPI_Receive>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e080      	b.n	800345a <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 800335e:	2315      	movs	r3, #21
 8003360:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003362:	2300      	movs	r3, #0
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800336a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	f241 3288 	movw	r2, #5000	; 0x1388
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f007 fada 	bl	800a948 <HAL_QSPI_Command>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e05d      	b.n	800345a <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	3301      	adds	r3, #1
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f007 fbbc 	bl	800ab28 <HAL_QSPI_Receive>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e04f      	b.n	800345a <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80033ba:	482a      	ldr	r0, [pc, #168]	; (8003464 <QSPI_OutDrvStrengthCfg+0x174>)
 80033bc:	f000 f854 	bl	8003468 <QSPI_WriteEnable>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e047      	b.n	800345a <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80033ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80033d8:	2300      	movs	r3, #0
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80033dc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80033e6:	2302      	movs	r3, #2
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033ee:	2300      	movs	r3, #0
 80033f0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033f2:	2300      	movs	r3, #0
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80033f6:	7b7b      	ldrb	r3, [r7, #13]
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	f023 0307 	bic.w	r3, r3, #7
 80033fe:	b25a      	sxtb	r2, r3
 8003400:	2307      	movs	r3, #7
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	4619      	mov	r1, r3
 8003416:	2306      	movs	r3, #6
 8003418:	408b      	lsls	r3, r1
 800341a:	b25b      	sxtb	r3, r3
 800341c:	4313      	orrs	r3, r2
 800341e:	b25b      	sxtb	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003424:	f107 0310 	add.w	r3, r7, #16
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f007 fa8a 	bl	800a948 <HAL_QSPI_Command>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e00d      	b.n	800345a <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800343e:	f107 030c 	add.w	r3, r7, #12
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f007 fadb 	bl	800aa04 <HAL_QSPI_Transmit>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3750      	adds	r7, #80	; 0x50
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200003f4 	.word	0x200003f4

08003468 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b096      	sub	sp, #88	; 0x58
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003474:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003476:	2306      	movs	r3, #6
 8003478:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800347e:	2300      	movs	r3, #0
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003482:	2300      	movs	r3, #0
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800348e:	2300      	movs	r3, #0
 8003490:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003492:	2300      	movs	r3, #0
 8003494:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003496:	f107 0320 	add.w	r3, r7, #32
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f007 fa51 	bl	800a948 <HAL_QSPI_Command>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e020      	b.n	80034f2 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 80034b0:	2302      	movs	r3, #2
 80034b2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 80034b4:	2302      	movs	r3, #2
 80034b6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80034bc:	2301      	movs	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80034c0:	2310      	movs	r3, #16
 80034c2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80034c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034c8:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80034ca:	2305      	movs	r3, #5
 80034cc:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80034ce:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80034d2:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034d4:	f107 0208 	add.w	r2, r7, #8
 80034d8:	f107 0120 	add.w	r1, r7, #32
 80034dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f007 fbbe 	bl	800ac62 <HAL_QSPI_AutoPolling>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3758      	adds	r7, #88	; 0x58
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b096      	sub	sp, #88	; 0x58
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003508:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800350a:	2305      	movs	r3, #5
 800350c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003512:	2300      	movs	r3, #0
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003516:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003520:	2300      	movs	r3, #0
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003524:	2300      	movs	r3, #0
 8003526:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003528:	2300      	movs	r3, #0
 800352a:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 8003530:	2301      	movs	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003538:	2301      	movs	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800353c:	2310      	movs	r3, #16
 800353e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003544:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003546:	f107 0208 	add.w	r2, r7, #8
 800354a:	f107 0120 	add.w	r1, r7, #32
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f007 fb86 	bl	800ac62 <HAL_QSPI_AutoPolling>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3758      	adds	r7, #88	; 0x58
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_MspInit+0x44>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <HAL_MspInit+0x44>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <HAL_MspInit+0x44>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_MspInit+0x44>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_MspInit+0x44>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_MspInit+0x44>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80035cc:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <HAL_DFSDM_FilterMspInit+0x148>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d152      	bne.n	800367a <HAL_DFSDM_FilterMspInit+0xc6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80035d4:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_DFSDM_FilterMspInit+0x14c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a49      	ldr	r2, [pc, #292]	; (8003700 <HAL_DFSDM_FilterMspInit+0x14c>)
 80035dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80035de:	4b48      	ldr	r3, [pc, #288]	; (8003700 <HAL_DFSDM_FilterMspInit+0x14c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10b      	bne.n	80035fe <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a46      	ldr	r2, [pc, #280]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 80035ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b44      	ldr	r3, [pc, #272]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a40      	ldr	r2, [pc, #256]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003616:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_DFSDM_FilterMspInit+0x150>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800362e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003640:	2303      	movs	r3, #3
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	4619      	mov	r1, r3
 800364a:	482f      	ldr	r0, [pc, #188]	; (8003708 <HAL_DFSDM_FilterMspInit+0x154>)
 800364c:	f006 fd80 	bl	800a150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003650:	2308      	movs	r3, #8
 8003652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003660:	2303      	movs	r3, #3
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4619      	mov	r1, r3
 800366a:	4828      	ldr	r0, [pc, #160]	; (800370c <HAL_DFSDM_FilterMspInit+0x158>)
 800366c:	f006 fd70 	bl	800a150 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_DFSDM_FilterMspInit+0x148>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_DFSDM_FilterMspInit+0x148>)
 8003678:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a24      	ldr	r2, [pc, #144]	; (8003710 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d136      	bne.n	80036f2 <HAL_DFSDM_FilterMspInit+0x13e>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8003684:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 8003686:	4a24      	ldr	r2, [pc, #144]	; (8003718 <HAL_DFSDM_FilterMspInit+0x164>)
 8003688:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 800368c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003690:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ac:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036b4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036bc:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80036ca:	4812      	ldr	r0, [pc, #72]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036cc:	f006 f958 	bl	8009980 <HAL_DMA_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_DFSDM_FilterMspInit+0x126>
    {
      Error_Handler();
 80036d6:	f7ff f8f3 	bl	80028c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e0:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
 80036ec:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_DFSDM_FilterMspInit+0x160>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80036f2:	bf00      	nop
 80036f4:	3728      	adds	r7, #40	; 0x28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200003b8 	.word	0x200003b8
 8003700:	200003b4 	.word	0x200003b4
 8003704:	40023800 	.word	0x40023800
 8003708:	40020800 	.word	0x40020800
 800370c:	40020c00 	.word	0x40020c00
 8003710:	40017500 	.word	0x40017500
 8003714:	20000128 	.word	0x20000128
 8003718:	40026410 	.word	0x40026410

0800371c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d152      	bne.n	80037e2 <HAL_DFSDM_ChannelMspInit+0xc6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003744:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003746:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10b      	bne.n	8003766 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4a28      	ldr	r2, [pc, #160]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003758:	6453      	str	r3, [r2, #68]	; 0x44
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003766:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800379a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80037a8:	2303      	movs	r3, #3
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ac:	f107 0314 	add.w	r3, r7, #20
 80037b0:	4619      	mov	r1, r3
 80037b2:	4811      	ldr	r0, [pc, #68]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80037b4:	f006 fccc 	bl	800a150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037b8:	2308      	movs	r3, #8
 80037ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037bc:	2302      	movs	r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80037c8:	2303      	movs	r3, #3
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	4619      	mov	r1, r3
 80037d2:	480a      	ldr	r0, [pc, #40]	; (80037fc <HAL_DFSDM_ChannelMspInit+0xe0>)
 80037d4:	f006 fcbc 	bl	800a150 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_DFSDM_ChannelMspInit+0xd0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	4a03      	ldr	r2, [pc, #12]	; (80037ec <HAL_DFSDM_ChannelMspInit+0xd0>)
 80037e0:	6013      	str	r3, [r2, #0]
  }

}
 80037e2:	bf00      	nop
 80037e4:	3728      	adds	r7, #40	; 0x28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200003b8 	.word	0x200003b8
 80037f0:	200003b4 	.word	0x200003b4
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020800 	.word	0x40020800
 80037fc:	40020c00 	.word	0x40020c00

08003800 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	; 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4a      	ldr	r2, [pc, #296]	; (8003948 <HAL_QSPI_MspInit+0x148>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f040 808e 	bne.w	8003940 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003824:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	4a48      	ldr	r2, [pc, #288]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	6393      	str	r3, [r2, #56]	; 0x38
 8003830:	4b46      	ldr	r3, [pc, #280]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800383c:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4a42      	ldr	r2, [pc, #264]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003842:	f043 0310 	orr.w	r3, r3, #16
 8003846:	6313      	str	r3, [r2, #48]	; 0x30
 8003848:	4b40      	ldr	r3, [pc, #256]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003854:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	4a3c      	ldr	r2, [pc, #240]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	6313      	str	r3, [r2, #48]	; 0x30
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386c:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	4a36      	ldr	r2, [pc, #216]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6313      	str	r3, [r2, #48]	; 0x30
 8003878:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003884:	4b31      	ldr	r3, [pc, #196]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	4a30      	ldr	r2, [pc, #192]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 800388a:	f043 0308 	orr.w	r3, r3, #8
 800388e:	6313      	str	r3, [r2, #48]	; 0x30
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_QSPI_MspInit+0x14c>)
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800389c:	2304      	movs	r3, #4
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a0:	2302      	movs	r3, #2
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a8:	2303      	movs	r3, #3
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038ac:	2309      	movs	r3, #9
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038b0:	f107 031c 	add.w	r3, r7, #28
 80038b4:	4619      	mov	r1, r3
 80038b6:	4826      	ldr	r0, [pc, #152]	; (8003950 <HAL_QSPI_MspInit+0x150>)
 80038b8:	f006 fc4a 	bl	800a150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038bc:	2340      	movs	r3, #64	; 0x40
 80038be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c8:	2303      	movs	r3, #3
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80038cc:	230a      	movs	r3, #10
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d0:	f107 031c 	add.w	r3, r7, #28
 80038d4:	4619      	mov	r1, r3
 80038d6:	481f      	ldr	r0, [pc, #124]	; (8003954 <HAL_QSPI_MspInit+0x154>)
 80038d8:	f006 fc3a 	bl	800a150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80038dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ea:	2303      	movs	r3, #3
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038ee:	2309      	movs	r3, #9
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	4619      	mov	r1, r3
 80038f8:	4817      	ldr	r0, [pc, #92]	; (8003958 <HAL_QSPI_MspInit+0x158>)
 80038fa:	f006 fc29 	bl	800a150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038fe:	2304      	movs	r3, #4
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800390e:	2309      	movs	r3, #9
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4619      	mov	r1, r3
 8003918:	480e      	ldr	r0, [pc, #56]	; (8003954 <HAL_QSPI_MspInit+0x154>)
 800391a:	f006 fc19 	bl	800a150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800391e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392c:	2303      	movs	r3, #3
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003930:	2309      	movs	r3, #9
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003934:	f107 031c 	add.w	r3, r7, #28
 8003938:	4619      	mov	r1, r3
 800393a:	4808      	ldr	r0, [pc, #32]	; (800395c <HAL_QSPI_MspInit+0x15c>)
 800393c:	f006 fc08 	bl	800a150 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003940:	bf00      	nop
 8003942:	3730      	adds	r7, #48	; 0x30
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	a0001000 	.word	0xa0001000
 800394c:	40023800 	.word	0x40023800
 8003950:	40021000 	.word	0x40021000
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800
 800395c:	40020c00 	.word	0x40020c00

08003960 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <HAL_QSPI_MspDeInit+0x4c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d117      	bne.n	80039a2 <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <HAL_QSPI_MspDeInit+0x50>)
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <HAL_QSPI_MspDeInit+0x50>)
 8003978:	f023 0302 	bic.w	r3, r3, #2
 800397c:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800397e:	2104      	movs	r1, #4
 8003980:	480c      	ldr	r0, [pc, #48]	; (80039b4 <HAL_QSPI_MspDeInit+0x54>)
 8003982:	f006 fd91 	bl	800a4a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8003986:	2144      	movs	r1, #68	; 0x44
 8003988:	480b      	ldr	r0, [pc, #44]	; (80039b8 <HAL_QSPI_MspDeInit+0x58>)
 800398a:	f006 fd8d 	bl	800a4a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_9);
 800398e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003992:	480a      	ldr	r0, [pc, #40]	; (80039bc <HAL_QSPI_MspDeInit+0x5c>)
 8003994:	f006 fd88 	bl	800a4a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8003998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800399c:	4808      	ldr	r0, [pc, #32]	; (80039c0 <HAL_QSPI_MspDeInit+0x60>)
 800399e:	f006 fd83 	bl	800a4a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	a0001000 	.word	0xa0001000
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40020400 	.word	0x40020400
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020c00 	.word	0x40020c00

080039c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <HAL_UART_MspInit+0xb4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d144      	bne.n	8003a70 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039e6:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 80039ec:	f043 0310 	orr.w	r3, r3, #16
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <HAL_UART_MspInit+0xb8>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a3e:	2307      	movs	r3, #7
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a42:	f107 0314 	add.w	r3, r7, #20
 8003a46:	4619      	mov	r1, r3
 8003a48:	480d      	ldr	r0, [pc, #52]	; (8003a80 <HAL_UART_MspInit+0xbc>)
 8003a4a:	f006 fb81 	bl	800a150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a60:	2307      	movs	r3, #7
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4806      	ldr	r0, [pc, #24]	; (8003a84 <HAL_UART_MspInit+0xc0>)
 8003a6c:	f006 fb70 	bl	800a150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a70:	bf00      	nop
 8003a72:	3728      	adds	r7, #40	; 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40011000 	.word	0x40011000
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020400 	.word	0x40020400
 8003a84:	40020000 	.word	0x40020000

08003a88 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <HAL_SAI_MspInit+0xd0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d15a      	bne.n	8003b50 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <HAL_SAI_MspInit+0xd4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003aa2:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_SAI_MspInit+0xd8>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4a2e      	ldr	r2, [pc, #184]	; (8003b60 <HAL_SAI_MspInit+0xd8>)
 8003aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aac:	6453      	str	r3, [r2, #68]	; 0x44
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <HAL_SAI_MspInit+0xd8>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8003aba:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <HAL_SAI_MspInit+0xd4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	4a26      	ldr	r2, [pc, #152]	; (8003b5c <HAL_SAI_MspInit+0xd4>)
 8003ac2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003ac4:	2370      	movs	r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003ad4:	2306      	movs	r3, #6
 8003ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	4619      	mov	r1, r3
 8003ade:	4821      	ldr	r0, [pc, #132]	; (8003b64 <HAL_SAI_MspInit+0xdc>)
 8003ae0:	f006 fb36 	bl	800a150 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8003ae4:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003ae6:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <HAL_SAI_MspInit+0xe4>)
 8003ae8:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8003aea:	4b1f      	ldr	r3, [pc, #124]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003af2:	2240      	movs	r2, #64	; 0x40
 8003af4:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b02:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b0a:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b0c:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b12:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003b28:	480f      	ldr	r0, [pc, #60]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b2a:	f005 ff29 	bl	8009980 <HAL_DMA_Init>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8003b34:	f7fe fec4 	bl	80028c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b3c:	671a      	str	r2, [r3, #112]	; 0x70
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b48:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_SAI_MspInit+0xe0>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8003b50:	bf00      	nop
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40015804 	.word	0x40015804
 8003b5c:	200003bc 	.word	0x200003bc
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	20000258 	.word	0x20000258
 8003b6c:	40026428 	.word	0x40026428

08003b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8003b80:	2200      	movs	r2, #0
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	202c      	movs	r0, #44	; 0x2c
 8003b86:	f005 fb1b 	bl	80091c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003b8a:	202c      	movs	r0, #44	; 0x2c
 8003b8c:	f005 fb34 	bl	80091f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <HAL_InitTick+0xa0>)
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <HAL_InitTick+0xa0>)
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9c:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_InitTick+0xa0>)
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ba8:	f107 0210 	add.w	r2, r7, #16
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f007 ff1c 	bl	800b9f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003bb8:	f007 fef2 	bl	800b9a0 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <HAL_InitTick+0xa4>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_InitTick+0xa8>)
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <HAL_InitTick+0xac>)
 8003bd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_InitTick+0xa8>)
 8003bd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bdc:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8003bde:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <HAL_InitTick+0xa8>)
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_InitTick+0xa8>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_InitTick+0xa8>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8003bf0:	4809      	ldr	r0, [pc, #36]	; (8003c18 <HAL_InitTick+0xa8>)
 8003bf2:	f009 f9b6 	bl	800cf62 <HAL_TIM_Base_Init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8003bfc:	4806      	ldr	r0, [pc, #24]	; (8003c18 <HAL_InitTick+0xa8>)
 8003bfe:	f009 fa11 	bl	800d024 <HAL_TIM_Base_Start_IT>
 8003c02:	4603      	mov	r3, r0
 8003c04:	e000      	b.n	8003c08 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3730      	adds	r7, #48	; 0x30
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	431bde83 	.word	0x431bde83
 8003c18:	20000440 	.word	0x20000440
 8003c1c:	40001c00 	.word	0x40001c00

08003c20 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* Disable TIM13 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim13, TIM_IT_UPDATE);
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_SuspendTick+0x20>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_SuspendTick+0x20>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	60da      	str	r2, [r3, #12]
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000440 	.word	0x20000440

08003c44 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* Enable TIM13 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_ResumeTick+0x20>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_ResumeTick+0x20>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	60da      	str	r2, [r3, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000440 	.word	0x20000440

08003c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <NMI_Handler+0x4>

08003c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c72:	e7fe      	b.n	8003c72 <HardFault_Handler+0x4>

08003c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c78:	e7fe      	b.n	8003c78 <MemManage_Handler+0x4>

08003c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c7e:	e7fe      	b.n	8003c7e <BusFault_Handler+0x4>

08003c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c84:	e7fe      	b.n	8003c84 <UsageFault_Handler+0x4>

08003c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003cc6:	f009 fa25 	bl	800d114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000440 	.word	0x20000440

08003cd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <DMA2_Stream0_IRQHandler+0x10>)
 8003cda:	f005 ffcf 	bl	8009c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000128 	.word	0x20000128

08003ce8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <DMA2_Stream1_IRQHandler+0x10>)
 8003cee:	f005 ffc5 	bl	8009c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000258 	.word	0x20000258

08003cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
	return 1;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_kill>:

int _kill(int pid, int sig)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d16:	f00b fcd5 	bl	800f6c4 <__errno>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2216      	movs	r2, #22
 8003d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_exit>:

void _exit (int status)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d34:	f04f 31ff 	mov.w	r1, #4294967295
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ffe7 	bl	8003d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d3e:	e7fe      	b.n	8003d3e <_exit+0x12>

08003d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <_sbrk+0x5c>)
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <_sbrk+0x60>)
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <_sbrk+0x64>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <_sbrk+0x64>)
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <_sbrk+0x68>)
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <_sbrk+0x64>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d207      	bcs.n	8003d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d70:	f00b fca8 	bl	800f6c4 <__errno>
 8003d74:	4603      	mov	r3, r0
 8003d76:	220c      	movs	r2, #12
 8003d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7e:	e009      	b.n	8003d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d80:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <_sbrk+0x64>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <_sbrk+0x64>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <_sbrk+0x64>)
 8003d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20080000 	.word	0x20080000
 8003da0:	00000400 	.word	0x00000400
 8003da4:	200003c0 	.word	0x200003c0
 8003da8:	200004a0 	.word	0x200004a0

08003dac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <SystemInit+0x20>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <SystemInit+0x20>)
 8003db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dd4:	480d      	ldr	r0, [pc, #52]	; (8003e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003dd6:	490e      	ldr	r1, [pc, #56]	; (8003e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ddc:	e002      	b.n	8003de4 <LoopCopyDataInit>

08003dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de2:	3304      	adds	r3, #4

08003de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003de8:	d3f9      	bcc.n	8003dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dea:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dec:	4c0b      	ldr	r4, [pc, #44]	; (8003e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df0:	e001      	b.n	8003df6 <LoopFillZerobss>

08003df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df4:	3204      	adds	r2, #4

08003df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003df8:	d3fb      	bcc.n	8003df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dfa:	f7ff ffd7 	bl	8003dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dfe:	f00b fc67 	bl	800f6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e02:	f7fd ffa9 	bl	8001d58 <main>
  bx  lr    
 8003e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e08:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e10:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003e14:	0802b2f4 	.word	0x0802b2f4
  ldr r2, =_sbss
 8003e18:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003e1c:	200004a0 	.word	0x200004a0

08003e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e20:	e7fe      	b.n	8003e20 <ADC_IRQHandler>

08003e22 <arm_copy_q7>:

void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8003e34:	e00e      	b.n	8003e54 <arm_copy_q7+0x32>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    /* 4 samples are copied and stored at a time using SIMD */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	1d11      	adds	r1, r2, #4
 8003e3e:	6019      	str	r1, [r3, #0]
 8003e40:	f107 0108 	add.w	r1, r7, #8
 8003e44:	680b      	ldr	r3, [r1, #0]
 8003e46:	1d18      	adds	r0, r3, #4
 8003e48:	6008      	str	r0, [r1, #0]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ed      	bne.n	8003e36 <arm_copy_q7+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	617b      	str	r3, [r7, #20]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8003e62:	e00b      	b.n	8003e7c <arm_copy_q7+0x5a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	1c53      	adds	r3, r2, #1
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	f992 2000 	ldrsb.w	r2, [r2]
 8003e74:	701a      	strb	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <arm_copy_q7+0x42>
  }
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b0a0      	sub	sp, #128	; 0x80
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8003ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8003eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb6:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8003eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8003ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8003ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ece:	4413      	add	r3, r2
 8003ed0:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8003ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed8:	e1b6      	b.n	8004248 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8003ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8003ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8003f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8003f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8003f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8003f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8003f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8003f3a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	1d1a      	adds	r2, r3, #4
 8003f46:	603a      	str	r2, [r7, #0]
 8003f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8003f50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	603a      	str	r2, [r7, #0]
 8003f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f62:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8003f66:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003f6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	603a      	str	r2, [r7, #0]
 8003f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f78:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8003f7c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1d1a      	adds	r2, r3, #4
 8003f88:	603a      	str	r2, [r7, #0]
 8003f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8e:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8003f92:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8003fa2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003fa6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8003fb2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003fb6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8003fc2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003fc6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8003fd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fdc:	1d1a      	adds	r2, r3, #4
 8003fde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8003fe8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ffa:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8003ffe:	ed97 7a08 	vldr	s14, [r7, #32]
 8004002:	edd7 7a04 	vldr	s15, [r7, #16]
 8004006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004008:	1d1a      	adds	r2, r3, #4
 800400a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800400c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004010:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8004014:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004018:	edd7 7a05 	vldr	s15, [r7, #20]
 800401c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004026:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 800402a:	ed97 7a02 	vldr	s14, [r7, #8]
 800402e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004036:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800403a:	ed97 7a03 	vldr	s14, [r7, #12]
 800403e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004046:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800404a:	ed97 7a04 	vldr	s14, [r7, #16]
 800404e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004056:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800405a:	ed97 7a05 	vldr	s14, [r7, #20]
 800405e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004066:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800406a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	673a      	str	r2, [r7, #112]	; 0x70
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	673a      	str	r2, [r7, #112]	; 0x70
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800407e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004082:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800408e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004092:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800409e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80040a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80040ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80040be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c0:	1d1a      	adds	r2, r3, #4
 80040c2:	677a      	str	r2, [r7, #116]	; 0x74
 80040c4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80040c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80040cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d0:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80040d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d6:	1d1a      	adds	r2, r3, #4
 80040d8:	677a      	str	r2, [r7, #116]	; 0x74
 80040da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80040de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80040e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e6:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80040ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80040fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80040fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800410a:	edd7 7a03 	vldr	s15, [r7, #12]
 800410e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800411a:	edd7 7a02 	vldr	s15, [r7, #8]
 800411e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004126:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 800412a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800412c:	1d1a      	adds	r2, r3, #4
 800412e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004130:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004134:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800413c:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8004140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	67ba      	str	r2, [r7, #120]	; 0x78
 8004146:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800414a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800414e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004152:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8004156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004158:	1d1a      	adds	r2, r3, #4
 800415a:	673a      	str	r2, [r7, #112]	; 0x70
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	673a      	str	r2, [r7, #112]	; 0x70
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 800416a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800416e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800417a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800417e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800418a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800418e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800419a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800419e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	1d1a      	adds	r2, r3, #4
 80041ae:	677a      	str	r2, [r7, #116]	; 0x74
 80041b0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80041b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80041b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041bc:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80041c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	677a      	str	r2, [r7, #116]	; 0x74
 80041c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d2:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 80041d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041da:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80041e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041ea:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80041f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8004206:	edd7 7a04 	vldr	s15, [r7, #16]
 800420a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8004216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004218:	1d1a      	adds	r2, r3, #4
 800421a:	67ba      	str	r2, [r7, #120]	; 0x78
 800421c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004220:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004228:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	67ba      	str	r2, [r7, #120]	; 0x78
 8004232:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004236:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800423a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800423e:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8004242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004244:	3b01      	subs	r3, #1
 8004246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424a:	2b00      	cmp	r3, #0
 800424c:	f47f ae45 	bne.w	8003eda <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8004250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004252:	b299      	uxth	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	2302      	movs	r3, #2
 800425a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800425c:	f000 fef2 	bl	8005044 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8004260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004262:	b299      	uxth	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	2302      	movs	r3, #2
 800426a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800426c:	f000 feea 	bl	8005044 <arm_radix8_butterfly_f32>
}
 8004270:	bf00      	nop
 8004272:	3780      	adds	r7, #128	; 0x80
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b0ac      	sub	sp, #176	; 0xb0
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800428e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	4413      	add	r3, r2
 8004298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800429c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042a6:	4413      	add	r3, r2
 80042a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80042ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042b6:	4413      	add	r3, r2
 80042b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80042c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042c4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80042c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ca:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80042cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042d0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80042d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d6:	3b04      	subs	r3, #4
 80042d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80042dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e0:	3b04      	subs	r3, #4
 80042e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80042e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ea:	3b04      	subs	r3, #4
 80042ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80042f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042fa:	4413      	add	r3, r2
 80042fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004308:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800430c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8004318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8004322:	2302      	movs	r3, #2
 8004324:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8004326:	2304      	movs	r3, #4
 8004328:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800432a:	2306      	movs	r3, #6
 800432c:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	ed93 7a00 	vldr	s14, [r3]
 8004334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004338:	edd3 7a00 	vldr	s15, [r3]
 800433c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004340:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	ed93 7a00 	vldr	s14, [r3]
 800434a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800434e:	edd3 7a00 	vldr	s15, [r3]
 8004352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004356:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	3304      	adds	r3, #4
 800435e:	ed93 7a00 	vldr	s14, [r3]
 8004362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004366:	3304      	adds	r3, #4
 8004368:	edd3 7a00 	vldr	s15, [r3]
 800436c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004370:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3304      	adds	r3, #4
 8004378:	ed93 7a00 	vldr	s14, [r3]
 800437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004380:	3304      	adds	r3, #4
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800438a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800438e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004392:	3304      	adds	r3, #4
 8004394:	ed93 7a00 	vldr	s14, [r3]
 8004398:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800439c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a4:	3304      	adds	r3, #4
 80043a6:	edd3 7a00 	vldr	s15, [r3]
 80043aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80043b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80043be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ce:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80043d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043d6:	edd3 7a00 	vldr	s15, [r3]
 80043da:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80043de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ee:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80043f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043f6:	3304      	adds	r3, #4
 80043f8:	edd3 7a00 	vldr	s15, [r3]
 80043fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004404:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004408:	3304      	adds	r3, #4
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800441a:	3304      	adds	r3, #4
 800441c:	edd3 7a00 	vldr	s15, [r3]
 8004420:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004424:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800442c:	3304      	adds	r3, #4
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004436:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800443a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800443e:	ed93 7a00 	vldr	s14, [r3]
 8004442:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800444a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800444e:	edd3 7a00 	vldr	s15, [r3]
 8004452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004456:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800445a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800445e:	ed93 7a00 	vldr	s14, [r3]
 8004462:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800446a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800446e:	edd3 7a00 	vldr	s15, [r3]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	603a      	str	r2, [r7, #0]
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004484:	3304      	adds	r3, #4
 8004486:	ed93 7a00 	vldr	s14, [r3]
 800448a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800448e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004496:	3304      	adds	r3, #4
 8004498:	edd3 7a00 	vldr	s15, [r3]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	603a      	str	r2, [r7, #0]
 80044a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a6:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 80044aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044ae:	1d1a      	adds	r2, r3, #4
 80044b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80044b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80044b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80044c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80044d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d8:	1d1a      	adds	r2, r3, #4
 80044da:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044de:	6a3a      	ldr	r2, [r7, #32]
 80044e0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80044e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80044f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004506:	4413      	add	r3, r2
 8004508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800450c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004514:	4413      	add	r3, r2
 8004516:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800451a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004522:	4413      	add	r3, r2
 8004524:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8004528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800452c:	3b02      	subs	r3, #2
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004534:	e31a      	b.n	8004b6c <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	ed93 7a00 	vldr	s14, [r3]
 800453c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004540:	edd3 7a00 	vldr	s15, [r3]
 8004544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004548:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	ed93 7a00 	vldr	s14, [r3]
 8004552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004556:	edd3 7a00 	vldr	s15, [r3]
 800455a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800455e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	3304      	adds	r3, #4
 8004566:	ed93 7a00 	vldr	s14, [r3]
 800456a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800456e:	3304      	adds	r3, #4
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004578:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	3304      	adds	r3, #4
 8004580:	ed93 7a00 	vldr	s14, [r3]
 8004584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004588:	3304      	adds	r3, #4
 800458a:	edd3 7a00 	vldr	s15, [r3]
 800458e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004592:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004596:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800459a:	3304      	adds	r3, #4
 800459c:	ed93 7a00 	vldr	s14, [r3]
 80045a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80045a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ac:	3304      	adds	r3, #4
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80045ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045be:	edd3 7a00 	vldr	s15, [r3]
 80045c2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80045c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ce:	edd3 7a00 	vldr	s15, [r3]
 80045d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80045da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045de:	edd3 7a00 	vldr	s15, [r3]
 80045e2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80045e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ee:	edd3 7a00 	vldr	s15, [r3]
 80045f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80045fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045fe:	3304      	adds	r3, #4
 8004600:	edd3 7a00 	vldr	s15, [r3]
 8004604:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004608:	ee37 7a67 	vsub.f32	s14, s14, s15
 800460c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004610:	3304      	adds	r3, #4
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800461a:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 800461e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004622:	3304      	adds	r3, #4
 8004624:	edd3 7a00 	vldr	s15, [r3]
 8004628:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800462c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004630:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004634:	3304      	adds	r3, #4
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800463e:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004646:	ed93 7a00 	vldr	s14, [r3]
 800464a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800464e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800465e:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004666:	ed93 7a00 	vldr	s14, [r3]
 800466a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800466e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004676:	edd3 7a00 	vldr	s15, [r3]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	1d1a      	adds	r2, r3, #4
 800467e:	603a      	str	r2, [r7, #0]
 8004680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004684:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800468c:	3304      	adds	r3, #4
 800468e:	ed93 7a00 	vldr	s14, [r3]
 8004692:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800469a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800469e:	3304      	adds	r3, #4
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	1d1a      	adds	r2, r3, #4
 80046a8:	603a      	str	r2, [r7, #0]
 80046aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ae:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80046b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046b6:	3b04      	subs	r3, #4
 80046b8:	ed93 7a00 	vldr	s14, [r3]
 80046bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046c0:	3b04      	subs	r3, #4
 80046c2:	edd3 7a00 	vldr	s15, [r3]
 80046c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ca:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80046ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046d2:	3b04      	subs	r3, #4
 80046d4:	ed93 7a00 	vldr	s14, [r3]
 80046d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046dc:	3b04      	subs	r3, #4
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80046ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046ee:	ed93 7a00 	vldr	s14, [r3]
 80046f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046f6:	edd3 7a00 	vldr	s15, [r3]
 80046fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8004702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004706:	ed93 7a00 	vldr	s14, [r3]
 800470a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800470e:	edd3 7a00 	vldr	s15, [r3]
 8004712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004716:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800471a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800471e:	ed93 7a00 	vldr	s14, [r3]
 8004722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800472e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004736:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800473a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800473e:	ed93 7a00 	vldr	s14, [r3]
 8004742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800474e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004752:	3b04      	subs	r3, #4
 8004754:	edd3 7a00 	vldr	s15, [r3]
 8004758:	ee37 7a67 	vsub.f32	s14, s14, s15
 800475c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004760:	3b04      	subs	r3, #4
 8004762:	edd3 7a00 	vldr	s15, [r3]
 8004766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800476e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004772:	3b04      	subs	r3, #4
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800477c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004784:	3b04      	subs	r3, #4
 8004786:	edd3 7a00 	vldr	s15, [r3]
 800478a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800478e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8004792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800479e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 80047b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047b6:	ed93 7a00 	vldr	s14, [r3]
 80047ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047be:	edd3 7a00 	vldr	s15, [r3]
 80047c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80047ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ce:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80047d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047d6:	3b04      	subs	r3, #4
 80047d8:	ed93 7a00 	vldr	s14, [r3]
 80047dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047e0:	3b04      	subs	r3, #4
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80047ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f2:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80047f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047fa:	ed93 7a00 	vldr	s14, [r3]
 80047fe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800480a:	edd3 7a00 	vldr	s15, [r3]
 800480e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004812:	1f1a      	subs	r2, r3, #4
 8004814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481c:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8004820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004824:	3b04      	subs	r3, #4
 8004826:	ed93 7a00 	vldr	s14, [r3]
 800482a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800482e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004836:	3b04      	subs	r3, #4
 8004838:	edd3 7a00 	vldr	s15, [r3]
 800483c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004840:	1f1a      	subs	r2, r3, #4
 8004842:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800484a:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 800484e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 800485c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004860:	1d1a      	adds	r2, r3, #4
 8004862:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800486a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800486e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800487a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800487e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800488a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800488e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800489a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800489e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 80048aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048ae:	1d1a      	adds	r2, r3, #4
 80048b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80048b4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80048b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80048bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c0:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80048c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80048ce:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80048d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80048d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048da:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 80048de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80048e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 80048ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80048f2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 80048fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004902:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 800490e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004912:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 800491e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004922:	1f1a      	subs	r2, r3, #4
 8004924:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004928:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800492c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004934:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8004938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800493c:	1f1a      	subs	r2, r3, #4
 800493e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004942:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004946:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800494a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800494e:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8004952:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800495a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8004962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800496a:	4413      	add	r3, r2
 800496c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8004970:	edd7 7a07 	vldr	s15, [r7, #28]
 8004974:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8004980:	edd7 7a08 	vldr	s15, [r7, #32]
 8004984:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8004990:	edd7 7a08 	vldr	s15, [r7, #32]
 8004994:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80049a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80049a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 80049b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b4:	1d1a      	adds	r2, r3, #4
 80049b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80049be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80049c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049c6:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 80049ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80049d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80049dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 80049e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049e8:	eef1 7a67 	vneg.f32	s15, s15
 80049ec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 80049f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80049fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8004a08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a14:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8004a18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004a1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 8004a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a2c:	1f1a      	subs	r2, r3, #4
 8004a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a32:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8004a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a46:	1f1a      	subs	r2, r3, #4
 8004a48:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a4c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a50:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a58:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8004a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8004a64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8004a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a74:	4413      	add	r3, r2
 8004a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8004a7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a7e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a86:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8004a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8004a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8004aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004aae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8004aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ac4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004ac8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad0:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8004ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ade:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004ae2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aea:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8004aee:	edd7 7a06 	vldr	s15, [r7, #24]
 8004af2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8004afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b02:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8004b0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b12:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8004b1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b22:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8004b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b32:	1f1a      	subs	r2, r3, #4
 8004b34:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b38:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b44:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8004b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b4c:	1f1a      	subs	r2, r3, #4
 8004b4e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b52:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004b56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b66:	3b01      	subs	r3, #1
 8004b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f47f ace0 	bne.w	8004536 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	ed93 7a00 	vldr	s14, [r3]
 8004b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b80:	edd3 7a00 	vldr	s15, [r3]
 8004b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b88:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	ed93 7a00 	vldr	s14, [r3]
 8004b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b96:	edd3 7a00 	vldr	s15, [r3]
 8004b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b9e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	ed93 7a00 	vldr	s14, [r3]
 8004baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bae:	3304      	adds	r3, #4
 8004bb0:	edd3 7a00 	vldr	s15, [r3]
 8004bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	ed93 7a00 	vldr	s14, [r3]
 8004bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bc8:	3304      	adds	r3, #4
 8004bca:	edd3 7a00 	vldr	s15, [r3]
 8004bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bda:	3304      	adds	r3, #4
 8004bdc:	ed93 7a00 	vldr	s14, [r3]
 8004be0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bec:	3304      	adds	r3, #4
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bf6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c0e:	edd3 7a00 	vldr	s15, [r3]
 8004c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004c1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c1e:	edd3 7a00 	vldr	s15, [r3]
 8004c22:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c36:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c3e:	3304      	adds	r3, #4
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c50:	3304      	adds	r3, #4
 8004c52:	edd3 7a00 	vldr	s15, [r3]
 8004c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c5a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c62:	3304      	adds	r3, #4
 8004c64:	edd3 7a00 	vldr	s15, [r3]
 8004c68:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c74:	3304      	adds	r3, #4
 8004c76:	edd3 7a00 	vldr	s15, [r3]
 8004c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c7e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c86:	ed93 7a00 	vldr	s14, [r3]
 8004c8a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004c8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c96:	edd3 7a00 	vldr	s15, [r3]
 8004c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c9e:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ca6:	ed93 7a00 	vldr	s14, [r3]
 8004caa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cb6:	edd3 7a00 	vldr	s15, [r3]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	1d1a      	adds	r2, r3, #4
 8004cbe:	603a      	str	r2, [r7, #0]
 8004cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004cc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ccc:	3304      	adds	r3, #4
 8004cce:	ed93 7a00 	vldr	s14, [r3]
 8004cd2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cde:	3304      	adds	r3, #4
 8004ce0:	edd3 7a00 	vldr	s15, [r3]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	1d1a      	adds	r2, r3, #4
 8004ce8:	603a      	str	r2, [r7, #0]
 8004cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cee:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8004cf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8004cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8004d02:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d06:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8004d12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004d16:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8004d22:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004d26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8004d32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8004d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d4c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004d50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d58:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8004d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d66:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d72:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8004d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004d86:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d8a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004d96:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d9a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004daa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8004db6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004dba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8004dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dd0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004dd4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ddc:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8004de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004de4:	1d1a      	adds	r2, r3, #4
 8004de6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004dee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004df6:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8004dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8004e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8004e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e0e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8004e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8004e2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e2e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8004e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8004e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e4e:	1d1a      	adds	r2, r3, #4
 8004e50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e54:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004e58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e60:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e68:	1d1a      	adds	r2, r3, #4
 8004e6a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e6e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004e72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e7a:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e82:	b299      	uxth	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	2304      	movs	r3, #4
 8004e8a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004e8c:	f000 f8da 	bl	8005044 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e94:	b299      	uxth	r1, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004e9e:	f000 f8d1 	bl	8005044 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8004ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea6:	b299      	uxth	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	2304      	movs	r3, #4
 8004eae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004eb0:	f000 f8c8 	bl	8005044 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8004eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eb8:	b299      	uxth	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	2304      	movs	r3, #4
 8004ec0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004ec2:	f000 f8bf 	bl	8005044 <arm_radix8_butterfly_f32>
}
 8004ec6:	bf00      	nop
 8004ec8:	37b0      	adds	r7, #176	; 0xb0
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b088      	sub	sp, #32
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	461a      	mov	r2, r3
 8004edc:	460b      	mov	r3, r1
 8004ede:	71fb      	strb	r3, [r7, #7]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d117      	bne.n	8004f20 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e00d      	b.n	8004f18 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	edd3 7a00 	vldr	s15, [r3]
 8004f02:	eef1 7a67 	vneg.f32	s15, s15
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3301      	adds	r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d3ed      	bcc.n	8004efc <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d040      	beq.n	8004faa <arm_cfft_f32+0xdc>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d845      	bhi.n	8004fbc <arm_cfft_f32+0xee>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d033      	beq.n	8004fa0 <arm_cfft_f32+0xd2>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d83d      	bhi.n	8004fbc <arm_cfft_f32+0xee>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f46:	d026      	beq.n	8004f96 <arm_cfft_f32+0xc8>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4e:	d835      	bhi.n	8004fbc <arm_cfft_f32+0xee>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d028      	beq.n	8004faa <arm_cfft_f32+0xdc>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5e:	d82d      	bhi.n	8004fbc <arm_cfft_f32+0xee>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f66:	d01b      	beq.n	8004fa0 <arm_cfft_f32+0xd2>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6e:	d825      	bhi.n	8004fbc <arm_cfft_f32+0xee>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d00f      	beq.n	8004f96 <arm_cfft_f32+0xc8>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b80      	cmp	r3, #128	; 0x80
 8004f7a:	d81f      	bhi.n	8004fbc <arm_cfft_f32+0xee>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d013      	beq.n	8004faa <arm_cfft_f32+0xdc>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	d819      	bhi.n	8004fbc <arm_cfft_f32+0xee>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d003      	beq.n	8004f96 <arm_cfft_f32+0xc8>
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d005      	beq.n	8004fa0 <arm_cfft_f32+0xd2>
 8004f94:	e012      	b.n	8004fbc <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7fe ff79 	bl	8003e90 <arm_cfft_radix8by2_f32>
        break;
 8004f9e:	e00d      	b.n	8004fbc <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff f968 	bl	8004278 <arm_cfft_radix8by4_f32>
        break;
 8004fa8:	e008      	b.n	8004fbc <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	b299      	uxth	r1, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	68b8      	ldr	r0, [r7, #8]
 8004fb6:	f000 f845 	bl	8005044 <arm_radix8_butterfly_f32>
        break;
 8004fba:	bf00      	nop
    }

    if ( bitReverseFlag )
 8004fbc:	79bb      	ldrb	r3, [r7, #6]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8999      	ldrh	r1, [r3, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	f7fb f937 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d130      	bne.n	800503a <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fea:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	e01c      	b.n	8005032 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	ed93 7a00 	vldr	s14, [r3]
 8005002:	edd7 7a04 	vldr	s15, [r7, #16]
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	edd3 7a00 	vldr	s15, [r3]
 8005014:	eeb1 7a67 	vneg.f32	s14, s15
 8005018:	edd7 7a04 	vldr	s15, [r7, #16]
 800501c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	3304      	adds	r3, #4
 800502a:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	3301      	adds	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	429a      	cmp	r2, r3
 8005038:	d3de      	bcc.n	8004ff8 <arm_cfft_f32+0x12a>
        }
    }
}
 800503a:	bf00      	nop
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8005044:	b480      	push	{r7}
 8005046:	b0bd      	sub	sp, #244	; 0xf4
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	461a      	mov	r2, r3
 8005050:	460b      	mov	r3, r1
 8005052:	817b      	strh	r3, [r7, #10]
 8005054:	4613      	mov	r3, r2
 8005056:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <arm_radix8_butterfly_f32+0x3c>)
 800505a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800505e:	897b      	ldrh	r3, [r7, #10]
 8005060:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005070:	08db      	lsrs	r3, r3, #3
 8005072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800507c:	e002      	b.n	8005084 <arm_radix8_butterfly_f32+0x40>
 800507e:	bf00      	nop
 8005080:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8005084:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508c:	4413      	add	r3, r2
 800508e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8005092:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509a:	4413      	add	r3, r2
 800509c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80050a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a8:	4413      	add	r3, r2
 80050aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80050ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	4413      	add	r3, r2
 80050b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80050bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	4413      	add	r3, r2
 80050c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80050ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	4413      	add	r3, r2
 80050d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80050d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e0:	4413      	add	r3, r2
 80050e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80050e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	ed93 7a00 	vldr	s14, [r3]
 80050f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	edd3 7a00 	vldr	s15, [r3]
 8005102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005106:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800510a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	ed93 7a00 	vldr	s14, [r3]
 8005118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800512a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	ed93 7a00 	vldr	s14, [r3]
 800513c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	edd3 7a00 	vldr	s15, [r3]
 800514a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800514e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	ed93 7a00 	vldr	s14, [r3]
 8005160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005172:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005176:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	ed93 7a00 	vldr	s14, [r3]
 8005184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	edd3 7a00 	vldr	s15, [r3]
 8005192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005196:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800519a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	ed93 7a00 	vldr	s14, [r3]
 80051a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	edd3 7a00 	vldr	s15, [r3]
 80051b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80051be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	ed93 7a00 	vldr	s14, [r3]
 80051cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	edd3 7a00 	vldr	s15, [r3]
 80051da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051de:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80051e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	ed93 7a00 	vldr	s14, [r3]
 80051f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	edd3 7a00 	vldr	s15, [r3]
 80051fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005202:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8005206:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800520a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800520e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005212:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8005216:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800521a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800521e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005222:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8005226:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800522a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800522e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005232:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8005236:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800523a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800523e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005242:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8005246:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005254:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800525c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8005260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800526e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005276:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800527a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	3304      	adds	r3, #4
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	ed93 7a00 	vldr	s14, [r3]
 800528a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	3304      	adds	r3, #4
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80052a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	3304      	adds	r3, #4
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	ed93 7a00 	vldr	s14, [r3]
 80052b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	3304      	adds	r3, #4
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	edd3 7a00 	vldr	s15, [r3]
 80052c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	3304      	adds	r3, #4
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	ed93 7a00 	vldr	s14, [r3]
 80052da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	3304      	adds	r3, #4
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	edd3 7a00 	vldr	s15, [r3]
 80052ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80052f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	3304      	adds	r3, #4
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	ed93 7a00 	vldr	s14, [r3]
 8005302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3304      	adds	r3, #4
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	edd3 7a00 	vldr	s15, [r3]
 8005312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005316:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800531a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	3304      	adds	r3, #4
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	ed93 7a00 	vldr	s14, [r3]
 800532a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	3304      	adds	r3, #4
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	3304      	adds	r3, #4
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	ed93 7a00 	vldr	s14, [r3]
 8005352:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	3304      	adds	r3, #4
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005366:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800536a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	3304      	adds	r3, #4
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	ed93 7a00 	vldr	s14, [r3]
 800537a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3304      	adds	r3, #4
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	edd3 7a00 	vldr	s15, [r3]
 800538a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800538e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005392:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	3304      	adds	r3, #4
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	ed93 7a00 	vldr	s14, [r3]
 80053a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	3304      	adds	r3, #4
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	edd3 7a00 	vldr	s15, [r3]
 80053b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053b6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80053ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80053ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80053da:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80053de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80053ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80053ee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80053fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3304      	adds	r3, #4
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800540a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800540e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005412:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8005416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	3304      	adds	r3, #4
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005426:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800542a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800542e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8005432:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005440:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005448:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800544c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800545a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800545e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005462:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8005466:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	3304      	adds	r3, #4
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005476:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800547a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800547e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	3304      	adds	r3, #4
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005492:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800549a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800549e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80054a2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80054b6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80054ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80054ce:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80054d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054da:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80054e6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80054ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054f2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80054fe:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005502:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800550a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800550e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005512:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800551a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800551e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005522:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800552a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800552e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005532:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800553a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800553e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005542:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800554a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800554e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005552:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800555e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005562:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800556a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800556e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005572:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800557a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800557e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800558c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005594:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8005598:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80055a6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80055aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80055b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80055c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80055cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80055da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80055e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	3304      	adds	r3, #4
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80055f6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80055fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8005602:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	3304      	adds	r3, #4
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005612:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800561a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800561e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	3304      	adds	r3, #4
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800562e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005636:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800563a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	3304      	adds	r3, #4
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800564a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800564e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005652:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8005656:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800565a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800565e:	4413      	add	r3, r2
 8005660:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8005664:	897b      	ldrh	r3, [r7, #10]
 8005666:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800566a:	429a      	cmp	r2, r3
 800566c:	f4ff ad0a 	bcc.w	8005084 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	2b07      	cmp	r3, #7
 8005676:	f240 84e3 	bls.w	8006040 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8005680:	2301      	movs	r3, #1
 8005682:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8005686:	893b      	ldrh	r3, [r7, #8]
 8005688:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800568c:	4413      	add	r3, r2
 800568e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8005690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005692:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8005696:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800569a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800569c:	4413      	add	r3, r2
 800569e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80056a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056a4:	4413      	add	r3, r2
 80056a6:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80056a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80056aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ac:	4413      	add	r3, r2
 80056ae:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80056b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80056b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056b4:	4413      	add	r3, r2
 80056b6:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80056b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056bc:	4413      	add	r3, r2
 80056be:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80056c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056c4:	4413      	add	r3, r2
 80056c6:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80056c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80056d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80056e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80056ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	4413      	add	r3, r2
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8005706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8005712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800571e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	3304      	adds	r3, #4
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800572e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	3304      	adds	r3, #4
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800573c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	3304      	adds	r3, #4
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800574a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	3304      	adds	r3, #4
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8005758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	3304      	adds	r3, #4
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8005766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	3304      	adds	r3, #4
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	3304      	adds	r3, #4
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8005782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005786:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800578a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005792:	4413      	add	r3, r2
 8005794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8005798:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a0:	4413      	add	r3, r2
 80057a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 80057a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ae:	4413      	add	r3, r2
 80057b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 80057b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80057b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057bc:	4413      	add	r3, r2
 80057be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80057c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	4413      	add	r3, r2
 80057cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80057d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	4413      	add	r3, r2
 80057da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80057de:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e6:	4413      	add	r3, r2
 80057e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80057ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	ed93 7a00 	vldr	s14, [r3]
 80057fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	edd3 7a00 	vldr	s15, [r3]
 8005808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800580c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8005810:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	ed93 7a00 	vldr	s14, [r3]
 800581e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005830:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	ed93 7a00 	vldr	s14, [r3]
 8005842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	edd3 7a00 	vldr	s15, [r3]
 8005850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005854:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	ed93 7a00 	vldr	s14, [r3]
 8005866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	edd3 7a00 	vldr	s15, [r3]
 8005874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005878:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800587c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	ed93 7a00 	vldr	s14, [r3]
 800588a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	edd3 7a00 	vldr	s15, [r3]
 8005898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800589c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80058a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	ed93 7a00 	vldr	s14, [r3]
 80058ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	edd3 7a00 	vldr	s15, [r3]
 80058bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058c0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80058c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	ed93 7a00 	vldr	s14, [r3]
 80058d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	edd3 7a00 	vldr	s15, [r3]
 80058e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80058e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	ed93 7a00 	vldr	s14, [r3]
 80058f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	edd3 7a00 	vldr	s15, [r3]
 8005904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005908:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800590c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005910:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005918:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800591c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005920:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005928:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800592c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005930:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005938:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800593c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005940:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005948:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800594c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800595a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800595e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005962:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8005966:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800596a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800596e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005972:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	3304      	adds	r3, #4
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	ed93 7a00 	vldr	s14, [r3]
 8005986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3304      	adds	r3, #4
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	edd3 7a00 	vldr	s15, [r3]
 8005996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800599a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800599e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	3304      	adds	r3, #4
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	ed93 7a00 	vldr	s14, [r3]
 80059ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	3304      	adds	r3, #4
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	edd3 7a00 	vldr	s15, [r3]
 80059be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059c2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80059c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	3304      	adds	r3, #4
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	ed93 7a00 	vldr	s14, [r3]
 80059d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	3304      	adds	r3, #4
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	edd3 7a00 	vldr	s15, [r3]
 80059e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80059ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	3304      	adds	r3, #4
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	ed93 7a00 	vldr	s14, [r3]
 80059fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	3304      	adds	r3, #4
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	edd3 7a00 	vldr	s15, [r3]
 8005a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a12:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005a16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	ed93 7a00 	vldr	s14, [r3]
 8005a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	edd3 7a00 	vldr	s15, [r3]
 8005a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a3a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	3304      	adds	r3, #4
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	ed93 7a00 	vldr	s14, [r3]
 8005a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	3304      	adds	r3, #4
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	edd3 7a00 	vldr	s15, [r3]
 8005a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a62:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	ed93 7a00 	vldr	s14, [r3]
 8005a76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	edd3 7a00 	vldr	s15, [r3]
 8005a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a8a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	3304      	adds	r3, #4
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	ed93 7a00 	vldr	s14, [r3]
 8005a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	edd3 7a00 	vldr	s15, [r3]
 8005aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ab2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8005ab6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005aba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8005ac6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005aca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ad2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8005ad6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005ada:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ae2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005ae6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005aea:	edd7 7a08 	vldr	s15, [r7, #32]
 8005aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8005af6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005afa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b02:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8005b06:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005b0a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b12:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8005b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b2e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005b32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8005b42:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005b46:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8005b52:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005b56:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005b62:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b66:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005b72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005b82:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005b92:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b96:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005ba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	ed97 7a07 	vldr	s14, [r7, #28]
 8005bb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bb8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8005bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bd4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8005bd8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005bdc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005be8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005bec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8005bf8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005bfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c04:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8005c08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c0c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c14:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8005c18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c26:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c2e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005c32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	3304      	adds	r3, #4
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c42:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c4a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005c4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c52:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005c5e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c62:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005c6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005c7e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c82:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ca4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8005ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	3304      	adds	r3, #4
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc0:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005cc4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005cc8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8005cdc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005ce0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005cf4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005cf8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d00:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8005d0c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005d10:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d18:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d20:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8005d24:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d30:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8005d34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d40:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8005d44:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005d48:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d50:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005d54:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005d58:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d60:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005d64:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d70:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005d74:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d80:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005d84:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005d88:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d90:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005d94:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005d98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005da4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005da8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005db0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005db4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005db8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dc0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005dc4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005dc8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005dd4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005dd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005de4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005de8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005df4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005df8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e00:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8005e04:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005e08:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e10:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8005e14:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005e18:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e20:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8005e24:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e30:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005e34:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e40:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005e44:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e50:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005e54:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e58:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e60:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e72:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e7a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	3304      	adds	r3, #4
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e96:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005e9a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005e9e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005eaa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005eae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005eba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005ebe:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005eca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ece:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005eda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ee8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005ef4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	3304      	adds	r3, #4
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f04:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f0c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005f10:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f14:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005f20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005f24:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005f30:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f34:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005f40:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005f44:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f66:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8005f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	3304      	adds	r3, #4
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f82:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8005f86:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005f8a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8005f96:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005f9a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8005fa6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005faa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8005fb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005fba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8005fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fdc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8005fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ff0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ff8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8005ffc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006004:	4413      	add	r3, r2
 8006006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800600a:	897b      	ldrh	r3, [r7, #10]
 800600c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006010:	429a      	cmp	r2, r3
 8006012:	f4ff abba 	bcc.w	800578a <arm_radix8_butterfly_f32+0x746>

         j++;
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601a:	3301      	adds	r3, #1
 800601c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8006020:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	429a      	cmp	r2, r3
 800602a:	f4ff ab2c 	bcc.w	8005686 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800602e:	893b      	ldrh	r3, [r7, #8]
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006038:	2b07      	cmp	r3, #7
 800603a:	f63f a813 	bhi.w	8005064 <arm_radix8_butterfly_f32+0x20>
}
 800603e:	e000      	b.n	8006042 <arm_radix8_butterfly_f32+0xffe>
         break;
 8006040:	bf00      	nop
}
 8006042:	bf00      	nop
 8006044:	37f4      	adds	r7, #244	; 0xf4
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop

08006050 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8006050:	b480      	push	{r7}
 8006052:	b095      	sub	sp, #84	; 0x54
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	3b01      	subs	r3, #1
 8006070:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8006072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8006078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800607e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8006084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800608a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608c:	1d1a      	adds	r2, r3, #4
 800608e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8006094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006096:	1d1a      	adds	r2, r3, #4
 8006098:	64ba      	str	r2, [r7, #72]	; 0x48
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800609e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80060a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80060a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80060ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80060b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80060b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060ba:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80060be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80060c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	1d1a      	adds	r2, r3, #4
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060d8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80060dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80060e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	1d1a      	adds	r2, r3, #4
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060f6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80060fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4413      	add	r3, r2
 8006102:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8006104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006106:	3308      	adds	r3, #8
 8006108:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800610a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8006110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8006116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800611c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8006122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	64ba      	str	r2, [r7, #72]	; 0x48
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800612c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	64ba      	str	r2, [r7, #72]	; 0x48
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8006136:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800613a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800613e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006142:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8006146:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800614a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800614e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006152:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8006156:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800615a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8006166:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800616a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8006176:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800617a:	edd7 7a08 	vldr	s15, [r7, #32]
 800617e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006182:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8006186:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800618a:	edd7 7a08 	vldr	s15, [r7, #32]
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006196:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800619a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800619e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80061a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80061ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80061c4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80061c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80061cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80061d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80061dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	1d1a      	adds	r2, r3, #4
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061ee:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80061f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f4:	3308      	adds	r3, #8
 80061f6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80061f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fa:	3b08      	subs	r3, #8
 80061fc:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80061fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006200:	3b01      	subs	r3, #1
 8006202:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 8006204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f af7f 	bne.w	800610a <stage_rfft_f32+0xba>
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	3754      	adds	r7, #84	; 0x54
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 800621a:	b480      	push	{r7}
 800621c:	b095      	sub	sp, #84	; 0x54
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	3b01      	subs	r3, #1
 800623a:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800623c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8006242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8006248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624a:	3308      	adds	r3, #8
 800624c:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800624e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006252:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006268:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800626c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006270:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006286:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	4413      	add	r3, r2
 8006292:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8006294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006296:	3308      	adds	r3, #8
 8006298:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800629a:	e07c      	b.n	8006396 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800629c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80062a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80062a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80062ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80062b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b6:	1d1a      	adds	r2, r3, #4
 80062b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80062be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c0:	1d1a      	adds	r2, r3, #4
 80062c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80062c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80062cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80062d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80062d8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80062dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80062e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e4:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80062e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80062ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80062f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80062fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8006300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006304:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8006308:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800630c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006314:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8006318:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800631c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006324:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006328:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800632c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006334:	edd7 7a07 	vldr	s15, [r7, #28]
 8006338:	ee37 7a67 	vsub.f32	s14, s14, s15
 800633c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	1d1a      	adds	r2, r3, #4
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800634e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006352:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006356:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800635a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800635e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006362:	edd7 7a05 	vldr	s15, [r7, #20]
 8006366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800636a:	edd7 7a04 	vldr	s15, [r7, #16]
 800636e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800637c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006380:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8006384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006386:	3308      	adds	r3, #8
 8006388:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800638a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638c:	3b08      	subs	r3, #8
 800638e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8006390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006392:	3b01      	subs	r3, #1
 8006394:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 8006396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006398:	2b00      	cmp	r3, #0
 800639a:	f47f af7f 	bne.w	800629c <merge_rfft_f32+0x82>
   }

}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	3754      	adds	r7, #84	; 0x54
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8a1b      	ldrh	r3, [r3, #16]
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ff20 	bl	800621a <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	2301      	movs	r3, #1
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	6978      	ldr	r0, [r7, #20]
 80063e2:	f7fe fd74 	bl	8004ece <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80063e6:	e00a      	b.n	80063fe <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	2301      	movs	r3, #1
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f7fe fd6d 	bl	8004ece <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff fe29 	bl	8006050 <stage_rfft_f32>
}
 80063fe:	bf00      	nop
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	887a      	ldrh	r2, [r7, #2]
 800642a:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006434:	d023      	beq.n	800647e <arm_rfft_fast_init_f32+0x76>
 8006436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643a:	f300 808c 	bgt.w	8006556 <arm_rfft_fast_init_f32+0x14e>
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006442:	d02a      	beq.n	800649a <arm_rfft_fast_init_f32+0x92>
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	f300 8085 	bgt.w	8006556 <arm_rfft_fast_init_f32+0x14e>
 800644c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006450:	d031      	beq.n	80064b6 <arm_rfft_fast_init_f32+0xae>
 8006452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006456:	dc7e      	bgt.n	8006556 <arm_rfft_fast_init_f32+0x14e>
 8006458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645c:	d039      	beq.n	80064d2 <arm_rfft_fast_init_f32+0xca>
 800645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006462:	dc78      	bgt.n	8006556 <arm_rfft_fast_init_f32+0x14e>
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d042      	beq.n	80064ee <arm_rfft_fast_init_f32+0xe6>
 8006468:	2b80      	cmp	r3, #128	; 0x80
 800646a:	dc74      	bgt.n	8006556 <arm_rfft_fast_init_f32+0x14e>
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d04b      	beq.n	8006508 <arm_rfft_fast_init_f32+0x100>
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	dc70      	bgt.n	8006556 <arm_rfft_fast_init_f32+0x14e>
 8006474:	2b10      	cmp	r3, #16
 8006476:	d061      	beq.n	800653c <arm_rfft_fast_init_f32+0x134>
 8006478:	2b20      	cmp	r3, #32
 800647a:	d052      	beq.n	8006522 <arm_rfft_fast_init_f32+0x11a>
 800647c:	e06b      	b.n	8006556 <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8006484:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	4a38      	ldr	r2, [pc, #224]	; (800656c <arm_rfft_fast_init_f32+0x164>)
 800648a:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a38      	ldr	r2, [pc, #224]	; (8006570 <arm_rfft_fast_init_f32+0x168>)
 8006490:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a37      	ldr	r2, [pc, #220]	; (8006574 <arm_rfft_fast_init_f32+0x16c>)
 8006496:	615a      	str	r2, [r3, #20]
    break;
 8006498:	e060      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80064a0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4a34      	ldr	r2, [pc, #208]	; (8006578 <arm_rfft_fast_init_f32+0x170>)
 80064a6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4a34      	ldr	r2, [pc, #208]	; (800657c <arm_rfft_fast_init_f32+0x174>)
 80064ac:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a33      	ldr	r2, [pc, #204]	; (8006580 <arm_rfft_fast_init_f32+0x178>)
 80064b2:	615a      	str	r2, [r3, #20]
    break;
 80064b4:	e052      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80064bc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a30      	ldr	r2, [pc, #192]	; (8006584 <arm_rfft_fast_init_f32+0x17c>)
 80064c2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4a30      	ldr	r2, [pc, #192]	; (8006588 <arm_rfft_fast_init_f32+0x180>)
 80064c8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2f      	ldr	r2, [pc, #188]	; (800658c <arm_rfft_fast_init_f32+0x184>)
 80064ce:	615a      	str	r2, [r3, #20]
    break;
 80064d0:	e044      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80064d8:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4a2c      	ldr	r2, [pc, #176]	; (8006590 <arm_rfft_fast_init_f32+0x188>)
 80064de:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <arm_rfft_fast_init_f32+0x18c>)
 80064e4:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <arm_rfft_fast_init_f32+0x190>)
 80064ea:	615a      	str	r2, [r3, #20]
    break;
 80064ec:	e036      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	22d0      	movs	r2, #208	; 0xd0
 80064f2:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4a29      	ldr	r2, [pc, #164]	; (800659c <arm_rfft_fast_init_f32+0x194>)
 80064f8:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <arm_rfft_fast_init_f32+0x198>)
 80064fe:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a28      	ldr	r2, [pc, #160]	; (80065a4 <arm_rfft_fast_init_f32+0x19c>)
 8006504:	615a      	str	r2, [r3, #20]
    break;
 8006506:	e029      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2238      	movs	r2, #56	; 0x38
 800650c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <arm_rfft_fast_init_f32+0x1a0>)
 8006512:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a25      	ldr	r2, [pc, #148]	; (80065ac <arm_rfft_fast_init_f32+0x1a4>)
 8006518:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a24      	ldr	r2, [pc, #144]	; (80065b0 <arm_rfft_fast_init_f32+0x1a8>)
 800651e:	615a      	str	r2, [r3, #20]
    break;
 8006520:	e01c      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2230      	movs	r2, #48	; 0x30
 8006526:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <arm_rfft_fast_init_f32+0x1ac>)
 800652c:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4a21      	ldr	r2, [pc, #132]	; (80065b8 <arm_rfft_fast_init_f32+0x1b0>)
 8006532:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a21      	ldr	r2, [pc, #132]	; (80065bc <arm_rfft_fast_init_f32+0x1b4>)
 8006538:	615a      	str	r2, [r3, #20]
    break;
 800653a:	e00f      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2214      	movs	r2, #20
 8006540:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <arm_rfft_fast_init_f32+0x1b8>)
 8006546:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <arm_rfft_fast_init_f32+0x1bc>)
 800654c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <arm_rfft_fast_init_f32+0x1c0>)
 8006552:	615a      	str	r2, [r3, #20]
    break;
 8006554:	e002      	b.n	800655c <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8006556:	23ff      	movs	r3, #255	; 0xff
 8006558:	73fb      	strb	r3, [r7, #15]
    break;
 800655a:	bf00      	nop
  }

  return (status);
 800655c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	0801f124 	.word	0x0801f124
 8006570:	0801998c 	.word	0x0801998c
 8006574:	08024e64 	.word	0x08024e64
 8006578:	0801e314 	.word	0x0801e314
 800657c:	0801798c 	.word	0x0801798c
 8006580:	08022e64 	.word	0x08022e64
 8006584:	0801df94 	.word	0x0801df94
 8006588:	0801698c 	.word	0x0801698c
 800658c:	08021e64 	.word	0x08021e64
 8006590:	0801dc24 	.word	0x0801dc24
 8006594:	0801618c 	.word	0x0801618c
 8006598:	08021664 	.word	0x08021664
 800659c:	0801da84 	.word	0x0801da84
 80065a0:	08015d8c 	.word	0x08015d8c
 80065a4:	08021264 	.word	0x08021264
 80065a8:	0801da14 	.word	0x0801da14
 80065ac:	08015b8c 	.word	0x08015b8c
 80065b0:	08021064 	.word	0x08021064
 80065b4:	0801d9b4 	.word	0x0801d9b4
 80065b8:	08015a8c 	.word	0x08015a8c
 80065bc:	08020f64 	.word	0x08020f64
 80065c0:	0801d98c 	.word	0x0801d98c
 80065c4:	08015a0c 	.word	0x08015a0c
 80065c8:	08020ee4 	.word	0x08020ee4

080065cc <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b08f      	sub	sp, #60	; 0x3c
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 80065d8:	887b      	ldrh	r3, [r7, #2]
 80065da:	089b      	lsrs	r3, r3, #2
 80065dc:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 80065e6:	e032      	b.n	800664e <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 80065e8:	f107 0210 	add.w	r2, r7, #16
 80065ec:	6813      	ldr	r3, [r2, #0]
 80065ee:	1d19      	adds	r1, r3, #4
 80065f0:	6011      	str	r1, [r2, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	2307      	movs	r3, #7
 8006600:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <arm_relu_q7+0x48>
    return op1;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	e003      	b.n	800661c <arm_relu_q7+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	fa62 f303 	ror.w	r3, r2, r3
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2200      	movs	r2, #0
 8006622:	627a      	str	r2, [r7, #36]	; 0x24
 8006624:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	6a3a      	ldr	r2, [r7, #32]
 800662a:	fac3 f312 	qsub8	r3, r3, r2
 800662e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	43d9      	mvns	r1, r3
 8006638:	f107 020c 	add.w	r2, r7, #12
 800663c:	6813      	ldr	r3, [r2, #0]
 800663e:	1d18      	adds	r0, r3, #4
 8006640:	6010      	str	r0, [r2, #0]
 8006642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006644:	400a      	ands	r2, r1
 8006646:	601a      	str	r2, [r3, #0]
        i--;
 8006648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800664a:	3b01      	subs	r3, #1
 800664c:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800664e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1c9      	bne.n	80065e8 <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800665c:	e00d      	b.n	800667a <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f993 3000 	ldrsb.w	r3, [r3]
 8006664:	2b00      	cmp	r3, #0
 8006666:	da02      	bge.n	800666e <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	613b      	str	r3, [r7, #16]
        i--;
 8006674:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006676:	3b01      	subs	r3, #1
 8006678:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800667a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1ee      	bne.n	800665e <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	373c      	adds	r7, #60	; 0x3c
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t * Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y, 
                                                  q15_t * bufferA, 
                                                  q7_t * bufferB)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b0aa      	sub	sp, #168	; 0xa8
 8006692:	af04      	add	r7, sp, #16
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	4608      	mov	r0, r1
 8006698:	4611      	mov	r1, r2
 800669a:	461a      	mov	r2, r3
 800669c:	4603      	mov	r3, r0
 800669e:	817b      	strh	r3, [r7, #10]
 80066a0:	460b      	mov	r3, r1
 80066a2:	813b      	strh	r3, [r7, #8]
 80066a4:	4613      	mov	r3, r2
 80066a6:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 80066a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 80066b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11e      	bne.n	8006702 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066c4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d117      	bne.n	8006702 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066d2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d113      	bne.n	8006702 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066da:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d10f      	bne.n	8006702 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        || padding_x != 0 || padding_y != 0 || stride_x != 1 || stride_y != 1)
 80066e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d107      	bne.n	8006702 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066f2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d103      	bne.n	8006702 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066fa:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d002      	beq.n	8006708 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8006702:	f06f 0302 	mvn.w	r3, #2
 8006706:	e162      	b.n	80069ce <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x340>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006708:	2300      	movs	r3, #0
 800670a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800670e:	e05f      	b.n	80067d0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x142>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006710:	2300      	movs	r3, #0
 8006712:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006716:	e04e      	b.n	80067b6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x128>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer,
 8006718:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800671c:	897a      	ldrh	r2, [r7, #10]
 800671e:	fb02 f203 	mul.w	r2, r2, r3
 8006722:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8006726:	4413      	add	r3, r2
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	fb02 f303 	mul.w	r3, r2, r3
 800672e:	461a      	mov	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	88fa      	ldrh	r2, [r7, #6]
 8006736:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800673a:	4618      	mov	r0, r3
 800673c:	f002 fbd4 	bl	8008ee8 <arm_q7_to_q15_reordered_no_shift>
                                             ch_im_in);
            pBuffer += ch_im_in;
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006748:	4413      	add	r3, r2
 800674a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006754:	fb02 f303 	mul.w	r3, r2, r3
 8006758:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800675c:	fb02 f303 	mul.w	r3, r2, r3
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006766:	4413      	add	r3, r2
 8006768:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800676c:	429a      	cmp	r2, r3
 800676e:	d11b      	bne.n	80067a8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
 8006770:	88f9      	ldrh	r1, [r7, #6]
 8006772:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800677a:	9303      	str	r3, [sp, #12]
 800677c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	460b      	mov	r3, r1
 8006790:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006794:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006798:	f001 fcea 	bl	8008170 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 800679c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                /* counter reset */
                pBuffer = bufferA;
 80067a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80067a8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3301      	adds	r3, #1
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80067b6:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 80067ba:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80067be:	429a      	cmp	r2, r3
 80067c0:	dbaa      	blt.n	8006718 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80067c2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3301      	adds	r3, #1
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80067d0:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 80067d4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80067d8:	429a      	cmp	r2, r3
 80067da:	db99      	blt.n	8006710 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 80067dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80067e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e4:	429a      	cmp	r2, r3
 80067e6:	f000 80f1 	beq.w	80069cc <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x33e>
    {
        const q7_t *pA = wt;
 80067ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80067f8:	e0e1      	b.n	80069be <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x330>
        {
            q31_t     sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 80067fa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80067fe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006802:	4413      	add	r3, r2
 8006804:	f993 3000 	ldrsb.w	r3, [r3]
 8006808:	461a      	mov	r2, r3
 800680a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800680e:	409a      	lsls	r2, r3
 8006810:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006814:	3b01      	subs	r3, #1
 8006816:	2101      	movs	r1, #1
 8006818:	fa01 f303 	lsl.w	r3, r1, r3
 800681c:	4413      	add	r3, r2
 800681e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            q15_t    *pB = bufferA;
 8006822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006826:	623b      	str	r3, [r7, #32]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	109b      	asrs	r3, r3, #2
 800683c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            while (colCnt)
 8006840:	e06b      	b.n	800691a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x28c>
 8006842:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	f107 031c 	add.w	r3, r7, #28
 800684c:	647b      	str	r3, [r7, #68]	; 0x44
 800684e:	f107 0318 	add.w	r3, r7, #24
 8006852:	643b      	str	r3, [r7, #64]	; 0x40
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8006854:	f107 0214 	add.w	r2, r7, #20
 8006858:	6813      	ldr	r3, [r2, #0]
 800685a:	1d19      	adds	r1, r3, #4
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 8006862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006864:	63bb      	str	r3, [r7, #56]	; 0x38
 8006866:	2308      	movs	r3, #8
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
  op2 %= 32U;
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
  if (op2 == 0U)
 8006872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1ee>
    return op1;
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	e003      	b.n	8006884 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1f6>
  return (op1 >> op2) | (op1 << (32U - op2));
 800687c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	fa62 f303 	ror.w	r3, r2, r3
 8006884:	633b      	str	r3, [r7, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	fa2f f383 	sxtb16	r3, r3
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	461a      	mov	r2, r3
 8006892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006894:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8006896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	fa2f f383 	sxtb16	r3, r3
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	461a      	mov	r2, r3
 80068a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a8:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 80068aa:	697b      	ldr	r3, [r7, #20]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (const q7_t *)read_and_pad_reordered((void *)pA, &inA1, &inA2);
 80068ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 80068b0:	f107 0220 	add.w	r2, r7, #32
 80068b4:	6813      	ldr	r3, [r2, #0]
 80068b6:	1d19      	adds	r1, r3, #4
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA1, inB1, sum);
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068c8:	6579      	str	r1, [r7, #84]	; 0x54
 80068ca:	653a      	str	r2, [r7, #80]	; 0x50
 80068cc:	64fb      	str	r3, [r7, #76]	; 0x4c

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80068ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068d4:	fb23 1302 	smlad	r3, r3, r2, r1
 80068d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80068da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                inB2 = *__SIMD32(pB)++;
 80068e0:	f107 0220 	add.w	r2, r7, #32
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	1d19      	adds	r1, r3, #4
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA2, inB2, sum);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	4619      	mov	r1, r3
 80068f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068f8:	6679      	str	r1, [r7, #100]	; 0x64
 80068fa:	663a      	str	r2, [r7, #96]	; 0x60
 80068fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80068fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006902:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006904:	fb23 1302 	smlad	r3, r3, r2, r1
 8006908:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 800690a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800690c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                colCnt--;
 8006910:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006914:	3b01      	subs	r3, #1
 8006916:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 800691a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800691e:	2b00      	cmp	r3, #0
 8006920:	d18f      	bne.n	8006842 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b4>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006928:	fb12 f303 	smulbb	r3, r2, r3
 800692c:	b29b      	uxth	r3, r3
 800692e:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006932:	fb12 f303 	smulbb	r3, r2, r3
 8006936:	b29b      	uxth	r3, r3
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8006940:	e01d      	b.n	800697e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2f0>
            {
                q7_t      inA1 = *pA++;
 8006942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                q15_t     inB1 = *pB++;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	1c9a      	adds	r2, r3, #2
 8006956:	623a      	str	r2, [r7, #32]
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                sum += inA1 * inB1;
 800695e:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8006962:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800696e:	4413      	add	r3, r2
 8006970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                colCnt--;
 8006974:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006978:	3b01      	subs	r3, #1
 800697a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 800697e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1dd      	bne.n	8006942 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2b4>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 8006986:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800698a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800698e:	fa42 f303 	asr.w	r3, r2, r3
 8006992:	67bb      	str	r3, [r7, #120]	; 0x78
 8006994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006996:	f303 0307 	ssat	r3, #8, r3
 800699a:	677b      	str	r3, [r7, #116]	; 0x74
 800699c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800699e:	b25a      	sxtb	r2, r3
 80069a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069a4:	701a      	strb	r2, [r3, #0]
            pOut++;
 80069a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069aa:	3301      	adds	r3, #1
 80069ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80069b0:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3301      	adds	r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80069be:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80069c2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80069c6:	429a      	cmp	r2, r3
 80069c8:	f6ff af17 	blt.w	80067fa <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16c>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3798      	adds	r7, #152	; 0x98
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t * Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t * bufferA,
                                               q7_t * bufferB)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b0ac      	sub	sp, #176	; 0xb0
 80069dc:	af04      	add	r7, sp, #16
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	817b      	strh	r3, [r7, #10]
 80069ea:	460b      	mov	r3, r1
 80069ec:	813b      	strh	r3, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 80069fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006a08:	e0cf      	b.n	8006baa <arm_convolve_HWC_q7_basic_nonsquare+0x1d2>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006a10:	e0bd      	b.n	8006b8e <arm_convolve_HWC_q7_basic_nonsquare+0x1b6>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006a12:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a16:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8006a1a:	fb12 f303 	smulbb	r3, r2, r3
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006a2c:	e061      	b.n	8006af2 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006a2e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006a32:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8006a36:	fb12 f303 	smulbb	r3, r2, r3
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006a48:	e03c      	b.n	8006ac4 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006a4a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	db0d      	blt.n	8006a6e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a52:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006a56:	893b      	ldrh	r3, [r7, #8]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	da08      	bge.n	8006a6e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a5c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	db04      	blt.n	8006a6e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a64:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006a68:	897b      	ldrh	r3, [r7, #10]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	db08      	blt.n	8006a80 <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	461a      	mov	r2, r3
 8006a74:	2100      	movs	r1, #0
 8006a76:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006a7a:	f008 fe85 	bl	800f788 <memset>
 8006a7e:	e013      	b.n	8006aa8 <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8006a80:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006a84:	897a      	ldrh	r2, [r7, #10]
 8006a86:	fb02 f203 	mul.w	r2, r2, r3
 8006a8a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006a8e:	4413      	add	r3, r2
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	fb02 f303 	mul.w	r3, r2, r3
 8006a96:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 f9ae 	bl	8008e04 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006ab6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3301      	adds	r3, #1
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006ac4:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006ac8:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006acc:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8006ad0:	fb01 f103 	mul.w	r1, r1, r3
 8006ad4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006ad8:	1ac9      	subs	r1, r1, r3
 8006ada:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006ade:	440b      	add	r3, r1
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	dbb2      	blt.n	8006a4a <arm_convolve_HWC_q7_basic_nonsquare+0x72>
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006ae4:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3301      	adds	r3, #1
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006af2:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006af6:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006afa:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8006afe:	fb01 f103 	mul.w	r1, r1, r3
 8006b02:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006b06:	1ac9      	subs	r1, r1, r3
 8006b08:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b0c:	440b      	add	r3, r1
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	db8d      	blt.n	8006a2e <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006b20:	fb02 f303 	mul.w	r3, r2, r3
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d125      	bne.n	8006b80 <arm_convolve_HWC_q7_basic_nonsquare+0x1a8>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 8006b34:	88fa      	ldrh	r2, [r7, #6]
 8006b36:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b3a:	fb12 f303 	smulbb	r3, r2, r3
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006b44:	fb12 f303 	smulbb	r3, r2, r3
 8006b48:	b299      	uxth	r1, r3
 8006b4a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b52:	9303      	str	r3, [sp, #12]
 8006b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b58:	9302      	str	r3, [sp, #8]
 8006b5a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	460b      	mov	r3, r1
 8006b68:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006b6c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006b70:	f000 fd8c 	bl	800768c <arm_nn_mat_mult_kernel_q7_q15>
 8006b74:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006b80:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3301      	adds	r3, #1
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006b8e:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8006b92:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8006b96:	429a      	cmp	r2, r3
 8006b98:	f6ff af3b 	blt.w	8006a12 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006b9c:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006baa:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 8006bae:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	f6ff af29 	blt.w	8006a0a <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8006bb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	f000 80fa 	beq.w	8006dba <arm_convolve_HWC_q7_basic_nonsquare+0x3e2>
    {
        const q7_t *pA = wt;
 8006bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bd4:	e0ea      	b.n	8006dac <arm_convolve_HWC_q7_basic_nonsquare+0x3d4>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8006bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bde:	4413      	add	r3, r2
 8006be0:	f993 3000 	ldrsb.w	r3, [r3]
 8006be4:	461a      	mov	r2, r3
 8006be6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006bea:	409a      	lsls	r2, r3
 8006bec:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 8006bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c02:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006c12:	fb02 f303 	mul.w	r3, r2, r3
 8006c16:	109b      	asrs	r3, r3, #2
 8006c18:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 8006c1c:	e078      	b.n	8006d10 <arm_convolve_HWC_q7_basic_nonsquare+0x338>
 8006c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	f107 0318 	add.w	r3, r7, #24
 8006c28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c2a:	f107 0314 	add.w	r3, r7, #20
 8006c2e:	647b      	str	r3, [r7, #68]	; 0x44
        q31_t     inA = *__SIMD32(source)++;
 8006c30:	f107 0210 	add.w	r2, r7, #16
 8006c34:	6813      	ldr	r3, [r2, #0]
 8006c36:	1d19      	adds	r1, r3, #4
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8006c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c42:	2308      	movs	r3, #8
 8006c44:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <arm_convolve_HWC_q7_basic_nonsquare+0x280>
    return op1;
 8006c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c56:	e003      	b.n	8006c60 <arm_convolve_HWC_q7_basic_nonsquare+0x288>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	fa62 f303 	ror.w	r3, r2, r3
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	fa2f f383 	sxtb16	r3, r3
 8006c68:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 8006c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	fa2f f383 	sxtb16	r3, r3
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	623b      	str	r3, [r7, #32]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8006c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c80:	4b50      	ldr	r3, [pc, #320]	; (8006dc4 <arm_convolve_HWC_q7_basic_nonsquare+0x3ec>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	6a3a      	ldr	r2, [r7, #32]
 8006c86:	0c12      	lsrs	r2, r2, #16
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c8e:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	041b      	lsls	r3, r3, #16
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9e:	601a      	str	r2, [r3, #0]
        return source;
 8006ca0:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8006ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 8006ca6:	f107 021c 	add.w	r2, r7, #28
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	1d19      	adds	r1, r3, #4
 8006cae:	6011      	str	r1, [r2, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA1, inB1, sum);
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cc0:	657a      	str	r2, [r7, #84]	; 0x54
 8006cc2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cca:	fb23 1302 	smlad	r3, r3, r2, r1
 8006cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 8006cd6:	f107 021c 	add.w	r2, r7, #28
 8006cda:	6813      	ldr	r3, [r2, #0]
 8006cdc:	1d19      	adds	r1, r3, #4
 8006cde:	6011      	str	r1, [r2, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA2, inB2, sum);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cee:	66b9      	str	r1, [r7, #104]	; 0x68
 8006cf0:	667a      	str	r2, [r7, #100]	; 0x64
 8006cf2:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006cf8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006cfa:	fb23 1302 	smlad	r3, r3, r2, r1
 8006cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8006d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 8006d06:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d10:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d182      	bne.n	8006c1e <arm_convolve_HWC_q7_basic_nonsquare+0x246>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006d18:	88fa      	ldrh	r2, [r7, #6]
 8006d1a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006d1e:	fb12 f303 	smulbb	r3, r2, r3
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006d28:	fb12 f303 	smulbb	r3, r2, r3
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d36:	e01d      	b.n	8006d74 <arm_convolve_HWC_q7_basic_nonsquare+0x39c>
            {
                q7_t      inA1 = *pA++;
 8006d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	61fa      	str	r2, [r7, #28]
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 8006d54:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8006d58:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8006d5c:	fb02 f303 	mul.w	r3, r2, r3
 8006d60:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d64:	4413      	add	r3, r2
 8006d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 8006d6a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d74:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1dd      	bne.n	8006d38 <arm_convolve_HWC_q7_basic_nonsquare+0x360>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8006d7c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d84:	fa42 f303 	asr.w	r3, r2, r3
 8006d88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d8c:	f303 0307 	ssat	r3, #8, r3
 8006d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006d9e:	b24a      	sxtb	r2, r1
 8006da0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8006da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da6:	3301      	adds	r3, #1
 8006da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dac:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006db0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006db4:	429a      	cmp	r2, r3
 8006db6:	f6ff af0e 	blt.w	8006bd6 <arm_convolve_HWC_q7_basic_nonsquare+0x1fe>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	37a0      	adds	r7, #160	; 0xa0
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	ffff0000 	.word	0xffff0000

08006dc8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>:
                                                         q7_t * Im_out,
                                                         const uint16_t dim_im_out_x,
                                                         const uint16_t dim_im_out_y, 
                                                         q15_t * bufferA, 
                                                         q7_t * bufferB)
{
 8006dc8:	b590      	push	{r4, r7, lr}
 8006dca:	b0d3      	sub	sp, #332	; 0x14c
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	f107 040c 	add.w	r4, r7, #12
 8006dd2:	6020      	str	r0, [r4, #0]
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f107 030a 	add.w	r3, r7, #10
 8006dde:	4622      	mov	r2, r4
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4602      	mov	r2, r0
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	1dbb      	adds	r3, r7, #6
 8006dec:	460a      	mov	r2, r1
 8006dee:	801a      	strh	r2, [r3, #0]
 *
 */

    int16_t   i_out_y, i_out_x;
    int16_t   i_ker_y, i_ker_x;
    q7_t     *colBuffer = (q7_t *) bufferA;
 8006df0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006df4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q7_t     *pBuffer = colBuffer;
 8006df8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dfc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    const q7_t *pBias = bias;
 8006e00:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006e04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    q7_t     *pOut = Im_out;
 8006e08:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006e0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t  rowCnt;
    uint16_t  row_shift;

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8006e10:	1dbb      	adds	r3, r7, #6
 8006e12:	881a      	ldrh	r2, [r3, #0]
 8006e14:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d003      	beq.n	8006e24 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8006e1c:	f06f 0302 	mvn.w	r3, #2
 8006e20:	f000 bc2f 	b.w	8007682 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8ba>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8006e2a:	f000 bc22 	b.w	8007672 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8aa>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8006e34:	f000 bc0f 	b.w	8007656 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x88e>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006e38:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006e3c:	f8b7 2174 	ldrh.w	r2, [r7, #372]	; 0x174
 8006e40:	fb12 f303 	smulbb	r3, r2, r3
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
 8006e52:	e06b      	b.n	8006f2c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x164>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006e54:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 8006e58:	f8b7 2170 	ldrh.w	r2, [r7, #368]	; 0x170
 8006e5c:	fb12 f303 	smulbb	r3, r2, r3
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8006e6e:	e046      	b.n	8006efe <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x136>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006e70:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db11      	blt.n	8006e9c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e78:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006e7c:	f107 0308 	add.w	r3, r7, #8
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	da0a      	bge.n	8006e9c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e86:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	db06      	blt.n	8006e9c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e8e:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006e92:	f107 030a 	add.w	r3, r7, #10
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	db08      	blt.n	8006eae <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xe6>
                    {
                        /* arm_fill_q7(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, ch_im_in);
 8006e9c:	1dbb      	adds	r3, r7, #6
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006ea8:	f008 fc6e 	bl	800f788 <memset>
 8006eac:	e019      	b.n	8006ee2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x11a>
                    } else
                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
 8006eae:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006eb2:	f107 020a 	add.w	r2, r7, #10
 8006eb6:	8812      	ldrh	r2, [r2, #0]
 8006eb8:	fb02 f203 	mul.w	r2, r2, r3
 8006ebc:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006ec0:	4413      	add	r3, r2
 8006ec2:	1dba      	adds	r2, r7, #6
 8006ec4:	8812      	ldrh	r2, [r2, #0]
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	1899      	adds	r1, r3, r2
 8006ed4:	1dbb      	adds	r3, r7, #6
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006ede:	f008 fc2b 	bl	800f738 <memcpy>
                    }
                    pBuffer += ch_im_in;
 8006ee2:	1dbb      	adds	r3, r7, #6
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006eea:	4413      	add	r3, r2
 8006eec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                     i_ker_x++)
 8006ef0:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006efe:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006f02:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8006f06:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 8006f0a:	fb01 f103 	mul.w	r1, r1, r3
 8006f0e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006f12:	1ac9      	subs	r1, r1, r3
 8006f14:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8006f18:	440b      	add	r3, r1
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	dba8      	blt.n	8006e70 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa8>
                 i_ker_y++)
 8006f1e:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3301      	adds	r3, #1
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006f2c:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006f30:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8006f34:	f8b7 1174 	ldrh.w	r1, [r7, #372]	; 0x174
 8006f38:	fb01 f103 	mul.w	r1, r1, r3
 8006f3c:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006f40:	1ac9      	subs	r1, r1, r3
 8006f42:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8006f46:	440b      	add	r3, r1
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	db83      	blt.n	8006e54 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8c>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 8006f4c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006f50:	089b      	lsrs	r3, r3, #2
 8006f52:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            row_shift = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
            pBias = bias;
 8006f5c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006f60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

            while (rowCnt)
 8006f64:	e2e4      	b.n	8007530 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x768>
            {
                q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006f70:	f993 3000 	ldrsb.w	r3, [r3]
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006f80:	3b01      	subs	r3, #1
 8006f82:	2101      	movs	r1, #1
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006f98:	f993 3000 	ldrsb.w	r3, [r3]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006fa2:	409a      	lsls	r2, r3
 8006fa4:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	2101      	movs	r1, #1
 8006fac:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006fb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006fca:	409a      	lsls	r2, r3
 8006fcc:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006fde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006ff2:	409a      	lsls	r2, r3
 8006ff4:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8007000:	4413      	add	r3, r2
 8007002:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
 8007006:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 800700a:	f8b7 2164 	ldrh.w	r2, [r7, #356]	; 0x164
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	105b      	asrs	r3, r3, #1
 8007014:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                q7_t     *pB = colBuffer + row_shift;
 8007018:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800701c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007020:	441a      	add	r2, r3
 8007022:	f107 0320 	add.w	r3, r7, #32
 8007026:	601a      	str	r2, [r3, #0]
                const q7_t *pA = wt + row_shift;
 8007028:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800702c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8007030:	441a      	add	r2, r3
 8007032:	f107 031c 	add.w	r3, r7, #28
 8007036:	601a      	str	r2, [r3, #0]
                row_shift += 4;
 8007038:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800703c:	3304      	adds	r3, #4
 800703e:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 8007042:	e198      	b.n	8007376 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5ae>
                {
                    q31_t     inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = *__SIMD32(pB);
 8007044:	f107 0320 	add.w	r3, r7, #32
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    pB += ch_im_in;
 8007050:	f107 0320 	add.w	r3, r7, #32
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	1dbb      	adds	r3, r7, #6
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	441a      	add	r2, r3
 800705c:	f107 0320 	add.w	r3, r7, #32
 8007060:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pB);
 8007062:	f107 0320 	add.w	r3, r7, #32
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pB += ch_im_in;
 800706e:	f107 0320 	add.w	r3, r7, #32
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	1dbb      	adds	r3, r7, #6
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	441a      	add	r2, r3
 800707a:	f107 0320 	add.w	r3, r7, #32
 800707e:	601a      	str	r2, [r3, #0]
                    inB2 = __PKHTB(opB, inB1, 16);
 8007080:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007084:	4bc4      	ldr	r3, [pc, #784]	; (8007398 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 8007086:	4013      	ands	r3, r2
 8007088:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800708c:	0c12      	lsrs	r2, r2, #16
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                    inB1 = __PKHBT(inB1, opB, 16);
 8007094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007098:	b29a      	uxth	r2, r3
 800709a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    inA1 = *__SIMD32(pA);
 80070a6:	f107 031c 	add.w	r3, r7, #28
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    pA += ch_im_in;
 80070b2:	f107 031c 	add.w	r3, r7, #28
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	1dbb      	adds	r3, r7, #6
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	441a      	add	r2, r3
 80070be:	f107 031c 	add.w	r3, r7, #28
 80070c2:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pA);
 80070c4:	f107 031c 	add.w	r3, r7, #28
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pA += ch_im_in;
 80070d0:	f107 031c 	add.w	r3, r7, #28
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	1dbb      	adds	r3, r7, #6
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	441a      	add	r2, r3
 80070dc:	f107 031c 	add.w	r3, r7, #28
 80070e0:	601a      	str	r2, [r3, #0]
                    inA2 = __PKHTB(opB, inA1, 16);
 80070e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80070e6:	4bac      	ldr	r3, [pc, #688]	; (8007398 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80070ee:	0c12      	lsrs	r2, r2, #16
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    inA1 = __PKHBT(inA1, opB, 16);
 80070f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007100:	041b      	lsls	r3, r3, #16
 8007102:	4313      	orrs	r3, r2
 8007104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    opA = __SXTB16(inA1);
 8007108:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800710c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	fa2f f283 	sxtb16	r2, r3
 800711c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007120:	601a      	str	r2, [r3, #0]
  return(result);
 8007122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB1);
 800712c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007134:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	fa2f f283 	sxtb16	r2, r3
 8007140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007144:	601a      	str	r2, [r3, #0]
  return(result);
 8007146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum = __SMLAD(opA, opB, sum);
 8007150:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8007154:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007158:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800715c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007160:	6018      	str	r0, [r3, #0]
 8007162:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007166:	6019      	str	r1, [r3, #0]
 8007168:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800716c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800716e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800717e:	6809      	ldr	r1, [r1, #0]
 8007180:	fb23 1202 	smlad	r2, r3, r2, r1
 8007184:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007188:	601a      	str	r2, [r3, #0]
  return(result);
 800718a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    opA = __SXTB16(__ROR(inA1, 8));
 8007194:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071a2:	2208      	movs	r2, #8
 80071a4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80071a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071aa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	f002 021f 	and.w	r2, r2, #31
 80071b4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80071b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x400>
    return op1;
 80071c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	e007      	b.n	80071d8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x410>
  return (op1 >> op2) | (op1 << (32U - op2));
 80071c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80071cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	fa62 f303 	ror.w	r3, r2, r3
 80071d8:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071dc:	fa2f f383 	sxtb16	r3, r3
 80071e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80071e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB1, 8));
 80071e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ee:	2308      	movs	r3, #8
 80071f0:	657b      	str	r3, [r7, #84]	; 0x54
  op2 %= 32U;
 80071f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (op2 == 0U)
 80071fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x43c>
    return op1;
 8007200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007202:	e003      	b.n	800720c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007208:	fa62 f303 	ror.w	r3, r2, r3
 800720c:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800720e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007210:	fa2f f383 	sxtb16	r3, r3
 8007214:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8007216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum2 = __SMLAD(opA, opB, sum2);
 800721c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007220:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007228:	6739      	str	r1, [r7, #112]	; 0x70
 800722a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800722c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800722e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007234:	fb23 1302 	smlad	r3, r3, r2, r1
 8007238:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800723a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    opA = __SXTB16(inA2);
 8007240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007244:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007248:	fa2f f383 	sxtb16	r3, r3
 800724c:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 800724e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB2);
 8007254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800725c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007260:	fa2f f383 	sxtb16	r3, r3
 8007264:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8007266:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum3 = __SMLAD(opA, opB, sum3);
 800726c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007270:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007274:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007278:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800727c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007288:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800728c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007290:	fb23 1302 	smlad	r3, r3, r2, r1
 8007294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8007298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800729c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    opA = __SXTB16(__ROR(inA2, 8));
 80072a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072a8:	2308      	movs	r3, #8
 80072aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  op2 %= 32U;
 80072ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (op2 == 0U)
 80072ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x500>
    return op1;
 80072c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c6:	e005      	b.n	80072d4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x50c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80072c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80072cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072d0:	fa62 f303 	ror.w	r3, r2, r3
 80072d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80072d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072dc:	fa2f f383 	sxtb16	r3, r3
 80072e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 80072e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB2, 8));
 80072ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072f4:	2308      	movs	r3, #8
 80072f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  op2 %= 32U;
 80072fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (op2 == 0U)
 8007306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d102      	bne.n	8007314 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x54c>
    return op1;
 800730e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007312:	e005      	b.n	8007320 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x558>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007314:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800731c:	fa62 f303 	ror.w	r3, r2, r3
 8007320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007328:	fa2f f383 	sxtb16	r3, r3
 800732c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8007330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007334:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum4 = __SMLAD(opA, opB, sum4);
 8007338:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800733c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007340:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007344:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800734c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007358:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800735c:	fb23 1302 	smlad	r3, r3, r2, r1
 8007360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8007364:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 800736c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007370:	3b01      	subs	r3, #1
 8007372:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007376:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800737a:	2b00      	cmp	r3, #0
 800737c:	f47f ae62 	bne.w	8007044 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x27c>
                              [ch_im_in] "r"(ch_im_in):"r0", "r1", "r2", "r3", "r4", "r5");
#endif                          /*ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

                colCnt = (dim_kernel_x * dim_kernel_y) & 0x1;
 8007380:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007384:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007388:	fb12 f303 	smulbb	r3, r2, r3
 800738c:	b29b      	uxth	r3, r3
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007396:	e066      	b.n	8007466 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x69e>
 8007398:	ffff0000 	.word	0xffff0000
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 800739c:	f107 031c 	add.w	r3, r7, #28
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	f107 0318 	add.w	r3, r7, #24
 80073a8:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 80073aa:	f107 031c 	add.w	r3, r7, #28
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	1dbb      	adds	r3, r7, #6
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	441a      	add	r2, r3
 80073b6:	f107 031c 	add.w	r3, r7, #28
 80073ba:	601a      	str	r2, [r3, #0]
                    inB.word = *__SIMD32(pB);
 80073bc:	f107 0320 	add.w	r3, r7, #32
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 80073ca:	f107 0320 	add.w	r3, r7, #32
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	1dbb      	adds	r3, r7, #6
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	441a      	add	r2, r3
 80073d6:	f107 0320 	add.w	r3, r7, #32
 80073da:	601a      	str	r2, [r3, #0]
                    sum += inA.bytes[0] * inB.bytes[0];
 80073dc:	f107 0318 	add.w	r3, r7, #24
 80073e0:	f993 3000 	ldrsb.w	r3, [r3]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f107 0314 	add.w	r3, r7, #20
 80073ea:	f993 3000 	ldrsb.w	r3, [r3]
 80073ee:	fb03 f302 	mul.w	r3, r3, r2
 80073f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80073f6:	4413      	add	r3, r2
 80073f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum2 += inA.bytes[1] * inB.bytes[1];
 80073fc:	f107 0318 	add.w	r3, r7, #24
 8007400:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007404:	461a      	mov	r2, r3
 8007406:	f107 0314 	add.w	r3, r7, #20
 800740a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800740e:	fb03 f302 	mul.w	r3, r3, r2
 8007412:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007416:	4413      	add	r3, r2
 8007418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    sum3 += inA.bytes[2] * inB.bytes[2];
 800741c:	f107 0318 	add.w	r3, r7, #24
 8007420:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007424:	461a      	mov	r2, r3
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800742e:	fb03 f302 	mul.w	r3, r3, r2
 8007432:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007436:	4413      	add	r3, r2
 8007438:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    sum4 += inA.bytes[3] * inB.bytes[3];
 800743c:	f107 0318 	add.w	r3, r7, #24
 8007440:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007444:	461a      	mov	r2, r3
 8007446:	f107 0314 	add.w	r3, r7, #20
 800744a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800744e:	fb03 f302 	mul.w	r3, r3, r2
 8007452:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007456:	4413      	add	r3, r2
 8007458:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 800745c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007460:	3b01      	subs	r3, #1
 8007462:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007466:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800746a:	2b00      	cmp	r3, #0
 800746c:	d196      	bne.n	800739c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d4>
                }

                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 800746e:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007472:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007476:	fa42 f303 	asr.w	r3, r2, r3
 800747a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800747e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007482:	f303 0307 	ssat	r3, #8, r3
 8007486:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800748a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800748e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007498:	b24a      	sxtb	r2, r1
 800749a:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800749c:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80074a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80074a4:	fa42 f303 	asr.w	r3, r2, r3
 80074a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074b0:	f303 0307 	ssat	r3, #8, r3
 80074b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074b8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80074bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80074c6:	b24a      	sxtb	r2, r1
 80074c8:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 80074ca:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80074ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80074d2:	fa42 f303 	asr.w	r3, r2, r3
 80074d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074de:	f303 0307 	ssat	r3, #8, r3
 80074e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074e6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80074ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80074f4:	b24a      	sxtb	r2, r1
 80074f6:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 80074f8:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80074fc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007500:	fa42 f303 	asr.w	r3, r2, r3
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f303 0307 	ssat	r3, #8, r3
 8007510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007514:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007518:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007522:	b24a      	sxtb	r2, r1
 8007524:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 8007526:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800752a:	3b01      	subs	r3, #1
 800752c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007530:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007534:	2b00      	cmp	r3, #0
 8007536:	f47f ad16 	bne.w	8006f66 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x19e>
            }

            rowCnt = ch_im_out & 0x3;
 800753a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007546:	e077      	b.n	8007638 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x870>
            {
                q7_t     *pB = colBuffer + row_shift;
 8007548:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800754c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007550:	4413      	add	r3, r2
 8007552:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                const q7_t *pA = wt + row_shift;
 8007556:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800755a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800755e:	4413      	add	r3, r2
 8007560:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007564:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800756e:	f993 3000 	ldrsb.w	r3, [r3]
 8007572:	461a      	mov	r2, r3
 8007574:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8007578:	409a      	lsls	r2, r3
 800757a:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800757e:	3b01      	subs	r3, #1
 8007580:	2101      	movs	r1, #1
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	4413      	add	r3, r2
 8007588:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y);
 800758c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007590:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007594:	fb12 f303 	smulbb	r3, r2, r3
 8007598:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

                row_shift += 1;
 800759c:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80075a0:	3301      	adds	r3, #1
 80075a2:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

                while (colCnt)
 80075a6:	e027      	b.n	80075f8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x830>
                {
                    q7_t      A1 = *pA;
 80075a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
                    q7_t      B1 = *pB;
 80075b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
                    pA += ch_im_in;
 80075bc:	1dbb      	adds	r3, r7, #6
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80075c4:	4413      	add	r3, r2
 80075c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                    pB += ch_im_in;
 80075ca:	1dbb      	adds	r3, r7, #6
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80075d2:	4413      	add	r3, r2
 80075d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                    sum += A1 * B1;
 80075d8:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 80075dc:	f997 20fe 	ldrsb.w	r2, [r7, #254]	; 0xfe
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
 80075e4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80075e8:	4413      	add	r3, r2
 80075ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

                    colCnt--;
 80075ee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80075f2:	3b01      	subs	r3, #1
 80075f4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
                while (colCnt)
 80075f8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1d3      	bne.n	80075a8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x7e0>
                }
                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007600:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007604:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007608:	fa42 f303 	asr.w	r3, r2, r3
 800760c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007614:	f303 0307 	ssat	r3, #8, r3
 8007618:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800761c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8007620:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800762a:	b24a      	sxtb	r2, r1
 800762c:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 800762e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007632:	3b01      	subs	r3, #1
 8007634:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007638:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800763c:	2b00      	cmp	r3, #0
 800763e:	d183      	bne.n	8007548 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x780>
            }

            // clear counter and pointers
            pBuffer = colBuffer;
 8007640:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007644:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8007648:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 800764c:	b29b      	uxth	r3, r3
 800764e:	3301      	adds	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8007656:	f9b7 2144 	ldrsh.w	r2, [r7, #324]	; 0x144
 800765a:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 800765e:	429a      	cmp	r2, r3
 8007660:	f6ff abea 	blt.w	8006e38 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x70>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8007664:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8007668:	b29b      	uxth	r3, r3
 800766a:	3301      	adds	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8007672:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 8007676:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800767a:	429a      	cmp	r2, r3
 800767c:	f6ff abd7 	blt.w	8006e2e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x66>

#endif                          /* ARM_MATH_DSP */


    /* Return to application */
    return ARM_MATH_SUCCESS;
 8007680:	2300      	movs	r3, #0

}
 8007682:	4618      	mov	r0, r3
 8007684:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 800768c:	b490      	push	{r4, r7}
 800768e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007692:	af00      	add	r7, sp, #0
 8007694:	f107 040c 	add.w	r4, r7, #12
 8007698:	6020      	str	r0, [r4, #0]
 800769a:	f107 0008 	add.w	r0, r7, #8
 800769e:	6001      	str	r1, [r0, #0]
 80076a0:	4619      	mov	r1, r3
 80076a2:	1dbb      	adds	r3, r7, #6
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	460a      	mov	r2, r1
 80076aa:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 80076ac:	1dbb      	adds	r3, r7, #6
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80076b4:	4413      	add	r3, r2
 80076b6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 80076ba:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80076be:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 80076c2:	1dbb      	adds	r3, r7, #6
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 80076cc:	e347      	b.n	8007d5e <arm_nn_mat_mult_kernel_q7_q15+0x6d2>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80076ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076d2:	f107 0208 	add.w	r2, r7, #8
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80076da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	441a      	add	r2, r3
 80076e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076ec:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80076ee:	1d3b      	adds	r3, r7, #4
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	f107 020c 	add.w	r2, r7, #12
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80076fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007702:	f993 3000 	ldrsb.w	r3, [r3]
 8007706:	461a      	mov	r2, r3
 8007708:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800770c:	409a      	lsls	r2, r3
 800770e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007712:	3b01      	subs	r3, #1
 8007714:	2101      	movs	r1, #1
 8007716:	fa01 f303 	lsl.w	r3, r1, r3
 800771a:	4413      	add	r3, r2
 800771c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007720:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 800772a:	f993 3000 	ldrsb.w	r3, [r3]
 800772e:	461a      	mov	r2, r3
 8007730:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007734:	409a      	lsls	r2, r3
 8007736:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800773a:	3b01      	subs	r3, #1
 800773c:	2101      	movs	r1, #1
 800773e:	fa01 f303 	lsl.w	r3, r1, r3
 8007742:	4413      	add	r3, r2
 8007744:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800774c:	f993 3000 	ldrsb.w	r3, [r3]
 8007750:	461a      	mov	r2, r3
 8007752:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007756:	409a      	lsls	r2, r3
 8007758:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800775c:	3b01      	subs	r3, #1
 800775e:	2101      	movs	r1, #1
 8007760:	fa01 f303 	lsl.w	r3, r1, r3
 8007764:	4413      	add	r3, r2
 8007766:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800776a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007774:	f993 3000 	ldrsb.w	r3, [r3]
 8007778:	461a      	mov	r2, r3
 800777a:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800777e:	409a      	lsls	r2, r3
 8007780:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007784:	3b01      	subs	r3, #1
 8007786:	2101      	movs	r1, #1
 8007788:	fa01 f303 	lsl.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 8007792:	1d3b      	adds	r3, r7, #4
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	089b      	lsrs	r3, r3, #2
 8007798:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 800779c:	e20c      	b.n	8007bb8 <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 800779e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80077a2:	6813      	ldr	r3, [r2, #0]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	6011      	str	r1, [r2, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            q31_t     inB2 = *__SIMD32(pB2)++;
 80077ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	1d19      	adds	r1, r3, #4
 80077b6:	6011      	str	r1, [r2, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80077be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077c2:	f107 020c 	add.w	r2, r7, #12
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80077ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80077d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80077dc:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80077de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	1d19      	adds	r1, r3, #4
 80077e6:	6011      	str	r1, [r2, #0]
 80077e8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80077f0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007800:	2208      	movs	r2, #8
 8007802:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007804:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007808:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	f002 021f 	and.w	r2, r2, #31
 8007812:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007814:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 800781e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	e007      	b.n	8007836 <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007826:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800782a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	fa62 f303 	ror.w	r3, r2, r3
 8007836:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800783a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800783c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	fa2f f283 	sxtb16	r2, r3
 8007846:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800784a:	601a      	str	r2, [r3, #0]
  return(result);
 800784c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007856:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007858:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007862:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007864:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	fa2f f283 	sxtb16	r2, r3
 800786e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007872:	601a      	str	r2, [r3, #0]
  return(result);
 8007874:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800787e:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007880:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4bd2      	ldr	r3, [pc, #840]	; (8007bd0 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 8007888:	4013      	ands	r3, r2
 800788a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	0c12      	lsrs	r2, r2, #16
 8007892:	4313      	orrs	r3, r2
 8007894:	461a      	mov	r2, r3
 8007896:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 800789e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	4313      	orrs	r3, r2
 80078b0:	461a      	mov	r2, r3
 80078b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	601a      	str	r2, [r3, #0]
        return source;
 80078ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078be:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ca:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80078d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80078de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80078e2:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80078e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80078e8:	6813      	ldr	r3, [r2, #0]
 80078ea:	1d19      	adds	r1, r3, #4
 80078ec:	6011      	str	r1, [r2, #0]
 80078ee:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80078f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007906:	2208      	movs	r2, #8
 8007908:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800790a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800790e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	f002 021f 	and.w	r2, r2, #31
 8007918:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800791a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 8007924:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	e007      	b.n	800793c <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 800792c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007930:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	fa62 f303 	ror.w	r3, r2, r3
 800793c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8007940:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007942:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	fa2f f283 	sxtb16	r2, r3
 800794c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007950:	601a      	str	r2, [r3, #0]
  return(result);
 8007952:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800795c:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 800795e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800796a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	fa2f f283 	sxtb16	r2, r3
 8007974:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007978:	601a      	str	r2, [r3, #0]
  return(result);
 800797a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007984:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007986:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	4b90      	ldr	r3, [pc, #576]	; (8007bd0 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 800798e:	4013      	ands	r3, r2
 8007990:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	0c12      	lsrs	r2, r2, #16
 8007998:	4313      	orrs	r3, r2
 800799a:	461a      	mov	r2, r3
 800799c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 80079a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	041b      	lsls	r3, r3, #16
 80079b4:	4313      	orrs	r3, r2
 80079b6:	461a      	mov	r2, r3
 80079b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	601a      	str	r2, [r3, #0]
        return source;
 80079c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079c4:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 80079c6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 80079ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4619      	mov	r1, r3
 80079d2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80079d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80079da:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80079de:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80079e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ea:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80079ee:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80079f2:	fb23 1202 	smlad	r2, r3, r2, r1
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	601a      	str	r2, [r3, #0]
  return(result);
 80079fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007a06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007a12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007a16:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8007a1a:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8007a1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a26:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007a2a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007a2e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007a32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8007a36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 8007a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4619      	mov	r1, r3
 8007a46:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007a4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007a4e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8007a52:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007a56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a5e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007a62:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8007a66:	fb23 1302 	smlad	r3, r3, r2, r1
 8007a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8007a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 8007a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007a82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007a86:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8007a8a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8007a8e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a92:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007a96:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007a9a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007a9e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007aa2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8007aa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007aaa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8007aae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007ab2:	6813      	ldr	r3, [r2, #0]
 8007ab4:	1d19      	adds	r1, r3, #4
 8007ab6:	6011      	str	r1, [r2, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inB2 = *__SIMD32(pB2)++;
 8007abe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	6011      	str	r1, [r2, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

            sum = __SMLAD(inA12, inB1, sum);
 8007ace:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007ada:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007ade:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8007ae2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8007ae6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007aea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007aee:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007af2:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8007af6:	fb23 1302 	smlad	r3, r3, r2, r1
 8007afa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8007afe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007b02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 8007b06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007b12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007b16:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8007b1a:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8007b1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007b26:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8007b2a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8007b2e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 8007b36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007b3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 8007b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007b4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007b4e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8007b52:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8007b56:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b5a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007b5e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8007b62:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007b66:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b6a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8007b6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007b72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 8007b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007b82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007b86:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8007b8a:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8007b8e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b92:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007b96:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8007b9a:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8007b9e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007ba2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8007ba6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007baa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8007bae:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007bb8:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f adee 	bne.w	800779e <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8007bc2:	1d3b      	adds	r3, r7, #4
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007bce:	e058      	b.n	8007c82 <arm_nn_mat_mult_kernel_q7_q15+0x5f6>
 8007bd0:	ffff0000 	.word	0xffff0000
        {
            q7_t      inA1 = *pA++;
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f107 020c 	add.w	r2, r7, #12
 8007bde:	1c59      	adds	r1, r3, #1
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
            q15_t     inB1 = *pB++;
 8007be8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	1c99      	adds	r1, r3, #2
 8007bf0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
            q7_t      inA2 = *pA2++;
 8007bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
            q15_t     inB2 = *pB2++;
 8007c0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	1c99      	adds	r1, r3, #2
 8007c14:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c18:	6011      	str	r1, [r2, #0]
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

            sum += inA1 * inB1;
 8007c20:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007c24:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007c28:	fb02 f303 	mul.w	r3, r2, r3
 8007c2c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007c30:	4413      	add	r3, r2
 8007c32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8007c36:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007c3a:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
 8007c42:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007c46:	4413      	add	r3, r2
 8007c48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 8007c4c:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007c50:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007c54:	fb02 f303 	mul.w	r3, r2, r3
 8007c58:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8007c62:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007c66:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007c72:	4413      	add	r3, r2
 8007c74:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 8007c78:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007c82:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1a4      	bne.n	8007bd4 <arm_nn_mat_mult_kernel_q7_q15+0x548>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007c8a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007c8e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007c92:	fa42 f303 	asr.w	r3, r2, r3
 8007c96:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007c9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007c9e:	f303 0307 	ssat	r3, #8, r3
 8007ca2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007ca6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8007caa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007cb4:	b24a      	sxtb	r2, r1
 8007cb6:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8007cb8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007cbc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007cc0:	fa42 f303 	asr.w	r3, r2, r3
 8007cc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8007cc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007ccc:	f303 0307 	ssat	r3, #8, r3
 8007cd0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007cd4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8007cd8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007ce2:	b24a      	sxtb	r2, r1
 8007ce4:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8007ce6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007cea:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007cee:	fa42 f303 	asr.w	r3, r2, r3
 8007cf2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007cf6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007cfa:	f303 0307 	ssat	r3, #8, r3
 8007cfe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007d02:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8007d06:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007d10:	b24a      	sxtb	r2, r1
 8007d12:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8007d14:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d18:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007d1c:	fa42 f303 	asr.w	r3, r2, r3
 8007d20:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007d24:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007d28:	f303 0307 	ssat	r3, #8, r3
 8007d2c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8007d30:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8007d34:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007d3e:	b24a      	sxtb	r2, r1
 8007d40:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8007d42:	1d3b      	adds	r3, r7, #4
 8007d44:	881a      	ldrh	r2, [r3, #0]
 8007d46:	f107 030c 	add.w	r3, r7, #12
 8007d4a:	f107 010c 	add.w	r1, r7, #12
 8007d4e:	6809      	ldr	r1, [r1, #0]
 8007d50:	440a      	add	r2, r1
 8007d52:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8007d54:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8007d5e:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f47f acb3 	bne.w	80076ce <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8007d68:	1dbb      	adds	r3, r7, #6
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 81eb 	beq.w	800814c <arm_nn_mat_mult_kernel_q7_q15+0xac0>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8007d76:	f107 0320 	add.w	r3, r7, #32
 8007d7a:	f107 0208 	add.w	r2, r7, #8
 8007d7e:	6812      	ldr	r2, [r2, #0]
 8007d80:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8007d82:	f107 0320 	add.w	r3, r7, #32
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	1d3b      	adds	r3, r7, #4
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	441a      	add	r2, r3
 8007d90:	f107 031c 	add.w	r3, r7, #28
 8007d94:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007d96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007da4:	409a      	lsls	r2, r3
 8007da6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007daa:	3b01      	subs	r3, #1
 8007dac:	2101      	movs	r1, #1
 8007dae:	fa01 f303 	lsl.w	r3, r1, r3
 8007db2:	4413      	add	r3, r2
 8007db4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007dcc:	409a      	lsls	r2, r3
 8007dce:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8007de0:	1d3b      	adds	r3, r7, #4
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	089b      	lsrs	r3, r3, #2
 8007de6:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8007dea:	e138      	b.n	800805e <arm_nn_mat_mult_kernel_q7_q15+0x9d2>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8007dec:	f107 0220 	add.w	r2, r7, #32
 8007df0:	6813      	ldr	r3, [r2, #0]
 8007df2:	1d19      	adds	r1, r3, #4
 8007df4:	6011      	str	r1, [r2, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8007dfc:	f107 021c 	add.w	r2, r7, #28
 8007e00:	6813      	ldr	r3, [r2, #0]
 8007e02:	1d19      	adds	r1, r3, #4
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007e0c:	f107 0310 	add.w	r3, r7, #16
 8007e10:	f107 020c 	add.w	r2, r7, #12
 8007e14:	6812      	ldr	r2, [r2, #0]
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e1c:	f107 0218 	add.w	r2, r7, #24
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e26:	f107 0214 	add.w	r2, r7, #20
 8007e2a:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007e2c:	f107 0210 	add.w	r2, r7, #16
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	1d19      	adds	r1, r3, #4
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007e3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e4e:	2208      	movs	r2, #8
 8007e50:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007e52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e56:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	f002 021f 	and.w	r2, r2, #31
 8007e60:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007e62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <arm_nn_mat_mult_kernel_q7_q15+0x7e8>
    return op1;
 8007e6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	e007      	b.n	8007e84 <arm_nn_mat_mult_kernel_q7_q15+0x7f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007e74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007e78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	fa62 f303 	ror.w	r3, r2, r3
 8007e84:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e88:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	fa2f f283 	sxtb16	r2, r3
 8007e94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e98:	601a      	str	r2, [r3, #0]
  return(result);
 8007e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ea4:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007ea6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007eb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007eb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	fa2f f283 	sxtb16	r2, r3
 8007ebc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ec0:	601a      	str	r2, [r3, #0]
  return(result);
 8007ec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ecc:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007ece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4ba5      	ldr	r3, [pc, #660]	; (800816c <arm_nn_mat_mult_kernel_q7_q15+0xae0>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	0c12      	lsrs	r2, r2, #16
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007eec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	041b      	lsls	r3, r3, #16
 8007efc:	4313      	orrs	r3, r2
 8007efe:	461a      	mov	r2, r3
 8007f00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	601a      	str	r2, [r3, #0]
        return source;
 8007f08:	f107 0310 	add.w	r3, r7, #16
 8007f0c:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007f0e:	f107 030c 	add.w	r3, r7, #12
 8007f12:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8007f14:	f107 0318 	add.w	r3, r7, #24
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007f20:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007f24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f28:	6018      	str	r0, [r3, #0]
 8007f2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007f2e:	6019      	str	r1, [r3, #0]
 8007f30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007f36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007f40:	6812      	ldr	r2, [r2, #0]
 8007f42:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8007f46:	6809      	ldr	r1, [r1, #0]
 8007f48:	fb23 1202 	smlad	r2, r3, r2, r1
 8007f4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f50:	601a      	str	r2, [r3, #0]
  return(result);
 8007f52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007f5c:	f107 0318 	add.w	r3, r7, #24
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8007f68:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007f6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f70:	6018      	str	r0, [r3, #0]
 8007f72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f76:	6019      	str	r1, [r3, #0]
 8007f78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007f7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007f7e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8007f8e:	6809      	ldr	r1, [r1, #0]
 8007f90:	fb23 1202 	smlad	r2, r3, r2, r1
 8007f94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007f98:	601a      	str	r2, [r3, #0]
  return(result);
 8007f9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8007fa4:	f107 0220 	add.w	r2, r7, #32
 8007fa8:	6813      	ldr	r3, [r2, #0]
 8007faa:	1d19      	adds	r1, r3, #4
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            inB2 = *__SIMD32(pB2)++;
 8007fb4:	f107 021c 	add.w	r2, r7, #28
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	1d19      	adds	r1, r3, #4
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            sum = __SMLAD(inA12, inB1, sum);
 8007fc4:	f107 0314 	add.w	r3, r7, #20
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007fd0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007fd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007fd8:	6018      	str	r0, [r3, #0]
 8007fda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007fde:	6019      	str	r1, [r3, #0]
 8007fe0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007fe4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007fe6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8007ff6:	6809      	ldr	r1, [r1, #0]
 8007ff8:	fb23 1202 	smlad	r2, r3, r2, r1
 8007ffc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008000:	601a      	str	r2, [r3, #0]
  return(result);
 8008002:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8008018:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800801c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008020:	6018      	str	r0, [r3, #0]
 8008022:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008026:	6019      	str	r1, [r3, #0]
 8008028:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800802c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800802e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008038:	6812      	ldr	r2, [r2, #0]
 800803a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800803e:	6809      	ldr	r1, [r1, #0]
 8008040:	fb23 1202 	smlad	r2, r3, r2, r1
 8008044:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008048:	601a      	str	r2, [r3, #0]
  return(result);
 800804a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 8008054:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008058:	3b01      	subs	r3, #1
 800805a:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800805e:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008062:	2b00      	cmp	r3, #0
 8008064:	f47f aec2 	bne.w	8007dec <arm_nn_mat_mult_kernel_q7_q15+0x760>
        }
        colCnt = numCol_A & 0x3;
 8008068:	1d3b      	adds	r3, r7, #4
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8008074:	e038      	b.n	80080e8 <arm_nn_mat_mult_kernel_q7_q15+0xa5c>
        {
            q7_t      inA1 = *pA++;
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f107 020c 	add.w	r2, r7, #12
 8008080:	1c59      	adds	r1, r3, #1
 8008082:	6011      	str	r1, [r2, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
            q15_t     inB1 = *pB++;
 800808a:	f107 0320 	add.w	r3, r7, #32
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	1c99      	adds	r1, r3, #2
 8008092:	f107 0220 	add.w	r2, r7, #32
 8008096:	6011      	str	r1, [r2, #0]
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
            q15_t     inB2 = *pB2++;
 800809e:	f107 031c 	add.w	r3, r7, #28
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	1c99      	adds	r1, r3, #2
 80080a6:	f107 021c 	add.w	r2, r7, #28
 80080aa:	6011      	str	r1, [r2, #0]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

            sum += inA1 * inB1;
 80080b2:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 80080b6:	f9b7 21c4 	ldrsh.w	r2, [r7, #452]	; 0x1c4
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80080c2:	4413      	add	r3, r2
 80080c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 80080c8:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 80080cc:	f9b7 21c2 	ldrsh.w	r2, [r7, #450]	; 0x1c2
 80080d0:	fb02 f303 	mul.w	r3, r2, r3
 80080d4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80080d8:	4413      	add	r3, r2
 80080da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 80080de:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80080e2:	3b01      	subs	r3, #1
 80080e4:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 80080e8:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1c2      	bne.n	8008076 <arm_nn_mat_mult_kernel_q7_q15+0x9ea>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80080f0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80080f4:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80080f8:	fa42 f303 	asr.w	r3, r2, r3
 80080fc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008100:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008104:	f303 0307 	ssat	r3, #8, r3
 8008108:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800810c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8008110:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800811a:	b24a      	sxtb	r2, r1
 800811c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800811e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8008122:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008126:	fa42 f303 	asr.w	r3, r2, r3
 800812a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800812e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008132:	f303 0307 	ssat	r3, #8, r3
 8008136:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800813a:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800813e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8008148:	b24a      	sxtb	r2, r1
 800814a:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 800814c:	1dbb      	adds	r3, r7, #6
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8008154:	4413      	add	r3, r2
 8008156:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 800815a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 800815e:	4618      	mov	r0, r3
 8008160:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008164:	46bd      	mov	sp, r7
 8008166:	bc90      	pop	{r4, r7}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	ffff0000 	.word	0xffff0000

08008170 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 8008170:	b490      	push	{r4, r7}
 8008172:	b0d2      	sub	sp, #328	; 0x148
 8008174:	af00      	add	r7, sp, #0
 8008176:	f107 040c 	add.w	r4, r7, #12
 800817a:	6020      	str	r0, [r4, #0]
 800817c:	f107 0008 	add.w	r0, r7, #8
 8008180:	6001      	str	r1, [r0, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	1dbb      	adds	r3, r7, #6
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	460a      	mov	r2, r1
 800818c:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 800818e:	1dbb      	adds	r3, r7, #6
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8008196:	4413      	add	r3, r2
 8008198:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 800819c:	2300      	movs	r3, #0
 800819e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80081a2:	e2df      	b.n	8008764 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80081a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081a8:	f107 0208 	add.w	r2, r7, #8
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80081b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	1d3b      	adds	r3, r7, #4
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	441a      	add	r2, r3
 80081be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081c2:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80081c4:	1d3b      	adds	r3, r7, #4
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	f107 020c 	add.w	r2, r7, #12
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	4413      	add	r3, r2
 80081d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 80081d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80081d8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80081dc:	4413      	add	r3, r2
 80081de:	f993 3000 	ldrsb.w	r3, [r3]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80081e8:	409a      	lsls	r2, r3
 80081ea:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2101      	movs	r1, #1
 80081f2:	fa01 f303 	lsl.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 80081fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008200:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008204:	4413      	add	r3, r2
 8008206:	f993 3000 	ldrsb.w	r3, [r3]
 800820a:	461a      	mov	r2, r3
 800820c:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008210:	409a      	lsls	r2, r3
 8008212:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008216:	3b01      	subs	r3, #1
 8008218:	2101      	movs	r1, #1
 800821a:	fa01 f303 	lsl.w	r3, r1, r3
 800821e:	4413      	add	r3, r2
 8008220:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8008224:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008228:	3301      	adds	r3, #1
 800822a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800822e:	4413      	add	r3, r2
 8008230:	f993 3000 	ldrsb.w	r3, [r3]
 8008234:	461a      	mov	r2, r3
 8008236:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 800823a:	409a      	lsls	r2, r3
 800823c:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008240:	3b01      	subs	r3, #1
 8008242:	2101      	movs	r1, #1
 8008244:	fa01 f303 	lsl.w	r3, r1, r3
 8008248:	4413      	add	r3, r2
 800824a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 800824e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008252:	3301      	adds	r3, #1
 8008254:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008258:	4413      	add	r3, r2
 800825a:	f993 3000 	ldrsb.w	r3, [r3]
 800825e:	461a      	mov	r2, r3
 8008260:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008264:	409a      	lsls	r2, r3
 8008266:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800826a:	3b01      	subs	r3, #1
 800826c:	2101      	movs	r1, #1
 800826e:	fa01 f303 	lsl.w	r3, r1, r3
 8008272:	4413      	add	r3, r2
 8008274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 8008278:	1d3b      	adds	r3, r7, #4
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 8008282:	e19e      	b.n	80085c2 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8008284:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008288:	6813      	ldr	r3, [r2, #0]
 800828a:	1d19      	adds	r1, r3, #4
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8008294:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008298:	6813      	ldr	r3, [r2, #0]
 800829a:	1d19      	adds	r1, r3, #4
 800829c:	6011      	str	r1, [r2, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	f107 020c 	add.w	r2, r7, #12
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b4:	653b      	str	r3, [r7, #80]	; 0x50
 80082b6:	f107 0320 	add.w	r3, r7, #32
 80082ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 80082bc:	f107 0214 	add.w	r2, r7, #20
 80082c0:	6813      	ldr	r3, [r2, #0]
 80082c2:	1d19      	adds	r1, r3, #4
 80082c4:	6011      	str	r1, [r2, #0]
 80082c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 80082ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082de:	2208      	movs	r2, #8
 80082e0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80082e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	f002 021f 	and.w	r2, r2, #31
 80082f0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80082f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 80082fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	e007      	b.n	8008314 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008304:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008308:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	fa62 f303 	ror.w	r3, r2, r3
 8008314:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008318:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800831a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	fa2f f283 	sxtb16	r2, r3
 8008324:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008328:	601a      	str	r2, [r3, #0]
  return(result);
 800832a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008334:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008336:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008342:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	fa2f f283 	sxtb16	r2, r3
 800834c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008350:	601a      	str	r2, [r3, #0]
  return(result);
 8008352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800835c:	601a      	str	r2, [r3, #0]
        return source;
 800835e:	f107 0314 	add.w	r3, r7, #20
 8008362:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	f107 0310 	add.w	r3, r7, #16
 800836e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f107 031c 	add.w	r3, r7, #28
 8008378:	677b      	str	r3, [r7, #116]	; 0x74
 800837a:	f107 0318 	add.w	r3, r7, #24
 800837e:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 8008380:	f107 0210 	add.w	r2, r7, #16
 8008384:	6813      	ldr	r3, [r2, #0]
 8008386:	1d19      	adds	r1, r3, #4
 8008388:	6011      	str	r1, [r2, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 800838e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008390:	66bb      	str	r3, [r7, #104]	; 0x68
 8008392:	2308      	movs	r3, #8
 8008394:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 8008396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 800839e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 80083a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083a6:	e003      	b.n	80083b0 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 80083a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ac:	fa62 f303 	ror.w	r3, r2, r3
 80083b0:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083b4:	fa2f f383 	sxtb16	r3, r3
 80083b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80083ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083bc:	461a      	mov	r2, r3
 80083be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083c0:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80083c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083c8:	fa2f f383 	sxtb16	r3, r3
 80083cc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80083ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d0:	461a      	mov	r2, r3
 80083d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083d4:	601a      	str	r2, [r3, #0]
        return source;
 80083d6:	f107 0310 	add.w	r3, r7, #16
 80083da:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 80083dc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 80083e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4619      	mov	r1, r3
 80083e8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80083ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083f0:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80083f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80083fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008402:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008404:	fb23 1302 	smlad	r3, r3, r2, r1
 8008408:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 800840a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800840c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 8008410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4619      	mov	r1, r3
 8008418:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800841c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008420:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8008424:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800842c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008430:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008434:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008438:	fb23 1302 	smlad	r3, r3, r2, r1
 800843c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 8008440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008444:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 8008448:	f107 031c 	add.w	r3, r7, #28
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4619      	mov	r1, r3
 8008450:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008454:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008458:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800845c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008468:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800846c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008470:	fb23 1302 	smlad	r3, r3, r2, r1
 8008474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8008478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800847c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 8008480:	f107 031c 	add.w	r3, r7, #28
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4619      	mov	r1, r3
 8008488:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800848c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008490:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8008494:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800849c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084a4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80084a8:	fb23 1302 	smlad	r3, r3, r2, r1
 80084ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 80084b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 80084b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80084bc:	6813      	ldr	r3, [r2, #0]
 80084be:	1d19      	adds	r1, r3, #4
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            inB2 = *__SIMD32(pB2)++;
 80084c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80084cc:	6813      	ldr	r3, [r2, #0]
 80084ce:	1d19      	adds	r1, r3, #4
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            sum = __SMLAD(inA12, inB1, sum);
 80084d8:	f107 0320 	add.w	r3, r7, #32
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4619      	mov	r1, r3
 80084e0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80084e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084e8:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80084ec:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80084f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80084f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084fc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8008500:	fb23 1302 	smlad	r3, r3, r2, r1
 8008504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8008508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800850c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 8008510:	f107 0320 	add.w	r3, r7, #32
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800851c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008520:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8008524:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800852c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008530:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008534:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008538:	fb23 1302 	smlad	r3, r3, r2, r1
 800853c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8008540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008544:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 8008548:	f107 0318 	add.w	r3, r7, #24
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4619      	mov	r1, r3
 8008550:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008554:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008558:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800855c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008560:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008568:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800856c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008570:	fb23 1302 	smlad	r3, r3, r2, r1
 8008574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8008578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800857c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 8008580:	f107 0318 	add.w	r3, r7, #24
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800858c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008590:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8008594:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008598:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800859c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80085a4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80085a8:	fb23 1302 	smlad	r3, r3, r2, r1
 80085ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 80085b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 80085b8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80085bc:	3b01      	subs	r3, #1
 80085be:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 80085c2:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f47f ae5c 	bne.w	8008284 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 80085cc:	1d3b      	adds	r3, r7, #4
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 80085d8:	e056      	b.n	8008688 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f107 020c 	add.w	r2, r7, #12
 80085e4:	1c59      	adds	r1, r3, #1
 80085e6:	6011      	str	r1, [r2, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            q15_t     inB1 = *pB++;
 80085ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	1c99      	adds	r1, r3, #2
 80085f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80085fa:	6011      	str	r1, [r2, #0]
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
            q7_t      inA2 = *pA2++;
 8008602:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            q15_t     inB2 = *pB2++;
 8008612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	1c99      	adds	r1, r3, #2
 800861a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800861e:	6011      	str	r1, [r2, #0]
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

            sum += inA1 * inB1;
 8008626:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800862a:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 800862e:	fb02 f303 	mul.w	r3, r2, r3
 8008632:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008636:	4413      	add	r3, r2
 8008638:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 800863c:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8008640:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800864c:	4413      	add	r3, r2
 800864e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 8008652:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 8008656:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008662:	4413      	add	r3, r2
 8008664:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 8008668:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 800866c:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8008670:	fb02 f303 	mul.w	r3, r2, r3
 8008674:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008678:	4413      	add	r3, r2
 800867a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 800867e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008682:	3b01      	subs	r3, #1
 8008684:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8008688:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1a4      	bne.n	80085da <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8008690:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008694:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008698:	fa42 f303 	asr.w	r3, r2, r3
 800869c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80086a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086a4:	f303 0307 	ssat	r3, #8, r3
 80086a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086ac:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80086b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80086ba:	b24a      	sxtb	r2, r1
 80086bc:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 80086be:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80086c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80086c6:	fa42 f303 	asr.w	r3, r2, r3
 80086ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80086ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086d2:	f303 0307 	ssat	r3, #8, r3
 80086d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80086da:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80086de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80086e8:	b24a      	sxtb	r2, r1
 80086ea:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80086ec:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80086f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80086f4:	fa42 f303 	asr.w	r3, r2, r3
 80086f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008700:	f303 0307 	ssat	r3, #8, r3
 8008704:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008708:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800870c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008716:	b24a      	sxtb	r2, r1
 8008718:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 800871a:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800871e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008722:	fa42 f303 	asr.w	r3, r2, r3
 8008726:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800872a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800872e:	f303 0307 	ssat	r3, #8, r3
 8008732:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008736:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800873a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008744:	b24a      	sxtb	r2, r1
 8008746:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	881a      	ldrh	r2, [r3, #0]
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	f107 010c 	add.w	r1, r7, #12
 8008754:	6809      	ldr	r1, [r1, #0]
 8008756:	440a      	add	r2, r1
 8008758:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 800875a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800875e:	3302      	adds	r3, #2
 8008760:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008764:	1dbb      	adds	r3, r7, #6
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800876c:	429a      	cmp	r2, r3
 800876e:	f6ff ad19 	blt.w	80081a4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 8008772:	1dbb      	adds	r3, r7, #6
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800877a:	4413      	add	r3, r2
 800877c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 8008780:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 8008784:	4618      	mov	r0, r3
 8008786:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800878a:	46bd      	mov	sp, r7
 800878c:	bc90      	pop	{r4, r7}
 800878e:	4770      	bx	lr

08008790 <arm_fully_connected_q7>:
                       const q7_t * pM,
                       const uint16_t dim_vec,
                       const uint16_t num_of_rows,
                       const uint16_t bias_shift,
                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
{
 8008790:	b590      	push	{r4, r7, lr}
 8008792:	b0d7      	sub	sp, #348	; 0x15c
 8008794:	af00      	add	r7, sp, #0
 8008796:	f107 040c 	add.w	r4, r7, #12
 800879a:	6020      	str	r0, [r4, #0]
 800879c:	f107 0008 	add.w	r0, r7, #8
 80087a0:	6001      	str	r1, [r0, #0]
 80087a2:	4619      	mov	r1, r3
 80087a4:	1dbb      	adds	r3, r7, #6
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	1d3b      	adds	r3, r7, #4
 80087aa:	460a      	mov	r2, r1
 80087ac:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 80087ae:	f107 0308 	add.w	r3, r7, #8
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    const q7_t *pB2;
    q7_t     *pO = pOut;
 80087b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80087bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    const q7_t *pBias = bias;
 80087c0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80087c4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
 80087c8:	1d3b      	adds	r3, r7, #4
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 80087d2:	1dbb      	adds	r3, r7, #6
 80087d4:	881a      	ldrh	r2, [r3, #0]
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	f000 fb82 	bl	8008ee8 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 80087e4:	e1e2      	b.n	8008bac <arm_fully_connected_q7+0x41c>
    {
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80087e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80087f0:	f993 3000 	ldrsb.w	r3, [r3]
 80087f4:	461a      	mov	r2, r3
 80087f6:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80087fa:	409a      	lsls	r2, r3
 80087fc:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008800:	3b01      	subs	r3, #1
 8008802:	2101      	movs	r1, #1
 8008804:	fa01 f303 	lsl.w	r3, r1, r3
 8008808:	4413      	add	r3, r2
 800880a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800880e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008818:	f993 3000 	ldrsb.w	r3, [r3]
 800881c:	461a      	mov	r2, r3
 800881e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008822:	409a      	lsls	r2, r3
 8008824:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008828:	3b01      	subs	r3, #1
 800882a:	2101      	movs	r1, #1
 800882c:	fa01 f303 	lsl.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        uint16_t  colCnt = dim_vec >> 2;
 8008836:	1dbb      	adds	r3, r7, #6
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

        pA = vec_buffer;
 8008840:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008844:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008848:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 800884a:	1dbb      	adds	r3, r7, #6
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008852:	4413      	add	r3, r2
 8008854:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        while (colCnt)
 8008858:	e126      	b.n	8008aa8 <arm_fully_connected_q7+0x318>
 800885a:	f107 0320 	add.w	r3, r7, #32
 800885e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800886c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        q31_t     inA = *__SIMD32(source)++;
 8008874:	f107 0220 	add.w	r2, r7, #32
 8008878:	6813      	ldr	r3, [r2, #0]
 800887a:	1d19      	adds	r1, r3, #4
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *out2 = __SXTB16(__ROR(inA, 8));
 8008884:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800888c:	2308      	movs	r3, #8
 800888e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  op2 %= 32U;
 8008892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008896:	f003 031f 	and.w	r3, r3, #31
 800889a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (op2 == 0U)
 800889e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d102      	bne.n	80088ac <arm_fully_connected_q7+0x11c>
    return op1;
 80088a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088aa:	e005      	b.n	80088b8 <arm_fully_connected_q7+0x128>
  return (op1 >> op2) | (op1 << (32U - op2));
 80088ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80088b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b4:	fa62 f303 	ror.w	r3, r2, r3
 80088b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80088bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088c0:	fa2f f383 	sxtb16	r3, r3
 80088c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80088c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088cc:	461a      	mov	r2, r3
 80088ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088d2:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80088d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80088dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088e0:	fa2f f383 	sxtb16	r3, r3
 80088e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80088e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088e8:	461a      	mov	r2, r3
 80088ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ee:	601a      	str	r2, [r3, #0]
        return source;
 80088f0:	f107 0320 	add.w	r3, r7, #32
 80088f4:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV, inM11, inM12, inM21, inM22;
            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 80088f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80088fa:	f107 031c 	add.w	r3, r7, #28
 80088fe:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800890c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        q31_t     inA = *__SIMD32(source)++;
 8008914:	f107 021c 	add.w	r2, r7, #28
 8008918:	6813      	ldr	r3, [r2, #0]
 800891a:	1d19      	adds	r1, r3, #4
 800891c:	6011      	str	r1, [r2, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        *out2 = __SXTB16(__ROR(inA, 8));
 8008924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800892c:	2308      	movs	r3, #8
 800892e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  op2 %= 32U;
 8008932:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008936:	f003 031f 	and.w	r3, r3, #31
 800893a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (op2 == 0U)
 800893e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <arm_fully_connected_q7+0x1bc>
    return op1;
 8008946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800894a:	e005      	b.n	8008958 <arm_fully_connected_q7+0x1c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 800894c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008954:	fa62 f303 	ror.w	r3, r2, r3
 8008958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800895c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008960:	fa2f f383 	sxtb16	r3, r3
 8008964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8008968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800896c:	461a      	mov	r2, r3
 800896e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008972:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800897c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008980:	fa2f f383 	sxtb16	r3, r3
 8008984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8008988:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800898c:	461a      	mov	r2, r3
 800898e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008992:	601a      	str	r2, [r3, #0]
        return source;
 8008994:	f107 031c 	add.w	r3, r7, #28
 8008998:	681b      	ldr	r3, [r3, #0]
            pB2 = (q7_t *) read_and_pad_reordered((void *)pB2, &inM21, &inM22);
 800899a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

            inV = *__SIMD32(pA)++;
 800899e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80089a2:	6813      	ldr	r3, [r2, #0]
 80089a4:	1d19      	adds	r1, r3, #4
 80089a6:	6011      	str	r1, [r2, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM11, sum);
 80089ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80089b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80089be:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80089c2:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80089c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80089ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80089ce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80089d2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80089d6:	fb23 1302 	smlad	r3, r3, r2, r1
 80089da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 80089de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089e2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM21, sum2);
 80089e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80089ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4619      	mov	r1, r3
 80089f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80089f6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80089fa:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80089fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a0a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008a0e:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8008a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a1a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            inV = *__SIMD32(pA)++;
 8008a1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008a22:	6813      	ldr	r3, [r2, #0]
 8008a24:	1d19      	adds	r1, r3, #4
 8008a26:	6011      	str	r1, [r2, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM12, sum);
 8008a2e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008a3e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008a42:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008a52:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008a56:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a62:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM22, sum2);
 8008a66:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4619      	mov	r1, r3
 8008a72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008a76:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8008a7a:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8008a7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a86:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008a8a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008a8e:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8008a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            colCnt--;
 8008a9e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008aa8:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f47f aed4 	bne.w	800885a <arm_fully_connected_q7+0xca>
        }
        colCnt = dim_vec & 0x3;
 8008ab2:	1dbb      	adds	r3, r7, #6
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008abe:	e037      	b.n	8008b30 <arm_fully_connected_q7+0x3a0>
        {
            q7_t      inV = *pA++;
 8008ac0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	1c99      	adds	r1, r3, #2
 8008ac8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ad2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            q15_t     inM = *pB++;
 8008ad6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8008ae4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
            q15_t     inM2 = *pB2++;
 8008ae8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008af2:	f993 3000 	ldrsb.w	r3, [r3]
 8008af6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            sum += inV * inM;
 8008afa:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008afe:	f9b7 210c 	ldrsh.w	r2, [r7, #268]	; 0x10c
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 += inV * inM2;
 8008b10:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008b14:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 8008b18:	fb02 f303 	mul.w	r3, r2, r3
 8008b1c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008b20:	4413      	add	r3, r2
 8008b22:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            colCnt--;
 8008b26:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008b30:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1c3      	bne.n	8008ac0 <arm_fully_connected_q7+0x330>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008b38:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008b3c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008b40:	fa42 f303 	asr.w	r3, r2, r3
 8008b44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b4c:	f303 0307 	ssat	r3, #8, r3
 8008b50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b54:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008b62:	b24a      	sxtb	r2, r1
 8008b64:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8008b66:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008b6a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008b6e:	fa42 f303 	asr.w	r3, r2, r3
 8008b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	f303 0307 	ssat	r3, #8, r3
 8008b7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008b82:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008b86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008b90:	b24a      	sxtb	r2, r1
 8008b92:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8008b94:	1dbb      	adds	r3, r7, #6
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        rowCnt--;
 8008ba2:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008bac:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f47f ae18 	bne.w	80087e6 <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8008bb6:	1d3b      	adds	r3, r7, #4
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    while (rowCnt)
 8008bc2:	e114      	b.n	8008dee <arm_fully_connected_q7+0x65e>
    {
        uint16_t  colCnt = dim_vec >> 2;
 8008bc4:	1dbb      	adds	r3, r7, #6
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	089b      	lsrs	r3, r3, #2
 8008bca:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8008bce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008be2:	409a      	lsls	r2, r3
 8008be4:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008be8:	3b01      	subs	r3, #1
 8008bea:	2101      	movs	r1, #1
 8008bec:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        pA = vec_buffer;
 8008bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bfa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008bfe:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8008c00:	e0a5      	b.n	8008d4e <arm_fully_connected_q7+0x5be>
 8008c02:	f107 0310 	add.w	r3, r7, #16
 8008c06:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c10:	f107 0218 	add.w	r2, r7, #24
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c1a:	f107 0214 	add.w	r2, r7, #20
 8008c1e:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8008c20:	f107 0210 	add.w	r2, r7, #16
 8008c24:	6813      	ldr	r3, [r2, #0]
 8008c26:	1d19      	adds	r1, r3, #4
 8008c28:	6011      	str	r1, [r2, #0]
 8008c2a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8008c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c42:	2208      	movs	r2, #8
 8008c44:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8008c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c4e:	6812      	ldr	r2, [r2, #0]
 8008c50:	f002 021f 	and.w	r2, r2, #31
 8008c54:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8008c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d103      	bne.n	8008c68 <arm_fully_connected_q7+0x4d8>
    return op1;
 8008c60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	e007      	b.n	8008c78 <arm_fully_connected_q7+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c68:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008c6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c70:	6812      	ldr	r2, [r2, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	fa62 f303 	ror.w	r3, r2, r3
 8008c78:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008c7c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	fa2f f283 	sxtb16	r2, r3
 8008c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c8c:	601a      	str	r2, [r3, #0]
  return(result);
 8008c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008ca8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008caa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	fa2f f283 	sxtb16	r2, r3
 8008cb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cb8:	601a      	str	r2, [r3, #0]
  return(result);
 8008cba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	601a      	str	r2, [r3, #0]
        return source;
 8008cca:	f107 0310 	add.w	r3, r7, #16
 8008cce:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8008cd0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

            inV1 = *__SIMD32(pA)++;
 8008cd4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008cd8:	6813      	ldr	r3, [r2, #0]
 8008cda:	1d19      	adds	r1, r3, #4
 8008cdc:	6011      	str	r1, [r2, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            sum = __SMLAD(inV1, inM11, sum);
 8008ce4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008ce8:	f107 0318 	add.w	r3, r7, #24
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cf4:	66ba      	str	r2, [r7, #104]	; 0x68
 8008cf6:	6679      	str	r1, [r7, #100]	; 0x64
 8008cf8:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008cfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cfe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d00:	fb23 1302 	smlad	r3, r3, r2, r1
 8008d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8008d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            inV2 = *__SIMD32(pA)++;
 8008d0c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008d10:	6813      	ldr	r3, [r2, #0]
 8008d12:	1d19      	adds	r1, r3, #4
 8008d14:	6011      	str	r1, [r2, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            sum = __SMLAD(inV2, inM12, sum);
 8008d1c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008d20:	f107 0314 	add.w	r3, r7, #20
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4619      	mov	r1, r3
 8008d28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d2c:	67ba      	str	r2, [r7, #120]	; 0x78
 8008d2e:	6779      	str	r1, [r7, #116]	; 0x74
 8008d30:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008d36:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008d38:	fb23 1302 	smlad	r3, r3, r2, r1
 8008d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8008d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            colCnt--;
 8008d44:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008d4e:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f47f af55 	bne.w	8008c02 <arm_fully_connected_q7+0x472>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8008d58:	1dbb      	adds	r3, r7, #6
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008d64:	e023      	b.n	8008dae <arm_fully_connected_q7+0x61e>
        {
            q7_t      inV = *pA++;
 8008d66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	1c99      	adds	r1, r3, #2
 8008d6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008d72:	6011      	str	r1, [r2, #0]
 8008d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d78:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            q15_t     inM = *pB++;
 8008d7c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008d86:	f993 3000 	ldrsb.w	r3, [r3]
 8008d8a:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
            sum += inV * inM;
 8008d8e:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8008d92:	f9b7 2128 	ldrsh.w	r2, [r7, #296]	; 0x128
 8008d96:	fb02 f303 	mul.w	r3, r2, r3
 8008d9a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008d9e:	4413      	add	r3, r2
 8008da0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            colCnt--;
 8008da4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008da8:	3b01      	subs	r3, #1
 8008daa:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008dae:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1d7      	bne.n	8008d66 <arm_fully_connected_q7+0x5d6>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008db6:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008dba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008dbe:	fa42 f303 	asr.w	r3, r2, r3
 8008dc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008dc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dca:	f303 0307 	ssat	r3, #8, r3
 8008dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008dd2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8008dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008de0:	b24a      	sxtb	r2, r1
 8008de2:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8008de4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008de8:	3b01      	subs	r3, #1
 8008dea:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008dee:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f47f aee6 	bne.w	8008bc4 <arm_fully_connected_q7+0x434>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8008df8:	2300      	movs	r3, #0

}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd90      	pop	{r4, r7, pc}

08008e04 <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b093      	sub	sp, #76	; 0x4c
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	089b      	lsrs	r3, r3, #2
 8008e18:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008e1a:	e044      	b.n	8008ea6 <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008e1c:	f107 0214 	add.w	r2, r7, #20
 8008e20:	6813      	ldr	r3, [r2, #0]
 8008e22:	1d19      	adds	r1, r3, #4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	61fb      	str	r3, [r7, #28]
 8008e2e:	2308      	movs	r3, #8
 8008e30:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <arm_q7_to_q15_no_shift+0x40>
    return op1;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	e003      	b.n	8008e4c <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	fa62 f303 	ror.w	r3, r2, r3
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	fa2f f383 	sxtb16	r3, r3
 8008e54:	623b      	str	r3, [r7, #32]
  return(result);
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	fa2f f383 	sxtb16	r3, r3
 8008e64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8008e6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <arm_q7_to_q15_no_shift+0xe0>)
 8008e6e:	4013      	ands	r3, r2
 8008e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e72:	0c12      	lsrs	r2, r2, #16
 8008e74:	4313      	orrs	r3, r2
 8008e76:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7e:	041b      	lsls	r3, r3, #16
 8008e80:	4313      	orrs	r3, r2
 8008e82:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 8008e84:	f107 0208 	add.w	r2, r7, #8
 8008e88:	6813      	ldr	r3, [r2, #0]
 8008e8a:	1d19      	adds	r1, r3, #4
 8008e8c:	6011      	str	r1, [r2, #0]
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e90:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 8008e92:	f107 0208 	add.w	r2, r7, #8
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	1d19      	adds	r1, r3, #4
 8008e9a:	6011      	str	r1, [r2, #0]
 8008e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e9e:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1b7      	bne.n	8008e1c <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008eb4:	e00c      	b.n	8008ed0 <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	617a      	str	r2, [r7, #20]
 8008ebc:	f993 1000 	ldrsb.w	r1, [r3]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	1c9a      	adds	r2, r3, #2
 8008ec4:	60ba      	str	r2, [r7, #8]
 8008ec6:	b20a      	sxth	r2, r1
 8008ec8:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1ef      	bne.n	8008eb6 <arm_q7_to_q15_no_shift+0xb2>
    }

}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	374c      	adds	r7, #76	; 0x4c
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	ffff0000 	.word	0xffff0000

08008ee8 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b091      	sub	sp, #68	; 0x44
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	089b      	lsrs	r3, r3, #2
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008efe:	e037      	b.n	8008f70 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008f00:	f107 0214 	add.w	r2, r7, #20
 8008f04:	6813      	ldr	r3, [r2, #0]
 8008f06:	1d19      	adds	r1, r3, #4
 8008f08:	6011      	str	r1, [r2, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	2308      	movs	r3, #8
 8008f14:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f003 031f 	and.w	r3, r3, #31
 8008f1c:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	e003      	b.n	8008f30 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	fa62 f303 	ror.w	r3, r2, r3
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	fa2f f383 	sxtb16	r3, r3
 8008f38:	623b      	str	r3, [r7, #32]
  return(result);
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	fa2f f383 	sxtb16	r3, r3
 8008f48:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8008f4e:	f107 0208 	add.w	r2, r7, #8
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	6011      	str	r1, [r2, #0]
 8008f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5a:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8008f5c:	f107 0208 	add.w	r2, r7, #8
 8008f60:	6813      	ldr	r3, [r2, #0]
 8008f62:	1d19      	adds	r1, r3, #4
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f68:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8008f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1c4      	bne.n	8008f00 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008f7e:	e00c      	b.n	8008f9a <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	617a      	str	r2, [r7, #20]
 8008f86:	f993 1000 	ldrsb.w	r1, [r3]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	1c9a      	adds	r2, r3, #2
 8008f8e:	60ba      	str	r2, [r7, #8]
 8008f90:	b20a      	sxth	r2, r1
 8008f92:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f96:	3b01      	subs	r3, #1
 8008f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1ef      	bne.n	8008f80 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	3744      	adds	r7, #68	; 0x44
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fb2:	2003      	movs	r0, #3
 8008fb4:	f000 f8f9 	bl	80091aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008fb8:	200f      	movs	r0, #15
 8008fba:	f7fa fdd9 	bl	8003b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008fbe:	f7fa fad5 	bl	800356c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008fcc:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <HAL_IncTick+0x20>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4b06      	ldr	r3, [pc, #24]	; (8008fec <HAL_IncTick+0x24>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	4a04      	ldr	r2, [pc, #16]	; (8008fec <HAL_IncTick+0x24>)
 8008fda:	6013      	str	r3, [r2, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	20000010 	.word	0x20000010
 8008fec:	2000048c 	.word	0x2000048c

08008ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <HAL_GetTick+0x14>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	2000048c 	.word	0x2000048c

08009008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009010:	f7ff ffee 	bl	8008ff0 <HAL_GetTick>
 8009014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009020:	d005      	beq.n	800902e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009022:	4b0a      	ldr	r3, [pc, #40]	; (800904c <HAL_Delay+0x44>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800902e:	bf00      	nop
 8009030:	f7ff ffde 	bl	8008ff0 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d8f7      	bhi.n	8009030 <HAL_Delay+0x28>
  {
  }
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20000010 	.word	0x20000010

08009050 <__NVIC_SetPriorityGrouping>:
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009060:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <__NVIC_SetPriorityGrouping+0x40>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800906c:	4013      	ands	r3, r2
 800906e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009078:	4b06      	ldr	r3, [pc, #24]	; (8009094 <__NVIC_SetPriorityGrouping+0x44>)
 800907a:	4313      	orrs	r3, r2
 800907c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800907e:	4a04      	ldr	r2, [pc, #16]	; (8009090 <__NVIC_SetPriorityGrouping+0x40>)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	60d3      	str	r3, [r2, #12]
}
 8009084:	bf00      	nop
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	e000ed00 	.word	0xe000ed00
 8009094:	05fa0000 	.word	0x05fa0000

08009098 <__NVIC_GetPriorityGrouping>:
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <__NVIC_GetPriorityGrouping+0x18>)
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	f003 0307 	and.w	r3, r3, #7
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	e000ed00 	.word	0xe000ed00

080090b4 <__NVIC_EnableIRQ>:
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	db0b      	blt.n	80090de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	f003 021f 	and.w	r2, r3, #31
 80090cc:	4907      	ldr	r1, [pc, #28]	; (80090ec <__NVIC_EnableIRQ+0x38>)
 80090ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d2:	095b      	lsrs	r3, r3, #5
 80090d4:	2001      	movs	r0, #1
 80090d6:	fa00 f202 	lsl.w	r2, r0, r2
 80090da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	e000e100 	.word	0xe000e100

080090f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009100:	2b00      	cmp	r3, #0
 8009102:	db0a      	blt.n	800911a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	b2da      	uxtb	r2, r3
 8009108:	490c      	ldr	r1, [pc, #48]	; (800913c <__NVIC_SetPriority+0x4c>)
 800910a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910e:	0112      	lsls	r2, r2, #4
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	440b      	add	r3, r1
 8009114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009118:	e00a      	b.n	8009130 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	4908      	ldr	r1, [pc, #32]	; (8009140 <__NVIC_SetPriority+0x50>)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	3b04      	subs	r3, #4
 8009128:	0112      	lsls	r2, r2, #4
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	440b      	add	r3, r1
 800912e:	761a      	strb	r2, [r3, #24]
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	e000e100 	.word	0xe000e100
 8009140:	e000ed00 	.word	0xe000ed00

08009144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009144:	b480      	push	{r7}
 8009146:	b089      	sub	sp, #36	; 0x24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f1c3 0307 	rsb	r3, r3, #7
 800915e:	2b04      	cmp	r3, #4
 8009160:	bf28      	it	cs
 8009162:	2304      	movcs	r3, #4
 8009164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	3304      	adds	r3, #4
 800916a:	2b06      	cmp	r3, #6
 800916c:	d902      	bls.n	8009174 <NVIC_EncodePriority+0x30>
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	3b03      	subs	r3, #3
 8009172:	e000      	b.n	8009176 <NVIC_EncodePriority+0x32>
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	43da      	mvns	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	401a      	ands	r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800918c:	f04f 31ff 	mov.w	r1, #4294967295
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	fa01 f303 	lsl.w	r3, r1, r3
 8009196:	43d9      	mvns	r1, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800919c:	4313      	orrs	r3, r2
         );
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3724      	adds	r7, #36	; 0x24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff ff4c 	bl	8009050 <__NVIC_SetPriorityGrouping>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80091d2:	f7ff ff61 	bl	8009098 <__NVIC_GetPriorityGrouping>
 80091d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	6978      	ldr	r0, [r7, #20]
 80091de:	f7ff ffb1 	bl	8009144 <NVIC_EncodePriority>
 80091e2:	4602      	mov	r2, r0
 80091e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091e8:	4611      	mov	r1, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff ff80 	bl	80090f0 <__NVIC_SetPriority>
}
 80091f0:	bf00      	nop
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff ff54 	bl	80090b4 <__NVIC_EnableIRQ>
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e0ac      	b.n	8009380 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fab8 	bl	80097a0 <DFSDM_GetChannelFromInstance>
 8009230:	4603      	mov	r3, r0
 8009232:	4a55      	ldr	r2, [pc, #340]	; (8009388 <HAL_DFSDM_ChannelInit+0x174>)
 8009234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e09f      	b.n	8009380 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7fa fa6b 	bl	800371c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8009246:	4b51      	ldr	r3, [pc, #324]	; (800938c <HAL_DFSDM_ChannelInit+0x178>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	4a4f      	ldr	r2, [pc, #316]	; (800938c <HAL_DFSDM_ChannelInit+0x178>)
 800924e:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8009250:	4b4e      	ldr	r3, [pc, #312]	; (800938c <HAL_DFSDM_ChannelInit+0x178>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d125      	bne.n	80092a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8009258:	4b4d      	ldr	r3, [pc, #308]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a4c      	ldr	r2, [pc, #304]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 800925e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009262:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009264:	4b4a      	ldr	r3, [pc, #296]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	4948      	ldr	r1, [pc, #288]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009272:	4b47      	ldr	r3, [pc, #284]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a46      	ldr	r2, [pc, #280]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 8009278:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800927c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	791b      	ldrb	r3, [r3, #4]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d108      	bne.n	8009298 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8009286:	4b42      	ldr	r3, [pc, #264]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	3b01      	subs	r3, #1
 8009290:	041b      	lsls	r3, r3, #16
 8009292:	493f      	ldr	r1, [pc, #252]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 8009294:	4313      	orrs	r3, r2
 8009296:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8009298:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a3c      	ldr	r2, [pc, #240]	; (8009390 <HAL_DFSDM_ChannelInit+0x17c>)
 800929e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092a2:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80092b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6819      	ldr	r1, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80092c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80092c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 020f 	bic.w	r2, r2, #15
 80092e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6819      	ldr	r1, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80092f0:	431a      	orrs	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8009308:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6899      	ldr	r1, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	3b01      	subs	r3, #1
 800931a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f002 0207 	and.w	r2, r2, #7
 8009334:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6859      	ldr	r1, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8009348:	431a      	orrs	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009360:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fa16 	bl	80097a0 <DFSDM_GetChannelFromInstance>
 8009374:	4602      	mov	r2, r0
 8009376:	4904      	ldr	r1, [pc, #16]	; (8009388 <HAL_DFSDM_ChannelInit+0x174>)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  
  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200003c8 	.word	0x200003c8
 800938c:	200003c4 	.word	0x200003c4
 8009390:	40017400 	.word	0x40017400

08009394 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e0c6      	b.n	8009534 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a64      	ldr	r2, [pc, #400]	; (800953c <HAL_DFSDM_FilterInit+0x1a8>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d109      	bne.n	80093c4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d003      	beq.n	80093c0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e0b7      	b.n	8009534 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fa f8e9 	bl	80035b4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80093f0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7a1b      	ldrb	r3, [r3, #8]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d108      	bne.n	800940c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	e007      	b.n	800941c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800941a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7a5b      	ldrb	r3, [r3, #9]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d108      	bne.n	8009436 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	e007      	b.n	8009446 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009444:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6819      	ldr	r1, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	4b3b      	ldr	r3, [pc, #236]	; (8009540 <HAL_DFSDM_FilterInit+0x1ac>)
 8009452:	400b      	ands	r3, r1
 8009454:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	2b02      	cmp	r3, #2
 800945c:	d108      	bne.n	8009470 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6819      	ldr	r1, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	695a      	ldr	r2, [r3, #20]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	430a      	orrs	r2, r1
 800946e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7c1b      	ldrb	r3, [r3, #16]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d108      	bne.n	800948a <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0210 	orr.w	r2, r2, #16
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	e007      	b.n	800949a <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 0210 	bic.w	r2, r2, #16
 8009498:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7c5b      	ldrb	r3, [r3, #17]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d108      	bne.n	80094b4 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0220 	orr.w	r2, r2, #32
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	e007      	b.n	80094c4 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 0220 	bic.w	r2, r2, #32
 80094c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6959      	ldr	r1, [r3, #20]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <HAL_DFSDM_FilterInit+0x1b0>)
 80094d0:	400b      	ands	r3, r1
 80094d2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6959      	ldr	r1, [r3, #20]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80094e6:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80094ee:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699a      	ldr	r2, [r3, #24]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7c1a      	ldrb	r2, [r3, #16]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f042 0201 	orr.w	r2, r2, #1
 8009528:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	40017500 	.word	0x40017500
 8009540:	ffff80f7 	.word	0xffff80f7
 8009544:	1c00ff00 	.word	0x1c00ff00

08009548 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800955e:	2b00      	cmp	r3, #0
 8009560:	d02c      	beq.n	80095bc <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8009568:	2bff      	cmp	r3, #255	; 0xff
 800956a:	d027      	beq.n	80095bc <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6819      	ldr	r1, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	4b16      	ldr	r3, [pc, #88]	; (80095d0 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8009578:	400b      	ands	r3, r1
 800957a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d10d      	bne.n	800959e <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009590:	431a      	orrs	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	e00a      	b.n	80095b4 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	631a      	str	r2, [r3, #48]	; 0x30
 80095ba:	e001      	b.n	80095c0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }  
  else
  {
    status = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	f8fbffff 	.word	0xf8fbffff

080095d4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	75fb      	strb	r3, [r7, #23]
 80095f4:	e066      	b.n	80096c4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009600:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009604:	d002      	beq.n	800960c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	75fb      	strb	r3, [r7, #23]
 800960a:	e05b      	b.n	80096c4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10e      	bne.n	8009632 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009622:	2b00      	cmp	r3, #0
 8009624:	d105      	bne.n	8009632 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d002      	beq.n	8009632 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
 8009630:	e048      	b.n	80096c4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10c      	bne.n	8009654 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800963e:	2b00      	cmp	r3, #0
 8009640:	d108      	bne.n	8009654 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800964c:	d102      	bne.n	8009654 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	75fb      	strb	r3, [r7, #23]
 8009652:	e037      	b.n	80096c4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800965a:	2b01      	cmp	r3, #1
 800965c:	d004      	beq.n	8009668 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009664:	2b03      	cmp	r3, #3
 8009666:	d12b      	bne.n	80096c0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966c:	4a18      	ldr	r2, [pc, #96]	; (80096d0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800966e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8009676:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800967e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009682:	d101      	bne.n	8009688 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8009684:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8009686:	e000      	b.n	800968a <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8009688:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	331c      	adds	r3, #28
 800969a:	4619      	mov	r1, r3
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f000 fa1c 	bl	8009adc <HAL_DMA_Start_IT>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d006      	beq.n	80096b8 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	22ff      	movs	r2, #255	; 0xff
 80096ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80096b6:	e005      	b.n	80096c4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 f8bd 	bl	8009838 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80096be:	e001      	b.n	80096c4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	08009761 	.word	0x08009761
 80096d4:	0800977d 	.word	0x0800977d
 80096d8:	08009745 	.word	0x08009745

080096dc <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d007      	beq.n	8009702 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d002      	beq.n	8009702 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]
 8009700:	e011      	b.n	8009726 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fa48 	bl	8009b9c <HAL_DMA_Abort>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d006      	beq.n	8009720 <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	73fb      	strb	r3, [r7, #15]
 800971e:	e002      	b.n	8009726 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f8df 	bl	80098e4 <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7f9 f826 	bl	80027a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7f9 f848 	bl	8002804 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8009774:	bf00      	nop
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009788:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2203      	movs	r2, #3
 800978e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff ffcd 	bl	8009730 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a1c      	ldr	r2, [pc, #112]	; (800981c <DFSDM_GetChannelFromInstance+0x7c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d102      	bne.n	80097b6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e02b      	b.n	800980e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a19      	ldr	r2, [pc, #100]	; (8009820 <DFSDM_GetChannelFromInstance+0x80>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d102      	bne.n	80097c4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80097be:	2301      	movs	r3, #1
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	e024      	b.n	800980e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a17      	ldr	r2, [pc, #92]	; (8009824 <DFSDM_GetChannelFromInstance+0x84>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d102      	bne.n	80097d2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80097cc:	2302      	movs	r3, #2
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e01d      	b.n	800980e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a14      	ldr	r2, [pc, #80]	; (8009828 <DFSDM_GetChannelFromInstance+0x88>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d102      	bne.n	80097e0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80097da:	2303      	movs	r3, #3
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e016      	b.n	800980e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a12      	ldr	r2, [pc, #72]	; (800982c <DFSDM_GetChannelFromInstance+0x8c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d102      	bne.n	80097ee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80097e8:	2304      	movs	r3, #4
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e00f      	b.n	800980e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a0f      	ldr	r2, [pc, #60]	; (8009830 <DFSDM_GetChannelFromInstance+0x90>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d102      	bne.n	80097fc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80097f6:	2305      	movs	r3, #5
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	e008      	b.n	800980e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a0d      	ldr	r2, [pc, #52]	; (8009834 <DFSDM_GetChannelFromInstance+0x94>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d102      	bne.n	800980a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8009804:	2306      	movs	r3, #6
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	e001      	b.n	800980e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800980a:	2307      	movs	r3, #7
 800980c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	40017400 	.word	0x40017400
 8009820:	40017420 	.word	0x40017420
 8009824:	40017440 	.word	0x40017440
 8009828:	40017460 	.word	0x40017460
 800982c:	40017480 	.word	0x40017480
 8009830:	400174a0 	.word	0x400174a0
 8009834:	400174c0 	.word	0x400174c0

08009838 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	2b00      	cmp	r3, #0
 8009846:	d108      	bne.n	800985a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	e033      	b.n	80098c2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0201 	bic.w	r2, r2, #1
 8009868:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009878:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009890:	2b03      	cmp	r3, #3
 8009892:	d116      	bne.n	80098c2 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	2b00      	cmp	r3, #0
 800989a:	d107      	bne.n	80098ac <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0202 	orr.w	r2, r2, #2
 80098aa:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d102      	bne.n	80098bc <DFSDM_RegConvStart+0x84>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	e000      	b.n	80098be <DFSDM_RegConvStart+0x86>
 80098bc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <DFSDM_RegConvStart+0x98>
 80098cc:	2202      	movs	r2, #2
 80098ce:	e000      	b.n	80098d2 <DFSDM_RegConvStart+0x9a>
 80098d0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0201 	bic.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009900:	2b01      	cmp	r3, #1
 8009902:	d107      	bne.n	8009914 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009912:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0201 	orr.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800992a:	2b04      	cmp	r3, #4
 800992c:	d116      	bne.n	800995c <DFSDM_RegConvStop+0x78>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	2b00      	cmp	r3, #0
 8009934:	d107      	bne.n	8009946 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0202 	orr.w	r2, r2, #2
 8009944:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 800994c:	2b01      	cmp	r3, #1
 800994e:	d102      	bne.n	8009956 <DFSDM_RegConvStop+0x72>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009954:	e000      	b.n	8009958 <DFSDM_RegConvStop+0x74>
 8009956:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6493      	str	r3, [r2, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8009962:	2b02      	cmp	r3, #2
 8009964:	d101      	bne.n	800996a <DFSDM_RegConvStop+0x86>
 8009966:	2201      	movs	r2, #1
 8009968:	e000      	b.n	800996c <DFSDM_RegConvStop+0x88>
 800996a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800998c:	f7ff fb30 	bl	8008ff0 <HAL_GetTick>
 8009990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e099      	b.n	8009ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0201 	bic.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099bc:	e00f      	b.n	80099de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80099be:	f7ff fb17 	bl	8008ff0 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d908      	bls.n	80099de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2220      	movs	r2, #32
 80099d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2203      	movs	r2, #3
 80099d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e078      	b.n	8009ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e8      	bne.n	80099be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	4b38      	ldr	r3, [pc, #224]	; (8009ad8 <HAL_DMA_Init+0x158>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d107      	bne.n	8009a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	4313      	orrs	r3, r2
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f023 0307 	bic.w	r3, r3, #7
 8009a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d117      	bne.n	8009aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00e      	beq.n	8009aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fae7 	bl	800a058 <DMA_CheckFifoParam>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d008      	beq.n	8009aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2240      	movs	r2, #64	; 0x40
 8009a94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e016      	b.n	8009ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa9e 	bl	8009fec <DMA_CalcBaseAndBitshift>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab8:	223f      	movs	r2, #63	; 0x3f
 8009aba:	409a      	lsls	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	e010803f 	.word	0xe010803f

08009adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <HAL_DMA_Start_IT+0x26>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e048      	b.n	8009b94 <HAL_DMA_Start_IT+0xb8>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d137      	bne.n	8009b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 fa30 	bl	8009f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b34:	223f      	movs	r2, #63	; 0x3f
 8009b36:	409a      	lsls	r2, r3
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 0216 	orr.w	r2, r2, #22
 8009b4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	695a      	ldr	r2, [r3, #20]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0208 	orr.w	r2, r2, #8
 8009b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0201 	orr.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e005      	b.n	8009b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009b8e:	2302      	movs	r3, #2
 8009b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009baa:	f7ff fa21 	bl	8008ff0 <HAL_GetTick>
 8009bae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d008      	beq.n	8009bce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2280      	movs	r2, #128	; 0x80
 8009bc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e052      	b.n	8009c74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0216 	bic.w	r2, r2, #22
 8009bdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695a      	ldr	r2, [r3, #20]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <HAL_DMA_Abort+0x62>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f022 0208 	bic.w	r2, r2, #8
 8009c0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0201 	bic.w	r2, r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c1e:	e013      	b.n	8009c48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c20:	f7ff f9e6 	bl	8008ff0 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d90c      	bls.n	8009c48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2203      	movs	r2, #3
 8009c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e015      	b.n	8009c74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e4      	bne.n	8009c20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5a:	223f      	movs	r2, #63	; 0x3f
 8009c5c:	409a      	lsls	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8009c88:	4b92      	ldr	r3, [pc, #584]	; (8009ed4 <HAL_DMA_IRQHandler+0x258>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a92      	ldr	r2, [pc, #584]	; (8009ed8 <HAL_DMA_IRQHandler+0x25c>)
 8009c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c92:	0a9b      	lsrs	r3, r3, #10
 8009c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca6:	2208      	movs	r2, #8
 8009ca8:	409a      	lsls	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4013      	ands	r3, r2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01a      	beq.n	8009ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d013      	beq.n	8009ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0204 	bic.w	r2, r2, #4
 8009cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	409a      	lsls	r2, r3
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce0:	f043 0201 	orr.w	r2, r3, #1
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cec:	2201      	movs	r2, #1
 8009cee:	409a      	lsls	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d012      	beq.n	8009d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00b      	beq.n	8009d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	409a      	lsls	r2, r3
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d16:	f043 0202 	orr.w	r2, r3, #2
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d22:	2204      	movs	r2, #4
 8009d24:	409a      	lsls	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d012      	beq.n	8009d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d40:	2204      	movs	r2, #4
 8009d42:	409a      	lsls	r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4c:	f043 0204 	orr.w	r2, r3, #4
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d58:	2210      	movs	r2, #16
 8009d5a:	409a      	lsls	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4013      	ands	r3, r2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d043      	beq.n	8009dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d03c      	beq.n	8009dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d76:	2210      	movs	r2, #16
 8009d78:	409a      	lsls	r2, r3
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d018      	beq.n	8009dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d108      	bne.n	8009dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d024      	beq.n	8009dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
 8009daa:	e01f      	b.n	8009dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01b      	beq.n	8009dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
 8009dbc:	e016      	b.n	8009dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d107      	bne.n	8009ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0208 	bic.w	r2, r2, #8
 8009dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df0:	2220      	movs	r2, #32
 8009df2:	409a      	lsls	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4013      	ands	r3, r2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 808e 	beq.w	8009f1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 8086 	beq.w	8009f1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e12:	2220      	movs	r2, #32
 8009e14:	409a      	lsls	r2, r3
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	d136      	bne.n	8009e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0216 	bic.w	r2, r2, #22
 8009e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	695a      	ldr	r2, [r3, #20]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d103      	bne.n	8009e56 <HAL_DMA_IRQHandler+0x1da>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0208 	bic.w	r2, r2, #8
 8009e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e6a:	223f      	movs	r2, #63	; 0x3f
 8009e6c:	409a      	lsls	r2, r3
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d07d      	beq.n	8009f86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	4798      	blx	r3
        }
        return;
 8009e92:	e078      	b.n	8009f86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01c      	beq.n	8009edc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d108      	bne.n	8009ec2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d030      	beq.n	8009f1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	4798      	blx	r3
 8009ec0:	e02b      	b.n	8009f1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d027      	beq.n	8009f1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	4798      	blx	r3
 8009ed2:	e022      	b.n	8009f1a <HAL_DMA_IRQHandler+0x29e>
 8009ed4:	20000008 	.word	0x20000008
 8009ed8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10f      	bne.n	8009f0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0210 	bic.w	r2, r2, #16
 8009ef8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d032      	beq.n	8009f88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d022      	beq.n	8009f74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2205      	movs	r2, #5
 8009f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f022 0201 	bic.w	r2, r2, #1
 8009f44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60bb      	str	r3, [r7, #8]
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d307      	bcc.n	8009f62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1f2      	bne.n	8009f46 <HAL_DMA_IRQHandler+0x2ca>
 8009f60:	e000      	b.n	8009f64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009f62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d005      	beq.n	8009f88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	4798      	blx	r3
 8009f84:	e000      	b.n	8009f88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009f86:	bf00      	nop
    }
  }
}
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop

08009f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	2b40      	cmp	r3, #64	; 0x40
 8009fbc:	d108      	bne.n	8009fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009fce:	e007      	b.n	8009fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	60da      	str	r2, [r3, #12]
}
 8009fe0:	bf00      	nop
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	3b10      	subs	r3, #16
 8009ffc:	4a13      	ldr	r2, [pc, #76]	; (800a04c <DMA_CalcBaseAndBitshift+0x60>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	091b      	lsrs	r3, r3, #4
 800a004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a006:	4a12      	ldr	r2, [pc, #72]	; (800a050 <DMA_CalcBaseAndBitshift+0x64>)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b03      	cmp	r3, #3
 800a018:	d908      	bls.n	800a02c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <DMA_CalcBaseAndBitshift+0x68>)
 800a022:	4013      	ands	r3, r2
 800a024:	1d1a      	adds	r2, r3, #4
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	659a      	str	r2, [r3, #88]	; 0x58
 800a02a:	e006      	b.n	800a03a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	4b08      	ldr	r3, [pc, #32]	; (800a054 <DMA_CalcBaseAndBitshift+0x68>)
 800a034:	4013      	ands	r3, r2
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	aaaaaaab 	.word	0xaaaaaaab
 800a050:	08028e64 	.word	0x08028e64
 800a054:	fffffc00 	.word	0xfffffc00

0800a058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d11f      	bne.n	800a0b2 <DMA_CheckFifoParam+0x5a>
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b03      	cmp	r3, #3
 800a076:	d856      	bhi.n	800a126 <DMA_CheckFifoParam+0xce>
 800a078:	a201      	add	r2, pc, #4	; (adr r2, 800a080 <DMA_CheckFifoParam+0x28>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a091 	.word	0x0800a091
 800a084:	0800a0a3 	.word	0x0800a0a3
 800a088:	0800a091 	.word	0x0800a091
 800a08c:	0800a127 	.word	0x0800a127
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d046      	beq.n	800a12a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0a0:	e043      	b.n	800a12a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a0aa:	d140      	bne.n	800a12e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0b0:	e03d      	b.n	800a12e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ba:	d121      	bne.n	800a100 <DMA_CheckFifoParam+0xa8>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d837      	bhi.n	800a132 <DMA_CheckFifoParam+0xda>
 800a0c2:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <DMA_CheckFifoParam+0x70>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0d9 	.word	0x0800a0d9
 800a0cc:	0800a0df 	.word	0x0800a0df
 800a0d0:	0800a0d9 	.word	0x0800a0d9
 800a0d4:	0800a0f1 	.word	0x0800a0f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
      break;
 800a0dc:	e030      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d025      	beq.n	800a136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0ee:	e022      	b.n	800a136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a0f8:	d11f      	bne.n	800a13a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a0fe:	e01c      	b.n	800a13a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d903      	bls.n	800a10e <DMA_CheckFifoParam+0xb6>
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d003      	beq.n	800a114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a10c:	e018      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	73fb      	strb	r3, [r7, #15]
      break;
 800a112:	e015      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	73fb      	strb	r3, [r7, #15]
      break;
 800a124:	e00b      	b.n	800a13e <DMA_CheckFifoParam+0xe6>
      break;
 800a126:	bf00      	nop
 800a128:	e00a      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      break;
 800a12a:	bf00      	nop
 800a12c:	e008      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      break;
 800a12e:	bf00      	nop
 800a130:	e006      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      break;
 800a132:	bf00      	nop
 800a134:	e004      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      break;
 800a136:	bf00      	nop
 800a138:	e002      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      break;   
 800a13a:	bf00      	nop
 800a13c:	e000      	b.n	800a140 <DMA_CheckFifoParam+0xe8>
      break;
 800a13e:	bf00      	nop
    }
  } 
  
  return status; 
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop

0800a150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a150:	b480      	push	{r7}
 800a152:	b089      	sub	sp, #36	; 0x24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a15a:	2300      	movs	r3, #0
 800a15c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a162:	2300      	movs	r3, #0
 800a164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a166:	2300      	movs	r3, #0
 800a168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a16a:	2300      	movs	r3, #0
 800a16c:	61fb      	str	r3, [r7, #28]
 800a16e:	e175      	b.n	800a45c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a170:	2201      	movs	r2, #1
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	fa02 f303 	lsl.w	r3, r2, r3
 800a178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4013      	ands	r3, r2
 800a182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	429a      	cmp	r2, r3
 800a18a:	f040 8164 	bne.w	800a456 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f003 0303 	and.w	r3, r3, #3
 800a196:	2b01      	cmp	r3, #1
 800a198:	d005      	beq.n	800a1a6 <HAL_GPIO_Init+0x56>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f003 0303 	and.w	r3, r3, #3
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d130      	bne.n	800a208 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	005b      	lsls	r3, r3, #1
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b6:	43db      	mvns	r3, r3
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1dc:	2201      	movs	r2, #1
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e4:	43db      	mvns	r3, r3
 800a1e6:	69ba      	ldr	r2, [r7, #24]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	091b      	lsrs	r3, r3, #4
 800a1f2:	f003 0201 	and.w	r2, r3, #1
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f003 0303 	and.w	r3, r3, #3
 800a210:	2b03      	cmp	r3, #3
 800a212:	d017      	beq.n	800a244 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	2203      	movs	r2, #3
 800a220:	fa02 f303 	lsl.w	r3, r2, r3
 800a224:	43db      	mvns	r3, r3
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	4013      	ands	r3, r2
 800a22a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	fa02 f303 	lsl.w	r3, r2, r3
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d123      	bne.n	800a298 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	08da      	lsrs	r2, r3, #3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3208      	adds	r2, #8
 800a258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	220f      	movs	r2, #15
 800a268:	fa02 f303 	lsl.w	r3, r2, r3
 800a26c:	43db      	mvns	r3, r3
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	4013      	ands	r3, r2
 800a272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	691a      	ldr	r2, [r3, #16]
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	fa02 f303 	lsl.w	r3, r2, r3
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	4313      	orrs	r3, r2
 800a288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	08da      	lsrs	r2, r3, #3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3208      	adds	r2, #8
 800a292:	69b9      	ldr	r1, [r7, #24]
 800a294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	f003 0203 	and.w	r2, r3, #3
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80be 	beq.w	800a456 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2da:	4b66      	ldr	r3, [pc, #408]	; (800a474 <HAL_GPIO_Init+0x324>)
 800a2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2de:	4a65      	ldr	r2, [pc, #404]	; (800a474 <HAL_GPIO_Init+0x324>)
 800a2e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a2e6:	4b63      	ldr	r3, [pc, #396]	; (800a474 <HAL_GPIO_Init+0x324>)
 800a2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a2f2:	4a61      	ldr	r2, [pc, #388]	; (800a478 <HAL_GPIO_Init+0x328>)
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	089b      	lsrs	r3, r3, #2
 800a2f8:	3302      	adds	r3, #2
 800a2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	f003 0303 	and.w	r3, r3, #3
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	220f      	movs	r2, #15
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	43db      	mvns	r3, r3
 800a310:	69ba      	ldr	r2, [r7, #24]
 800a312:	4013      	ands	r3, r2
 800a314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a58      	ldr	r2, [pc, #352]	; (800a47c <HAL_GPIO_Init+0x32c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d037      	beq.n	800a38e <HAL_GPIO_Init+0x23e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a57      	ldr	r2, [pc, #348]	; (800a480 <HAL_GPIO_Init+0x330>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d031      	beq.n	800a38a <HAL_GPIO_Init+0x23a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a56      	ldr	r2, [pc, #344]	; (800a484 <HAL_GPIO_Init+0x334>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d02b      	beq.n	800a386 <HAL_GPIO_Init+0x236>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a55      	ldr	r2, [pc, #340]	; (800a488 <HAL_GPIO_Init+0x338>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d025      	beq.n	800a382 <HAL_GPIO_Init+0x232>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a54      	ldr	r2, [pc, #336]	; (800a48c <HAL_GPIO_Init+0x33c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d01f      	beq.n	800a37e <HAL_GPIO_Init+0x22e>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a53      	ldr	r2, [pc, #332]	; (800a490 <HAL_GPIO_Init+0x340>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d019      	beq.n	800a37a <HAL_GPIO_Init+0x22a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a52      	ldr	r2, [pc, #328]	; (800a494 <HAL_GPIO_Init+0x344>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d013      	beq.n	800a376 <HAL_GPIO_Init+0x226>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a51      	ldr	r2, [pc, #324]	; (800a498 <HAL_GPIO_Init+0x348>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d00d      	beq.n	800a372 <HAL_GPIO_Init+0x222>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a50      	ldr	r2, [pc, #320]	; (800a49c <HAL_GPIO_Init+0x34c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d007      	beq.n	800a36e <HAL_GPIO_Init+0x21e>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a4f      	ldr	r2, [pc, #316]	; (800a4a0 <HAL_GPIO_Init+0x350>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d101      	bne.n	800a36a <HAL_GPIO_Init+0x21a>
 800a366:	2309      	movs	r3, #9
 800a368:	e012      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a36a:	230a      	movs	r3, #10
 800a36c:	e010      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a36e:	2308      	movs	r3, #8
 800a370:	e00e      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a372:	2307      	movs	r3, #7
 800a374:	e00c      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a376:	2306      	movs	r3, #6
 800a378:	e00a      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a37a:	2305      	movs	r3, #5
 800a37c:	e008      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a37e:	2304      	movs	r3, #4
 800a380:	e006      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a382:	2303      	movs	r3, #3
 800a384:	e004      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a386:	2302      	movs	r3, #2
 800a388:	e002      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <HAL_GPIO_Init+0x240>
 800a38e:	2300      	movs	r3, #0
 800a390:	69fa      	ldr	r2, [r7, #28]
 800a392:	f002 0203 	and.w	r2, r2, #3
 800a396:	0092      	lsls	r2, r2, #2
 800a398:	4093      	lsls	r3, r2
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a3a0:	4935      	ldr	r1, [pc, #212]	; (800a478 <HAL_GPIO_Init+0x328>)
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	089b      	lsrs	r3, r3, #2
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a3ae:	4b3d      	ldr	r3, [pc, #244]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	43db      	mvns	r3, r3
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a3d2:	4a34      	ldr	r2, [pc, #208]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a3d8:	4b32      	ldr	r3, [pc, #200]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	43db      	mvns	r3, r3
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a3fc:	4a29      	ldr	r2, [pc, #164]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a402:	4b28      	ldr	r3, [pc, #160]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	43db      	mvns	r3, r3
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	4013      	ands	r3, r2
 800a410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a426:	4a1f      	ldr	r2, [pc, #124]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a42c:	4b1d      	ldr	r3, [pc, #116]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	43db      	mvns	r3, r3
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	4013      	ands	r3, r2
 800a43a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a450:	4a14      	ldr	r2, [pc, #80]	; (800a4a4 <HAL_GPIO_Init+0x354>)
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	3301      	adds	r3, #1
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	2b0f      	cmp	r3, #15
 800a460:	f67f ae86 	bls.w	800a170 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop
 800a468:	3724      	adds	r7, #36	; 0x24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	40023800 	.word	0x40023800
 800a478:	40013800 	.word	0x40013800
 800a47c:	40020000 	.word	0x40020000
 800a480:	40020400 	.word	0x40020400
 800a484:	40020800 	.word	0x40020800
 800a488:	40020c00 	.word	0x40020c00
 800a48c:	40021000 	.word	0x40021000
 800a490:	40021400 	.word	0x40021400
 800a494:	40021800 	.word	0x40021800
 800a498:	40021c00 	.word	0x40021c00
 800a49c:	40022000 	.word	0x40022000
 800a4a0:	40022400 	.word	0x40022400
 800a4a4:	40013c00 	.word	0x40013c00

0800a4a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a4be:	2300      	movs	r3, #0
 800a4c0:	617b      	str	r3, [r7, #20]
 800a4c2:	e0d9      	b.n	800a678 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	f040 80c9 	bne.w	800a672 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800a4e0:	4a6b      	ldr	r2, [pc, #428]	; (800a690 <HAL_GPIO_DeInit+0x1e8>)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	089b      	lsrs	r3, r3, #2
 800a4e6:	3302      	adds	r3, #2
 800a4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ec:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f003 0303 	and.w	r3, r3, #3
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	220f      	movs	r2, #15
 800a4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	4013      	ands	r3, r2
 800a500:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a63      	ldr	r2, [pc, #396]	; (800a694 <HAL_GPIO_DeInit+0x1ec>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d037      	beq.n	800a57a <HAL_GPIO_DeInit+0xd2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a62      	ldr	r2, [pc, #392]	; (800a698 <HAL_GPIO_DeInit+0x1f0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d031      	beq.n	800a576 <HAL_GPIO_DeInit+0xce>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a61      	ldr	r2, [pc, #388]	; (800a69c <HAL_GPIO_DeInit+0x1f4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d02b      	beq.n	800a572 <HAL_GPIO_DeInit+0xca>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a60      	ldr	r2, [pc, #384]	; (800a6a0 <HAL_GPIO_DeInit+0x1f8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d025      	beq.n	800a56e <HAL_GPIO_DeInit+0xc6>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a5f      	ldr	r2, [pc, #380]	; (800a6a4 <HAL_GPIO_DeInit+0x1fc>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d01f      	beq.n	800a56a <HAL_GPIO_DeInit+0xc2>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a5e      	ldr	r2, [pc, #376]	; (800a6a8 <HAL_GPIO_DeInit+0x200>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d019      	beq.n	800a566 <HAL_GPIO_DeInit+0xbe>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a5d      	ldr	r2, [pc, #372]	; (800a6ac <HAL_GPIO_DeInit+0x204>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d013      	beq.n	800a562 <HAL_GPIO_DeInit+0xba>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a5c      	ldr	r2, [pc, #368]	; (800a6b0 <HAL_GPIO_DeInit+0x208>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d00d      	beq.n	800a55e <HAL_GPIO_DeInit+0xb6>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a5b      	ldr	r2, [pc, #364]	; (800a6b4 <HAL_GPIO_DeInit+0x20c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d007      	beq.n	800a55a <HAL_GPIO_DeInit+0xb2>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a5a      	ldr	r2, [pc, #360]	; (800a6b8 <HAL_GPIO_DeInit+0x210>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d101      	bne.n	800a556 <HAL_GPIO_DeInit+0xae>
 800a552:	2309      	movs	r3, #9
 800a554:	e012      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a556:	230a      	movs	r3, #10
 800a558:	e010      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a55a:	2308      	movs	r3, #8
 800a55c:	e00e      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a55e:	2307      	movs	r3, #7
 800a560:	e00c      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a562:	2306      	movs	r3, #6
 800a564:	e00a      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a566:	2305      	movs	r3, #5
 800a568:	e008      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a56a:	2304      	movs	r3, #4
 800a56c:	e006      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a56e:	2303      	movs	r3, #3
 800a570:	e004      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a572:	2302      	movs	r3, #2
 800a574:	e002      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <HAL_GPIO_DeInit+0xd4>
 800a57a:	2300      	movs	r3, #0
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	f002 0203 	and.w	r2, r2, #3
 800a582:	0092      	lsls	r2, r2, #2
 800a584:	4093      	lsls	r3, r2
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d132      	bne.n	800a5f2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a58c:	4b4b      	ldr	r3, [pc, #300]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	43db      	mvns	r3, r3
 800a594:	4949      	ldr	r1, [pc, #292]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a596:	4013      	ands	r3, r2
 800a598:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a59a:	4b48      	ldr	r3, [pc, #288]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	4946      	ldr	r1, [pc, #280]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a5a8:	4b44      	ldr	r3, [pc, #272]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a5aa:	68da      	ldr	r2, [r3, #12]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	43db      	mvns	r3, r3
 800a5b0:	4942      	ldr	r1, [pc, #264]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a5b6:	4b41      	ldr	r3, [pc, #260]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	43db      	mvns	r3, r3
 800a5be:	493f      	ldr	r1, [pc, #252]	; (800a6bc <HAL_GPIO_DeInit+0x214>)
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	220f      	movs	r2, #15
 800a5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a5d4:	4a2e      	ldr	r2, [pc, #184]	; (800a690 <HAL_GPIO_DeInit+0x1e8>)
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	089b      	lsrs	r3, r3, #2
 800a5da:	3302      	adds	r3, #2
 800a5dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	43da      	mvns	r2, r3
 800a5e4:	482a      	ldr	r0, [pc, #168]	; (800a690 <HAL_GPIO_DeInit+0x1e8>)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	089b      	lsrs	r3, r3, #2
 800a5ea:	400a      	ands	r2, r1
 800a5ec:	3302      	adds	r3, #2
 800a5ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	2103      	movs	r1, #3
 800a5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a600:	43db      	mvns	r3, r3
 800a602:	401a      	ands	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	08da      	lsrs	r2, r3, #3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3208      	adds	r2, #8
 800a610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	220f      	movs	r2, #15
 800a61e:	fa02 f303 	lsl.w	r3, r2, r3
 800a622:	43db      	mvns	r3, r3
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	08d2      	lsrs	r2, r2, #3
 800a628:	4019      	ands	r1, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3208      	adds	r2, #8
 800a62e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	2103      	movs	r1, #3
 800a63c:	fa01 f303 	lsl.w	r3, r1, r3
 800a640:	43db      	mvns	r3, r3
 800a642:	401a      	ands	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	2101      	movs	r1, #1
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	fa01 f303 	lsl.w	r3, r1, r3
 800a654:	43db      	mvns	r3, r3
 800a656:	401a      	ands	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	2103      	movs	r1, #3
 800a666:	fa01 f303 	lsl.w	r3, r1, r3
 800a66a:	43db      	mvns	r3, r3
 800a66c:	401a      	ands	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	3301      	adds	r3, #1
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2b0f      	cmp	r3, #15
 800a67c:	f67f af22 	bls.w	800a4c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	40013800 	.word	0x40013800
 800a694:	40020000 	.word	0x40020000
 800a698:	40020400 	.word	0x40020400
 800a69c:	40020800 	.word	0x40020800
 800a6a0:	40020c00 	.word	0x40020c00
 800a6a4:	40021000 	.word	0x40021000
 800a6a8:	40021400 	.word	0x40021400
 800a6ac:	40021800 	.word	0x40021800
 800a6b0:	40021c00 	.word	0x40021c00
 800a6b4:	40022000 	.word	0x40022000
 800a6b8:	40022400 	.word	0x40022400
 800a6bc:	40013c00 	.word	0x40013c00

0800a6c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	691a      	ldr	r2, [r3, #16]
 800a6d0:	887b      	ldrh	r3, [r7, #2]
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	73fb      	strb	r3, [r7, #15]
 800a6dc:	e001      	b.n	800a6e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	807b      	strh	r3, [r7, #2]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a700:	787b      	ldrb	r3, [r7, #1]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a706:	887a      	ldrh	r2, [r7, #2]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a70c:	e003      	b.n	800a716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a70e:	887b      	ldrh	r3, [r7, #2]
 800a710:	041a      	lsls	r2, r3, #16
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	619a      	str	r2, [r3, #24]
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a730:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <HAL_PWR_EnterSLEEPMode+0x40>)
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	4a0b      	ldr	r2, [pc, #44]	; (800a764 <HAL_PWR_EnterSLEEPMode+0x40>)
 800a736:	f023 0304 	bic.w	r3, r3, #4
 800a73a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a73c:	f3bf 8f4f 	dsb	sy
}
 800a740:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a742:	f3bf 8f6f 	isb	sy
}
 800a746:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d101      	bne.n	800a752 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800a74e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800a750:	e002      	b.n	800a758 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800a752:	bf40      	sev
    __WFE();
 800a754:	bf20      	wfe
    __WFE();
 800a756:	bf20      	wfe
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	e000ed00 	.word	0xe000ed00

0800a768 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a772:	4b23      	ldr	r3, [pc, #140]	; (800a800 <HAL_PWREx_EnableOverDrive+0x98>)
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	4a22      	ldr	r2, [pc, #136]	; (800a800 <HAL_PWREx_EnableOverDrive+0x98>)
 800a778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a77c:	6413      	str	r3, [r2, #64]	; 0x40
 800a77e:	4b20      	ldr	r3, [pc, #128]	; (800a800 <HAL_PWREx_EnableOverDrive+0x98>)
 800a780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a78a:	4b1e      	ldr	r3, [pc, #120]	; (800a804 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a1d      	ldr	r2, [pc, #116]	; (800a804 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a794:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a796:	f7fe fc2b 	bl	8008ff0 <HAL_GetTick>
 800a79a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a79c:	e009      	b.n	800a7b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a79e:	f7fe fc27 	bl	8008ff0 <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7ac:	d901      	bls.n	800a7b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e022      	b.n	800a7f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a7b2:	4b14      	ldr	r3, [pc, #80]	; (800a804 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7be:	d1ee      	bne.n	800a79e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a7c0:	4b10      	ldr	r3, [pc, #64]	; (800a804 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a0f      	ldr	r2, [pc, #60]	; (800a804 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7cc:	f7fe fc10 	bl	8008ff0 <HAL_GetTick>
 800a7d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a7d2:	e009      	b.n	800a7e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a7d4:	f7fe fc0c 	bl	8008ff0 <HAL_GetTick>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7e2:	d901      	bls.n	800a7e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e007      	b.n	800a7f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7f4:	d1ee      	bne.n	800a7d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	40023800 	.word	0x40023800
 800a804:	40007000 	.word	0x40007000

0800a808 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a810:	f7fe fbee 	bl	8008ff0 <HAL_GetTick>
 800a814:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e067      	b.n	800a8f0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10b      	bne.n	800a844 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7f8 ffe3 	bl	8003800 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a83a:	f241 3188 	movw	r1, #5000	; 0x1388
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fa86 	bl	800ad50 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	3b01      	subs	r3, #1
 800a854:	021a      	lsls	r2, r3, #8
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	2120      	movs	r1, #32
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa7e 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800a870:	4603      	mov	r3, r0
 800a872:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a874:	7afb      	ldrb	r3, [r7, #11]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d135      	bne.n	800a8e6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	4b1d      	ldr	r3, [pc, #116]	; (800a8f8 <HAL_QSPI_Init+0xf0>)
 800a882:	4013      	ands	r3, r2
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6852      	ldr	r2, [r2, #4]
 800a888:	0611      	lsls	r1, r2, #24
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	68d2      	ldr	r2, [r2, #12]
 800a88e:	4311      	orrs	r1, r2
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	69d2      	ldr	r2, [r2, #28]
 800a894:	4311      	orrs	r1, r2
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6a12      	ldr	r2, [r2, #32]
 800a89a:	4311      	orrs	r1, r2
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	4b14      	ldr	r3, [pc, #80]	; (800a8fc <HAL_QSPI_Init+0xf4>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	6912      	ldr	r2, [r2, #16]
 800a8b2:	0411      	lsls	r1, r2, #16
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	6952      	ldr	r2, [r2, #20]
 800a8b8:	4311      	orrs	r1, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	6992      	ldr	r2, [r2, #24]
 800a8be:	4311      	orrs	r1, r2
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0201 	orr.w	r2, r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a8ee:	7afb      	ldrb	r3, [r7, #11]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	00ffff2f 	.word	0x00ffff2f
 800a8fc:	ffe0f8fe 	.word	0xffe0f8fe

0800a900 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e016      	b.n	800a940 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0201 	bic.w	r2, r2, #1
 800a920:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7f9 f81c 	bl	8003960 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a954:	f7fe fb4c 	bl	8008ff0 <HAL_GetTick>
 800a958:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <HAL_QSPI_Command+0x22>
 800a966:	2302      	movs	r3, #2
 800a968:	e048      	b.n	800a9fc <HAL_QSPI_Command+0xb4>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d137      	bne.n	800a9ee <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2200      	movs	r2, #0
 800a994:	2120      	movs	r1, #32
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f9e8 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a9a0:	7dfb      	ldrb	r3, [r7, #23]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d125      	bne.n	800a9f2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	68b9      	ldr	r1, [r7, #8]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f000 fa15 	bl	800adda <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d115      	bne.n	800a9e4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	2102      	movs	r1, #2
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f000 f9d2 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10f      	bne.n	800a9f2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9e2:	e006      	b.n	800a9f2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9ec:	e001      	b.n	800a9f2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	; 0x28
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800aa14:	f7fe faec 	bl	8008ff0 <HAL_GetTick>
 800aa18:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3320      	adds	r3, #32
 800aa20:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d101      	bne.n	800aa32 <HAL_QSPI_Transmit+0x2e>
 800aa2e:	2302      	movs	r3, #2
 800aa30:	e076      	b.n	800ab20 <HAL_QSPI_Transmit+0x11c>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d165      	bne.n	800ab12 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d056      	beq.n	800ab00 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2212      	movs	r2, #18
 800aa56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695a      	ldr	r2, [r3, #20]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800aa86:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800aa88:	e01b      	b.n	800aac2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	2201      	movs	r2, #1
 800aa92:	2104      	movs	r1, #4
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f000 f969 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800aa9e:	7ffb      	ldrb	r3, [r7, #31]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d113      	bne.n	800aacc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	781a      	ldrb	r2, [r3, #0]
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	1e5a      	subs	r2, r3, #1
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1df      	bne.n	800aa8a <HAL_QSPI_Transmit+0x86>
 800aaca:	e000      	b.n	800aace <HAL_QSPI_Transmit+0xca>
          break;
 800aacc:	bf00      	nop
      }

      if (status == HAL_OK)
 800aace:	7ffb      	ldrb	r3, [r7, #31]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d110      	bne.n	800aaf6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	2201      	movs	r2, #1
 800aadc:	2102      	movs	r1, #2
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 f944 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800aae4:	4603      	mov	r3, r0
 800aae6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800aae8:	7ffb      	ldrb	r3, [r7, #31]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d103      	bne.n	800aaf6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aafe:	e00a      	b.n	800ab16 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab04:	f043 0208 	orr.w	r2, r3, #8
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	77fb      	strb	r3, [r7, #31]
 800ab10:	e001      	b.n	800ab16 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ab12:	2302      	movs	r3, #2
 800ab14:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ab1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3720      	adds	r7, #32
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08a      	sub	sp, #40	; 0x28
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ab38:	f7fe fa5a 	bl	8008ff0 <HAL_GetTick>
 800ab3c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3320      	adds	r3, #32
 800ab4c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d101      	bne.n	800ab5e <HAL_QSPI_Receive+0x36>
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	e07d      	b.n	800ac5a <HAL_QSPI_Receive+0x132>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d16c      	bne.n	800ac4c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d05d      	beq.n	800ac3a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2222      	movs	r2, #34	; 0x22
 800ab82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800abb6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800abc0:	e01c      	b.n	800abfc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2201      	movs	r2, #1
 800abca:	2106      	movs	r1, #6
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f8cd 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800abd6:	7ffb      	ldrb	r3, [r7, #31]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d114      	bne.n	800ac06 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	7812      	ldrb	r2, [r2, #0]
 800abe4:	b2d2      	uxtb	r2, r2
 800abe6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf6:	1e5a      	subs	r2, r3, #1
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1de      	bne.n	800abc2 <HAL_QSPI_Receive+0x9a>
 800ac04:	e000      	b.n	800ac08 <HAL_QSPI_Receive+0xe0>
          break;
 800ac06:	bf00      	nop
      }

      if (status == HAL_OK)
 800ac08:	7ffb      	ldrb	r3, [r7, #31]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d110      	bne.n	800ac30 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	2201      	movs	r2, #1
 800ac16:	2102      	movs	r1, #2
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f8a7 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800ac22:	7ffb      	ldrb	r3, [r7, #31]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac38:	e00a      	b.n	800ac50 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac3e:	f043 0208 	orr.w	r2, r3, #8
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	77fb      	strb	r3, [r7, #31]
 800ac4a:	e001      	b.n	800ac50 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ac58:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b088      	sub	sp, #32
 800ac66:	af02      	add	r7, sp, #8
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607a      	str	r2, [r7, #4]
 800ac6e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac70:	f7fe f9be 	bl	8008ff0 <HAL_GetTick>
 800ac74:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <HAL_QSPI_AutoPolling+0x24>
 800ac82:	2302      	movs	r3, #2
 800ac84:	e060      	b.n	800ad48 <HAL_QSPI_AutoPolling+0xe6>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d14f      	bne.n	800ad3a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2242      	movs	r2, #66	; 0x42
 800aca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2200      	movs	r2, #0
 800acb0:	2120      	movs	r1, #32
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f85a 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d13d      	bne.n	800ad3e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6812      	ldr	r2, [r2, #0]
 800acca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	6852      	ldr	r2, [r2, #4]
 800acd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	6892      	ldr	r2, [r2, #8]
 800acde:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	431a      	orrs	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800acf8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ad02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad06:	68b9      	ldr	r1, [r7, #8]
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 f866 	bl	800adda <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2201      	movs	r2, #1
 800ad16:	2108      	movs	r1, #8
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 f827 	bl	800ad6c <QSPI_WaitFlagStateUntilTimeout>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800ad22:	7dfb      	ldrb	r3, [r7, #23]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2208      	movs	r2, #8
 800ad2e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad38:	e001      	b.n	800ad3e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	603b      	str	r3, [r7, #0]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ad7c:	e01a      	b.n	800adb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad84:	d016      	beq.n	800adb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad86:	f7fe f933 	bl	8008ff0 <HAL_GetTick>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d302      	bcc.n	800ad9c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10b      	bne.n	800adb4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2204      	movs	r2, #4
 800ada0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada8:	f043 0201 	orr.w	r2, r3, #1
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e00e      	b.n	800add2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	4013      	ands	r3, r2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bf14      	ite	ne
 800adc2:	2301      	movne	r3, #1
 800adc4:	2300      	moveq	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	461a      	mov	r2, r3
 800adca:	79fb      	ldrb	r3, [r7, #7]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d1d6      	bne.n	800ad7e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800adda:	b480      	push	{r7}
 800addc:	b085      	sub	sp, #20
 800adde:	af00      	add	r7, sp, #0
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	2b00      	cmp	r3, #0
 800adec:	d009      	beq.n	800ae02 <QSPI_Config+0x28>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800adf4:	d005      	beq.n	800ae02 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3a01      	subs	r2, #1
 800ae00:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80b9 	beq.w	800af7e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d05f      	beq.n	800aed4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	6892      	ldr	r2, [r2, #8]
 800ae1c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d031      	beq.n	800ae8a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae34:	431a      	orrs	r2, r3
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	049b      	lsls	r3, r3, #18
 800ae42:	431a      	orrs	r2, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	431a      	orrs	r2, r3
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	431a      	orrs	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	ea42 0103 	orr.w	r1, r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	430a      	orrs	r2, r1
 800ae72:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ae7a:	f000 812e 	beq.w	800b0da <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	6852      	ldr	r2, [r2, #4]
 800ae86:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800ae88:	e127      	b.n	800b0da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae92:	431a      	orrs	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	049b      	lsls	r3, r3, #18
 800aea6:	431a      	orrs	r2, r3
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	431a      	orrs	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	ea42 0103 	orr.w	r1, r2, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	430a      	orrs	r2, r1
 800aed0:	615a      	str	r2, [r3, #20]
}
 800aed2:	e102      	b.n	800b0da <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d02e      	beq.n	800af3a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	431a      	orrs	r2, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeea:	431a      	orrs	r2, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	431a      	orrs	r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	049b      	lsls	r3, r3, #18
 800aef8:	431a      	orrs	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	431a      	orrs	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	431a      	orrs	r2, r3
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	431a      	orrs	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	431a      	orrs	r2, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	ea42 0103 	orr.w	r1, r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	430a      	orrs	r2, r1
 800af22:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800af2a:	f000 80d6 	beq.w	800b0da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	6852      	ldr	r2, [r2, #4]
 800af36:	619a      	str	r2, [r3, #24]
}
 800af38:	e0cf      	b.n	800b0da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af42:	431a      	orrs	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af48:	431a      	orrs	r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	431a      	orrs	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	049b      	lsls	r3, r3, #18
 800af56:	431a      	orrs	r2, r3
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	6a1b      	ldr	r3, [r3, #32]
 800af5c:	431a      	orrs	r2, r3
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	431a      	orrs	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	431a      	orrs	r2, r3
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	ea42 0103 	orr.w	r1, r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	430a      	orrs	r2, r1
 800af7a:	615a      	str	r2, [r3, #20]
}
 800af7c:	e0ad      	b.n	800b0da <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d058      	beq.n	800b038 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	6892      	ldr	r2, [r2, #8]
 800af8e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d02d      	beq.n	800aff4 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa0:	431a      	orrs	r2, r3
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa6:	431a      	orrs	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	431a      	orrs	r2, r3
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	695b      	ldr	r3, [r3, #20]
 800afb2:	049b      	lsls	r3, r3, #18
 800afb4:	431a      	orrs	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	431a      	orrs	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	431a      	orrs	r2, r3
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	431a      	orrs	r2, r3
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	69db      	ldr	r3, [r3, #28]
 800afcc:	431a      	orrs	r2, r3
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	ea42 0103 	orr.w	r1, r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	430a      	orrs	r2, r1
 800afde:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800afe6:	d078      	beq.n	800b0da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	6852      	ldr	r2, [r2, #4]
 800aff0:	619a      	str	r2, [r3, #24]
}
 800aff2:	e072      	b.n	800b0da <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affc:	431a      	orrs	r2, r3
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b002:	431a      	orrs	r2, r3
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	431a      	orrs	r2, r3
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	049b      	lsls	r3, r3, #18
 800b010:	431a      	orrs	r2, r3
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	431a      	orrs	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	431a      	orrs	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	431a      	orrs	r2, r3
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	ea42 0103 	orr.w	r1, r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	430a      	orrs	r2, r1
 800b034:	615a      	str	r2, [r3, #20]
}
 800b036:	e050      	b.n	800b0da <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d02a      	beq.n	800b096 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	431a      	orrs	r2, r3
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04e:	431a      	orrs	r2, r3
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b054:	431a      	orrs	r2, r3
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	049b      	lsls	r3, r3, #18
 800b05c:	431a      	orrs	r2, r3
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	431a      	orrs	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	431a      	orrs	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	431a      	orrs	r2, r3
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	ea42 0103 	orr.w	r1, r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	430a      	orrs	r2, r1
 800b080:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b088:	d027      	beq.n	800b0da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	6852      	ldr	r2, [r2, #4]
 800b092:	619a      	str	r2, [r3, #24]
}
 800b094:	e021      	b.n	800b0da <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d01d      	beq.n	800b0da <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	049b      	lsls	r3, r3, #18
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	ea42 0103 	orr.w	r1, r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	615a      	str	r2, [r3, #20]
}
 800b0da:	bf00      	nop
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
	...

0800b0e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e29b      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 8087 	beq.w	800b21a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b10c:	4b96      	ldr	r3, [pc, #600]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f003 030c 	and.w	r3, r3, #12
 800b114:	2b04      	cmp	r3, #4
 800b116:	d00c      	beq.n	800b132 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b118:	4b93      	ldr	r3, [pc, #588]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f003 030c 	and.w	r3, r3, #12
 800b120:	2b08      	cmp	r3, #8
 800b122:	d112      	bne.n	800b14a <HAL_RCC_OscConfig+0x62>
 800b124:	4b90      	ldr	r3, [pc, #576]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b12c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b130:	d10b      	bne.n	800b14a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b132:	4b8d      	ldr	r3, [pc, #564]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d06c      	beq.n	800b218 <HAL_RCC_OscConfig+0x130>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d168      	bne.n	800b218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e275      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b152:	d106      	bne.n	800b162 <HAL_RCC_OscConfig+0x7a>
 800b154:	4b84      	ldr	r3, [pc, #528]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a83      	ldr	r2, [pc, #524]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b15a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	e02e      	b.n	800b1c0 <HAL_RCC_OscConfig+0xd8>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10c      	bne.n	800b184 <HAL_RCC_OscConfig+0x9c>
 800b16a:	4b7f      	ldr	r3, [pc, #508]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a7e      	ldr	r2, [pc, #504]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	4b7c      	ldr	r3, [pc, #496]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a7b      	ldr	r2, [pc, #492]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b17c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b180:	6013      	str	r3, [r2, #0]
 800b182:	e01d      	b.n	800b1c0 <HAL_RCC_OscConfig+0xd8>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b18c:	d10c      	bne.n	800b1a8 <HAL_RCC_OscConfig+0xc0>
 800b18e:	4b76      	ldr	r3, [pc, #472]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a75      	ldr	r2, [pc, #468]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	4b73      	ldr	r3, [pc, #460]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a72      	ldr	r2, [pc, #456]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b1a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	e00b      	b.n	800b1c0 <HAL_RCC_OscConfig+0xd8>
 800b1a8:	4b6f      	ldr	r3, [pc, #444]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a6e      	ldr	r2, [pc, #440]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b1ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	4b6c      	ldr	r3, [pc, #432]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a6b      	ldr	r2, [pc, #428]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b1ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d013      	beq.n	800b1f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1c8:	f7fd ff12 	bl	8008ff0 <HAL_GetTick>
 800b1cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1d0:	f7fd ff0e 	bl	8008ff0 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b64      	cmp	r3, #100	; 0x64
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e229      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1e2:	4b61      	ldr	r3, [pc, #388]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0f0      	beq.n	800b1d0 <HAL_RCC_OscConfig+0xe8>
 800b1ee:	e014      	b.n	800b21a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f0:	f7fd fefe 	bl	8008ff0 <HAL_GetTick>
 800b1f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1f6:	e008      	b.n	800b20a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1f8:	f7fd fefa 	bl	8008ff0 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b64      	cmp	r3, #100	; 0x64
 800b204:	d901      	bls.n	800b20a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e215      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b20a:	4b57      	ldr	r3, [pc, #348]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1f0      	bne.n	800b1f8 <HAL_RCC_OscConfig+0x110>
 800b216:	e000      	b.n	800b21a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d069      	beq.n	800b2fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b226:	4b50      	ldr	r3, [pc, #320]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f003 030c 	and.w	r3, r3, #12
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b232:	4b4d      	ldr	r3, [pc, #308]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f003 030c 	and.w	r3, r3, #12
 800b23a:	2b08      	cmp	r3, #8
 800b23c:	d11c      	bne.n	800b278 <HAL_RCC_OscConfig+0x190>
 800b23e:	4b4a      	ldr	r3, [pc, #296]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d116      	bne.n	800b278 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b24a:	4b47      	ldr	r3, [pc, #284]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d005      	beq.n	800b262 <HAL_RCC_OscConfig+0x17a>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d001      	beq.n	800b262 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e1e9      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b262:	4b41      	ldr	r3, [pc, #260]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	493d      	ldr	r1, [pc, #244]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b272:	4313      	orrs	r3, r2
 800b274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b276:	e040      	b.n	800b2fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d023      	beq.n	800b2c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b280:	4b39      	ldr	r3, [pc, #228]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a38      	ldr	r2, [pc, #224]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b286:	f043 0301 	orr.w	r3, r3, #1
 800b28a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b28c:	f7fd feb0 	bl	8008ff0 <HAL_GetTick>
 800b290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b292:	e008      	b.n	800b2a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b294:	f7fd feac 	bl	8008ff0 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e1c7      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2a6:	4b30      	ldr	r3, [pc, #192]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0f0      	beq.n	800b294 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2b2:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	4929      	ldr	r1, [pc, #164]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	600b      	str	r3, [r1, #0]
 800b2c6:	e018      	b.n	800b2fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2c8:	4b27      	ldr	r3, [pc, #156]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a26      	ldr	r2, [pc, #152]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b2ce:	f023 0301 	bic.w	r3, r3, #1
 800b2d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d4:	f7fd fe8c 	bl	8008ff0 <HAL_GetTick>
 800b2d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2da:	e008      	b.n	800b2ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2dc:	f7fd fe88 	bl	8008ff0 <HAL_GetTick>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d901      	bls.n	800b2ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e1a3      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2ee:	4b1e      	ldr	r3, [pc, #120]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1f0      	bne.n	800b2dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0308 	and.w	r3, r3, #8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d038      	beq.n	800b378 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d019      	beq.n	800b342 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b30e:	4b16      	ldr	r3, [pc, #88]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b312:	4a15      	ldr	r2, [pc, #84]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b314:	f043 0301 	orr.w	r3, r3, #1
 800b318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b31a:	f7fd fe69 	bl	8008ff0 <HAL_GetTick>
 800b31e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b320:	e008      	b.n	800b334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b322:	f7fd fe65 	bl	8008ff0 <HAL_GetTick>
 800b326:	4602      	mov	r2, r0
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d901      	bls.n	800b334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b330:	2303      	movs	r3, #3
 800b332:	e180      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b334:	4b0c      	ldr	r3, [pc, #48]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b338:	f003 0302 	and.w	r3, r3, #2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0f0      	beq.n	800b322 <HAL_RCC_OscConfig+0x23a>
 800b340:	e01a      	b.n	800b378 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b342:	4b09      	ldr	r3, [pc, #36]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b346:	4a08      	ldr	r2, [pc, #32]	; (800b368 <HAL_RCC_OscConfig+0x280>)
 800b348:	f023 0301 	bic.w	r3, r3, #1
 800b34c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b34e:	f7fd fe4f 	bl	8008ff0 <HAL_GetTick>
 800b352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b354:	e00a      	b.n	800b36c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b356:	f7fd fe4b 	bl	8008ff0 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	d903      	bls.n	800b36c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b364:	2303      	movs	r3, #3
 800b366:	e166      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
 800b368:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b36c:	4b92      	ldr	r3, [pc, #584]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b370:	f003 0302 	and.w	r3, r3, #2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1ee      	bne.n	800b356 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 80a4 	beq.w	800b4ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b386:	4b8c      	ldr	r3, [pc, #560]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10d      	bne.n	800b3ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b392:	4b89      	ldr	r3, [pc, #548]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	4a88      	ldr	r2, [pc, #544]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b39c:	6413      	str	r3, [r2, #64]	; 0x40
 800b39e:	4b86      	ldr	r3, [pc, #536]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3a6:	60bb      	str	r3, [r7, #8]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3ae:	4b83      	ldr	r3, [pc, #524]	; (800b5bc <HAL_RCC_OscConfig+0x4d4>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d118      	bne.n	800b3ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b3ba:	4b80      	ldr	r3, [pc, #512]	; (800b5bc <HAL_RCC_OscConfig+0x4d4>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a7f      	ldr	r2, [pc, #508]	; (800b5bc <HAL_RCC_OscConfig+0x4d4>)
 800b3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3c6:	f7fd fe13 	bl	8008ff0 <HAL_GetTick>
 800b3ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3cc:	e008      	b.n	800b3e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3ce:	f7fd fe0f 	bl	8008ff0 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	2b64      	cmp	r3, #100	; 0x64
 800b3da:	d901      	bls.n	800b3e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e12a      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3e0:	4b76      	ldr	r3, [pc, #472]	; (800b5bc <HAL_RCC_OscConfig+0x4d4>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d0f0      	beq.n	800b3ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d106      	bne.n	800b402 <HAL_RCC_OscConfig+0x31a>
 800b3f4:	4b70      	ldr	r3, [pc, #448]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f8:	4a6f      	ldr	r2, [pc, #444]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b3fa:	f043 0301 	orr.w	r3, r3, #1
 800b3fe:	6713      	str	r3, [r2, #112]	; 0x70
 800b400:	e02d      	b.n	800b45e <HAL_RCC_OscConfig+0x376>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10c      	bne.n	800b424 <HAL_RCC_OscConfig+0x33c>
 800b40a:	4b6b      	ldr	r3, [pc, #428]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40e:	4a6a      	ldr	r2, [pc, #424]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b410:	f023 0301 	bic.w	r3, r3, #1
 800b414:	6713      	str	r3, [r2, #112]	; 0x70
 800b416:	4b68      	ldr	r3, [pc, #416]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41a:	4a67      	ldr	r2, [pc, #412]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b41c:	f023 0304 	bic.w	r3, r3, #4
 800b420:	6713      	str	r3, [r2, #112]	; 0x70
 800b422:	e01c      	b.n	800b45e <HAL_RCC_OscConfig+0x376>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	2b05      	cmp	r3, #5
 800b42a:	d10c      	bne.n	800b446 <HAL_RCC_OscConfig+0x35e>
 800b42c:	4b62      	ldr	r3, [pc, #392]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b430:	4a61      	ldr	r2, [pc, #388]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b432:	f043 0304 	orr.w	r3, r3, #4
 800b436:	6713      	str	r3, [r2, #112]	; 0x70
 800b438:	4b5f      	ldr	r3, [pc, #380]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43c:	4a5e      	ldr	r2, [pc, #376]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b43e:	f043 0301 	orr.w	r3, r3, #1
 800b442:	6713      	str	r3, [r2, #112]	; 0x70
 800b444:	e00b      	b.n	800b45e <HAL_RCC_OscConfig+0x376>
 800b446:	4b5c      	ldr	r3, [pc, #368]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44a:	4a5b      	ldr	r2, [pc, #364]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b44c:	f023 0301 	bic.w	r3, r3, #1
 800b450:	6713      	str	r3, [r2, #112]	; 0x70
 800b452:	4b59      	ldr	r3, [pc, #356]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b456:	4a58      	ldr	r2, [pc, #352]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b458:	f023 0304 	bic.w	r3, r3, #4
 800b45c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d015      	beq.n	800b492 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b466:	f7fd fdc3 	bl	8008ff0 <HAL_GetTick>
 800b46a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b46c:	e00a      	b.n	800b484 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b46e:	f7fd fdbf 	bl	8008ff0 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d901      	bls.n	800b484 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e0d8      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b484:	4b4c      	ldr	r3, [pc, #304]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0ee      	beq.n	800b46e <HAL_RCC_OscConfig+0x386>
 800b490:	e014      	b.n	800b4bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b492:	f7fd fdad 	bl	8008ff0 <HAL_GetTick>
 800b496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b498:	e00a      	b.n	800b4b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b49a:	f7fd fda9 	bl	8008ff0 <HAL_GetTick>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d901      	bls.n	800b4b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e0c2      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4b0:	4b41      	ldr	r3, [pc, #260]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b4:	f003 0302 	and.w	r3, r3, #2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1ee      	bne.n	800b49a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d105      	bne.n	800b4ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4c2:	4b3d      	ldr	r3, [pc, #244]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c6:	4a3c      	ldr	r2, [pc, #240]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b4c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 80ae 	beq.w	800b634 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b4d8:	4b37      	ldr	r3, [pc, #220]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	f003 030c 	and.w	r3, r3, #12
 800b4e0:	2b08      	cmp	r3, #8
 800b4e2:	d06d      	beq.n	800b5c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d14b      	bne.n	800b584 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ec:	4b32      	ldr	r3, [pc, #200]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a31      	ldr	r2, [pc, #196]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b4f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f8:	f7fd fd7a 	bl	8008ff0 <HAL_GetTick>
 800b4fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b500:	f7fd fd76 	bl	8008ff0 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d901      	bls.n	800b512 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e091      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b512:	4b29      	ldr	r3, [pc, #164]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1f0      	bne.n	800b500 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	69da      	ldr	r2, [r3, #28]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	019b      	lsls	r3, r3, #6
 800b52e:	431a      	orrs	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b534:	085b      	lsrs	r3, r3, #1
 800b536:	3b01      	subs	r3, #1
 800b538:	041b      	lsls	r3, r3, #16
 800b53a:	431a      	orrs	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	061b      	lsls	r3, r3, #24
 800b542:	431a      	orrs	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b548:	071b      	lsls	r3, r3, #28
 800b54a:	491b      	ldr	r1, [pc, #108]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b54c:	4313      	orrs	r3, r2
 800b54e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b550:	4b19      	ldr	r3, [pc, #100]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a18      	ldr	r2, [pc, #96]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b55a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b55c:	f7fd fd48 	bl	8008ff0 <HAL_GetTick>
 800b560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b562:	e008      	b.n	800b576 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b564:	f7fd fd44 	bl	8008ff0 <HAL_GetTick>
 800b568:	4602      	mov	r2, r0
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d901      	bls.n	800b576 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e05f      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b576:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0f0      	beq.n	800b564 <HAL_RCC_OscConfig+0x47c>
 800b582:	e057      	b.n	800b634 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b584:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a0b      	ldr	r2, [pc, #44]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b58a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b58e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b590:	f7fd fd2e 	bl	8008ff0 <HAL_GetTick>
 800b594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b596:	e008      	b.n	800b5aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b598:	f7fd fd2a 	bl	8008ff0 <HAL_GetTick>
 800b59c:	4602      	mov	r2, r0
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d901      	bls.n	800b5aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e045      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5aa:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <HAL_RCC_OscConfig+0x4d0>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1f0      	bne.n	800b598 <HAL_RCC_OscConfig+0x4b0>
 800b5b6:	e03d      	b.n	800b634 <HAL_RCC_OscConfig+0x54c>
 800b5b8:	40023800 	.word	0x40023800
 800b5bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b5c0:	4b1f      	ldr	r3, [pc, #124]	; (800b640 <HAL_RCC_OscConfig+0x558>)
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d030      	beq.n	800b630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d129      	bne.n	800b630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d122      	bne.n	800b630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b5f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d119      	bne.n	800b630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b606:	085b      	lsrs	r3, r3, #1
 800b608:	3b01      	subs	r3, #1
 800b60a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d10f      	bne.n	800b630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d107      	bne.n	800b630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d001      	beq.n	800b634 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	e000      	b.n	800b636 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	40023800 	.word	0x40023800

0800b644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e0d0      	b.n	800b7fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b65c:	4b6a      	ldr	r3, [pc, #424]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 030f 	and.w	r3, r3, #15
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d910      	bls.n	800b68c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b66a:	4b67      	ldr	r3, [pc, #412]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f023 020f 	bic.w	r2, r3, #15
 800b672:	4965      	ldr	r1, [pc, #404]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	4313      	orrs	r3, r2
 800b678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b67a:	4b63      	ldr	r3, [pc, #396]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 030f 	and.w	r3, r3, #15
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	d001      	beq.n	800b68c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e0b8      	b.n	800b7fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0302 	and.w	r3, r3, #2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d020      	beq.n	800b6da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b6a4:	4b59      	ldr	r3, [pc, #356]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	4a58      	ldr	r2, [pc, #352]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b6aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b6ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0308 	and.w	r3, r3, #8
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d005      	beq.n	800b6c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6bc:	4b53      	ldr	r3, [pc, #332]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	4a52      	ldr	r2, [pc, #328]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b6c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b6c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6c8:	4b50      	ldr	r3, [pc, #320]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	494d      	ldr	r1, [pc, #308]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d040      	beq.n	800b768 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d107      	bne.n	800b6fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6ee:	4b47      	ldr	r3, [pc, #284]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d115      	bne.n	800b726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e07f      	b.n	800b7fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d107      	bne.n	800b716 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b706:	4b41      	ldr	r3, [pc, #260]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d109      	bne.n	800b726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e073      	b.n	800b7fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b716:	4b3d      	ldr	r3, [pc, #244]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e06b      	b.n	800b7fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b726:	4b39      	ldr	r3, [pc, #228]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f023 0203 	bic.w	r2, r3, #3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	4936      	ldr	r1, [pc, #216]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b734:	4313      	orrs	r3, r2
 800b736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b738:	f7fd fc5a 	bl	8008ff0 <HAL_GetTick>
 800b73c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b73e:	e00a      	b.n	800b756 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b740:	f7fd fc56 	bl	8008ff0 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b74e:	4293      	cmp	r3, r2
 800b750:	d901      	bls.n	800b756 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e053      	b.n	800b7fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b756:	4b2d      	ldr	r3, [pc, #180]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	f003 020c 	and.w	r2, r3, #12
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	429a      	cmp	r2, r3
 800b766:	d1eb      	bne.n	800b740 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b768:	4b27      	ldr	r3, [pc, #156]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 030f 	and.w	r3, r3, #15
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d210      	bcs.n	800b798 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b776:	4b24      	ldr	r3, [pc, #144]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f023 020f 	bic.w	r2, r3, #15
 800b77e:	4922      	ldr	r1, [pc, #136]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	4313      	orrs	r3, r2
 800b784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b786:	4b20      	ldr	r3, [pc, #128]	; (800b808 <HAL_RCC_ClockConfig+0x1c4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f003 030f 	and.w	r3, r3, #15
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	429a      	cmp	r2, r3
 800b792:	d001      	beq.n	800b798 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e032      	b.n	800b7fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0304 	and.w	r3, r3, #4
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d008      	beq.n	800b7b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7a4:	4b19      	ldr	r3, [pc, #100]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	4916      	ldr	r1, [pc, #88]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0308 	and.w	r3, r3, #8
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d009      	beq.n	800b7d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7c2:	4b12      	ldr	r3, [pc, #72]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	00db      	lsls	r3, r3, #3
 800b7d0:	490e      	ldr	r1, [pc, #56]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7d6:	f000 f821 	bl	800b81c <HAL_RCC_GetSysClockFreq>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <HAL_RCC_ClockConfig+0x1c8>)
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	091b      	lsrs	r3, r3, #4
 800b7e2:	f003 030f 	and.w	r3, r3, #15
 800b7e6:	490a      	ldr	r1, [pc, #40]	; (800b810 <HAL_RCC_ClockConfig+0x1cc>)
 800b7e8:	5ccb      	ldrb	r3, [r1, r3]
 800b7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ee:	4a09      	ldr	r2, [pc, #36]	; (800b814 <HAL_RCC_ClockConfig+0x1d0>)
 800b7f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <HAL_RCC_ClockConfig+0x1d4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7f8 f9ba 	bl	8003b70 <HAL_InitTick>

  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	40023c00 	.word	0x40023c00
 800b80c:	40023800 	.word	0x40023800
 800b810:	080159f4 	.word	0x080159f4
 800b814:	20000008 	.word	0x20000008
 800b818:	2000000c 	.word	0x2000000c

0800b81c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b81c:	b5b0      	push	{r4, r5, r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b822:	2100      	movs	r1, #0
 800b824:	6079      	str	r1, [r7, #4]
 800b826:	2100      	movs	r1, #0
 800b828:	60f9      	str	r1, [r7, #12]
 800b82a:	2100      	movs	r1, #0
 800b82c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b82e:	2100      	movs	r1, #0
 800b830:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b832:	4952      	ldr	r1, [pc, #328]	; (800b97c <HAL_RCC_GetSysClockFreq+0x160>)
 800b834:	6889      	ldr	r1, [r1, #8]
 800b836:	f001 010c 	and.w	r1, r1, #12
 800b83a:	2908      	cmp	r1, #8
 800b83c:	d00d      	beq.n	800b85a <HAL_RCC_GetSysClockFreq+0x3e>
 800b83e:	2908      	cmp	r1, #8
 800b840:	f200 8094 	bhi.w	800b96c <HAL_RCC_GetSysClockFreq+0x150>
 800b844:	2900      	cmp	r1, #0
 800b846:	d002      	beq.n	800b84e <HAL_RCC_GetSysClockFreq+0x32>
 800b848:	2904      	cmp	r1, #4
 800b84a:	d003      	beq.n	800b854 <HAL_RCC_GetSysClockFreq+0x38>
 800b84c:	e08e      	b.n	800b96c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b84e:	4b4c      	ldr	r3, [pc, #304]	; (800b980 <HAL_RCC_GetSysClockFreq+0x164>)
 800b850:	60bb      	str	r3, [r7, #8]
      break;
 800b852:	e08e      	b.n	800b972 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b854:	4b4b      	ldr	r3, [pc, #300]	; (800b984 <HAL_RCC_GetSysClockFreq+0x168>)
 800b856:	60bb      	str	r3, [r7, #8]
      break;
 800b858:	e08b      	b.n	800b972 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b85a:	4948      	ldr	r1, [pc, #288]	; (800b97c <HAL_RCC_GetSysClockFreq+0x160>)
 800b85c:	6849      	ldr	r1, [r1, #4]
 800b85e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b862:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b864:	4945      	ldr	r1, [pc, #276]	; (800b97c <HAL_RCC_GetSysClockFreq+0x160>)
 800b866:	6849      	ldr	r1, [r1, #4]
 800b868:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b86c:	2900      	cmp	r1, #0
 800b86e:	d024      	beq.n	800b8ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b870:	4942      	ldr	r1, [pc, #264]	; (800b97c <HAL_RCC_GetSysClockFreq+0x160>)
 800b872:	6849      	ldr	r1, [r1, #4]
 800b874:	0989      	lsrs	r1, r1, #6
 800b876:	4608      	mov	r0, r1
 800b878:	f04f 0100 	mov.w	r1, #0
 800b87c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b880:	f04f 0500 	mov.w	r5, #0
 800b884:	ea00 0204 	and.w	r2, r0, r4
 800b888:	ea01 0305 	and.w	r3, r1, r5
 800b88c:	493d      	ldr	r1, [pc, #244]	; (800b984 <HAL_RCC_GetSysClockFreq+0x168>)
 800b88e:	fb01 f003 	mul.w	r0, r1, r3
 800b892:	2100      	movs	r1, #0
 800b894:	fb01 f102 	mul.w	r1, r1, r2
 800b898:	1844      	adds	r4, r0, r1
 800b89a:	493a      	ldr	r1, [pc, #232]	; (800b984 <HAL_RCC_GetSysClockFreq+0x168>)
 800b89c:	fba2 0101 	umull	r0, r1, r2, r1
 800b8a0:	1863      	adds	r3, r4, r1
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	f04f 0300 	mov.w	r3, #0
 800b8ac:	f7f4 fd80 	bl	80003b0 <__aeabi_uldivmod>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	e04a      	b.n	800b950 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8ba:	4b30      	ldr	r3, [pc, #192]	; (800b97c <HAL_RCC_GetSysClockFreq+0x160>)
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	099b      	lsrs	r3, r3, #6
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f04f 0300 	mov.w	r3, #0
 800b8c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b8ca:	f04f 0100 	mov.w	r1, #0
 800b8ce:	ea02 0400 	and.w	r4, r2, r0
 800b8d2:	ea03 0501 	and.w	r5, r3, r1
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	4629      	mov	r1, r5
 800b8da:	f04f 0200 	mov.w	r2, #0
 800b8de:	f04f 0300 	mov.w	r3, #0
 800b8e2:	014b      	lsls	r3, r1, #5
 800b8e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b8e8:	0142      	lsls	r2, r0, #5
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	1b00      	subs	r0, r0, r4
 800b8f0:	eb61 0105 	sbc.w	r1, r1, r5
 800b8f4:	f04f 0200 	mov.w	r2, #0
 800b8f8:	f04f 0300 	mov.w	r3, #0
 800b8fc:	018b      	lsls	r3, r1, #6
 800b8fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b902:	0182      	lsls	r2, r0, #6
 800b904:	1a12      	subs	r2, r2, r0
 800b906:	eb63 0301 	sbc.w	r3, r3, r1
 800b90a:	f04f 0000 	mov.w	r0, #0
 800b90e:	f04f 0100 	mov.w	r1, #0
 800b912:	00d9      	lsls	r1, r3, #3
 800b914:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b918:	00d0      	lsls	r0, r2, #3
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	1912      	adds	r2, r2, r4
 800b920:	eb45 0303 	adc.w	r3, r5, r3
 800b924:	f04f 0000 	mov.w	r0, #0
 800b928:	f04f 0100 	mov.w	r1, #0
 800b92c:	0299      	lsls	r1, r3, #10
 800b92e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b932:	0290      	lsls	r0, r2, #10
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4610      	mov	r0, r2
 800b93a:	4619      	mov	r1, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	461a      	mov	r2, r3
 800b940:	f04f 0300 	mov.w	r3, #0
 800b944:	f7f4 fd34 	bl	80003b0 <__aeabi_uldivmod>
 800b948:	4602      	mov	r2, r0
 800b94a:	460b      	mov	r3, r1
 800b94c:	4613      	mov	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b950:	4b0a      	ldr	r3, [pc, #40]	; (800b97c <HAL_RCC_GetSysClockFreq+0x160>)
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	f003 0303 	and.w	r3, r3, #3
 800b95a:	3301      	adds	r3, #1
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	fbb2 f3f3 	udiv	r3, r2, r3
 800b968:	60bb      	str	r3, [r7, #8]
      break;
 800b96a:	e002      	b.n	800b972 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b96c:	4b04      	ldr	r3, [pc, #16]	; (800b980 <HAL_RCC_GetSysClockFreq+0x164>)
 800b96e:	60bb      	str	r3, [r7, #8]
      break;
 800b970:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b972:	68bb      	ldr	r3, [r7, #8]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bdb0      	pop	{r4, r5, r7, pc}
 800b97c:	40023800 	.word	0x40023800
 800b980:	00f42400 	.word	0x00f42400
 800b984:	017d7840 	.word	0x017d7840

0800b988 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b988:	b480      	push	{r7}
 800b98a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b98c:	4b03      	ldr	r3, [pc, #12]	; (800b99c <HAL_RCC_GetHCLKFreq+0x14>)
 800b98e:	681b      	ldr	r3, [r3, #0]
}
 800b990:	4618      	mov	r0, r3
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	20000008 	.word	0x20000008

0800b9a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b9a4:	f7ff fff0 	bl	800b988 <HAL_RCC_GetHCLKFreq>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	0a9b      	lsrs	r3, r3, #10
 800b9b0:	f003 0307 	and.w	r3, r3, #7
 800b9b4:	4903      	ldr	r1, [pc, #12]	; (800b9c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b9b6:	5ccb      	ldrb	r3, [r1, r3]
 800b9b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	40023800 	.word	0x40023800
 800b9c4:	08015a04 	.word	0x08015a04

0800b9c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b9cc:	f7ff ffdc 	bl	800b988 <HAL_RCC_GetHCLKFreq>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	0b5b      	lsrs	r3, r3, #13
 800b9d8:	f003 0307 	and.w	r3, r3, #7
 800b9dc:	4903      	ldr	r1, [pc, #12]	; (800b9ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800b9de:	5ccb      	ldrb	r3, [r1, r3]
 800b9e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	40023800 	.word	0x40023800
 800b9ec:	08015a04 	.word	0x08015a04

0800b9f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	220f      	movs	r2, #15
 800b9fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ba00:	4b12      	ldr	r3, [pc, #72]	; (800ba4c <HAL_RCC_GetClockConfig+0x5c>)
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f003 0203 	and.w	r2, r3, #3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ba0c:	4b0f      	ldr	r3, [pc, #60]	; (800ba4c <HAL_RCC_GetClockConfig+0x5c>)
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ba18:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <HAL_RCC_GetClockConfig+0x5c>)
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ba24:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <HAL_RCC_GetClockConfig+0x5c>)
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	08db      	lsrs	r3, r3, #3
 800ba2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ba32:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <HAL_RCC_GetClockConfig+0x60>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 020f 	and.w	r2, r3, #15
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	601a      	str	r2, [r3, #0]
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	40023800 	.word	0x40023800
 800ba50:	40023c00 	.word	0x40023c00

0800ba54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d012      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ba7c:	4b69      	ldr	r3, [pc, #420]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	4a68      	ldr	r2, [pc, #416]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba86:	6093      	str	r3, [r2, #8]
 800ba88:	4b66      	ldr	r3, [pc, #408]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba90:	4964      	ldr	r1, [pc, #400]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba92:	4313      	orrs	r3, r2
 800ba94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d017      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800baae:	4b5d      	ldr	r3, [pc, #372]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800babc:	4959      	ldr	r1, [pc, #356]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bacc:	d101      	bne.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bace:	2301      	movs	r3, #1
 800bad0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bada:	2301      	movs	r3, #1
 800badc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d017      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800baea:	4b4e      	ldr	r3, [pc, #312]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf8:	494a      	ldr	r1, [pc, #296]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bafa:	4313      	orrs	r3, r2
 800bafc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb08:	d101      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bb16:	2301      	movs	r3, #1
 800bb18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bb26:	2301      	movs	r3, #1
 800bb28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 808b 	beq.w	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bb38:	4b3a      	ldr	r3, [pc, #232]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3c:	4a39      	ldr	r2, [pc, #228]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb42:	6413      	str	r3, [r2, #64]	; 0x40
 800bb44:	4b37      	ldr	r3, [pc, #220]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb4c:	60bb      	str	r3, [r7, #8]
 800bb4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb50:	4b35      	ldr	r3, [pc, #212]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a34      	ldr	r2, [pc, #208]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb5c:	f7fd fa48 	bl	8008ff0 <HAL_GetTick>
 800bb60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bb62:	e008      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb64:	f7fd fa44 	bl	8008ff0 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	2b64      	cmp	r3, #100	; 0x64
 800bb70:	d901      	bls.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e38f      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bb76:	4b2c      	ldr	r3, [pc, #176]	; (800bc28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d0f0      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bb82:	4b28      	ldr	r3, [pc, #160]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d035      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d02e      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bba0:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bba8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bbaa:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbae:	4a1d      	ldr	r2, [pc, #116]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bbb6:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbba:	4a1a      	ldr	r2, [pc, #104]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bbc2:	4a18      	ldr	r2, [pc, #96]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bbc8:	4b16      	ldr	r3, [pc, #88]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbcc:	f003 0301 	and.w	r3, r3, #1
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d114      	bne.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd4:	f7fd fa0c 	bl	8008ff0 <HAL_GetTick>
 800bbd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbda:	e00a      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bbdc:	f7fd fa08 	bl	8008ff0 <HAL_GetTick>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d901      	bls.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	e351      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbf6:	f003 0302 	and.w	r3, r3, #2
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d0ee      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc0a:	d111      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bc0c:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bc18:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bc1a:	400b      	ands	r3, r1
 800bc1c:	4901      	ldr	r1, [pc, #4]	; (800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	608b      	str	r3, [r1, #8]
 800bc22:	e00b      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bc24:	40023800 	.word	0x40023800
 800bc28:	40007000 	.word	0x40007000
 800bc2c:	0ffffcff 	.word	0x0ffffcff
 800bc30:	4bb3      	ldr	r3, [pc, #716]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	4ab2      	ldr	r2, [pc, #712]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bc3a:	6093      	str	r3, [r2, #8]
 800bc3c:	4bb0      	ldr	r3, [pc, #704]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc48:	49ad      	ldr	r1, [pc, #692]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0310 	and.w	r3, r3, #16
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d010      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc5a:	4ba9      	ldr	r3, [pc, #676]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc60:	4aa7      	ldr	r2, [pc, #668]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bc6a:	4ba5      	ldr	r3, [pc, #660]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc74:	49a2      	ldr	r1, [pc, #648]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc76:	4313      	orrs	r3, r2
 800bc78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00a      	beq.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc88:	4b9d      	ldr	r3, [pc, #628]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc96:	499a      	ldr	r1, [pc, #616]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bcaa:	4b95      	ldr	r3, [pc, #596]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcb8:	4991      	ldr	r1, [pc, #580]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00a      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bccc:	4b8c      	ldr	r3, [pc, #560]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcda:	4989      	ldr	r1, [pc, #548]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00a      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcee:	4b84      	ldr	r3, [pc, #528]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcfc:	4980      	ldr	r1, [pc, #512]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00a      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd10:	4b7b      	ldr	r3, [pc, #492]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd16:	f023 0203 	bic.w	r2, r3, #3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd1e:	4978      	ldr	r1, [pc, #480]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd20:	4313      	orrs	r3, r2
 800bd22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00a      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd32:	4b73      	ldr	r3, [pc, #460]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd38:	f023 020c 	bic.w	r2, r3, #12
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd40:	496f      	ldr	r1, [pc, #444]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd54:	4b6a      	ldr	r3, [pc, #424]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd62:	4967      	ldr	r1, [pc, #412]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd64:	4313      	orrs	r3, r2
 800bd66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00a      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd76:	4b62      	ldr	r3, [pc, #392]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd84:	495e      	ldr	r1, [pc, #376]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00a      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bd98:	4b59      	ldr	r3, [pc, #356]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda6:	4956      	ldr	r1, [pc, #344]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bdba:	4b51      	ldr	r3, [pc, #324]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc8:	494d      	ldr	r1, [pc, #308]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bddc:	4b48      	ldr	r3, [pc, #288]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdea:	4945      	ldr	r1, [pc, #276]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00a      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bdfe:	4b40      	ldr	r3, [pc, #256]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be0c:	493c      	ldr	r1, [pc, #240]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00a      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be20:	4b37      	ldr	r3, [pc, #220]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be2e:	4934      	ldr	r1, [pc, #208]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be30:	4313      	orrs	r3, r2
 800be32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d011      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800be42:	4b2f      	ldr	r3, [pc, #188]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be50:	492b      	ldr	r1, [pc, #172]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be52:	4313      	orrs	r3, r2
 800be54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be60:	d101      	bne.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800be62:	2301      	movs	r3, #1
 800be64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 0308 	and.w	r3, r3, #8
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800be72:	2301      	movs	r3, #1
 800be74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00a      	beq.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be82:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be90:	491b      	ldr	r1, [pc, #108]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be92:	4313      	orrs	r3, r2
 800be94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00b      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bea4:	4b16      	ldr	r3, [pc, #88]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beb4:	4912      	ldr	r1, [pc, #72]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800beb6:	4313      	orrs	r3, r2
 800beb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00b      	beq.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bec8:	4b0d      	ldr	r3, [pc, #52]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800beca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bece:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bed8:	4909      	ldr	r1, [pc, #36]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800beda:	4313      	orrs	r3, r2
 800bedc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00f      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800beec:	4b04      	ldr	r3, [pc, #16]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800beee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bef2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800befc:	e002      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800befe:	bf00      	nop
 800bf00:	40023800 	.word	0x40023800
 800bf04:	4986      	ldr	r1, [pc, #536]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf06:	4313      	orrs	r3, r2
 800bf08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bf18:	4b81      	ldr	r3, [pc, #516]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf28:	497d      	ldr	r1, [pc, #500]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d006      	beq.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 80d6 	beq.w	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bf44:	4b76      	ldr	r3, [pc, #472]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a75      	ldr	r2, [pc, #468]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf50:	f7fd f84e 	bl	8008ff0 <HAL_GetTick>
 800bf54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf56:	e008      	b.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bf58:	f7fd f84a 	bl	8008ff0 <HAL_GetTick>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	2b64      	cmp	r3, #100	; 0x64
 800bf64:	d901      	bls.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e195      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf6a:	4b6d      	ldr	r3, [pc, #436]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1f0      	bne.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d021      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d11d      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bf8a:	4b65      	ldr	r3, [pc, #404]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf90:	0c1b      	lsrs	r3, r3, #16
 800bf92:	f003 0303 	and.w	r3, r3, #3
 800bf96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bf98:	4b61      	ldr	r3, [pc, #388]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf9e:	0e1b      	lsrs	r3, r3, #24
 800bfa0:	f003 030f 	and.w	r3, r3, #15
 800bfa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	019a      	lsls	r2, r3, #6
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	041b      	lsls	r3, r3, #16
 800bfb0:	431a      	orrs	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	061b      	lsls	r3, r3, #24
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	071b      	lsls	r3, r3, #28
 800bfbe:	4958      	ldr	r1, [pc, #352]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d004      	beq.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x588>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfda:	d00a      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d02e      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bff0:	d129      	bne.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bff2:	4b4b      	ldr	r3, [pc, #300]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bff8:	0c1b      	lsrs	r3, r3, #16
 800bffa:	f003 0303 	and.w	r3, r3, #3
 800bffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c000:	4b47      	ldr	r3, [pc, #284]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c006:	0f1b      	lsrs	r3, r3, #28
 800c008:	f003 0307 	and.w	r3, r3, #7
 800c00c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	019a      	lsls	r2, r3, #6
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	041b      	lsls	r3, r3, #16
 800c018:	431a      	orrs	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	061b      	lsls	r3, r3, #24
 800c020:	431a      	orrs	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	071b      	lsls	r3, r3, #28
 800c026:	493e      	ldr	r1, [pc, #248]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c028:	4313      	orrs	r3, r2
 800c02a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c02e:	4b3c      	ldr	r3, [pc, #240]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c034:	f023 021f 	bic.w	r2, r3, #31
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	3b01      	subs	r3, #1
 800c03e:	4938      	ldr	r1, [pc, #224]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c040:	4313      	orrs	r3, r2
 800c042:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d01d      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c052:	4b33      	ldr	r3, [pc, #204]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c058:	0e1b      	lsrs	r3, r3, #24
 800c05a:	f003 030f 	and.w	r3, r3, #15
 800c05e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c060:	4b2f      	ldr	r3, [pc, #188]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c066:	0f1b      	lsrs	r3, r3, #28
 800c068:	f003 0307 	and.w	r3, r3, #7
 800c06c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	019a      	lsls	r2, r3, #6
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	041b      	lsls	r3, r3, #16
 800c07a:	431a      	orrs	r2, r3
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	061b      	lsls	r3, r3, #24
 800c080:	431a      	orrs	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	071b      	lsls	r3, r3, #28
 800c086:	4926      	ldr	r1, [pc, #152]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c088:	4313      	orrs	r3, r2
 800c08a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c096:	2b00      	cmp	r3, #0
 800c098:	d011      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	019a      	lsls	r2, r3, #6
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	041b      	lsls	r3, r3, #16
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	061b      	lsls	r3, r3, #24
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	071b      	lsls	r3, r3, #28
 800c0b6:	491a      	ldr	r1, [pc, #104]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c0be:	4b18      	ldr	r3, [pc, #96]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a17      	ldr	r2, [pc, #92]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ca:	f7fc ff91 	bl	8008ff0 <HAL_GetTick>
 800c0ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c0d0:	e008      	b.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c0d2:	f7fc ff8d 	bl	8008ff0 <HAL_GetTick>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	2b64      	cmp	r3, #100	; 0x64
 800c0de:	d901      	bls.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e0d8      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c0e4:	4b0e      	ldr	r3, [pc, #56]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0f0      	beq.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	f040 80ce 	bne.w	800c294 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c0f8:	4b09      	ldr	r3, [pc, #36]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a08      	ldr	r2, [pc, #32]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c104:	f7fc ff74 	bl	8008ff0 <HAL_GetTick>
 800c108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c10a:	e00b      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c10c:	f7fc ff70 	bl	8008ff0 <HAL_GetTick>
 800c110:	4602      	mov	r2, r0
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	2b64      	cmp	r3, #100	; 0x64
 800c118:	d904      	bls.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e0bb      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c11e:	bf00      	nop
 800c120:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c124:	4b5e      	ldr	r3, [pc, #376]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c130:	d0ec      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c142:	2b00      	cmp	r3, #0
 800c144:	d009      	beq.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d02e      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c156:	2b00      	cmp	r3, #0
 800c158:	d12a      	bne.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c15a:	4b51      	ldr	r3, [pc, #324]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c160:	0c1b      	lsrs	r3, r3, #16
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c168:	4b4d      	ldr	r3, [pc, #308]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c16e:	0f1b      	lsrs	r3, r3, #28
 800c170:	f003 0307 	and.w	r3, r3, #7
 800c174:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	019a      	lsls	r2, r3, #6
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	041b      	lsls	r3, r3, #16
 800c180:	431a      	orrs	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	061b      	lsls	r3, r3, #24
 800c188:	431a      	orrs	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	071b      	lsls	r3, r3, #28
 800c18e:	4944      	ldr	r1, [pc, #272]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c190:	4313      	orrs	r3, r2
 800c192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c196:	4b42      	ldr	r3, [pc, #264]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c19c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	021b      	lsls	r3, r3, #8
 800c1a8:	493d      	ldr	r1, [pc, #244]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d022      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1c4:	d11d      	bne.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c1c6:	4b36      	ldr	r3, [pc, #216]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1cc:	0e1b      	lsrs	r3, r3, #24
 800c1ce:	f003 030f 	and.w	r3, r3, #15
 800c1d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c1d4:	4b32      	ldr	r3, [pc, #200]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1da:	0f1b      	lsrs	r3, r3, #28
 800c1dc:	f003 0307 	and.w	r3, r3, #7
 800c1e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	019a      	lsls	r2, r3, #6
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a1b      	ldr	r3, [r3, #32]
 800c1ec:	041b      	lsls	r3, r3, #16
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	061b      	lsls	r3, r3, #24
 800c1f4:	431a      	orrs	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	071b      	lsls	r3, r3, #28
 800c1fa:	4929      	ldr	r1, [pc, #164]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 0308 	and.w	r3, r3, #8
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d028      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c20e:	4b24      	ldr	r3, [pc, #144]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c214:	0e1b      	lsrs	r3, r3, #24
 800c216:	f003 030f 	and.w	r3, r3, #15
 800c21a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c21c:	4b20      	ldr	r3, [pc, #128]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c222:	0c1b      	lsrs	r3, r3, #16
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	019a      	lsls	r2, r3, #6
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	041b      	lsls	r3, r3, #16
 800c234:	431a      	orrs	r2, r3
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	061b      	lsls	r3, r3, #24
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	071b      	lsls	r3, r3, #28
 800c242:	4917      	ldr	r1, [pc, #92]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c244:	4313      	orrs	r3, r2
 800c246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c24a:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c258:	4911      	ldr	r1, [pc, #68]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a0e      	ldr	r2, [pc, #56]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c26a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c26c:	f7fc fec0 	bl	8008ff0 <HAL_GetTick>
 800c270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c272:	e008      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c274:	f7fc febc 	bl	8008ff0 <HAL_GetTick>
 800c278:	4602      	mov	r2, r0
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	2b64      	cmp	r3, #100	; 0x64
 800c280:	d901      	bls.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e007      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c286:	4b06      	ldr	r3, [pc, #24]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c28e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c292:	d1ef      	bne.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3720      	adds	r7, #32
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	40023800 	.word	0x40023800

0800c2a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b087      	sub	sp, #28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c2c2:	f040 80a3 	bne.w	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c2c6:	4bac      	ldr	r3, [pc, #688]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2cc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c2d4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2dc:	f000 808a 	beq.w	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2e6:	f200 8093 	bhi.w	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2f0:	d07d      	beq.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2f8:	f200 808a 	bhi.w	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d004      	beq.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c308:	d039      	beq.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c30a:	e081      	b.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c30c:	4b9a      	ldr	r3, [pc, #616]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c314:	2b00      	cmp	r3, #0
 800c316:	d108      	bne.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c318:	4b97      	ldr	r3, [pc, #604]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c320:	4a96      	ldr	r2, [pc, #600]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c322:	fbb2 f3f3 	udiv	r3, r2, r3
 800c326:	613b      	str	r3, [r7, #16]
 800c328:	e007      	b.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c32a:	4b93      	ldr	r3, [pc, #588]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c332:	4a93      	ldr	r2, [pc, #588]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c334:	fbb2 f3f3 	udiv	r3, r2, r3
 800c338:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c33a:	4b8f      	ldr	r3, [pc, #572]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c340:	0e1b      	lsrs	r3, r3, #24
 800c342:	f003 030f 	and.w	r3, r3, #15
 800c346:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c348:	4b8b      	ldr	r3, [pc, #556]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c34e:	099b      	lsrs	r3, r3, #6
 800c350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	fb02 f203 	mul.w	r2, r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c360:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c362:	4b85      	ldr	r3, [pc, #532]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c368:	0a1b      	lsrs	r3, r3, #8
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	3301      	adds	r3, #1
 800c370:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	fbb2 f3f3 	udiv	r3, r2, r3
 800c37a:	617b      	str	r3, [r7, #20]
        break;
 800c37c:	e049      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c37e:	4b7e      	ldr	r3, [pc, #504]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c386:	2b00      	cmp	r3, #0
 800c388:	d108      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c38a:	4b7b      	ldr	r3, [pc, #492]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c392:	4a7a      	ldr	r2, [pc, #488]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c394:	fbb2 f3f3 	udiv	r3, r2, r3
 800c398:	613b      	str	r3, [r7, #16]
 800c39a:	e007      	b.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c39c:	4b76      	ldr	r3, [pc, #472]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3a4:	4a76      	ldr	r2, [pc, #472]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c3a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3aa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c3ac:	4b72      	ldr	r3, [pc, #456]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b2:	0e1b      	lsrs	r3, r3, #24
 800c3b4:	f003 030f 	and.w	r3, r3, #15
 800c3b8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c3ba:	4b6f      	ldr	r3, [pc, #444]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c0:	099b      	lsrs	r3, r3, #6
 800c3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	fb02 f203 	mul.w	r2, r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3d2:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c3d4:	4b68      	ldr	r3, [pc, #416]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3da:	f003 031f 	and.w	r3, r3, #31
 800c3de:	3301      	adds	r3, #1
 800c3e0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ea:	617b      	str	r3, [r7, #20]
        break;
 800c3ec:	e011      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3ee:	4b65      	ldr	r3, [pc, #404]	; (800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800c3f0:	617b      	str	r3, [r7, #20]
        break;
 800c3f2:	e00e      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c3f4:	4b60      	ldr	r3, [pc, #384]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800c400:	4b5e      	ldr	r3, [pc, #376]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c402:	617b      	str	r3, [r7, #20]
        break;
 800c404:	e005      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800c406:	4b5e      	ldr	r3, [pc, #376]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c408:	617b      	str	r3, [r7, #20]
        break;
 800c40a:	e002      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800c40c:	bf00      	nop
 800c40e:	e000      	b.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 800c410:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c418:	f040 80a3 	bne.w	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c41c:	4b56      	ldr	r3, [pc, #344]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c422:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c42a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c432:	f000 808a 	beq.w	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c43c:	f200 8093 	bhi.w	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c446:	d07d      	beq.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c44e:	f200 808a 	bhi.w	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d004      	beq.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c45e:	d039      	beq.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c460:	e081      	b.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c462:	4b45      	ldr	r3, [pc, #276]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d108      	bne.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c46e:	4b42      	ldr	r3, [pc, #264]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c476:	4a41      	ldr	r2, [pc, #260]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c478:	fbb2 f3f3 	udiv	r3, r2, r3
 800c47c:	613b      	str	r3, [r7, #16]
 800c47e:	e007      	b.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c480:	4b3d      	ldr	r3, [pc, #244]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c488:	4a3d      	ldr	r2, [pc, #244]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c490:	4b39      	ldr	r3, [pc, #228]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c496:	0e1b      	lsrs	r3, r3, #24
 800c498:	f003 030f 	and.w	r3, r3, #15
 800c49c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c49e:	4b36      	ldr	r3, [pc, #216]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a4:	099b      	lsrs	r3, r3, #6
 800c4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4aa:	693a      	ldr	r2, [r7, #16]
 800c4ac:	fb02 f203 	mul.w	r2, r2, r3
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c4b8:	4b2f      	ldr	r3, [pc, #188]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4be:	0a1b      	lsrs	r3, r3, #8
 800c4c0:	f003 031f 	and.w	r3, r3, #31
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4d0:	617b      	str	r3, [r7, #20]
        break;
 800c4d2:	e049      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c4d4:	4b28      	ldr	r3, [pc, #160]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d108      	bne.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c4e0:	4b25      	ldr	r3, [pc, #148]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4e8:	4a24      	ldr	r2, [pc, #144]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ee:	613b      	str	r3, [r7, #16]
 800c4f0:	e007      	b.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c4f2:	4b21      	ldr	r3, [pc, #132]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4fa:	4a21      	ldr	r2, [pc, #132]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c500:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c502:	4b1d      	ldr	r3, [pc, #116]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c508:	0e1b      	lsrs	r3, r3, #24
 800c50a:	f003 030f 	and.w	r3, r3, #15
 800c50e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c510:	4b19      	ldr	r3, [pc, #100]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c516:	099b      	lsrs	r3, r3, #6
 800c518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	fb02 f203 	mul.w	r2, r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	fbb2 f3f3 	udiv	r3, r2, r3
 800c528:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c52a:	4b13      	ldr	r3, [pc, #76]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c52c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c530:	f003 031f 	and.w	r3, r3, #31
 800c534:	3301      	adds	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c538:	697a      	ldr	r2, [r7, #20]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c540:	617b      	str	r3, [r7, #20]
        break;
 800c542:	e011      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c544:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800c546:	617b      	str	r3, [r7, #20]
        break;
 800c548:	e00e      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c54a:	4b0b      	ldr	r3, [pc, #44]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d102      	bne.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800c556:	4b09      	ldr	r3, [pc, #36]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c558:	617b      	str	r3, [r7, #20]
        break;
 800c55a:	e005      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 800c55c:	4b08      	ldr	r3, [pc, #32]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c55e:	617b      	str	r3, [r7, #20]
        break;
 800c560:	e002      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 800c562:	bf00      	nop
 800c564:	e000      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 800c566:	bf00      	nop

  return frequency;
 800c568:	697b      	ldr	r3, [r7, #20]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	371c      	adds	r7, #28
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	40023800 	.word	0x40023800
 800c57c:	00f42400 	.word	0x00f42400
 800c580:	017d7840 	.word	0x017d7840
 800c584:	00bb8000 	.word	0x00bb8000

0800c588 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d904      	bls.n	800c5aa <HAL_SAI_InitProtocol+0x22>
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	3b03      	subs	r3, #3
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d812      	bhi.n	800c5ce <HAL_SAI_InitProtocol+0x46>
 800c5a8:	e008      	b.n	800c5bc <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 fac9 	bl	800cb48 <SAI_InitI2S>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75fb      	strb	r3, [r7, #23]
      break;
 800c5ba:	e00b      	b.n	800c5d4 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f000 fb6e 	bl	800cca4 <SAI_InitPCM>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75fb      	strb	r3, [r7, #23]
      break;
 800c5cc:	e002      	b.n	800c5d4 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	75fb      	strb	r3, [r7, #23]
      break;
 800c5d2:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d104      	bne.n	800c5e4 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f000 f808 	bl	800c5f0 <HAL_SAI_Init>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
	...

0800c5f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e156      	b.n	800c8bc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d106      	bne.n	800c628 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7f7 fa30 	bl	8003a88 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fbed 	bl	800ce10 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d00c      	beq.n	800c658 <HAL_SAI_Init+0x68>
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d80d      	bhi.n	800c65e <HAL_SAI_Init+0x6e>
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <HAL_SAI_Init+0x5c>
 800c646:	2b01      	cmp	r3, #1
 800c648:	d003      	beq.n	800c652 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c64a:	e008      	b.n	800c65e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	61fb      	str	r3, [r7, #28]
      break;
 800c650:	e006      	b.n	800c660 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c652:	2310      	movs	r3, #16
 800c654:	61fb      	str	r3, [r7, #28]
      break;
 800c656:	e003      	b.n	800c660 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c658:	2320      	movs	r3, #32
 800c65a:	61fb      	str	r3, [r7, #28]
      break;
 800c65c:	e000      	b.n	800c660 <HAL_SAI_Init+0x70>
      break;
 800c65e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	2b03      	cmp	r3, #3
 800c666:	d81e      	bhi.n	800c6a6 <HAL_SAI_Init+0xb6>
 800c668:	a201      	add	r2, pc, #4	; (adr r2, 800c670 <HAL_SAI_Init+0x80>)
 800c66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66e:	bf00      	nop
 800c670:	0800c681 	.word	0x0800c681
 800c674:	0800c687 	.word	0x0800c687
 800c678:	0800c68f 	.word	0x0800c68f
 800c67c:	0800c697 	.word	0x0800c697
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c680:	2300      	movs	r3, #0
 800c682:	617b      	str	r3, [r7, #20]
    }
    break;
 800c684:	e010      	b.n	800c6a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c68a:	617b      	str	r3, [r7, #20]
    }
    break;
 800c68c:	e00c      	b.n	800c6a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c68e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c692:	617b      	str	r3, [r7, #20]
    }
    break;
 800c694:	e008      	b.n	800c6a8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c69a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	f043 0301 	orr.w	r3, r3, #1
 800c6a2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c6a4:	e000      	b.n	800c6a8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c6a6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a85      	ldr	r2, [pc, #532]	; (800c8c4 <HAL_SAI_Init+0x2d4>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d004      	beq.n	800c6bc <HAL_SAI_Init+0xcc>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a84      	ldr	r2, [pc, #528]	; (800c8c8 <HAL_SAI_Init+0x2d8>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d103      	bne.n	800c6c4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c6bc:	4a83      	ldr	r2, [pc, #524]	; (800c8cc <HAL_SAI_Init+0x2dc>)
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	e002      	b.n	800c6ca <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c6c4:	4a82      	ldr	r2, [pc, #520]	; (800c8d0 <HAL_SAI_Init+0x2e0>)
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	69db      	ldr	r3, [r3, #28]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d04c      	beq.n	800c76c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a7a      	ldr	r2, [pc, #488]	; (800c8c4 <HAL_SAI_Init+0x2d4>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d004      	beq.n	800c6ea <HAL_SAI_Init+0xfa>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a78      	ldr	r2, [pc, #480]	; (800c8c8 <HAL_SAI_Init+0x2d8>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d104      	bne.n	800c6f4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c6ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c6ee:	f7ff fdd9 	bl	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c6f2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a76      	ldr	r2, [pc, #472]	; (800c8d4 <HAL_SAI_Init+0x2e4>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d004      	beq.n	800c708 <HAL_SAI_Init+0x118>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a75      	ldr	r2, [pc, #468]	; (800c8d8 <HAL_SAI_Init+0x2e8>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d104      	bne.n	800c712 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c708:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c70c:	f7ff fdca 	bl	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c710:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	461a      	mov	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	69db      	ldr	r3, [r3, #28]
 800c722:	025b      	lsls	r3, r3, #9
 800c724:	fbb2 f3f3 	udiv	r3, r2, r3
 800c728:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	4a6b      	ldr	r2, [pc, #428]	; (800c8dc <HAL_SAI_Init+0x2ec>)
 800c72e:	fba2 2303 	umull	r2, r3, r2, r3
 800c732:	08da      	lsrs	r2, r3, #3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c738:	68f9      	ldr	r1, [r7, #12]
 800c73a:	4b68      	ldr	r3, [pc, #416]	; (800c8dc <HAL_SAI_Init+0x2ec>)
 800c73c:	fba3 2301 	umull	r2, r3, r3, r1
 800c740:	08da      	lsrs	r2, r3, #3
 800c742:	4613      	mov	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4413      	add	r3, r2
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	1aca      	subs	r2, r1, r3
 800c74c:	2a08      	cmp	r2, #8
 800c74e:	d904      	bls.n	800c75a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d104      	bne.n	800c76c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	085a      	lsrs	r2, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d003      	beq.n	800c77c <HAL_SAI_Init+0x18c>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d109      	bne.n	800c790 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c780:	2b01      	cmp	r3, #1
 800c782:	d101      	bne.n	800c788 <HAL_SAI_Init+0x198>
 800c784:	2300      	movs	r3, #0
 800c786:	e001      	b.n	800c78c <HAL_SAI_Init+0x19c>
 800c788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c78c:	61bb      	str	r3, [r7, #24]
 800c78e:	e008      	b.n	800c7a2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c794:	2b01      	cmp	r3, #1
 800c796:	d102      	bne.n	800c79e <HAL_SAI_Init+0x1ae>
 800c798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c79c:	e000      	b.n	800c7a0 <HAL_SAI_Init+0x1b0>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6819      	ldr	r1, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	4b4c      	ldr	r3, [pc, #304]	; (800c8e0 <HAL_SAI_Init+0x2f0>)
 800c7ae:	400b      	ands	r3, r1
 800c7b0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6819      	ldr	r1, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7c6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800c7da:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c7e6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a1b      	ldr	r3, [r3, #32]
 800c7ec:	051b      	lsls	r3, r3, #20
 800c7ee:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6859      	ldr	r1, [r3, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	4b38      	ldr	r3, [pc, #224]	; (800c8e4 <HAL_SAI_Init+0x2f4>)
 800c804:	400b      	ands	r3, r1
 800c806:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6859      	ldr	r1, [r3, #4]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	699a      	ldr	r2, [r3, #24]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	431a      	orrs	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81c:	431a      	orrs	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	430a      	orrs	r2, r1
 800c824:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	6899      	ldr	r1, [r3, #8]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	4b2d      	ldr	r3, [pc, #180]	; (800c8e8 <HAL_SAI_Init+0x2f8>)
 800c832:	400b      	ands	r3, r1
 800c834:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6899      	ldr	r1, [r3, #8]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c840:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c846:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800c84c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800c852:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c858:	3b01      	subs	r3, #1
 800c85a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c85c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	68d9      	ldr	r1, [r3, #12]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c874:	400b      	ands	r3, r1
 800c876:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68d9      	ldr	r1, [r3, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c886:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c88c:	041b      	lsls	r3, r3, #16
 800c88e:	431a      	orrs	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c894:	3b01      	subs	r3, #1
 800c896:	021b      	lsls	r3, r3, #8
 800c898:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	40015804 	.word	0x40015804
 800c8c8:	40015824 	.word	0x40015824
 800c8cc:	40015800 	.word	0x40015800
 800c8d0:	40015c00 	.word	0x40015c00
 800c8d4:	40015c04 	.word	0x40015c04
 800c8d8:	40015c24 	.word	0x40015c24
 800c8dc:	cccccccd 	.word	0xcccccccd
 800c8e0:	ff05c010 	.word	0xff05c010
 800c8e4:	ffff1ff0 	.word	0xffff1ff0
 800c8e8:	fff88000 	.word	0xfff88000

0800c8ec <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d101      	bne.n	800c906 <HAL_SAI_DMAStop+0x1a>
 800c902:	2302      	movs	r3, #2
 800c904:	e061      	b.n	800c9ca <HAL_SAI_DMAStop+0xde>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c91c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c922:	2b00      	cmp	r3, #0
 800c924:	d01c      	beq.n	800c960 <HAL_SAI_DMAStop+0x74>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	2b12      	cmp	r3, #18
 800c930:	d116      	bne.n	800c960 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c936:	4618      	mov	r0, r3
 800c938:	f7fd f930 	bl	8009b9c <HAL_DMA_Abort>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00e      	beq.n	800c960 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c948:	2b80      	cmp	r3, #128	; 0x80
 800c94a:	d009      	beq.n	800c960 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800c94c:	2301      	movs	r3, #1
 800c94e:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c956:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c964:	2b00      	cmp	r3, #0
 800c966:	d01c      	beq.n	800c9a2 <HAL_SAI_DMAStop+0xb6>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2b22      	cmp	r3, #34	; 0x22
 800c972:	d116      	bne.n	800c9a2 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fd f90f 	bl	8009b9c <HAL_DMA_Abort>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00e      	beq.n	800c9a2 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c98a:	2b80      	cmp	r3, #128	; 0x80
 800c98c:	d009      	beq.n	800c9a2 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fa34 	bl	800ce10 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	685a      	ldr	r2, [r3, #4]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f042 0208 	orr.w	r2, r2, #8
 800c9b6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c9e2:	f7fc fb05 	bl	8008ff0 <HAL_GetTick>
 800c9e6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d002      	beq.n	800c9f4 <HAL_SAI_Transmit_DMA+0x20>
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	e093      	b.n	800cb20 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	f040 808c 	bne.w	800cb1e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d101      	bne.n	800ca14 <HAL_SAI_Transmit_DMA+0x40>
 800ca10:	2302      	movs	r3, #2
 800ca12:	e085      	b.n	800cb20 <HAL_SAI_Transmit_DMA+0x14c>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	88fa      	ldrh	r2, [r7, #6]
 800ca26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	88fa      	ldrh	r2, [r7, #6]
 800ca2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2212      	movs	r2, #18
 800ca3e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca46:	4a38      	ldr	r2, [pc, #224]	; (800cb28 <HAL_SAI_Transmit_DMA+0x154>)
 800ca48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca4e:	4a37      	ldr	r2, [pc, #220]	; (800cb2c <HAL_SAI_Transmit_DMA+0x158>)
 800ca50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca56:	4a36      	ldr	r2, [pc, #216]	; (800cb30 <HAL_SAI_Transmit_DMA+0x15c>)
 800ca58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5e:	2200      	movs	r2, #0
 800ca60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	331c      	adds	r3, #28
 800ca72:	461a      	mov	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca7a:	f7fd f82f 	bl	8009adc <HAL_DMA_Start_IT>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d005      	beq.n	800ca90 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e047      	b.n	800cb20 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ca90:	2100      	movs	r1, #0
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 f986 	bl	800cda4 <SAI_InterruptFlag>
 800ca98:	4601      	mov	r1, r0
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	691a      	ldr	r2, [r3, #16]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	430a      	orrs	r2, r1
 800caa6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cab6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800cab8:	e015      	b.n	800cae6 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800caba:	f7fc fa99 	bl	8008ff0 <HAL_GetTick>
 800cabe:	4602      	mov	r2, r0
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	1ad3      	subs	r3, r2, r3
 800cac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cac8:	d90d      	bls.n	800cae6 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cad0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cae2:	2303      	movs	r3, #3
 800cae4:	e01c      	b.n	800cb20 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d0e2      	beq.n	800caba <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d107      	bne.n	800cb12 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cb10:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e000      	b.n	800cb20 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800cb1e:	2302      	movs	r3, #2
  }
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	0800cee1 	.word	0x0800cee1
 800cb2c:	0800ce81 	.word	0x0800ce81
 800cb30:	0800cefd 	.word	0x0800cefd

0800cb34 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d003      	beq.n	800cb72 <SAI_InitI2S+0x2a>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d103      	bne.n	800cb7a <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb78:	e002      	b.n	800cb80 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cb86:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb8e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e076      	b.n	800cc98 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d107      	bne.n	800cbc0 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cbbc:	651a      	str	r2, [r3, #80]	; 0x50
 800cbbe:	e006      	b.n	800cbce <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cbc6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	651a      	str	r2, [r3, #80]	; 0x50
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b03      	cmp	r3, #3
 800cbd2:	d84f      	bhi.n	800cc74 <SAI_InitI2S+0x12c>
 800cbd4:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <SAI_InitI2S+0x94>)
 800cbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbda:	bf00      	nop
 800cbdc:	0800cbed 	.word	0x0800cbed
 800cbe0:	0800cc0f 	.word	0x0800cc0f
 800cbe4:	0800cc31 	.word	0x0800cc31
 800cbe8:	0800cc53 	.word	0x0800cc53

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2280      	movs	r2, #128	; 0x80
 800cbf0:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	085b      	lsrs	r3, r3, #1
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	085b      	lsrs	r3, r3, #1
 800cc00:	011a      	lsls	r2, r3, #4
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2240      	movs	r2, #64	; 0x40
 800cc0a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc0c:	e034      	b.n	800cc78 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2280      	movs	r2, #128	; 0x80
 800cc12:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	085b      	lsrs	r3, r3, #1
 800cc18:	019a      	lsls	r2, r3, #6
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	085b      	lsrs	r3, r3, #1
 800cc22:	015a      	lsls	r2, r3, #5
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2280      	movs	r2, #128	; 0x80
 800cc2c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc2e:	e023      	b.n	800cc78 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	22c0      	movs	r2, #192	; 0xc0
 800cc34:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	085b      	lsrs	r3, r3, #1
 800cc3a:	019a      	lsls	r2, r3, #6
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	085b      	lsrs	r3, r3, #1
 800cc44:	015a      	lsls	r2, r3, #5
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2280      	movs	r2, #128	; 0x80
 800cc4e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc50:	e012      	b.n	800cc78 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	22e0      	movs	r2, #224	; 0xe0
 800cc56:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	085b      	lsrs	r3, r3, #1
 800cc5c:	019a      	lsls	r2, r3, #6
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	085b      	lsrs	r3, r3, #1
 800cc66:	015a      	lsls	r2, r3, #5
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2280      	movs	r2, #128	; 0x80
 800cc70:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc72:	e001      	b.n	800cc78 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	e00f      	b.n	800cc98 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d10b      	bne.n	800cc96 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d102      	bne.n	800cc8a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2210      	movs	r2, #16
 800cc88:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d102      	bne.n	800cc96 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2208      	movs	r2, #8
 800cc94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
 800ccb0:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <SAI_InitPCM+0x2a>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d103      	bne.n	800ccd6 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	63da      	str	r2, [r3, #60]	; 0x3c
 800ccd4:	e002      	b.n	800ccdc <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cce8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ccf0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd04:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2b04      	cmp	r3, #4
 800cd0a:	d103      	bne.n	800cd14 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	645a      	str	r2, [r3, #68]	; 0x44
 800cd12:	e002      	b.n	800cd1a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	220d      	movs	r2, #13
 800cd18:	645a      	str	r2, [r3, #68]	; 0x44
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d837      	bhi.n	800cd90 <SAI_InitPCM+0xec>
 800cd20:	a201      	add	r2, pc, #4	; (adr r2, 800cd28 <SAI_InitPCM+0x84>)
 800cd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd26:	bf00      	nop
 800cd28:	0800cd39 	.word	0x0800cd39
 800cd2c:	0800cd4f 	.word	0x0800cd4f
 800cd30:	0800cd65 	.word	0x0800cd65
 800cd34:	0800cd7b 	.word	0x0800cd7b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2280      	movs	r2, #128	; 0x80
 800cd3c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	011a      	lsls	r2, r3, #4
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2240      	movs	r2, #64	; 0x40
 800cd4a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd4c:	e022      	b.n	800cd94 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2280      	movs	r2, #128	; 0x80
 800cd52:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	015a      	lsls	r2, r3, #5
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2280      	movs	r2, #128	; 0x80
 800cd60:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd62:	e017      	b.n	800cd94 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	22c0      	movs	r2, #192	; 0xc0
 800cd68:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	015a      	lsls	r2, r3, #5
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2280      	movs	r2, #128	; 0x80
 800cd76:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd78:	e00c      	b.n	800cd94 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	22e0      	movs	r2, #224	; 0xe0
 800cd7e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	015a      	lsls	r2, r3, #5
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2280      	movs	r2, #128	; 0x80
 800cd8c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd8e:	e001      	b.n	800cd94 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e000      	b.n	800cd96 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop

0800cda4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d103      	bne.n	800cdc0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f043 0308 	orr.w	r3, r3, #8
 800cdbe:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc4:	2b08      	cmp	r3, #8
 800cdc6:	d10b      	bne.n	800cde0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	d003      	beq.n	800cdd8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d103      	bne.n	800cde0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f043 0310 	orr.w	r3, r3, #16
 800cdde:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d003      	beq.n	800cdf0 <SAI_InterruptFlag+0x4c>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d104      	bne.n	800cdfa <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	e003      	b.n	800ce02 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f043 0304 	orr.w	r3, r3, #4
 800ce00:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ce02:	68fb      	ldr	r3, [r7, #12]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ce18:	4b17      	ldr	r3, [pc, #92]	; (800ce78 <SAI_Disable+0x68>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a17      	ldr	r2, [pc, #92]	; (800ce7c <SAI_Disable+0x6c>)
 800ce1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce22:	0b1b      	lsrs	r3, r3, #12
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ce3a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	1e5a      	subs	r2, r3, #1
 800ce40:	60fa      	str	r2, [r7, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10a      	bne.n	800ce5c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	72fb      	strb	r3, [r7, #11]
      break;
 800ce5a:	e006      	b.n	800ce6a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1e8      	bne.n	800ce3c <SAI_Disable+0x2c>

  return status;
 800ce6a:	7afb      	ldrb	r3, [r7, #11]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	20000008 	.word	0x20000008
 800ce7c:	95cbec1b 	.word	0x95cbec1b

0800ce80 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	69db      	ldr	r3, [r3, #28]
 800ce92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce96:	d01c      	beq.n	800ced2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ceae:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f7ff ff76 	bl	800cda4 <SAI_InterruptFlag>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	43d9      	mvns	r1, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	691a      	ldr	r2, [r3, #16]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	400a      	ands	r2, r1
 800cec8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f7f5 fc2c 	bl	8002730 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ced8:	bf00      	nop
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7f5 fbe4 	bl	80026bc <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cef4:	bf00      	nop
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf08:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d004      	beq.n	800cf2e <SAI_DMAError+0x32>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d112      	bne.n	800cf54 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cf3c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f7ff ff66 	bl	800ce10 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f7ff fded 	bl	800cb34 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cf5a:	bf00      	nop
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b082      	sub	sp, #8
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e049      	b.n	800d008 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d106      	bne.n	800cf8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f841 	bl	800d010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2202      	movs	r2, #2
 800cf92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	f000 f9ff 	bl	800d3a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b01      	cmp	r3, #1
 800d036:	d001      	beq.n	800d03c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e054      	b.n	800d0e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2202      	movs	r2, #2
 800d040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68da      	ldr	r2, [r3, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f042 0201 	orr.w	r2, r2, #1
 800d052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a26      	ldr	r2, [pc, #152]	; (800d0f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d022      	beq.n	800d0a4 <HAL_TIM_Base_Start_IT+0x80>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d066:	d01d      	beq.n	800d0a4 <HAL_TIM_Base_Start_IT+0x80>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a22      	ldr	r2, [pc, #136]	; (800d0f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d018      	beq.n	800d0a4 <HAL_TIM_Base_Start_IT+0x80>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a21      	ldr	r2, [pc, #132]	; (800d0fc <HAL_TIM_Base_Start_IT+0xd8>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d013      	beq.n	800d0a4 <HAL_TIM_Base_Start_IT+0x80>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a1f      	ldr	r2, [pc, #124]	; (800d100 <HAL_TIM_Base_Start_IT+0xdc>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d00e      	beq.n	800d0a4 <HAL_TIM_Base_Start_IT+0x80>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a1e      	ldr	r2, [pc, #120]	; (800d104 <HAL_TIM_Base_Start_IT+0xe0>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d009      	beq.n	800d0a4 <HAL_TIM_Base_Start_IT+0x80>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a1c      	ldr	r2, [pc, #112]	; (800d108 <HAL_TIM_Base_Start_IT+0xe4>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d004      	beq.n	800d0a4 <HAL_TIM_Base_Start_IT+0x80>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a1b      	ldr	r2, [pc, #108]	; (800d10c <HAL_TIM_Base_Start_IT+0xe8>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d115      	bne.n	800d0d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	689a      	ldr	r2, [r3, #8]
 800d0aa:	4b19      	ldr	r3, [pc, #100]	; (800d110 <HAL_TIM_Base_Start_IT+0xec>)
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b06      	cmp	r3, #6
 800d0b4:	d015      	beq.n	800d0e2 <HAL_TIM_Base_Start_IT+0xbe>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0bc:	d011      	beq.n	800d0e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f042 0201 	orr.w	r2, r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0ce:	e008      	b.n	800d0e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f042 0201 	orr.w	r2, r2, #1
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	e000      	b.n	800d0e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	40010000 	.word	0x40010000
 800d0f8:	40000400 	.word	0x40000400
 800d0fc:	40000800 	.word	0x40000800
 800d100:	40000c00 	.word	0x40000c00
 800d104:	40010400 	.word	0x40010400
 800d108:	40014000 	.word	0x40014000
 800d10c:	40001800 	.word	0x40001800
 800d110:	00010007 	.word	0x00010007

0800d114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	691b      	ldr	r3, [r3, #16]
 800d122:	f003 0302 	and.w	r3, r3, #2
 800d126:	2b02      	cmp	r3, #2
 800d128:	d122      	bne.n	800d170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	f003 0302 	and.w	r3, r3, #2
 800d134:	2b02      	cmp	r3, #2
 800d136:	d11b      	bne.n	800d170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f06f 0202 	mvn.w	r2, #2
 800d140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	f003 0303 	and.w	r3, r3, #3
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f905 	bl	800d366 <HAL_TIM_IC_CaptureCallback>
 800d15c:	e005      	b.n	800d16a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f8f7 	bl	800d352 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f908 	bl	800d37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	f003 0304 	and.w	r3, r3, #4
 800d17a:	2b04      	cmp	r3, #4
 800d17c:	d122      	bne.n	800d1c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	f003 0304 	and.w	r3, r3, #4
 800d188:	2b04      	cmp	r3, #4
 800d18a:	d11b      	bne.n	800d1c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f06f 0204 	mvn.w	r2, #4
 800d194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2202      	movs	r2, #2
 800d19a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	699b      	ldr	r3, [r3, #24]
 800d1a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d003      	beq.n	800d1b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 f8db 	bl	800d366 <HAL_TIM_IC_CaptureCallback>
 800d1b0:	e005      	b.n	800d1be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 f8cd 	bl	800d352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f8de 	bl	800d37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	f003 0308 	and.w	r3, r3, #8
 800d1ce:	2b08      	cmp	r3, #8
 800d1d0:	d122      	bne.n	800d218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	f003 0308 	and.w	r3, r3, #8
 800d1dc:	2b08      	cmp	r3, #8
 800d1de:	d11b      	bne.n	800d218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f06f 0208 	mvn.w	r2, #8
 800d1e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2204      	movs	r2, #4
 800d1ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	69db      	ldr	r3, [r3, #28]
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d003      	beq.n	800d206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f8b1 	bl	800d366 <HAL_TIM_IC_CaptureCallback>
 800d204:	e005      	b.n	800d212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f8a3 	bl	800d352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f8b4 	bl	800d37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	f003 0310 	and.w	r3, r3, #16
 800d222:	2b10      	cmp	r3, #16
 800d224:	d122      	bne.n	800d26c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	f003 0310 	and.w	r3, r3, #16
 800d230:	2b10      	cmp	r3, #16
 800d232:	d11b      	bne.n	800d26c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f06f 0210 	mvn.w	r2, #16
 800d23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2208      	movs	r2, #8
 800d242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	69db      	ldr	r3, [r3, #28]
 800d24a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d003      	beq.n	800d25a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f887 	bl	800d366 <HAL_TIM_IC_CaptureCallback>
 800d258:	e005      	b.n	800d266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f879 	bl	800d352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f88a 	bl	800d37a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	2b01      	cmp	r3, #1
 800d278:	d10e      	bne.n	800d298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	2b01      	cmp	r3, #1
 800d286:	d107      	bne.n	800d298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f06f 0201 	mvn.w	r2, #1
 800d290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7f5 fb02 	bl	800289c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2a2:	2b80      	cmp	r3, #128	; 0x80
 800d2a4:	d10e      	bne.n	800d2c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b0:	2b80      	cmp	r3, #128	; 0x80
 800d2b2:	d107      	bne.n	800d2c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f91a 	bl	800d4f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	691b      	ldr	r3, [r3, #16]
 800d2ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2d2:	d10e      	bne.n	800d2f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2de:	2b80      	cmp	r3, #128	; 0x80
 800d2e0:	d107      	bne.n	800d2f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f90d 	bl	800d50c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2fc:	2b40      	cmp	r3, #64	; 0x40
 800d2fe:	d10e      	bne.n	800d31e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30a:	2b40      	cmp	r3, #64	; 0x40
 800d30c:	d107      	bne.n	800d31e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f838 	bl	800d38e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	f003 0320 	and.w	r3, r3, #32
 800d328:	2b20      	cmp	r3, #32
 800d32a:	d10e      	bne.n	800d34a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	f003 0320 	and.w	r3, r3, #32
 800d336:	2b20      	cmp	r3, #32
 800d338:	d107      	bne.n	800d34a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f06f 0220 	mvn.w	r2, #32
 800d342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f000 f8cd 	bl	800d4e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d34a:	bf00      	nop
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d352:	b480      	push	{r7}
 800d354:	b083      	sub	sp, #12
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d35a:	bf00      	nop
 800d35c:	370c      	adds	r7, #12
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr

0800d366 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d366:	b480      	push	{r7}
 800d368:	b083      	sub	sp, #12
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d36e:	bf00      	nop
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d37a:	b480      	push	{r7}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d382:	bf00      	nop
 800d384:	370c      	adds	r7, #12
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr

0800d38e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d38e:	b480      	push	{r7}
 800d390:	b083      	sub	sp, #12
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d396:	bf00      	nop
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
	...

0800d3a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a40      	ldr	r2, [pc, #256]	; (800d4b8 <TIM_Base_SetConfig+0x114>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d013      	beq.n	800d3e4 <TIM_Base_SetConfig+0x40>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3c2:	d00f      	beq.n	800d3e4 <TIM_Base_SetConfig+0x40>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4a3d      	ldr	r2, [pc, #244]	; (800d4bc <TIM_Base_SetConfig+0x118>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d00b      	beq.n	800d3e4 <TIM_Base_SetConfig+0x40>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a3c      	ldr	r2, [pc, #240]	; (800d4c0 <TIM_Base_SetConfig+0x11c>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d007      	beq.n	800d3e4 <TIM_Base_SetConfig+0x40>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a3b      	ldr	r2, [pc, #236]	; (800d4c4 <TIM_Base_SetConfig+0x120>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d003      	beq.n	800d3e4 <TIM_Base_SetConfig+0x40>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a3a      	ldr	r2, [pc, #232]	; (800d4c8 <TIM_Base_SetConfig+0x124>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d108      	bne.n	800d3f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4a2f      	ldr	r2, [pc, #188]	; (800d4b8 <TIM_Base_SetConfig+0x114>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d02b      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d404:	d027      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a2c      	ldr	r2, [pc, #176]	; (800d4bc <TIM_Base_SetConfig+0x118>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d023      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4a2b      	ldr	r2, [pc, #172]	; (800d4c0 <TIM_Base_SetConfig+0x11c>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d01f      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	4a2a      	ldr	r2, [pc, #168]	; (800d4c4 <TIM_Base_SetConfig+0x120>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d01b      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	4a29      	ldr	r2, [pc, #164]	; (800d4c8 <TIM_Base_SetConfig+0x124>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d017      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4a28      	ldr	r2, [pc, #160]	; (800d4cc <TIM_Base_SetConfig+0x128>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d013      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a27      	ldr	r2, [pc, #156]	; (800d4d0 <TIM_Base_SetConfig+0x12c>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d00f      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a26      	ldr	r2, [pc, #152]	; (800d4d4 <TIM_Base_SetConfig+0x130>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d00b      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a25      	ldr	r2, [pc, #148]	; (800d4d8 <TIM_Base_SetConfig+0x134>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d007      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a24      	ldr	r2, [pc, #144]	; (800d4dc <TIM_Base_SetConfig+0x138>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d003      	beq.n	800d456 <TIM_Base_SetConfig+0xb2>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a23      	ldr	r2, [pc, #140]	; (800d4e0 <TIM_Base_SetConfig+0x13c>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d108      	bne.n	800d468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d45c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	4313      	orrs	r3, r2
 800d466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	4313      	orrs	r3, r2
 800d474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a0a      	ldr	r2, [pc, #40]	; (800d4b8 <TIM_Base_SetConfig+0x114>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d003      	beq.n	800d49c <TIM_Base_SetConfig+0xf8>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a0c      	ldr	r2, [pc, #48]	; (800d4c8 <TIM_Base_SetConfig+0x124>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d103      	bne.n	800d4a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	691a      	ldr	r2, [r3, #16]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	615a      	str	r2, [r3, #20]
}
 800d4aa:	bf00      	nop
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	40010000 	.word	0x40010000
 800d4bc:	40000400 	.word	0x40000400
 800d4c0:	40000800 	.word	0x40000800
 800d4c4:	40000c00 	.word	0x40000c00
 800d4c8:	40010400 	.word	0x40010400
 800d4cc:	40014000 	.word	0x40014000
 800d4d0:	40014400 	.word	0x40014400
 800d4d4:	40014800 	.word	0x40014800
 800d4d8:	40001800 	.word	0x40001800
 800d4dc:	40001c00 	.word	0x40001c00
 800d4e0:	40002000 	.word	0x40002000

0800d4e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4ec:	bf00      	nop
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e040      	b.n	800d5b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7f6 fa3e 	bl	80039c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2224      	movs	r2, #36	; 0x24
 800d54c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f022 0201 	bic.w	r2, r2, #1
 800d55c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f8c0 	bl	800d6e4 <UART_SetConfig>
 800d564:	4603      	mov	r3, r0
 800d566:	2b01      	cmp	r3, #1
 800d568:	d101      	bne.n	800d56e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e022      	b.n	800d5b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d572:	2b00      	cmp	r3, #0
 800d574:	d002      	beq.n	800d57c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fb16 	bl	800dba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d58a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	689a      	ldr	r2, [r3, #8]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d59a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f042 0201 	orr.w	r2, r2, #1
 800d5aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 fb9d 	bl	800dcec <UART_CheckIdleState>
 800d5b2:	4603      	mov	r3, r0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08a      	sub	sp, #40	; 0x28
 800d5c0:	af02      	add	r7, sp, #8
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	603b      	str	r3, [r7, #0]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5d0:	2b20      	cmp	r3, #32
 800d5d2:	f040 8081 	bne.w	800d6d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <HAL_UART_Transmit+0x26>
 800d5dc:	88fb      	ldrh	r3, [r7, #6]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d101      	bne.n	800d5e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e079      	b.n	800d6da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d101      	bne.n	800d5f4 <HAL_UART_Transmit+0x38>
 800d5f0:	2302      	movs	r3, #2
 800d5f2:	e072      	b.n	800d6da <HAL_UART_Transmit+0x11e>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2221      	movs	r2, #33	; 0x21
 800d608:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d60a:	f7fb fcf1 	bl	8008ff0 <HAL_GetTick>
 800d60e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	88fa      	ldrh	r2, [r7, #6]
 800d614:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	88fa      	ldrh	r2, [r7, #6]
 800d61c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d628:	d108      	bne.n	800d63c <HAL_UART_Transmit+0x80>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d104      	bne.n	800d63c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d632:	2300      	movs	r3, #0
 800d634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	61bb      	str	r3, [r7, #24]
 800d63a:	e003      	b.n	800d644 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d640:	2300      	movs	r3, #0
 800d642:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d64c:	e02c      	b.n	800d6a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2200      	movs	r2, #0
 800d656:	2180      	movs	r1, #128	; 0x80
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 fb90 	bl	800dd7e <UART_WaitOnFlagUntilTimeout>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d664:	2303      	movs	r3, #3
 800d666:	e038      	b.n	800d6da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d10b      	bne.n	800d686 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	881b      	ldrh	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d67c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	3302      	adds	r3, #2
 800d682:	61bb      	str	r3, [r7, #24]
 800d684:	e007      	b.n	800d696 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	781a      	ldrb	r2, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	3301      	adds	r3, #1
 800d694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1cc      	bne.n	800d64e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	2140      	movs	r1, #64	; 0x40
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f000 fb5d 	bl	800dd7e <UART_WaitOnFlagUntilTimeout>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	e005      	b.n	800d6da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	e000      	b.n	800d6da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800d6d8:	2302      	movs	r3, #2
  }
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3720      	adds	r7, #32
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
	...

0800d6e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689a      	ldr	r2, [r3, #8]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	431a      	orrs	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	695b      	ldr	r3, [r3, #20]
 800d6fe:	431a      	orrs	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	69db      	ldr	r3, [r3, #28]
 800d704:	4313      	orrs	r3, r2
 800d706:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	4ba7      	ldr	r3, [pc, #668]	; (800d9ac <UART_SetConfig+0x2c8>)
 800d710:	4013      	ands	r3, r2
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	6979      	ldr	r1, [r7, #20]
 800d718:	430b      	orrs	r3, r1
 800d71a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68da      	ldr	r2, [r3, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	430a      	orrs	r2, r1
 800d730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a1b      	ldr	r3, [r3, #32]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	4313      	orrs	r3, r2
 800d740:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	430a      	orrs	r2, r1
 800d754:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a95      	ldr	r2, [pc, #596]	; (800d9b0 <UART_SetConfig+0x2cc>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d120      	bne.n	800d7a2 <UART_SetConfig+0xbe>
 800d760:	4b94      	ldr	r3, [pc, #592]	; (800d9b4 <UART_SetConfig+0x2d0>)
 800d762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d766:	f003 0303 	and.w	r3, r3, #3
 800d76a:	2b03      	cmp	r3, #3
 800d76c:	d816      	bhi.n	800d79c <UART_SetConfig+0xb8>
 800d76e:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <UART_SetConfig+0x90>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d785 	.word	0x0800d785
 800d778:	0800d791 	.word	0x0800d791
 800d77c:	0800d78b 	.word	0x0800d78b
 800d780:	0800d797 	.word	0x0800d797
 800d784:	2301      	movs	r3, #1
 800d786:	77fb      	strb	r3, [r7, #31]
 800d788:	e14f      	b.n	800da2a <UART_SetConfig+0x346>
 800d78a:	2302      	movs	r3, #2
 800d78c:	77fb      	strb	r3, [r7, #31]
 800d78e:	e14c      	b.n	800da2a <UART_SetConfig+0x346>
 800d790:	2304      	movs	r3, #4
 800d792:	77fb      	strb	r3, [r7, #31]
 800d794:	e149      	b.n	800da2a <UART_SetConfig+0x346>
 800d796:	2308      	movs	r3, #8
 800d798:	77fb      	strb	r3, [r7, #31]
 800d79a:	e146      	b.n	800da2a <UART_SetConfig+0x346>
 800d79c:	2310      	movs	r3, #16
 800d79e:	77fb      	strb	r3, [r7, #31]
 800d7a0:	e143      	b.n	800da2a <UART_SetConfig+0x346>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a84      	ldr	r2, [pc, #528]	; (800d9b8 <UART_SetConfig+0x2d4>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d132      	bne.n	800d812 <UART_SetConfig+0x12e>
 800d7ac:	4b81      	ldr	r3, [pc, #516]	; (800d9b4 <UART_SetConfig+0x2d0>)
 800d7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7b2:	f003 030c 	and.w	r3, r3, #12
 800d7b6:	2b0c      	cmp	r3, #12
 800d7b8:	d828      	bhi.n	800d80c <UART_SetConfig+0x128>
 800d7ba:	a201      	add	r2, pc, #4	; (adr r2, 800d7c0 <UART_SetConfig+0xdc>)
 800d7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c0:	0800d7f5 	.word	0x0800d7f5
 800d7c4:	0800d80d 	.word	0x0800d80d
 800d7c8:	0800d80d 	.word	0x0800d80d
 800d7cc:	0800d80d 	.word	0x0800d80d
 800d7d0:	0800d801 	.word	0x0800d801
 800d7d4:	0800d80d 	.word	0x0800d80d
 800d7d8:	0800d80d 	.word	0x0800d80d
 800d7dc:	0800d80d 	.word	0x0800d80d
 800d7e0:	0800d7fb 	.word	0x0800d7fb
 800d7e4:	0800d80d 	.word	0x0800d80d
 800d7e8:	0800d80d 	.word	0x0800d80d
 800d7ec:	0800d80d 	.word	0x0800d80d
 800d7f0:	0800d807 	.word	0x0800d807
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	77fb      	strb	r3, [r7, #31]
 800d7f8:	e117      	b.n	800da2a <UART_SetConfig+0x346>
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	77fb      	strb	r3, [r7, #31]
 800d7fe:	e114      	b.n	800da2a <UART_SetConfig+0x346>
 800d800:	2304      	movs	r3, #4
 800d802:	77fb      	strb	r3, [r7, #31]
 800d804:	e111      	b.n	800da2a <UART_SetConfig+0x346>
 800d806:	2308      	movs	r3, #8
 800d808:	77fb      	strb	r3, [r7, #31]
 800d80a:	e10e      	b.n	800da2a <UART_SetConfig+0x346>
 800d80c:	2310      	movs	r3, #16
 800d80e:	77fb      	strb	r3, [r7, #31]
 800d810:	e10b      	b.n	800da2a <UART_SetConfig+0x346>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a69      	ldr	r2, [pc, #420]	; (800d9bc <UART_SetConfig+0x2d8>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d120      	bne.n	800d85e <UART_SetConfig+0x17a>
 800d81c:	4b65      	ldr	r3, [pc, #404]	; (800d9b4 <UART_SetConfig+0x2d0>)
 800d81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d822:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d826:	2b30      	cmp	r3, #48	; 0x30
 800d828:	d013      	beq.n	800d852 <UART_SetConfig+0x16e>
 800d82a:	2b30      	cmp	r3, #48	; 0x30
 800d82c:	d814      	bhi.n	800d858 <UART_SetConfig+0x174>
 800d82e:	2b20      	cmp	r3, #32
 800d830:	d009      	beq.n	800d846 <UART_SetConfig+0x162>
 800d832:	2b20      	cmp	r3, #32
 800d834:	d810      	bhi.n	800d858 <UART_SetConfig+0x174>
 800d836:	2b00      	cmp	r3, #0
 800d838:	d002      	beq.n	800d840 <UART_SetConfig+0x15c>
 800d83a:	2b10      	cmp	r3, #16
 800d83c:	d006      	beq.n	800d84c <UART_SetConfig+0x168>
 800d83e:	e00b      	b.n	800d858 <UART_SetConfig+0x174>
 800d840:	2300      	movs	r3, #0
 800d842:	77fb      	strb	r3, [r7, #31]
 800d844:	e0f1      	b.n	800da2a <UART_SetConfig+0x346>
 800d846:	2302      	movs	r3, #2
 800d848:	77fb      	strb	r3, [r7, #31]
 800d84a:	e0ee      	b.n	800da2a <UART_SetConfig+0x346>
 800d84c:	2304      	movs	r3, #4
 800d84e:	77fb      	strb	r3, [r7, #31]
 800d850:	e0eb      	b.n	800da2a <UART_SetConfig+0x346>
 800d852:	2308      	movs	r3, #8
 800d854:	77fb      	strb	r3, [r7, #31]
 800d856:	e0e8      	b.n	800da2a <UART_SetConfig+0x346>
 800d858:	2310      	movs	r3, #16
 800d85a:	77fb      	strb	r3, [r7, #31]
 800d85c:	e0e5      	b.n	800da2a <UART_SetConfig+0x346>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a57      	ldr	r2, [pc, #348]	; (800d9c0 <UART_SetConfig+0x2dc>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d120      	bne.n	800d8aa <UART_SetConfig+0x1c6>
 800d868:	4b52      	ldr	r3, [pc, #328]	; (800d9b4 <UART_SetConfig+0x2d0>)
 800d86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d86e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d872:	2bc0      	cmp	r3, #192	; 0xc0
 800d874:	d013      	beq.n	800d89e <UART_SetConfig+0x1ba>
 800d876:	2bc0      	cmp	r3, #192	; 0xc0
 800d878:	d814      	bhi.n	800d8a4 <UART_SetConfig+0x1c0>
 800d87a:	2b80      	cmp	r3, #128	; 0x80
 800d87c:	d009      	beq.n	800d892 <UART_SetConfig+0x1ae>
 800d87e:	2b80      	cmp	r3, #128	; 0x80
 800d880:	d810      	bhi.n	800d8a4 <UART_SetConfig+0x1c0>
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <UART_SetConfig+0x1a8>
 800d886:	2b40      	cmp	r3, #64	; 0x40
 800d888:	d006      	beq.n	800d898 <UART_SetConfig+0x1b4>
 800d88a:	e00b      	b.n	800d8a4 <UART_SetConfig+0x1c0>
 800d88c:	2300      	movs	r3, #0
 800d88e:	77fb      	strb	r3, [r7, #31]
 800d890:	e0cb      	b.n	800da2a <UART_SetConfig+0x346>
 800d892:	2302      	movs	r3, #2
 800d894:	77fb      	strb	r3, [r7, #31]
 800d896:	e0c8      	b.n	800da2a <UART_SetConfig+0x346>
 800d898:	2304      	movs	r3, #4
 800d89a:	77fb      	strb	r3, [r7, #31]
 800d89c:	e0c5      	b.n	800da2a <UART_SetConfig+0x346>
 800d89e:	2308      	movs	r3, #8
 800d8a0:	77fb      	strb	r3, [r7, #31]
 800d8a2:	e0c2      	b.n	800da2a <UART_SetConfig+0x346>
 800d8a4:	2310      	movs	r3, #16
 800d8a6:	77fb      	strb	r3, [r7, #31]
 800d8a8:	e0bf      	b.n	800da2a <UART_SetConfig+0x346>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a45      	ldr	r2, [pc, #276]	; (800d9c4 <UART_SetConfig+0x2e0>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d125      	bne.n	800d900 <UART_SetConfig+0x21c>
 800d8b4:	4b3f      	ldr	r3, [pc, #252]	; (800d9b4 <UART_SetConfig+0x2d0>)
 800d8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8c2:	d017      	beq.n	800d8f4 <UART_SetConfig+0x210>
 800d8c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8c8:	d817      	bhi.n	800d8fa <UART_SetConfig+0x216>
 800d8ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8ce:	d00b      	beq.n	800d8e8 <UART_SetConfig+0x204>
 800d8d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8d4:	d811      	bhi.n	800d8fa <UART_SetConfig+0x216>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <UART_SetConfig+0x1fe>
 800d8da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8de:	d006      	beq.n	800d8ee <UART_SetConfig+0x20a>
 800d8e0:	e00b      	b.n	800d8fa <UART_SetConfig+0x216>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	77fb      	strb	r3, [r7, #31]
 800d8e6:	e0a0      	b.n	800da2a <UART_SetConfig+0x346>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	77fb      	strb	r3, [r7, #31]
 800d8ec:	e09d      	b.n	800da2a <UART_SetConfig+0x346>
 800d8ee:	2304      	movs	r3, #4
 800d8f0:	77fb      	strb	r3, [r7, #31]
 800d8f2:	e09a      	b.n	800da2a <UART_SetConfig+0x346>
 800d8f4:	2308      	movs	r3, #8
 800d8f6:	77fb      	strb	r3, [r7, #31]
 800d8f8:	e097      	b.n	800da2a <UART_SetConfig+0x346>
 800d8fa:	2310      	movs	r3, #16
 800d8fc:	77fb      	strb	r3, [r7, #31]
 800d8fe:	e094      	b.n	800da2a <UART_SetConfig+0x346>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a30      	ldr	r2, [pc, #192]	; (800d9c8 <UART_SetConfig+0x2e4>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d125      	bne.n	800d956 <UART_SetConfig+0x272>
 800d90a:	4b2a      	ldr	r3, [pc, #168]	; (800d9b4 <UART_SetConfig+0x2d0>)
 800d90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d918:	d017      	beq.n	800d94a <UART_SetConfig+0x266>
 800d91a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d91e:	d817      	bhi.n	800d950 <UART_SetConfig+0x26c>
 800d920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d924:	d00b      	beq.n	800d93e <UART_SetConfig+0x25a>
 800d926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d92a:	d811      	bhi.n	800d950 <UART_SetConfig+0x26c>
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d003      	beq.n	800d938 <UART_SetConfig+0x254>
 800d930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d934:	d006      	beq.n	800d944 <UART_SetConfig+0x260>
 800d936:	e00b      	b.n	800d950 <UART_SetConfig+0x26c>
 800d938:	2301      	movs	r3, #1
 800d93a:	77fb      	strb	r3, [r7, #31]
 800d93c:	e075      	b.n	800da2a <UART_SetConfig+0x346>
 800d93e:	2302      	movs	r3, #2
 800d940:	77fb      	strb	r3, [r7, #31]
 800d942:	e072      	b.n	800da2a <UART_SetConfig+0x346>
 800d944:	2304      	movs	r3, #4
 800d946:	77fb      	strb	r3, [r7, #31]
 800d948:	e06f      	b.n	800da2a <UART_SetConfig+0x346>
 800d94a:	2308      	movs	r3, #8
 800d94c:	77fb      	strb	r3, [r7, #31]
 800d94e:	e06c      	b.n	800da2a <UART_SetConfig+0x346>
 800d950:	2310      	movs	r3, #16
 800d952:	77fb      	strb	r3, [r7, #31]
 800d954:	e069      	b.n	800da2a <UART_SetConfig+0x346>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a1c      	ldr	r2, [pc, #112]	; (800d9cc <UART_SetConfig+0x2e8>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d137      	bne.n	800d9d0 <UART_SetConfig+0x2ec>
 800d960:	4b14      	ldr	r3, [pc, #80]	; (800d9b4 <UART_SetConfig+0x2d0>)
 800d962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d966:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d96a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d96e:	d017      	beq.n	800d9a0 <UART_SetConfig+0x2bc>
 800d970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d974:	d817      	bhi.n	800d9a6 <UART_SetConfig+0x2c2>
 800d976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d97a:	d00b      	beq.n	800d994 <UART_SetConfig+0x2b0>
 800d97c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d980:	d811      	bhi.n	800d9a6 <UART_SetConfig+0x2c2>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <UART_SetConfig+0x2aa>
 800d986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d98a:	d006      	beq.n	800d99a <UART_SetConfig+0x2b6>
 800d98c:	e00b      	b.n	800d9a6 <UART_SetConfig+0x2c2>
 800d98e:	2300      	movs	r3, #0
 800d990:	77fb      	strb	r3, [r7, #31]
 800d992:	e04a      	b.n	800da2a <UART_SetConfig+0x346>
 800d994:	2302      	movs	r3, #2
 800d996:	77fb      	strb	r3, [r7, #31]
 800d998:	e047      	b.n	800da2a <UART_SetConfig+0x346>
 800d99a:	2304      	movs	r3, #4
 800d99c:	77fb      	strb	r3, [r7, #31]
 800d99e:	e044      	b.n	800da2a <UART_SetConfig+0x346>
 800d9a0:	2308      	movs	r3, #8
 800d9a2:	77fb      	strb	r3, [r7, #31]
 800d9a4:	e041      	b.n	800da2a <UART_SetConfig+0x346>
 800d9a6:	2310      	movs	r3, #16
 800d9a8:	77fb      	strb	r3, [r7, #31]
 800d9aa:	e03e      	b.n	800da2a <UART_SetConfig+0x346>
 800d9ac:	efff69f3 	.word	0xefff69f3
 800d9b0:	40011000 	.word	0x40011000
 800d9b4:	40023800 	.word	0x40023800
 800d9b8:	40004400 	.word	0x40004400
 800d9bc:	40004800 	.word	0x40004800
 800d9c0:	40004c00 	.word	0x40004c00
 800d9c4:	40005000 	.word	0x40005000
 800d9c8:	40011400 	.word	0x40011400
 800d9cc:	40007800 	.word	0x40007800
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a71      	ldr	r2, [pc, #452]	; (800db9c <UART_SetConfig+0x4b8>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d125      	bne.n	800da26 <UART_SetConfig+0x342>
 800d9da:	4b71      	ldr	r3, [pc, #452]	; (800dba0 <UART_SetConfig+0x4bc>)
 800d9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d9e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d9e8:	d017      	beq.n	800da1a <UART_SetConfig+0x336>
 800d9ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d9ee:	d817      	bhi.n	800da20 <UART_SetConfig+0x33c>
 800d9f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9f4:	d00b      	beq.n	800da0e <UART_SetConfig+0x32a>
 800d9f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9fa:	d811      	bhi.n	800da20 <UART_SetConfig+0x33c>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d003      	beq.n	800da08 <UART_SetConfig+0x324>
 800da00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da04:	d006      	beq.n	800da14 <UART_SetConfig+0x330>
 800da06:	e00b      	b.n	800da20 <UART_SetConfig+0x33c>
 800da08:	2300      	movs	r3, #0
 800da0a:	77fb      	strb	r3, [r7, #31]
 800da0c:	e00d      	b.n	800da2a <UART_SetConfig+0x346>
 800da0e:	2302      	movs	r3, #2
 800da10:	77fb      	strb	r3, [r7, #31]
 800da12:	e00a      	b.n	800da2a <UART_SetConfig+0x346>
 800da14:	2304      	movs	r3, #4
 800da16:	77fb      	strb	r3, [r7, #31]
 800da18:	e007      	b.n	800da2a <UART_SetConfig+0x346>
 800da1a:	2308      	movs	r3, #8
 800da1c:	77fb      	strb	r3, [r7, #31]
 800da1e:	e004      	b.n	800da2a <UART_SetConfig+0x346>
 800da20:	2310      	movs	r3, #16
 800da22:	77fb      	strb	r3, [r7, #31]
 800da24:	e001      	b.n	800da2a <UART_SetConfig+0x346>
 800da26:	2310      	movs	r3, #16
 800da28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	69db      	ldr	r3, [r3, #28]
 800da2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da32:	d15a      	bne.n	800daea <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800da34:	7ffb      	ldrb	r3, [r7, #31]
 800da36:	2b08      	cmp	r3, #8
 800da38:	d827      	bhi.n	800da8a <UART_SetConfig+0x3a6>
 800da3a:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <UART_SetConfig+0x35c>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da65 	.word	0x0800da65
 800da44:	0800da6d 	.word	0x0800da6d
 800da48:	0800da75 	.word	0x0800da75
 800da4c:	0800da8b 	.word	0x0800da8b
 800da50:	0800da7b 	.word	0x0800da7b
 800da54:	0800da8b 	.word	0x0800da8b
 800da58:	0800da8b 	.word	0x0800da8b
 800da5c:	0800da8b 	.word	0x0800da8b
 800da60:	0800da83 	.word	0x0800da83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da64:	f7fd ff9c 	bl	800b9a0 <HAL_RCC_GetPCLK1Freq>
 800da68:	61b8      	str	r0, [r7, #24]
        break;
 800da6a:	e013      	b.n	800da94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da6c:	f7fd ffac 	bl	800b9c8 <HAL_RCC_GetPCLK2Freq>
 800da70:	61b8      	str	r0, [r7, #24]
        break;
 800da72:	e00f      	b.n	800da94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da74:	4b4b      	ldr	r3, [pc, #300]	; (800dba4 <UART_SetConfig+0x4c0>)
 800da76:	61bb      	str	r3, [r7, #24]
        break;
 800da78:	e00c      	b.n	800da94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da7a:	f7fd fecf 	bl	800b81c <HAL_RCC_GetSysClockFreq>
 800da7e:	61b8      	str	r0, [r7, #24]
        break;
 800da80:	e008      	b.n	800da94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da86:	61bb      	str	r3, [r7, #24]
        break;
 800da88:	e004      	b.n	800da94 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800da8a:	2300      	movs	r3, #0
 800da8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800da8e:	2301      	movs	r3, #1
 800da90:	77bb      	strb	r3, [r7, #30]
        break;
 800da92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d074      	beq.n	800db84 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	005a      	lsls	r2, r3, #1
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	085b      	lsrs	r3, r3, #1
 800daa4:	441a      	add	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800daae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	2b0f      	cmp	r3, #15
 800dab4:	d916      	bls.n	800dae4 <UART_SetConfig+0x400>
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dabc:	d212      	bcs.n	800dae4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	f023 030f 	bic.w	r3, r3, #15
 800dac6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	085b      	lsrs	r3, r3, #1
 800dacc:	b29b      	uxth	r3, r3
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	89fb      	ldrh	r3, [r7, #14]
 800dad6:	4313      	orrs	r3, r2
 800dad8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	89fa      	ldrh	r2, [r7, #14]
 800dae0:	60da      	str	r2, [r3, #12]
 800dae2:	e04f      	b.n	800db84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800dae4:	2301      	movs	r3, #1
 800dae6:	77bb      	strb	r3, [r7, #30]
 800dae8:	e04c      	b.n	800db84 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800daea:	7ffb      	ldrb	r3, [r7, #31]
 800daec:	2b08      	cmp	r3, #8
 800daee:	d828      	bhi.n	800db42 <UART_SetConfig+0x45e>
 800daf0:	a201      	add	r2, pc, #4	; (adr r2, 800daf8 <UART_SetConfig+0x414>)
 800daf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf6:	bf00      	nop
 800daf8:	0800db1d 	.word	0x0800db1d
 800dafc:	0800db25 	.word	0x0800db25
 800db00:	0800db2d 	.word	0x0800db2d
 800db04:	0800db43 	.word	0x0800db43
 800db08:	0800db33 	.word	0x0800db33
 800db0c:	0800db43 	.word	0x0800db43
 800db10:	0800db43 	.word	0x0800db43
 800db14:	0800db43 	.word	0x0800db43
 800db18:	0800db3b 	.word	0x0800db3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db1c:	f7fd ff40 	bl	800b9a0 <HAL_RCC_GetPCLK1Freq>
 800db20:	61b8      	str	r0, [r7, #24]
        break;
 800db22:	e013      	b.n	800db4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db24:	f7fd ff50 	bl	800b9c8 <HAL_RCC_GetPCLK2Freq>
 800db28:	61b8      	str	r0, [r7, #24]
        break;
 800db2a:	e00f      	b.n	800db4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db2c:	4b1d      	ldr	r3, [pc, #116]	; (800dba4 <UART_SetConfig+0x4c0>)
 800db2e:	61bb      	str	r3, [r7, #24]
        break;
 800db30:	e00c      	b.n	800db4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db32:	f7fd fe73 	bl	800b81c <HAL_RCC_GetSysClockFreq>
 800db36:	61b8      	str	r0, [r7, #24]
        break;
 800db38:	e008      	b.n	800db4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db3e:	61bb      	str	r3, [r7, #24]
        break;
 800db40:	e004      	b.n	800db4c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800db42:	2300      	movs	r3, #0
 800db44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	77bb      	strb	r3, [r7, #30]
        break;
 800db4a:	bf00      	nop
    }

    if (pclk != 0U)
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d018      	beq.n	800db84 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	085a      	lsrs	r2, r3, #1
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	441a      	add	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	fbb2 f3f3 	udiv	r3, r2, r3
 800db64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	2b0f      	cmp	r3, #15
 800db6a:	d909      	bls.n	800db80 <UART_SetConfig+0x49c>
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db72:	d205      	bcs.n	800db80 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	b29a      	uxth	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	60da      	str	r2, [r3, #12]
 800db7e:	e001      	b.n	800db84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800db90:	7fbb      	ldrb	r3, [r7, #30]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3720      	adds	r7, #32
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	40007c00 	.word	0x40007c00
 800dba0:	40023800 	.word	0x40023800
 800dba4:	00f42400 	.word	0x00f42400

0800dba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb4:	f003 0301 	and.w	r3, r3, #1
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00a      	beq.n	800dbd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd6:	f003 0302 	and.w	r3, r3, #2
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	f003 0304 	and.w	r3, r3, #4
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00a      	beq.n	800dc16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	430a      	orrs	r2, r1
 800dc14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1a:	f003 0308 	and.w	r3, r3, #8
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	430a      	orrs	r2, r1
 800dc36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3c:	f003 0310 	and.w	r3, r3, #16
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	430a      	orrs	r2, r1
 800dc58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5e:	f003 0320 	and.w	r3, r3, #32
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00a      	beq.n	800dc7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d01a      	beq.n	800dcbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	430a      	orrs	r2, r1
 800dc9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dca6:	d10a      	bne.n	800dcbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	430a      	orrs	r2, r1
 800dcbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00a      	beq.n	800dce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	430a      	orrs	r2, r1
 800dcde:	605a      	str	r2, [r3, #4]
  }
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af02      	add	r7, sp, #8
 800dcf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dcfc:	f7fb f978 	bl	8008ff0 <HAL_GetTick>
 800dd00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 0308 	and.w	r3, r3, #8
 800dd0c:	2b08      	cmp	r3, #8
 800dd0e:	d10e      	bne.n	800dd2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 f82d 	bl	800dd7e <UART_WaitOnFlagUntilTimeout>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd2a:	2303      	movs	r3, #3
 800dd2c:	e023      	b.n	800dd76 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f003 0304 	and.w	r3, r3, #4
 800dd38:	2b04      	cmp	r3, #4
 800dd3a:	d10e      	bne.n	800dd5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f817 	bl	800dd7e <UART_WaitOnFlagUntilTimeout>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd56:	2303      	movs	r3, #3
 800dd58:	e00d      	b.n	800dd76 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2220      	movs	r2, #32
 800dd64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b09c      	sub	sp, #112	; 0x70
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	60f8      	str	r0, [r7, #12]
 800dd86:	60b9      	str	r1, [r7, #8]
 800dd88:	603b      	str	r3, [r7, #0]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd8e:	e0a5      	b.n	800dedc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd96:	f000 80a1 	beq.w	800dedc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd9a:	f7fb f929 	bl	8008ff0 <HAL_GetTick>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d302      	bcc.n	800ddb0 <UART_WaitOnFlagUntilTimeout+0x32>
 800ddaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d13e      	bne.n	800de2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddb8:	e853 3f00 	ldrex	r3, [r3]
 800ddbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ddbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ddc4:	667b      	str	r3, [r7, #100]	; 0x64
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ddd6:	e841 2300 	strex	r3, r2, [r1]
 800ddda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1e6      	bne.n	800ddb0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3308      	adds	r3, #8
 800dde8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddec:	e853 3f00 	ldrex	r3, [r3]
 800ddf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf4:	f023 0301 	bic.w	r3, r3, #1
 800ddf8:	663b      	str	r3, [r7, #96]	; 0x60
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3308      	adds	r3, #8
 800de00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de02:	64ba      	str	r2, [r7, #72]	; 0x48
 800de04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de0a:	e841 2300 	strex	r3, r2, [r1]
 800de0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800de10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e5      	bne.n	800dde2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2220      	movs	r2, #32
 800de1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2220      	movs	r2, #32
 800de20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800de2a:	2303      	movs	r3, #3
 800de2c:	e067      	b.n	800defe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d04f      	beq.n	800dedc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	69db      	ldr	r3, [r3, #28]
 800de42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de4a:	d147      	bne.n	800dedc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	e853 3f00 	ldrex	r3, [r3]
 800de62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	461a      	mov	r2, r3
 800de72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de74:	637b      	str	r3, [r7, #52]	; 0x34
 800de76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de7c:	e841 2300 	strex	r3, r2, [r1]
 800de80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1e6      	bne.n	800de56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3308      	adds	r3, #8
 800de8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	613b      	str	r3, [r7, #16]
   return(result);
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	f023 0301 	bic.w	r3, r3, #1
 800de9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3308      	adds	r3, #8
 800dea6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dea8:	623a      	str	r2, [r7, #32]
 800deaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	69f9      	ldr	r1, [r7, #28]
 800deae:	6a3a      	ldr	r2, [r7, #32]
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e5      	bne.n	800de88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2220      	movs	r2, #32
 800dec0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2220      	movs	r2, #32
 800dec6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2220      	movs	r2, #32
 800decc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2200      	movs	r2, #0
 800ded4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ded8:	2303      	movs	r3, #3
 800deda:	e010      	b.n	800defe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	69da      	ldr	r2, [r3, #28]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	4013      	ands	r3, r2
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	429a      	cmp	r2, r3
 800deea:	bf0c      	ite	eq
 800deec:	2301      	moveq	r3, #1
 800deee:	2300      	movne	r3, #0
 800def0:	b2db      	uxtb	r3, r3
 800def2:	461a      	mov	r2, r3
 800def4:	79fb      	ldrb	r3, [r7, #7]
 800def6:	429a      	cmp	r2, r3
 800def8:	f43f af4a 	beq.w	800dd90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3770      	adds	r7, #112	; 0x70
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <_ZdlPvj>:
 800df06:	f000 b818 	b.w	800df3a <_ZdlPv>

0800df0a <_ZdaPv>:
 800df0a:	f000 b816 	b.w	800df3a <_ZdlPv>

0800df0e <_Znwj>:
 800df0e:	2801      	cmp	r0, #1
 800df10:	bf38      	it	cc
 800df12:	2001      	movcc	r0, #1
 800df14:	b510      	push	{r4, lr}
 800df16:	4604      	mov	r4, r0
 800df18:	4620      	mov	r0, r4
 800df1a:	f001 fbfd 	bl	800f718 <malloc>
 800df1e:	b930      	cbnz	r0, 800df2e <_Znwj+0x20>
 800df20:	f000 f820 	bl	800df64 <_ZSt15get_new_handlerv>
 800df24:	b908      	cbnz	r0, 800df2a <_Znwj+0x1c>
 800df26:	f001 fbbd 	bl	800f6a4 <abort>
 800df2a:	4780      	blx	r0
 800df2c:	e7f4      	b.n	800df18 <_Znwj+0xa>
 800df2e:	bd10      	pop	{r4, pc}

0800df30 <_Znaj>:
 800df30:	f7ff bfed 	b.w	800df0e <_Znwj>

0800df34 <__cxa_pure_virtual>:
 800df34:	b508      	push	{r3, lr}
 800df36:	f000 f80f 	bl	800df58 <_ZSt9terminatev>

0800df3a <_ZdlPv>:
 800df3a:	f001 bbf5 	b.w	800f728 <free>

0800df3e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800df3e:	b508      	push	{r3, lr}
 800df40:	4780      	blx	r0
 800df42:	f001 fbaf 	bl	800f6a4 <abort>
	...

0800df48 <_ZSt13get_terminatev>:
 800df48:	4b02      	ldr	r3, [pc, #8]	; (800df54 <_ZSt13get_terminatev+0xc>)
 800df4a:	6818      	ldr	r0, [r3, #0]
 800df4c:	f3bf 8f5b 	dmb	ish
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	20000014 	.word	0x20000014

0800df58 <_ZSt9terminatev>:
 800df58:	b508      	push	{r3, lr}
 800df5a:	f7ff fff5 	bl	800df48 <_ZSt13get_terminatev>
 800df5e:	f7ff ffee 	bl	800df3e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800df64 <_ZSt15get_new_handlerv>:
 800df64:	4b02      	ldr	r3, [pc, #8]	; (800df70 <_ZSt15get_new_handlerv+0xc>)
 800df66:	6818      	ldr	r0, [r3, #0]
 800df68:	f3bf 8f5b 	dmb	ish
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	200003e8 	.word	0x200003e8
 800df74:	00000000 	.word	0x00000000

0800df78 <log>:
 800df78:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800df7c:	ed2d 8b02 	vpush	{d8}
 800df80:	b082      	sub	sp, #8
 800df82:	ed8d 0b00 	vstr	d0, [sp]
 800df86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df8a:	2600      	movs	r6, #0
 800df8c:	1994      	adds	r4, r2, r6
 800df8e:	4e80      	ldr	r6, [pc, #512]	; (800e190 <log+0x218>)
 800df90:	4f80      	ldr	r7, [pc, #512]	; (800e194 <log+0x21c>)
 800df92:	eb43 0506 	adc.w	r5, r3, r6
 800df96:	42af      	cmp	r7, r5
 800df98:	f04f 36ff 	mov.w	r6, #4294967295
 800df9c:	bf08      	it	eq
 800df9e:	42a6      	cmpeq	r6, r4
 800dfa0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800dfa4:	d363      	bcc.n	800e06e <log+0xf6>
 800dfa6:	497c      	ldr	r1, [pc, #496]	; (800e198 <log+0x220>)
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	428b      	cmp	r3, r1
 800dfac:	bf08      	it	eq
 800dfae:	4282      	cmpeq	r2, r0
 800dfb0:	f000 80de 	beq.w	800e170 <log+0x1f8>
 800dfb4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dfb8:	ee30 7b47 	vsub.f64	d7, d0, d7
 800dfbc:	4b77      	ldr	r3, [pc, #476]	; (800e19c <log+0x224>)
 800dfbe:	ee27 1b07 	vmul.f64	d1, d7, d7
 800dfc2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800dfc6:	ee27 3b01 	vmul.f64	d3, d7, d1
 800dfca:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800dfce:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dfd2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800dfd6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800dfda:	eea6 4b01 	vfma.f64	d4, d6, d1
 800dfde:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800dfe2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dfe6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800dfea:	eea5 6b01 	vfma.f64	d6, d5, d1
 800dfee:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800dff2:	eeb0 2b46 	vmov.f64	d2, d6
 800dff6:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800dffa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dffe:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800e002:	eea5 6b01 	vfma.f64	d6, d5, d1
 800e006:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800e00a:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 800e00e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800e012:	eea6 2b03 	vfma.f64	d2, d6, d3
 800e016:	ed9f 6b58 	vldr	d6, [pc, #352]	; 800e178 <log+0x200>
 800e01a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800e01e:	eeb0 2b47 	vmov.f64	d2, d7
 800e022:	eea7 2b06 	vfma.f64	d2, d7, d6
 800e026:	eea7 2b46 	vfms.f64	d2, d7, d6
 800e02a:	eeb0 6b47 	vmov.f64	d6, d7
 800e02e:	ee37 8b42 	vsub.f64	d8, d7, d2
 800e032:	ee22 0b02 	vmul.f64	d0, d2, d2
 800e036:	eea0 6b01 	vfma.f64	d6, d0, d1
 800e03a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e03e:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e042:	eea0 5b01 	vfma.f64	d5, d0, d1
 800e046:	ee21 1b08 	vmul.f64	d1, d1, d8
 800e04a:	eea1 5b07 	vfma.f64	d5, d1, d7
 800e04e:	eeb0 7b45 	vmov.f64	d7, d5
 800e052:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e056:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e05a:	ed8d 7b00 	vstr	d7, [sp]
 800e05e:	ed9d 0b00 	vldr	d0, [sp]
 800e062:	b002      	add	sp, #8
 800e064:	ecbd 8b02 	vpop	{d8}
 800e068:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e06c:	4770      	bx	lr
 800e06e:	f1ac 0510 	sub.w	r5, ip, #16
 800e072:	f647 74df 	movw	r4, #32735	; 0x7fdf
 800e076:	42a5      	cmp	r5, r4
 800e078:	d930      	bls.n	800e0dc <log+0x164>
 800e07a:	1890      	adds	r0, r2, r2
 800e07c:	eb43 0103 	adc.w	r1, r3, r3
 800e080:	4301      	orrs	r1, r0
 800e082:	d107      	bne.n	800e094 <log+0x11c>
 800e084:	2001      	movs	r0, #1
 800e086:	b002      	add	sp, #8
 800e088:	ecbd 8b02 	vpop	{d8}
 800e08c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e090:	f000 b8ba 	b.w	800e208 <__math_divzero>
 800e094:	4942      	ldr	r1, [pc, #264]	; (800e1a0 <log+0x228>)
 800e096:	2000      	movs	r0, #0
 800e098:	428b      	cmp	r3, r1
 800e09a:	bf08      	it	eq
 800e09c:	4282      	cmpeq	r2, r0
 800e09e:	d0de      	beq.n	800e05e <log+0xe6>
 800e0a0:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800e0a4:	d104      	bne.n	800e0b0 <log+0x138>
 800e0a6:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800e0aa:	ea31 010c 	bics.w	r1, r1, ip
 800e0ae:	d108      	bne.n	800e0c2 <log+0x14a>
 800e0b0:	ed9d 0b00 	vldr	d0, [sp]
 800e0b4:	b002      	add	sp, #8
 800e0b6:	ecbd 8b02 	vpop	{d8}
 800e0ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e0be:	f000 b8bb 	b.w	800e238 <__math_invalid>
 800e0c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e180 <log+0x208>
 800e0c6:	ed9d 6b00 	vldr	d6, [sp]
 800e0ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0ce:	ec56 5b17 	vmov	r5, r6, d7
 800e0d2:	4834      	ldr	r0, [pc, #208]	; (800e1a4 <log+0x22c>)
 800e0d4:	2400      	movs	r4, #0
 800e0d6:	192a      	adds	r2, r5, r4
 800e0d8:	eb46 0300 	adc.w	r3, r6, r0
 800e0dc:	2100      	movs	r1, #0
 800e0de:	1851      	adds	r1, r2, r1
 800e0e0:	4931      	ldr	r1, [pc, #196]	; (800e1a8 <log+0x230>)
 800e0e2:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800e0e6:	eb43 0101 	adc.w	r1, r3, r1
 800e0ea:	0d0c      	lsrs	r4, r1, #20
 800e0ec:	2500      	movs	r5, #0
 800e0ee:	ebb2 0805 	subs.w	r8, r2, r5
 800e0f2:	ea4f 5404 	mov.w	r4, r4, lsl #20
 800e0f6:	eb63 0904 	sbc.w	r9, r3, r4
 800e0fa:	4b28      	ldr	r3, [pc, #160]	; (800e19c <log+0x224>)
 800e0fc:	f3c1 3046 	ubfx	r0, r1, #13, #7
 800e100:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 800e104:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 800e108:	ec49 8b16 	vmov	d6, r8, r9
 800e10c:	1509      	asrs	r1, r1, #20
 800e10e:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e112:	ee07 1a90 	vmov	s15, r1
 800e116:	ee24 1b04 	vmul.f64	d1, d4, d4
 800e11a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e11e:	ed93 5b00 	vldr	d5, [r3]
 800e122:	ee24 0b01 	vmul.f64	d0, d4, d1
 800e126:	ed93 3b02 	vldr	d3, [r3, #8]
 800e12a:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 800e12e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e132:	ee34 5b07 	vadd.f64	d5, d4, d7
 800e136:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e13a:	ee37 7b04 	vadd.f64	d7, d7, d4
 800e13e:	eea3 7b06 	vfma.f64	d7, d3, d6
 800e142:	ed93 6b04 	vldr	d6, [r3, #16]
 800e146:	ed93 3b08 	vldr	d3, [r3, #32]
 800e14a:	eea6 7b01 	vfma.f64	d7, d6, d1
 800e14e:	ed93 6b06 	vldr	d6, [r3, #24]
 800e152:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e156:	eea3 6b04 	vfma.f64	d6, d3, d4
 800e15a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e15e:	eea2 3b04 	vfma.f64	d3, d2, d4
 800e162:	eea3 6b01 	vfma.f64	d6, d3, d1
 800e166:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e16a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e16e:	e774      	b.n	800e05a <log+0xe2>
 800e170:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800e188 <log+0x210>
 800e174:	e771      	b.n	800e05a <log+0xe2>
 800e176:	bf00      	nop
 800e178:	00000000 	.word	0x00000000
 800e17c:	41a00000 	.word	0x41a00000
 800e180:	00000000 	.word	0x00000000
 800e184:	43300000 	.word	0x43300000
	...
 800e190:	c0120000 	.word	0xc0120000
 800e194:	000308ff 	.word	0x000308ff
 800e198:	3ff00000 	.word	0x3ff00000
 800e19c:	08028e70 	.word	0x08028e70
 800e1a0:	7ff00000 	.word	0x7ff00000
 800e1a4:	fcc00000 	.word	0xfcc00000
 800e1a8:	c01a0000 	.word	0xc01a0000

0800e1ac <with_errno>:
 800e1ac:	b513      	push	{r0, r1, r4, lr}
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	ed8d 0b00 	vstr	d0, [sp]
 800e1b4:	f001 fa86 	bl	800f6c4 <__errno>
 800e1b8:	ed9d 0b00 	vldr	d0, [sp]
 800e1bc:	6004      	str	r4, [r0, #0]
 800e1be:	b002      	add	sp, #8
 800e1c0:	bd10      	pop	{r4, pc}

0800e1c2 <xflow>:
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	b158      	cbz	r0, 800e1de <xflow+0x1c>
 800e1c6:	eeb1 7b40 	vneg.f64	d7, d0
 800e1ca:	ed8d 7b00 	vstr	d7, [sp]
 800e1ce:	ed9d 7b00 	vldr	d7, [sp]
 800e1d2:	2022      	movs	r0, #34	; 0x22
 800e1d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e1d8:	b002      	add	sp, #8
 800e1da:	f7ff bfe7 	b.w	800e1ac <with_errno>
 800e1de:	eeb0 7b40 	vmov.f64	d7, d0
 800e1e2:	e7f2      	b.n	800e1ca <xflow+0x8>
 800e1e4:	0000      	movs	r0, r0
	...

0800e1e8 <__math_uflow>:
 800e1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1f0 <__math_uflow+0x8>
 800e1ec:	f7ff bfe9 	b.w	800e1c2 <xflow>
 800e1f0:	00000000 	.word	0x00000000
 800e1f4:	10000000 	.word	0x10000000

0800e1f8 <__math_oflow>:
 800e1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e200 <__math_oflow+0x8>
 800e1fc:	f7ff bfe1 	b.w	800e1c2 <xflow>
 800e200:	00000000 	.word	0x00000000
 800e204:	70000000 	.word	0x70000000

0800e208 <__math_divzero>:
 800e208:	b082      	sub	sp, #8
 800e20a:	2800      	cmp	r0, #0
 800e20c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e210:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e214:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e218:	ed8d 7b00 	vstr	d7, [sp]
 800e21c:	ed9d 0b00 	vldr	d0, [sp]
 800e220:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e230 <__math_divzero+0x28>
 800e224:	2022      	movs	r0, #34	; 0x22
 800e226:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e22a:	b002      	add	sp, #8
 800e22c:	f7ff bfbe 	b.w	800e1ac <with_errno>
	...

0800e238 <__math_invalid>:
 800e238:	eeb0 7b40 	vmov.f64	d7, d0
 800e23c:	eeb4 7b47 	vcmp.f64	d7, d7
 800e240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e244:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e248:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e24c:	d602      	bvs.n	800e254 <__math_invalid+0x1c>
 800e24e:	2021      	movs	r0, #33	; 0x21
 800e250:	f7ff bfac 	b.w	800e1ac <with_errno>
 800e254:	4770      	bx	lr

0800e256 <__math_check_uflow>:
 800e256:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	d102      	bne.n	800e266 <__math_check_uflow+0x10>
 800e260:	2022      	movs	r0, #34	; 0x22
 800e262:	f7ff bfa3 	b.w	800e1ac <with_errno>
 800e266:	4770      	bx	lr

0800e268 <__math_check_oflow>:
 800e268:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e288 <__math_check_oflow+0x20>
 800e26c:	eeb0 7bc0 	vabs.f64	d7, d0
 800e270:	eeb4 7b46 	vcmp.f64	d7, d6
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	dd02      	ble.n	800e280 <__math_check_oflow+0x18>
 800e27a:	2022      	movs	r0, #34	; 0x22
 800e27c:	f7ff bf96 	b.w	800e1ac <with_errno>
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	f3af 8000 	nop.w
 800e288:	ffffffff 	.word	0xffffffff
 800e28c:	7fefffff 	.word	0x7fefffff

0800e290 <checkint>:
 800e290:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e294:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800e298:	429a      	cmp	r2, r3
 800e29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29c:	dd2b      	ble.n	800e2f6 <checkint+0x66>
 800e29e:	f240 4333 	movw	r3, #1075	; 0x433
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	dc25      	bgt.n	800e2f2 <checkint+0x62>
 800e2a6:	1a9b      	subs	r3, r3, r2
 800e2a8:	f1a3 0620 	sub.w	r6, r3, #32
 800e2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b0:	fa02 f606 	lsl.w	r6, r2, r6
 800e2b4:	fa02 f403 	lsl.w	r4, r2, r3
 800e2b8:	f1c3 0520 	rsb	r5, r3, #32
 800e2bc:	4334      	orrs	r4, r6
 800e2be:	fa22 f505 	lsr.w	r5, r2, r5
 800e2c2:	432c      	orrs	r4, r5
 800e2c4:	409a      	lsls	r2, r3
 800e2c6:	ea20 0602 	bic.w	r6, r0, r2
 800e2ca:	ea21 0704 	bic.w	r7, r1, r4
 800e2ce:	ea56 0207 	orrs.w	r2, r6, r7
 800e2d2:	f1a3 0420 	sub.w	r4, r3, #32
 800e2d6:	f1c3 0220 	rsb	r2, r3, #32
 800e2da:	d10c      	bne.n	800e2f6 <checkint+0x66>
 800e2dc:	40d8      	lsrs	r0, r3
 800e2de:	fa01 f302 	lsl.w	r3, r1, r2
 800e2e2:	4318      	orrs	r0, r3
 800e2e4:	40e1      	lsrs	r1, r4
 800e2e6:	4308      	orrs	r0, r1
 800e2e8:	f000 0301 	and.w	r3, r0, #1
 800e2ec:	f1c3 0002 	rsb	r0, r3, #2
 800e2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2f2:	2002      	movs	r0, #2
 800e2f4:	e7fc      	b.n	800e2f0 <checkint+0x60>
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	e7fa      	b.n	800e2f0 <checkint+0x60>
 800e2fa:	0000      	movs	r0, r0
 800e2fc:	0000      	movs	r0, r0
	...

0800e300 <pow>:
 800e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	ed2d 8b0a 	vpush	{d8-d12}
 800e308:	b09b      	sub	sp, #108	; 0x6c
 800e30a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e30e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e312:	ed8d 1b00 	vstr	d1, [sp]
 800e316:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800e31a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e31e:	f109 30ff 	add.w	r0, r9, #4294967295
 800e322:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800e326:	4288      	cmp	r0, r1
 800e328:	46cc      	mov	ip, r9
 800e32a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800e32e:	d806      	bhi.n	800e33e <pow+0x3e>
 800e330:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800e334:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800e338:	297f      	cmp	r1, #127	; 0x7f
 800e33a:	f240 81ab 	bls.w	800e694 <pow+0x394>
 800e33e:	19b1      	adds	r1, r6, r6
 800e340:	9104      	str	r1, [sp, #16]
 800e342:	eb47 0107 	adc.w	r1, r7, r7
 800e346:	9105      	str	r1, [sp, #20]
 800e348:	9904      	ldr	r1, [sp, #16]
 800e34a:	f111 31ff 	adds.w	r1, r1, #4294967295
 800e34e:	460a      	mov	r2, r1
 800e350:	9905      	ldr	r1, [sp, #20]
 800e352:	f141 31ff 	adc.w	r1, r1, #4294967295
 800e356:	460b      	mov	r3, r1
 800e358:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800e35c:	f06f 0001 	mvn.w	r0, #1
 800e360:	4299      	cmp	r1, r3
 800e362:	bf08      	it	eq
 800e364:	4290      	cmpeq	r0, r2
 800e366:	d260      	bcs.n	800e42a <pow+0x12a>
 800e368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e36c:	4313      	orrs	r3, r2
 800e36e:	d11a      	bne.n	800e3a6 <pow+0xa6>
 800e370:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800e374:	1923      	adds	r3, r4, r4
 800e376:	930c      	str	r3, [sp, #48]	; 0x30
 800e378:	eb42 0302 	adc.w	r3, r2, r2
 800e37c:	930d      	str	r3, [sp, #52]	; 0x34
 800e37e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e382:	4bcf      	ldr	r3, [pc, #828]	; (800e6c0 <pow+0x3c0>)
 800e384:	2200      	movs	r2, #0
 800e386:	428b      	cmp	r3, r1
 800e388:	bf08      	it	eq
 800e38a:	4282      	cmpeq	r2, r0
 800e38c:	f080 8265 	bcs.w	800e85a <pow+0x55a>
 800e390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e394:	ed9d 6b00 	vldr	d6, [sp]
 800e398:	ee37 0b06 	vadd.f64	d0, d7, d6
 800e39c:	b01b      	add	sp, #108	; 0x6c
 800e39e:	ecbd 8b0a 	vpop	{d8-d12}
 800e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a6:	49c7      	ldr	r1, [pc, #796]	; (800e6c4 <pow+0x3c4>)
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	428d      	cmp	r5, r1
 800e3ac:	bf08      	it	eq
 800e3ae:	4284      	cmpeq	r4, r0
 800e3b0:	d10b      	bne.n	800e3ca <pow+0xca>
 800e3b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e3b6:	19b3      	adds	r3, r6, r6
 800e3b8:	930e      	str	r3, [sp, #56]	; 0x38
 800e3ba:	eb42 0302 	adc.w	r3, r2, r2
 800e3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e3c4:	4bbe      	ldr	r3, [pc, #760]	; (800e6c0 <pow+0x3c0>)
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	e7dd      	b.n	800e386 <pow+0x86>
 800e3ca:	1921      	adds	r1, r4, r4
 800e3cc:	9106      	str	r1, [sp, #24]
 800e3ce:	eb45 0105 	adc.w	r1, r5, r5
 800e3d2:	9107      	str	r1, [sp, #28]
 800e3d4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e3d8:	49bb      	ldr	r1, [pc, #748]	; (800e6c8 <pow+0x3c8>)
 800e3da:	2000      	movs	r0, #0
 800e3dc:	42a1      	cmp	r1, r4
 800e3de:	bf08      	it	eq
 800e3e0:	4298      	cmpeq	r0, r3
 800e3e2:	d3d5      	bcc.n	800e390 <pow+0x90>
 800e3e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e3e8:	428c      	cmp	r4, r1
 800e3ea:	bf08      	it	eq
 800e3ec:	4283      	cmpeq	r3, r0
 800e3ee:	d1cf      	bne.n	800e390 <pow+0x90>
 800e3f0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e3f4:	49b5      	ldr	r1, [pc, #724]	; (800e6cc <pow+0x3cc>)
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	428c      	cmp	r4, r1
 800e3fa:	bf08      	it	eq
 800e3fc:	4283      	cmpeq	r3, r0
 800e3fe:	f000 822c 	beq.w	800e85a <pow+0x55a>
 800e402:	49b3      	ldr	r1, [pc, #716]	; (800e6d0 <pow+0x3d0>)
 800e404:	f04f 30ff 	mov.w	r0, #4294967295
 800e408:	42a1      	cmp	r1, r4
 800e40a:	bf08      	it	eq
 800e40c:	4298      	cmpeq	r0, r3
 800e40e:	ea6f 0307 	mvn.w	r3, r7
 800e412:	bf34      	ite	cc
 800e414:	2201      	movcc	r2, #1
 800e416:	2200      	movcs	r2, #0
 800e418:	0fdb      	lsrs	r3, r3, #31
 800e41a:	429a      	cmp	r2, r3
 800e41c:	f040 821a 	bne.w	800e854 <pow+0x554>
 800e420:	ed9d 7b00 	vldr	d7, [sp]
 800e424:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e428:	e7b8      	b.n	800e39c <pow+0x9c>
 800e42a:	1923      	adds	r3, r4, r4
 800e42c:	9308      	str	r3, [sp, #32]
 800e42e:	eb45 0305 	adc.w	r3, r5, r5
 800e432:	9309      	str	r3, [sp, #36]	; 0x24
 800e434:	9b08      	ldr	r3, [sp, #32]
 800e436:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e43a:	9310      	str	r3, [sp, #64]	; 0x40
 800e43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e442:	9311      	str	r3, [sp, #68]	; 0x44
 800e444:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e448:	4299      	cmp	r1, r3
 800e44a:	bf08      	it	eq
 800e44c:	4290      	cmpeq	r0, r2
 800e44e:	d22d      	bcs.n	800e4ac <pow+0x1ac>
 800e450:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e454:	2c00      	cmp	r4, #0
 800e456:	f175 0300 	sbcs.w	r3, r5, #0
 800e45a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e45e:	da16      	bge.n	800e48e <pow+0x18e>
 800e460:	4630      	mov	r0, r6
 800e462:	4639      	mov	r1, r7
 800e464:	f7ff ff14 	bl	800e290 <checkint>
 800e468:	2801      	cmp	r0, #1
 800e46a:	d110      	bne.n	800e48e <pow+0x18e>
 800e46c:	eeb1 0b40 	vneg.f64	d0, d0
 800e470:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e474:	4323      	orrs	r3, r4
 800e476:	d10c      	bne.n	800e492 <pow+0x192>
 800e478:	2e00      	cmp	r6, #0
 800e47a:	f177 0300 	sbcs.w	r3, r7, #0
 800e47e:	da8d      	bge.n	800e39c <pow+0x9c>
 800e480:	b01b      	add	sp, #108	; 0x6c
 800e482:	ecbd 8b0a 	vpop	{d8-d12}
 800e486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48a:	f7ff bebd 	b.w	800e208 <__math_divzero>
 800e48e:	2000      	movs	r0, #0
 800e490:	e7ee      	b.n	800e470 <pow+0x170>
 800e492:	2e00      	cmp	r6, #0
 800e494:	f177 0300 	sbcs.w	r3, r7, #0
 800e498:	da80      	bge.n	800e39c <pow+0x9c>
 800e49a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e49e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e4a2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e4a6:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e4aa:	e777      	b.n	800e39c <pow+0x9c>
 800e4ac:	2c00      	cmp	r4, #0
 800e4ae:	f175 0300 	sbcs.w	r3, r5, #0
 800e4b2:	da35      	bge.n	800e520 <pow+0x220>
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	4639      	mov	r1, r7
 800e4b8:	f7ff feea 	bl	800e290 <checkint>
 800e4bc:	b940      	cbnz	r0, 800e4d0 <pow+0x1d0>
 800e4be:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e4c2:	b01b      	add	sp, #108	; 0x6c
 800e4c4:	ecbd 8b0a 	vpop	{d8-d12}
 800e4c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	f7ff beb4 	b.w	800e238 <__math_invalid>
 800e4d0:	2801      	cmp	r0, #1
 800e4d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4d6:	bf14      	ite	ne
 800e4d8:	2000      	movne	r0, #0
 800e4da:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e4de:	461d      	mov	r5, r3
 800e4e0:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e4e4:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e4e8:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e4ec:	2a7f      	cmp	r2, #127	; 0x7f
 800e4ee:	d933      	bls.n	800e558 <pow+0x258>
 800e4f0:	4974      	ldr	r1, [pc, #464]	; (800e6c4 <pow+0x3c4>)
 800e4f2:	2000      	movs	r0, #0
 800e4f4:	428d      	cmp	r5, r1
 800e4f6:	bf08      	it	eq
 800e4f8:	4284      	cmpeq	r4, r0
 800e4fa:	f000 81ae 	beq.w	800e85a <pow+0x55a>
 800e4fe:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e502:	4293      	cmp	r3, r2
 800e504:	d80e      	bhi.n	800e524 <pow+0x224>
 800e506:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e50a:	ed9d 7b00 	vldr	d7, [sp]
 800e50e:	42a9      	cmp	r1, r5
 800e510:	bf08      	it	eq
 800e512:	42a0      	cmpeq	r0, r4
 800e514:	bf34      	ite	cc
 800e516:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e51a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e51e:	e73d      	b.n	800e39c <pow+0x9c>
 800e520:	2000      	movs	r0, #0
 800e522:	e7df      	b.n	800e4e4 <pow+0x1e4>
 800e524:	42a9      	cmp	r1, r5
 800e526:	bf08      	it	eq
 800e528:	42a0      	cmpeq	r0, r4
 800e52a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e52e:	bf2c      	ite	cs
 800e530:	2301      	movcs	r3, #1
 800e532:	2300      	movcc	r3, #0
 800e534:	4590      	cmp	r8, r2
 800e536:	bf8c      	ite	hi
 800e538:	f04f 0800 	movhi.w	r8, #0
 800e53c:	f04f 0801 	movls.w	r8, #1
 800e540:	4543      	cmp	r3, r8
 800e542:	f04f 0000 	mov.w	r0, #0
 800e546:	f000 80af 	beq.w	800e6a8 <pow+0x3a8>
 800e54a:	b01b      	add	sp, #108	; 0x6c
 800e54c:	ecbd 8b0a 	vpop	{d8-d12}
 800e550:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e554:	f7ff be50 	b.w	800e1f8 <__math_oflow>
 800e558:	f1bc 0f00 	cmp.w	ip, #0
 800e55c:	d10e      	bne.n	800e57c <pow+0x27c>
 800e55e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e6b8 <pow+0x3b8>
 800e562:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e566:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e56a:	ec57 6b17 	vmov	r6, r7, d7
 800e56e:	4b59      	ldr	r3, [pc, #356]	; (800e6d4 <pow+0x3d4>)
 800e570:	2100      	movs	r1, #0
 800e572:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e576:	1874      	adds	r4, r6, r1
 800e578:	eb42 0503 	adc.w	r5, r2, r3
 800e57c:	2300      	movs	r3, #0
 800e57e:	18e3      	adds	r3, r4, r3
 800e580:	4b55      	ldr	r3, [pc, #340]	; (800e6d8 <pow+0x3d8>)
 800e582:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e586:	eb45 0303 	adc.w	r3, r5, r3
 800e58a:	1519      	asrs	r1, r3, #20
 800e58c:	ee03 1a10 	vmov	s6, r1
 800e590:	0d1e      	lsrs	r6, r3, #20
 800e592:	2100      	movs	r1, #0
 800e594:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e598:	0536      	lsls	r6, r6, #20
 800e59a:	1a63      	subs	r3, r4, r1
 800e59c:	9312      	str	r3, [sp, #72]	; 0x48
 800e59e:	eb65 0306 	sbc.w	r3, r5, r6
 800e5a2:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5a4:	4b4d      	ldr	r3, [pc, #308]	; (800e6dc <pow+0x3dc>)
 800e5a6:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e5aa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e5ae:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e5b2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e5b6:	ed93 7b00 	vldr	d7, [r3]
 800e5ba:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e5be:	ed93 4b02 	vldr	d4, [r3, #8]
 800e5c2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e5c6:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e5ca:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e5ce:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e5d2:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e5d6:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e5da:	ed93 4b04 	vldr	d4, [r3, #16]
 800e5de:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e5e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e5e6:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e5ea:	ed93 3b08 	vldr	d3, [r3, #32]
 800e5ee:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e5f2:	eeb0 8b40 	vmov.f64	d8, d0
 800e5f6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e5fa:	ed93 4b06 	vldr	d4, [r3, #24]
 800e5fe:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e602:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e606:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e60a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e60e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e612:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e616:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e61a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e61e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e622:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e626:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e62a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e62e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e632:	ed9d 6b00 	vldr	d6, [sp]
 800e636:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e63a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e63e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e642:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e646:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e64a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e64e:	eeb0 3b46 	vmov.f64	d3, d6
 800e652:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e65a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e65e:	ed9d 6b00 	vldr	d6, [sp]
 800e662:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e666:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e66a:	193c      	adds	r4, r7, r4
 800e66c:	2c3e      	cmp	r4, #62	; 0x3e
 800e66e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e672:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e676:	d934      	bls.n	800e6e2 <pow+0x3e2>
 800e678:	428c      	cmp	r4, r1
 800e67a:	da0d      	bge.n	800e698 <pow+0x398>
 800e67c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e680:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e684:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e688:	2800      	cmp	r0, #0
 800e68a:	f43f ae87 	beq.w	800e39c <pow+0x9c>
 800e68e:	eeb1 0b40 	vneg.f64	d0, d0
 800e692:	e683      	b.n	800e39c <pow+0x9c>
 800e694:	2000      	movs	r0, #0
 800e696:	e771      	b.n	800e57c <pow+0x27c>
 800e698:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e69c:	d920      	bls.n	800e6e0 <pow+0x3e0>
 800e69e:	2a00      	cmp	r2, #0
 800e6a0:	f173 0300 	sbcs.w	r3, r3, #0
 800e6a4:	f6bf af51 	bge.w	800e54a <pow+0x24a>
 800e6a8:	b01b      	add	sp, #108	; 0x6c
 800e6aa:	ecbd 8b0a 	vpop	{d8-d12}
 800e6ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b2:	f7ff bd99 	b.w	800e1e8 <__math_uflow>
 800e6b6:	bf00      	nop
 800e6b8:	00000000 	.word	0x00000000
 800e6bc:	43300000 	.word	0x43300000
 800e6c0:	fff00000 	.word	0xfff00000
 800e6c4:	3ff00000 	.word	0x3ff00000
 800e6c8:	ffe00000 	.word	0xffe00000
 800e6cc:	7fe00000 	.word	0x7fe00000
 800e6d0:	7fdfffff 	.word	0x7fdfffff
 800e6d4:	fcc00000 	.word	0xfcc00000
 800e6d8:	c0196aab 	.word	0xc0196aab
 800e6dc:	08029700 	.word	0x08029700
 800e6e0:	460f      	mov	r7, r1
 800e6e2:	4e65      	ldr	r6, [pc, #404]	; (800e878 <pow+0x578>)
 800e6e4:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e6e8:	ed96 6b02 	vldr	d6, [r6, #8]
 800e6ec:	ed96 7b00 	vldr	d7, [r6]
 800e6f0:	eeb0 5b46 	vmov.f64	d5, d6
 800e6f4:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e6f8:	ed8d 5b00 	vstr	d5, [sp]
 800e6fc:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e700:	eeb0 5b44 	vmov.f64	d5, d4
 800e704:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e708:	ed96 7b04 	vldr	d7, [r6, #16]
 800e70c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e710:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e714:	eeb0 7b45 	vmov.f64	d7, d5
 800e718:	ed96 5b06 	vldr	d5, [r6, #24]
 800e71c:	1849      	adds	r1, r1, r1
 800e71e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e722:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e726:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e72a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e72e:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e732:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e736:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e73a:	ed96 5b08 	vldr	d5, [r6, #32]
 800e73e:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e742:	1814      	adds	r4, r2, r0
 800e744:	0365      	lsls	r5, r4, #13
 800e746:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e74a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e74e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e752:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e756:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e75a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e75e:	2000      	movs	r0, #0
 800e760:	eb10 0a04 	adds.w	sl, r0, r4
 800e764:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e768:	eb45 0b0c 	adc.w	fp, r5, ip
 800e76c:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e770:	2f00      	cmp	r7, #0
 800e772:	d16a      	bne.n	800e84a <pow+0x54a>
 800e774:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e778:	4639      	mov	r1, r7
 800e77a:	ea50 0301 	orrs.w	r3, r0, r1
 800e77e:	f04f 0300 	mov.w	r3, #0
 800e782:	d115      	bne.n	800e7b0 <pow+0x4b0>
 800e784:	eb1a 0303 	adds.w	r3, sl, r3
 800e788:	ee0b 3a10 	vmov	s22, r3
 800e78c:	4b3b      	ldr	r3, [pc, #236]	; (800e87c <pow+0x57c>)
 800e78e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e860 <pow+0x560>
 800e792:	eb4b 0303 	adc.w	r3, fp, r3
 800e796:	ee0b 3a90 	vmov	s23, r3
 800e79a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e79e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e7a2:	b01b      	add	sp, #108	; 0x6c
 800e7a4:	ecbd 8b0a 	vpop	{d8-d12}
 800e7a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	f7ff bd5c 	b.w	800e268 <__math_check_oflow>
 800e7b0:	eb1a 0303 	adds.w	r3, sl, r3
 800e7b4:	930a      	str	r3, [sp, #40]	; 0x28
 800e7b6:	4b32      	ldr	r3, [pc, #200]	; (800e880 <pow+0x580>)
 800e7b8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e7bc:	eb4b 0303 	adc.w	r3, fp, r3
 800e7c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7c2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e7c6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e7ca:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e7ce:	eeb0 3bc7 	vabs.f64	d3, d7
 800e7d2:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7da:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e868 <pow+0x568>
 800e7de:	d52b      	bpl.n	800e838 <pow+0x538>
 800e7e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e7e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ec:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e7f0:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e7f4:	bf48      	it	mi
 800e7f6:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e7fa:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e7fe:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e802:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e806:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e80a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e80e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e812:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81a:	d105      	bne.n	800e828 <pow+0x528>
 800e81c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e81e:	463a      	mov	r2, r7
 800e820:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e824:	ec43 2b17 	vmov	d7, r2, r3
 800e828:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e82c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e830:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e834:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e838:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e83c:	b01b      	add	sp, #108	; 0x6c
 800e83e:	ecbd 8b0a 	vpop	{d8-d12}
 800e842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e846:	f7ff bd06 	b.w	800e256 <__math_check_uflow>
 800e84a:	ec4b ab10 	vmov	d0, sl, fp
 800e84e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e852:	e5a3      	b.n	800e39c <pow+0x9c>
 800e854:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e870 <pow+0x570>
 800e858:	e5a0      	b.n	800e39c <pow+0x9c>
 800e85a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e85e:	e59d      	b.n	800e39c <pow+0x9c>
 800e860:	00000000 	.word	0x00000000
 800e864:	7f000000 	.word	0x7f000000
 800e868:	00000000 	.word	0x00000000
 800e86c:	00100000 	.word	0x00100000
	...
 800e878:	0802a9f0 	.word	0x0802a9f0
 800e87c:	c0f00000 	.word	0xc0f00000
 800e880:	3fe00000 	.word	0x3fe00000
 800e884:	00000000 	.word	0x00000000

0800e888 <ceil>:
 800e888:	ee10 1a90 	vmov	r1, s1
 800e88c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e890:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e894:	2b13      	cmp	r3, #19
 800e896:	b530      	push	{r4, r5, lr}
 800e898:	ee10 0a10 	vmov	r0, s0
 800e89c:	ee10 5a10 	vmov	r5, s0
 800e8a0:	dc2f      	bgt.n	800e902 <ceil+0x7a>
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	da13      	bge.n	800e8ce <ceil+0x46>
 800e8a6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e968 <ceil+0xe0>
 800e8aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	dd05      	ble.n	800e8c4 <ceil+0x3c>
 800e8b8:	2900      	cmp	r1, #0
 800e8ba:	db4c      	blt.n	800e956 <ceil+0xce>
 800e8bc:	4301      	orrs	r1, r0
 800e8be:	d04e      	beq.n	800e95e <ceil+0xd6>
 800e8c0:	492b      	ldr	r1, [pc, #172]	; (800e970 <ceil+0xe8>)
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	ec43 2b10 	vmov	d0, r2, r3
 800e8cc:	e020      	b.n	800e910 <ceil+0x88>
 800e8ce:	4a29      	ldr	r2, [pc, #164]	; (800e974 <ceil+0xec>)
 800e8d0:	411a      	asrs	r2, r3
 800e8d2:	ea01 0402 	and.w	r4, r1, r2
 800e8d6:	4304      	orrs	r4, r0
 800e8d8:	d01a      	beq.n	800e910 <ceil+0x88>
 800e8da:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800e968 <ceil+0xe0>
 800e8de:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8e2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ea:	ddeb      	ble.n	800e8c4 <ceil+0x3c>
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	bfc2      	ittt	gt
 800e8f0:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800e8f4:	fa40 f303 	asrgt.w	r3, r0, r3
 800e8f8:	18c9      	addgt	r1, r1, r3
 800e8fa:	ea21 0102 	bic.w	r1, r1, r2
 800e8fe:	2000      	movs	r0, #0
 800e900:	e7e0      	b.n	800e8c4 <ceil+0x3c>
 800e902:	2b33      	cmp	r3, #51	; 0x33
 800e904:	dd05      	ble.n	800e912 <ceil+0x8a>
 800e906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e90a:	d101      	bne.n	800e910 <ceil+0x88>
 800e90c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e910:	bd30      	pop	{r4, r5, pc}
 800e912:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e916:	f04f 32ff 	mov.w	r2, #4294967295
 800e91a:	40e2      	lsrs	r2, r4
 800e91c:	4202      	tst	r2, r0
 800e91e:	d0f7      	beq.n	800e910 <ceil+0x88>
 800e920:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800e968 <ceil+0xe0>
 800e924:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e928:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e930:	ddc8      	ble.n	800e8c4 <ceil+0x3c>
 800e932:	2900      	cmp	r1, #0
 800e934:	dd02      	ble.n	800e93c <ceil+0xb4>
 800e936:	2b14      	cmp	r3, #20
 800e938:	d103      	bne.n	800e942 <ceil+0xba>
 800e93a:	3101      	adds	r1, #1
 800e93c:	ea20 0002 	bic.w	r0, r0, r2
 800e940:	e7c0      	b.n	800e8c4 <ceil+0x3c>
 800e942:	2401      	movs	r4, #1
 800e944:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e948:	fa04 f303 	lsl.w	r3, r4, r3
 800e94c:	4418      	add	r0, r3
 800e94e:	42a8      	cmp	r0, r5
 800e950:	bf38      	it	cc
 800e952:	1909      	addcc	r1, r1, r4
 800e954:	e7f2      	b.n	800e93c <ceil+0xb4>
 800e956:	2000      	movs	r0, #0
 800e958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e95c:	e7b2      	b.n	800e8c4 <ceil+0x3c>
 800e95e:	4608      	mov	r0, r1
 800e960:	e7b0      	b.n	800e8c4 <ceil+0x3c>
 800e962:	bf00      	nop
 800e964:	f3af 8000 	nop.w
 800e968:	8800759c 	.word	0x8800759c
 800e96c:	7e37e43c 	.word	0x7e37e43c
 800e970:	3ff00000 	.word	0x3ff00000
 800e974:	000fffff 	.word	0x000fffff

0800e978 <cos>:
 800e978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e97a:	eeb0 7b40 	vmov.f64	d7, d0
 800e97e:	ee17 3a90 	vmov	r3, s15
 800e982:	4a1f      	ldr	r2, [pc, #124]	; (800ea00 <cos+0x88>)
 800e984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e988:	4293      	cmp	r3, r2
 800e98a:	dc04      	bgt.n	800e996 <cos+0x1e>
 800e98c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e9f8 <cos+0x80>
 800e990:	f000 fa0a 	bl	800eda8 <__kernel_cos>
 800e994:	e004      	b.n	800e9a0 <cos+0x28>
 800e996:	4a1b      	ldr	r2, [pc, #108]	; (800ea04 <cos+0x8c>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	dd04      	ble.n	800e9a6 <cos+0x2e>
 800e99c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e9a0:	b005      	add	sp, #20
 800e9a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9a6:	4668      	mov	r0, sp
 800e9a8:	f000 f8ba 	bl	800eb20 <__ieee754_rem_pio2>
 800e9ac:	f000 0003 	and.w	r0, r0, #3
 800e9b0:	2801      	cmp	r0, #1
 800e9b2:	d007      	beq.n	800e9c4 <cos+0x4c>
 800e9b4:	2802      	cmp	r0, #2
 800e9b6:	d00e      	beq.n	800e9d6 <cos+0x5e>
 800e9b8:	b9a0      	cbnz	r0, 800e9e4 <cos+0x6c>
 800e9ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9be:	ed9d 0b00 	vldr	d0, [sp]
 800e9c2:	e7e5      	b.n	800e990 <cos+0x18>
 800e9c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9c8:	ed9d 0b00 	vldr	d0, [sp]
 800e9cc:	f000 fcd8 	bl	800f380 <__kernel_sin>
 800e9d0:	eeb1 0b40 	vneg.f64	d0, d0
 800e9d4:	e7e4      	b.n	800e9a0 <cos+0x28>
 800e9d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9da:	ed9d 0b00 	vldr	d0, [sp]
 800e9de:	f000 f9e3 	bl	800eda8 <__kernel_cos>
 800e9e2:	e7f5      	b.n	800e9d0 <cos+0x58>
 800e9e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9e8:	ed9d 0b00 	vldr	d0, [sp]
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	f000 fcc7 	bl	800f380 <__kernel_sin>
 800e9f2:	e7d5      	b.n	800e9a0 <cos+0x28>
 800e9f4:	f3af 8000 	nop.w
	...
 800ea00:	3fe921fb 	.word	0x3fe921fb
 800ea04:	7fefffff 	.word	0x7fefffff

0800ea08 <logf>:
 800ea08:	ee10 3a10 	vmov	r3, s0
 800ea0c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ea10:	b410      	push	{r4}
 800ea12:	d055      	beq.n	800eac0 <logf+0xb8>
 800ea14:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800ea18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800ea1c:	d31a      	bcc.n	800ea54 <logf+0x4c>
 800ea1e:	005a      	lsls	r2, r3, #1
 800ea20:	d104      	bne.n	800ea2c <logf+0x24>
 800ea22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea26:	2001      	movs	r0, #1
 800ea28:	f000 bd0e 	b.w	800f448 <__math_divzerof>
 800ea2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ea30:	d043      	beq.n	800eaba <logf+0xb2>
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	db02      	blt.n	800ea3c <logf+0x34>
 800ea36:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ea3a:	d303      	bcc.n	800ea44 <logf+0x3c>
 800ea3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea40:	f000 bd12 	b.w	800f468 <__math_invalidf>
 800ea44:	eddf 7a20 	vldr	s15, [pc, #128]	; 800eac8 <logf+0xc0>
 800ea48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea4c:	ee10 3a10 	vmov	r3, s0
 800ea50:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800ea54:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800ea58:	491c      	ldr	r1, [pc, #112]	; (800eacc <logf+0xc4>)
 800ea5a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800ea5e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800ea62:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800ea66:	0dd4      	lsrs	r4, r2, #23
 800ea68:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800ea6c:	05e4      	lsls	r4, r4, #23
 800ea6e:	ed90 6b00 	vldr	d6, [r0]
 800ea72:	1b1b      	subs	r3, r3, r4
 800ea74:	ee07 3a90 	vmov	s15, r3
 800ea78:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800ea7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ea80:	15d2      	asrs	r2, r2, #23
 800ea82:	eea6 0b07 	vfma.f64	d0, d6, d7
 800ea86:	ed90 6b02 	vldr	d6, [r0, #8]
 800ea8a:	ee07 2a90 	vmov	s15, r2
 800ea8e:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800ea92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea96:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ea9a:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800ea9e:	ee20 5b00 	vmul.f64	d5, d0, d0
 800eaa2:	eea4 7b00 	vfma.f64	d7, d4, d0
 800eaa6:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800eaaa:	ee30 0b06 	vadd.f64	d0, d0, d6
 800eaae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800eab2:	eea5 0b07 	vfma.f64	d0, d5, d7
 800eab6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eaba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ead0 <logf+0xc8>
 800eac4:	e7f9      	b.n	800eaba <logf+0xb2>
 800eac6:	bf00      	nop
 800eac8:	4b000000 	.word	0x4b000000
 800eacc:	0802a748 	.word	0x0802a748
 800ead0:	00000000 	.word	0x00000000

0800ead4 <sqrtf>:
 800ead4:	b508      	push	{r3, lr}
 800ead6:	ed2d 8b02 	vpush	{d8}
 800eada:	eeb0 8a40 	vmov.f32	s16, s0
 800eade:	f000 f95f 	bl	800eda0 <__ieee754_sqrtf>
 800eae2:	4b0d      	ldr	r3, [pc, #52]	; (800eb18 <sqrtf+0x44>)
 800eae4:	f993 3000 	ldrsb.w	r3, [r3]
 800eae8:	3301      	adds	r3, #1
 800eaea:	d011      	beq.n	800eb10 <sqrtf+0x3c>
 800eaec:	eeb4 8a48 	vcmp.f32	s16, s16
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	d60c      	bvs.n	800eb10 <sqrtf+0x3c>
 800eaf6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800eb1c <sqrtf+0x48>
 800eafa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb02:	d505      	bpl.n	800eb10 <sqrtf+0x3c>
 800eb04:	f000 fdde 	bl	800f6c4 <__errno>
 800eb08:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eb0c:	2321      	movs	r3, #33	; 0x21
 800eb0e:	6003      	str	r3, [r0, #0]
 800eb10:	ecbd 8b02 	vpop	{d8}
 800eb14:	bd08      	pop	{r3, pc}
 800eb16:	bf00      	nop
 800eb18:	20000018 	.word	0x20000018
 800eb1c:	00000000 	.word	0x00000000

0800eb20 <__ieee754_rem_pio2>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	eeb0 7b40 	vmov.f64	d7, d0
 800eb26:	ee17 5a90 	vmov	r5, s15
 800eb2a:	4b97      	ldr	r3, [pc, #604]	; (800ed88 <__ieee754_rem_pio2+0x268>)
 800eb2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eb30:	429e      	cmp	r6, r3
 800eb32:	b088      	sub	sp, #32
 800eb34:	4604      	mov	r4, r0
 800eb36:	dc07      	bgt.n	800eb48 <__ieee754_rem_pio2+0x28>
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	ed84 0b00 	vstr	d0, [r4]
 800eb40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb44:	2000      	movs	r0, #0
 800eb46:	e01b      	b.n	800eb80 <__ieee754_rem_pio2+0x60>
 800eb48:	4b90      	ldr	r3, [pc, #576]	; (800ed8c <__ieee754_rem_pio2+0x26c>)
 800eb4a:	429e      	cmp	r6, r3
 800eb4c:	dc3b      	bgt.n	800ebc6 <__ieee754_rem_pio2+0xa6>
 800eb4e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800eb52:	2d00      	cmp	r5, #0
 800eb54:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ed48 <__ieee754_rem_pio2+0x228>
 800eb58:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800eb5c:	dd19      	ble.n	800eb92 <__ieee754_rem_pio2+0x72>
 800eb5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800eb62:	429e      	cmp	r6, r3
 800eb64:	d00e      	beq.n	800eb84 <__ieee754_rem_pio2+0x64>
 800eb66:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ed50 <__ieee754_rem_pio2+0x230>
 800eb6a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800eb6e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb72:	ed84 5b00 	vstr	d5, [r4]
 800eb76:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb7a:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb7e:	2001      	movs	r0, #1
 800eb80:	b008      	add	sp, #32
 800eb82:	bd70      	pop	{r4, r5, r6, pc}
 800eb84:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ed58 <__ieee754_rem_pio2+0x238>
 800eb88:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb8c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ed60 <__ieee754_rem_pio2+0x240>
 800eb90:	e7eb      	b.n	800eb6a <__ieee754_rem_pio2+0x4a>
 800eb92:	429e      	cmp	r6, r3
 800eb94:	ee30 7b06 	vadd.f64	d7, d0, d6
 800eb98:	d00e      	beq.n	800ebb8 <__ieee754_rem_pio2+0x98>
 800eb9a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800ed50 <__ieee754_rem_pio2+0x230>
 800eb9e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800eba2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eba6:	ed84 5b00 	vstr	d5, [r4]
 800ebaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ebae:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ebb6:	e7e3      	b.n	800eb80 <__ieee754_rem_pio2+0x60>
 800ebb8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ed58 <__ieee754_rem_pio2+0x238>
 800ebbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ebc0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ed60 <__ieee754_rem_pio2+0x240>
 800ebc4:	e7eb      	b.n	800eb9e <__ieee754_rem_pio2+0x7e>
 800ebc6:	4b72      	ldr	r3, [pc, #456]	; (800ed90 <__ieee754_rem_pio2+0x270>)
 800ebc8:	429e      	cmp	r6, r3
 800ebca:	dc6e      	bgt.n	800ecaa <__ieee754_rem_pio2+0x18a>
 800ebcc:	f000 fc5b 	bl	800f486 <fabs>
 800ebd0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ebd4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800ed68 <__ieee754_rem_pio2+0x248>
 800ebd8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ebdc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ebe0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ebe4:	ee17 0a90 	vmov	r0, s15
 800ebe8:	eeb1 4b45 	vneg.f64	d4, d5
 800ebec:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ed48 <__ieee754_rem_pio2+0x228>
 800ebf0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ebf4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ed50 <__ieee754_rem_pio2+0x230>
 800ebf8:	281f      	cmp	r0, #31
 800ebfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ebfe:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ec02:	dc08      	bgt.n	800ec16 <__ieee754_rem_pio2+0xf6>
 800ec04:	4b63      	ldr	r3, [pc, #396]	; (800ed94 <__ieee754_rem_pio2+0x274>)
 800ec06:	1e42      	subs	r2, r0, #1
 800ec08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec0c:	42b3      	cmp	r3, r6
 800ec0e:	d002      	beq.n	800ec16 <__ieee754_rem_pio2+0xf6>
 800ec10:	ed84 6b00 	vstr	d6, [r4]
 800ec14:	e024      	b.n	800ec60 <__ieee754_rem_pio2+0x140>
 800ec16:	ee16 3a90 	vmov	r3, s13
 800ec1a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec1e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ec22:	2b10      	cmp	r3, #16
 800ec24:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ec28:	ddf2      	ble.n	800ec10 <__ieee754_rem_pio2+0xf0>
 800ec2a:	eeb0 6b40 	vmov.f64	d6, d0
 800ec2e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800ed58 <__ieee754_rem_pio2+0x238>
 800ec32:	eea4 6b03 	vfma.f64	d6, d4, d3
 800ec36:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ec3a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ec3e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800ed60 <__ieee754_rem_pio2+0x240>
 800ec42:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ec46:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ec4a:	ee13 3a90 	vmov	r3, s7
 800ec4e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	2b31      	cmp	r3, #49	; 0x31
 800ec56:	dc17      	bgt.n	800ec88 <__ieee754_rem_pio2+0x168>
 800ec58:	eeb0 0b46 	vmov.f64	d0, d6
 800ec5c:	ed84 3b00 	vstr	d3, [r4]
 800ec60:	ed94 6b00 	vldr	d6, [r4]
 800ec64:	2d00      	cmp	r5, #0
 800ec66:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ec6a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ec6e:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec72:	da85      	bge.n	800eb80 <__ieee754_rem_pio2+0x60>
 800ec74:	eeb1 6b46 	vneg.f64	d6, d6
 800ec78:	ed84 6b00 	vstr	d6, [r4]
 800ec7c:	eeb1 7b47 	vneg.f64	d7, d7
 800ec80:	4240      	negs	r0, r0
 800ec82:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec86:	e77b      	b.n	800eb80 <__ieee754_rem_pio2+0x60>
 800ec88:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800ed70 <__ieee754_rem_pio2+0x250>
 800ec8c:	eeb0 0b46 	vmov.f64	d0, d6
 800ec90:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ec94:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ec98:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800ed78 <__ieee754_rem_pio2+0x258>
 800ec9c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800eca0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800eca4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800eca8:	e7b2      	b.n	800ec10 <__ieee754_rem_pio2+0xf0>
 800ecaa:	4b3b      	ldr	r3, [pc, #236]	; (800ed98 <__ieee754_rem_pio2+0x278>)
 800ecac:	429e      	cmp	r6, r3
 800ecae:	dd06      	ble.n	800ecbe <__ieee754_rem_pio2+0x19e>
 800ecb0:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ecb4:	ed80 7b02 	vstr	d7, [r0, #8]
 800ecb8:	ed80 7b00 	vstr	d7, [r0]
 800ecbc:	e742      	b.n	800eb44 <__ieee754_rem_pio2+0x24>
 800ecbe:	1532      	asrs	r2, r6, #20
 800ecc0:	ee10 0a10 	vmov	r0, s0
 800ecc4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ecc8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800eccc:	ec41 0b17 	vmov	d7, r0, r1
 800ecd0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ecd4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800ed80 <__ieee754_rem_pio2+0x260>
 800ecd8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ecdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ece0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ece4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ece8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ecec:	a902      	add	r1, sp, #8
 800ecee:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ecf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ecf6:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ecfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ecfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed02:	2603      	movs	r6, #3
 800ed04:	4608      	mov	r0, r1
 800ed06:	ed91 7b04 	vldr	d7, [r1, #16]
 800ed0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed12:	4633      	mov	r3, r6
 800ed14:	f1a1 0108 	sub.w	r1, r1, #8
 800ed18:	f106 36ff 	add.w	r6, r6, #4294967295
 800ed1c:	d0f3      	beq.n	800ed06 <__ieee754_rem_pio2+0x1e6>
 800ed1e:	491f      	ldr	r1, [pc, #124]	; (800ed9c <__ieee754_rem_pio2+0x27c>)
 800ed20:	9101      	str	r1, [sp, #4]
 800ed22:	2102      	movs	r1, #2
 800ed24:	9100      	str	r1, [sp, #0]
 800ed26:	4621      	mov	r1, r4
 800ed28:	f000 f8aa 	bl	800ee80 <__kernel_rem_pio2>
 800ed2c:	2d00      	cmp	r5, #0
 800ed2e:	f6bf af27 	bge.w	800eb80 <__ieee754_rem_pio2+0x60>
 800ed32:	ed94 7b00 	vldr	d7, [r4]
 800ed36:	eeb1 7b47 	vneg.f64	d7, d7
 800ed3a:	ed84 7b00 	vstr	d7, [r4]
 800ed3e:	ed94 7b02 	vldr	d7, [r4, #8]
 800ed42:	e79b      	b.n	800ec7c <__ieee754_rem_pio2+0x15c>
 800ed44:	f3af 8000 	nop.w
 800ed48:	54400000 	.word	0x54400000
 800ed4c:	3ff921fb 	.word	0x3ff921fb
 800ed50:	1a626331 	.word	0x1a626331
 800ed54:	3dd0b461 	.word	0x3dd0b461
 800ed58:	1a600000 	.word	0x1a600000
 800ed5c:	3dd0b461 	.word	0x3dd0b461
 800ed60:	2e037073 	.word	0x2e037073
 800ed64:	3ba3198a 	.word	0x3ba3198a
 800ed68:	6dc9c883 	.word	0x6dc9c883
 800ed6c:	3fe45f30 	.word	0x3fe45f30
 800ed70:	2e000000 	.word	0x2e000000
 800ed74:	3ba3198a 	.word	0x3ba3198a
 800ed78:	252049c1 	.word	0x252049c1
 800ed7c:	397b839a 	.word	0x397b839a
 800ed80:	00000000 	.word	0x00000000
 800ed84:	41700000 	.word	0x41700000
 800ed88:	3fe921fb 	.word	0x3fe921fb
 800ed8c:	4002d97b 	.word	0x4002d97b
 800ed90:	413921fb 	.word	0x413921fb
 800ed94:	0802a868 	.word	0x0802a868
 800ed98:	7fefffff 	.word	0x7fefffff
 800ed9c:	0802a8e8 	.word	0x0802a8e8

0800eda0 <__ieee754_sqrtf>:
 800eda0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eda4:	4770      	bx	lr
	...

0800eda8 <__kernel_cos>:
 800eda8:	ee10 1a90 	vmov	r1, s1
 800edac:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800edb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800edb4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800edb8:	da05      	bge.n	800edc6 <__kernel_cos+0x1e>
 800edba:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800edbe:	ee17 3a90 	vmov	r3, s15
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d03d      	beq.n	800ee42 <__kernel_cos+0x9a>
 800edc6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800edca:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ee48 <__kernel_cos+0xa0>
 800edce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee50 <__kernel_cos+0xa8>
 800edd2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800edd6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee58 <__kernel_cos+0xb0>
 800edda:	eea6 7b03 	vfma.f64	d7, d6, d3
 800edde:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee60 <__kernel_cos+0xb8>
 800ede2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ede6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee68 <__kernel_cos+0xc0>
 800edea:	4b23      	ldr	r3, [pc, #140]	; (800ee78 <__kernel_cos+0xd0>)
 800edec:	eea6 7b03 	vfma.f64	d7, d6, d3
 800edf0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ee70 <__kernel_cos+0xc8>
 800edf4:	4299      	cmp	r1, r3
 800edf6:	eea7 6b03 	vfma.f64	d6, d7, d3
 800edfa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800edfe:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ee02:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ee06:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ee0a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ee0e:	dc04      	bgt.n	800ee1a <__kernel_cos+0x72>
 800ee10:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ee14:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ee18:	4770      	bx	lr
 800ee1a:	4b18      	ldr	r3, [pc, #96]	; (800ee7c <__kernel_cos+0xd4>)
 800ee1c:	4299      	cmp	r1, r3
 800ee1e:	dc0d      	bgt.n	800ee3c <__kernel_cos+0x94>
 800ee20:	2200      	movs	r2, #0
 800ee22:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ee26:	ec43 2b15 	vmov	d5, r2, r3
 800ee2a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ee2e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ee32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee36:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ee3a:	4770      	bx	lr
 800ee3c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ee40:	e7f3      	b.n	800ee2a <__kernel_cos+0x82>
 800ee42:	eeb0 0b44 	vmov.f64	d0, d4
 800ee46:	4770      	bx	lr
 800ee48:	be8838d4 	.word	0xbe8838d4
 800ee4c:	bda8fae9 	.word	0xbda8fae9
 800ee50:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee54:	3e21ee9e 	.word	0x3e21ee9e
 800ee58:	809c52ad 	.word	0x809c52ad
 800ee5c:	be927e4f 	.word	0xbe927e4f
 800ee60:	19cb1590 	.word	0x19cb1590
 800ee64:	3efa01a0 	.word	0x3efa01a0
 800ee68:	16c15177 	.word	0x16c15177
 800ee6c:	bf56c16c 	.word	0xbf56c16c
 800ee70:	5555554c 	.word	0x5555554c
 800ee74:	3fa55555 	.word	0x3fa55555
 800ee78:	3fd33332 	.word	0x3fd33332
 800ee7c:	3fe90000 	.word	0x3fe90000

0800ee80 <__kernel_rem_pio2>:
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	ed2d 8b06 	vpush	{d8-d10}
 800ee88:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800ee8c:	469b      	mov	fp, r3
 800ee8e:	460f      	mov	r7, r1
 800ee90:	4bcf      	ldr	r3, [pc, #828]	; (800f1d0 <__kernel_rem_pio2+0x350>)
 800ee92:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800ee94:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800ee98:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ee9c:	9000      	str	r0, [sp, #0]
 800ee9e:	f112 0f14 	cmn.w	r2, #20
 800eea2:	bfa8      	it	ge
 800eea4:	2318      	movge	r3, #24
 800eea6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800eeaa:	bfb8      	it	lt
 800eeac:	2300      	movlt	r3, #0
 800eeae:	f06f 0417 	mvn.w	r4, #23
 800eeb2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800f1b8 <__kernel_rem_pio2+0x338>
 800eeb6:	bfa4      	itt	ge
 800eeb8:	f1a2 0a03 	subge.w	sl, r2, #3
 800eebc:	fb9a f3f3 	sdivge	r3, sl, r3
 800eec0:	fb03 4404 	mla	r4, r3, r4, r4
 800eec4:	1a5d      	subs	r5, r3, r1
 800eec6:	4414      	add	r4, r2
 800eec8:	eb09 0601 	add.w	r6, r9, r1
 800eecc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800eed0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800eed4:	2200      	movs	r2, #0
 800eed6:	42b2      	cmp	r2, r6
 800eed8:	dd12      	ble.n	800ef00 <__kernel_rem_pio2+0x80>
 800eeda:	aa18      	add	r2, sp, #96	; 0x60
 800eedc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800eee0:	460e      	mov	r6, r1
 800eee2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800eee6:	f1cb 0a01 	rsb	sl, fp, #1
 800eeea:	eb0a 0006 	add.w	r0, sl, r6
 800eeee:	4581      	cmp	r9, r0
 800eef0:	db25      	blt.n	800ef3e <__kernel_rem_pio2+0xbe>
 800eef2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800f1b8 <__kernel_rem_pio2+0x338>
 800eef6:	f8dd e000 	ldr.w	lr, [sp]
 800eefa:	4615      	mov	r5, r2
 800eefc:	2000      	movs	r0, #0
 800eefe:	e015      	b.n	800ef2c <__kernel_rem_pio2+0xac>
 800ef00:	42d5      	cmn	r5, r2
 800ef02:	d409      	bmi.n	800ef18 <__kernel_rem_pio2+0x98>
 800ef04:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ef08:	ee07 0a90 	vmov	s15, r0
 800ef0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef10:	eca8 7b02 	vstmia	r8!, {d7}
 800ef14:	3201      	adds	r2, #1
 800ef16:	e7de      	b.n	800eed6 <__kernel_rem_pio2+0x56>
 800ef18:	eeb0 7b46 	vmov.f64	d7, d6
 800ef1c:	e7f8      	b.n	800ef10 <__kernel_rem_pio2+0x90>
 800ef1e:	ecbe 5b02 	vldmia	lr!, {d5}
 800ef22:	ed95 6b00 	vldr	d6, [r5]
 800ef26:	3001      	adds	r0, #1
 800ef28:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ef2c:	4288      	cmp	r0, r1
 800ef2e:	f1a5 0508 	sub.w	r5, r5, #8
 800ef32:	ddf4      	ble.n	800ef1e <__kernel_rem_pio2+0x9e>
 800ef34:	eca8 7b02 	vstmia	r8!, {d7}
 800ef38:	3208      	adds	r2, #8
 800ef3a:	3601      	adds	r6, #1
 800ef3c:	e7d5      	b.n	800eeea <__kernel_rem_pio2+0x6a>
 800ef3e:	aa04      	add	r2, sp, #16
 800ef40:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800f1c0 <__kernel_rem_pio2+0x340>
 800ef44:	ed9f aba0 	vldr	d10, [pc, #640]	; 800f1c8 <__kernel_rem_pio2+0x348>
 800ef48:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ef4c:	9201      	str	r2, [sp, #4]
 800ef4e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ef52:	464e      	mov	r6, r9
 800ef54:	ab90      	add	r3, sp, #576	; 0x240
 800ef56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ef5a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ef5e:	ab04      	add	r3, sp, #16
 800ef60:	4618      	mov	r0, r3
 800ef62:	4632      	mov	r2, r6
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	dc4e      	bgt.n	800f006 <__kernel_rem_pio2+0x186>
 800ef68:	4620      	mov	r0, r4
 800ef6a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800ef6e:	f000 fb07 	bl	800f580 <scalbn>
 800ef72:	eeb0 8b40 	vmov.f64	d8, d0
 800ef76:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ef7a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ef7e:	f000 fa8b 	bl	800f498 <floor>
 800ef82:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ef86:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ef8a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ef8e:	2c00      	cmp	r4, #0
 800ef90:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800ef94:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800ef98:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ef9c:	ee17 8a90 	vmov	r8, s15
 800efa0:	dd46      	ble.n	800f030 <__kernel_rem_pio2+0x1b0>
 800efa2:	1e70      	subs	r0, r6, #1
 800efa4:	aa04      	add	r2, sp, #16
 800efa6:	f1c4 0c18 	rsb	ip, r4, #24
 800efaa:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800efae:	fa45 f20c 	asr.w	r2, r5, ip
 800efb2:	4490      	add	r8, r2
 800efb4:	fa02 f20c 	lsl.w	r2, r2, ip
 800efb8:	1aad      	subs	r5, r5, r2
 800efba:	aa04      	add	r2, sp, #16
 800efbc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800efc0:	f1c4 0217 	rsb	r2, r4, #23
 800efc4:	4115      	asrs	r5, r2
 800efc6:	2d00      	cmp	r5, #0
 800efc8:	dd41      	ble.n	800f04e <__kernel_rem_pio2+0x1ce>
 800efca:	f04f 0c00 	mov.w	ip, #0
 800efce:	f108 0801 	add.w	r8, r8, #1
 800efd2:	4660      	mov	r0, ip
 800efd4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800efd8:	4566      	cmp	r6, ip
 800efda:	dc69      	bgt.n	800f0b0 <__kernel_rem_pio2+0x230>
 800efdc:	2c00      	cmp	r4, #0
 800efde:	dd03      	ble.n	800efe8 <__kernel_rem_pio2+0x168>
 800efe0:	2c01      	cmp	r4, #1
 800efe2:	d076      	beq.n	800f0d2 <__kernel_rem_pio2+0x252>
 800efe4:	2c02      	cmp	r4, #2
 800efe6:	d07f      	beq.n	800f0e8 <__kernel_rem_pio2+0x268>
 800efe8:	2d02      	cmp	r5, #2
 800efea:	d130      	bne.n	800f04e <__kernel_rem_pio2+0x1ce>
 800efec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eff0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eff4:	b358      	cbz	r0, 800f04e <__kernel_rem_pio2+0x1ce>
 800eff6:	4620      	mov	r0, r4
 800eff8:	9102      	str	r1, [sp, #8]
 800effa:	f000 fac1 	bl	800f580 <scalbn>
 800effe:	9902      	ldr	r1, [sp, #8]
 800f000:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f004:	e023      	b.n	800f04e <__kernel_rem_pio2+0x1ce>
 800f006:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f00a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f00e:	3a01      	subs	r2, #1
 800f010:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f014:	ad68      	add	r5, sp, #416	; 0x1a0
 800f016:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f01a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f01e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f022:	eca0 0a01 	vstmia	r0!, {s0}
 800f026:	ed95 0b00 	vldr	d0, [r5]
 800f02a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f02e:	e799      	b.n	800ef64 <__kernel_rem_pio2+0xe4>
 800f030:	d105      	bne.n	800f03e <__kernel_rem_pio2+0x1be>
 800f032:	1e72      	subs	r2, r6, #1
 800f034:	a804      	add	r0, sp, #16
 800f036:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800f03a:	15ed      	asrs	r5, r5, #23
 800f03c:	e7c3      	b.n	800efc6 <__kernel_rem_pio2+0x146>
 800f03e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f042:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04a:	da2f      	bge.n	800f0ac <__kernel_rem_pio2+0x22c>
 800f04c:	2500      	movs	r5, #0
 800f04e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f056:	f040 8087 	bne.w	800f168 <__kernel_rem_pio2+0x2e8>
 800f05a:	1e73      	subs	r3, r6, #1
 800f05c:	4618      	mov	r0, r3
 800f05e:	f04f 0c00 	mov.w	ip, #0
 800f062:	4548      	cmp	r0, r9
 800f064:	da47      	bge.n	800f0f6 <__kernel_rem_pio2+0x276>
 800f066:	f1bc 0f00 	cmp.w	ip, #0
 800f06a:	d070      	beq.n	800f14e <__kernel_rem_pio2+0x2ce>
 800f06c:	aa04      	add	r2, sp, #16
 800f06e:	3c18      	subs	r4, #24
 800f070:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f074:	2a00      	cmp	r2, #0
 800f076:	d075      	beq.n	800f164 <__kernel_rem_pio2+0x2e4>
 800f078:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f07c:	4620      	mov	r0, r4
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	f000 fa7e 	bl	800f580 <scalbn>
 800f084:	9b00      	ldr	r3, [sp, #0]
 800f086:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f1c0 <__kernel_rem_pio2+0x340>
 800f08a:	461a      	mov	r2, r3
 800f08c:	2a00      	cmp	r2, #0
 800f08e:	f280 80ac 	bge.w	800f1ea <__kernel_rem_pio2+0x36a>
 800f092:	4619      	mov	r1, r3
 800f094:	2000      	movs	r0, #0
 800f096:	2900      	cmp	r1, #0
 800f098:	f2c0 80cd 	blt.w	800f236 <__kernel_rem_pio2+0x3b6>
 800f09c:	aa68      	add	r2, sp, #416	; 0x1a0
 800f09e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800f0a2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800f1b8 <__kernel_rem_pio2+0x338>
 800f0a6:	4e4b      	ldr	r6, [pc, #300]	; (800f1d4 <__kernel_rem_pio2+0x354>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	e0b8      	b.n	800f21e <__kernel_rem_pio2+0x39e>
 800f0ac:	2502      	movs	r5, #2
 800f0ae:	e78c      	b.n	800efca <__kernel_rem_pio2+0x14a>
 800f0b0:	681a      	ldr	r2, [r3, #0]
 800f0b2:	b948      	cbnz	r0, 800f0c8 <__kernel_rem_pio2+0x248>
 800f0b4:	b11a      	cbz	r2, 800f0be <__kernel_rem_pio2+0x23e>
 800f0b6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f10c 0c01 	add.w	ip, ip, #1
 800f0c2:	3304      	adds	r3, #4
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	e787      	b.n	800efd8 <__kernel_rem_pio2+0x158>
 800f0c8:	ebae 0202 	sub.w	r2, lr, r2
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	e7f5      	b.n	800f0be <__kernel_rem_pio2+0x23e>
 800f0d2:	1e72      	subs	r2, r6, #1
 800f0d4:	ab04      	add	r3, sp, #16
 800f0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0de:	f10d 0c10 	add.w	ip, sp, #16
 800f0e2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800f0e6:	e77f      	b.n	800efe8 <__kernel_rem_pio2+0x168>
 800f0e8:	1e72      	subs	r2, r6, #1
 800f0ea:	ab04      	add	r3, sp, #16
 800f0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f0f4:	e7f3      	b.n	800f0de <__kernel_rem_pio2+0x25e>
 800f0f6:	aa04      	add	r2, sp, #16
 800f0f8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800f0fc:	3801      	subs	r0, #1
 800f0fe:	ea4c 0c02 	orr.w	ip, ip, r2
 800f102:	e7ae      	b.n	800f062 <__kernel_rem_pio2+0x1e2>
 800f104:	3001      	adds	r0, #1
 800f106:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	d0fa      	beq.n	800f104 <__kernel_rem_pio2+0x284>
 800f10e:	eb06 020b 	add.w	r2, r6, fp
 800f112:	ad18      	add	r5, sp, #96	; 0x60
 800f114:	1c73      	adds	r3, r6, #1
 800f116:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800f11a:	4406      	add	r6, r0
 800f11c:	429e      	cmp	r6, r3
 800f11e:	f6ff af19 	blt.w	800ef54 <__kernel_rem_pio2+0xd4>
 800f122:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800f126:	9d00      	ldr	r5, [sp, #0]
 800f128:	ee07 0a90 	vmov	s15, r0
 800f12c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f130:	2000      	movs	r0, #0
 800f132:	eca2 7b02 	vstmia	r2!, {d7}
 800f136:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f1b8 <__kernel_rem_pio2+0x338>
 800f13a:	4694      	mov	ip, r2
 800f13c:	4288      	cmp	r0, r1
 800f13e:	dd09      	ble.n	800f154 <__kernel_rem_pio2+0x2d4>
 800f140:	a868      	add	r0, sp, #416	; 0x1a0
 800f142:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800f146:	ed80 7b00 	vstr	d7, [r0]
 800f14a:	3301      	adds	r3, #1
 800f14c:	e7e6      	b.n	800f11c <__kernel_rem_pio2+0x29c>
 800f14e:	9b01      	ldr	r3, [sp, #4]
 800f150:	2001      	movs	r0, #1
 800f152:	e7d8      	b.n	800f106 <__kernel_rem_pio2+0x286>
 800f154:	ecb5 5b02 	vldmia	r5!, {d5}
 800f158:	ed3c 6b02 	vldmdb	ip!, {d6}
 800f15c:	3001      	adds	r0, #1
 800f15e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f162:	e7eb      	b.n	800f13c <__kernel_rem_pio2+0x2bc>
 800f164:	3b01      	subs	r3, #1
 800f166:	e781      	b.n	800f06c <__kernel_rem_pio2+0x1ec>
 800f168:	4260      	negs	r0, r4
 800f16a:	eeb0 0b48 	vmov.f64	d0, d8
 800f16e:	f000 fa07 	bl	800f580 <scalbn>
 800f172:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f1c8 <__kernel_rem_pio2+0x348>
 800f176:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17e:	db2b      	blt.n	800f1d8 <__kernel_rem_pio2+0x358>
 800f180:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800f1c0 <__kernel_rem_pio2+0x340>
 800f184:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f188:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f18c:	aa04      	add	r2, sp, #16
 800f18e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f192:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f196:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f19a:	a904      	add	r1, sp, #16
 800f19c:	ee10 3a10 	vmov	r3, s0
 800f1a0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f1a4:	ee17 2a10 	vmov	r2, s14
 800f1a8:	1c73      	adds	r3, r6, #1
 800f1aa:	3418      	adds	r4, #24
 800f1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f1b0:	e762      	b.n	800f078 <__kernel_rem_pio2+0x1f8>
 800f1b2:	bf00      	nop
 800f1b4:	f3af 8000 	nop.w
	...
 800f1c4:	3e700000 	.word	0x3e700000
 800f1c8:	00000000 	.word	0x00000000
 800f1cc:	41700000 	.word	0x41700000
 800f1d0:	0802b2a0 	.word	0x0802b2a0
 800f1d4:	0802b260 	.word	0x0802b260
 800f1d8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f1dc:	aa04      	add	r2, sp, #16
 800f1de:	ee10 3a10 	vmov	r3, s0
 800f1e2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f1e6:	4633      	mov	r3, r6
 800f1e8:	e746      	b.n	800f078 <__kernel_rem_pio2+0x1f8>
 800f1ea:	a804      	add	r0, sp, #16
 800f1ec:	a968      	add	r1, sp, #416	; 0x1a0
 800f1ee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f1f2:	9000      	str	r0, [sp, #0]
 800f1f4:	ee07 0a90 	vmov	s15, r0
 800f1f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f1fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f200:	3a01      	subs	r2, #1
 800f202:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f206:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f20a:	ed81 7b00 	vstr	d7, [r1]
 800f20e:	e73d      	b.n	800f08c <__kernel_rem_pio2+0x20c>
 800f210:	ecb6 5b02 	vldmia	r6!, {d5}
 800f214:	ecb4 6b02 	vldmia	r4!, {d6}
 800f218:	3201      	adds	r2, #1
 800f21a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f21e:	454a      	cmp	r2, r9
 800f220:	dc01      	bgt.n	800f226 <__kernel_rem_pio2+0x3a6>
 800f222:	4290      	cmp	r0, r2
 800f224:	daf4      	bge.n	800f210 <__kernel_rem_pio2+0x390>
 800f226:	aa40      	add	r2, sp, #256	; 0x100
 800f228:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f22c:	ed82 7b00 	vstr	d7, [r2]
 800f230:	3901      	subs	r1, #1
 800f232:	3001      	adds	r0, #1
 800f234:	e72f      	b.n	800f096 <__kernel_rem_pio2+0x216>
 800f236:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f238:	2a02      	cmp	r2, #2
 800f23a:	dc0a      	bgt.n	800f252 <__kernel_rem_pio2+0x3d2>
 800f23c:	2a00      	cmp	r2, #0
 800f23e:	dc5a      	bgt.n	800f2f6 <__kernel_rem_pio2+0x476>
 800f240:	d039      	beq.n	800f2b6 <__kernel_rem_pio2+0x436>
 800f242:	f008 0007 	and.w	r0, r8, #7
 800f246:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800f24a:	ecbd 8b06 	vpop	{d8-d10}
 800f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f252:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f254:	2a03      	cmp	r2, #3
 800f256:	d1f4      	bne.n	800f242 <__kernel_rem_pio2+0x3c2>
 800f258:	aa40      	add	r2, sp, #256	; 0x100
 800f25a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f25e:	4611      	mov	r1, r2
 800f260:	4618      	mov	r0, r3
 800f262:	2800      	cmp	r0, #0
 800f264:	f1a1 0108 	sub.w	r1, r1, #8
 800f268:	dc52      	bgt.n	800f310 <__kernel_rem_pio2+0x490>
 800f26a:	4619      	mov	r1, r3
 800f26c:	2901      	cmp	r1, #1
 800f26e:	f1a2 0208 	sub.w	r2, r2, #8
 800f272:	dc5d      	bgt.n	800f330 <__kernel_rem_pio2+0x4b0>
 800f274:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800f378 <__kernel_rem_pio2+0x4f8>
 800f278:	2b01      	cmp	r3, #1
 800f27a:	dc69      	bgt.n	800f350 <__kernel_rem_pio2+0x4d0>
 800f27c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800f280:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800f284:	2d00      	cmp	r5, #0
 800f286:	d16c      	bne.n	800f362 <__kernel_rem_pio2+0x4e2>
 800f288:	ed87 5b00 	vstr	d5, [r7]
 800f28c:	ed87 6b02 	vstr	d6, [r7, #8]
 800f290:	ed87 7b04 	vstr	d7, [r7, #16]
 800f294:	e7d5      	b.n	800f242 <__kernel_rem_pio2+0x3c2>
 800f296:	aa40      	add	r2, sp, #256	; 0x100
 800f298:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f29c:	ed92 6b00 	vldr	d6, [r2]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	daf5      	bge.n	800f296 <__kernel_rem_pio2+0x416>
 800f2aa:	b10d      	cbz	r5, 800f2b0 <__kernel_rem_pio2+0x430>
 800f2ac:	eeb1 7b47 	vneg.f64	d7, d7
 800f2b0:	ed87 7b00 	vstr	d7, [r7]
 800f2b4:	e7c5      	b.n	800f242 <__kernel_rem_pio2+0x3c2>
 800f2b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f378 <__kernel_rem_pio2+0x4f8>
 800f2ba:	e7f4      	b.n	800f2a6 <__kernel_rem_pio2+0x426>
 800f2bc:	a940      	add	r1, sp, #256	; 0x100
 800f2be:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f2c2:	ed91 7b00 	vldr	d7, [r1]
 800f2c6:	3a01      	subs	r2, #1
 800f2c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	daf5      	bge.n	800f2bc <__kernel_rem_pio2+0x43c>
 800f2d0:	b1ad      	cbz	r5, 800f2fe <__kernel_rem_pio2+0x47e>
 800f2d2:	eeb1 7b46 	vneg.f64	d7, d6
 800f2d6:	ed87 7b00 	vstr	d7, [r7]
 800f2da:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800f2de:	a942      	add	r1, sp, #264	; 0x108
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	da0c      	bge.n	800f304 <__kernel_rem_pio2+0x484>
 800f2ea:	b10d      	cbz	r5, 800f2f0 <__kernel_rem_pio2+0x470>
 800f2ec:	eeb1 7b47 	vneg.f64	d7, d7
 800f2f0:	ed87 7b02 	vstr	d7, [r7, #8]
 800f2f4:	e7a5      	b.n	800f242 <__kernel_rem_pio2+0x3c2>
 800f2f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800f378 <__kernel_rem_pio2+0x4f8>
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	e7e6      	b.n	800f2cc <__kernel_rem_pio2+0x44c>
 800f2fe:	eeb0 7b46 	vmov.f64	d7, d6
 800f302:	e7e8      	b.n	800f2d6 <__kernel_rem_pio2+0x456>
 800f304:	ecb1 6b02 	vldmia	r1!, {d6}
 800f308:	3201      	adds	r2, #1
 800f30a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f30e:	e7ea      	b.n	800f2e6 <__kernel_rem_pio2+0x466>
 800f310:	ed91 7b00 	vldr	d7, [r1]
 800f314:	ed91 5b02 	vldr	d5, [r1, #8]
 800f318:	3801      	subs	r0, #1
 800f31a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f31e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f322:	ed81 6b00 	vstr	d6, [r1]
 800f326:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f32a:	ed81 7b02 	vstr	d7, [r1, #8]
 800f32e:	e798      	b.n	800f262 <__kernel_rem_pio2+0x3e2>
 800f330:	ed92 7b00 	vldr	d7, [r2]
 800f334:	ed92 5b02 	vldr	d5, [r2, #8]
 800f338:	3901      	subs	r1, #1
 800f33a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f33e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f342:	ed82 6b00 	vstr	d6, [r2]
 800f346:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f34a:	ed82 7b02 	vstr	d7, [r2, #8]
 800f34e:	e78d      	b.n	800f26c <__kernel_rem_pio2+0x3ec>
 800f350:	aa40      	add	r2, sp, #256	; 0x100
 800f352:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f356:	ed92 6b00 	vldr	d6, [r2]
 800f35a:	3b01      	subs	r3, #1
 800f35c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f360:	e78a      	b.n	800f278 <__kernel_rem_pio2+0x3f8>
 800f362:	eeb1 5b45 	vneg.f64	d5, d5
 800f366:	eeb1 6b46 	vneg.f64	d6, d6
 800f36a:	ed87 5b00 	vstr	d5, [r7]
 800f36e:	eeb1 7b47 	vneg.f64	d7, d7
 800f372:	ed87 6b02 	vstr	d6, [r7, #8]
 800f376:	e78b      	b.n	800f290 <__kernel_rem_pio2+0x410>
	...

0800f380 <__kernel_sin>:
 800f380:	ee10 3a90 	vmov	r3, s1
 800f384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f388:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f38c:	da04      	bge.n	800f398 <__kernel_sin+0x18>
 800f38e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f392:	ee17 3a90 	vmov	r3, s15
 800f396:	b35b      	cbz	r3, 800f3f0 <__kernel_sin+0x70>
 800f398:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f39c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f3a0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f3f8 <__kernel_sin+0x78>
 800f3a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f400 <__kernel_sin+0x80>
 800f3a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f3ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f408 <__kernel_sin+0x88>
 800f3b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f3b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f410 <__kernel_sin+0x90>
 800f3b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f3bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f418 <__kernel_sin+0x98>
 800f3c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f3c4:	b930      	cbnz	r0, 800f3d4 <__kernel_sin+0x54>
 800f3c6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f420 <__kernel_sin+0xa0>
 800f3ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f3ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f3d2:	4770      	bx	lr
 800f3d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f3d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f3dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f3e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f3e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f428 <__kernel_sin+0xa8>
 800f3e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f3ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	f3af 8000 	nop.w
 800f3f8:	5acfd57c 	.word	0x5acfd57c
 800f3fc:	3de5d93a 	.word	0x3de5d93a
 800f400:	8a2b9ceb 	.word	0x8a2b9ceb
 800f404:	be5ae5e6 	.word	0xbe5ae5e6
 800f408:	57b1fe7d 	.word	0x57b1fe7d
 800f40c:	3ec71de3 	.word	0x3ec71de3
 800f410:	19c161d5 	.word	0x19c161d5
 800f414:	bf2a01a0 	.word	0xbf2a01a0
 800f418:	1110f8a6 	.word	0x1110f8a6
 800f41c:	3f811111 	.word	0x3f811111
 800f420:	55555549 	.word	0x55555549
 800f424:	bfc55555 	.word	0xbfc55555
 800f428:	55555549 	.word	0x55555549
 800f42c:	3fc55555 	.word	0x3fc55555

0800f430 <with_errnof>:
 800f430:	b513      	push	{r0, r1, r4, lr}
 800f432:	4604      	mov	r4, r0
 800f434:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f438:	f000 f944 	bl	800f6c4 <__errno>
 800f43c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f440:	6004      	str	r4, [r0, #0]
 800f442:	b002      	add	sp, #8
 800f444:	bd10      	pop	{r4, pc}
	...

0800f448 <__math_divzerof>:
 800f448:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f44c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f450:	2800      	cmp	r0, #0
 800f452:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800f456:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800f464 <__math_divzerof+0x1c>
 800f45a:	2022      	movs	r0, #34	; 0x22
 800f45c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f460:	f7ff bfe6 	b.w	800f430 <with_errnof>
 800f464:	00000000 	.word	0x00000000

0800f468 <__math_invalidf>:
 800f468:	eef0 7a40 	vmov.f32	s15, s0
 800f46c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f470:	eef4 7a67 	vcmp.f32	s15, s15
 800f474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f478:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f47c:	d602      	bvs.n	800f484 <__math_invalidf+0x1c>
 800f47e:	2021      	movs	r0, #33	; 0x21
 800f480:	f7ff bfd6 	b.w	800f430 <with_errnof>
 800f484:	4770      	bx	lr

0800f486 <fabs>:
 800f486:	ec51 0b10 	vmov	r0, r1, d0
 800f48a:	ee10 2a10 	vmov	r2, s0
 800f48e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f492:	ec43 2b10 	vmov	d0, r2, r3
 800f496:	4770      	bx	lr

0800f498 <floor>:
 800f498:	ee10 1a90 	vmov	r1, s1
 800f49c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f4a4:	2b13      	cmp	r3, #19
 800f4a6:	b530      	push	{r4, r5, lr}
 800f4a8:	ee10 0a10 	vmov	r0, s0
 800f4ac:	ee10 5a10 	vmov	r5, s0
 800f4b0:	dc31      	bgt.n	800f516 <floor+0x7e>
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	da15      	bge.n	800f4e2 <floor+0x4a>
 800f4b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f570 <floor+0xd8>
 800f4ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f4be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c6:	dd07      	ble.n	800f4d8 <floor+0x40>
 800f4c8:	2900      	cmp	r1, #0
 800f4ca:	da4e      	bge.n	800f56a <floor+0xd2>
 800f4cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4d0:	4318      	orrs	r0, r3
 800f4d2:	d001      	beq.n	800f4d8 <floor+0x40>
 800f4d4:	4928      	ldr	r1, [pc, #160]	; (800f578 <floor+0xe0>)
 800f4d6:	2000      	movs	r0, #0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	4602      	mov	r2, r0
 800f4dc:	ec43 2b10 	vmov	d0, r2, r3
 800f4e0:	e020      	b.n	800f524 <floor+0x8c>
 800f4e2:	4a26      	ldr	r2, [pc, #152]	; (800f57c <floor+0xe4>)
 800f4e4:	411a      	asrs	r2, r3
 800f4e6:	ea01 0402 	and.w	r4, r1, r2
 800f4ea:	4304      	orrs	r4, r0
 800f4ec:	d01a      	beq.n	800f524 <floor+0x8c>
 800f4ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f570 <floor+0xd8>
 800f4f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f4f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fe:	ddeb      	ble.n	800f4d8 <floor+0x40>
 800f500:	2900      	cmp	r1, #0
 800f502:	bfbe      	ittt	lt
 800f504:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f508:	fa40 f303 	asrlt.w	r3, r0, r3
 800f50c:	18c9      	addlt	r1, r1, r3
 800f50e:	ea21 0102 	bic.w	r1, r1, r2
 800f512:	2000      	movs	r0, #0
 800f514:	e7e0      	b.n	800f4d8 <floor+0x40>
 800f516:	2b33      	cmp	r3, #51	; 0x33
 800f518:	dd05      	ble.n	800f526 <floor+0x8e>
 800f51a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f51e:	d101      	bne.n	800f524 <floor+0x8c>
 800f520:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f524:	bd30      	pop	{r4, r5, pc}
 800f526:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f52a:	f04f 32ff 	mov.w	r2, #4294967295
 800f52e:	40e2      	lsrs	r2, r4
 800f530:	4202      	tst	r2, r0
 800f532:	d0f7      	beq.n	800f524 <floor+0x8c>
 800f534:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f570 <floor+0xd8>
 800f538:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f53c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	ddc8      	ble.n	800f4d8 <floor+0x40>
 800f546:	2900      	cmp	r1, #0
 800f548:	da02      	bge.n	800f550 <floor+0xb8>
 800f54a:	2b14      	cmp	r3, #20
 800f54c:	d103      	bne.n	800f556 <floor+0xbe>
 800f54e:	3101      	adds	r1, #1
 800f550:	ea20 0002 	bic.w	r0, r0, r2
 800f554:	e7c0      	b.n	800f4d8 <floor+0x40>
 800f556:	2401      	movs	r4, #1
 800f558:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f55c:	fa04 f303 	lsl.w	r3, r4, r3
 800f560:	4418      	add	r0, r3
 800f562:	42a8      	cmp	r0, r5
 800f564:	bf38      	it	cc
 800f566:	1909      	addcc	r1, r1, r4
 800f568:	e7f2      	b.n	800f550 <floor+0xb8>
 800f56a:	2000      	movs	r0, #0
 800f56c:	4601      	mov	r1, r0
 800f56e:	e7b3      	b.n	800f4d8 <floor+0x40>
 800f570:	8800759c 	.word	0x8800759c
 800f574:	7e37e43c 	.word	0x7e37e43c
 800f578:	bff00000 	.word	0xbff00000
 800f57c:	000fffff 	.word	0x000fffff

0800f580 <scalbn>:
 800f580:	b082      	sub	sp, #8
 800f582:	ed8d 0b00 	vstr	d0, [sp]
 800f586:	9b01      	ldr	r3, [sp, #4]
 800f588:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f58c:	b9a2      	cbnz	r2, 800f5b8 <scalbn+0x38>
 800f58e:	9a00      	ldr	r2, [sp, #0]
 800f590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f594:	4313      	orrs	r3, r2
 800f596:	d03a      	beq.n	800f60e <scalbn+0x8e>
 800f598:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f670 <scalbn+0xf0>
 800f59c:	4b40      	ldr	r3, [pc, #256]	; (800f6a0 <scalbn+0x120>)
 800f59e:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f5a2:	4298      	cmp	r0, r3
 800f5a4:	ed8d 7b00 	vstr	d7, [sp]
 800f5a8:	da11      	bge.n	800f5ce <scalbn+0x4e>
 800f5aa:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f678 <scalbn+0xf8>
 800f5ae:	ed9d 6b00 	vldr	d6, [sp]
 800f5b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5b6:	e007      	b.n	800f5c8 <scalbn+0x48>
 800f5b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5bc:	428a      	cmp	r2, r1
 800f5be:	d10a      	bne.n	800f5d6 <scalbn+0x56>
 800f5c0:	ed9d 7b00 	vldr	d7, [sp]
 800f5c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f5c8:	ed8d 7b00 	vstr	d7, [sp]
 800f5cc:	e01f      	b.n	800f60e <scalbn+0x8e>
 800f5ce:	9b01      	ldr	r3, [sp, #4]
 800f5d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f5d4:	3a36      	subs	r2, #54	; 0x36
 800f5d6:	4402      	add	r2, r0
 800f5d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f5dc:	428a      	cmp	r2, r1
 800f5de:	dd0a      	ble.n	800f5f6 <scalbn+0x76>
 800f5e0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f680 <scalbn+0x100>
 800f5e4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f688 <scalbn+0x108>
 800f5e8:	eeb0 6b47 	vmov.f64	d6, d7
 800f5ec:	9b01      	ldr	r3, [sp, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f5f4:	e7dd      	b.n	800f5b2 <scalbn+0x32>
 800f5f6:	2a00      	cmp	r2, #0
 800f5f8:	dd0d      	ble.n	800f616 <scalbn+0x96>
 800f5fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f602:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f606:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f60a:	e9cd 0100 	strd	r0, r1, [sp]
 800f60e:	ed9d 0b00 	vldr	d0, [sp]
 800f612:	b002      	add	sp, #8
 800f614:	4770      	bx	lr
 800f616:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f61a:	da18      	bge.n	800f64e <scalbn+0xce>
 800f61c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f620:	4298      	cmp	r0, r3
 800f622:	9b01      	ldr	r3, [sp, #4]
 800f624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f628:	dd09      	ble.n	800f63e <scalbn+0xbe>
 800f62a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f680 <scalbn+0x100>
 800f62e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f688 <scalbn+0x108>
 800f632:	eeb0 6b47 	vmov.f64	d6, d7
 800f636:	2b00      	cmp	r3, #0
 800f638:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f63c:	e7b9      	b.n	800f5b2 <scalbn+0x32>
 800f63e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f678 <scalbn+0xf8>
 800f642:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f690 <scalbn+0x110>
 800f646:	eeb0 6b47 	vmov.f64	d6, d7
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	e7f4      	b.n	800f638 <scalbn+0xb8>
 800f64e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f656:	3236      	adds	r2, #54	; 0x36
 800f658:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f65c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f660:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f698 <scalbn+0x118>
 800f664:	ec41 0b17 	vmov	d7, r0, r1
 800f668:	e7a3      	b.n	800f5b2 <scalbn+0x32>
 800f66a:	bf00      	nop
 800f66c:	f3af 8000 	nop.w
 800f670:	00000000 	.word	0x00000000
 800f674:	43500000 	.word	0x43500000
 800f678:	c2f8f359 	.word	0xc2f8f359
 800f67c:	01a56e1f 	.word	0x01a56e1f
 800f680:	8800759c 	.word	0x8800759c
 800f684:	7e37e43c 	.word	0x7e37e43c
 800f688:	8800759c 	.word	0x8800759c
 800f68c:	fe37e43c 	.word	0xfe37e43c
 800f690:	c2f8f359 	.word	0xc2f8f359
 800f694:	81a56e1f 	.word	0x81a56e1f
 800f698:	00000000 	.word	0x00000000
 800f69c:	3c900000 	.word	0x3c900000
 800f6a0:	ffff3cb0 	.word	0xffff3cb0

0800f6a4 <abort>:
 800f6a4:	b508      	push	{r3, lr}
 800f6a6:	2006      	movs	r0, #6
 800f6a8:	f000 f968 	bl	800f97c <raise>
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	f7f4 fb3d 	bl	8003d2c <_exit>
	...

0800f6b4 <calloc>:
 800f6b4:	4b02      	ldr	r3, [pc, #8]	; (800f6c0 <calloc+0xc>)
 800f6b6:	460a      	mov	r2, r1
 800f6b8:	4601      	mov	r1, r0
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	f000 b86c 	b.w	800f798 <_calloc_r>
 800f6c0:	2000001c 	.word	0x2000001c

0800f6c4 <__errno>:
 800f6c4:	4b01      	ldr	r3, [pc, #4]	; (800f6cc <__errno+0x8>)
 800f6c6:	6818      	ldr	r0, [r3, #0]
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	2000001c 	.word	0x2000001c

0800f6d0 <__libc_init_array>:
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	4d0d      	ldr	r5, [pc, #52]	; (800f708 <__libc_init_array+0x38>)
 800f6d4:	4c0d      	ldr	r4, [pc, #52]	; (800f70c <__libc_init_array+0x3c>)
 800f6d6:	1b64      	subs	r4, r4, r5
 800f6d8:	10a4      	asrs	r4, r4, #2
 800f6da:	2600      	movs	r6, #0
 800f6dc:	42a6      	cmp	r6, r4
 800f6de:	d109      	bne.n	800f6f4 <__libc_init_array+0x24>
 800f6e0:	4d0b      	ldr	r5, [pc, #44]	; (800f710 <__libc_init_array+0x40>)
 800f6e2:	4c0c      	ldr	r4, [pc, #48]	; (800f714 <__libc_init_array+0x44>)
 800f6e4:	f000 fcba 	bl	801005c <_init>
 800f6e8:	1b64      	subs	r4, r4, r5
 800f6ea:	10a4      	asrs	r4, r4, #2
 800f6ec:	2600      	movs	r6, #0
 800f6ee:	42a6      	cmp	r6, r4
 800f6f0:	d105      	bne.n	800f6fe <__libc_init_array+0x2e>
 800f6f2:	bd70      	pop	{r4, r5, r6, pc}
 800f6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6f8:	4798      	blx	r3
 800f6fa:	3601      	adds	r6, #1
 800f6fc:	e7ee      	b.n	800f6dc <__libc_init_array+0xc>
 800f6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f702:	4798      	blx	r3
 800f704:	3601      	adds	r6, #1
 800f706:	e7f2      	b.n	800f6ee <__libc_init_array+0x1e>
 800f708:	0802b2ec 	.word	0x0802b2ec
 800f70c:	0802b2ec 	.word	0x0802b2ec
 800f710:	0802b2ec 	.word	0x0802b2ec
 800f714:	0802b2f0 	.word	0x0802b2f0

0800f718 <malloc>:
 800f718:	4b02      	ldr	r3, [pc, #8]	; (800f724 <malloc+0xc>)
 800f71a:	4601      	mov	r1, r0
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f000 b89b 	b.w	800f858 <_malloc_r>
 800f722:	bf00      	nop
 800f724:	2000001c 	.word	0x2000001c

0800f728 <free>:
 800f728:	4b02      	ldr	r3, [pc, #8]	; (800f734 <free+0xc>)
 800f72a:	4601      	mov	r1, r0
 800f72c:	6818      	ldr	r0, [r3, #0]
 800f72e:	f000 b843 	b.w	800f7b8 <_free_r>
 800f732:	bf00      	nop
 800f734:	2000001c 	.word	0x2000001c

0800f738 <memcpy>:
 800f738:	440a      	add	r2, r1
 800f73a:	4291      	cmp	r1, r2
 800f73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f740:	d100      	bne.n	800f744 <memcpy+0xc>
 800f742:	4770      	bx	lr
 800f744:	b510      	push	{r4, lr}
 800f746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f74a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f74e:	4291      	cmp	r1, r2
 800f750:	d1f9      	bne.n	800f746 <memcpy+0xe>
 800f752:	bd10      	pop	{r4, pc}

0800f754 <memmove>:
 800f754:	4288      	cmp	r0, r1
 800f756:	b510      	push	{r4, lr}
 800f758:	eb01 0402 	add.w	r4, r1, r2
 800f75c:	d902      	bls.n	800f764 <memmove+0x10>
 800f75e:	4284      	cmp	r4, r0
 800f760:	4623      	mov	r3, r4
 800f762:	d807      	bhi.n	800f774 <memmove+0x20>
 800f764:	1e43      	subs	r3, r0, #1
 800f766:	42a1      	cmp	r1, r4
 800f768:	d008      	beq.n	800f77c <memmove+0x28>
 800f76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f772:	e7f8      	b.n	800f766 <memmove+0x12>
 800f774:	4402      	add	r2, r0
 800f776:	4601      	mov	r1, r0
 800f778:	428a      	cmp	r2, r1
 800f77a:	d100      	bne.n	800f77e <memmove+0x2a>
 800f77c:	bd10      	pop	{r4, pc}
 800f77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f786:	e7f7      	b.n	800f778 <memmove+0x24>

0800f788 <memset>:
 800f788:	4402      	add	r2, r0
 800f78a:	4603      	mov	r3, r0
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d100      	bne.n	800f792 <memset+0xa>
 800f790:	4770      	bx	lr
 800f792:	f803 1b01 	strb.w	r1, [r3], #1
 800f796:	e7f9      	b.n	800f78c <memset+0x4>

0800f798 <_calloc_r>:
 800f798:	b513      	push	{r0, r1, r4, lr}
 800f79a:	434a      	muls	r2, r1
 800f79c:	4611      	mov	r1, r2
 800f79e:	9201      	str	r2, [sp, #4]
 800f7a0:	f000 f85a 	bl	800f858 <_malloc_r>
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	b118      	cbz	r0, 800f7b0 <_calloc_r+0x18>
 800f7a8:	9a01      	ldr	r2, [sp, #4]
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	f7ff ffec 	bl	800f788 <memset>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	b002      	add	sp, #8
 800f7b4:	bd10      	pop	{r4, pc}
	...

0800f7b8 <_free_r>:
 800f7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7ba:	2900      	cmp	r1, #0
 800f7bc:	d048      	beq.n	800f850 <_free_r+0x98>
 800f7be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7c2:	9001      	str	r0, [sp, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f1a1 0404 	sub.w	r4, r1, #4
 800f7ca:	bfb8      	it	lt
 800f7cc:	18e4      	addlt	r4, r4, r3
 800f7ce:	f000 f919 	bl	800fa04 <__malloc_lock>
 800f7d2:	4a20      	ldr	r2, [pc, #128]	; (800f854 <_free_r+0x9c>)
 800f7d4:	9801      	ldr	r0, [sp, #4]
 800f7d6:	6813      	ldr	r3, [r2, #0]
 800f7d8:	4615      	mov	r5, r2
 800f7da:	b933      	cbnz	r3, 800f7ea <_free_r+0x32>
 800f7dc:	6063      	str	r3, [r4, #4]
 800f7de:	6014      	str	r4, [r2, #0]
 800f7e0:	b003      	add	sp, #12
 800f7e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7e6:	f000 b913 	b.w	800fa10 <__malloc_unlock>
 800f7ea:	42a3      	cmp	r3, r4
 800f7ec:	d90b      	bls.n	800f806 <_free_r+0x4e>
 800f7ee:	6821      	ldr	r1, [r4, #0]
 800f7f0:	1862      	adds	r2, r4, r1
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	bf04      	itt	eq
 800f7f6:	681a      	ldreq	r2, [r3, #0]
 800f7f8:	685b      	ldreq	r3, [r3, #4]
 800f7fa:	6063      	str	r3, [r4, #4]
 800f7fc:	bf04      	itt	eq
 800f7fe:	1852      	addeq	r2, r2, r1
 800f800:	6022      	streq	r2, [r4, #0]
 800f802:	602c      	str	r4, [r5, #0]
 800f804:	e7ec      	b.n	800f7e0 <_free_r+0x28>
 800f806:	461a      	mov	r2, r3
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	b10b      	cbz	r3, 800f810 <_free_r+0x58>
 800f80c:	42a3      	cmp	r3, r4
 800f80e:	d9fa      	bls.n	800f806 <_free_r+0x4e>
 800f810:	6811      	ldr	r1, [r2, #0]
 800f812:	1855      	adds	r5, r2, r1
 800f814:	42a5      	cmp	r5, r4
 800f816:	d10b      	bne.n	800f830 <_free_r+0x78>
 800f818:	6824      	ldr	r4, [r4, #0]
 800f81a:	4421      	add	r1, r4
 800f81c:	1854      	adds	r4, r2, r1
 800f81e:	42a3      	cmp	r3, r4
 800f820:	6011      	str	r1, [r2, #0]
 800f822:	d1dd      	bne.n	800f7e0 <_free_r+0x28>
 800f824:	681c      	ldr	r4, [r3, #0]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	6053      	str	r3, [r2, #4]
 800f82a:	4421      	add	r1, r4
 800f82c:	6011      	str	r1, [r2, #0]
 800f82e:	e7d7      	b.n	800f7e0 <_free_r+0x28>
 800f830:	d902      	bls.n	800f838 <_free_r+0x80>
 800f832:	230c      	movs	r3, #12
 800f834:	6003      	str	r3, [r0, #0]
 800f836:	e7d3      	b.n	800f7e0 <_free_r+0x28>
 800f838:	6825      	ldr	r5, [r4, #0]
 800f83a:	1961      	adds	r1, r4, r5
 800f83c:	428b      	cmp	r3, r1
 800f83e:	bf04      	itt	eq
 800f840:	6819      	ldreq	r1, [r3, #0]
 800f842:	685b      	ldreq	r3, [r3, #4]
 800f844:	6063      	str	r3, [r4, #4]
 800f846:	bf04      	itt	eq
 800f848:	1949      	addeq	r1, r1, r5
 800f84a:	6021      	streq	r1, [r4, #0]
 800f84c:	6054      	str	r4, [r2, #4]
 800f84e:	e7c7      	b.n	800f7e0 <_free_r+0x28>
 800f850:	b003      	add	sp, #12
 800f852:	bd30      	pop	{r4, r5, pc}
 800f854:	200003ec 	.word	0x200003ec

0800f858 <_malloc_r>:
 800f858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f85a:	1ccd      	adds	r5, r1, #3
 800f85c:	f025 0503 	bic.w	r5, r5, #3
 800f860:	3508      	adds	r5, #8
 800f862:	2d0c      	cmp	r5, #12
 800f864:	bf38      	it	cc
 800f866:	250c      	movcc	r5, #12
 800f868:	2d00      	cmp	r5, #0
 800f86a:	4606      	mov	r6, r0
 800f86c:	db01      	blt.n	800f872 <_malloc_r+0x1a>
 800f86e:	42a9      	cmp	r1, r5
 800f870:	d903      	bls.n	800f87a <_malloc_r+0x22>
 800f872:	230c      	movs	r3, #12
 800f874:	6033      	str	r3, [r6, #0]
 800f876:	2000      	movs	r0, #0
 800f878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f87a:	f000 f8c3 	bl	800fa04 <__malloc_lock>
 800f87e:	4921      	ldr	r1, [pc, #132]	; (800f904 <_malloc_r+0xac>)
 800f880:	680a      	ldr	r2, [r1, #0]
 800f882:	4614      	mov	r4, r2
 800f884:	b99c      	cbnz	r4, 800f8ae <_malloc_r+0x56>
 800f886:	4f20      	ldr	r7, [pc, #128]	; (800f908 <_malloc_r+0xb0>)
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	b923      	cbnz	r3, 800f896 <_malloc_r+0x3e>
 800f88c:	4621      	mov	r1, r4
 800f88e:	4630      	mov	r0, r6
 800f890:	f000 f83c 	bl	800f90c <_sbrk_r>
 800f894:	6038      	str	r0, [r7, #0]
 800f896:	4629      	mov	r1, r5
 800f898:	4630      	mov	r0, r6
 800f89a:	f000 f837 	bl	800f90c <_sbrk_r>
 800f89e:	1c43      	adds	r3, r0, #1
 800f8a0:	d123      	bne.n	800f8ea <_malloc_r+0x92>
 800f8a2:	230c      	movs	r3, #12
 800f8a4:	6033      	str	r3, [r6, #0]
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f000 f8b2 	bl	800fa10 <__malloc_unlock>
 800f8ac:	e7e3      	b.n	800f876 <_malloc_r+0x1e>
 800f8ae:	6823      	ldr	r3, [r4, #0]
 800f8b0:	1b5b      	subs	r3, r3, r5
 800f8b2:	d417      	bmi.n	800f8e4 <_malloc_r+0x8c>
 800f8b4:	2b0b      	cmp	r3, #11
 800f8b6:	d903      	bls.n	800f8c0 <_malloc_r+0x68>
 800f8b8:	6023      	str	r3, [r4, #0]
 800f8ba:	441c      	add	r4, r3
 800f8bc:	6025      	str	r5, [r4, #0]
 800f8be:	e004      	b.n	800f8ca <_malloc_r+0x72>
 800f8c0:	6863      	ldr	r3, [r4, #4]
 800f8c2:	42a2      	cmp	r2, r4
 800f8c4:	bf0c      	ite	eq
 800f8c6:	600b      	streq	r3, [r1, #0]
 800f8c8:	6053      	strne	r3, [r2, #4]
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f000 f8a0 	bl	800fa10 <__malloc_unlock>
 800f8d0:	f104 000b 	add.w	r0, r4, #11
 800f8d4:	1d23      	adds	r3, r4, #4
 800f8d6:	f020 0007 	bic.w	r0, r0, #7
 800f8da:	1ac2      	subs	r2, r0, r3
 800f8dc:	d0cc      	beq.n	800f878 <_malloc_r+0x20>
 800f8de:	1a1b      	subs	r3, r3, r0
 800f8e0:	50a3      	str	r3, [r4, r2]
 800f8e2:	e7c9      	b.n	800f878 <_malloc_r+0x20>
 800f8e4:	4622      	mov	r2, r4
 800f8e6:	6864      	ldr	r4, [r4, #4]
 800f8e8:	e7cc      	b.n	800f884 <_malloc_r+0x2c>
 800f8ea:	1cc4      	adds	r4, r0, #3
 800f8ec:	f024 0403 	bic.w	r4, r4, #3
 800f8f0:	42a0      	cmp	r0, r4
 800f8f2:	d0e3      	beq.n	800f8bc <_malloc_r+0x64>
 800f8f4:	1a21      	subs	r1, r4, r0
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f000 f808 	bl	800f90c <_sbrk_r>
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d1dd      	bne.n	800f8bc <_malloc_r+0x64>
 800f900:	e7cf      	b.n	800f8a2 <_malloc_r+0x4a>
 800f902:	bf00      	nop
 800f904:	200003ec 	.word	0x200003ec
 800f908:	200003f0 	.word	0x200003f0

0800f90c <_sbrk_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d06      	ldr	r5, [pc, #24]	; (800f928 <_sbrk_r+0x1c>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	602b      	str	r3, [r5, #0]
 800f918:	f7f4 fa12 	bl	8003d40 <_sbrk>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_sbrk_r+0x1a>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_sbrk_r+0x1a>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	20000490 	.word	0x20000490

0800f92c <_raise_r>:
 800f92c:	291f      	cmp	r1, #31
 800f92e:	b538      	push	{r3, r4, r5, lr}
 800f930:	4604      	mov	r4, r0
 800f932:	460d      	mov	r5, r1
 800f934:	d904      	bls.n	800f940 <_raise_r+0x14>
 800f936:	2316      	movs	r3, #22
 800f938:	6003      	str	r3, [r0, #0]
 800f93a:	f04f 30ff 	mov.w	r0, #4294967295
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f942:	b112      	cbz	r2, 800f94a <_raise_r+0x1e>
 800f944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f948:	b94b      	cbnz	r3, 800f95e <_raise_r+0x32>
 800f94a:	4620      	mov	r0, r4
 800f94c:	f000 f830 	bl	800f9b0 <_getpid_r>
 800f950:	462a      	mov	r2, r5
 800f952:	4601      	mov	r1, r0
 800f954:	4620      	mov	r0, r4
 800f956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f95a:	f000 b817 	b.w	800f98c <_kill_r>
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d00a      	beq.n	800f978 <_raise_r+0x4c>
 800f962:	1c59      	adds	r1, r3, #1
 800f964:	d103      	bne.n	800f96e <_raise_r+0x42>
 800f966:	2316      	movs	r3, #22
 800f968:	6003      	str	r3, [r0, #0]
 800f96a:	2001      	movs	r0, #1
 800f96c:	e7e7      	b.n	800f93e <_raise_r+0x12>
 800f96e:	2400      	movs	r4, #0
 800f970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f974:	4628      	mov	r0, r5
 800f976:	4798      	blx	r3
 800f978:	2000      	movs	r0, #0
 800f97a:	e7e0      	b.n	800f93e <_raise_r+0x12>

0800f97c <raise>:
 800f97c:	4b02      	ldr	r3, [pc, #8]	; (800f988 <raise+0xc>)
 800f97e:	4601      	mov	r1, r0
 800f980:	6818      	ldr	r0, [r3, #0]
 800f982:	f7ff bfd3 	b.w	800f92c <_raise_r>
 800f986:	bf00      	nop
 800f988:	2000001c 	.word	0x2000001c

0800f98c <_kill_r>:
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4d07      	ldr	r5, [pc, #28]	; (800f9ac <_kill_r+0x20>)
 800f990:	2300      	movs	r3, #0
 800f992:	4604      	mov	r4, r0
 800f994:	4608      	mov	r0, r1
 800f996:	4611      	mov	r1, r2
 800f998:	602b      	str	r3, [r5, #0]
 800f99a:	f7f4 f9b7 	bl	8003d0c <_kill>
 800f99e:	1c43      	adds	r3, r0, #1
 800f9a0:	d102      	bne.n	800f9a8 <_kill_r+0x1c>
 800f9a2:	682b      	ldr	r3, [r5, #0]
 800f9a4:	b103      	cbz	r3, 800f9a8 <_kill_r+0x1c>
 800f9a6:	6023      	str	r3, [r4, #0]
 800f9a8:	bd38      	pop	{r3, r4, r5, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20000490 	.word	0x20000490

0800f9b0 <_getpid_r>:
 800f9b0:	f7f4 b9a4 	b.w	8003cfc <_getpid>

0800f9b4 <siprintf>:
 800f9b4:	b40e      	push	{r1, r2, r3}
 800f9b6:	b500      	push	{lr}
 800f9b8:	b09c      	sub	sp, #112	; 0x70
 800f9ba:	ab1d      	add	r3, sp, #116	; 0x74
 800f9bc:	9002      	str	r0, [sp, #8]
 800f9be:	9006      	str	r0, [sp, #24]
 800f9c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9c4:	4809      	ldr	r0, [pc, #36]	; (800f9ec <siprintf+0x38>)
 800f9c6:	9107      	str	r1, [sp, #28]
 800f9c8:	9104      	str	r1, [sp, #16]
 800f9ca:	4909      	ldr	r1, [pc, #36]	; (800f9f0 <siprintf+0x3c>)
 800f9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9d0:	9105      	str	r1, [sp, #20]
 800f9d2:	6800      	ldr	r0, [r0, #0]
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	a902      	add	r1, sp, #8
 800f9d8:	f000 f87c 	bl	800fad4 <_svfiprintf_r>
 800f9dc:	9b02      	ldr	r3, [sp, #8]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	701a      	strb	r2, [r3, #0]
 800f9e2:	b01c      	add	sp, #112	; 0x70
 800f9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9e8:	b003      	add	sp, #12
 800f9ea:	4770      	bx	lr
 800f9ec:	2000001c 	.word	0x2000001c
 800f9f0:	ffff0208 	.word	0xffff0208

0800f9f4 <strcpy>:
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9fa:	f803 2b01 	strb.w	r2, [r3], #1
 800f9fe:	2a00      	cmp	r2, #0
 800fa00:	d1f9      	bne.n	800f9f6 <strcpy+0x2>
 800fa02:	4770      	bx	lr

0800fa04 <__malloc_lock>:
 800fa04:	4801      	ldr	r0, [pc, #4]	; (800fa0c <__malloc_lock+0x8>)
 800fa06:	f000 baf9 	b.w	800fffc <__retarget_lock_acquire_recursive>
 800fa0a:	bf00      	nop
 800fa0c:	20000498 	.word	0x20000498

0800fa10 <__malloc_unlock>:
 800fa10:	4801      	ldr	r0, [pc, #4]	; (800fa18 <__malloc_unlock+0x8>)
 800fa12:	f000 baf4 	b.w	800fffe <__retarget_lock_release_recursive>
 800fa16:	bf00      	nop
 800fa18:	20000498 	.word	0x20000498

0800fa1c <__ssputs_r>:
 800fa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa20:	688e      	ldr	r6, [r1, #8]
 800fa22:	429e      	cmp	r6, r3
 800fa24:	4682      	mov	sl, r0
 800fa26:	460c      	mov	r4, r1
 800fa28:	4690      	mov	r8, r2
 800fa2a:	461f      	mov	r7, r3
 800fa2c:	d838      	bhi.n	800faa0 <__ssputs_r+0x84>
 800fa2e:	898a      	ldrh	r2, [r1, #12]
 800fa30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa34:	d032      	beq.n	800fa9c <__ssputs_r+0x80>
 800fa36:	6825      	ldr	r5, [r4, #0]
 800fa38:	6909      	ldr	r1, [r1, #16]
 800fa3a:	eba5 0901 	sub.w	r9, r5, r1
 800fa3e:	6965      	ldr	r5, [r4, #20]
 800fa40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa48:	3301      	adds	r3, #1
 800fa4a:	444b      	add	r3, r9
 800fa4c:	106d      	asrs	r5, r5, #1
 800fa4e:	429d      	cmp	r5, r3
 800fa50:	bf38      	it	cc
 800fa52:	461d      	movcc	r5, r3
 800fa54:	0553      	lsls	r3, r2, #21
 800fa56:	d531      	bpl.n	800fabc <__ssputs_r+0xa0>
 800fa58:	4629      	mov	r1, r5
 800fa5a:	f7ff fefd 	bl	800f858 <_malloc_r>
 800fa5e:	4606      	mov	r6, r0
 800fa60:	b950      	cbnz	r0, 800fa78 <__ssputs_r+0x5c>
 800fa62:	230c      	movs	r3, #12
 800fa64:	f8ca 3000 	str.w	r3, [sl]
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa6e:	81a3      	strh	r3, [r4, #12]
 800fa70:	f04f 30ff 	mov.w	r0, #4294967295
 800fa74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa78:	6921      	ldr	r1, [r4, #16]
 800fa7a:	464a      	mov	r2, r9
 800fa7c:	f7ff fe5c 	bl	800f738 <memcpy>
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa8a:	81a3      	strh	r3, [r4, #12]
 800fa8c:	6126      	str	r6, [r4, #16]
 800fa8e:	6165      	str	r5, [r4, #20]
 800fa90:	444e      	add	r6, r9
 800fa92:	eba5 0509 	sub.w	r5, r5, r9
 800fa96:	6026      	str	r6, [r4, #0]
 800fa98:	60a5      	str	r5, [r4, #8]
 800fa9a:	463e      	mov	r6, r7
 800fa9c:	42be      	cmp	r6, r7
 800fa9e:	d900      	bls.n	800faa2 <__ssputs_r+0x86>
 800faa0:	463e      	mov	r6, r7
 800faa2:	4632      	mov	r2, r6
 800faa4:	6820      	ldr	r0, [r4, #0]
 800faa6:	4641      	mov	r1, r8
 800faa8:	f7ff fe54 	bl	800f754 <memmove>
 800faac:	68a3      	ldr	r3, [r4, #8]
 800faae:	6822      	ldr	r2, [r4, #0]
 800fab0:	1b9b      	subs	r3, r3, r6
 800fab2:	4432      	add	r2, r6
 800fab4:	60a3      	str	r3, [r4, #8]
 800fab6:	6022      	str	r2, [r4, #0]
 800fab8:	2000      	movs	r0, #0
 800faba:	e7db      	b.n	800fa74 <__ssputs_r+0x58>
 800fabc:	462a      	mov	r2, r5
 800fabe:	f000 fa9f 	bl	8010000 <_realloc_r>
 800fac2:	4606      	mov	r6, r0
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d1e1      	bne.n	800fa8c <__ssputs_r+0x70>
 800fac8:	6921      	ldr	r1, [r4, #16]
 800faca:	4650      	mov	r0, sl
 800facc:	f7ff fe74 	bl	800f7b8 <_free_r>
 800fad0:	e7c7      	b.n	800fa62 <__ssputs_r+0x46>
	...

0800fad4 <_svfiprintf_r>:
 800fad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad8:	4698      	mov	r8, r3
 800fada:	898b      	ldrh	r3, [r1, #12]
 800fadc:	061b      	lsls	r3, r3, #24
 800fade:	b09d      	sub	sp, #116	; 0x74
 800fae0:	4607      	mov	r7, r0
 800fae2:	460d      	mov	r5, r1
 800fae4:	4614      	mov	r4, r2
 800fae6:	d50e      	bpl.n	800fb06 <_svfiprintf_r+0x32>
 800fae8:	690b      	ldr	r3, [r1, #16]
 800faea:	b963      	cbnz	r3, 800fb06 <_svfiprintf_r+0x32>
 800faec:	2140      	movs	r1, #64	; 0x40
 800faee:	f7ff feb3 	bl	800f858 <_malloc_r>
 800faf2:	6028      	str	r0, [r5, #0]
 800faf4:	6128      	str	r0, [r5, #16]
 800faf6:	b920      	cbnz	r0, 800fb02 <_svfiprintf_r+0x2e>
 800faf8:	230c      	movs	r3, #12
 800fafa:	603b      	str	r3, [r7, #0]
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295
 800fb00:	e0d1      	b.n	800fca6 <_svfiprintf_r+0x1d2>
 800fb02:	2340      	movs	r3, #64	; 0x40
 800fb04:	616b      	str	r3, [r5, #20]
 800fb06:	2300      	movs	r3, #0
 800fb08:	9309      	str	r3, [sp, #36]	; 0x24
 800fb0a:	2320      	movs	r3, #32
 800fb0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb10:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb14:	2330      	movs	r3, #48	; 0x30
 800fb16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fcc0 <_svfiprintf_r+0x1ec>
 800fb1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb1e:	f04f 0901 	mov.w	r9, #1
 800fb22:	4623      	mov	r3, r4
 800fb24:	469a      	mov	sl, r3
 800fb26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb2a:	b10a      	cbz	r2, 800fb30 <_svfiprintf_r+0x5c>
 800fb2c:	2a25      	cmp	r2, #37	; 0x25
 800fb2e:	d1f9      	bne.n	800fb24 <_svfiprintf_r+0x50>
 800fb30:	ebba 0b04 	subs.w	fp, sl, r4
 800fb34:	d00b      	beq.n	800fb4e <_svfiprintf_r+0x7a>
 800fb36:	465b      	mov	r3, fp
 800fb38:	4622      	mov	r2, r4
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	4638      	mov	r0, r7
 800fb3e:	f7ff ff6d 	bl	800fa1c <__ssputs_r>
 800fb42:	3001      	adds	r0, #1
 800fb44:	f000 80aa 	beq.w	800fc9c <_svfiprintf_r+0x1c8>
 800fb48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb4a:	445a      	add	r2, fp
 800fb4c:	9209      	str	r2, [sp, #36]	; 0x24
 800fb4e:	f89a 3000 	ldrb.w	r3, [sl]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f000 80a2 	beq.w	800fc9c <_svfiprintf_r+0x1c8>
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb62:	f10a 0a01 	add.w	sl, sl, #1
 800fb66:	9304      	str	r3, [sp, #16]
 800fb68:	9307      	str	r3, [sp, #28]
 800fb6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb6e:	931a      	str	r3, [sp, #104]	; 0x68
 800fb70:	4654      	mov	r4, sl
 800fb72:	2205      	movs	r2, #5
 800fb74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb78:	4851      	ldr	r0, [pc, #324]	; (800fcc0 <_svfiprintf_r+0x1ec>)
 800fb7a:	f7f0 fbc9 	bl	8000310 <memchr>
 800fb7e:	9a04      	ldr	r2, [sp, #16]
 800fb80:	b9d8      	cbnz	r0, 800fbba <_svfiprintf_r+0xe6>
 800fb82:	06d0      	lsls	r0, r2, #27
 800fb84:	bf44      	itt	mi
 800fb86:	2320      	movmi	r3, #32
 800fb88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb8c:	0711      	lsls	r1, r2, #28
 800fb8e:	bf44      	itt	mi
 800fb90:	232b      	movmi	r3, #43	; 0x2b
 800fb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb96:	f89a 3000 	ldrb.w	r3, [sl]
 800fb9a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb9c:	d015      	beq.n	800fbca <_svfiprintf_r+0xf6>
 800fb9e:	9a07      	ldr	r2, [sp, #28]
 800fba0:	4654      	mov	r4, sl
 800fba2:	2000      	movs	r0, #0
 800fba4:	f04f 0c0a 	mov.w	ip, #10
 800fba8:	4621      	mov	r1, r4
 800fbaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbae:	3b30      	subs	r3, #48	; 0x30
 800fbb0:	2b09      	cmp	r3, #9
 800fbb2:	d94e      	bls.n	800fc52 <_svfiprintf_r+0x17e>
 800fbb4:	b1b0      	cbz	r0, 800fbe4 <_svfiprintf_r+0x110>
 800fbb6:	9207      	str	r2, [sp, #28]
 800fbb8:	e014      	b.n	800fbe4 <_svfiprintf_r+0x110>
 800fbba:	eba0 0308 	sub.w	r3, r0, r8
 800fbbe:	fa09 f303 	lsl.w	r3, r9, r3
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	9304      	str	r3, [sp, #16]
 800fbc6:	46a2      	mov	sl, r4
 800fbc8:	e7d2      	b.n	800fb70 <_svfiprintf_r+0x9c>
 800fbca:	9b03      	ldr	r3, [sp, #12]
 800fbcc:	1d19      	adds	r1, r3, #4
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	9103      	str	r1, [sp, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	bfbb      	ittet	lt
 800fbd6:	425b      	neglt	r3, r3
 800fbd8:	f042 0202 	orrlt.w	r2, r2, #2
 800fbdc:	9307      	strge	r3, [sp, #28]
 800fbde:	9307      	strlt	r3, [sp, #28]
 800fbe0:	bfb8      	it	lt
 800fbe2:	9204      	strlt	r2, [sp, #16]
 800fbe4:	7823      	ldrb	r3, [r4, #0]
 800fbe6:	2b2e      	cmp	r3, #46	; 0x2e
 800fbe8:	d10c      	bne.n	800fc04 <_svfiprintf_r+0x130>
 800fbea:	7863      	ldrb	r3, [r4, #1]
 800fbec:	2b2a      	cmp	r3, #42	; 0x2a
 800fbee:	d135      	bne.n	800fc5c <_svfiprintf_r+0x188>
 800fbf0:	9b03      	ldr	r3, [sp, #12]
 800fbf2:	1d1a      	adds	r2, r3, #4
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	9203      	str	r2, [sp, #12]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	bfb8      	it	lt
 800fbfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc00:	3402      	adds	r4, #2
 800fc02:	9305      	str	r3, [sp, #20]
 800fc04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fcd0 <_svfiprintf_r+0x1fc>
 800fc08:	7821      	ldrb	r1, [r4, #0]
 800fc0a:	2203      	movs	r2, #3
 800fc0c:	4650      	mov	r0, sl
 800fc0e:	f7f0 fb7f 	bl	8000310 <memchr>
 800fc12:	b140      	cbz	r0, 800fc26 <_svfiprintf_r+0x152>
 800fc14:	2340      	movs	r3, #64	; 0x40
 800fc16:	eba0 000a 	sub.w	r0, r0, sl
 800fc1a:	fa03 f000 	lsl.w	r0, r3, r0
 800fc1e:	9b04      	ldr	r3, [sp, #16]
 800fc20:	4303      	orrs	r3, r0
 800fc22:	3401      	adds	r4, #1
 800fc24:	9304      	str	r3, [sp, #16]
 800fc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc2a:	4826      	ldr	r0, [pc, #152]	; (800fcc4 <_svfiprintf_r+0x1f0>)
 800fc2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc30:	2206      	movs	r2, #6
 800fc32:	f7f0 fb6d 	bl	8000310 <memchr>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d038      	beq.n	800fcac <_svfiprintf_r+0x1d8>
 800fc3a:	4b23      	ldr	r3, [pc, #140]	; (800fcc8 <_svfiprintf_r+0x1f4>)
 800fc3c:	bb1b      	cbnz	r3, 800fc86 <_svfiprintf_r+0x1b2>
 800fc3e:	9b03      	ldr	r3, [sp, #12]
 800fc40:	3307      	adds	r3, #7
 800fc42:	f023 0307 	bic.w	r3, r3, #7
 800fc46:	3308      	adds	r3, #8
 800fc48:	9303      	str	r3, [sp, #12]
 800fc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc4c:	4433      	add	r3, r6
 800fc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc50:	e767      	b.n	800fb22 <_svfiprintf_r+0x4e>
 800fc52:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc56:	460c      	mov	r4, r1
 800fc58:	2001      	movs	r0, #1
 800fc5a:	e7a5      	b.n	800fba8 <_svfiprintf_r+0xd4>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	3401      	adds	r4, #1
 800fc60:	9305      	str	r3, [sp, #20]
 800fc62:	4619      	mov	r1, r3
 800fc64:	f04f 0c0a 	mov.w	ip, #10
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc6e:	3a30      	subs	r2, #48	; 0x30
 800fc70:	2a09      	cmp	r2, #9
 800fc72:	d903      	bls.n	800fc7c <_svfiprintf_r+0x1a8>
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d0c5      	beq.n	800fc04 <_svfiprintf_r+0x130>
 800fc78:	9105      	str	r1, [sp, #20]
 800fc7a:	e7c3      	b.n	800fc04 <_svfiprintf_r+0x130>
 800fc7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc80:	4604      	mov	r4, r0
 800fc82:	2301      	movs	r3, #1
 800fc84:	e7f0      	b.n	800fc68 <_svfiprintf_r+0x194>
 800fc86:	ab03      	add	r3, sp, #12
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	462a      	mov	r2, r5
 800fc8c:	4b0f      	ldr	r3, [pc, #60]	; (800fccc <_svfiprintf_r+0x1f8>)
 800fc8e:	a904      	add	r1, sp, #16
 800fc90:	4638      	mov	r0, r7
 800fc92:	f3af 8000 	nop.w
 800fc96:	1c42      	adds	r2, r0, #1
 800fc98:	4606      	mov	r6, r0
 800fc9a:	d1d6      	bne.n	800fc4a <_svfiprintf_r+0x176>
 800fc9c:	89ab      	ldrh	r3, [r5, #12]
 800fc9e:	065b      	lsls	r3, r3, #25
 800fca0:	f53f af2c 	bmi.w	800fafc <_svfiprintf_r+0x28>
 800fca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fca6:	b01d      	add	sp, #116	; 0x74
 800fca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcac:	ab03      	add	r3, sp, #12
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	462a      	mov	r2, r5
 800fcb2:	4b06      	ldr	r3, [pc, #24]	; (800fccc <_svfiprintf_r+0x1f8>)
 800fcb4:	a904      	add	r1, sp, #16
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	f000 f87a 	bl	800fdb0 <_printf_i>
 800fcbc:	e7eb      	b.n	800fc96 <_svfiprintf_r+0x1c2>
 800fcbe:	bf00      	nop
 800fcc0:	0802b2b0 	.word	0x0802b2b0
 800fcc4:	0802b2ba 	.word	0x0802b2ba
 800fcc8:	00000000 	.word	0x00000000
 800fccc:	0800fa1d 	.word	0x0800fa1d
 800fcd0:	0802b2b6 	.word	0x0802b2b6

0800fcd4 <_printf_common>:
 800fcd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd8:	4616      	mov	r6, r2
 800fcda:	4699      	mov	r9, r3
 800fcdc:	688a      	ldr	r2, [r1, #8]
 800fcde:	690b      	ldr	r3, [r1, #16]
 800fce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fce4:	4293      	cmp	r3, r2
 800fce6:	bfb8      	it	lt
 800fce8:	4613      	movlt	r3, r2
 800fcea:	6033      	str	r3, [r6, #0]
 800fcec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fcf0:	4607      	mov	r7, r0
 800fcf2:	460c      	mov	r4, r1
 800fcf4:	b10a      	cbz	r2, 800fcfa <_printf_common+0x26>
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	6033      	str	r3, [r6, #0]
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	0699      	lsls	r1, r3, #26
 800fcfe:	bf42      	ittt	mi
 800fd00:	6833      	ldrmi	r3, [r6, #0]
 800fd02:	3302      	addmi	r3, #2
 800fd04:	6033      	strmi	r3, [r6, #0]
 800fd06:	6825      	ldr	r5, [r4, #0]
 800fd08:	f015 0506 	ands.w	r5, r5, #6
 800fd0c:	d106      	bne.n	800fd1c <_printf_common+0x48>
 800fd0e:	f104 0a19 	add.w	sl, r4, #25
 800fd12:	68e3      	ldr	r3, [r4, #12]
 800fd14:	6832      	ldr	r2, [r6, #0]
 800fd16:	1a9b      	subs	r3, r3, r2
 800fd18:	42ab      	cmp	r3, r5
 800fd1a:	dc26      	bgt.n	800fd6a <_printf_common+0x96>
 800fd1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd20:	1e13      	subs	r3, r2, #0
 800fd22:	6822      	ldr	r2, [r4, #0]
 800fd24:	bf18      	it	ne
 800fd26:	2301      	movne	r3, #1
 800fd28:	0692      	lsls	r2, r2, #26
 800fd2a:	d42b      	bmi.n	800fd84 <_printf_common+0xb0>
 800fd2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd30:	4649      	mov	r1, r9
 800fd32:	4638      	mov	r0, r7
 800fd34:	47c0      	blx	r8
 800fd36:	3001      	adds	r0, #1
 800fd38:	d01e      	beq.n	800fd78 <_printf_common+0xa4>
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	68e5      	ldr	r5, [r4, #12]
 800fd3e:	6832      	ldr	r2, [r6, #0]
 800fd40:	f003 0306 	and.w	r3, r3, #6
 800fd44:	2b04      	cmp	r3, #4
 800fd46:	bf08      	it	eq
 800fd48:	1aad      	subeq	r5, r5, r2
 800fd4a:	68a3      	ldr	r3, [r4, #8]
 800fd4c:	6922      	ldr	r2, [r4, #16]
 800fd4e:	bf0c      	ite	eq
 800fd50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd54:	2500      	movne	r5, #0
 800fd56:	4293      	cmp	r3, r2
 800fd58:	bfc4      	itt	gt
 800fd5a:	1a9b      	subgt	r3, r3, r2
 800fd5c:	18ed      	addgt	r5, r5, r3
 800fd5e:	2600      	movs	r6, #0
 800fd60:	341a      	adds	r4, #26
 800fd62:	42b5      	cmp	r5, r6
 800fd64:	d11a      	bne.n	800fd9c <_printf_common+0xc8>
 800fd66:	2000      	movs	r0, #0
 800fd68:	e008      	b.n	800fd7c <_printf_common+0xa8>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	4652      	mov	r2, sl
 800fd6e:	4649      	mov	r1, r9
 800fd70:	4638      	mov	r0, r7
 800fd72:	47c0      	blx	r8
 800fd74:	3001      	adds	r0, #1
 800fd76:	d103      	bne.n	800fd80 <_printf_common+0xac>
 800fd78:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd80:	3501      	adds	r5, #1
 800fd82:	e7c6      	b.n	800fd12 <_printf_common+0x3e>
 800fd84:	18e1      	adds	r1, r4, r3
 800fd86:	1c5a      	adds	r2, r3, #1
 800fd88:	2030      	movs	r0, #48	; 0x30
 800fd8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd8e:	4422      	add	r2, r4
 800fd90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd98:	3302      	adds	r3, #2
 800fd9a:	e7c7      	b.n	800fd2c <_printf_common+0x58>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	4622      	mov	r2, r4
 800fda0:	4649      	mov	r1, r9
 800fda2:	4638      	mov	r0, r7
 800fda4:	47c0      	blx	r8
 800fda6:	3001      	adds	r0, #1
 800fda8:	d0e6      	beq.n	800fd78 <_printf_common+0xa4>
 800fdaa:	3601      	adds	r6, #1
 800fdac:	e7d9      	b.n	800fd62 <_printf_common+0x8e>
	...

0800fdb0 <_printf_i>:
 800fdb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb4:	460c      	mov	r4, r1
 800fdb6:	4691      	mov	r9, r2
 800fdb8:	7e27      	ldrb	r7, [r4, #24]
 800fdba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fdbc:	2f78      	cmp	r7, #120	; 0x78
 800fdbe:	4680      	mov	r8, r0
 800fdc0:	469a      	mov	sl, r3
 800fdc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdc6:	d807      	bhi.n	800fdd8 <_printf_i+0x28>
 800fdc8:	2f62      	cmp	r7, #98	; 0x62
 800fdca:	d80a      	bhi.n	800fde2 <_printf_i+0x32>
 800fdcc:	2f00      	cmp	r7, #0
 800fdce:	f000 80d8 	beq.w	800ff82 <_printf_i+0x1d2>
 800fdd2:	2f58      	cmp	r7, #88	; 0x58
 800fdd4:	f000 80a3 	beq.w	800ff1e <_printf_i+0x16e>
 800fdd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fde0:	e03a      	b.n	800fe58 <_printf_i+0xa8>
 800fde2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fde6:	2b15      	cmp	r3, #21
 800fde8:	d8f6      	bhi.n	800fdd8 <_printf_i+0x28>
 800fdea:	a001      	add	r0, pc, #4	; (adr r0, 800fdf0 <_printf_i+0x40>)
 800fdec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fdf0:	0800fe49 	.word	0x0800fe49
 800fdf4:	0800fe5d 	.word	0x0800fe5d
 800fdf8:	0800fdd9 	.word	0x0800fdd9
 800fdfc:	0800fdd9 	.word	0x0800fdd9
 800fe00:	0800fdd9 	.word	0x0800fdd9
 800fe04:	0800fdd9 	.word	0x0800fdd9
 800fe08:	0800fe5d 	.word	0x0800fe5d
 800fe0c:	0800fdd9 	.word	0x0800fdd9
 800fe10:	0800fdd9 	.word	0x0800fdd9
 800fe14:	0800fdd9 	.word	0x0800fdd9
 800fe18:	0800fdd9 	.word	0x0800fdd9
 800fe1c:	0800ff69 	.word	0x0800ff69
 800fe20:	0800fe8d 	.word	0x0800fe8d
 800fe24:	0800ff4b 	.word	0x0800ff4b
 800fe28:	0800fdd9 	.word	0x0800fdd9
 800fe2c:	0800fdd9 	.word	0x0800fdd9
 800fe30:	0800ff8b 	.word	0x0800ff8b
 800fe34:	0800fdd9 	.word	0x0800fdd9
 800fe38:	0800fe8d 	.word	0x0800fe8d
 800fe3c:	0800fdd9 	.word	0x0800fdd9
 800fe40:	0800fdd9 	.word	0x0800fdd9
 800fe44:	0800ff53 	.word	0x0800ff53
 800fe48:	680b      	ldr	r3, [r1, #0]
 800fe4a:	1d1a      	adds	r2, r3, #4
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	600a      	str	r2, [r1, #0]
 800fe50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e0a3      	b.n	800ffa4 <_printf_i+0x1f4>
 800fe5c:	6825      	ldr	r5, [r4, #0]
 800fe5e:	6808      	ldr	r0, [r1, #0]
 800fe60:	062e      	lsls	r6, r5, #24
 800fe62:	f100 0304 	add.w	r3, r0, #4
 800fe66:	d50a      	bpl.n	800fe7e <_printf_i+0xce>
 800fe68:	6805      	ldr	r5, [r0, #0]
 800fe6a:	600b      	str	r3, [r1, #0]
 800fe6c:	2d00      	cmp	r5, #0
 800fe6e:	da03      	bge.n	800fe78 <_printf_i+0xc8>
 800fe70:	232d      	movs	r3, #45	; 0x2d
 800fe72:	426d      	negs	r5, r5
 800fe74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe78:	485e      	ldr	r0, [pc, #376]	; (800fff4 <_printf_i+0x244>)
 800fe7a:	230a      	movs	r3, #10
 800fe7c:	e019      	b.n	800feb2 <_printf_i+0x102>
 800fe7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe82:	6805      	ldr	r5, [r0, #0]
 800fe84:	600b      	str	r3, [r1, #0]
 800fe86:	bf18      	it	ne
 800fe88:	b22d      	sxthne	r5, r5
 800fe8a:	e7ef      	b.n	800fe6c <_printf_i+0xbc>
 800fe8c:	680b      	ldr	r3, [r1, #0]
 800fe8e:	6825      	ldr	r5, [r4, #0]
 800fe90:	1d18      	adds	r0, r3, #4
 800fe92:	6008      	str	r0, [r1, #0]
 800fe94:	0628      	lsls	r0, r5, #24
 800fe96:	d501      	bpl.n	800fe9c <_printf_i+0xec>
 800fe98:	681d      	ldr	r5, [r3, #0]
 800fe9a:	e002      	b.n	800fea2 <_printf_i+0xf2>
 800fe9c:	0669      	lsls	r1, r5, #25
 800fe9e:	d5fb      	bpl.n	800fe98 <_printf_i+0xe8>
 800fea0:	881d      	ldrh	r5, [r3, #0]
 800fea2:	4854      	ldr	r0, [pc, #336]	; (800fff4 <_printf_i+0x244>)
 800fea4:	2f6f      	cmp	r7, #111	; 0x6f
 800fea6:	bf0c      	ite	eq
 800fea8:	2308      	moveq	r3, #8
 800feaa:	230a      	movne	r3, #10
 800feac:	2100      	movs	r1, #0
 800feae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800feb2:	6866      	ldr	r6, [r4, #4]
 800feb4:	60a6      	str	r6, [r4, #8]
 800feb6:	2e00      	cmp	r6, #0
 800feb8:	bfa2      	ittt	ge
 800feba:	6821      	ldrge	r1, [r4, #0]
 800febc:	f021 0104 	bicge.w	r1, r1, #4
 800fec0:	6021      	strge	r1, [r4, #0]
 800fec2:	b90d      	cbnz	r5, 800fec8 <_printf_i+0x118>
 800fec4:	2e00      	cmp	r6, #0
 800fec6:	d04d      	beq.n	800ff64 <_printf_i+0x1b4>
 800fec8:	4616      	mov	r6, r2
 800feca:	fbb5 f1f3 	udiv	r1, r5, r3
 800fece:	fb03 5711 	mls	r7, r3, r1, r5
 800fed2:	5dc7      	ldrb	r7, [r0, r7]
 800fed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fed8:	462f      	mov	r7, r5
 800feda:	42bb      	cmp	r3, r7
 800fedc:	460d      	mov	r5, r1
 800fede:	d9f4      	bls.n	800feca <_printf_i+0x11a>
 800fee0:	2b08      	cmp	r3, #8
 800fee2:	d10b      	bne.n	800fefc <_printf_i+0x14c>
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	07df      	lsls	r7, r3, #31
 800fee8:	d508      	bpl.n	800fefc <_printf_i+0x14c>
 800feea:	6923      	ldr	r3, [r4, #16]
 800feec:	6861      	ldr	r1, [r4, #4]
 800feee:	4299      	cmp	r1, r3
 800fef0:	bfde      	ittt	le
 800fef2:	2330      	movle	r3, #48	; 0x30
 800fef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fefc:	1b92      	subs	r2, r2, r6
 800fefe:	6122      	str	r2, [r4, #16]
 800ff00:	f8cd a000 	str.w	sl, [sp]
 800ff04:	464b      	mov	r3, r9
 800ff06:	aa03      	add	r2, sp, #12
 800ff08:	4621      	mov	r1, r4
 800ff0a:	4640      	mov	r0, r8
 800ff0c:	f7ff fee2 	bl	800fcd4 <_printf_common>
 800ff10:	3001      	adds	r0, #1
 800ff12:	d14c      	bne.n	800ffae <_printf_i+0x1fe>
 800ff14:	f04f 30ff 	mov.w	r0, #4294967295
 800ff18:	b004      	add	sp, #16
 800ff1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff1e:	4835      	ldr	r0, [pc, #212]	; (800fff4 <_printf_i+0x244>)
 800ff20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff24:	6823      	ldr	r3, [r4, #0]
 800ff26:	680e      	ldr	r6, [r1, #0]
 800ff28:	061f      	lsls	r7, r3, #24
 800ff2a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff2e:	600e      	str	r6, [r1, #0]
 800ff30:	d514      	bpl.n	800ff5c <_printf_i+0x1ac>
 800ff32:	07d9      	lsls	r1, r3, #31
 800ff34:	bf44      	itt	mi
 800ff36:	f043 0320 	orrmi.w	r3, r3, #32
 800ff3a:	6023      	strmi	r3, [r4, #0]
 800ff3c:	b91d      	cbnz	r5, 800ff46 <_printf_i+0x196>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	f023 0320 	bic.w	r3, r3, #32
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	2310      	movs	r3, #16
 800ff48:	e7b0      	b.n	800feac <_printf_i+0xfc>
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	f043 0320 	orr.w	r3, r3, #32
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	2378      	movs	r3, #120	; 0x78
 800ff54:	4828      	ldr	r0, [pc, #160]	; (800fff8 <_printf_i+0x248>)
 800ff56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff5a:	e7e3      	b.n	800ff24 <_printf_i+0x174>
 800ff5c:	065e      	lsls	r6, r3, #25
 800ff5e:	bf48      	it	mi
 800ff60:	b2ad      	uxthmi	r5, r5
 800ff62:	e7e6      	b.n	800ff32 <_printf_i+0x182>
 800ff64:	4616      	mov	r6, r2
 800ff66:	e7bb      	b.n	800fee0 <_printf_i+0x130>
 800ff68:	680b      	ldr	r3, [r1, #0]
 800ff6a:	6826      	ldr	r6, [r4, #0]
 800ff6c:	6960      	ldr	r0, [r4, #20]
 800ff6e:	1d1d      	adds	r5, r3, #4
 800ff70:	600d      	str	r5, [r1, #0]
 800ff72:	0635      	lsls	r5, r6, #24
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	d501      	bpl.n	800ff7c <_printf_i+0x1cc>
 800ff78:	6018      	str	r0, [r3, #0]
 800ff7a:	e002      	b.n	800ff82 <_printf_i+0x1d2>
 800ff7c:	0671      	lsls	r1, r6, #25
 800ff7e:	d5fb      	bpl.n	800ff78 <_printf_i+0x1c8>
 800ff80:	8018      	strh	r0, [r3, #0]
 800ff82:	2300      	movs	r3, #0
 800ff84:	6123      	str	r3, [r4, #16]
 800ff86:	4616      	mov	r6, r2
 800ff88:	e7ba      	b.n	800ff00 <_printf_i+0x150>
 800ff8a:	680b      	ldr	r3, [r1, #0]
 800ff8c:	1d1a      	adds	r2, r3, #4
 800ff8e:	600a      	str	r2, [r1, #0]
 800ff90:	681e      	ldr	r6, [r3, #0]
 800ff92:	6862      	ldr	r2, [r4, #4]
 800ff94:	2100      	movs	r1, #0
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7f0 f9ba 	bl	8000310 <memchr>
 800ff9c:	b108      	cbz	r0, 800ffa2 <_printf_i+0x1f2>
 800ff9e:	1b80      	subs	r0, r0, r6
 800ffa0:	6060      	str	r0, [r4, #4]
 800ffa2:	6863      	ldr	r3, [r4, #4]
 800ffa4:	6123      	str	r3, [r4, #16]
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffac:	e7a8      	b.n	800ff00 <_printf_i+0x150>
 800ffae:	6923      	ldr	r3, [r4, #16]
 800ffb0:	4632      	mov	r2, r6
 800ffb2:	4649      	mov	r1, r9
 800ffb4:	4640      	mov	r0, r8
 800ffb6:	47d0      	blx	sl
 800ffb8:	3001      	adds	r0, #1
 800ffba:	d0ab      	beq.n	800ff14 <_printf_i+0x164>
 800ffbc:	6823      	ldr	r3, [r4, #0]
 800ffbe:	079b      	lsls	r3, r3, #30
 800ffc0:	d413      	bmi.n	800ffea <_printf_i+0x23a>
 800ffc2:	68e0      	ldr	r0, [r4, #12]
 800ffc4:	9b03      	ldr	r3, [sp, #12]
 800ffc6:	4298      	cmp	r0, r3
 800ffc8:	bfb8      	it	lt
 800ffca:	4618      	movlt	r0, r3
 800ffcc:	e7a4      	b.n	800ff18 <_printf_i+0x168>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	4632      	mov	r2, r6
 800ffd2:	4649      	mov	r1, r9
 800ffd4:	4640      	mov	r0, r8
 800ffd6:	47d0      	blx	sl
 800ffd8:	3001      	adds	r0, #1
 800ffda:	d09b      	beq.n	800ff14 <_printf_i+0x164>
 800ffdc:	3501      	adds	r5, #1
 800ffde:	68e3      	ldr	r3, [r4, #12]
 800ffe0:	9903      	ldr	r1, [sp, #12]
 800ffe2:	1a5b      	subs	r3, r3, r1
 800ffe4:	42ab      	cmp	r3, r5
 800ffe6:	dcf2      	bgt.n	800ffce <_printf_i+0x21e>
 800ffe8:	e7eb      	b.n	800ffc2 <_printf_i+0x212>
 800ffea:	2500      	movs	r5, #0
 800ffec:	f104 0619 	add.w	r6, r4, #25
 800fff0:	e7f5      	b.n	800ffde <_printf_i+0x22e>
 800fff2:	bf00      	nop
 800fff4:	0802b2c1 	.word	0x0802b2c1
 800fff8:	0802b2d2 	.word	0x0802b2d2

0800fffc <__retarget_lock_acquire_recursive>:
 800fffc:	4770      	bx	lr

0800fffe <__retarget_lock_release_recursive>:
 800fffe:	4770      	bx	lr

08010000 <_realloc_r>:
 8010000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010002:	4607      	mov	r7, r0
 8010004:	4614      	mov	r4, r2
 8010006:	460e      	mov	r6, r1
 8010008:	b921      	cbnz	r1, 8010014 <_realloc_r+0x14>
 801000a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801000e:	4611      	mov	r1, r2
 8010010:	f7ff bc22 	b.w	800f858 <_malloc_r>
 8010014:	b922      	cbnz	r2, 8010020 <_realloc_r+0x20>
 8010016:	f7ff fbcf 	bl	800f7b8 <_free_r>
 801001a:	4625      	mov	r5, r4
 801001c:	4628      	mov	r0, r5
 801001e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010020:	f000 f814 	bl	801004c <_malloc_usable_size_r>
 8010024:	42a0      	cmp	r0, r4
 8010026:	d20f      	bcs.n	8010048 <_realloc_r+0x48>
 8010028:	4621      	mov	r1, r4
 801002a:	4638      	mov	r0, r7
 801002c:	f7ff fc14 	bl	800f858 <_malloc_r>
 8010030:	4605      	mov	r5, r0
 8010032:	2800      	cmp	r0, #0
 8010034:	d0f2      	beq.n	801001c <_realloc_r+0x1c>
 8010036:	4631      	mov	r1, r6
 8010038:	4622      	mov	r2, r4
 801003a:	f7ff fb7d 	bl	800f738 <memcpy>
 801003e:	4631      	mov	r1, r6
 8010040:	4638      	mov	r0, r7
 8010042:	f7ff fbb9 	bl	800f7b8 <_free_r>
 8010046:	e7e9      	b.n	801001c <_realloc_r+0x1c>
 8010048:	4635      	mov	r5, r6
 801004a:	e7e7      	b.n	801001c <_realloc_r+0x1c>

0801004c <_malloc_usable_size_r>:
 801004c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010050:	1f18      	subs	r0, r3, #4
 8010052:	2b00      	cmp	r3, #0
 8010054:	bfbc      	itt	lt
 8010056:	580b      	ldrlt	r3, [r1, r0]
 8010058:	18c0      	addlt	r0, r0, r3
 801005a:	4770      	bx	lr

0801005c <_init>:
 801005c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005e:	bf00      	nop
 8010060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010062:	bc08      	pop	{r3}
 8010064:	469e      	mov	lr, r3
 8010066:	4770      	bx	lr

08010068 <_fini>:
 8010068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006a:	bf00      	nop
 801006c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801006e:	bc08      	pop	{r3}
 8010070:	469e      	mov	lr, r3
 8010072:	4770      	bx	lr
