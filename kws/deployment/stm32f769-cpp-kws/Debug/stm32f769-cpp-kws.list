
stm32f769-cpp-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9ec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b25c  0800fbf0  0800fbf0  0001fbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ae4c  0802ae4c  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  0802ae4c  0802ae4c  0003ae4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ae54  0802ae54  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ae54  0802ae54  0003ae54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ae58  0802ae58  0003ae58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0802ae5c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000080  0802aedc  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0802aedc  00040474  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005fd91  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d9e  00000000  00000000  0009fe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  000a7be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  000a9598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037ded  00000000  00000000  000aac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002886e  00000000  00000000  000e2a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a727  00000000  00000000  0010b2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002959d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007224  00000000  00000000  00295a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fbd4 	.word	0x0800fbd4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800fbd4 	.word	0x0800fbd4

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 80006d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80006d6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000704 <_ZN4MFCC8MelScaleEf+0x3c>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	f00d ff49 	bl	800e580 <logf>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000708 <_ZN4MFCC8MelScaleEf+0x40>
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 80006fa:	eeb0 0a67 	vmov.f32	s0, s15
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	442f0000 	.word	0x442f0000
 8000708:	448ce000 	.word	0x448ce000

0800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f00d f9e5 	bl	800daf0 <log>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eeb0 0b47 	vmov.f64	d0, d7
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800074a:	ed97 1b00 	vldr	d1, [r7]
 800074e:	eeb0 0b47 	vmov.f64	d0, d7
 8000752:	f00d fb91 	bl	800de78 <pow>
 8000756:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800075a:	eeb0 0b47 	vmov.f64	d0, d7
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0000      	movs	r0, r0
	...

08000768 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8000768:	b580      	push	{r7, lr}
 800076a:	ed2d 8b02 	vpush	{d8}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffbd 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000792:	eeb0 8b40 	vmov.f64	d8, d0
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff ffb8 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800079c:	eeb0 6b40 	vmov.f64	d6, d0
 80007a0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80007a4:	eeb0 0b47 	vmov.f64	d0, d7
 80007a8:	f00d fe2a 	bl	800e400 <ceil>
 80007ac:	eeb0 7b40 	vmov.f64	d7, d0
 80007b0:	eeb0 0b47 	vmov.f64	d0, d7
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ffbd 	bl	8000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d201      	bcs.n	80007da <_ZN4MFCCC1Eiii+0x72>
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	e001      	b.n	80007de <_ZN4MFCCC1Eiii+0x76>
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4618      	mov	r0, r3
 80007e0:	f00d f962 	bl	800daa8 <_Znaj>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d201      	bcs.n	80007fc <_ZN4MFCCC1Eiii+0x94>
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e001      	b.n	8000800 <_ZN4MFCCC1Eiii+0x98>
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4618      	mov	r0, r3
 8000802:	f00d f951 	bl	800daa8 <_Znaj>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 800080e:	20a0      	movs	r0, #160	; 0xa0
 8000810:	f00d f94a 	bl	800daa8 <_Znaj>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000822:	4293      	cmp	r3, r2
 8000824:	d201      	bcs.n	800082a <_ZN4MFCCC1Eiii+0xc2>
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	e001      	b.n	800082e <_ZN4MFCCC1Eiii+0xc6>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4618      	mov	r0, r3
 8000830:	f00d f93a 	bl	800daa8 <_Znaj>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	da26      	bge.n	8000896 <_ZN4MFCCC1Eiii+0x12e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000900 <_ZN4MFCCC1Eiii+0x198>
 800085a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000868:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000874:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000878:	ee36 7b47 	vsub.f64	d7, d6, d7
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < frame_len; i++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e7d4      	b.n	8000840 <_ZN4MFCCC1Eiii+0xd8>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8000896:	20a0      	movs	r0, #160	; 0xa0
 8000898:	f00d f906 	bl	800daa8 <_Znaj>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 80008a4:	20a0      	movs	r0, #160	; 0xa0
 80008a6:	f00d f8ff 	bl	800daa8 <_Znaj>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f928 	bl	8000b08 <_ZN4MFCC16create_mel_fbankEv>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	2128      	movs	r1, #40	; 0x28
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 f890 	bl	80009e8 <_ZN4MFCC17create_dct_matrixEll>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80008ce:	2018      	movs	r0, #24
 80008d0:	f00d f8d9 	bl	800da86 <_Znwj>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f005 fdbd 	bl	8006468 <arm_rfft_fast_init_f32>

}
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	ecbd 8b02 	vpop	{d8}
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f3af 8000 	nop.w
 8000900:	54442d18 	.word	0x54442d18
 8000904:	401921fb 	.word	0x401921fb

08000908 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  delete []frame;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <_ZN4MFCCD1Ev+0x1a>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4618      	mov	r0, r3
 800091e:	f00d f8b0 	bl	800da82 <_ZdaPv>
  delete [] buffer;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <_ZN4MFCCD1Ev+0x2c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4618      	mov	r0, r3
 8000930:	f00d f8a7 	bl	800da82 <_ZdaPv>
  delete []mel_energies;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <_ZN4MFCCD1Ev+0x3e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4618      	mov	r0, r3
 8000942:	f00d f89e 	bl	800da82 <_ZdaPv>
  delete []window_func;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <_ZN4MFCCD1Ev+0x50>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4618      	mov	r0, r3
 8000954:	f00d f895 	bl	800da82 <_ZdaPv>
  delete []fbank_filter_first;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <_ZN4MFCCD1Ev+0x62>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4618      	mov	r0, r3
 8000966:	f00d f88c 	bl	800da82 <_ZdaPv>
  delete []fbank_filter_last;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <_ZN4MFCCD1Ev+0x74>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f00d f883 	bl	800da82 <_ZdaPv>
  delete []dct_matrix;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <_ZN4MFCCD1Ev+0x86>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4618      	mov	r0, r3
 800098a:	f00d f87a 	bl	800da82 <_ZdaPv>
  delete rfft;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <_ZN4MFCCD1Ev+0x96>
 8000996:	2118      	movs	r1, #24
 8000998:	4618      	mov	r0, r3
 800099a:	f00d f870 	bl	800da7e <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b27      	cmp	r3, #39	; 0x27
 80009a6:	dc0f      	bgt.n	80009c8 <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <_ZN4MFCCD1Ev+0xb8>
 80009b8:	2104      	movs	r1, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00d f85f 	bl	800da7e <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7ec      	b.n	80009a2 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <_ZN4MFCCD1Ev+0xd0>
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00d f853 	bl	800da7e <_ZdlPvj>
}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	0000      	movs	r0, r0
 80009e4:	0000      	movs	r0, r0
	...

080009e8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	ed2d 8b02 	vpush	{d8}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d201      	bcs.n	8000a0c <_ZN4MFCC17create_dct_matrixEll+0x24>
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	e001      	b.n	8000a10 <_ZN4MFCC17create_dct_matrixEll+0x28>
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00d f849 	bl	800daa8 <_Znaj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	db09      	blt.n	8000a58 <_ZN4MFCC17create_dct_matrixEll+0x70>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8000a44:	ed97 0a06 	vldr	s0, [r7, #24]
 8000a48:	f00d fe00 	bl	800e64c <sqrtf>
 8000a4c:	eef0 7a40 	vmov.f32	s15, s0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000a56:	e004      	b.n	8000a62 <_ZN4MFCC17create_dct_matrixEll+0x7a>
    }
    else
    {
      *pOut = 0.0f;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a60:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	da41      	bge.n	8000af2 <_ZN4MFCC17create_dct_matrixEll+0x10a>
    for (n = 0; n < input_length; n++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3a      	ldr	r2, [r7, #32]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da37      	bge.n	8000aea <_ZN4MFCC17create_dct_matrixEll+0x102>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8000a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a7e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000b00 <_ZN4MFCC17create_dct_matrixEll+0x118>
 8000a90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	ee07 3a90 	vmov	s15, r3
 8000a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000aa2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000aa6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab8:	eeb0 0b47 	vmov.f64	d0, d7
 8000abc:	f00d fd18 	bl	800e4f0 <cos>
 8000ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	fb02 f203 	mul.w	r2, r2, r3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < input_length; n++) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	e7c3      	b.n	8000a72 <_ZN4MFCC17create_dct_matrixEll+0x8a>
  for (k = 0; k < coefficient_count; k++) {
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
 8000af0:	e7b9      	b.n	8000a66 <_ZN4MFCC17create_dct_matrixEll+0x7e>
    }
  }
  return M;
 8000af2:	69fb      	ldr	r3, [r7, #28]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	ecbd 8b02 	vpop	{d8}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	54442d18 	.word	0x54442d18
 8000b04:	400921fb 	.word	0x400921fb

08000b08 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b095      	sub	sp, #84	; 0x54
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <_ZN4MFCC16create_mel_fbankEv+0x12>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000d78 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8000b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8000b36:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000b3a:	f7ff fdc5 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 8000b42:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8000d7c <_ZN4MFCC16create_mel_fbankEv+0x274>
 8000b46:	f7ff fdbf 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b4a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8000b4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b5a:	eddf 6a89 	vldr	s13, [pc, #548]	; 8000d80 <_ZN4MFCC16create_mel_fbankEv+0x278>
 8000b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d201      	bcs.n	8000b74 <_ZN4MFCC16create_mel_fbankEv+0x6c>
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e001      	b.n	8000b78 <_ZN4MFCC16create_mel_fbankEv+0x70>
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00c ff95 	bl	800daa8 <_Znaj>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 8000b82:	20a0      	movs	r0, #160	; 0xa0
 8000b84:	f00c ff90 	bl	800daa8 <_Znaj>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b92:	2b27      	cmp	r3, #39	; 0x27
 8000b94:	f300 80e4 	bgt.w	8000d60 <_ZN4MFCC16create_mel_fbankEv+0x258>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 8000b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd8:	3302      	adds	r3, #2
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	da65      	bge.n	8000cda <_ZN4MFCC16create_mel_fbankEv+0x1d2>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8000c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c20:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 8000c24:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c28:	f7ff fd4e 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 8000c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8000c3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	dd40      	ble.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
 8000c50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d537      	bpl.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
        float weight;
        if (mel <= center_mel) {
 8000c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	d810      	bhi.n	8000c96 <_ZN4MFCC16create_mel_fbankEv+0x18e>
          weight = (mel - left_mel) / (center_mel - left_mel);
 8000c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8000c94:	e00f      	b.n	8000cb6 <_ZN4MFCC16create_mel_fbankEv+0x1ae>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 8000c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	6a3a      	ldr	r2, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc0:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d101      	bne.n	8000cce <_ZN4MFCC16create_mel_fbankEv+0x1c6>
          first_index = i;
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 8000cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd8:	e795      	b.n	8000c06 <_ZN4MFCC16create_mel_fbankEv+0xfe>
      }
    }

    fbank_filter_first[bin] = first_index;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ce6:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf4:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8000cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d201      	bcs.n	8000d0a <_ZN4MFCC16create_mel_fbankEv+0x202>
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	e001      	b.n	8000d0e <_ZN4MFCC16create_mel_fbankEv+0x206>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	69f9      	ldr	r1, [r7, #28]
 8000d14:	188c      	adds	r4, r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00c fec6 	bl	800daa8 <_Znaj>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 8000d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dc13      	bgt.n	8000d58 <_ZN4MFCC16create_mel_fbankEv+0x250>
      mel_fbank[bin][j++] = this_bin[i];
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	6a3a      	ldr	r2, [r7, #32]
 8000d36:	441a      	add	r2, r3
 8000d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	69f9      	ldr	r1, [r7, #28]
 8000d3e:	440b      	add	r3, r1
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d44:	1c58      	adds	r0, r3, #1
 8000d46:	63b8      	str	r0, [r7, #56]	; 0x38
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 8000d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d52:	3301      	adds	r3, #1
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d56:	e7e7      	b.n	8000d28 <_ZN4MFCC16create_mel_fbankEv+0x220>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d5e:	e717      	b.n	8000b90 <_ZN4MFCC16create_mel_fbankEv+0x88>
    }
  }
  delete []this_bin;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <_ZN4MFCC16create_mel_fbankEv+0x264>
 8000d66:	6a38      	ldr	r0, [r7, #32]
 8000d68:	f00c fe8b 	bl	800da82 <_ZdaPv>
  return mel_fbank;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3754      	adds	r7, #84	; 0x54
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	467a0000 	.word	0x467a0000
 8000d7c:	457a0000 	.word	0x457a0000
 8000d80:	42240000 	.word	0x42240000

08000d84 <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b095      	sub	sp, #84	; 0x54
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da18      	bge.n	8000dd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 8000d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001074 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dce:	e7e1      	b.n	8000d94 <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18d0      	adds	r0, r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	461a      	mov	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00e fa88 	bl	800f300 <memset>

  for (i = 0; i < frame_len; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	da1a      	bge.n	8000e34 <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	3301      	adds	r3, #1
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e32:	e7df      	b.n	8000df4 <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	2300      	movs	r3, #0
 8000e42:	f005 fae3 	bl	800640c <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da00      	bge.n	8000e50 <_ZN4MFCC12mfcc_computeEPKsPa+0xcc>
 8000e4e:	3301      	adds	r3, #1
 8000e50:	105b      	asrs	r3, r3, #1
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	3304      	adds	r3, #4
 8000e72:	ed93 7a00 	vldr	s14, [r3]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 8000e88:	2301      	movs	r3, #1
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da23      	bge.n	8000edc <_ZN4MFCC12mfcc_computeEPKsPa+0x158>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eda:	e7d7      	b.n	8000e8c <_ZN4MFCC12mfcc_computeEPKsPa+0x108>
  }
  buffer[0] = first_energy;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ee2:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef0:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef8:	2b27      	cmp	r3, #39	; 0x27
 8000efa:	dc6d      	bgt.n	8000fd8 <_ZN4MFCC12mfcc_computeEPKsPa+0x254>
    j = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dc3a      	bgt.n	8000fa4 <_ZN4MFCC12mfcc_computeEPKsPa+0x220>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8000f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	db09      	blt.n	8000f64 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e0>
      *pOut = sqrtf(in);
 8000f50:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f54:	f00d fb7a 	bl	800e64c <sqrtf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000f62:	e004      	b.n	8000f6e <_ZN4MFCC12mfcc_computeEPKsPa+0x1ea>
      *pOut = 0.0f;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f6c:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 8000f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa2:	e7c0      	b.n	8000f26 <_ZN4MFCC12mfcc_computeEPKsPa+0x1a2>
    }
    mel_energies[bin] = mel_energy;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 8000fb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d107      	bne.n	8000fd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x24c>
      mel_energies[bin] = FLT_MIN;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fce:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fd6:	e78e      	b.n	8000ef6 <_ZN4MFCC12mfcc_computeEPKsPa+0x172>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	2b27      	cmp	r3, #39	; 0x27
 8000fe0:	dc17      	bgt.n	8001012 <_ZN4MFCC12mfcc_computeEPKsPa+0x28e>
    mel_energies[bin] = logf(mel_energies[bin]);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18d4      	adds	r4, r2, r3
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f00d fabf 	bl	800e580 <logf>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 800100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100c:	3301      	adds	r3, #1
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
 8001010:	e7e4      	b.n	8000fdc <_ZN4MFCC12mfcc_computeEPKsPa+0x258>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101c:	429a      	cmp	r2, r3
 800101e:	da72      	bge.n	8001106 <_ZN4MFCC12mfcc_computeEPKsPa+0x382>
    float sum = 0.0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b27      	cmp	r3, #39	; 0x27
 800102e:	dc27      	bgt.n	8001080 <_ZN4MFCC12mfcc_computeEPKsPa+0x2fc>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	461a      	mov	r2, r3
 8001040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106c:	3301      	adds	r3, #1
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001070:	e7db      	b.n	800102a <_ZN4MFCC12mfcc_computeEPKsPa+0x2a6>
 8001072:	bf00      	nop
 8001074:	47000000 	.word	0x47000000
 8001078:	42fe0000 	.word	0x42fe0000
 800107c:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 800109e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80010a2:	f7ff fb01 	bl	80006a8 <_ZSt5roundf>
 80010a6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80010aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010ae:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8001078 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	db05      	blt.n	80010c8 <_ZN4MFCC12mfcc_computeEPKsPa+0x344>
      mfcc_out[i] = 127;
 80010bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	227f      	movs	r2, #127	; 0x7f
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e01a      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else if(sum <= -128)
 80010c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010cc:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800107c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d805      	bhi.n	80010e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x362>
      mfcc_out[i] = -128;
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else
      mfcc_out[i] = sum; 
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	edc7 7a00 	vstr	s15, [r7]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b252      	sxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 80010fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001100:	3301      	adds	r3, #1
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001104:	e787      	b.n	8001016 <_ZN4MFCC12mfcc_computeEPKsPa+0x292>
  }

}
 8001106:	bf00      	nop
 8001108:	3754      	adds	r7, #84	; 0x54
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop

08001110 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <_ZN2NNC1Ev+0x1c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	08015554 	.word	0x08015554

08001130 <_ZN6DS_CNNC1Ev>:
const q7_t DS_CNN::conv5_pw_wt[CONV5_OUT_CH*CONV4_OUT_CH]=CONV5_PW_WT;
const q7_t DS_CNN::conv5_pw_bias[CONV5_OUT_CH]=CONV5_PW_BIAS;
const q7_t DS_CNN::final_fc_wt[CONV5_OUT_CH*OUT_DIM]=FINAL_FC_WT;
const q7_t DS_CNN::final_fc_bias[OUT_DIM]=FINAL_FC_BIAS;

DS_CNN::DS_CNN()
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffe8 	bl	8001110 <_ZN2NNC1Ev>
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <_ZN6DS_CNNC1Ev+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8001146:	f44f 408f 	mov.w	r0, #18304	; 0x4780
 800114a:	f00c fcad 	bl	800daa8 <_Znaj>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	61da      	str	r2, [r3, #28]
  buffer1 = scratch_pad;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  buffer2 = buffer1 + (CONV1_OUT_CH*CONV1_OUT_X*CONV1_OUT_Y);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  col_buffer = buffer2 + (CONV2_OUT_CH*CONV2_OUT_X*CONV2_OUT_Y);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	621a      	str	r2, [r3, #32]
  frame_len = FRAME_LEN;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f44f 7220 	mov.w	r2, #640	; 0x280
 800117c:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001184:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	220a      	movs	r2, #10
 800118a:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2231      	movs	r2, #49	; 0x31
 8001190:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08015540 	.word	0x08015540

080011ac <_ZN6DS_CNND1Ev>:

DS_CNN::~DS_CNN()
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <_ZN6DS_CNND1Ev+0x30>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <_ZN6DS_CNND1Ev+0x1e>
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c fc5a 	bl	800da7e <_ZdlPvj>
DS_CNN::~DS_CNN()
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa29 	bl	8001624 <_ZN2NND1Ev>
}
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	08015540 	.word	0x08015540

080011e0 <_ZN6DS_CNND0Ev>:
DS_CNN::~DS_CNN()
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
}
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffdf 	bl	80011ac <_ZN6DS_CNND1Ev>
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f00c fc44 	bl	800da7e <_ZdlPvj>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN6DS_CNN6run_nnEPaS0_>:

void DS_CNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af10      	add	r7, sp, #64	; 0x40
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  //CONV1 : regular convolution
  arm_convolve_HWC_q7_basic_nonsquare(in_data, CONV1_IN_X, CONV1_IN_Y, 1, conv1_wt, CONV1_OUT_CH, CONV1_KX, CONV1_KY, CONV1_PX, CONV1_PY, CONV1_SX, CONV1_SY, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_X, CONV1_OUT_Y, (q15_t*)col_buffer, NULL);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6a12      	ldr	r2, [r2, #32]
 8001214:	2100      	movs	r1, #0
 8001216:	910f      	str	r1, [sp, #60]	; 0x3c
 8001218:	920e      	str	r2, [sp, #56]	; 0x38
 800121a:	2219      	movs	r2, #25
 800121c:	920d      	str	r2, [sp, #52]	; 0x34
 800121e:	2205      	movs	r2, #5
 8001220:	920c      	str	r2, [sp, #48]	; 0x30
 8001222:	930b      	str	r3, [sp, #44]	; 0x2c
 8001224:	2306      	movs	r3, #6
 8001226:	930a      	str	r3, [sp, #40]	; 0x28
 8001228:	2302      	movs	r3, #2
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <_ZN6DS_CNN6run_nnEPaS0_+0x2c0>)
 800122e:	9308      	str	r3, [sp, #32]
 8001230:	2302      	movs	r3, #2
 8001232:	9307      	str	r3, [sp, #28]
 8001234:	2302      	movs	r3, #2
 8001236:	9306      	str	r3, [sp, #24]
 8001238:	2304      	movs	r3, #4
 800123a:	9305      	str	r3, [sp, #20]
 800123c:	2301      	movs	r3, #1
 800123e:	9304      	str	r3, [sp, #16]
 8001240:	230a      	movs	r3, #10
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	2304      	movs	r3, #4
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <_ZN6DS_CNN6run_nnEPaS0_+0x2c4>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2231      	movs	r2, #49	; 0x31
 8001254:	210a      	movs	r1, #10
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f005 fbee 	bl	8006a38 <arm_convolve_HWC_q7_basic_nonsquare>
  arm_relu_q7(buffer1,CONV1_OUT_X*CONV1_OUT_Y*CONV1_OUT_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001264:	4618      	mov	r0, r3
 8001266:	f005 f9e1 	bl	800662c <arm_relu_q7>

  //CONV2 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV2_IN_X,CONV2_IN_Y,CONV1_OUT_CH,conv2_ds_wt,CONV1_OUT_CH,CONV2_DS_KX,CONV2_DS_KY,CONV2_DS_PX,CONV2_DS_PY,CONV2_DS_SX,CONV2_DS_SY,conv2_ds_bias,CONV2_DS_BIAS_LSHIFT,CONV2_DS_OUT_RSHIFT,buffer2,CONV2_OUT_X,CONV2_OUT_Y,(q15_t*)col_buffer, NULL);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6a12      	ldr	r2, [r2, #32]
 8001276:	2100      	movs	r1, #0
 8001278:	910f      	str	r1, [sp, #60]	; 0x3c
 800127a:	920e      	str	r2, [sp, #56]	; 0x38
 800127c:	2219      	movs	r2, #25
 800127e:	920d      	str	r2, [sp, #52]	; 0x34
 8001280:	2205      	movs	r2, #5
 8001282:	920c      	str	r2, [sp, #48]	; 0x30
 8001284:	930b      	str	r3, [sp, #44]	; 0x2c
 8001286:	2305      	movs	r3, #5
 8001288:	930a      	str	r3, [sp, #40]	; 0x28
 800128a:	2302      	movs	r3, #2
 800128c:	9309      	str	r3, [sp, #36]	; 0x24
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <_ZN6DS_CNN6run_nnEPaS0_+0x2c8>)
 8001290:	9308      	str	r3, [sp, #32]
 8001292:	2301      	movs	r3, #1
 8001294:	9307      	str	r3, [sp, #28]
 8001296:	2301      	movs	r3, #1
 8001298:	9306      	str	r3, [sp, #24]
 800129a:	2301      	movs	r3, #1
 800129c:	9305      	str	r3, [sp, #20]
 800129e:	2301      	movs	r3, #1
 80012a0:	9304      	str	r3, [sp, #16]
 80012a2:	2303      	movs	r3, #3
 80012a4:	9303      	str	r3, [sp, #12]
 80012a6:	2303      	movs	r3, #3
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b87      	ldr	r3, [pc, #540]	; (80014cc <_ZN6DS_CNN6run_nnEPaS0_+0x2cc>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	2219      	movs	r2, #25
 80012b6:	2105      	movs	r1, #5
 80012b8:	f005 fdb6 	bl	8006e28 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 f9b1 	bl	800662c <arm_relu_q7>

  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV2_OUT_X, CONV2_OUT_Y, CONV1_OUT_CH, conv2_pw_wt, CONV2_OUT_CH, 1, 1, 0, 0, 1, 1, conv2_pw_bias, CONV2_PW_BIAS_LSHIFT, CONV2_PW_OUT_RSHIFT, buffer1, CONV2_OUT_X, CONV2_OUT_Y, (q15_t*)col_buffer, NULL);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6a12      	ldr	r2, [r2, #32]
 80012d6:	2100      	movs	r1, #0
 80012d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80012da:	920e      	str	r2, [sp, #56]	; 0x38
 80012dc:	2219      	movs	r2, #25
 80012de:	920d      	str	r2, [sp, #52]	; 0x34
 80012e0:	2205      	movs	r2, #5
 80012e2:	920c      	str	r2, [sp, #48]	; 0x30
 80012e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80012e6:	2308      	movs	r3, #8
 80012e8:	930a      	str	r3, [sp, #40]	; 0x28
 80012ea:	2304      	movs	r3, #4
 80012ec:	9309      	str	r3, [sp, #36]	; 0x24
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <_ZN6DS_CNN6run_nnEPaS0_+0x2d0>)
 80012f0:	9308      	str	r3, [sp, #32]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9307      	str	r3, [sp, #28]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9306      	str	r3, [sp, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9305      	str	r3, [sp, #20]
 80012fe:	2300      	movs	r3, #0
 8001300:	9304      	str	r3, [sp, #16]
 8001302:	2301      	movs	r3, #1
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	2301      	movs	r3, #1
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <_ZN6DS_CNN6run_nnEPaS0_+0x2d4>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	2219      	movs	r2, #25
 8001316:	2105      	movs	r1, #5
 8001318:	f005 f9e9 	bl	80066ee <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f981 	bl	800662c <arm_relu_q7>

  //CONV3 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV3_IN_X,CONV3_IN_Y,CONV2_OUT_CH,conv3_ds_wt,CONV2_OUT_CH,CONV3_DS_KX,CONV3_DS_KY,CONV3_DS_PX,CONV3_DS_PY,CONV3_DS_SX,CONV3_DS_SY,conv3_ds_bias,CONV3_DS_BIAS_LSHIFT,CONV3_DS_OUT_RSHIFT,buffer2,CONV3_OUT_X,CONV3_OUT_Y,(q15_t*)col_buffer, NULL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6a12      	ldr	r2, [r2, #32]
 8001336:	2100      	movs	r1, #0
 8001338:	910f      	str	r1, [sp, #60]	; 0x3c
 800133a:	920e      	str	r2, [sp, #56]	; 0x38
 800133c:	2219      	movs	r2, #25
 800133e:	920d      	str	r2, [sp, #52]	; 0x34
 8001340:	2205      	movs	r2, #5
 8001342:	920c      	str	r2, [sp, #48]	; 0x30
 8001344:	930b      	str	r3, [sp, #44]	; 0x2c
 8001346:	2304      	movs	r3, #4
 8001348:	930a      	str	r3, [sp, #40]	; 0x28
 800134a:	2302      	movs	r3, #2
 800134c:	9309      	str	r3, [sp, #36]	; 0x24
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <_ZN6DS_CNN6run_nnEPaS0_+0x2d8>)
 8001350:	9308      	str	r3, [sp, #32]
 8001352:	2301      	movs	r3, #1
 8001354:	9307      	str	r3, [sp, #28]
 8001356:	2301      	movs	r3, #1
 8001358:	9306      	str	r3, [sp, #24]
 800135a:	2301      	movs	r3, #1
 800135c:	9305      	str	r3, [sp, #20]
 800135e:	2301      	movs	r3, #1
 8001360:	9304      	str	r3, [sp, #16]
 8001362:	2303      	movs	r3, #3
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	2303      	movs	r3, #3
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <_ZN6DS_CNN6run_nnEPaS0_+0x2dc>)
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2340      	movs	r3, #64	; 0x40
 8001374:	2219      	movs	r2, #25
 8001376:	2105      	movs	r1, #5
 8001378:	f005 fd56 	bl	8006e28 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001384:	4618      	mov	r0, r3
 8001386:	f005 f951 	bl	800662c <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV3_OUT_X, CONV3_OUT_Y, CONV2_OUT_CH, conv3_pw_wt, CONV3_OUT_CH, 1, 1, 0, 0, 1, 1, conv3_pw_bias, CONV3_PW_BIAS_LSHIFT, CONV3_PW_OUT_RSHIFT, buffer1, CONV3_OUT_X, CONV3_OUT_Y, (q15_t*)col_buffer, NULL);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	6a12      	ldr	r2, [r2, #32]
 8001396:	2100      	movs	r1, #0
 8001398:	910f      	str	r1, [sp, #60]	; 0x3c
 800139a:	920e      	str	r2, [sp, #56]	; 0x38
 800139c:	2219      	movs	r2, #25
 800139e:	920d      	str	r2, [sp, #52]	; 0x34
 80013a0:	2205      	movs	r2, #5
 80013a2:	920c      	str	r2, [sp, #48]	; 0x30
 80013a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80013a6:	2308      	movs	r3, #8
 80013a8:	930a      	str	r3, [sp, #40]	; 0x28
 80013aa:	2305      	movs	r3, #5
 80013ac:	9309      	str	r3, [sp, #36]	; 0x24
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <_ZN6DS_CNN6run_nnEPaS0_+0x2e0>)
 80013b0:	9308      	str	r3, [sp, #32]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9307      	str	r3, [sp, #28]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9306      	str	r3, [sp, #24]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9305      	str	r3, [sp, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <_ZN6DS_CNN6run_nnEPaS0_+0x2e4>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	2219      	movs	r2, #25
 80013d6:	2105      	movs	r1, #5
 80013d8:	f005 f989 	bl	80066ee <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 f921 	bl	800662c <arm_relu_q7>

  //CONV4 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV4_IN_X,CONV4_IN_Y,CONV3_OUT_CH,conv4_ds_wt,CONV3_OUT_CH,CONV4_DS_KX,CONV4_DS_KY,CONV4_DS_PX,CONV4_DS_PY,CONV4_DS_SX,CONV4_DS_SY,conv4_ds_bias,CONV4_DS_BIAS_LSHIFT,CONV4_DS_OUT_RSHIFT,buffer2,CONV4_OUT_X,CONV4_OUT_Y,(q15_t*)col_buffer, NULL);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	6a12      	ldr	r2, [r2, #32]
 80013f6:	2100      	movs	r1, #0
 80013f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80013fa:	920e      	str	r2, [sp, #56]	; 0x38
 80013fc:	2219      	movs	r2, #25
 80013fe:	920d      	str	r2, [sp, #52]	; 0x34
 8001400:	2205      	movs	r2, #5
 8001402:	920c      	str	r2, [sp, #48]	; 0x30
 8001404:	930b      	str	r3, [sp, #44]	; 0x2c
 8001406:	2305      	movs	r3, #5
 8001408:	930a      	str	r3, [sp, #40]	; 0x28
 800140a:	2303      	movs	r3, #3
 800140c:	9309      	str	r3, [sp, #36]	; 0x24
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <_ZN6DS_CNN6run_nnEPaS0_+0x2e8>)
 8001410:	9308      	str	r3, [sp, #32]
 8001412:	2301      	movs	r3, #1
 8001414:	9307      	str	r3, [sp, #28]
 8001416:	2301      	movs	r3, #1
 8001418:	9306      	str	r3, [sp, #24]
 800141a:	2301      	movs	r3, #1
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	2301      	movs	r3, #1
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	2303      	movs	r3, #3
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	2303      	movs	r3, #3
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2340      	movs	r3, #64	; 0x40
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <_ZN6DS_CNN6run_nnEPaS0_+0x2ec>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	2219      	movs	r2, #25
 8001436:	2105      	movs	r1, #5
 8001438:	f005 fcf6 	bl	8006e28 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f8f1 	bl	800662c <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV4_OUT_X, CONV4_OUT_Y, CONV3_OUT_CH, conv4_pw_wt, CONV4_OUT_CH, 1, 1, 0, 0, 1, 1, conv4_pw_bias, CONV4_PW_BIAS_LSHIFT, CONV4_PW_OUT_RSHIFT, buffer1, CONV4_OUT_X, CONV4_OUT_Y, (q15_t*)col_buffer, NULL);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6a12      	ldr	r2, [r2, #32]
 8001456:	2100      	movs	r1, #0
 8001458:	910f      	str	r1, [sp, #60]	; 0x3c
 800145a:	920e      	str	r2, [sp, #56]	; 0x38
 800145c:	2219      	movs	r2, #25
 800145e:	920d      	str	r2, [sp, #52]	; 0x34
 8001460:	2205      	movs	r2, #5
 8001462:	920c      	str	r2, [sp, #48]	; 0x30
 8001464:	930b      	str	r3, [sp, #44]	; 0x2c
 8001466:	2307      	movs	r3, #7
 8001468:	930a      	str	r3, [sp, #40]	; 0x28
 800146a:	2305      	movs	r3, #5
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <_ZN6DS_CNN6run_nnEPaS0_+0x2f0>)
 8001470:	9308      	str	r3, [sp, #32]
 8001472:	2301      	movs	r3, #1
 8001474:	9307      	str	r3, [sp, #28]
 8001476:	2301      	movs	r3, #1
 8001478:	9306      	str	r3, [sp, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	9305      	str	r3, [sp, #20]
 800147e:	2300      	movs	r3, #0
 8001480:	9304      	str	r3, [sp, #16]
 8001482:	2301      	movs	r3, #1
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	2301      	movs	r3, #1
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_ZN6DS_CNN6run_nnEPaS0_+0x2f4>)
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	2219      	movs	r2, #25
 8001496:	2105      	movs	r1, #5
 8001498:	f005 f929 	bl	80066ee <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 f8c1 	bl	800662c <arm_relu_q7>

  //CONV5 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV5_IN_X,CONV5_IN_Y,CONV4_OUT_CH,conv5_ds_wt,CONV4_OUT_CH,CONV5_DS_KX,CONV5_DS_KY,CONV5_DS_PX,CONV5_DS_PY,CONV5_DS_SX,CONV5_DS_SY,conv5_ds_bias,CONV5_DS_BIAS_LSHIFT,CONV5_DS_OUT_RSHIFT,buffer2,CONV5_OUT_X,CONV5_OUT_Y,(q15_t*)col_buffer, NULL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	6a12      	ldr	r2, [r2, #32]
 80014b6:	2100      	movs	r1, #0
 80014b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80014ba:	920e      	str	r2, [sp, #56]	; 0x38
 80014bc:	2219      	movs	r2, #25
 80014be:	e01b      	b.n	80014f8 <_ZN6DS_CNN6run_nnEPaS0_+0x2f8>
 80014c0:	080106ec 	.word	0x080106ec
 80014c4:	0800fcec 	.word	0x0800fcec
 80014c8:	0801096c 	.word	0x0801096c
 80014cc:	0801072c 	.word	0x0801072c
 80014d0:	080119ac 	.word	0x080119ac
 80014d4:	080109ac 	.word	0x080109ac
 80014d8:	08011c2c 	.word	0x08011c2c
 80014dc:	080119ec 	.word	0x080119ec
 80014e0:	08012c6c 	.word	0x08012c6c
 80014e4:	08011c6c 	.word	0x08011c6c
 80014e8:	08012eec 	.word	0x08012eec
 80014ec:	08012cac 	.word	0x08012cac
 80014f0:	08013f2c 	.word	0x08013f2c
 80014f4:	08012f2c 	.word	0x08012f2c
 80014f8:	920d      	str	r2, [sp, #52]	; 0x34
 80014fa:	2205      	movs	r2, #5
 80014fc:	920c      	str	r2, [sp, #48]	; 0x30
 80014fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001500:	2305      	movs	r3, #5
 8001502:	930a      	str	r3, [sp, #40]	; 0x28
 8001504:	2303      	movs	r3, #3
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
 8001508:	4b40      	ldr	r3, [pc, #256]	; (800160c <_ZN6DS_CNN6run_nnEPaS0_+0x40c>)
 800150a:	9308      	str	r3, [sp, #32]
 800150c:	2301      	movs	r3, #1
 800150e:	9307      	str	r3, [sp, #28]
 8001510:	2301      	movs	r3, #1
 8001512:	9306      	str	r3, [sp, #24]
 8001514:	2301      	movs	r3, #1
 8001516:	9305      	str	r3, [sp, #20]
 8001518:	2301      	movs	r3, #1
 800151a:	9304      	str	r3, [sp, #16]
 800151c:	2303      	movs	r3, #3
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	2303      	movs	r3, #3
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2340      	movs	r3, #64	; 0x40
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <_ZN6DS_CNN6run_nnEPaS0_+0x410>)
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	2219      	movs	r2, #25
 8001530:	2105      	movs	r1, #5
 8001532:	f005 fc79 	bl	8006e28 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f874 	bl	800662c <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV5_OUT_X, CONV5_OUT_Y, CONV4_OUT_CH, conv5_pw_wt, CONV5_OUT_CH, 1, 1, 0, 0, 1, 1, conv5_pw_bias, CONV5_PW_BIAS_LSHIFT, CONV5_PW_OUT_RSHIFT, buffer1, CONV5_OUT_X, CONV5_OUT_Y, (q15_t*)col_buffer, NULL);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6a12      	ldr	r2, [r2, #32]
 8001550:	2100      	movs	r1, #0
 8001552:	910f      	str	r1, [sp, #60]	; 0x3c
 8001554:	920e      	str	r2, [sp, #56]	; 0x38
 8001556:	2219      	movs	r2, #25
 8001558:	920d      	str	r2, [sp, #52]	; 0x34
 800155a:	2205      	movs	r2, #5
 800155c:	920c      	str	r2, [sp, #48]	; 0x30
 800155e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001560:	2308      	movs	r3, #8
 8001562:	930a      	str	r3, [sp, #40]	; 0x28
 8001564:	2305      	movs	r3, #5
 8001566:	9309      	str	r3, [sp, #36]	; 0x24
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <_ZN6DS_CNN6run_nnEPaS0_+0x414>)
 800156a:	9308      	str	r3, [sp, #32]
 800156c:	2301      	movs	r3, #1
 800156e:	9307      	str	r3, [sp, #28]
 8001570:	2301      	movs	r3, #1
 8001572:	9306      	str	r3, [sp, #24]
 8001574:	2300      	movs	r3, #0
 8001576:	9305      	str	r3, [sp, #20]
 8001578:	2300      	movs	r3, #0
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	2301      	movs	r3, #1
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	2301      	movs	r3, #1
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <_ZN6DS_CNN6run_nnEPaS0_+0x418>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	2219      	movs	r2, #25
 8001590:	2105      	movs	r1, #5
 8001592:	f005 f8ac 	bl	80066ee <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f844 	bl	800662c <arm_relu_q7>

  //Average pool
  arm_avepool_q7_HWC_nonsquare (buffer1,CONV5_OUT_X,CONV5_OUT_Y,CONV5_OUT_CH,CONV5_OUT_X,CONV5_OUT_Y,0,0,1,1,1,1,NULL,buffer2, 2);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2202      	movs	r2, #2
 80015ae:	920a      	str	r2, [sp, #40]	; 0x28
 80015b0:	9309      	str	r3, [sp, #36]	; 0x24
 80015b2:	2300      	movs	r3, #0
 80015b4:	9308      	str	r3, [sp, #32]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9307      	str	r3, [sp, #28]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9306      	str	r3, [sp, #24]
 80015be:	2301      	movs	r3, #1
 80015c0:	9305      	str	r3, [sp, #20]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9303      	str	r3, [sp, #12]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2319      	movs	r3, #25
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2305      	movs	r3, #5
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	2219      	movs	r2, #25
 80015da:	2105      	movs	r1, #5
 80015dc:	f000 f832 	bl	8001644 <arm_avepool_q7_HWC_nonsquare>

  arm_fully_connected_q7(buffer2, final_fc_wt, CONV5_OUT_CH, OUT_DIM, FINAL_FC_BIAS_LSHIFT, FINAL_FC_OUT_RSHIFT, final_fc_bias, out_data, (q15_t*)col_buffer);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	9303      	str	r3, [sp, #12]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <_ZN6DS_CNN6run_nnEPaS0_+0x41c>)
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2307      	movs	r3, #7
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	2302      	movs	r3, #2
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	230c      	movs	r3, #12
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <_ZN6DS_CNN6run_nnEPaS0_+0x420>)
 8001600:	f007 f8f6 	bl	80087f0 <arm_fully_connected_q7>

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	080141ac 	.word	0x080141ac
 8001610:	08013f6c 	.word	0x08013f6c
 8001614:	080151ec 	.word	0x080151ec
 8001618:	080141ec 	.word	0x080141ec
 800161c:	0801552c 	.word	0x0801552c
 8001620:	0801522c 	.word	0x0801522c

08001624 <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "ML-KWS-for-MCU/NN/nn.h"

NN::~NN() {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <_ZN2NND1Ev+0x1c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	08015554 	.word	0x08015554

08001644 <arm_avepool_q7_HWC_nonsquare>:
        const uint16_t dim_im_out_x,  // output image dimension
        const uint16_t dim_im_out_y,  // output image dimension
        q7_t * bufferA,               // a buffer for local storage
        q7_t * Im_out,                // output feature
        const uint16_t out_lshift)    // output left shift (scaling)
{
 8001644:	b4b0      	push	{r4, r5, r7}
 8001646:	b08b      	sub	sp, #44	; 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	460b      	mov	r3, r1
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	80fb      	strh	r3, [r7, #6]
  int16_t i_ch_in, i_x, i_y;
  int16_t k_x, k_y;
  
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 800165e:	2300      	movs	r3, #0
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001662:	e0b2      	b.n	80017ca <arm_avepool_q7_HWC_nonsquare+0x186>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 8001664:	2300      	movs	r3, #0
 8001666:	847b      	strh	r3, [r7, #34]	; 0x22
 8001668:	e0a2      	b.n	80017b0 <arm_avepool_q7_HWC_nonsquare+0x16c>
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800166a:	2300      	movs	r3, #0
 800166c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800166e:	e092      	b.n	8001796 <arm_avepool_q7_HWC_nonsquare+0x152>
        int sum = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
        int count = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 8001678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800167a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800167e:	fb12 f303 	smulbb	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	83fb      	strh	r3, [r7, #30]
 800168e:	e052      	b.n	8001736 <arm_avepool_q7_HWC_nonsquare+0xf2>
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001692:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001696:	fb12 f303 	smulbb	r3, r2, r3
 800169a:	b29a      	uxth	r2, r3
 800169c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	843b      	strh	r3, [r7, #32]
 80016a6:	e031      	b.n	800170c <arm_avepool_q7_HWC_nonsquare+0xc8>
            if (k_y >= 0 && k_x >= 0 && k_y<dim_im_in_y && k_x<dim_im_in_x) {
 80016a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db27      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db23      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80016bc:	893b      	ldrh	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	da1e      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da19      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
              sum += Im_in[i_ch_in + ch_im_in*(k_x+k_y*dim_im_in_x)];
 80016cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80016d6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80016da:	897c      	ldrh	r4, [r7, #10]
 80016dc:	fb04 f101 	mul.w	r1, r4, r1
 80016e0:	4401      	add	r1, r0
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	f993 3000 	ldrsb.w	r3, [r3]
 80016f2:	461a      	mov	r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4413      	add	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
              count++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	843b      	strh	r3, [r7, #32]
 800170c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001710:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001714:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001718:	fb01 f103 	mul.w	r1, r1, r3
 800171c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001720:	1ac9      	subs	r1, r1, r3
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	440b      	add	r3, r1
 8001726:	429a      	cmp	r2, r3
 8001728:	dbbe      	blt.n	80016a8 <arm_avepool_q7_HWC_nonsquare+0x64>
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 800172a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	83fb      	strh	r3, [r7, #30]
 8001736:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800173a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800173e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8001742:	fb01 f103 	mul.w	r1, r1, r3
 8001746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174e:	440b      	add	r3, r1
 8001750:	429a      	cmp	r2, r3
 8001752:	db9d      	blt.n	8001690 <arm_avepool_q7_HWC_nonsquare+0x4c>
            }
          }
        }
        Im_out[i_ch_in+ch_im_in*(i_x+i_y*dim_im_out_x)] = sum*(0x1<<out_lshift)/count;
 8001754:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	409a      	lsls	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fb92 f5f3 	sdiv	r5, r2, r3
 8001762:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 800176c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001770:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8001774:	fb04 f101 	mul.w	r1, r4, r1
 8001778:	4401      	add	r1, r0
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001784:	4413      	add	r3, r2
 8001786:	b26a      	sxtb	r2, r5
 8001788:	701a      	strb	r2, [r3, #0]
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800178a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800178e:	b29b      	uxth	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001796:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800179a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800179e:	429a      	cmp	r2, r3
 80017a0:	f6ff af66 	blt.w	8001670 <arm_avepool_q7_HWC_nonsquare+0x2c>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 80017a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80017b0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80017b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f6ff af56 	blt.w	800166a <arm_avepool_q7_HWC_nonsquare+0x26>
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 80017be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f6ff af47 	blt.w	8001664 <arm_avepool_q7_HWC_nonsquare+0x20>
      }
    }
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr

080017e2 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>

// constructor
AudioPlayer::AudioPlayer(DAC_HandleTypeDef *hdac)
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
: hdac(hdac)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	611a      	str	r2, [r3, #16]
{
	dac_stop_flag = 1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	731a      	strb	r2, [r3, #12]
}
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af02      	add	r7, sp, #8
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	609a      	str	r2, [r3, #8]
	played_samples = 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
	converted_samples = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]

	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001838:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800183c:	f00c f934 	bl	800daa8 <_Znaj>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	605a      	str	r2, [r3, #4]
	dac_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001848:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800184c:	f00c f92c 	bl	800daa8 <_Znaj>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]


	// initial full read
	update_dac_buffer(0, PLAY_BUFFER_LENGTH);
 8001858:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800185c:	2100      	movs	r1, #0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f834 	bl	80018cc <_ZN11AudioPlayer17update_dac_bufferEmm>

	// Start DAC in circular mode
	dac_stop_flag = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	731a      	strb	r2, [r3, #12]
	if (HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, PLAY_BUFFER_LENGTH, DAC_ALIGN_12B_R) == HAL_ERROR) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6918      	ldr	r0, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800187a:	2100      	movs	r1, #0
 800187c:	f007 fd1c 	bl	80092b8 <HAL_DAC_Start_DMA>
 8001880:	4603      	mov	r3, r0
 8001882:	2b01      	cmp	r3, #1
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
		Error_Handler();
 8001890:	f001 f81c 	bl	80028cc <Error_Handler>
	}
	while(!dac_stop_flag);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7b1b      	ldrb	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d100      	bne.n	800189e <_ZN11AudioPlayer10play_audioEP8WaveData+0x82>
 800189c:	e7fa      	b.n	8001894 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
	delete [] dac_buffer;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <_ZN11AudioPlayer10play_audioEP8WaveData+0x94>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f00c f8e9 	bl	800da82 <_ZdaPv>
	delete [] conversion_buffer;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <_ZN11AudioPlayer10play_audioEP8WaveData+0xa6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f00c f8e0 	bl	800da82 <_ZdaPv>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <_ZN11AudioPlayer17update_dac_bufferEmm>:

// update buffer. Method called by dac callbacks functions.
void AudioPlayer::update_dac_buffer(uint32_t offset, uint32_t data_length) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 80018e0:	617b      	str	r3, [r7, #20]
	uint32_t read_length = data_length;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	61fb      	str	r3, [r7, #28]
	if (read_length >= remaining_samples) {
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d301      	bcc.n	80018f2 <_ZN11AudioPlayer17update_dac_bufferEmm+0x26>
		read_length = remaining_samples;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	61fb      	str	r3, [r7, #28]
	}
	if (read_length > 0) {
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d046      	beq.n	8001986 <_ZN11AudioPlayer17update_dac_bufferEmm+0xba>
		qspi_read((uint8_t*)conversion_buffer, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6858      	ldr	r0, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	18d1      	adds	r1, r2, r3
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	461a      	mov	r2, r3
 8001910:	f000 ffe1 	bl	80028d6 <_Z9qspi_readPhmm>
		for (uint32_t i = 0; i < read_length; i++){
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	d220      	bcs.n	8001962 <_ZN11AudioPlayer17update_dac_bufferEmm+0x96>
			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_DAC_SCALE_FACTOR + WAVE_TO_DAC_BIAS);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001990 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc4>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001994 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc8>
 8001940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001952:	ee17 2a90 	vmov	r2, s15
 8001956:	b292      	uxth	r2, r2
 8001958:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < read_length; i++){
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	3301      	adds	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	e7da      	b.n	8001918 <_ZN11AudioPlayer17update_dac_bufferEmm+0x4c>
		}
		converted_samples += read_length;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	441a      	add	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	619a      	str	r2, [r3, #24]
		memcpy(dac_buffer + offset, conversion_buffer, read_length * DAC_DATA_WIDTH);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	18d0      	adds	r0, r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	461a      	mov	r2, r3
 8001982:	f00d fc95 	bl	800f2b0 <memcpy>
	}
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	3d7ff100 	.word	0x3d7ff100
 8001994:	44fff100 	.word	0x44fff100

08001998 <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	731a      	strb	r2, [r3, #12]
}
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
}
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 8001a02:	2008      	movs	r0, #8
 8001a04:	f00c f83f 	bl	800da86 <_Znwj>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff ffc2 	bl	8001998 <_ZN8WaveDataC1Em>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 8001a18:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001a1c:	f00c f844 	bl	800daa8 <_Znaj>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 8001a28:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001a2c:	f00c f83c 	bl	800daa8 <_Znaj>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6918      	ldr	r0, [r3, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f008 f80c 	bl	8009a68 <HAL_DFSDM_FilterRegularStart_DMA>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 8001a60:	f000 ff34 	bl	80028cc <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <_ZN13AudioRecorder12record_audioEm+0xb8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 8001a6c:	f000 f94c 	bl	8001d08 <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 8001a70:	f002 f90e 	bl	8003c90 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d100      	bne.n	8001a7e <_ZN13AudioRecorder12record_audioEm+0x86>
 8001a7c:	e7fa      	b.n	8001a74 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <_ZN13AudioRecorder12record_audioEm+0x98>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00b fff9 	bl	800da82 <_ZdaPv>
	delete [] wave_buffer;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <_ZN13AudioRecorder12record_audioEm+0xaa>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00b fff0 	bl	800da82 <_ZdaPv>
	return cur_data;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001aca:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d301      	bcc.n	8001adc <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d213      	bcs.n	8001b10 <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	440b      	add	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1419      	asrs	r1, r3, #16
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	b20a      	sxth	r2, r1
 8001b06:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e7e7      	b.n	8001ae0 <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	18d1      	adds	r1, r2, r3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f000 feed 	bl	8002908 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	440a      	add	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <_Z13get_top_classPa>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(q7_t* nn_output) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8001b54:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001b58:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_Z13get_top_classPa+0x58>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d214      	bcs.n	8001b92 <_Z13get_top_classPa+0x4a>
		if (nn_output[i] > max_value) {
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b72:	461a      	mov	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4293      	cmp	r3, r2
 8001b78:	da07      	bge.n	8001b8a <_Z13get_top_classPa+0x42>
			max_index = i;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	f993 3000 	ldrsb.w	r3, [r3]
 8001b88:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e7e5      	b.n	8001b5e <_Z13get_top_classPa+0x16>
		}
	}
	return max_index;
 8001b92:	697b      	ldr	r3, [r7, #20]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <_Z19average_predictionsPaS_mm>:

void average_predictions(q7_t *average_out, q7_t* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6178      	str	r0, [r7, #20]
 8001bac:	6139      	str	r1, [r7, #16]
 8001bae:	60fa      	str	r2, [r7, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
	q15_t *sum = new q15_t[num_output_classes];
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <_Z19average_predictionsPaS_mm+0xdc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d801      	bhi.n	8001bbe <_Z19average_predictionsPaS_mm+0x1a>
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	e001      	b.n	8001bc2 <_Z19average_predictionsPaS_mm+0x1e>
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00b ff70 	bl	800daa8 <_Znaj>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d248      	bcs.n	8001c6a <_Z19average_predictionsPaS_mm+0xc6>
		sum[i] = 0;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	2200      	movs	r2, #0
 8001be2:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d21d      	bcs.n	8001c2c <_Z19average_predictionsPaS_mm+0x88>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	fb01 f103 	mul.w	r1, r1, r3
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	440b      	add	r3, r1
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b299      	uxth	r1, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b20a      	sxth	r2, r1
 8001c22:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	3301      	adds	r3, #1
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	e7dd      	b.n	8001be8 <_Z19average_predictionsPaS_mm+0x44>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	4413      	add	r3, r2
 8001c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c58:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c5c:	793a      	ldrb	r2, [r7, #4]
 8001c5e:	b252      	sxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	e7b2      	b.n	8001bd0 <_Z19average_predictionsPaS_mm+0x2c>
	}
	delete [] sum;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <_Z19average_predictionsPaS_mm+0xd2>
 8001c70:	69f8      	ldr	r0, [r7, #28]
 8001c72:	f00b ff06 	bl	800da82 <_ZdaPv>
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	3ffffffc 	.word	0x3ffffffc

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db12      	blt.n	8001cf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	490a      	ldr	r1, [pc, #40]	; (8001d04 <__NVIC_DisableIRQ+0x44>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	3320      	adds	r3, #32
 8001ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001d0c:	f001 ffae 	bl	8003c6c <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001d10:	201c      	movs	r0, #28
 8001d12:	f7ff ffd5 	bl	8001cc0 <__NVIC_DisableIRQ>
//	NVIC_DisableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d16:	2101      	movs	r1, #1
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f008 ff35 	bl	800ab88 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001d1e:	201c      	movs	r0, #28
 8001d20:	f7ff ffb0 	bl	8001c84 <__NVIC_EnableIRQ>
//	NVIC_EnableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	HAL_ResumeTick();
 8001d24:	f001 ffb4 	bl	8003c90 <HAL_ResumeTick>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b0a7      	sub	sp, #156	; 0x9c
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f007 f96a 	bl	800900e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 fa11 	bl	8002160 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f000 fc41 	bl	80025c4 <_ZL12MX_GPIO_Initv>
  MX_QUADSPI_Init();
 8001d42:	f000 fb4d 	bl	80023e0 <_ZL15MX_QUADSPI_Initv>
  MX_DMA_Init();
 8001d46:	f000 fc0b 	bl	8002560 <_ZL11MX_DMA_Initv>
  MX_DAC_Init();
 8001d4a:	f000 fab5 	bl	80022b8 <_ZL11MX_DAC_Initv>
  MX_DFSDM1_Init();
 8001d4e:	f000 fae7 	bl	8002320 <_ZL14MX_DFSDM1_Initv>
  MX_TIM2_Init();
 8001d52:	f000 fb75 	bl	8002440 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8001d56:	f000 fbcf 	bl	80024f8 <_ZL19MX_USART1_UART_Initv>
//  MX_CRC_Init();
  /* USER CODE BEGIN 2 */

  qspi_init();
 8001d5a:	f000 fdee 	bl	800293a <_Z9qspi_initv>
  HAL_TIM_Base_Start_IT(&htim2);
 8001d5e:	48c2      	ldr	r0, [pc, #776]	; (8002068 <main+0x338>)
 8001d60:	f00a fd2a 	bl	800c7b8 <HAL_TIM_Base_Start_IT>
  main_state = SETUP;
 8001d64:	4bc1      	ldr	r3, [pc, #772]	; (800206c <main+0x33c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"Silence", "Unknown","yes","no","up","down","left","right","on","off","stop","go"};
 8001d6a:	4ac1      	ldr	r2, [pc, #772]	; (8002070 <main+0x340>)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4611      	mov	r1, r2
 8001d70:	2260      	movs	r2, #96	; 0x60
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00d fa9c 	bl	800f2b0 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(main_state) {
 8001d78:	4bbc      	ldr	r3, [pc, #752]	; (800206c <main+0x33c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d8fa      	bhi.n	8001d78 <main+0x48>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <main+0x58>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08002139 	.word	0x08002139
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001deb 	.word	0x08001deb
 8001d94:	08001e47 	.word	0x08001e47
 8001d98:	08002101 	.word	0x08002101
	case SETUP:
	{
		ITM_Port32(31) = 1;
 8001d9c:	4bb5      	ldr	r3, [pc, #724]	; (8002074 <main+0x344>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2120      	movs	r1, #32
 8001da6:	48b4      	ldr	r0, [pc, #720]	; (8002078 <main+0x348>)
 8001da8:	f008 fed4 	bl	800ab54 <HAL_GPIO_WritePin>

		// To indicate to user, don't do nothing when red light
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db2:	48b1      	ldr	r0, [pc, #708]	; (8002078 <main+0x348>)
 8001db4:	f008 fece 	bl	800ab54 <HAL_GPIO_WritePin>
		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 8001db8:	2106      	movs	r1, #6
 8001dba:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8001dbe:	f000 fdcd 	bl	800295c <_Z17qspi_erase_blocksmm>
		HAL_Delay(2000);
 8001dc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dc6:	f007 f94f 	bl	8009068 <HAL_Delay>

		ITM_Port32(31) = 2;
 8001dca:	4baa      	ldr	r3, [pc, #680]	; (8002074 <main+0x344>)
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
		print("Press the blue button and say a keyword\r\n");
 8001dd0:	48aa      	ldr	r0, [pc, #680]	; (800207c <main+0x34c>)
 8001dd2:	f000 fd4f 	bl	8002874 <print>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ddc:	48a6      	ldr	r0, [pc, #664]	; (8002078 <main+0x348>)
 8001dde:	f008 feb9 	bl	800ab54 <HAL_GPIO_WritePin>
		main_state = READY;
 8001de2:	4ba2      	ldr	r3, [pc, #648]	; (800206c <main+0x33c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		break;
 8001de8:	e1ad      	b.n	8002146 <main+0x416>
	}
	case RECORDING:
	{
		ITM_Port32(31) = 3;
 8001dea:	4ba2      	ldr	r3, [pc, #648]	; (8002074 <main+0x344>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
 8001df2:	2120      	movs	r1, #32
 8001df4:	48a0      	ldr	r0, [pc, #640]	; (8002078 <main+0x348>)
 8001df6:	f008 fead 	bl	800ab54 <HAL_GPIO_WritePin>
		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 8001dfa:	2014      	movs	r0, #20
 8001dfc:	f00b fe43 	bl	800da86 <_Znwj>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461c      	mov	r4, r3
 8001e04:	499e      	ldr	r1, [pc, #632]	; (8002080 <main+0x350>)
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff fdd8 	bl	80019bc <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	; (8002084 <main+0x354>)
 8001e0e:	601c      	str	r4, [r3, #0]
		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8001e10:	4b9c      	ldr	r3, [pc, #624]	; (8002084 <main+0x354>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fded 	bl	80019f8 <_ZN13AudioRecorder12record_audioEm>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a99      	ldr	r2, [pc, #612]	; (8002088 <main+0x358>)
 8001e22:	6013      	str	r3, [r2, #0]

		ITM_Port32(31) = 4;
 8001e24:	4b93      	ldr	r3, [pc, #588]	; (8002074 <main+0x344>)
 8001e26:	2204      	movs	r2, #4
 8001e28:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4892      	ldr	r0, [pc, #584]	; (8002078 <main+0x348>)
 8001e30:	f008 fe90 	bl	800ab54 <HAL_GPIO_WritePin>
//		main_state = NN;
		audio_recorder->~AudioRecorder();
 8001e34:	4b93      	ldr	r3, [pc, #588]	; (8002084 <main+0x354>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fdd1 	bl	80019e0 <_ZN13AudioRecorderD1Ev>
		main_state = AUDIO_TEST;
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <main+0x33c>)
 8001e40:	2204      	movs	r2, #4
 8001e42:	701a      	strb	r2, [r3, #0]
		break;
 8001e44:	e17f      	b.n	8002146 <main+0x416>
	}
	case NN:
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4c:	488a      	ldr	r0, [pc, #552]	; (8002078 <main+0x348>)
 8001e4e:	f008 fe81 	bl	800ab54 <HAL_GPIO_WritePin>

		// input buffer
		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 8001e52:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e56:	f00b fe27 	bl	800daa8 <_Znaj>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// mfcc coefficients
		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 8001e60:	2101      	movs	r1, #1
 8001e62:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8001e66:	f00d f9e1 	bl	800f22c <calloc>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// output buffer
		q7_t *predictions = (q7_t*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(q7_t));
 8001e6e:	2101      	movs	r1, #1
 8001e70:	206c      	movs	r0, #108	; 0x6c
 8001e72:	f00d f9db 	bl	800f22c <calloc>
 8001e76:	4603      	mov	r3, r0
 8001e78:	67bb      	str	r3, [r7, #120]	; 0x78

		// average predictions
		q7_t *average = new q7_t[NUM_OUTPUT_CLASSES];
 8001e7a:	200c      	movs	r0, #12
 8001e7c:	f00b fe14 	bl	800daa8 <_Znaj>
 8001e80:	4603      	mov	r3, r0
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74

		uint32_t pred_index;

		q7_t *mfcc_head;
		DS_CNN *ds_cnn = new DS_CNN();
 8001e84:	202c      	movs	r0, #44	; 0x2c
 8001e86:	f00b fdfe 	bl	800da86 <_Znwj>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff f94e 	bl	8001130 <_ZN6DS_CNNC1Ev>
 8001e94:	673c      	str	r4, [r7, #112]	; 0x70
		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 8001e96:	2034      	movs	r0, #52	; 0x34
 8001e98:	f00b fdf5 	bl	800da86 <_Znwj>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461c      	mov	r4, r3
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001ea6:	210a      	movs	r1, #10
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7fe fc5d 	bl	8000768 <_ZN4MFCCC1Eiii>
 8001eae:	66fc      	str	r4, [r7, #108]	; 0x6c

		bool keyword_detected = false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		q7_t *average_window_head = predictions;
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	f200 80ea 	bhi.w	80020a0 <main+0x370>
				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 8001ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ed0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001edc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001ee6:	f000 fcf6 	bl	80028d6 <_Z9qspi_readPhmm>
				// move old data to the left
				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS * sizeof(q7_t));
 8001eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eec:	3332      	adds	r3, #50	; 0x32
 8001eee:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001ef2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 ffc4 	bl	8003e82 <arm_copy_q7>
				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8001efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001efc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d81a      	bhi.n	8001f48 <main+0x218>
					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8001f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f24:	4413      	add	r3, r2
 8001f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f2e:	f7fe ff29 	bl	8000d84 <_ZN4MFCC12mfcc_computeEPKsPa>
					mfcc_head += NUM_MFCC_COEFFS;
 8001f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f36:	330a      	adds	r3, #10
 8001f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f40:	3301      	adds	r3, #1
 8001f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f46:	e7e0      	b.n	8001f0a <main+0x1da>
				}
				q7_t* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8001f48:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f58:	4413      	add	r3, r2
 8001f5a:	66bb      	str	r3, [r7, #104]	; 0x68
				ds_cnn->run_nn(mfcc_out, nn_out);
 8001f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3308      	adds	r3, #8
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f68:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f6a:	4798      	blx	r3
//				arm_softmax_q7(nn_out,NUM_OUTPUT_CLASSES,nn_out);

				// get prediction for each recording window
				if (DEBUG_MODE) {
 8001f6c:	4b47      	ldr	r3, [pc, #284]	; (800208c <main+0x35c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d014      	beq.n	8001f9e <main+0x26e>
					pred_index = get_top_class(nn_out);
 8001f74:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001f76:	f7ff fde7 	bl	8001b48 <_Z13get_top_classPa>
 8001f7a:	6678      	str	r0, [r7, #100]	; 0x64
					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], nn_out[pred_index]);
 8001f7c:	1d3a      	adds	r2, r7, #4
 8001f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	18d1      	adds	r1, r2, r3
 8001f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f88:	4413      	add	r3, r2
 8001f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f8e:	460a      	mov	r2, r1
 8001f90:	493f      	ldr	r1, [pc, #252]	; (8002090 <main+0x360>)
 8001f92:	4840      	ldr	r0, [pc, #256]	; (8002094 <main+0x364>)
 8001f94:	f00d faca 	bl	800f52c <siprintf>
					print(uart_buffer);
 8001f98:	483e      	ldr	r0, [pc, #248]	; (8002094 <main+0x364>)
 8001f9a:	f000 fc6b 	bl	8002874 <print>
				}

				// increment average window pointer
				if (i >= AVERAGE_WINDOW_LENGTH) {
 8001f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d904      	bls.n	8001fb0 <main+0x280>
					average_window_head += NUM_OUTPUT_CLASSES;
 8001fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001faa:	330c      	adds	r3, #12
 8001fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001fb8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fba:	f7ff fdf3 	bl	8001ba4 <_Z19average_predictionsPaS_mm>
				pred_index = get_top_class(average);
 8001fbe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fc0:	f7ff fdc2 	bl	8001b48 <_Z13get_top_classPa>
 8001fc4:	6678      	str	r0, [r7, #100]	; 0x64

				if (DEBUG_MODE) {
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <main+0x35c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d010      	beq.n	8001ff0 <main+0x2c0>
					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], average[pred_index]);
 8001fce:	1d3a      	adds	r2, r7, #4
 8001fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	18d1      	adds	r1, r2, r3
 8001fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fda:	4413      	add	r3, r2
 8001fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	492d      	ldr	r1, [pc, #180]	; (8002098 <main+0x368>)
 8001fe4:	482b      	ldr	r0, [pc, #172]	; (8002094 <main+0x364>)
 8001fe6:	f00d faa1 	bl	800f52c <siprintf>
					print(uart_buffer);
 8001fea:	482a      	ldr	r0, [pc, #168]	; (8002094 <main+0x364>)
 8001fec:	f000 fc42 	bl	8002874 <print>
				}

				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 8001ff0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002002:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002050 <main+0x320>
 8002006:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800200a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002058 <main+0x328>
 800200e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002012:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002060 <main+0x330>
 8002016:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dd0f      	ble.n	8002040 <main+0x310>
					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 8002020:	1d3a      	adds	r2, r7, #4
 8002022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	461a      	mov	r2, r3
 800202a:	491c      	ldr	r1, [pc, #112]	; (800209c <main+0x36c>)
 800202c:	4819      	ldr	r0, [pc, #100]	; (8002094 <main+0x364>)
 800202e:	f00d fa7d 	bl	800f52c <siprintf>
					print(uart_buffer);
 8002032:	4818      	ldr	r0, [pc, #96]	; (8002094 <main+0x364>)
 8002034:	f000 fc1e 	bl	8002874 <print>
					keyword_detected = true;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
					break;
 800203e:	e02f      	b.n	80020a0 <main+0x370>
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8002040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002044:	3301      	adds	r3, #1
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800204a:	e73a      	b.n	8001ec2 <main+0x192>
 800204c:	f3af 8000 	nop.w
 8002050:	00000000 	.word	0x00000000
 8002054:	40600000 	.word	0x40600000
 8002058:	00000000 	.word	0x00000000
 800205c:	40590000 	.word	0x40590000
 8002060:	00000000 	.word	0x00000000
 8002064:	40418000 	.word	0x40418000
 8002068:	20000248 	.word	0x20000248
 800206c:	20000318 	.word	0x20000318
 8002070:	0800fc8c 	.word	0x0800fc8c
 8002074:	e000007c 	.word	0xe000007c
 8002078:	40022400 	.word	0x40022400
 800207c:	0800fbf0 	.word	0x0800fbf0
 8002080:	20000110 	.word	0x20000110
 8002084:	20000380 	.word	0x20000380
 8002088:	20000384 	.word	0x20000384
 800208c:	20000005 	.word	0x20000005
 8002090:	0800fc1c 	.word	0x0800fc1c
 8002094:	2000031c 	.word	0x2000031c
 8002098:	0800fc3c 	.word	0x0800fc3c
 800209c:	0800fc58 	.word	0x0800fc58
				}
		}

		if (!keyword_detected) {
 80020a0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <main+0x384>
			print("No keyword detected.");
 80020ae:	4826      	ldr	r0, [pc, #152]	; (8002148 <main+0x418>)
 80020b0:	f000 fbe0 	bl	8002874 <print>
		}

		mfcc->~MFCC();
 80020b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020b6:	f7fe fc27 	bl	8000908 <_ZN4MFCCD1Ev>
		ds_cnn->~DS_CNN();
 80020ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80020c2:	4798      	blx	r3
		delete [] mfcc_out;
 80020c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <main+0x3a0>
 80020ca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80020cc:	f00b fcd9 	bl	800da82 <_ZdaPv>
		delete [] predictions;
 80020d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <main+0x3ac>
 80020d6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80020d8:	f00b fcd3 	bl	800da82 <_ZdaPv>
		delete [] average;
 80020dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <main+0x3b8>
 80020e2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80020e4:	f00b fccd 	bl	800da82 <_ZdaPv>
		delete [] audio_buffer;
 80020e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <main+0x3c8>
 80020f0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80020f4:	f00b fcc5 	bl	800da82 <_ZdaPv>
		main_state = SETUP;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <main+0x41c>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
		break;
 80020fe:	e022      	b.n	8002146 <main+0x416>
	}
	case AUDIO_TEST:
	{
		audio_player = new AudioPlayer(&hdac);
 8002100:	201c      	movs	r0, #28
 8002102:	f00b fcc0 	bl	800da86 <_Znwj>
 8002106:	4603      	mov	r3, r0
 8002108:	461c      	mov	r4, r3
 800210a:	4911      	ldr	r1, [pc, #68]	; (8002150 <main+0x420>)
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff fb68 	bl	80017e2 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <main+0x424>)
 8002114:	601c      	str	r4, [r3, #0]
		audio_player->play_audio(wave_data);
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <main+0x424>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <main+0x428>)
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fb7b 	bl	800181c <_ZN11AudioPlayer10play_audioEP8WaveData>

//		audio_recorder->print_data(wave_data);
		main_state = NN;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <main+0x41c>)
 8002128:	2203      	movs	r2, #3
 800212a:	701a      	strb	r2, [r3, #0]
//		main_state = SETUP;
		audio_player->~AudioPlayer();
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <main+0x424>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fb68 	bl	8001806 <_ZN11AudioPlayerD1Ev>

		break;
 8002136:	e006      	b.n	8002146 <main+0x416>
	}
	case READY:
	{
		if (LOW_POWER_MODE)
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <main+0x42c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <main+0x414>
			enter_sleep_mode();
 8002140:	f7ff fde2 	bl	8001d08 <_Z16enter_sleep_modev>
		break;
 8002144:	bf00      	nop
	}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002146:	e617      	b.n	8001d78 <main+0x48>
 8002148:	0800fc74 	.word	0x0800fc74
 800214c:	20000318 	.word	0x20000318
 8002150:	2000009c 	.word	0x2000009c
 8002154:	20000388 	.word	0x20000388
 8002158:	20000384 	.word	0x20000384
 800215c:	20000004 	.word	0x20000004

08002160 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0b8      	sub	sp, #224	; 0xe0
 8002164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002166:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800216a:	2234      	movs	r2, #52	; 0x34
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f00d f8c6 	bl	800f300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002174:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	2290      	movs	r2, #144	; 0x90
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f00d f8b7 	bl	800f300 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <_Z18SystemClock_Configv+0x14c>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a45      	ldr	r2, [pc, #276]	; (80022ac <_Z18SystemClock_Configv+0x14c>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b43      	ldr	r3, [pc, #268]	; (80022ac <_Z18SystemClock_Configv+0x14c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <_Z18SystemClock_Configv+0x150>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <_Z18SystemClock_Configv+0x150>)
 80021b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <_Z18SystemClock_Configv+0x150>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ce:	2310      	movs	r3, #16
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d4:	2302      	movs	r3, #2
 80021d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021e0:	2308      	movs	r3, #8
 80021e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80021e6:	23d8      	movs	r3, #216	; 0xd8
 80021e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021f2:	2304      	movs	r3, #4
 80021f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002202:	4618      	mov	r0, r3
 8002204:	f009 f9a2 	bl	800b54c <HAL_RCC_OscConfig>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8002218:	f000 fb58 	bl	80028cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800221c:	f008 fcd6 	bl	800abcc <HAL_PWREx_EnableOverDrive>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002230:	f000 fb4c 	bl	80028cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002234:	230f      	movs	r3, #15
 8002236:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223a:	2302      	movs	r3, #2
 800223c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002246:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002252:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002256:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800225a:	2107      	movs	r1, #7
 800225c:	4618      	mov	r0, r3
 800225e:	f009 fc23 	bl	800baa8 <HAL_RCC_ClockConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 8002272:	f000 fb2b 	bl	80028cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1;
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <_Z18SystemClock_Configv+0x154>)
 8002278:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800227a:	2300      	movs	r3, #0
 800227c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	4618      	mov	r0, r3
 800228a:	f009 fe15 	bl	800beb8 <HAL_RCCEx_PeriphCLKConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <_Z18SystemClock_Configv+0x142>
  {
    Error_Handler();
 800229e:	f000 fb15 	bl	80028cc <Error_Handler>
  }
}
 80022a2:	bf00      	nop
 80022a4:	37e0      	adds	r7, #224	; 0xe0
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000
 80022b4:	08000040 	.word	0x08000040

080022b8 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80022be:	463b      	mov	r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <_ZL11MX_DAC_Initv+0x60>)
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_ZL11MX_DAC_Initv+0x64>)
 80022ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022cc:	4812      	ldr	r0, [pc, #72]	; (8002318 <_ZL11MX_DAC_Initv+0x60>)
 80022ce:	f006 ffd1 	bl	8009274 <HAL_DAC_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 80022e2:	f000 faf3 	bl	80028cc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80022e6:	2324      	movs	r3, #36	; 0x24
 80022e8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80022ee:	463b      	mov	r3, r7
 80022f0:	2200      	movs	r2, #0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4808      	ldr	r0, [pc, #32]	; (8002318 <_ZL11MX_DAC_Initv+0x60>)
 80022f6:	f007 f8fd 	bl	80094f4 <HAL_DAC_ConfigChannel>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 800230a:	f000 fadf 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000009c 	.word	0x2000009c
 800231c:	40007400 	.word	0x40007400

08002320 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xb0>)
 8002328:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800232a:	4b28      	ldr	r3, [pc, #160]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 8002332:	2200      	movs	r2, #0
 8002334:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 8002338:	2200      	movs	r2, #0
 800233a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 800233e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002342:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 200;
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 8002346:	22c8      	movs	r2, #200	; 0xc8
 8002348:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 800234c:	2201      	movs	r2, #1
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8002350:	481e      	ldr	r0, [pc, #120]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 8002352:	f007 fa69 	bl	8009828 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002356:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb8>)
 800235a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800235e:	2201      	movs	r2, #1
 8002360:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 68;
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800236a:	2244      	movs	r2, #68	; 0x44
 800236c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002376:	2200      	movs	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002388:	2204      	movs	r2, #4
 800238a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002394:	2201      	movs	r2, #1
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800239a:	2200      	movs	r2, #0
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80023a4:	480b      	ldr	r0, [pc, #44]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb4>)
 80023a6:	f007 f97f 	bl	80096a8 <HAL_DFSDM_ChannelInit>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <_ZL14MX_DFSDM1_Initv+0x9e>
  {
    Error_Handler();
 80023ba:	f000 fa87 	bl	80028cc <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON);
 80023be:	2201      	movs	r2, #1
 80023c0:	4906      	ldr	r1, [pc, #24]	; (80023dc <_ZL14MX_DFSDM1_Initv+0xbc>)
 80023c2:	4802      	ldr	r0, [pc, #8]	; (80023cc <_ZL14MX_DFSDM1_Initv+0xac>)
 80023c4:	f007 fb0a 	bl	80099dc <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000110 	.word	0x20000110
 80023d0:	40017500 	.word	0x40017500
 80023d4:	20000164 	.word	0x20000164
 80023d8:	40017440 	.word	0x40017440
 80023dc:	00020004 	.word	0x00020004

080023e0 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <_ZL15MX_QUADSPI_Initv+0x5c>)
 80023e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ec:	22ff      	movs	r2, #255	; 0xff
 80023ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 80023fe:	2201      	movs	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 8002416:	2200      	movs	r2, #0
 8002418:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800241a:	4807      	ldr	r0, [pc, #28]	; (8002438 <_ZL15MX_QUADSPI_Initv+0x58>)
 800241c:	f008 fc26 	bl	800ac6c <HAL_QSPI_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8002430:	f000 fa4c 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200001fc 	.word	0x200001fc
 800243c:	a0001000 	.word	0xa0001000

08002440 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	f107 0310 	add.w	r3, r7, #16
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800245e:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002460:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002464:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 13500;
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002474:	f243 42bc 	movw	r2, #13500	; 0x34bc
 8002478:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002486:	481b      	ldr	r0, [pc, #108]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8002488:	f00a f93e 	bl	800c708 <HAL_TIM_Base_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 800249c:	f000 fa16 	bl	80028cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4619      	mov	r1, r3
 80024ac:	4811      	ldr	r0, [pc, #68]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 80024ae:	f00a fb1b 	bl	800cae8 <HAL_TIM_ConfigClockSource>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80024c2:	f000 fa03 	bl	80028cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4808      	ldr	r0, [pc, #32]	; (80024f4 <_ZL12MX_TIM2_Initv+0xb4>)
 80024d4:	f00a fd34 	bl	800cf40 <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80024e8:	f000 f9f0 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000248 	.word	0x20000248

080024f8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024fe:	4a17      	ldr	r2, [pc, #92]	; (800255c <_ZL19MX_USART1_UART_Initv+0x64>)
 8002500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 800251e:	220c      	movs	r2, #12
 8002520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800253a:	4807      	ldr	r0, [pc, #28]	; (8002558 <_ZL19MX_USART1_UART_Initv+0x60>)
 800253c:	f00a fdac 	bl	800d098 <HAL_UART_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002550:	f000 f9bc 	bl	80028cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000294 	.word	0x20000294
 800255c:	40011000 	.word	0x40011000

08002560 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <_ZL11MX_DMA_Initv+0x60>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <_ZL11MX_DMA_Initv+0x60>)
 800256c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <_ZL11MX_DMA_Initv+0x60>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <_ZL11MX_DMA_Initv+0x60>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <_ZL11MX_DMA_Initv+0x60>)
 8002584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <_ZL11MX_DMA_Initv+0x60>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2010      	movs	r0, #16
 800259c:	f006 fe40 	bl	8009220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025a0:	2010      	movs	r0, #16
 80025a2:	f006 fe59 	bl	8009258 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2038      	movs	r0, #56	; 0x38
 80025ac:	f006 fe38 	bl	8009220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025b0:	2038      	movs	r0, #56	; 0x38
 80025b2:	f006 fe51 	bl	8009258 <HAL_NVIC_EnableIRQ>

}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800

080025c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a36      	ldr	r2, [pc, #216]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 80025e0:	f043 0310 	orr.w	r3, r3, #16
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002640:	f043 0304 	orr.w	r3, r3, #4
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <_ZL12MX_GPIO_Initv+0xf4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800266a:	2200      	movs	r2, #0
 800266c:	f242 0120 	movw	r1, #8224	; 0x2020
 8002670:	4812      	ldr	r0, [pc, #72]	; (80026bc <_ZL12MX_GPIO_Initv+0xf8>)
 8002672:	f008 fa6f 	bl	800ab54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8002676:	f242 0320 	movw	r3, #8224	; 0x2020
 800267a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4619      	mov	r1, r3
 800268e:	480b      	ldr	r0, [pc, #44]	; (80026bc <_ZL12MX_GPIO_Initv+0xf8>)
 8002690:	f007 ffa8 	bl	800a5e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002694:	2301      	movs	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002698:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800269c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <_ZL12MX_GPIO_Initv+0xfc>)
 80026aa:	f007 ff9b 	bl	800a5e4 <HAL_GPIO_Init>

}
 80026ae:	bf00      	nop
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40022400 	.word	0x40022400
 80026c0:	40020000 	.word	0x40020000

080026c4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
		break;
	}
}

// DAC Circular DMA callback functions
void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d128      	bne.n	8002728 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 80026e4:	615a      	str	r2, [r3, #20]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80026f0:	d312      	bcc.n	8002718 <HAL_DAC_ConvHalfCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 80026f2:	2100      	movs	r1, #0
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f006 feab 	bl	8009450 <HAL_DAC_Stop_DMA>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_DAC_ConvHalfCpltCallbackCh1+0x4a>
				Error_Handler();
 800270a:	f000 f8df 	bl	80028cc <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002716:	e007      	b.n	8002728 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f8d2 	bl	80018cc <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40007400 	.word	0x40007400
 8002734:	20000388 	.word	0x20000388

08002738 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 800274e:	615a      	str	r2, [r3, #20]
	if (hdac->Instance == DAC1) {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a15      	ldr	r2, [pc, #84]	; (80027ac <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d121      	bne.n	800279e <HAL_DAC_ConvCpltCallbackCh1+0x66>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002764:	d312      	bcc.n	800278c <HAL_DAC_ConvCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 8002766:	2100      	movs	r1, #0
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f006 fe71 	bl	8009450 <HAL_DAC_Stop_DMA>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_DAC_ConvCpltCallbackCh1+0x4a>
				Error_Handler();
 800277e:	f000 f8a5 	bl	80028cc <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 800278a:	e008      	b.n	800279e <HAL_DAC_ConvCpltCallbackCh1+0x66>
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002794:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff f897 	bl	80018cc <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000388 	.word	0x20000388
 80027ac:	40007400 	.word	0x40007400

080027b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a13      	ldr	r2, [pc, #76]	; (8002808 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d11f      	bne.n	8002800 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f972 	bl	8001ab4 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027dc:	d310      	bcc.n	8002800 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f007 f9c2 	bl	8009b70 <HAL_DFSDM_FilterRegularStop_DMA>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 80027fc:	f000 f866 	bl	80028cc <Error_Handler>
			}
		}
	}
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000110 	.word	0x20000110
 800280c:	20000380 	.word	0x20000380

08002810 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d120      	bne.n	8002862 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002828:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff f941 	bl	8001ab4 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800283e:	d310      	bcc.n	8002862 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2201      	movs	r2, #1
 8002846:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f007 f991 	bl	8009b70 <HAL_DFSDM_FilterRegularStop_DMA>
 800284e:	4603      	mov	r3, r0
 8002850:	2b01      	cmp	r3, #1
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 800285e:	f000 f835 	bl	80028cc <Error_Handler>
			}
		}

	}
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000110 	.word	0x20000110
 8002870:	20000380 	.word	0x20000380

08002874 <print>:

void print(const char* txt) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4808      	ldr	r0, [pc, #32]	; (80028a0 <print+0x2c>)
 8002880:	f00c fe74 	bl	800f56c <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7fd fd3b 	bl	8000300 <strlen>
 800288a:	4603      	mov	r3, r0
 800288c:	b29a      	uxth	r2, r3
 800288e:	230a      	movs	r3, #10
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <print+0x2c>)
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <print+0x30>)
 8002894:	f00a fc4e 	bl	800d134 <HAL_UART_Transmit>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000031c 	.word	0x2000031c
 80028a4:	20000294 	.word	0x20000294

080028a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028ba:	f006 fbb5 	bl	8009028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40001c00 	.word	0x40001c00

080028cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <Error_Handler+0x8>

080028d6 <_Z9qspi_readPhmm>:
#include <stdint.h>
#include "stm32f769i_discovery_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f8c4 	bl	8002a74 <BSP_QSPI_Read>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 80028fc:	f7ff ffe6 	bl	80028cc <Error_Handler>
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f8ff 	bl	8002b1c <BSP_QSPI_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 800292e:	f7ff ffcd 	bl	80028cc <Error_Handler>
	}
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_Z9qspi_initv>:

void qspi_init() {
 800293a:	b580      	push	{r7, lr}
 800293c:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 800293e:	f000 f829 	bl	8002994 <BSP_QSPI_Init>
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}

08002946 <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f962 	bl	8002c18 <BSP_QSPI_Erase_Block>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d90b      	bls.n	800298a <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25L512_SUBSECTOR_SIZE);
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	031b      	lsls	r3, r3, #12
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ffe2 	bl	8002946 <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3301      	adds	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e7ef      	b.n	800296a <_Z17qspi_erase_blocksmm+0xe>
	}
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 800299a:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 800299c:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <BSP_QSPI_Init+0xdc>)
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80029a0:	4832      	ldr	r0, [pc, #200]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029a2:	f008 f9df 	bl	800ad64 <HAL_QSPI_DeInit>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e059      	b.n	8002a64 <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80029b0:	2100      	movs	r1, #0
 80029b2:	482e      	ldr	r0, [pc, #184]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029b4:	f000 f974 	bl	8002ca0 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029c0:	2210      	movs	r2, #16
 80029c2:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 80029c4:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029c6:	2210      	movs	r2, #16
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029ce:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029d8:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029e6:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 80029e8:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029ee:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002a02:	481a      	ldr	r0, [pc, #104]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 8002a04:	f008 f932 	bl	800ac6c <HAL_QSPI_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e028      	b.n	8002a64 <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002a12:	4816      	ldr	r0, [pc, #88]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 8002a14:	f000 fa06 	bl	8002e24 <QSPI_ResetMemory>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e020      	b.n	8002a64 <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8002a22:	4812      	ldr	r0, [pc, #72]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 8002a24:	f000 fc1d 	bl	8003262 <QSPI_EnterMemory_QPI>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e018      	b.n	8002a64 <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8002a32:	480e      	ldr	r0, [pc, #56]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 8002a34:	f000 fb1e 	bl	8003074 <QSPI_EnterFourBytesAddress>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e010      	b.n	8002a64 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002a42:	480a      	ldr	r0, [pc, #40]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 8002a44:	f000 fb51 	bl	80030ea <QSPI_DummyCyclesCfg>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e008      	b.n	8002a64 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8002a52:	4806      	ldr	r0, [pc, #24]	; (8002a6c <BSP_QSPI_Init+0xd8>)
 8002a54:	f000 fc52 	bl	80032fc <QSPI_OutDrvStrengthCfg>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e000      	b.n	8002a64 <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200003c8 	.word	0x200003c8
 8002a70:	a0001000 	.word	0xa0001000

08002a74 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b092      	sub	sp, #72	; 0x48
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002a80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8002a86:	23ec      	movs	r3, #236	; 0xec
 8002a88:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002a8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002a90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a94:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002a9e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8002aa4:	230a      	movs	r3, #10
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4815      	ldr	r0, [pc, #84]	; (8002b18 <BSP_QSPI_Read+0xa4>)
 8002ac4:	f008 f972 	bl	800adac <HAL_QSPI_Command>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01d      	b.n	8002b0e <BSP_QSPI_Read+0x9a>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_1_CYCLE);
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <BSP_QSPI_Read+0xa4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <BSP_QSPI_Read+0xa4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ae0:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	480b      	ldr	r0, [pc, #44]	; (8002b18 <BSP_QSPI_Read+0xa4>)
 8002aea:	f008 fa4f 	bl	800af8c <HAL_QSPI_Receive>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <BSP_QSPI_Read+0x84>
  {
    return QSPI_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e00a      	b.n	8002b0e <BSP_QSPI_Read+0x9a>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <BSP_QSPI_Read+0xa4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <BSP_QSPI_Read+0xa4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b0a:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3748      	adds	r7, #72	; 0x48
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200003c8 	.word	0x200003c8

08002b1c <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b096      	sub	sp, #88	; 0x58
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25L512_PAGE_SIZE - (WriteAddr % MX25L512_PAGE_SIZE);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002b30:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002b32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d901      	bls.n	8002b3e <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 8002b50:	2312      	movs	r3, #18
 8002b52:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002b54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002b5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b5e:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002b64:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b72:	2300      	movs	r3, #0
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b76:	2300      	movs	r3, #0
 8002b78:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7c:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002b82:	4824      	ldr	r0, [pc, #144]	; (8002c14 <BSP_QSPI_Write+0xf8>)
 8002b84:	f000 fc76 	bl	8003474 <QSPI_WriteEnable>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e03b      	b.n	8002c0a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	481d      	ldr	r0, [pc, #116]	; (8002c14 <BSP_QSPI_Write+0xf8>)
 8002b9e:	f008 f905 	bl	800adac <HAL_QSPI_Command>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e02e      	b.n	8002c0a <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	4818      	ldr	r0, [pc, #96]	; (8002c14 <BSP_QSPI_Write+0xf8>)
 8002bb4:	f008 f958 	bl	800ae68 <HAL_QSPI_Transmit>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e023      	b.n	8002c0a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002bc2:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bc6:	4813      	ldr	r0, [pc, #76]	; (8002c14 <BSP_QSPI_Write+0xf8>)
 8002bc8:	f000 fc9d 	bl	8003506 <QSPI_AutoPollingMemReady>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e019      	b.n	8002c0a <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002bd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bda:	4413      	add	r3, r2
 8002bdc:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be2:	4413      	add	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25L512_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25L512_PAGE_SIZE;
 8002be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d203      	bcs.n	8002bfa <BSP_QSPI_Write+0xde>
 8002bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	e001      	b.n	8002bfe <BSP_QSPI_Write+0xe2>
 8002bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bfe:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002c00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3b8      	bcc.n	8002b7a <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3758      	adds	r7, #88	; 0x58
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200003c8 	.word	0x200003c8

08002c18 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b090      	sub	sp, #64	; 0x40
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c24:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 8002c26:	2321      	movs	r3, #33	; 0x21
 8002c28:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002c2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002c30:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c34:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002c52:	4812      	ldr	r0, [pc, #72]	; (8002c9c <BSP_QSPI_Erase_Block+0x84>)
 8002c54:	f000 fc0e 	bl	8003474 <QSPI_WriteEnable>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e017      	b.n	8002c92 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480b      	ldr	r0, [pc, #44]	; (8002c9c <BSP_QSPI_Erase_Block+0x84>)
 8002c6e:	f008 f89d 	bl	800adac <HAL_QSPI_Command>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e00a      	b.n	8002c92 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25L512_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002c7c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c80:	4806      	ldr	r0, [pc, #24]	; (8002c9c <BSP_QSPI_Erase_Block+0x84>)
 8002c82:	f000 fc40 	bl	8003506 <QSPI_AutoPollingMemReady>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3740      	adds	r7, #64	; 0x40
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200003c8 	.word	0x200003c8

08002ca0 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6393      	str	r3, [r2, #56]	; 0x38
 8002cb6:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002cce:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	4a4f      	ldr	r2, [pc, #316]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cd4:	f023 0302 	bic.w	r3, r3, #2
 8002cd8:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002cda:	4b4d      	ldr	r3, [pc, #308]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a4c      	ldr	r2, [pc, #304]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a40      	ldr	r2, [pc, #256]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a3a      	ldr	r2, [pc, #232]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d40:	f043 0310 	orr.w	r3, r3, #16
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d58:	f043 0308 	orr.w	r3, r3, #8
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <BSP_QSPI_MspInit+0x170>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002d6a:	2340      	movs	r3, #64	; 0x40
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8002d6e:	230a      	movs	r3, #10
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d76:	2301      	movs	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d82:	4619      	mov	r1, r3
 8002d84:	4823      	ldr	r0, [pc, #140]	; (8002e14 <BSP_QSPI_MspInit+0x174>)
 8002d86:	f007 fc2d 	bl	800a5e4 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8002d8e:	2309      	movs	r3, #9
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	481d      	ldr	r0, [pc, #116]	; (8002e14 <BSP_QSPI_MspInit+0x174>)
 8002d9e:	f007 fc21 	bl	800a5e4 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8002da8:	2309      	movs	r3, #9
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db0:	4619      	mov	r1, r3
 8002db2:	4819      	ldr	r0, [pc, #100]	; (8002e18 <BSP_QSPI_MspInit+0x178>)
 8002db4:	f007 fc16 	bl	800a5e4 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8002dbe:	2309      	movs	r3, #9
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4813      	ldr	r0, [pc, #76]	; (8002e18 <BSP_QSPI_MspInit+0x178>)
 8002dca:	f007 fc0b 	bl	800a5e4 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002dce:	2304      	movs	r3, #4
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 8002dd2:	2309      	movs	r3, #9
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480f      	ldr	r0, [pc, #60]	; (8002e1c <BSP_QSPI_MspInit+0x17c>)
 8002dde:	f007 fc01 	bl	800a5e4 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8002de8:	2309      	movs	r3, #9
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df0:	4619      	mov	r1, r3
 8002df2:	480b      	ldr	r0, [pc, #44]	; (8002e20 <BSP_QSPI_MspInit+0x180>)
 8002df4:	f007 fbf6 	bl	800a5e4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	205c      	movs	r0, #92	; 0x5c
 8002dfe:	f006 fa0f 	bl	8009220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002e02:	205c      	movs	r0, #92	; 0x5c
 8002e04:	f006 fa28 	bl	8009258 <HAL_NVIC_EnableIRQ>
}
 8002e08:	bf00      	nop
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40020c00 	.word	0x40020c00

08002e24 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b098      	sub	sp, #96	; 0x60
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e30:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002e32:	2366      	movs	r3, #102	; 0x66
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f007 ffa5 	bl	800adac <HAL_QSPI_Command>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0ff      	b.n	800306c <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002e6c:	2399      	movs	r3, #153	; 0x99
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f007 ff96 	bl	800adac <HAL_QSPI_Command>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0f0      	b.n	800306c <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002e90:	2366      	movs	r3, #102	; 0x66
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f007 ff84 	bl	800adac <HAL_QSPI_Command>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0de      	b.n	800306c <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002eae:	2399      	movs	r3, #153	; 0x99
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f007 ff75 	bl	800adac <HAL_QSPI_Command>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0cf      	b.n	800306c <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8002ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed0:	f006 f8ca 	bl	8009068 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002ee8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8002ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002efe:	f107 0210 	add.w	r2, r7, #16
 8002f02:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f06:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f008 f8db 	bl	800b0c6 <HAL_QSPI_AutoPolling>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0a8      	b.n	800306c <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002f20:	2305      	movs	r3, #5
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f42:	2300      	movs	r3, #0
 8002f44:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f007 ff2b 	bl	800adac <HAL_QSPI_Command>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e085      	b.n	800306c <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f60:	f107 030f 	add.w	r3, r7, #15
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f008 f80e 	bl	800af8c <HAL_QSPI_Receive>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e078      	b.n	800306c <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002f80:	2306      	movs	r3, #6
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f007 fefe 	bl	800adac <HAL_QSPI_Command>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e058      	b.n	800306c <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002fca:	2310      	movs	r3, #16
 8002fcc:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002fd4:	2305      	movs	r3, #5
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fdc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fde:	f107 0210 	add.w	r2, r7, #16
 8002fe2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002fe6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f008 f86b 	bl	800b0c6 <HAL_QSPI_AutoPolling>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e038      	b.n	800306c <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003000:	2301      	movs	r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003004:	2300      	movs	r3, #0
 8003006:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003008:	2300      	movs	r3, #0
 800300a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800300c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003010:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8003016:	2301      	movs	r3, #1
 8003018:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800301e:	2300      	movs	r3, #0
 8003020:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003022:	2300      	movs	r3, #0
 8003024:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302c:	b2db      	uxtb	r3, r3
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f007 feb6 	bl	800adac <HAL_QSPI_Command>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e010      	b.n	800306c <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800304a:	f107 030f 	add.w	r3, r7, #15
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f007 ff07 	bl	800ae68 <HAL_QSPI_Transmit>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e003      	b.n	800306c <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8003064:	2028      	movs	r0, #40	; 0x28
 8003066:	f005 ffff 	bl	8009068 <HAL_Delay>

  return QSPI_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3760      	adds	r7, #96	; 0x60
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b090      	sub	sp, #64	; 0x40
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800307c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003080:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003082:	23b7      	movs	r3, #183	; 0xb7
 8003084:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800308a:	2300      	movs	r3, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800308e:	2300      	movs	r3, #0
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800309a:	2300      	movs	r3, #0
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800309e:	2300      	movs	r3, #0
 80030a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9e6 	bl	8003474 <QSPI_WriteEnable>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e017      	b.n	80030e2 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030b2:	f107 0308 	add.w	r3, r7, #8
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f007 fe75 	bl	800adac <HAL_QSPI_Command>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e00a      	b.n	80030e2 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80030cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa18 	bl	8003506 <QSPI_AutoPollingMemReady>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3740      	adds	r7, #64	; 0x40
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b094      	sub	sp, #80	; 0x50
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80030f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80030f8:	2305      	movs	r3, #5
 80030fa:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003104:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800310e:	2301      	movs	r3, #1
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003116:	2300      	movs	r3, #0
 8003118:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800311a:	2300      	movs	r3, #0
 800311c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f007 fe3f 	bl	800adac <HAL_QSPI_Command>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e090      	b.n	800325a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f007 ff22 	bl	800af8c <HAL_QSPI_Receive>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e083      	b.n	800325a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003158:	2315      	movs	r3, #21
 800315a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800315c:	2300      	movs	r3, #0
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003160:	2300      	movs	r3, #0
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003164:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800316e:	2301      	movs	r3, #1
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003176:	2300      	movs	r3, #0
 8003178:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800317a:	2300      	movs	r3, #0
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f007 fe0f 	bl	800adac <HAL_QSPI_Command>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e060      	b.n	800325a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	3301      	adds	r3, #1
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f007 fef1 	bl	800af8c <HAL_QSPI_Receive>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e052      	b.n	800325a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f95d 	bl	8003474 <QSPI_WriteEnable>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e04a      	b.n	800325a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80031c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80031ca:	2301      	movs	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80031d6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80031e8:	2300      	movs	r3, #0
 80031ea:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80031ec:	2300      	movs	r3, #0
 80031ee:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80031f0:	7b7b      	ldrb	r3, [r7, #13]
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f8:	b25a      	sxtb	r2, r3
 80031fa:	23c0      	movs	r3, #192	; 0xc0
 80031fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	2303      	movs	r3, #3
 8003212:	408b      	lsls	r3, r1
 8003214:	b25b      	sxtb	r3, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	b25b      	sxtb	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f007 fdbf 	bl	800adac <HAL_QSPI_Command>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e010      	b.n	800325a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f007 fe10 	bl	800ae68 <HAL_QSPI_Transmit>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e003      	b.n	800325a <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 8003252:	2028      	movs	r0, #40	; 0x28
 8003254:	f005 ff08 	bl	8009068 <HAL_Delay>
  
  return QSPI_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3750      	adds	r7, #80	; 0x50
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b096      	sub	sp, #88	; 0x58
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 800326a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800326e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8003270:	2335      	movs	r3, #53	; 0x35
 8003272:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003274:	2300      	movs	r3, #0
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003278:	2300      	movs	r3, #0
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800327c:	2300      	movs	r3, #0
 800327e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003288:	2300      	movs	r3, #0
 800328a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800328c:	2300      	movs	r3, #0
 800328e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003290:	f107 0320 	add.w	r3, r7, #32
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f007 fd86 	bl	800adac <HAL_QSPI_Command>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e023      	b.n	80032f2 <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80032ae:	2341      	movs	r3, #65	; 0x41
 80032b0:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80032ba:	2310      	movs	r3, #16
 80032bc:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80032be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032c2:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80032c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80032ca:	2305      	movs	r3, #5
 80032cc:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80032ce:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80032d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032d4:	f107 0208 	add.w	r2, r7, #8
 80032d8:	f107 0120 	add.w	r1, r7, #32
 80032dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f007 fef0 	bl	800b0c6 <HAL_QSPI_AutoPolling>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3758      	adds	r7, #88	; 0x58
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b094      	sub	sp, #80	; 0x50
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003304:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800330a:	2305      	movs	r3, #5
 800330c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800330e:	2300      	movs	r3, #0
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003312:	2300      	movs	r3, #0
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003316:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003320:	2301      	movs	r3, #1
 8003322:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003324:	2300      	movs	r3, #0
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003328:	2300      	movs	r3, #0
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800332c:	2300      	movs	r3, #0
 800332e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003330:	f107 0310 	add.w	r3, r7, #16
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f007 fd36 	bl	800adac <HAL_QSPI_Command>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e08d      	b.n	8003466 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800334a:	f107 030c 	add.w	r3, r7, #12
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f007 fe19 	bl	800af8c <HAL_QSPI_Receive>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e080      	b.n	8003466 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 800336a:	2315      	movs	r3, #21
 800336c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800336e:	2300      	movs	r3, #0
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003372:	2300      	movs	r3, #0
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003376:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800337a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003380:	2301      	movs	r3, #1
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003384:	2300      	movs	r3, #0
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800338c:	2300      	movs	r3, #0
 800338e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003390:	f107 0310 	add.w	r3, r7, #16
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f007 fd06 	bl	800adac <HAL_QSPI_Command>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e05d      	b.n	8003466 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033aa:	f107 030c 	add.w	r3, r7, #12
 80033ae:	3301      	adds	r3, #1
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f007 fde8 	bl	800af8c <HAL_QSPI_Receive>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e04f      	b.n	8003466 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80033c6:	482a      	ldr	r0, [pc, #168]	; (8003470 <QSPI_OutDrvStrengthCfg+0x174>)
 80033c8:	f000 f854 	bl	8003474 <QSPI_WriteEnable>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e047      	b.n	8003466 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80033d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80033dc:	2301      	movs	r3, #1
 80033de:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80033e8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80033f2:	2302      	movs	r3, #2
 80033f4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033fa:	2300      	movs	r3, #0
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033fe:	2300      	movs	r3, #0
 8003400:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	b25b      	sxtb	r3, r3
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	b25a      	sxtb	r2, r3
 800340c:	2307      	movs	r3, #7
 800340e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	2306      	movs	r3, #6
 8003424:	408b      	lsls	r3, r1
 8003426:	b25b      	sxtb	r3, r3
 8003428:	4313      	orrs	r3, r2
 800342a:	b25b      	sxtb	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003430:	f107 0310 	add.w	r3, r7, #16
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f007 fcb6 	bl	800adac <HAL_QSPI_Command>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e00d      	b.n	8003466 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800344a:	f107 030c 	add.w	r3, r7, #12
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f007 fd07 	bl	800ae68 <HAL_QSPI_Transmit>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3750      	adds	r7, #80	; 0x50
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200003c8 	.word	0x200003c8

08003474 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b096      	sub	sp, #88	; 0x58
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800347c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003482:	2306      	movs	r3, #6
 8003484:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800348a:	2300      	movs	r3, #0
 800348c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800348e:	2300      	movs	r3, #0
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003496:	2300      	movs	r3, #0
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800349a:	2300      	movs	r3, #0
 800349c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800349e:	2300      	movs	r3, #0
 80034a0:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034a2:	f107 0320 	add.w	r3, r7, #32
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f007 fc7d 	bl	800adac <HAL_QSPI_Command>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e020      	b.n	80034fe <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 80034bc:	2302      	movs	r3, #2
 80034be:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 80034c0:	2302      	movs	r3, #2
 80034c2:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80034c8:	2301      	movs	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80034cc:	2310      	movs	r3, #16
 80034ce:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80034d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034d4:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80034d6:	2305      	movs	r3, #5
 80034d8:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80034da:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80034de:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034e0:	f107 0208 	add.w	r2, r7, #8
 80034e4:	f107 0120 	add.w	r1, r7, #32
 80034e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f007 fdea 	bl	800b0c6 <HAL_QSPI_AutoPolling>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3758      	adds	r7, #88	; 0x58
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b096      	sub	sp, #88	; 0x58
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003510:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003516:	2305      	movs	r3, #5
 8003518:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800351a:	2300      	movs	r3, #0
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003522:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003530:	2300      	movs	r3, #0
 8003532:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003534:	2300      	movs	r3, #0
 8003536:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 800353c:	2301      	movs	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003544:	2301      	movs	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003548:	2310      	movs	r3, #16
 800354a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800354c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003550:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003552:	f107 0208 	add.w	r2, r7, #8
 8003556:	f107 0120 	add.w	r1, r7, #32
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f007 fdb2 	bl	800b0c6 <HAL_QSPI_AutoPolling>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3758      	adds	r7, #88	; 0x58
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_MspInit+0x44>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_MspInit+0x44>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <HAL_MspInit+0x44>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_MspInit+0x44>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_MspInit+0x44>)
 800359c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_MspInit+0x44>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800

080035c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <HAL_DAC_MspInit+0xd4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d154      	bne.n	800368c <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_DAC_MspInit+0xd8>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <HAL_DAC_MspInit+0xd8>)
 80035e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_DAC_MspInit+0xd8>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <HAL_DAC_MspInit+0xd8>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4a26      	ldr	r2, [pc, #152]	; (8003698 <HAL_DAC_MspInit+0xd8>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6313      	str	r3, [r2, #48]	; 0x30
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_DAC_MspInit+0xd8>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003612:	2310      	movs	r3, #16
 8003614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003616:	2303      	movs	r3, #3
 8003618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4619      	mov	r1, r3
 8003624:	481d      	ldr	r0, [pc, #116]	; (800369c <HAL_DAC_MspInit+0xdc>)
 8003626:	f006 ffdd 	bl	800a5e4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_DAC_MspInit+0xe4>)
 800362e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003632:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003636:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003644:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 800364e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003652:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800365a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 800365e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003662:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003666:	2200      	movs	r2, #0
 8003668:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366a:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003672:	f006 fbcf 	bl	8009e14 <HAL_DMA_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 800367c:	f7ff f926 	bl	80028cc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a07      	ldr	r2, [pc, #28]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_DAC_MspInit+0xe0>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800368c:	bf00      	nop
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40007400 	.word	0x40007400
 8003698:	40023800 	.word	0x40023800
 800369c:	40020000 	.word	0x40020000
 80036a0:	200000b0 	.word	0x200000b0
 80036a4:	40026088 	.word	0x40026088

080036a8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80036c0:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <HAL_DFSDM_FilterMspInit+0x144>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d151      	bne.n	800376c <HAL_DFSDM_FilterMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <HAL_DFSDM_FilterMspInit+0x148>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	4a48      	ldr	r2, [pc, #288]	; (80037f0 <HAL_DFSDM_FilterMspInit+0x148>)
 80036d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_DFSDM_FilterMspInit+0x148>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10b      	bne.n	80036f2 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80036da:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 80036e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036e4:	6453      	str	r3, [r2, #68]	; 0x44
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a3f      	ldr	r2, [pc, #252]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370a:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a39      	ldr	r2, [pc, #228]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6313      	str	r3, [r2, #48]	; 0x30
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_CKOUT
    PC5     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003722:	2308      	movs	r3, #8
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003732:	2303      	movs	r3, #3
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003736:	f107 0314 	add.w	r3, r7, #20
 800373a:	4619      	mov	r1, r3
 800373c:	482e      	ldr	r0, [pc, #184]	; (80037f8 <HAL_DFSDM_FilterMspInit+0x150>)
 800373e:	f006 ff51 	bl	800a5e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003742:	2320      	movs	r3, #32
 8003744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003752:	2303      	movs	r3, #3
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	4619      	mov	r1, r3
 800375c:	4827      	ldr	r0, [pc, #156]	; (80037fc <HAL_DFSDM_FilterMspInit+0x154>)
 800375e:	f006 ff41 	bl	800a5e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_DFSDM_FilterMspInit+0x144>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	4a20      	ldr	r2, [pc, #128]	; (80037ec <HAL_DFSDM_FilterMspInit+0x144>)
 800376a:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_DFSDM_FilterMspInit+0x158>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d136      	bne.n	80037e4 <HAL_DFSDM_FilterMspInit+0x13c>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8003776:	4b23      	ldr	r3, [pc, #140]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_DFSDM_FilterMspInit+0x160>)
 800377a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800377c:	4b21      	ldr	r3, [pc, #132]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003782:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003790:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003796:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 800379a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800379e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037a0:	4b18      	ldr	r3, [pc, #96]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a6:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ae:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80037bc:	4811      	ldr	r0, [pc, #68]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037be:	f006 fb29 	bl	8009e14 <HAL_DMA_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_DFSDM_FilterMspInit+0x124>
    {
      Error_Handler();
 80037c8:	f7ff f880 	bl	80028cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a0d      	ldr	r2, [pc, #52]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80037e4:	bf00      	nop
 80037e6:	3728      	adds	r7, #40	; 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000390 	.word	0x20000390
 80037f0:	2000038c 	.word	0x2000038c
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020c00 	.word	0x40020c00
 80037fc:	40020800 	.word	0x40020800
 8003800:	40017500 	.word	0x40017500
 8003804:	2000019c 	.word	0x2000019c
 8003808:	40026410 	.word	0x40026410

0800380c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003824:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d151      	bne.n	80038d0 <HAL_DFSDM_ChannelMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800382c:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	4a2a      	ldr	r2, [pc, #168]	; (80038dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003834:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10b      	bne.n	8003856 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800383e:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003848:	6453      	str	r3, [r2, #68]	; 0x44
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003856:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800385c:	f043 0308 	orr.w	r3, r3, #8
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_CKOUT
    PC5     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003886:	2308      	movs	r3, #8
 8003888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388a:	2302      	movs	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003896:	2303      	movs	r3, #3
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	4619      	mov	r1, r3
 80038a0:	4810      	ldr	r0, [pc, #64]	; (80038e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80038a2:	f006 fe9f 	bl	800a5e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038a6:	2320      	movs	r3, #32
 80038a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80038b6:	2303      	movs	r3, #3
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	4619      	mov	r1, r3
 80038c0:	4809      	ldr	r0, [pc, #36]	; (80038e8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80038c2:	f006 fe8f 	bl	800a5e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80038c6:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3301      	adds	r3, #1
 80038cc:	4a02      	ldr	r2, [pc, #8]	; (80038d8 <HAL_DFSDM_ChannelMspInit+0xcc>)
 80038ce:	6013      	str	r3, [r2, #0]
  }

}
 80038d0:	bf00      	nop
 80038d2:	3728      	adds	r7, #40	; 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000390 	.word	0x20000390
 80038dc:	2000038c 	.word	0x2000038c
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40020800 	.word	0x40020800

080038ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <HAL_QSPI_MspInit+0x148>)
 800390a:	4293      	cmp	r3, r2
 800390c:	f040 808e 	bne.w	8003a2c <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003910:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	4a48      	ldr	r2, [pc, #288]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	6393      	str	r3, [r2, #56]	; 0x38
 800391c:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003928:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 800392e:	f043 0310 	orr.w	r3, r3, #16
 8003932:	6313      	str	r3, [r2, #48]	; 0x30
 8003934:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	4a3c      	ldr	r2, [pc, #240]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003946:	f043 0302 	orr.w	r3, r3, #2
 800394a:	6313      	str	r3, [r2, #48]	; 0x30
 800394c:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003958:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4a36      	ldr	r2, [pc, #216]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	6313      	str	r3, [r2, #48]	; 0x30
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003970:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4a30      	ldr	r2, [pc, #192]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 8003976:	f043 0308 	orr.w	r3, r3, #8
 800397a:	6313      	str	r3, [r2, #48]	; 0x30
 800397c:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <HAL_QSPI_MspInit+0x14c>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003988:	2304      	movs	r3, #4
 800398a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003998:	2309      	movs	r3, #9
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800399c:	f107 031c 	add.w	r3, r7, #28
 80039a0:	4619      	mov	r1, r3
 80039a2:	4826      	ldr	r0, [pc, #152]	; (8003a3c <HAL_QSPI_MspInit+0x150>)
 80039a4:	f006 fe1e 	bl	800a5e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039a8:	2340      	movs	r3, #64	; 0x40
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80039b8:	230a      	movs	r3, #10
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	4619      	mov	r1, r3
 80039c2:	481f      	ldr	r0, [pc, #124]	; (8003a40 <HAL_QSPI_MspInit+0x154>)
 80039c4:	f006 fe0e 	bl	800a5e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80039c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ce:	2302      	movs	r3, #2
 80039d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d6:	2303      	movs	r3, #3
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80039da:	2309      	movs	r3, #9
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039de:	f107 031c 	add.w	r3, r7, #28
 80039e2:	4619      	mov	r1, r3
 80039e4:	4817      	ldr	r0, [pc, #92]	; (8003a44 <HAL_QSPI_MspInit+0x158>)
 80039e6:	f006 fdfd 	bl	800a5e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039ea:	2304      	movs	r3, #4
 80039ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80039fa:	2309      	movs	r3, #9
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	f107 031c 	add.w	r3, r7, #28
 8003a02:	4619      	mov	r1, r3
 8003a04:	480e      	ldr	r0, [pc, #56]	; (8003a40 <HAL_QSPI_MspInit+0x154>)
 8003a06:	f006 fded 	bl	800a5e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a1c:	2309      	movs	r3, #9
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	4619      	mov	r1, r3
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <HAL_QSPI_MspInit+0x15c>)
 8003a28:	f006 fddc 	bl	800a5e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003a2c:	bf00      	nop
 8003a2e:	3730      	adds	r7, #48	; 0x30
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	a0001000 	.word	0xa0001000
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40020400 	.word	0x40020400
 8003a44:	40020800 	.word	0x40020800
 8003a48:	40020c00 	.word	0x40020c00

08003a4c <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_QSPI_MspDeInit+0x4c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d117      	bne.n	8003a8e <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_QSPI_MspDeInit+0x50>)
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <HAL_QSPI_MspDeInit+0x50>)
 8003a64:	f023 0302 	bic.w	r3, r3, #2
 8003a68:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <HAL_QSPI_MspDeInit+0x54>)
 8003a6e:	f006 ff65 	bl	800a93c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8003a72:	2144      	movs	r1, #68	; 0x44
 8003a74:	480b      	ldr	r0, [pc, #44]	; (8003aa4 <HAL_QSPI_MspDeInit+0x58>)
 8003a76:	f006 ff61 	bl	800a93c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_9);
 8003a7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a7e:	480a      	ldr	r0, [pc, #40]	; (8003aa8 <HAL_QSPI_MspDeInit+0x5c>)
 8003a80:	f006 ff5c 	bl	800a93c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8003a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a88:	4808      	ldr	r0, [pc, #32]	; (8003aac <HAL_QSPI_MspDeInit+0x60>)
 8003a8a:	f006 ff57 	bl	800a93c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	a0001000 	.word	0xa0001000
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40020400 	.word	0x40020400
 8003aa8:	40020800 	.word	0x40020800
 8003aac:	40020c00 	.word	0x40020c00

08003ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d113      	bne.n	8003aea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_TIM_Base_MspInit+0x44>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <HAL_TIM_Base_MspInit+0x44>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_TIM_Base_MspInit+0x44>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2100      	movs	r1, #0
 8003ade:	201c      	movs	r0, #28
 8003ae0:	f005 fb9e 	bl	8009220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ae4:	201c      	movs	r0, #28
 8003ae6:	f005 fbb7 	bl	8009258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a25      	ldr	r2, [pc, #148]	; (8003bac <HAL_UART_MspInit+0xb4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d144      	bne.n	8003ba4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b1a:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b20:	f043 0310 	orr.w	r3, r3, #16
 8003b24:	6453      	str	r3, [r2, #68]	; 0x44
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <HAL_UART_MspInit+0xb8>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b72:	2307      	movs	r3, #7
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <HAL_UART_MspInit+0xbc>)
 8003b7e:	f006 fd31 	bl	800a5e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b90:	2303      	movs	r3, #3
 8003b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b94:	2307      	movs	r3, #7
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4806      	ldr	r0, [pc, #24]	; (8003bb8 <HAL_UART_MspInit+0xc0>)
 8003ba0:	f006 fd20 	bl	800a5e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ba4:	bf00      	nop
 8003ba6:	3728      	adds	r7, #40	; 0x28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40011000 	.word	0x40011000
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020400 	.word	0x40020400
 8003bb8:	40020000 	.word	0x40020000

08003bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	; 0x30
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	202c      	movs	r0, #44	; 0x2c
 8003bd2:	f005 fb25 	bl	8009220 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003bd6:	202c      	movs	r0, #44	; 0x2c
 8003bd8:	f005 fb3e 	bl	8009258 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <HAL_InitTick+0xa0>)
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	4a1e      	ldr	r2, [pc, #120]	; (8003c5c <HAL_InitTick+0xa0>)
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	6413      	str	r3, [r2, #64]	; 0x40
 8003be8:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <HAL_InitTick+0xa0>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003bf4:	f107 0210 	add.w	r2, r7, #16
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f008 f928 	bl	800be54 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003c04:	f008 f8fe 	bl	800be04 <HAL_RCC_GetPCLK1Freq>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <HAL_InitTick+0xa4>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0c9b      	lsrs	r3, r3, #18
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_InitTick+0xa8>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <HAL_InitTick+0xac>)
 8003c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <HAL_InitTick+0xa8>)
 8003c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c28:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8003c2a:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <HAL_InitTick+0xa8>)
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_InitTick+0xa8>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_InitTick+0xa8>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8003c3c:	4809      	ldr	r0, [pc, #36]	; (8003c64 <HAL_InitTick+0xa8>)
 8003c3e:	f008 fd63 	bl	800c708 <HAL_TIM_Base_Init>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8003c48:	4806      	ldr	r0, [pc, #24]	; (8003c64 <HAL_InitTick+0xa8>)
 8003c4a:	f008 fdb5 	bl	800c7b8 <HAL_TIM_Base_Start_IT>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	e000      	b.n	8003c54 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3730      	adds	r7, #48	; 0x30
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	431bde83 	.word	0x431bde83
 8003c64:	20000414 	.word	0x20000414
 8003c68:	40001c00 	.word	0x40001c00

08003c6c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* Disable TIM13 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim13, TIM_IT_UPDATE);
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_SuspendTick+0x20>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_SuspendTick+0x20>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	60da      	str	r2, [r3, #12]
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000414 	.word	0x20000414

08003c90 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* Enable TIM13 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_ResumeTick+0x20>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_ResumeTick+0x20>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	60da      	str	r2, [r3, #12]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000414 	.word	0x20000414

08003cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <NMI_Handler+0x4>

08003cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cbe:	e7fe      	b.n	8003cbe <HardFault_Handler+0x4>

08003cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <MemManage_Handler+0x4>

08003cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cca:	e7fe      	b.n	8003cca <BusFault_Handler+0x4>

08003ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cd0:	e7fe      	b.n	8003cd0 <UsageFault_Handler+0x4>

08003cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003d10:	4802      	ldr	r0, [pc, #8]	; (8003d1c <DMA1_Stream5_IRQHandler+0x10>)
 8003d12:	f006 f9fd 	bl	800a110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200000b0 	.word	0x200000b0

08003d20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d24:	4802      	ldr	r0, [pc, #8]	; (8003d30 <TIM2_IRQHandler+0x10>)
 8003d26:	f008 fdbf 	bl	800c8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000248 	.word	0x20000248

08003d34 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003d3a:	f008 fdb5 	bl	800c8a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000414 	.word	0x20000414

08003d48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003d4c:	4802      	ldr	r0, [pc, #8]	; (8003d58 <DMA2_Stream0_IRQHandler+0x10>)
 8003d4e:	f006 f9df 	bl	800a110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000019c 	.word	0x2000019c

08003d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
	return 1;
 8003d60:	2301      	movs	r3, #1
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <_kill>:

int _kill(int pid, int sig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d76:	f00b fa61 	bl	800f23c <__errno>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2216      	movs	r2, #22
 8003d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_exit>:

void _exit (int status)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d94:	f04f 31ff 	mov.w	r1, #4294967295
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ffe7 	bl	8003d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d9e:	e7fe      	b.n	8003d9e <_exit+0x12>

08003da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <_sbrk+0x5c>)
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <_sbrk+0x60>)
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <_sbrk+0x64>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <_sbrk+0x64>)
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <_sbrk+0x68>)
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d207      	bcs.n	8003de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dd0:	f00b fa34 	bl	800f23c <__errno>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	220c      	movs	r2, #12
 8003dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	e009      	b.n	8003df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <_sbrk+0x64>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <_sbrk+0x64>)
 8003df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20080000 	.word	0x20080000
 8003e00:	00000400 	.word	0x00000400
 8003e04:	20000394 	.word	0x20000394
 8003e08:	20000478 	.word	0x20000478

08003e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <SystemInit+0x20>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <SystemInit+0x20>)
 8003e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e36:	490e      	ldr	r1, [pc, #56]	; (8003e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e38:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e3c:	e002      	b.n	8003e44 <LoopCopyDataInit>

08003e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e42:	3304      	adds	r3, #4

08003e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e48:	d3f9      	bcc.n	8003e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4a:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e4c:	4c0b      	ldr	r4, [pc, #44]	; (8003e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e50:	e001      	b.n	8003e56 <LoopFillZerobss>

08003e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e54:	3204      	adds	r2, #4

08003e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e58:	d3fb      	bcc.n	8003e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e5a:	f7ff ffd7 	bl	8003e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e5e:	f00b f9f3 	bl	800f248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e62:	f7fd ff65 	bl	8001d30 <main>
  bx  lr    
 8003e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e70:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003e74:	0802ae5c 	.word	0x0802ae5c
  ldr r2, =_sbss
 8003e78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003e7c:	20000474 	.word	0x20000474

08003e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC_IRQHandler>

08003e82 <arm_copy_q7>:

void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b087      	sub	sp, #28
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8003e94:	e00e      	b.n	8003eb4 <arm_copy_q7+0x32>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    /* 4 samples are copied and stored at a time using SIMD */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	1d11      	adds	r1, r2, #4
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	f107 0108 	add.w	r1, r7, #8
 8003ea4:	680b      	ldr	r3, [r1, #0]
 8003ea6:	1d18      	adds	r0, r3, #4
 8003ea8:	6008      	str	r0, [r1, #0]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ed      	bne.n	8003e96 <arm_copy_q7+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	617b      	str	r3, [r7, #20]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8003ec2:	e00b      	b.n	8003edc <arm_copy_q7+0x5a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	1c53      	adds	r3, r2, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	1c59      	adds	r1, r3, #1
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	f992 2000 	ldrsb.w	r2, [r2]
 8003ed4:	701a      	strb	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <arm_copy_q7+0x42>
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b0a0      	sub	sp, #128	; 0x80
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8003f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	4413      	add	r3, r2
 8003f08:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8003f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f16:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8003f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8003f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8003f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f2e:	4413      	add	r3, r2
 8003f30:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8003f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f38:	e1b6      	b.n	80042a8 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8003f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8003f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8003f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8003f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8003f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8003f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8003f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8003f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8003f9a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	1d1a      	adds	r2, r3, #4
 8003fa6:	603a      	str	r2, [r7, #0]
 8003fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fac:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8003fb0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003fb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	1d1a      	adds	r2, r3, #4
 8003fbc:	603a      	str	r2, [r7, #0]
 8003fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc2:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8003fc6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003fca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	603a      	str	r2, [r7, #0]
 8003fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8003fdc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003fe0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	603a      	str	r2, [r7, #0]
 8003fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fee:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8003ff2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003ff6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8004002:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004006:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800400a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800400e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8004012:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004016:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800401a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800401e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8004022:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004026:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800402a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8004032:	ed97 7a06 	vldr	s14, [r7, #24]
 8004036:	edd7 7a02 	vldr	s15, [r7, #8]
 800403a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800403c:	1d1a      	adds	r2, r3, #4
 800403e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004044:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8004048:	ed97 7a07 	vldr	s14, [r7, #28]
 800404c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405a:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 800405e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004062:	edd7 7a04 	vldr	s15, [r7, #16]
 8004066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800406c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004070:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8004074:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004078:	edd7 7a05 	vldr	s15, [r7, #20]
 800407c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004086:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 800408a:	ed97 7a02 	vldr	s14, [r7, #8]
 800408e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004096:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800409a:	ed97 7a03 	vldr	s14, [r7, #12]
 800409e:	edd7 7a07 	vldr	s15, [r7, #28]
 80040a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a6:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 80040aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80040ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80040b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b6:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 80040ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80040be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c6:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 80040ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	673a      	str	r2, [r7, #112]	; 0x70
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80040d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d6:	1d1a      	adds	r2, r3, #4
 80040d8:	673a      	str	r2, [r7, #112]	; 0x70
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80040de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040e2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 80040ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80040f2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80040fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004102:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800410e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004112:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004120:	1d1a      	adds	r2, r3, #4
 8004122:	677a      	str	r2, [r7, #116]	; 0x74
 8004124:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004128:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800412c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004130:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8004134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	677a      	str	r2, [r7, #116]	; 0x74
 800413a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800413e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004146:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800414a:	edd7 7a02 	vldr	s15, [r7, #8]
 800414e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800415a:	edd7 7a03 	vldr	s15, [r7, #12]
 800415e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800416a:	edd7 7a03 	vldr	s15, [r7, #12]
 800416e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800417a:	edd7 7a02 	vldr	s15, [r7, #8]
 800417e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 800418a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418c:	1d1a      	adds	r2, r3, #4
 800418e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004190:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004194:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419c:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80041a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	67ba      	str	r2, [r7, #120]	; 0x78
 80041a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041aa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b2:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80041b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b8:	1d1a      	adds	r2, r3, #4
 80041ba:	673a      	str	r2, [r7, #112]	; 0x70
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80041c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	673a      	str	r2, [r7, #112]	; 0x70
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 80041ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80041ce:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 80041da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80041de:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80041ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80041ee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80041fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80041fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004206:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 800420a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420c:	1d1a      	adds	r2, r3, #4
 800420e:	677a      	str	r2, [r7, #116]	; 0x74
 8004210:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004214:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8004220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	677a      	str	r2, [r7, #116]	; 0x74
 8004226:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800422a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800422e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004232:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 8004236:	edd7 7a04 	vldr	s15, [r7, #16]
 800423a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800423e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004242:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8004246:	edd7 7a05 	vldr	s15, [r7, #20]
 800424a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8004256:	edd7 7a05 	vldr	s15, [r7, #20]
 800425a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8004266:	edd7 7a04 	vldr	s15, [r7, #16]
 800426a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8004276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004278:	1d1a      	adds	r2, r3, #4
 800427a:	67ba      	str	r2, [r7, #120]	; 0x78
 800427c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004280:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004288:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800428c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	67ba      	str	r2, [r7, #120]	; 0x78
 8004292:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004296:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800429a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800429e:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	3b01      	subs	r3, #1
 80042a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f47f ae45 	bne.w	8003f3a <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80042b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042b2:	b299      	uxth	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	2302      	movs	r3, #2
 80042ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80042bc:	f000 fef2 	bl	80050a4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80042c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c2:	b299      	uxth	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	2302      	movs	r3, #2
 80042ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80042cc:	f000 feea 	bl	80050a4 <arm_radix8_butterfly_f32>
}
 80042d0:	bf00      	nop
 80042d2:	3780      	adds	r7, #128	; 0x80
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b0ac      	sub	sp, #176	; 0xb0
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80042ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80042fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004306:	4413      	add	r3, r2
 8004308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800430c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004316:	4413      	add	r3, r2
 8004318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8004320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004324:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8004326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800432a:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800432c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004330:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8004332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004336:	3b04      	subs	r3, #4
 8004338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004340:	3b04      	subs	r3, #4
 8004342:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8004346:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800434a:	3b04      	subs	r3, #4
 800434c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8004350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800435a:	4413      	add	r3, r2
 800435c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004368:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8004378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8004382:	2302      	movs	r3, #2
 8004384:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8004386:	2304      	movs	r3, #4
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800438a:	2306      	movs	r3, #6
 800438c:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	ed93 7a00 	vldr	s14, [r3]
 8004394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004398:	edd3 7a00 	vldr	s15, [r3]
 800439c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	ed93 7a00 	vldr	s14, [r3]
 80043aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043b6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	3304      	adds	r3, #4
 80043be:	ed93 7a00 	vldr	s14, [r3]
 80043c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c6:	3304      	adds	r3, #4
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	3304      	adds	r3, #4
 80043d8:	ed93 7a00 	vldr	s14, [r3]
 80043dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e0:	3304      	adds	r3, #4
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ea:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80043ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043f2:	3304      	adds	r3, #4
 80043f4:	ed93 7a00 	vldr	s14, [r3]
 80043f8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80043fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004404:	3304      	adds	r3, #4
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800440e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004412:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800441e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800442e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004436:	edd3 7a00 	vldr	s15, [r3]
 800443a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800443e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004442:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004446:	edd3 7a00 	vldr	s15, [r3]
 800444a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004456:	3304      	adds	r3, #4
 8004458:	edd3 7a00 	vldr	s15, [r3]
 800445c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004468:	3304      	adds	r3, #4
 800446a:	edd3 7a00 	vldr	s15, [r3]
 800446e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004472:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447a:	3304      	adds	r3, #4
 800447c:	edd3 7a00 	vldr	s15, [r3]
 8004480:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448c:	3304      	adds	r3, #4
 800448e:	edd3 7a00 	vldr	s15, [r3]
 8004492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004496:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800449a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800449e:	ed93 7a00 	vldr	s14, [r3]
 80044a2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80044a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ae:	edd3 7a00 	vldr	s15, [r3]
 80044b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b6:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80044ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044be:	ed93 7a00 	vldr	s14, [r3]
 80044c2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80044c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ce:	edd3 7a00 	vldr	s15, [r3]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	603a      	str	r2, [r7, #0]
 80044d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044dc:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80044e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044e4:	3304      	adds	r3, #4
 80044e6:	ed93 7a00 	vldr	s14, [r3]
 80044ea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80044ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f6:	3304      	adds	r3, #4
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	1d1a      	adds	r2, r3, #4
 8004500:	603a      	str	r2, [r7, #0]
 8004502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004506:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800450a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004516:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8004518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800451c:	1d1a      	adds	r2, r3, #4
 800451e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8004526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800452a:	1d1a      	adds	r2, r3, #4
 800452c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8004534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004538:	1d1a      	adds	r2, r3, #4
 800453a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800453e:	6a3a      	ldr	r2, [r7, #32]
 8004540:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8004542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8004550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004566:	4413      	add	r3, r2
 8004568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800456c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004574:	4413      	add	r3, r2
 8004576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800457a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004582:	4413      	add	r3, r2
 8004584:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8004588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800458c:	3b02      	subs	r3, #2
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004594:	e31a      	b.n	8004bcc <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	ed93 7a00 	vldr	s14, [r3]
 800459c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a0:	edd3 7a00 	vldr	s15, [r3]
 80045a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	ed93 7a00 	vldr	s14, [r3]
 80045b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045be:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	3304      	adds	r3, #4
 80045c6:	ed93 7a00 	vldr	s14, [r3]
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ce:	3304      	adds	r3, #4
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	3304      	adds	r3, #4
 80045e0:	ed93 7a00 	vldr	s14, [r3]
 80045e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e8:	3304      	adds	r3, #4
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80045f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045fa:	3304      	adds	r3, #4
 80045fc:	ed93 7a00 	vldr	s14, [r3]
 8004600:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800460c:	3304      	adds	r3, #4
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004616:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800461a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800461e:	edd3 7a00 	vldr	s15, [r3]
 8004622:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004626:	ee37 7a67 	vsub.f32	s14, s14, s15
 800462a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004636:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800463a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800464a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800464e:	edd3 7a00 	vldr	s15, [r3]
 8004652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 800465a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800465e:	3304      	adds	r3, #4
 8004660:	edd3 7a00 	vldr	s15, [r3]
 8004664:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800466c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004670:	3304      	adds	r3, #4
 8004672:	edd3 7a00 	vldr	s15, [r3]
 8004676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800467a:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 800467e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004682:	3304      	adds	r3, #4
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800468c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004694:	3304      	adds	r3, #4
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800469e:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80046a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046a6:	ed93 7a00 	vldr	s14, [r3]
 80046aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80046ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046b6:	edd3 7a00 	vldr	s15, [r3]
 80046ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046be:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80046c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046c6:	ed93 7a00 	vldr	s14, [r3]
 80046ca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80046ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046d6:	edd3 7a00 	vldr	s15, [r3]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	1d1a      	adds	r2, r3, #4
 80046de:	603a      	str	r2, [r7, #0]
 80046e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e4:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80046e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ec:	3304      	adds	r3, #4
 80046ee:	ed93 7a00 	vldr	s14, [r3]
 80046f2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80046f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046fe:	3304      	adds	r3, #4
 8004700:	edd3 7a00 	vldr	s15, [r3]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	1d1a      	adds	r2, r3, #4
 8004708:	603a      	str	r2, [r7, #0]
 800470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470e:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8004712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004716:	3b04      	subs	r3, #4
 8004718:	ed93 7a00 	vldr	s14, [r3]
 800471c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004720:	3b04      	subs	r3, #4
 8004722:	edd3 7a00 	vldr	s15, [r3]
 8004726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800472a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800472e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004732:	3b04      	subs	r3, #4
 8004734:	ed93 7a00 	vldr	s14, [r3]
 8004738:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800473c:	3b04      	subs	r3, #4
 800473e:	edd3 7a00 	vldr	s15, [r3]
 8004742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004746:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 800474a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474e:	ed93 7a00 	vldr	s14, [r3]
 8004752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004756:	edd3 7a00 	vldr	s15, [r3]
 800475a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800475e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8004762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004766:	ed93 7a00 	vldr	s14, [r3]
 800476a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004776:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800477a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004786:	edd3 7a00 	vldr	s15, [r3]
 800478a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800478e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004796:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800479a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800479e:	ed93 7a00 	vldr	s14, [r3]
 80047a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047b2:	3b04      	subs	r3, #4
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047c0:	3b04      	subs	r3, #4
 80047c2:	edd3 7a00 	vldr	s15, [r3]
 80047c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80047ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047d2:	3b04      	subs	r3, #4
 80047d4:	edd3 7a00 	vldr	s15, [r3]
 80047d8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80047dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047e4:	3b04      	subs	r3, #4
 80047e6:	edd3 7a00 	vldr	s15, [r3]
 80047ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 80047f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80047fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800480e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8004812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004816:	ed93 7a00 	vldr	s14, [r3]
 800481a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004826:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800482a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800482e:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8004832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004836:	3b04      	subs	r3, #4
 8004838:	ed93 7a00 	vldr	s14, [r3]
 800483c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004840:	3b04      	subs	r3, #4
 8004842:	edd3 7a00 	vldr	s15, [r3]
 8004846:	ee37 7a67 	vsub.f32	s14, s14, s15
 800484a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800484e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004852:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8004856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800485a:	ed93 7a00 	vldr	s14, [r3]
 800485e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004872:	1f1a      	subs	r2, r3, #4
 8004874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800487c:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8004880:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004884:	3b04      	subs	r3, #4
 8004886:	ed93 7a00 	vldr	s14, [r3]
 800488a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800488e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004896:	3b04      	subs	r3, #4
 8004898:	edd3 7a00 	vldr	s15, [r3]
 800489c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048a0:	1f1a      	subs	r2, r3, #4
 80048a2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048aa:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80048ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 80048bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048c0:	1d1a      	adds	r2, r3, #4
 80048c2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 80048ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048ce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 80048da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80048de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 80048ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80048ee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 80048fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 800490a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004914:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004918:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800491c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004920:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8004924:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004928:	1d1a      	adds	r2, r3, #4
 800492a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800492e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004932:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800493a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 800493e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004942:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 800494e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004952:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 800495e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004962:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 800496e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004972:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 800497e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004982:	1f1a      	subs	r2, r3, #4
 8004984:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004988:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800498c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004994:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8004998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800499c:	1f1a      	subs	r2, r3, #4
 800499e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049a2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80049a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80049aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ae:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 80049b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 80049ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 80049c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80049ca:	4413      	add	r3, r2
 80049cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 80049d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80049d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 80049e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80049e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80049f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80049f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8004a00:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8004a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a14:	1d1a      	adds	r2, r3, #4
 8004a16:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a26:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8004a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a34:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004a38:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a40:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8004a44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004a48:	eef1 7a67 	vneg.f32	s15, s15
 8004a4c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a54:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8004a58:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a64:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8004a68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a74:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8004a78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004a7c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a84:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 8004a88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a8c:	1f1a      	subs	r2, r3, #4
 8004a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a92:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8004aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004aa6:	1f1a      	subs	r2, r3, #4
 8004aa8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004ab0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab8:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8004abc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8004ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8004acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8004ada:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ade:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8004aea:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8004afa:	edd7 7a04 	vldr	s15, [r7, #16]
 8004afe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8004b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8004b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b1e:	1d1a      	adds	r2, r3, #4
 8004b20:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b24:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b30:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8004b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b38:	1d1a      	adds	r2, r3, #4
 8004b3a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b3e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004b42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8004b4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8004b5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b62:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8004b6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8004b7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b82:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8004b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b92:	1f1a      	subs	r2, r3, #4
 8004b94:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b98:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba4:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8004ba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bac:	1f1a      	subs	r2, r3, #4
 8004bae:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004bb2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004bb6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bbe:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f ace0 	bne.w	8004596 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	ed93 7a00 	vldr	s14, [r3]
 8004bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be0:	edd3 7a00 	vldr	s15, [r3]
 8004be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	ed93 7a00 	vldr	s14, [r3]
 8004bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf6:	edd3 7a00 	vldr	s15, [r3]
 8004bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bfe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	3304      	adds	r3, #4
 8004c06:	ed93 7a00 	vldr	s14, [r3]
 8004c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c0e:	3304      	adds	r3, #4
 8004c10:	edd3 7a00 	vldr	s15, [r3]
 8004c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c18:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	ed93 7a00 	vldr	s14, [r3]
 8004c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c28:	3304      	adds	r3, #4
 8004c2a:	edd3 7a00 	vldr	s15, [r3]
 8004c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c32:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	ed93 7a00 	vldr	s14, [r3]
 8004c40:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	edd3 7a00 	vldr	s15, [r3]
 8004c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c56:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c5e:	edd3 7a00 	vldr	s15, [r3]
 8004c62:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c6e:	edd3 7a00 	vldr	s15, [r3]
 8004c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c7e:	edd3 7a00 	vldr	s15, [r3]
 8004c82:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c8e:	edd3 7a00 	vldr	s15, [r3]
 8004c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c96:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	edd3 7a00 	vldr	s15, [r3]
 8004ca4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004ca8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	edd3 7a00 	vldr	s15, [r3]
 8004cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cba:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	edd3 7a00 	vldr	s15, [r3]
 8004cc8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	edd3 7a00 	vldr	s15, [r3]
 8004cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cde:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ce6:	ed93 7a00 	vldr	s14, [r3]
 8004cea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf6:	edd3 7a00 	vldr	s15, [r3]
 8004cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cfe:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d06:	ed93 7a00 	vldr	s14, [r3]
 8004d0a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d16:	edd3 7a00 	vldr	s15, [r3]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	603a      	str	r2, [r7, #0]
 8004d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d24:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004d28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	ed93 7a00 	vldr	s14, [r3]
 8004d32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d3e:	3304      	adds	r3, #4
 8004d40:	edd3 7a00 	vldr	s15, [r3]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	603a      	str	r2, [r7, #0]
 8004d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4e:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8004d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8004d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8004d62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d66:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8004d72:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004d76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8004d82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004d86:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8004d92:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d96:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8004da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004da6:	1d1a      	adds	r2, r3, #4
 8004da8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004dac:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004db0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db8:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8004dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004dc6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004dca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dd2:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8004dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004de6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004dea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004df6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004dfa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e0a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8004e16:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e1a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8004e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e30:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004e34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e3c:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8004e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e44:	1d1a      	adds	r2, r3, #4
 8004e46:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004e4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e56:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8004e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8004e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8004e6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8004e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8004e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e8e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8004e9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8004eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eae:	1d1a      	adds	r2, r3, #4
 8004eb0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004eb4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004eb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec0:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec8:	1d1a      	adds	r2, r3, #4
 8004eca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ece:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004ed2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eda:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ee2:	b299      	uxth	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	2304      	movs	r3, #4
 8004eea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004eec:	f000 f8da 	bl	80050a4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004ef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ef4:	b299      	uxth	r1, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	2304      	movs	r3, #4
 8004efc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004efe:	f000 f8d1 	bl	80050a4 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8004f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f06:	b299      	uxth	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004f10:	f000 f8c8 	bl	80050a4 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8004f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f18:	b299      	uxth	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	2304      	movs	r3, #4
 8004f20:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004f22:	f000 f8bf 	bl	80050a4 <arm_radix8_butterfly_f32>
}
 8004f26:	bf00      	nop
 8004f28:	37b0      	adds	r7, #176	; 0xb0
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b088      	sub	sp, #32
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	71fb      	strb	r3, [r7, #7]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d117      	bne.n	8004f80 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3304      	adds	r3, #4
 8004f54:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	e00d      	b.n	8004f78 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	eef1 7a67 	vneg.f32	s15, s15
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d3ed      	bcc.n	8004f5c <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f86:	d040      	beq.n	800500a <arm_cfft_f32+0xdc>
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8e:	d845      	bhi.n	800501c <arm_cfft_f32+0xee>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d033      	beq.n	8005000 <arm_cfft_f32+0xd2>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9e:	d83d      	bhi.n	800501c <arm_cfft_f32+0xee>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa6:	d026      	beq.n	8004ff6 <arm_cfft_f32+0xc8>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	d835      	bhi.n	800501c <arm_cfft_f32+0xee>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb6:	d028      	beq.n	800500a <arm_cfft_f32+0xdc>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fbe:	d82d      	bhi.n	800501c <arm_cfft_f32+0xee>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc6:	d01b      	beq.n	8005000 <arm_cfft_f32+0xd2>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	d825      	bhi.n	800501c <arm_cfft_f32+0xee>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	d00f      	beq.n	8004ff6 <arm_cfft_f32+0xc8>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d81f      	bhi.n	800501c <arm_cfft_f32+0xee>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d013      	beq.n	800500a <arm_cfft_f32+0xdc>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d819      	bhi.n	800501c <arm_cfft_f32+0xee>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d003      	beq.n	8004ff6 <arm_cfft_f32+0xc8>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d005      	beq.n	8005000 <arm_cfft_f32+0xd2>
 8004ff4:	e012      	b.n	800501c <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7fe ff79 	bl	8003ef0 <arm_cfft_radix8by2_f32>
        break;
 8004ffe:	e00d      	b.n	800501c <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff f968 	bl	80042d8 <arm_cfft_radix8by4_f32>
        break;
 8005008:	e008      	b.n	800501c <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	b299      	uxth	r1, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	2301      	movs	r3, #1
 8005014:	68b8      	ldr	r0, [r7, #8]
 8005016:	f000 f845 	bl	80050a4 <arm_radix8_butterfly_f32>
        break;
 800501a:	bf00      	nop
    }

    if ( bitReverseFlag )
 800501c:	79bb      	ldrb	r3, [r7, #6]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8999      	ldrh	r1, [r3, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	461a      	mov	r2, r3
 800502c:	68b8      	ldr	r0, [r7, #8]
 800502e:	f7fb f907 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d130      	bne.n	800509a <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800504a:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	e01c      	b.n	8005092 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	61ba      	str	r2, [r7, #24]
 800505e:	ed93 7a00 	vldr	s14, [r3]
 8005062:	edd7 7a04 	vldr	s15, [r7, #16]
 8005066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506a:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	edd3 7a00 	vldr	s15, [r3]
 8005074:	eeb1 7a67 	vneg.f32	s14, s15
 8005078:	edd7 7a04 	vldr	s15, [r7, #16]
 800507c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3304      	adds	r3, #4
 800508a:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3301      	adds	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	429a      	cmp	r2, r3
 8005098:	d3de      	bcc.n	8005058 <arm_cfft_f32+0x12a>
        }
    }
}
 800509a:	bf00      	nop
 800509c:	3720      	adds	r7, #32
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b0bd      	sub	sp, #244	; 0xf4
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	461a      	mov	r2, r3
 80050b0:	460b      	mov	r3, r1
 80050b2:	817b      	strh	r3, [r7, #10]
 80050b4:	4613      	mov	r3, r2
 80050b6:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <arm_radix8_butterfly_f32+0x3c>)
 80050ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	08db      	lsrs	r3, r3, #3
 80050d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050dc:	e002      	b.n	80050e4 <arm_radix8_butterfly_f32+0x40>
 80050de:	bf00      	nop
 80050e0:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80050e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80050e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ec:	4413      	add	r3, r2
 80050ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80050f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fa:	4413      	add	r3, r2
 80050fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8005100:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005108:	4413      	add	r3, r2
 800510a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800510e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005116:	4413      	add	r3, r2
 8005118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800511c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	4413      	add	r3, r2
 8005126:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800512a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	4413      	add	r3, r2
 8005134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8005138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800513c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005140:	4413      	add	r3, r2
 8005142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8005146:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	ed93 7a00 	vldr	s14, [r3]
 8005154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	edd3 7a00 	vldr	s15, [r3]
 8005162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005166:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800516a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	ed93 7a00 	vldr	s14, [r3]
 8005178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	edd3 7a00 	vldr	s15, [r3]
 8005186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800518a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800518e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	ed93 7a00 	vldr	s14, [r3]
 800519c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	edd3 7a00 	vldr	s15, [r3]
 80051aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80051b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	ed93 7a00 	vldr	s14, [r3]
 80051c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051d2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80051d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	ed93 7a00 	vldr	s14, [r3]
 80051e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	edd3 7a00 	vldr	s15, [r3]
 80051f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80051fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	ed93 7a00 	vldr	s14, [r3]
 8005208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	edd3 7a00 	vldr	s15, [r3]
 8005216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800521a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800521e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	ed93 7a00 	vldr	s14, [r3]
 800522c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800523e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8005242:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	ed93 7a00 	vldr	s14, [r3]
 8005250:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	edd3 7a00 	vldr	s15, [r3]
 800525e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005262:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8005266:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800526a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800526e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005272:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8005276:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800527a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800527e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005282:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8005286:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800528a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800528e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005292:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8005296:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800529a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800529e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80052a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80052b4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80052b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052bc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80052c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80052ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80052d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d6:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80052da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	3304      	adds	r3, #4
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	ed93 7a00 	vldr	s14, [r3]
 80052ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	3304      	adds	r3, #4
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	edd3 7a00 	vldr	s15, [r3]
 80052fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052fe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005302:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3304      	adds	r3, #4
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	ed93 7a00 	vldr	s14, [r3]
 8005312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3304      	adds	r3, #4
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005326:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800532a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	3304      	adds	r3, #4
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	ed93 7a00 	vldr	s14, [r3]
 800533a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	3304      	adds	r3, #4
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800534e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	3304      	adds	r3, #4
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	ed93 7a00 	vldr	s14, [r3]
 8005362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	3304      	adds	r3, #4
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	edd3 7a00 	vldr	s15, [r3]
 8005372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005376:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800537a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3304      	adds	r3, #4
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	ed93 7a00 	vldr	s14, [r3]
 800538a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3304      	adds	r3, #4
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	edd3 7a00 	vldr	s15, [r3]
 800539a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800539e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80053a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	3304      	adds	r3, #4
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	ed93 7a00 	vldr	s14, [r3]
 80053b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	3304      	adds	r3, #4
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	edd3 7a00 	vldr	s15, [r3]
 80053c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80053ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	3304      	adds	r3, #4
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	ed93 7a00 	vldr	s14, [r3]
 80053da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3304      	adds	r3, #4
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	edd3 7a00 	vldr	s15, [r3]
 80053ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80053f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	3304      	adds	r3, #4
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	ed93 7a00 	vldr	s14, [r3]
 8005402:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	3304      	adds	r3, #4
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	edd3 7a00 	vldr	s15, [r3]
 8005412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005416:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800541a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800541e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005426:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800542a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800542e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005436:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800543a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800543e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005446:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800544a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800544e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005456:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800545a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	3304      	adds	r3, #4
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800546a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800546e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005472:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8005476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3304      	adds	r3, #4
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005486:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800548a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800548e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8005492:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80054a0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80054a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80054ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80054ba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80054be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80054c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	3304      	adds	r3, #4
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80054d6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80054da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80054e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	3304      	adds	r3, #4
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80054f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80054f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054fa:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80054fe:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005502:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800550a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8005516:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800551a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800551e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005522:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800552e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005532:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800553a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800553e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005542:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8005546:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800554a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800554e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005552:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800555e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005562:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800556a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800556e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005572:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800557a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800557e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005582:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800558a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800558e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005592:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800559a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800559e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80055a2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80055a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055aa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80055ae:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80055b2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80055b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ba:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80055be:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80055c2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80055c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ca:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80055ce:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80055d2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80055d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055da:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80055de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80055ec:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80055f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80055f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005606:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800560a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800560e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8005612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005620:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005628:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800562c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800563a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800563e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005642:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8005646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	3304      	adds	r3, #4
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005656:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800565a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800565e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8005662:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	3304      	adds	r3, #4
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005672:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800567a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800567e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	3304      	adds	r3, #4
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800568e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005696:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800569a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	3304      	adds	r3, #4
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80056aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b2:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80056b6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80056ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056be:	4413      	add	r3, r2
 80056c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80056c4:	897b      	ldrh	r3, [r7, #10]
 80056c6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80056ca:	429a      	cmp	r2, r3
 80056cc:	f4ff ad0a 	bcc.w	80050e4 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d4:	2b07      	cmp	r3, #7
 80056d6:	f240 84e3 	bls.w	80060a0 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80056e6:	893b      	ldrh	r3, [r7, #8]
 80056e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80056ec:	4413      	add	r3, r2
 80056ee:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80056f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80056f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80056fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056fc:	4413      	add	r3, r2
 80056fe:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8005700:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005704:	4413      	add	r3, r2
 8005706:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8005708:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800570a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800570c:	4413      	add	r3, r2
 800570e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8005710:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005714:	4413      	add	r3, r2
 8005716:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8005718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800571a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800571c:	4413      	add	r3, r2
 800571e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8005720:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005724:	4413      	add	r3, r2
 8005726:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8005728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8005736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8005742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800574e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800575a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8005766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4413      	add	r3, r2
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8005772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	4413      	add	r3, r2
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800577e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	3304      	adds	r3, #4
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800578e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	3304      	adds	r3, #4
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800579c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	3304      	adds	r3, #4
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80057aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	3304      	adds	r3, #4
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4413      	add	r3, r2
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80057b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	3304      	adds	r3, #4
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 80057c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	3304      	adds	r3, #4
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4413      	add	r3, r2
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 80057d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	3304      	adds	r3, #4
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80057ea:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	4413      	add	r3, r2
 80057f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 80057f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80057fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005800:	4413      	add	r3, r2
 8005802:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8005806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	4413      	add	r3, r2
 8005810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8005814:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581c:	4413      	add	r3, r2
 800581e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8005822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582a:	4413      	add	r3, r2
 800582c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8005830:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005838:	4413      	add	r3, r2
 800583a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800583e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	4413      	add	r3, r2
 8005848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800584c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	ed93 7a00 	vldr	s14, [r3]
 800585a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	edd3 7a00 	vldr	s15, [r3]
 8005868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800586c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8005870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	ed93 7a00 	vldr	s14, [r3]
 800587e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	edd3 7a00 	vldr	s15, [r3]
 800588c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005890:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005894:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	ed93 7a00 	vldr	s14, [r3]
 80058a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	edd3 7a00 	vldr	s15, [r3]
 80058b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80058b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	ed93 7a00 	vldr	s14, [r3]
 80058c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	edd3 7a00 	vldr	s15, [r3]
 80058d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80058dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	ed93 7a00 	vldr	s14, [r3]
 80058ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	edd3 7a00 	vldr	s15, [r3]
 80058f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058fc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005900:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	ed93 7a00 	vldr	s14, [r3]
 800590e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	edd3 7a00 	vldr	s15, [r3]
 800591c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005920:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	ed93 7a00 	vldr	s14, [r3]
 8005932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	edd3 7a00 	vldr	s15, [r3]
 8005940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005944:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8005948:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	ed93 7a00 	vldr	s14, [r3]
 8005956:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	edd3 7a00 	vldr	s15, [r3]
 8005964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005968:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800596c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005970:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005978:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800597c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005980:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005988:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800598c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005990:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005998:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800599c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80059a0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80059a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059a8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80059ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80059ba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80059be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c2:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 80059c6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80059ca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80059ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059d2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80059d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	3304      	adds	r3, #4
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	ed93 7a00 	vldr	s14, [r3]
 80059e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	3304      	adds	r3, #4
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	edd3 7a00 	vldr	s15, [r3]
 80059f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80059fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	3304      	adds	r3, #4
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	ed93 7a00 	vldr	s14, [r3]
 8005a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	3304      	adds	r3, #4
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	edd3 7a00 	vldr	s15, [r3]
 8005a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a22:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8005a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	ed93 7a00 	vldr	s14, [r3]
 8005a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	edd3 7a00 	vldr	s15, [r3]
 8005a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	3304      	adds	r3, #4
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	ed93 7a00 	vldr	s14, [r3]
 8005a5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3304      	adds	r3, #4
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	edd3 7a00 	vldr	s15, [r3]
 8005a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a72:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005a76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	ed93 7a00 	vldr	s14, [r3]
 8005a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	edd3 7a00 	vldr	s15, [r3]
 8005a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a9a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005a9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	ed93 7a00 	vldr	s14, [r3]
 8005aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	edd3 7a00 	vldr	s15, [r3]
 8005abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	3304      	adds	r3, #4
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	ed93 7a00 	vldr	s14, [r3]
 8005ad6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	3304      	adds	r3, #4
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	edd3 7a00 	vldr	s15, [r3]
 8005ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aea:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	3304      	adds	r3, #4
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	ed93 7a00 	vldr	s14, [r3]
 8005afe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	3304      	adds	r3, #4
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	edd3 7a00 	vldr	s15, [r3]
 8005b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b12:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8005b16:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b1a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b22:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8005b26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b2a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b32:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8005b36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005b3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b42:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005b46:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005b4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8005b56:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005b5a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b62:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8005b66:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005b6a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b72:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8005b76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b8e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005b92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8005ba2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005ba6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8005bb2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005bb6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bbe:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005bc2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005bc6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005bd2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005bd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005be2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005be6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005bf2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005bf6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfe:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c18:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8005c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	3304      	adds	r3, #4
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c34:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8005c38:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005c3c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005c48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c54:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8005c58:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005c5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c64:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8005c68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c6c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c74:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8005c78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c8e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005c92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	3304      	adds	r3, #4
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005caa:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005cae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005cb2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005cbe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005cc2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cca:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005cce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005cd2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cda:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005cde:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005ce2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d04:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8005d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	3304      	adds	r3, #4
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d18:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d20:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005d24:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005d28:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d30:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d38:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8005d3c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005d40:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d48:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d50:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005d54:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005d58:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d60:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8005d6c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005d70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d78:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d80:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8005d84:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d90:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8005d94:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d98:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8005da4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005da8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005db4:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005db8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005dc4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005dc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005dd4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005dd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005de4:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005de8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005df4:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005df8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e00:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005e04:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e08:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e10:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005e14:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e18:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e20:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005e24:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005e28:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e30:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005e34:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005e38:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e40:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005e44:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005e48:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e50:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005e54:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005e58:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e60:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8005e64:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005e68:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e70:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8005e74:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005e78:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e80:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8005e84:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e90:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005e94:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005ea4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005ea8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005eb4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005eb8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ed2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eda:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	ed97 7a05 	vldr	s14, [r7, #20]
 8005eee:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ef6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005efa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005efe:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005f0a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005f0e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005f1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005f1e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005f2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005f2e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005f3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f50:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f6c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005f70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f74:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005f80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005f84:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005f90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f94:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005fa0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005fa4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fac:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8005fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fda:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fe2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8005fe6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005fea:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8005ff6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005ffa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8006006:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800600a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8006016:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800601a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8006026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	ed97 7a07 	vldr	s14, [r7, #28]
 8006034:	edd7 7a06 	vldr	s15, [r7, #24]
 8006038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800603c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8006040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	3304      	adds	r3, #4
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006050:	edd7 7a04 	vldr	s15, [r7, #16]
 8006054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006058:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800605c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006064:	4413      	add	r3, r2
 8006066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006070:	429a      	cmp	r2, r3
 8006072:	f4ff abba 	bcc.w	80057ea <arm_radix8_butterfly_f32+0x746>

         j++;
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607a:	3301      	adds	r3, #1
 800607c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8006080:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006088:	429a      	cmp	r2, r3
 800608a:	f4ff ab2c 	bcc.w	80056e6 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800608e:	893b      	ldrh	r3, [r7, #8]
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006098:	2b07      	cmp	r3, #7
 800609a:	f63f a813 	bhi.w	80050c4 <arm_radix8_butterfly_f32+0x20>
}
 800609e:	e000      	b.n	80060a2 <arm_radix8_butterfly_f32+0xffe>
         break;
 80060a0:	bf00      	nop
}
 80060a2:	bf00      	nop
 80060a4:	37f4      	adds	r7, #244	; 0xf4
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop

080060b0 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b095      	sub	sp, #84	; 0x54
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80060d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80060d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80060de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80060e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80060ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ec:	1d1a      	adds	r2, r3, #4
 80060ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80060f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f6:	1d1a      	adds	r2, r3, #4
 80060f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80060fe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006102:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800610a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800610e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006112:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800611a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800611e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006122:	edd7 7a08 	vldr	s15, [r7, #32]
 8006126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	1d1a      	adds	r2, r3, #4
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006138:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800613c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006140:	edd7 7a08 	vldr	s15, [r7, #32]
 8006144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	1d1a      	adds	r2, r3, #4
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006156:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800615a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4413      	add	r3, r2
 8006162:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8006164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006166:	3308      	adds	r3, #8
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800616a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8006170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8006176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800617c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8006182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006184:	1d1a      	adds	r2, r3, #4
 8006186:	64ba      	str	r2, [r7, #72]	; 0x48
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800618c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	64ba      	str	r2, [r7, #72]	; 0x48
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8006196:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800619a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800619e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80061a6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80061aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80061ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b2:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80061b6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80061ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80061be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c2:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80061c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80061ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d2:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80061d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80061da:	edd7 7a08 	vldr	s15, [r7, #32]
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80061e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80061ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f2:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80061f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80061fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80061fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006202:	edd7 7a07 	vldr	s15, [r7, #28]
 8006206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800620a:	edd7 7a04 	vldr	s15, [r7, #16]
 800620e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800621c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006220:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8006224:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006228:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800622c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006230:	edd7 7a06 	vldr	s15, [r7, #24]
 8006234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006238:	edd7 7a05 	vldr	s15, [r7, #20]
 800623c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	1d1a      	adds	r2, r3, #4
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800624a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800624e:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8006252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006254:	3308      	adds	r3, #8
 8006256:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8006258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625a:	3b08      	subs	r3, #8
 800625c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800625e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006260:	3b01      	subs	r3, #1
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 8006264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006266:	2b00      	cmp	r3, #0
 8006268:	f47f af7f 	bne.w	800616a <stage_rfft_f32+0xba>
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3754      	adds	r7, #84	; 0x54
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 800627a:	b480      	push	{r7}
 800627c:	b095      	sub	sp, #84	; 0x54
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800629c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80062a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80062a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062aa:	3308      	adds	r3, #8
 80062ac:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80062ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80062b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80062b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	1d1a      	adds	r2, r3, #4
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80062c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062c8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80062cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80062d0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80062d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80062e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062e6:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80062ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4413      	add	r3, r2
 80062f2:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80062f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f6:	3308      	adds	r3, #8
 80062f8:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 80062fa:	e07c      	b.n	80063f6 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80062fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8006302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8006308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800630e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006316:	1d1a      	adds	r2, r3, #4
 8006318:	64ba      	str	r2, [r7, #72]	; 0x48
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800631e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006320:	1d1a      	adds	r2, r3, #4
 8006322:	64ba      	str	r2, [r7, #72]	; 0x48
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8006328:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800632c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006334:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8006338:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800633c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006344:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8006348:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800634c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006354:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8006358:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800635c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006364:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8006368:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800636c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006374:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8006378:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800637c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006384:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006388:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800638c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006394:	edd7 7a07 	vldr	s15, [r7, #28]
 8006398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800639c:	edd7 7a06 	vldr	s15, [r7, #24]
 80063a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80063ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063b2:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80063b6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80063ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80063be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80063c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80063ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80063dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063e0:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80063e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e6:	3308      	adds	r3, #8
 80063e8:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80063ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ec:	3b08      	subs	r3, #8
 80063ee:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80063f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f2:	3b01      	subs	r3, #1
 80063f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 80063f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f47f af7f 	bne.w	80062fc <merge_rfft_f32+0x82>
   }

}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	3754      	adds	r7, #84	; 0x54
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8a1b      	ldrh	r3, [r3, #16]
 8006422:	085b      	lsrs	r3, r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff ff20 	bl	800627a <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800643a:	78fa      	ldrb	r2, [r7, #3]
 800643c:	2301      	movs	r3, #1
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	6978      	ldr	r0, [r7, #20]
 8006442:	f7fe fd74 	bl	8004f2e <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8006446:	e00a      	b.n	800645e <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8006448:	78fa      	ldrb	r2, [r7, #3]
 800644a:	2301      	movs	r3, #1
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	6978      	ldr	r0, [r7, #20]
 8006450:	f7fe fd6d 	bl	8004f2e <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff fe29 	bl	80060b0 <stage_rfft_f32>
}
 800645e:	bf00      	nop
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 800647c:	887b      	ldrh	r3, [r7, #2]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006494:	d023      	beq.n	80064de <arm_rfft_fast_init_f32+0x76>
 8006496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649a:	f300 808c 	bgt.w	80065b6 <arm_rfft_fast_init_f32+0x14e>
 800649e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a2:	d02a      	beq.n	80064fa <arm_rfft_fast_init_f32+0x92>
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	f300 8085 	bgt.w	80065b6 <arm_rfft_fast_init_f32+0x14e>
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b0:	d031      	beq.n	8006516 <arm_rfft_fast_init_f32+0xae>
 80064b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b6:	dc7e      	bgt.n	80065b6 <arm_rfft_fast_init_f32+0x14e>
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064bc:	d039      	beq.n	8006532 <arm_rfft_fast_init_f32+0xca>
 80064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c2:	dc78      	bgt.n	80065b6 <arm_rfft_fast_init_f32+0x14e>
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d042      	beq.n	800654e <arm_rfft_fast_init_f32+0xe6>
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	dc74      	bgt.n	80065b6 <arm_rfft_fast_init_f32+0x14e>
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d04b      	beq.n	8006568 <arm_rfft_fast_init_f32+0x100>
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	dc70      	bgt.n	80065b6 <arm_rfft_fast_init_f32+0x14e>
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d061      	beq.n	800659c <arm_rfft_fast_init_f32+0x134>
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d052      	beq.n	8006582 <arm_rfft_fast_init_f32+0x11a>
 80064dc:	e06b      	b.n	80065b6 <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 80064e4:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4a38      	ldr	r2, [pc, #224]	; (80065cc <arm_rfft_fast_init_f32+0x164>)
 80064ea:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4a38      	ldr	r2, [pc, #224]	; (80065d0 <arm_rfft_fast_init_f32+0x168>)
 80064f0:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a37      	ldr	r2, [pc, #220]	; (80065d4 <arm_rfft_fast_init_f32+0x16c>)
 80064f6:	615a      	str	r2, [r3, #20]
    break;
 80064f8:	e060      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006500:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4a34      	ldr	r2, [pc, #208]	; (80065d8 <arm_rfft_fast_init_f32+0x170>)
 8006506:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a34      	ldr	r2, [pc, #208]	; (80065dc <arm_rfft_fast_init_f32+0x174>)
 800650c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a33      	ldr	r2, [pc, #204]	; (80065e0 <arm_rfft_fast_init_f32+0x178>)
 8006512:	615a      	str	r2, [r3, #20]
    break;
 8006514:	e052      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800651c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a30      	ldr	r2, [pc, #192]	; (80065e4 <arm_rfft_fast_init_f32+0x17c>)
 8006522:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a30      	ldr	r2, [pc, #192]	; (80065e8 <arm_rfft_fast_init_f32+0x180>)
 8006528:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2f      	ldr	r2, [pc, #188]	; (80065ec <arm_rfft_fast_init_f32+0x184>)
 800652e:	615a      	str	r2, [r3, #20]
    break;
 8006530:	e044      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006538:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <arm_rfft_fast_init_f32+0x188>)
 800653e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <arm_rfft_fast_init_f32+0x18c>)
 8006544:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2b      	ldr	r2, [pc, #172]	; (80065f8 <arm_rfft_fast_init_f32+0x190>)
 800654a:	615a      	str	r2, [r3, #20]
    break;
 800654c:	e036      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	22d0      	movs	r2, #208	; 0xd0
 8006552:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a29      	ldr	r2, [pc, #164]	; (80065fc <arm_rfft_fast_init_f32+0x194>)
 8006558:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4a28      	ldr	r2, [pc, #160]	; (8006600 <arm_rfft_fast_init_f32+0x198>)
 800655e:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a28      	ldr	r2, [pc, #160]	; (8006604 <arm_rfft_fast_init_f32+0x19c>)
 8006564:	615a      	str	r2, [r3, #20]
    break;
 8006566:	e029      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2238      	movs	r2, #56	; 0x38
 800656c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a25      	ldr	r2, [pc, #148]	; (8006608 <arm_rfft_fast_init_f32+0x1a0>)
 8006572:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a25      	ldr	r2, [pc, #148]	; (800660c <arm_rfft_fast_init_f32+0x1a4>)
 8006578:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a24      	ldr	r2, [pc, #144]	; (8006610 <arm_rfft_fast_init_f32+0x1a8>)
 800657e:	615a      	str	r2, [r3, #20]
    break;
 8006580:	e01c      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2230      	movs	r2, #48	; 0x30
 8006586:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a22      	ldr	r2, [pc, #136]	; (8006614 <arm_rfft_fast_init_f32+0x1ac>)
 800658c:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4a21      	ldr	r2, [pc, #132]	; (8006618 <arm_rfft_fast_init_f32+0x1b0>)
 8006592:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a21      	ldr	r2, [pc, #132]	; (800661c <arm_rfft_fast_init_f32+0x1b4>)
 8006598:	615a      	str	r2, [r3, #20]
    break;
 800659a:	e00f      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2214      	movs	r2, #20
 80065a0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <arm_rfft_fast_init_f32+0x1b8>)
 80065a6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <arm_rfft_fast_init_f32+0x1bc>)
 80065ac:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <arm_rfft_fast_init_f32+0x1c0>)
 80065b2:	615a      	str	r2, [r3, #20]
    break;
 80065b4:	e002      	b.n	80065bc <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 80065b6:	23ff      	movs	r3, #255	; 0xff
 80065b8:	73fb      	strb	r3, [r7, #15]
    break;
 80065ba:	bf00      	nop
  }

  return (status);
 80065bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	0801ec90 	.word	0x0801ec90
 80065d0:	080194f8 	.word	0x080194f8
 80065d4:	080249d0 	.word	0x080249d0
 80065d8:	0801de80 	.word	0x0801de80
 80065dc:	080174f8 	.word	0x080174f8
 80065e0:	080229d0 	.word	0x080229d0
 80065e4:	0801db00 	.word	0x0801db00
 80065e8:	080164f8 	.word	0x080164f8
 80065ec:	080219d0 	.word	0x080219d0
 80065f0:	0801d790 	.word	0x0801d790
 80065f4:	08015cf8 	.word	0x08015cf8
 80065f8:	080211d0 	.word	0x080211d0
 80065fc:	0801d5f0 	.word	0x0801d5f0
 8006600:	080158f8 	.word	0x080158f8
 8006604:	08020dd0 	.word	0x08020dd0
 8006608:	0801d580 	.word	0x0801d580
 800660c:	080156f8 	.word	0x080156f8
 8006610:	08020bd0 	.word	0x08020bd0
 8006614:	0801d520 	.word	0x0801d520
 8006618:	080155f8 	.word	0x080155f8
 800661c:	08020ad0 	.word	0x08020ad0
 8006620:	0801d4f8 	.word	0x0801d4f8
 8006624:	08015578 	.word	0x08015578
 8006628:	08020a50 	.word	0x08020a50

0800662c <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 800662c:	b480      	push	{r7}
 800662e:	b08f      	sub	sp, #60	; 0x3c
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 8006646:	e032      	b.n	80066ae <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 8006648:	f107 0210 	add.w	r2, r7, #16
 800664c:	6813      	ldr	r3, [r2, #0]
 800664e:	1d19      	adds	r1, r3, #4
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	2307      	movs	r3, #7
 8006660:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <arm_relu_q7+0x48>
    return op1;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	e003      	b.n	800667c <arm_relu_q7+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	fa62 f303 	ror.w	r3, r2, r3
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	2200      	movs	r2, #0
 8006682:	627a      	str	r2, [r7, #36]	; 0x24
 8006684:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	6a3a      	ldr	r2, [r7, #32]
 800668a:	fac3 f312 	qsub8	r3, r3, r2
 800668e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	43d9      	mvns	r1, r3
 8006698:	f107 020c 	add.w	r2, r7, #12
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	1d18      	adds	r0, r3, #4
 80066a0:	6010      	str	r0, [r2, #0]
 80066a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a4:	400a      	ands	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
        i--;
 80066a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066aa:	3b01      	subs	r3, #1
 80066ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 80066ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1c9      	bne.n	8006648 <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 80066b4:	887b      	ldrh	r3, [r7, #2]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 80066bc:	e00d      	b.n	80066da <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f993 3000 	ldrsb.w	r3, [r3]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	da02      	bge.n	80066ce <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3301      	adds	r3, #1
 80066d2:	613b      	str	r3, [r7, #16]
        i--;
 80066d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066d6:	3b01      	subs	r3, #1
 80066d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 80066da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1ee      	bne.n	80066be <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	373c      	adds	r7, #60	; 0x3c
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t * Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y, 
                                                  q15_t * bufferA, 
                                                  q7_t * bufferB)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b0aa      	sub	sp, #168	; 0xa8
 80066f2:	af04      	add	r7, sp, #16
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	461a      	mov	r2, r3
 80066fc:	4603      	mov	r3, r0
 80066fe:	817b      	strh	r3, [r7, #10]
 8006700:	460b      	mov	r3, r1
 8006702:	813b      	strh	r3, [r7, #8]
 8006704:	4613      	mov	r3, r2
 8006706:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 8006708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800670c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8006710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11e      	bne.n	8006762 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8006724:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d117      	bne.n	8006762 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8006732:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006736:	2b01      	cmp	r3, #1
 8006738:	d113      	bne.n	8006762 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 800673a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10f      	bne.n	8006762 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        || padding_x != 0 || padding_y != 0 || stride_x != 1 || stride_y != 1)
 8006742:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 800674a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8006752:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006756:	2b01      	cmp	r3, #1
 8006758:	d103      	bne.n	8006762 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 800675a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800675e:	2b01      	cmp	r3, #1
 8006760:	d002      	beq.n	8006768 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8006762:	f06f 0302 	mvn.w	r3, #2
 8006766:	e162      	b.n	8006a2e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x340>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006768:	2300      	movs	r3, #0
 800676a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800676e:	e05f      	b.n	8006830 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x142>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006770:	2300      	movs	r3, #0
 8006772:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006776:	e04e      	b.n	8006816 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x128>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer,
 8006778:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800677c:	897a      	ldrh	r2, [r7, #10]
 800677e:	fb02 f203 	mul.w	r2, r2, r3
 8006782:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8006786:	4413      	add	r3, r2
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800679a:	4618      	mov	r0, r3
 800679c:	f002 fbd4 	bl	8008f48 <arm_q7_to_q15_reordered_no_shift>
                                             ch_im_in);
            pBuffer += ch_im_in;
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80067a8:	4413      	add	r3, r2
 80067aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80067bc:	fb02 f303 	mul.w	r3, r2, r3
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80067c6:	4413      	add	r3, r2
 80067c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d11b      	bne.n	8006808 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
 80067d0:	88f9      	ldrh	r1, [r7, #6]
 80067d2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80067d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067da:	9303      	str	r3, [sp, #12]
 80067dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067e0:	9302      	str	r3, [sp, #8]
 80067e2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	460b      	mov	r3, r1
 80067f0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80067f4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80067f8:	f001 fcea 	bl	80081d0 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80067fc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                /* counter reset */
                pBuffer = bufferA;
 8006800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006808:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800680c:	b29b      	uxth	r3, r3
 800680e:	3301      	adds	r3, #1
 8006810:	b29b      	uxth	r3, r3
 8006812:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006816:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 800681a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800681e:	429a      	cmp	r2, r3
 8006820:	dbaa      	blt.n	8006778 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006822:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8006826:	b29b      	uxth	r3, r3
 8006828:	3301      	adds	r3, #1
 800682a:	b29b      	uxth	r3, r3
 800682c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8006830:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8006834:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8006838:	429a      	cmp	r2, r3
 800683a:	db99      	blt.n	8006770 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 800683c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006844:	429a      	cmp	r2, r3
 8006846:	f000 80f1 	beq.w	8006a2c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x33e>
    {
        const q7_t *pA = wt;
 800684a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800684e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 8006852:	2300      	movs	r3, #0
 8006854:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8006858:	e0e1      	b.n	8006a1e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x330>
        {
            q31_t     sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 800685a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800685e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006862:	4413      	add	r3, r2
 8006864:	f993 3000 	ldrsb.w	r3, [r3]
 8006868:	461a      	mov	r2, r3
 800686a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800686e:	409a      	lsls	r2, r3
 8006870:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006874:	3b01      	subs	r3, #1
 8006876:	2101      	movs	r1, #1
 8006878:	fa01 f303 	lsl.w	r3, r1, r3
 800687c:	4413      	add	r3, r2
 800687e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            q15_t    *pB = bufferA;
 8006882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006886:	623b      	str	r3, [r7, #32]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 8006888:	88fb      	ldrh	r3, [r7, #6]
 800688a:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006896:	fb02 f303 	mul.w	r3, r2, r3
 800689a:	109b      	asrs	r3, r3, #2
 800689c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            while (colCnt)
 80068a0:	e06b      	b.n	800697a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x28c>
 80068a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	f107 031c 	add.w	r3, r7, #28
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
 80068ae:	f107 0318 	add.w	r3, r7, #24
 80068b2:	643b      	str	r3, [r7, #64]	; 0x40
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 80068b4:	f107 0214 	add.w	r2, r7, #20
 80068b8:	6813      	ldr	r3, [r2, #0]
 80068ba:	1d19      	adds	r1, r3, #4
 80068bc:	6011      	str	r1, [r2, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c6:	2308      	movs	r3, #8
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
  op2 %= 32U;
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (op2 == 0U)
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1ee>
    return op1;
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	e003      	b.n	80068e4 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1f6>
  return (op1 >> op2) | (op1 << (32U - op2));
 80068dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	fa62 f303 	ror.w	r3, r2, r3
 80068e4:	633b      	str	r3, [r7, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	fa2f f383 	sxtb16	r3, r3
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	461a      	mov	r2, r3
 80068f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f4:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	fa2f f383 	sxtb16	r3, r3
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	461a      	mov	r2, r3
 8006906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006908:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 800690a:	697b      	ldr	r3, [r7, #20]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (const q7_t *)read_and_pad_reordered((void *)pA, &inA1, &inA2);
 800690c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8006910:	f107 0220 	add.w	r2, r7, #32
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	1d19      	adds	r1, r3, #4
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA1, inB1, sum);
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4619      	mov	r1, r3
 8006922:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006928:	6579      	str	r1, [r7, #84]	; 0x54
 800692a:	653a      	str	r2, [r7, #80]	; 0x50
 800692c:	64fb      	str	r3, [r7, #76]	; 0x4c

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800692e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006932:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006934:	fb23 1302 	smlad	r3, r3, r2, r1
 8006938:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800693a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800693c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                inB2 = *__SIMD32(pB)++;
 8006940:	f107 0220 	add.w	r2, r7, #32
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	1d19      	adds	r1, r3, #4
 8006948:	6011      	str	r1, [r2, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA2, inB2, sum);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	4619      	mov	r1, r3
 8006952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006958:	6679      	str	r1, [r7, #100]	; 0x64
 800695a:	663a      	str	r2, [r7, #96]	; 0x60
 800695c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800695e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006962:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006964:	fb23 1302 	smlad	r3, r3, r2, r1
 8006968:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 800696a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800696c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                colCnt--;
 8006970:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006974:	3b01      	subs	r3, #1
 8006976:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 800697a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800697e:	2b00      	cmp	r3, #0
 8006980:	d18f      	bne.n	80068a2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b4>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006988:	fb12 f303 	smulbb	r3, r2, r3
 800698c:	b29b      	uxth	r3, r3
 800698e:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006992:	fb12 f303 	smulbb	r3, r2, r3
 8006996:	b29b      	uxth	r3, r3
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 80069a0:	e01d      	b.n	80069de <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2f0>
            {
                q7_t      inA1 = *pA++;
 80069a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                q15_t     inB1 = *pB++;
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	1c9a      	adds	r2, r3, #2
 80069b6:	623a      	str	r2, [r7, #32]
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                sum += inA1 * inB1;
 80069be:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 80069c2:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ce:	4413      	add	r3, r2
 80069d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                colCnt--;
 80069d4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80069d8:	3b01      	subs	r3, #1
 80069da:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 80069de:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1dd      	bne.n	80069a2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2b4>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 80069e6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80069ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ee:	fa42 f303 	asr.w	r3, r2, r3
 80069f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80069f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f6:	f303 0307 	ssat	r3, #8, r3
 80069fa:	677b      	str	r3, [r7, #116]	; 0x74
 80069fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069fe:	b25a      	sxtb	r2, r3
 8006a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a04:	701a      	strb	r2, [r3, #0]
            pOut++;
 8006a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 8006a10:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3301      	adds	r3, #1
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8006a1e:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8006a22:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006a26:	429a      	cmp	r2, r3
 8006a28:	f6ff af17 	blt.w	800685a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16c>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3798      	adds	r7, #152	; 0x98
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t * Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t * bufferA,
                                               q7_t * bufferB)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b0ac      	sub	sp, #176	; 0xb0
 8006a3c:	af04      	add	r7, sp, #16
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	4608      	mov	r0, r1
 8006a42:	4611      	mov	r1, r2
 8006a44:	461a      	mov	r2, r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	817b      	strh	r3, [r7, #10]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	813b      	strh	r3, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 8006a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 8006a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006a62:	2300      	movs	r3, #0
 8006a64:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006a68:	e0cf      	b.n	8006c0a <arm_convolve_HWC_q7_basic_nonsquare+0x1d2>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006a70:	e0bd      	b.n	8006bee <arm_convolve_HWC_q7_basic_nonsquare+0x1b6>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006a72:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a76:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8006a7a:	fb12 f303 	smulbb	r3, r2, r3
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006a8c:	e061      	b.n	8006b52 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006a8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006a92:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8006a96:	fb12 f303 	smulbb	r3, r2, r3
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006aa8:	e03c      	b.n	8006b24 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006aaa:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	db0d      	blt.n	8006ace <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006ab2:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006ab6:	893b      	ldrh	r3, [r7, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	da08      	bge.n	8006ace <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006abc:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	db04      	blt.n	8006ace <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006ac4:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006ac8:	897b      	ldrh	r3, [r7, #10]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	db08      	blt.n	8006ae0 <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006ada:	f008 fc11 	bl	800f300 <memset>
 8006ade:	e013      	b.n	8006b08 <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8006ae0:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006ae4:	897a      	ldrh	r2, [r7, #10]
 8006ae6:	fb02 f203 	mul.w	r2, r2, r3
 8006aea:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006aee:	4413      	add	r3, r2
 8006af0:	88fa      	ldrh	r2, [r7, #6]
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006b02:	4618      	mov	r0, r3
 8006b04:	f002 f9ae 	bl	8008e64 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b10:	4413      	add	r3, r2
 8006b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006b16:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006b24:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006b28:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006b2c:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8006b30:	fb01 f103 	mul.w	r1, r1, r3
 8006b34:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006b38:	1ac9      	subs	r1, r1, r3
 8006b3a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006b3e:	440b      	add	r3, r1
 8006b40:	429a      	cmp	r2, r3
 8006b42:	dbb2      	blt.n	8006aaa <arm_convolve_HWC_q7_basic_nonsquare+0x72>
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006b44:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006b52:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006b56:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006b5a:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8006b5e:	fb01 f103 	mul.w	r1, r1, r3
 8006b62:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006b66:	1ac9      	subs	r1, r1, r3
 8006b68:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b6c:	440b      	add	r3, r1
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	db8d      	blt.n	8006a8e <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8006b72:	88fb      	ldrh	r3, [r7, #6]
 8006b74:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d125      	bne.n	8006be0 <arm_convolve_HWC_q7_basic_nonsquare+0x1a8>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 8006b94:	88fa      	ldrh	r2, [r7, #6]
 8006b96:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b9a:	fb12 f303 	smulbb	r3, r2, r3
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006ba4:	fb12 f303 	smulbb	r3, r2, r3
 8006ba8:	b299      	uxth	r1, r3
 8006baa:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bb2:	9303      	str	r3, [sp, #12]
 8006bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bb8:	9302      	str	r3, [sp, #8]
 8006bba:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006bcc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006bd0:	f000 fd8c 	bl	80076ec <arm_nn_mat_mult_kernel_q7_q15>
 8006bd4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006be0:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3301      	adds	r3, #1
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006bee:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8006bf2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	f6ff af3b 	blt.w	8006a72 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006bfc:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3301      	adds	r3, #1
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006c0a:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 8006c0e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8006c12:	429a      	cmp	r2, r3
 8006c14:	f6ff af29 	blt.w	8006a6a <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8006c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	429a      	cmp	r2, r3
 8006c22:	f000 80fa 	beq.w	8006e1a <arm_convolve_HWC_q7_basic_nonsquare+0x3e2>
    {
        const q7_t *pA = wt;
 8006c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c34:	e0ea      	b.n	8006e0c <arm_convolve_HWC_q7_basic_nonsquare+0x3d4>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8006c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c3e:	4413      	add	r3, r2
 8006c40:	f993 3000 	ldrsb.w	r3, [r3]
 8006c44:	461a      	mov	r2, r3
 8006c46:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006c50:	3b01      	subs	r3, #1
 8006c52:	2101      	movs	r1, #1
 8006c54:	fa01 f303 	lsl.w	r3, r1, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 8006c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c62:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006c72:	fb02 f303 	mul.w	r3, r2, r3
 8006c76:	109b      	asrs	r3, r3, #2
 8006c78:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 8006c7c:	e078      	b.n	8006d70 <arm_convolve_HWC_q7_basic_nonsquare+0x338>
 8006c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	f107 0318 	add.w	r3, r7, #24
 8006c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c8a:	f107 0314 	add.w	r3, r7, #20
 8006c8e:	647b      	str	r3, [r7, #68]	; 0x44
        q31_t     inA = *__SIMD32(source)++;
 8006c90:	f107 0210 	add.w	r2, r7, #16
 8006c94:	6813      	ldr	r3, [r2, #0]
 8006c96:	1d19      	adds	r1, r3, #4
 8006c98:	6011      	str	r1, [r2, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8006c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <arm_convolve_HWC_q7_basic_nonsquare+0x280>
    return op1;
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb6:	e003      	b.n	8006cc0 <arm_convolve_HWC_q7_basic_nonsquare+0x288>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	fa62 f303 	ror.w	r3, r2, r3
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	fa2f f383 	sxtb16	r3, r3
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 8006cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	fa2f f383 	sxtb16	r3, r3
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	623b      	str	r3, [r7, #32]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8006cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce0:	4b50      	ldr	r3, [pc, #320]	; (8006e24 <arm_convolve_HWC_q7_basic_nonsquare+0x3ec>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	6a3a      	ldr	r2, [r7, #32]
 8006ce6:	0c12      	lsrs	r2, r2, #16
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	461a      	mov	r2, r3
 8006cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cee:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfe:	601a      	str	r2, [r3, #0]
        return source;
 8006d00:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8006d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 8006d06:	f107 021c 	add.w	r2, r7, #28
 8006d0a:	6813      	ldr	r3, [r2, #0]
 8006d0c:	1d19      	adds	r1, r3, #4
 8006d0e:	6011      	str	r1, [r2, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA1, inB1, sum);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d20:	657a      	str	r2, [r7, #84]	; 0x54
 8006d22:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d2a:	fb23 1302 	smlad	r3, r3, r2, r1
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8006d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 8006d36:	f107 021c 	add.w	r2, r7, #28
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	1d19      	adds	r1, r3, #4
 8006d3e:	6011      	str	r1, [r2, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA2, inB2, sum);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d4e:	66b9      	str	r1, [r7, #104]	; 0x68
 8006d50:	667a      	str	r2, [r7, #100]	; 0x64
 8006d52:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006d5a:	fb23 1302 	smlad	r3, r3, r2, r1
 8006d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8006d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 8006d66:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d70:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d182      	bne.n	8006c7e <arm_convolve_HWC_q7_basic_nonsquare+0x246>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006d78:	88fa      	ldrh	r2, [r7, #6]
 8006d7a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006d7e:	fb12 f303 	smulbb	r3, r2, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006d88:	fb12 f303 	smulbb	r3, r2, r3
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d96:	e01d      	b.n	8006dd4 <arm_convolve_HWC_q7_basic_nonsquare+0x39c>
            {
                q7_t      inA1 = *pA++;
 8006d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	1c9a      	adds	r2, r3, #2
 8006dac:	61fa      	str	r2, [r7, #28]
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 8006db4:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8006db8:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8006dbc:	fb02 f303 	mul.w	r3, r2, r3
 8006dc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 8006dca:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006dd4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1dd      	bne.n	8006d98 <arm_convolve_HWC_q7_basic_nonsquare+0x360>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8006ddc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006de0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006de4:	fa42 f303 	asr.w	r3, r2, r3
 8006de8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006dec:	f303 0307 	ssat	r3, #8, r3
 8006df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006df2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006dfe:	b24a      	sxtb	r2, r1
 8006e00:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8006e02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e06:	3301      	adds	r3, #1
 8006e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e0c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006e10:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e14:	429a      	cmp	r2, r3
 8006e16:	f6ff af0e 	blt.w	8006c36 <arm_convolve_HWC_q7_basic_nonsquare+0x1fe>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	37a0      	adds	r7, #160	; 0xa0
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	ffff0000 	.word	0xffff0000

08006e28 <arm_depthwise_separable_conv_HWC_q7_nonsquare>:
                                                         q7_t * Im_out,
                                                         const uint16_t dim_im_out_x,
                                                         const uint16_t dim_im_out_y, 
                                                         q15_t * bufferA, 
                                                         q7_t * bufferB)
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b0d3      	sub	sp, #332	; 0x14c
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	f107 040c 	add.w	r4, r7, #12
 8006e32:	6020      	str	r0, [r4, #0]
 8006e34:	460c      	mov	r4, r1
 8006e36:	4610      	mov	r0, r2
 8006e38:	4619      	mov	r1, r3
 8006e3a:	f107 030a 	add.w	r3, r7, #10
 8006e3e:	4622      	mov	r2, r4
 8006e40:	801a      	strh	r2, [r3, #0]
 8006e42:	f107 0308 	add.w	r3, r7, #8
 8006e46:	4602      	mov	r2, r0
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	1dbb      	adds	r3, r7, #6
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	801a      	strh	r2, [r3, #0]
 *
 */

    int16_t   i_out_y, i_out_x;
    int16_t   i_ker_y, i_ker_x;
    q7_t     *colBuffer = (q7_t *) bufferA;
 8006e50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006e54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q7_t     *pBuffer = colBuffer;
 8006e58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e5c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    const q7_t *pBias = bias;
 8006e60:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006e64:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    q7_t     *pOut = Im_out;
 8006e68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006e6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t  rowCnt;
    uint16_t  row_shift;

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8006e70:	1dbb      	adds	r3, r7, #6
 8006e72:	881a      	ldrh	r2, [r3, #0]
 8006e74:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d003      	beq.n	8006e84 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8006e7c:	f06f 0302 	mvn.w	r3, #2
 8006e80:	f000 bc2f 	b.w	80076e2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8ba>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006e84:	2300      	movs	r3, #0
 8006e86:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8006e8a:	f000 bc22 	b.w	80076d2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8aa>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8006e94:	f000 bc0f 	b.w	80076b6 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x88e>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006e98:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006e9c:	f8b7 2174 	ldrh.w	r2, [r7, #372]	; 0x174
 8006ea0:	fb12 f303 	smulbb	r3, r2, r3
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
 8006eb2:	e06b      	b.n	8006f8c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x164>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006eb4:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 8006eb8:	f8b7 2170 	ldrh.w	r2, [r7, #368]	; 0x170
 8006ebc:	fb12 f303 	smulbb	r3, r2, r3
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8006ece:	e046      	b.n	8006f5e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x136>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006ed0:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db11      	blt.n	8006efc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006ed8:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006edc:	f107 0308 	add.w	r3, r7, #8
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	da0a      	bge.n	8006efc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006ee6:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db06      	blt.n	8006efc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006eee:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006ef2:	f107 030a 	add.w	r3, r7, #10
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	db08      	blt.n	8006f0e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xe6>
                    {
                        /* arm_fill_q7(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, ch_im_in);
 8006efc:	1dbb      	adds	r3, r7, #6
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	2100      	movs	r1, #0
 8006f04:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006f08:	f008 f9fa 	bl	800f300 <memset>
 8006f0c:	e019      	b.n	8006f42 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x11a>
                    } else
                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
 8006f0e:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006f12:	f107 020a 	add.w	r2, r7, #10
 8006f16:	8812      	ldrh	r2, [r2, #0]
 8006f18:	fb02 f203 	mul.w	r2, r2, r3
 8006f1c:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006f20:	4413      	add	r3, r2
 8006f22:	1dba      	adds	r2, r7, #6
 8006f24:	8812      	ldrh	r2, [r2, #0]
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	1899      	adds	r1, r3, r2
 8006f34:	1dbb      	adds	r3, r7, #6
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006f3e:	f008 f9b7 	bl	800f2b0 <memcpy>
                    }
                    pBuffer += ch_im_in;
 8006f42:	1dbb      	adds	r3, r7, #6
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                     i_ker_x++)
 8006f50:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3301      	adds	r3, #1
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006f5e:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006f62:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8006f66:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 8006f6a:	fb01 f103 	mul.w	r1, r1, r3
 8006f6e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006f72:	1ac9      	subs	r1, r1, r3
 8006f74:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8006f78:	440b      	add	r3, r1
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	dba8      	blt.n	8006ed0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa8>
                 i_ker_y++)
 8006f7e:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3301      	adds	r3, #1
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006f8c:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006f90:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8006f94:	f8b7 1174 	ldrh.w	r1, [r7, #372]	; 0x174
 8006f98:	fb01 f103 	mul.w	r1, r1, r3
 8006f9c:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006fa0:	1ac9      	subs	r1, r1, r3
 8006fa2:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8006fa6:	440b      	add	r3, r1
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	db83      	blt.n	8006eb4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8c>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 8006fac:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006fb0:	089b      	lsrs	r3, r3, #2
 8006fb2:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            row_shift = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
            pBias = bias;
 8006fbc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006fc0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

            while (rowCnt)
 8006fc4:	e2e4      	b.n	8007590 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x768>
            {
                q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006fc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006fda:	409a      	lsls	r2, r3
 8006fdc:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	4413      	add	r3, r2
 8006fea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006fee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8007002:	409a      	lsls	r2, r3
 8007004:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007008:	3b01      	subs	r3, #1
 800700a:	2101      	movs	r1, #1
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007016:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007020:	f993 3000 	ldrsb.w	r3, [r3]
 8007024:	461a      	mov	r2, r3
 8007026:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 800702a:	409a      	lsls	r2, r3
 800702c:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007030:	3b01      	subs	r3, #1
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	4413      	add	r3, r2
 800703a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800703e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007048:	f993 3000 	ldrsb.w	r3, [r3]
 800704c:	461a      	mov	r2, r3
 800704e:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8007052:	409a      	lsls	r2, r3
 8007054:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007058:	3b01      	subs	r3, #1
 800705a:	2101      	movs	r1, #1
 800705c:	fa01 f303 	lsl.w	r3, r1, r3
 8007060:	4413      	add	r3, r2
 8007062:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
 8007066:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 800706a:	f8b7 2164 	ldrh.w	r2, [r7, #356]	; 0x164
 800706e:	fb02 f303 	mul.w	r3, r2, r3
 8007072:	105b      	asrs	r3, r3, #1
 8007074:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                q7_t     *pB = colBuffer + row_shift;
 8007078:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800707c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007080:	441a      	add	r2, r3
 8007082:	f107 0320 	add.w	r3, r7, #32
 8007086:	601a      	str	r2, [r3, #0]
                const q7_t *pA = wt + row_shift;
 8007088:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800708c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8007090:	441a      	add	r2, r3
 8007092:	f107 031c 	add.w	r3, r7, #28
 8007096:	601a      	str	r2, [r3, #0]
                row_shift += 4;
 8007098:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800709c:	3304      	adds	r3, #4
 800709e:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 80070a2:	e198      	b.n	80073d6 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5ae>
                {
                    q31_t     inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = *__SIMD32(pB);
 80070a4:	f107 0320 	add.w	r3, r7, #32
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    pB += ch_im_in;
 80070b0:	f107 0320 	add.w	r3, r7, #32
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	1dbb      	adds	r3, r7, #6
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	441a      	add	r2, r3
 80070bc:	f107 0320 	add.w	r3, r7, #32
 80070c0:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pB);
 80070c2:	f107 0320 	add.w	r3, r7, #32
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pB += ch_im_in;
 80070ce:	f107 0320 	add.w	r3, r7, #32
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	1dbb      	adds	r3, r7, #6
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	441a      	add	r2, r3
 80070da:	f107 0320 	add.w	r3, r7, #32
 80070de:	601a      	str	r2, [r3, #0]
                    inB2 = __PKHTB(opB, inB1, 16);
 80070e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80070e4:	4bc4      	ldr	r3, [pc, #784]	; (80073f8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 80070e6:	4013      	ands	r3, r2
 80070e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80070ec:	0c12      	lsrs	r2, r2, #16
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                    inB1 = __PKHBT(inB1, opB, 16);
 80070f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    inA1 = *__SIMD32(pA);
 8007106:	f107 031c 	add.w	r3, r7, #28
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    pA += ch_im_in;
 8007112:	f107 031c 	add.w	r3, r7, #28
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	1dbb      	adds	r3, r7, #6
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	441a      	add	r2, r3
 800711e:	f107 031c 	add.w	r3, r7, #28
 8007122:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pA);
 8007124:	f107 031c 	add.w	r3, r7, #28
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pA += ch_im_in;
 8007130:	f107 031c 	add.w	r3, r7, #28
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	1dbb      	adds	r3, r7, #6
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	441a      	add	r2, r3
 800713c:	f107 031c 	add.w	r3, r7, #28
 8007140:	601a      	str	r2, [r3, #0]
                    inA2 = __PKHTB(opB, inA1, 16);
 8007142:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007146:	4bac      	ldr	r3, [pc, #688]	; (80073f8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 8007148:	4013      	ands	r3, r2
 800714a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800714e:	0c12      	lsrs	r2, r2, #16
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    inA1 = __PKHBT(inA1, opB, 16);
 8007156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800715a:	b29a      	uxth	r2, r3
 800715c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    opA = __SXTB16(inA1);
 8007168:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800716c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007170:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	fa2f f283 	sxtb16	r2, r3
 800717c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007180:	601a      	str	r2, [r3, #0]
  return(result);
 8007182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB1);
 800718c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007194:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007196:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	fa2f f283 	sxtb16	r2, r3
 80071a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071a4:	601a      	str	r2, [r3, #0]
  return(result);
 80071a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum = __SMLAD(opA, opB, sum);
 80071b0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80071b4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80071b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80071bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071c0:	6018      	str	r0, [r3, #0]
 80071c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071c6:	6019      	str	r1, [r3, #0]
 80071c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80071cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80071ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80071de:	6809      	ldr	r1, [r1, #0]
 80071e0:	fb23 1202 	smlad	r2, r3, r2, r1
 80071e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071e8:	601a      	str	r2, [r3, #0]
  return(result);
 80071ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    opA = __SXTB16(__ROR(inA1, 8));
 80071f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80071f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007202:	2208      	movs	r2, #8
 8007204:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007206:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800720a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	f002 021f 	and.w	r2, r2, #31
 8007214:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007216:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x400>
    return op1;
 8007220:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	e007      	b.n	8007238 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x410>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007228:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800722c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	fa62 f303 	ror.w	r3, r2, r3
 8007238:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800723a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800723c:	fa2f f383 	sxtb16	r3, r3
 8007240:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8007242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB1, 8));
 8007248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800724c:	65bb      	str	r3, [r7, #88]	; 0x58
 800724e:	2308      	movs	r3, #8
 8007250:	657b      	str	r3, [r7, #84]	; 0x54
  op2 %= 32U;
 8007252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	657b      	str	r3, [r7, #84]	; 0x54
  if (op2 == 0U)
 800725a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x43c>
    return op1;
 8007260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007262:	e003      	b.n	800726c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007268:	fa62 f303 	ror.w	r3, r2, r3
 800726c:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800726e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007270:	fa2f f383 	sxtb16	r3, r3
 8007274:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8007276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum2 = __SMLAD(opA, opB, sum2);
 800727c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007280:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007288:	6739      	str	r1, [r7, #112]	; 0x70
 800728a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800728c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800728e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007294:	fb23 1302 	smlad	r3, r3, r2, r1
 8007298:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800729a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    opA = __SXTB16(inA2);
 80072a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072a4:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80072a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a8:	fa2f f383 	sxtb16	r3, r3
 80072ac:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 80072ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB2);
 80072b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80072bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072c0:	fa2f f383 	sxtb16	r3, r3
 80072c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80072c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum3 = __SMLAD(opA, opB, sum3);
 80072cc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80072d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80072d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80072d8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80072dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80072e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80072ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80072f0:	fb23 1302 	smlad	r3, r3, r2, r1
 80072f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80072f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    opA = __SXTB16(__ROR(inA2, 8));
 8007300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007308:	2308      	movs	r3, #8
 800730a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  op2 %= 32U;
 800730e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007312:	f003 031f 	and.w	r3, r3, #31
 8007316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (op2 == 0U)
 800731a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x500>
    return op1;
 8007322:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007326:	e005      	b.n	8007334 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x50c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007328:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800732c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007330:	fa62 f303 	ror.w	r3, r2, r3
 8007334:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800733c:	fa2f f383 	sxtb16	r3, r3
 8007340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8007344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB2, 8));
 800734c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007354:	2308      	movs	r3, #8
 8007356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  op2 %= 32U;
 800735a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (op2 == 0U)
 8007366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x54c>
    return op1;
 800736e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007372:	e005      	b.n	8007380 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x558>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007374:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800737c:	fa62 f303 	ror.w	r3, r2, r3
 8007380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007384:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007388:	fa2f f383 	sxtb16	r3, r3
 800738c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8007390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum4 = __SMLAD(opA, opB, sum4);
 8007398:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800739c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80073a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073a4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80073a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80073b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80073b8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80073bc:	fb23 1302 	smlad	r3, r3, r2, r1
 80073c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 80073c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 80073cc:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 80073d6:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f47f ae62 	bne.w	80070a4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x27c>
                              [ch_im_in] "r"(ch_im_in):"r0", "r1", "r2", "r3", "r4", "r5");
#endif                          /*ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

                colCnt = (dim_kernel_x * dim_kernel_y) & 0x1;
 80073e0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80073e4:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 80073e8:	fb12 f303 	smulbb	r3, r2, r3
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 80073f6:	e066      	b.n	80074c6 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x69e>
 80073f8:	ffff0000 	.word	0xffff0000
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 80073fc:	f107 031c 	add.w	r3, r7, #28
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	f107 0318 	add.w	r3, r7, #24
 8007408:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 800740a:	f107 031c 	add.w	r3, r7, #28
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	1dbb      	adds	r3, r7, #6
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	441a      	add	r2, r3
 8007416:	f107 031c 	add.w	r3, r7, #28
 800741a:	601a      	str	r2, [r3, #0]
                    inB.word = *__SIMD32(pB);
 800741c:	f107 0320 	add.w	r3, r7, #32
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	f107 0314 	add.w	r3, r7, #20
 8007428:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 800742a:	f107 0320 	add.w	r3, r7, #32
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	1dbb      	adds	r3, r7, #6
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	441a      	add	r2, r3
 8007436:	f107 0320 	add.w	r3, r7, #32
 800743a:	601a      	str	r2, [r3, #0]
                    sum += inA.bytes[0] * inB.bytes[0];
 800743c:	f107 0318 	add.w	r3, r7, #24
 8007440:	f993 3000 	ldrsb.w	r3, [r3]
 8007444:	461a      	mov	r2, r3
 8007446:	f107 0314 	add.w	r3, r7, #20
 800744a:	f993 3000 	ldrsb.w	r3, [r3]
 800744e:	fb03 f302 	mul.w	r3, r3, r2
 8007452:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007456:	4413      	add	r3, r2
 8007458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum2 += inA.bytes[1] * inB.bytes[1];
 800745c:	f107 0318 	add.w	r3, r7, #24
 8007460:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007464:	461a      	mov	r2, r3
 8007466:	f107 0314 	add.w	r3, r7, #20
 800746a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800746e:	fb03 f302 	mul.w	r3, r3, r2
 8007472:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007476:	4413      	add	r3, r2
 8007478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    sum3 += inA.bytes[2] * inB.bytes[2];
 800747c:	f107 0318 	add.w	r3, r7, #24
 8007480:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007484:	461a      	mov	r2, r3
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800748e:	fb03 f302 	mul.w	r3, r3, r2
 8007492:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007496:	4413      	add	r3, r2
 8007498:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    sum4 += inA.bytes[3] * inB.bytes[3];
 800749c:	f107 0318 	add.w	r3, r7, #24
 80074a0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80074a4:	461a      	mov	r2, r3
 80074a6:	f107 0314 	add.w	r3, r7, #20
 80074aa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80074ae:	fb03 f302 	mul.w	r3, r3, r2
 80074b2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80074b6:	4413      	add	r3, r2
 80074b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 80074bc:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 80074c6:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d196      	bne.n	80073fc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d4>
                }

                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80074ce:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80074d2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80074d6:	fa42 f303 	asr.w	r3, r2, r3
 80074da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80074de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074e2:	f303 0307 	ssat	r3, #8, r3
 80074e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074ea:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80074ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80074f8:	b24a      	sxtb	r2, r1
 80074fa:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80074fc:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007500:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007504:	fa42 f303 	asr.w	r3, r2, r3
 8007508:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800750c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007510:	f303 0307 	ssat	r3, #8, r3
 8007514:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007518:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800751c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007526:	b24a      	sxtb	r2, r1
 8007528:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 800752a:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800752e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007532:	fa42 f303 	asr.w	r3, r2, r3
 8007536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800753a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800753e:	f303 0307 	ssat	r3, #8, r3
 8007542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007546:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800754a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007554:	b24a      	sxtb	r2, r1
 8007556:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8007558:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800755c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007560:	fa42 f303 	asr.w	r3, r2, r3
 8007564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756c:	f303 0307 	ssat	r3, #8, r3
 8007570:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007574:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007578:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007582:	b24a      	sxtb	r2, r1
 8007584:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 8007586:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800758a:	3b01      	subs	r3, #1
 800758c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007590:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f ad16 	bne.w	8006fc6 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x19e>
            }

            rowCnt = ch_im_out & 0x3;
 800759a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 80075a6:	e077      	b.n	8007698 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x870>
            {
                q7_t     *pB = colBuffer + row_shift;
 80075a8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80075ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80075b0:	4413      	add	r3, r2
 80075b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                const q7_t *pA = wt + row_shift;
 80075b6:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80075ba:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80075be:	4413      	add	r3, r2
 80075c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80075c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 80075ce:	f993 3000 	ldrsb.w	r3, [r3]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 80075d8:	409a      	lsls	r2, r3
 80075da:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80075de:	3b01      	subs	r3, #1
 80075e0:	2101      	movs	r1, #1
 80075e2:	fa01 f303 	lsl.w	r3, r1, r3
 80075e6:	4413      	add	r3, r2
 80075e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y);
 80075ec:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80075f0:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 80075f4:	fb12 f303 	smulbb	r3, r2, r3
 80075f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

                row_shift += 1;
 80075fc:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8007600:	3301      	adds	r3, #1
 8007602:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

                while (colCnt)
 8007606:	e027      	b.n	8007658 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x830>
                {
                    q7_t      A1 = *pA;
 8007608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
                    q7_t      B1 = *pB;
 8007612:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
                    pA += ch_im_in;
 800761c:	1dbb      	adds	r3, r7, #6
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007624:	4413      	add	r3, r2
 8007626:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                    pB += ch_im_in;
 800762a:	1dbb      	adds	r3, r7, #6
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007632:	4413      	add	r3, r2
 8007634:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                    sum += A1 * B1;
 8007638:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 800763c:	f997 20fe 	ldrsb.w	r2, [r7, #254]	; 0xfe
 8007640:	fb02 f303 	mul.w	r3, r2, r3
 8007644:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007648:	4413      	add	r3, r2
 800764a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

                    colCnt--;
 800764e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007652:	3b01      	subs	r3, #1
 8007654:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
                while (colCnt)
 8007658:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1d3      	bne.n	8007608 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x7e0>
                }
                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007660:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007664:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007668:	fa42 f303 	asr.w	r3, r2, r3
 800766c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007674:	f303 0307 	ssat	r3, #8, r3
 8007678:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800767c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8007680:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800768a:	b24a      	sxtb	r2, r1
 800768c:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 800768e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007692:	3b01      	subs	r3, #1
 8007694:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007698:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800769c:	2b00      	cmp	r3, #0
 800769e:	d183      	bne.n	80075a8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x780>
            }

            // clear counter and pointers
            pBuffer = colBuffer;
 80076a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80076a8:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3301      	adds	r3, #1
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 80076b6:	f9b7 2144 	ldrsh.w	r2, [r7, #324]	; 0x144
 80076ba:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 80076be:	429a      	cmp	r2, r3
 80076c0:	f6ff abea 	blt.w	8006e98 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x70>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80076c4:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3301      	adds	r3, #1
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 80076d2:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 80076d6:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 80076da:	429a      	cmp	r2, r3
 80076dc:	f6ff abd7 	blt.w	8006e8e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x66>

#endif                          /* ARM_MATH_DSP */


    /* Return to application */
    return ARM_MATH_SUCCESS;
 80076e0:	2300      	movs	r3, #0

}
 80076e2:	4618      	mov	r0, r3
 80076e4:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd90      	pop	{r4, r7, pc}

080076ec <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 80076ec:	b490      	push	{r4, r7}
 80076ee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	f107 040c 	add.w	r4, r7, #12
 80076f8:	6020      	str	r0, [r4, #0]
 80076fa:	f107 0008 	add.w	r0, r7, #8
 80076fe:	6001      	str	r1, [r0, #0]
 8007700:	4619      	mov	r1, r3
 8007702:	1dbb      	adds	r3, r7, #6
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	1d3b      	adds	r3, r7, #4
 8007708:	460a      	mov	r2, r1
 800770a:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 800770c:	1dbb      	adds	r3, r7, #6
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8007714:	4413      	add	r3, r2
 8007716:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 800771a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800771e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 8007722:	1dbb      	adds	r3, r7, #6
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 800772c:	e347      	b.n	8007dbe <arm_nn_mat_mult_kernel_q7_q15+0x6d2>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 800772e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007732:	f107 0208 	add.w	r2, r7, #8
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 800773a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	441a      	add	r2, r3
 8007748:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800774c:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 800774e:	1d3b      	adds	r3, r7, #4
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	f107 020c 	add.w	r2, r7, #12
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	4413      	add	r3, r2
 800775a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 800775e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007762:	f993 3000 	ldrsb.w	r3, [r3]
 8007766:	461a      	mov	r2, r3
 8007768:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800776c:	409a      	lsls	r2, r3
 800776e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007772:	3b01      	subs	r3, #1
 8007774:	2101      	movs	r1, #1
 8007776:	fa01 f303 	lsl.w	r3, r1, r3
 800777a:	4413      	add	r3, r2
 800777c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007780:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 800778a:	f993 3000 	ldrsb.w	r3, [r3]
 800778e:	461a      	mov	r2, r3
 8007790:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007794:	409a      	lsls	r2, r3
 8007796:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800779a:	3b01      	subs	r3, #1
 800779c:	2101      	movs	r1, #1
 800779e:	fa01 f303 	lsl.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80077a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80077ac:	f993 3000 	ldrsb.w	r3, [r3]
 80077b0:	461a      	mov	r2, r3
 80077b2:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80077b6:	409a      	lsls	r2, r3
 80077b8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80077bc:	3b01      	subs	r3, #1
 80077be:	2101      	movs	r1, #1
 80077c0:	fa01 f303 	lsl.w	r3, r1, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80077ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 80077d4:	f993 3000 	ldrsb.w	r3, [r3]
 80077d8:	461a      	mov	r2, r3
 80077da:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80077de:	409a      	lsls	r2, r3
 80077e0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80077e4:	3b01      	subs	r3, #1
 80077e6:	2101      	movs	r1, #1
 80077e8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ec:	4413      	add	r3, r2
 80077ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 80077f2:	1d3b      	adds	r3, r7, #4
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	089b      	lsrs	r3, r3, #2
 80077f8:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 80077fc:	e20c      	b.n	8007c18 <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 80077fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007802:	6813      	ldr	r3, [r2, #0]
 8007804:	1d19      	adds	r1, r3, #4
 8007806:	6011      	str	r1, [r2, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            q31_t     inB2 = *__SIMD32(pB2)++;
 800780e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	1d19      	adds	r1, r3, #4
 8007816:	6011      	str	r1, [r2, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800781e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007822:	f107 020c 	add.w	r2, r7, #12
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800782e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007838:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800783c:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 800783e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	1d19      	adds	r1, r3, #4
 8007846:	6011      	str	r1, [r2, #0]
 8007848:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007850:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007860:	2208      	movs	r2, #8
 8007862:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007864:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007868:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800786c:	6812      	ldr	r2, [r2, #0]
 800786e:	f002 021f 	and.w	r2, r2, #31
 8007872:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007874:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 800787e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	e007      	b.n	8007896 <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007886:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800788a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	fa62 f303 	ror.w	r3, r2, r3
 8007896:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800789a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800789c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	fa2f f283 	sxtb16	r2, r3
 80078a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80078aa:	601a      	str	r2, [r3, #0]
  return(result);
 80078ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80078b6:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80078b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80078c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80078c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	fa2f f283 	sxtb16	r2, r3
 80078ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80078d2:	601a      	str	r2, [r3, #0]
  return(result);
 80078d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80078de:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80078e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4bd2      	ldr	r3, [pc, #840]	; (8007c30 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	0c12      	lsrs	r2, r2, #16
 80078f2:	4313      	orrs	r3, r2
 80078f4:	461a      	mov	r2, r3
 80078f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 80078fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	b29a      	uxth	r2, r3
 8007906:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	041b      	lsls	r3, r3, #16
 800790e:	4313      	orrs	r3, r2
 8007910:	461a      	mov	r2, r3
 8007912:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	601a      	str	r2, [r3, #0]
        return source;
 800791a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800791e:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007920:	f107 030c 	add.w	r3, r7, #12
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800792a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007934:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800793e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007942:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007944:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007948:	6813      	ldr	r3, [r2, #0]
 800794a:	1d19      	adds	r1, r3, #4
 800794c:	6011      	str	r1, [r2, #0]
 800794e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007956:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007966:	2208      	movs	r2, #8
 8007968:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800796a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800796e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	f002 021f 	and.w	r2, r2, #31
 8007978:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800797a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 8007984:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	e007      	b.n	800799c <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 800798c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007990:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007994:	6812      	ldr	r2, [r2, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	fa62 f303 	ror.w	r3, r2, r3
 800799c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80079a0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80079a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	fa2f f283 	sxtb16	r2, r3
 80079ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80079b0:	601a      	str	r2, [r3, #0]
  return(result);
 80079b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80079bc:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80079be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80079c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80079ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	fa2f f283 	sxtb16	r2, r3
 80079d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80079d8:	601a      	str	r2, [r3, #0]
  return(result);
 80079da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80079e4:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80079e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4b90      	ldr	r3, [pc, #576]	; (8007c30 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	0c12      	lsrs	r2, r2, #16
 80079f8:	4313      	orrs	r3, r2
 80079fa:	461a      	mov	r2, r3
 80079fc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007a04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	4313      	orrs	r3, r2
 8007a16:	461a      	mov	r2, r3
 8007a18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	601a      	str	r2, [r3, #0]
        return source;
 8007a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a24:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 8007a26:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 8007a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4619      	mov	r1, r3
 8007a32:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007a36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007a3a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8007a3e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8007a42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007a4e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007a52:	fb23 1202 	smlad	r2, r3, r2, r1
 8007a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5a:	601a      	str	r2, [r3, #0]
  return(result);
 8007a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007a72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007a76:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8007a7a:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8007a7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a82:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a86:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007a8a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007a8e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007a92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8007a96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 8007a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007aaa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007aae:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8007ab2:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007ab6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007aba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007abe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007ac2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8007ac6:	fb23 1302 	smlad	r3, r3, r2, r1
 8007aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8007ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ad2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 8007ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007ae2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007ae6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8007aea:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8007aee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007af2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007af6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007afa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007afe:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8007b06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007b0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8007b0e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007b12:	6813      	ldr	r3, [r2, #0]
 8007b14:	1d19      	adds	r1, r3, #4
 8007b16:	6011      	str	r1, [r2, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inB2 = *__SIMD32(pB2)++;
 8007b1e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	1d19      	adds	r1, r3, #4
 8007b26:	6011      	str	r1, [r2, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

            sum = __SMLAD(inA12, inB1, sum);
 8007b2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007b3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007b3e:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8007b42:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8007b46:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007b4e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007b52:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8007b56:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b5a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8007b5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007b62:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 8007b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007b72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007b76:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8007b7a:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8007b7e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007b86:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8007b8a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8007b8e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 8007b96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007b9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 8007b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007baa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007bae:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8007bb2:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8007bb6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007bba:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007bbe:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8007bc2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007bc6:	fb23 1302 	smlad	r3, r3, r2, r1
 8007bca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8007bce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007bd2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 8007bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007be2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007be6:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8007bea:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8007bee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007bf2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007bf6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8007bfa:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8007bfe:	fb23 1302 	smlad	r3, r3, r2, r1
 8007c02:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8007c06:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007c0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8007c0e:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c12:	3b01      	subs	r3, #1
 8007c14:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007c18:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f47f adee 	bne.w	80077fe <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8007c22:	1d3b      	adds	r3, r7, #4
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007c2e:	e058      	b.n	8007ce2 <arm_nn_mat_mult_kernel_q7_q15+0x5f6>
 8007c30:	ffff0000 	.word	0xffff0000
        {
            q7_t      inA1 = *pA++;
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f107 020c 	add.w	r2, r7, #12
 8007c3e:	1c59      	adds	r1, r3, #1
 8007c40:	6011      	str	r1, [r2, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
            q15_t     inB1 = *pB++;
 8007c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	1c99      	adds	r1, r3, #2
 8007c50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007c54:	6011      	str	r1, [r2, #0]
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
            q7_t      inA2 = *pA2++;
 8007c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
            q15_t     inB2 = *pB2++;
 8007c6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	1c99      	adds	r1, r3, #2
 8007c74:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c78:	6011      	str	r1, [r2, #0]
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

            sum += inA1 * inB1;
 8007c80:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007c84:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007c88:	fb02 f303 	mul.w	r3, r2, r3
 8007c8c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007c90:	4413      	add	r3, r2
 8007c92:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8007c96:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007c9a:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 8007cac:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007cb0:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007cb4:	fb02 f303 	mul.w	r3, r2, r3
 8007cb8:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8007cc2:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007cc6:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 8007cd8:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007ce2:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1a4      	bne.n	8007c34 <arm_nn_mat_mult_kernel_q7_q15+0x548>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007cea:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007cee:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007cf2:	fa42 f303 	asr.w	r3, r2, r3
 8007cf6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007cfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007cfe:	f303 0307 	ssat	r3, #8, r3
 8007d02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007d06:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8007d0a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007d14:	b24a      	sxtb	r2, r1
 8007d16:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8007d18:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d1c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007d20:	fa42 f303 	asr.w	r3, r2, r3
 8007d24:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8007d28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007d2c:	f303 0307 	ssat	r3, #8, r3
 8007d30:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007d34:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8007d38:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007d42:	b24a      	sxtb	r2, r1
 8007d44:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8007d46:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d4a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007d4e:	fa42 f303 	asr.w	r3, r2, r3
 8007d52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007d56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007d5a:	f303 0307 	ssat	r3, #8, r3
 8007d5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007d62:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8007d66:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007d70:	b24a      	sxtb	r2, r1
 8007d72:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8007d74:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d78:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007d7c:	fa42 f303 	asr.w	r3, r2, r3
 8007d80:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007d84:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007d88:	f303 0307 	ssat	r3, #8, r3
 8007d8c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8007d90:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8007d94:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007d9e:	b24a      	sxtb	r2, r1
 8007da0:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8007da2:	1d3b      	adds	r3, r7, #4
 8007da4:	881a      	ldrh	r2, [r3, #0]
 8007da6:	f107 030c 	add.w	r3, r7, #12
 8007daa:	f107 010c 	add.w	r1, r7, #12
 8007dae:	6809      	ldr	r1, [r1, #0]
 8007db0:	440a      	add	r2, r1
 8007db2:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8007db4:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007db8:	3b01      	subs	r3, #1
 8007dba:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8007dbe:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f47f acb3 	bne.w	800772e <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8007dc8:	1dbb      	adds	r3, r7, #6
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 81eb 	beq.w	80081ac <arm_nn_mat_mult_kernel_q7_q15+0xac0>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8007dd6:	f107 0320 	add.w	r3, r7, #32
 8007dda:	f107 0208 	add.w	r2, r7, #8
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8007de2:	f107 0320 	add.w	r3, r7, #32
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	441a      	add	r2, r3
 8007df0:	f107 031c 	add.w	r3, r7, #28
 8007df4:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007e04:	409a      	lsls	r2, r3
 8007e06:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e12:	4413      	add	r3, r2
 8007e14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007e18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007e22:	f993 3000 	ldrsb.w	r3, [r3]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007e2c:	409a      	lsls	r2, r3
 8007e2e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007e32:	3b01      	subs	r3, #1
 8007e34:	2101      	movs	r1, #1
 8007e36:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8007e40:	1d3b      	adds	r3, r7, #4
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	089b      	lsrs	r3, r3, #2
 8007e46:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8007e4a:	e138      	b.n	80080be <arm_nn_mat_mult_kernel_q7_q15+0x9d2>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8007e4c:	f107 0220 	add.w	r2, r7, #32
 8007e50:	6813      	ldr	r3, [r2, #0]
 8007e52:	1d19      	adds	r1, r3, #4
 8007e54:	6011      	str	r1, [r2, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8007e5c:	f107 021c 	add.w	r2, r7, #28
 8007e60:	6813      	ldr	r3, [r2, #0]
 8007e62:	1d19      	adds	r1, r3, #4
 8007e64:	6011      	str	r1, [r2, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007e6c:	f107 0310 	add.w	r3, r7, #16
 8007e70:	f107 020c 	add.w	r2, r7, #12
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e7c:	f107 0218 	add.w	r2, r7, #24
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e86:	f107 0214 	add.w	r2, r7, #20
 8007e8a:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007e8c:	f107 0210 	add.w	r2, r7, #16
 8007e90:	6813      	ldr	r3, [r2, #0]
 8007e92:	1d19      	adds	r1, r3, #4
 8007e94:	6011      	str	r1, [r2, #0]
 8007e96:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007e9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007eae:	2208      	movs	r2, #8
 8007eb0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007eb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007eb6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	f002 021f 	and.w	r2, r2, #31
 8007ec0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007ec2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <arm_nn_mat_mult_kernel_q7_q15+0x7e8>
    return op1;
 8007ecc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	e007      	b.n	8007ee4 <arm_nn_mat_mult_kernel_q7_q15+0x7f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007ed4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007ed8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	fa62 f303 	ror.w	r3, r2, r3
 8007ee4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007ee8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007eea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	fa2f f283 	sxtb16	r2, r3
 8007ef4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ef8:	601a      	str	r2, [r3, #0]
  return(result);
 8007efa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f04:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007f06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007f10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007f12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	fa2f f283 	sxtb16	r2, r3
 8007f1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f20:	601a      	str	r2, [r3, #0]
  return(result);
 8007f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f2c:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007f2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	4ba5      	ldr	r3, [pc, #660]	; (80081cc <arm_nn_mat_mult_kernel_q7_q15+0xae0>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	0c12      	lsrs	r2, r2, #16
 8007f40:	4313      	orrs	r3, r2
 8007f42:	461a      	mov	r2, r3
 8007f44:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007f4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	601a      	str	r2, [r3, #0]
        return source;
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007f6e:	f107 030c 	add.w	r3, r7, #12
 8007f72:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8007f74:	f107 0318 	add.w	r3, r7, #24
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007f80:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007f84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f88:	6018      	str	r0, [r3, #0]
 8007f8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007f8e:	6019      	str	r1, [r3, #0]
 8007f90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007f96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007fa0:	6812      	ldr	r2, [r2, #0]
 8007fa2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8007fa6:	6809      	ldr	r1, [r1, #0]
 8007fa8:	fb23 1202 	smlad	r2, r3, r2, r1
 8007fac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007fb0:	601a      	str	r2, [r3, #0]
  return(result);
 8007fb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007fbc:	f107 0318 	add.w	r3, r7, #24
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8007fc8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007fcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007fd0:	6018      	str	r0, [r3, #0]
 8007fd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fd6:	6019      	str	r1, [r3, #0]
 8007fd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007fdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007fde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8007fee:	6809      	ldr	r1, [r1, #0]
 8007ff0:	fb23 1202 	smlad	r2, r3, r2, r1
 8007ff4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ff8:	601a      	str	r2, [r3, #0]
  return(result);
 8007ffa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8008004:	f107 0220 	add.w	r2, r7, #32
 8008008:	6813      	ldr	r3, [r2, #0]
 800800a:	1d19      	adds	r1, r3, #4
 800800c:	6011      	str	r1, [r2, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            inB2 = *__SIMD32(pB2)++;
 8008014:	f107 021c 	add.w	r2, r7, #28
 8008018:	6813      	ldr	r3, [r2, #0]
 800801a:	1d19      	adds	r1, r3, #4
 800801c:	6011      	str	r1, [r2, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            sum = __SMLAD(inA12, inB1, sum);
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8008030:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008034:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008038:	6018      	str	r0, [r3, #0]
 800803a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800803e:	6019      	str	r1, [r3, #0]
 8008040:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008044:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008050:	6812      	ldr	r2, [r2, #0]
 8008052:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8008056:	6809      	ldr	r1, [r1, #0]
 8008058:	fb23 1202 	smlad	r2, r3, r2, r1
 800805c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008060:	601a      	str	r2, [r3, #0]
  return(result);
 8008062:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 800806c:	f107 0314 	add.w	r3, r7, #20
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8008078:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800807c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008080:	6018      	str	r0, [r3, #0]
 8008082:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008086:	6019      	str	r1, [r3, #0]
 8008088:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800808c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800808e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800809e:	6809      	ldr	r1, [r1, #0]
 80080a0:	fb23 1202 	smlad	r2, r3, r2, r1
 80080a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80080a8:	601a      	str	r2, [r3, #0]
  return(result);
 80080aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 80080b4:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80080b8:	3b01      	subs	r3, #1
 80080ba:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 80080be:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f47f aec2 	bne.w	8007e4c <arm_nn_mat_mult_kernel_q7_q15+0x760>
        }
        colCnt = numCol_A & 0x3;
 80080c8:	1d3b      	adds	r3, r7, #4
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	f003 0303 	and.w	r3, r3, #3
 80080d0:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 80080d4:	e038      	b.n	8008148 <arm_nn_mat_mult_kernel_q7_q15+0xa5c>
        {
            q7_t      inA1 = *pA++;
 80080d6:	f107 030c 	add.w	r3, r7, #12
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f107 020c 	add.w	r2, r7, #12
 80080e0:	1c59      	adds	r1, r3, #1
 80080e2:	6011      	str	r1, [r2, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
            q15_t     inB1 = *pB++;
 80080ea:	f107 0320 	add.w	r3, r7, #32
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	1c99      	adds	r1, r3, #2
 80080f2:	f107 0220 	add.w	r2, r7, #32
 80080f6:	6011      	str	r1, [r2, #0]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
            q15_t     inB2 = *pB2++;
 80080fe:	f107 031c 	add.w	r3, r7, #28
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	1c99      	adds	r1, r3, #2
 8008106:	f107 021c 	add.w	r2, r7, #28
 800810a:	6011      	str	r1, [r2, #0]
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

            sum += inA1 * inB1;
 8008112:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 8008116:	f9b7 21c4 	ldrsh.w	r2, [r7, #452]	; 0x1c4
 800811a:	fb02 f303 	mul.w	r3, r2, r3
 800811e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008122:	4413      	add	r3, r2
 8008124:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 8008128:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 800812c:	f9b7 21c2 	ldrsh.w	r2, [r7, #450]	; 0x1c2
 8008130:	fb02 f303 	mul.w	r3, r2, r3
 8008134:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008138:	4413      	add	r3, r2
 800813a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 800813e:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008142:	3b01      	subs	r3, #1
 8008144:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8008148:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1c2      	bne.n	80080d6 <arm_nn_mat_mult_kernel_q7_q15+0x9ea>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8008150:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8008154:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008158:	fa42 f303 	asr.w	r3, r2, r3
 800815c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008160:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008164:	f303 0307 	ssat	r3, #8, r3
 8008168:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800816c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8008170:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800817a:	b24a      	sxtb	r2, r1
 800817c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800817e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8008182:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008186:	fa42 f303 	asr.w	r3, r2, r3
 800818a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800818e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008192:	f303 0307 	ssat	r3, #8, r3
 8008196:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800819a:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800819e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80081a8:	b24a      	sxtb	r2, r1
 80081aa:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 80081ac:	1dbb      	adds	r3, r7, #6
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80081b4:	4413      	add	r3, r2
 80081b6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 80081ba:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 80081be:	4618      	mov	r0, r3
 80081c0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bc90      	pop	{r4, r7}
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	ffff0000 	.word	0xffff0000

080081d0 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 80081d0:	b490      	push	{r4, r7}
 80081d2:	b0d2      	sub	sp, #328	; 0x148
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	f107 040c 	add.w	r4, r7, #12
 80081da:	6020      	str	r0, [r4, #0]
 80081dc:	f107 0008 	add.w	r0, r7, #8
 80081e0:	6001      	str	r1, [r0, #0]
 80081e2:	4619      	mov	r1, r3
 80081e4:	1dbb      	adds	r3, r7, #6
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	1d3b      	adds	r3, r7, #4
 80081ea:	460a      	mov	r2, r1
 80081ec:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 80081ee:	1dbb      	adds	r3, r7, #6
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80081f6:	4413      	add	r3, r2
 80081f8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008202:	e2df      	b.n	80087c4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8008204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008208:	f107 0208 	add.w	r2, r7, #8
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8008210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	1d3b      	adds	r3, r7, #4
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	441a      	add	r2, r3
 800821e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008222:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	f107 020c 	add.w	r2, r7, #12
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	4413      	add	r3, r2
 8008230:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8008234:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008238:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800823c:	4413      	add	r3, r2
 800823e:	f993 3000 	ldrsb.w	r3, [r3]
 8008242:	461a      	mov	r2, r3
 8008244:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008248:	409a      	lsls	r2, r3
 800824a:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800824e:	3b01      	subs	r3, #1
 8008250:	2101      	movs	r1, #1
 8008252:	fa01 f303 	lsl.w	r3, r1, r3
 8008256:	4413      	add	r3, r2
 8008258:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 800825c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008260:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008264:	4413      	add	r3, r2
 8008266:	f993 3000 	ldrsb.w	r3, [r3]
 800826a:	461a      	mov	r2, r3
 800826c:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008270:	409a      	lsls	r2, r3
 8008272:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008276:	3b01      	subs	r3, #1
 8008278:	2101      	movs	r1, #1
 800827a:	fa01 f303 	lsl.w	r3, r1, r3
 800827e:	4413      	add	r3, r2
 8008280:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8008284:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008288:	3301      	adds	r3, #1
 800828a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800828e:	4413      	add	r3, r2
 8008290:	f993 3000 	ldrsb.w	r3, [r3]
 8008294:	461a      	mov	r2, r3
 8008296:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 800829a:	409a      	lsls	r2, r3
 800829c:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80082a0:	3b01      	subs	r3, #1
 80082a2:	2101      	movs	r1, #1
 80082a4:	fa01 f303 	lsl.w	r3, r1, r3
 80082a8:	4413      	add	r3, r2
 80082aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80082ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80082b2:	3301      	adds	r3, #1
 80082b4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80082b8:	4413      	add	r3, r2
 80082ba:	f993 3000 	ldrsb.w	r3, [r3]
 80082be:	461a      	mov	r2, r3
 80082c0:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80082c4:	409a      	lsls	r2, r3
 80082c6:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80082ca:	3b01      	subs	r3, #1
 80082cc:	2101      	movs	r1, #1
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	4413      	add	r3, r2
 80082d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 80082d8:	1d3b      	adds	r3, r7, #4
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	089b      	lsrs	r3, r3, #2
 80082de:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 80082e2:	e19e      	b.n	8008622 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 80082e4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80082e8:	6813      	ldr	r3, [r2, #0]
 80082ea:	1d19      	adds	r1, r3, #4
 80082ec:	6011      	str	r1, [r2, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            q31_t     inB2 = *__SIMD32(pB2)++;
 80082f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80082f8:	6813      	ldr	r3, [r2, #0]
 80082fa:	1d19      	adds	r1, r3, #4
 80082fc:	6011      	str	r1, [r2, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	f107 020c 	add.w	r2, r7, #12
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008314:	653b      	str	r3, [r7, #80]	; 0x50
 8008316:	f107 0320 	add.w	r3, r7, #32
 800831a:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 800831c:	f107 0214 	add.w	r2, r7, #20
 8008320:	6813      	ldr	r3, [r2, #0]
 8008322:	1d19      	adds	r1, r3, #4
 8008324:	6011      	str	r1, [r2, #0]
 8008326:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 800832e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800833e:	2208      	movs	r2, #8
 8008340:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8008342:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008346:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	f002 021f 	and.w	r2, r2, #31
 8008350:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8008352:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 800835c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	e007      	b.n	8008374 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008364:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	fa62 f303 	ror.w	r3, r2, r3
 8008374:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008378:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800837a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	fa2f f283 	sxtb16	r2, r3
 8008384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008388:	601a      	str	r2, [r3, #0]
  return(result);
 800838a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	461a      	mov	r2, r3
 8008392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008394:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	fa2f f283 	sxtb16	r2, r3
 80083ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083b0:	601a      	str	r2, [r3, #0]
  return(result);
 80083b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083bc:	601a      	str	r2, [r3, #0]
        return source;
 80083be:	f107 0314 	add.w	r3, r7, #20
 80083c2:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 80083c4:	f107 030c 	add.w	r3, r7, #12
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	f107 0310 	add.w	r3, r7, #16
 80083ce:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f107 031c 	add.w	r3, r7, #28
 80083d8:	677b      	str	r3, [r7, #116]	; 0x74
 80083da:	f107 0318 	add.w	r3, r7, #24
 80083de:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 80083e0:	f107 0210 	add.w	r2, r7, #16
 80083e4:	6813      	ldr	r3, [r2, #0]
 80083e6:	1d19      	adds	r1, r3, #4
 80083e8:	6011      	str	r1, [r2, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 80083ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f2:	2308      	movs	r3, #8
 80083f4:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 80083f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 80083fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 8008404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008406:	e003      	b.n	8008410 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008408:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800840a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800840c:	fa62 f303 	ror.w	r3, r2, r3
 8008410:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008414:	fa2f f383 	sxtb16	r3, r3
 8008418:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800841a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800841c:	461a      	mov	r2, r3
 800841e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008420:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008424:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008428:	fa2f f383 	sxtb16	r3, r3
 800842c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800842e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008430:	461a      	mov	r2, r3
 8008432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008434:	601a      	str	r2, [r3, #0]
        return source;
 8008436:	f107 0310 	add.w	r3, r7, #16
 800843a:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 800843c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 8008440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4619      	mov	r1, r3
 8008448:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800844c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008450:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8008454:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008458:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800845a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800845e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008462:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008464:	fb23 1302 	smlad	r3, r3, r2, r1
 8008468:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 800846a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800846c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 8008470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4619      	mov	r1, r3
 8008478:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800847c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008480:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8008484:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800848c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008490:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008494:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008498:	fb23 1302 	smlad	r3, r3, r2, r1
 800849c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 80084a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 80084a8:	f107 031c 	add.w	r3, r7, #28
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4619      	mov	r1, r3
 80084b0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80084b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084b8:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80084bc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80084c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80084c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80084cc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80084d0:	fb23 1302 	smlad	r3, r3, r2, r1
 80084d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 80084d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 80084e0:	f107 031c 	add.w	r3, r7, #28
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4619      	mov	r1, r3
 80084e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80084ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f0:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80084f4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80084f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008500:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008504:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008508:	fb23 1302 	smlad	r3, r3, r2, r1
 800850c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8008510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 8008518:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800851c:	6813      	ldr	r3, [r2, #0]
 800851e:	1d19      	adds	r1, r3, #4
 8008520:	6011      	str	r1, [r2, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            inB2 = *__SIMD32(pB2)++;
 8008528:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800852c:	6813      	ldr	r3, [r2, #0]
 800852e:	1d19      	adds	r1, r3, #4
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            sum = __SMLAD(inA12, inB1, sum);
 8008538:	f107 0320 	add.w	r3, r7, #32
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008544:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008548:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800854c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8008550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800855c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8008560:	fb23 1302 	smlad	r3, r3, r2, r1
 8008564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8008568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800856c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 8008570:	f107 0320 	add.w	r3, r7, #32
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800857c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008580:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8008584:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800858c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008590:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008594:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008598:	fb23 1302 	smlad	r3, r3, r2, r1
 800859c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80085a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 80085a8:	f107 0318 	add.w	r3, r7, #24
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4619      	mov	r1, r3
 80085b0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80085b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085b8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80085bc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80085c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80085c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80085cc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80085d0:	fb23 1302 	smlad	r3, r3, r2, r1
 80085d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 80085d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 80085e0:	f107 0318 	add.w	r3, r7, #24
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4619      	mov	r1, r3
 80085e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80085ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f0:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80085f4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80085f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008604:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008608:	fb23 1302 	smlad	r3, r3, r2, r1
 800860c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8008610:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008614:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 8008618:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800861c:	3b01      	subs	r3, #1
 800861e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8008622:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008626:	2b00      	cmp	r3, #0
 8008628:	f47f ae5c 	bne.w	80082e4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 800862c:	1d3b      	adds	r3, r7, #4
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8008638:	e056      	b.n	80086e8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f107 020c 	add.w	r2, r7, #12
 8008644:	1c59      	adds	r1, r3, #1
 8008646:	6011      	str	r1, [r2, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            q15_t     inB1 = *pB++;
 800864e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	1c99      	adds	r1, r3, #2
 8008656:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800865a:	6011      	str	r1, [r2, #0]
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
            q7_t      inA2 = *pA2++;
 8008662:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            q15_t     inB2 = *pB2++;
 8008672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	1c99      	adds	r1, r3, #2
 800867a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800867e:	6011      	str	r1, [r2, #0]
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

            sum += inA1 * inB1;
 8008686:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800868a:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 800868e:	fb02 f303 	mul.w	r3, r2, r3
 8008692:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008696:	4413      	add	r3, r2
 8008698:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 800869c:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80086a0:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 80086a4:	fb02 f303 	mul.w	r3, r2, r3
 80086a8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80086ac:	4413      	add	r3, r2
 80086ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 80086b2:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 80086b6:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80086c2:	4413      	add	r3, r2
 80086c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 80086c8:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 80086cc:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 80086d0:	fb02 f303 	mul.w	r3, r2, r3
 80086d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80086d8:	4413      	add	r3, r2
 80086da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 80086de:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80086e2:	3b01      	subs	r3, #1
 80086e4:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 80086e8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1a4      	bne.n	800863a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80086f0:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80086f4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80086f8:	fa42 f303 	asr.w	r3, r2, r3
 80086fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008700:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008704:	f303 0307 	ssat	r3, #8, r3
 8008708:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800870c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008710:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800871a:	b24a      	sxtb	r2, r1
 800871c:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 800871e:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008722:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008726:	fa42 f303 	asr.w	r3, r2, r3
 800872a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800872e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008732:	f303 0307 	ssat	r3, #8, r3
 8008736:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800873a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800873e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8008748:	b24a      	sxtb	r2, r1
 800874a:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800874c:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008750:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008754:	fa42 f303 	asr.w	r3, r2, r3
 8008758:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008760:	f303 0307 	ssat	r3, #8, r3
 8008764:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008768:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800876c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008776:	b24a      	sxtb	r2, r1
 8008778:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 800877a:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800877e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008782:	fa42 f303 	asr.w	r3, r2, r3
 8008786:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800878a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800878e:	f303 0307 	ssat	r3, #8, r3
 8008792:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008796:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800879a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80087a4:	b24a      	sxtb	r2, r1
 80087a6:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80087a8:	1d3b      	adds	r3, r7, #4
 80087aa:	881a      	ldrh	r2, [r3, #0]
 80087ac:	f107 030c 	add.w	r3, r7, #12
 80087b0:	f107 010c 	add.w	r1, r7, #12
 80087b4:	6809      	ldr	r1, [r1, #0]
 80087b6:	440a      	add	r2, r1
 80087b8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 80087ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80087be:	3302      	adds	r3, #2
 80087c0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80087c4:	1dbb      	adds	r3, r7, #6
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80087cc:	429a      	cmp	r2, r3
 80087ce:	f6ff ad19 	blt.w	8008204 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 80087d2:	1dbb      	adds	r3, r7, #6
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80087da:	4413      	add	r3, r2
 80087dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 80087e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc90      	pop	{r4, r7}
 80087ee:	4770      	bx	lr

080087f0 <arm_fully_connected_q7>:
                       const q7_t * pM,
                       const uint16_t dim_vec,
                       const uint16_t num_of_rows,
                       const uint16_t bias_shift,
                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
{
 80087f0:	b590      	push	{r4, r7, lr}
 80087f2:	b0d7      	sub	sp, #348	; 0x15c
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	f107 040c 	add.w	r4, r7, #12
 80087fa:	6020      	str	r0, [r4, #0]
 80087fc:	f107 0008 	add.w	r0, r7, #8
 8008800:	6001      	str	r1, [r0, #0]
 8008802:	4619      	mov	r1, r3
 8008804:	1dbb      	adds	r3, r7, #6
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	1d3b      	adds	r3, r7, #4
 800880a:	460a      	mov	r2, r1
 800880c:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 800880e:	f107 0308 	add.w	r3, r7, #8
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    const q7_t *pB2;
    q7_t     *pO = pOut;
 8008818:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800881c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    const q7_t *pBias = bias;
 8008820:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008824:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
 8008828:	1d3b      	adds	r3, r7, #4
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 8008832:	1dbb      	adds	r3, r7, #6
 8008834:	881a      	ldrh	r2, [r3, #0]
 8008836:	f107 030c 	add.w	r3, r7, #12
 800883a:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	f000 fb82 	bl	8008f48 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 8008844:	e1e2      	b.n	8008c0c <arm_fully_connected_q7+0x41c>
    {
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8008846:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008850:	f993 3000 	ldrsb.w	r3, [r3]
 8008854:	461a      	mov	r2, r3
 8008856:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 800885a:	409a      	lsls	r2, r3
 800885c:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008860:	3b01      	subs	r3, #1
 8008862:	2101      	movs	r1, #1
 8008864:	fa01 f303 	lsl.w	r3, r1, r3
 8008868:	4413      	add	r3, r2
 800886a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800886e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008878:	f993 3000 	ldrsb.w	r3, [r3]
 800887c:	461a      	mov	r2, r3
 800887e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008882:	409a      	lsls	r2, r3
 8008884:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008888:	3b01      	subs	r3, #1
 800888a:	2101      	movs	r1, #1
 800888c:	fa01 f303 	lsl.w	r3, r1, r3
 8008890:	4413      	add	r3, r2
 8008892:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        uint16_t  colCnt = dim_vec >> 2;
 8008896:	1dbb      	adds	r3, r7, #6
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	089b      	lsrs	r3, r3, #2
 800889c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

        pA = vec_buffer;
 80088a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80088a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80088a8:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 80088aa:	1dbb      	adds	r3, r7, #6
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80088b2:	4413      	add	r3, r2
 80088b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        while (colCnt)
 80088b8:	e126      	b.n	8008b08 <arm_fully_connected_q7+0x318>
 80088ba:	f107 0320 	add.w	r3, r7, #32
 80088be:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        q31_t     inA = *__SIMD32(source)++;
 80088d4:	f107 0220 	add.w	r2, r7, #32
 80088d8:	6813      	ldr	r3, [r2, #0]
 80088da:	1d19      	adds	r1, r3, #4
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *out2 = __SXTB16(__ROR(inA, 8));
 80088e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088ec:	2308      	movs	r3, #8
 80088ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  op2 %= 32U;
 80088f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088f6:	f003 031f 	and.w	r3, r3, #31
 80088fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (op2 == 0U)
 80088fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <arm_fully_connected_q7+0x11c>
    return op1;
 8008906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800890a:	e005      	b.n	8008918 <arm_fully_connected_q7+0x128>
  return (op1 >> op2) | (op1 << (32U - op2));
 800890c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008914:	fa62 f303 	ror.w	r3, r2, r3
 8008918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800891c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008920:	fa2f f383 	sxtb16	r3, r3
 8008924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8008928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800892c:	461a      	mov	r2, r3
 800892e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008932:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800893c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008940:	fa2f f383 	sxtb16	r3, r3
 8008944:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8008946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008948:	461a      	mov	r2, r3
 800894a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800894e:	601a      	str	r2, [r3, #0]
        return source;
 8008950:	f107 0320 	add.w	r3, r7, #32
 8008954:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV, inM11, inM12, inM21, inM22;
            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8008956:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800895a:	f107 031c 	add.w	r3, r7, #28
 800895e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800896c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        q31_t     inA = *__SIMD32(source)++;
 8008974:	f107 021c 	add.w	r2, r7, #28
 8008978:	6813      	ldr	r3, [r2, #0]
 800897a:	1d19      	adds	r1, r3, #4
 800897c:	6011      	str	r1, [r2, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        *out2 = __SXTB16(__ROR(inA, 8));
 8008984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800898c:	2308      	movs	r3, #8
 800898e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  op2 %= 32U;
 8008992:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008996:	f003 031f 	and.w	r3, r3, #31
 800899a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (op2 == 0U)
 800899e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <arm_fully_connected_q7+0x1bc>
    return op1;
 80089a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089aa:	e005      	b.n	80089b8 <arm_fully_connected_q7+0x1c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 80089ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80089b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089b4:	fa62 f303 	ror.w	r3, r2, r3
 80089b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80089bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089c0:	fa2f f383 	sxtb16	r3, r3
 80089c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 80089c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089cc:	461a      	mov	r2, r3
 80089ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80089d2:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80089d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80089dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089e0:	fa2f f383 	sxtb16	r3, r3
 80089e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 80089e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089ec:	461a      	mov	r2, r3
 80089ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80089f2:	601a      	str	r2, [r3, #0]
        return source;
 80089f4:	f107 031c 	add.w	r3, r7, #28
 80089f8:	681b      	ldr	r3, [r3, #0]
            pB2 = (q7_t *) read_and_pad_reordered((void *)pB2, &inM21, &inM22);
 80089fa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

            inV = *__SIMD32(pA)++;
 80089fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	1d19      	adds	r1, r3, #4
 8008a06:	6011      	str	r1, [r2, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM11, sum);
 8008a0e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008a1e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008a22:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8008a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a2e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008a32:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008a36:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8008a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a42:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM21, sum2);
 8008a46:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4619      	mov	r1, r3
 8008a52:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008a56:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008a5a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8008a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a6a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008a6e:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8008a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a7a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            inV = *__SIMD32(pA)++;
 8008a7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	1d19      	adds	r1, r3, #4
 8008a86:	6011      	str	r1, [r2, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM12, sum);
 8008a8e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008a9e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008aa2:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008aaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008ab2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008ab6:	fb23 1302 	smlad	r3, r3, r2, r1
 8008aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8008abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM22, sum2);
 8008ac6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008ad6:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8008ada:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8008ade:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008ae2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ae6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008aea:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008aee:	fb23 1302 	smlad	r3, r3, r2, r1
 8008af2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            colCnt--;
 8008afe:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b02:	3b01      	subs	r3, #1
 8008b04:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008b08:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f47f aed4 	bne.w	80088ba <arm_fully_connected_q7+0xca>
        }
        colCnt = dim_vec & 0x3;
 8008b12:	1dbb      	adds	r3, r7, #6
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008b1e:	e037      	b.n	8008b90 <arm_fully_connected_q7+0x3a0>
        {
            q7_t      inV = *pA++;
 8008b20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	1c99      	adds	r1, r3, #2
 8008b28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008b2c:	6011      	str	r1, [r2, #0]
 8008b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b32:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            q15_t     inM = *pB++;
 8008b36:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008b40:	f993 3000 	ldrsb.w	r3, [r3]
 8008b44:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
            q15_t     inM2 = *pB2++;
 8008b48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008b52:	f993 3000 	ldrsb.w	r3, [r3]
 8008b56:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            sum += inV * inM;
 8008b5a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008b5e:	f9b7 210c 	ldrsh.w	r2, [r7, #268]	; 0x10c
 8008b62:	fb02 f303 	mul.w	r3, r2, r3
 8008b66:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 += inV * inM2;
 8008b70:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008b74:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008b80:	4413      	add	r3, r2
 8008b82:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            colCnt--;
 8008b86:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008b90:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1c3      	bne.n	8008b20 <arm_fully_connected_q7+0x330>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008b98:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008b9c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008ba0:	fa42 f303 	asr.w	r3, r2, r3
 8008ba4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008bac:	f303 0307 	ssat	r3, #8, r3
 8008bb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bb4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008bc2:	b24a      	sxtb	r2, r1
 8008bc4:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8008bc6:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008bca:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008bce:	fa42 f303 	asr.w	r3, r2, r3
 8008bd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bda:	f303 0307 	ssat	r3, #8, r3
 8008bde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008be2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008bf0:	b24a      	sxtb	r2, r1
 8008bf2:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8008bf4:	1dbb      	adds	r3, r7, #6
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        rowCnt--;
 8008c02:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008c06:	3b01      	subs	r3, #1
 8008c08:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008c0c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f47f ae18 	bne.w	8008846 <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    while (rowCnt)
 8008c22:	e114      	b.n	8008e4e <arm_fully_connected_q7+0x65e>
    {
        uint16_t  colCnt = dim_vec >> 2;
 8008c24:	1dbb      	adds	r3, r7, #6
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	089b      	lsrs	r3, r3, #2
 8008c2a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8008c2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008c38:	f993 3000 	ldrsb.w	r3, [r3]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008c42:	409a      	lsls	r2, r3
 8008c44:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c50:	4413      	add	r3, r2
 8008c52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        pA = vec_buffer;
 8008c56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c5a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008c5e:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8008c60:	e0a5      	b.n	8008dae <arm_fully_connected_q7+0x5be>
 8008c62:	f107 0310 	add.w	r3, r7, #16
 8008c66:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c70:	f107 0218 	add.w	r2, r7, #24
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c7a:	f107 0214 	add.w	r2, r7, #20
 8008c7e:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8008c80:	f107 0210 	add.w	r2, r7, #16
 8008c84:	6813      	ldr	r3, [r2, #0]
 8008c86:	1d19      	adds	r1, r3, #4
 8008c88:	6011      	str	r1, [r2, #0]
 8008c8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8008c92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ca2:	2208      	movs	r2, #8
 8008ca4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8008ca6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008caa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	f002 021f 	and.w	r2, r2, #31
 8008cb4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8008cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d103      	bne.n	8008cc8 <arm_fully_connected_q7+0x4d8>
    return op1;
 8008cc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	e007      	b.n	8008cd8 <arm_fully_connected_q7+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008cc8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008ccc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	fa62 f303 	ror.w	r3, r2, r3
 8008cd8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008cdc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008cde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	fa2f f283 	sxtb16	r2, r3
 8008ce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cec:	601a      	str	r2, [r3, #0]
  return(result);
 8008cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008d0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	fa2f f283 	sxtb16	r2, r3
 8008d14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d18:	601a      	str	r2, [r3, #0]
  return(result);
 8008d1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	601a      	str	r2, [r3, #0]
        return source;
 8008d2a:	f107 0310 	add.w	r3, r7, #16
 8008d2e:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8008d30:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

            inV1 = *__SIMD32(pA)++;
 8008d34:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008d38:	6813      	ldr	r3, [r2, #0]
 8008d3a:	1d19      	adds	r1, r3, #4
 8008d3c:	6011      	str	r1, [r2, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            sum = __SMLAD(inV1, inM11, sum);
 8008d44:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008d48:	f107 0318 	add.w	r3, r7, #24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d54:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d56:	6679      	str	r1, [r7, #100]	; 0x64
 8008d58:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d60:	fb23 1302 	smlad	r3, r3, r2, r1
 8008d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8008d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            inV2 = *__SIMD32(pA)++;
 8008d6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008d70:	6813      	ldr	r3, [r2, #0]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	6011      	str	r1, [r2, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            sum = __SMLAD(inV2, inM12, sum);
 8008d7c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008d80:	f107 0314 	add.w	r3, r7, #20
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4619      	mov	r1, r3
 8008d88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d8c:	67ba      	str	r2, [r7, #120]	; 0x78
 8008d8e:	6779      	str	r1, [r7, #116]	; 0x74
 8008d90:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008d96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008d98:	fb23 1302 	smlad	r3, r3, r2, r1
 8008d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8008d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            colCnt--;
 8008da4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008da8:	3b01      	subs	r3, #1
 8008daa:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008dae:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f47f af55 	bne.w	8008c62 <arm_fully_connected_q7+0x472>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8008db8:	1dbb      	adds	r3, r7, #6
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008dc4:	e023      	b.n	8008e0e <arm_fully_connected_q7+0x61e>
        {
            q7_t      inV = *pA++;
 8008dc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	1c99      	adds	r1, r3, #2
 8008dce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008dd2:	6011      	str	r1, [r2, #0]
 8008dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dd8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            q15_t     inM = *pB++;
 8008ddc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008de6:	f993 3000 	ldrsb.w	r3, [r3]
 8008dea:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
            sum += inV * inM;
 8008dee:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8008df2:	f9b7 2128 	ldrsh.w	r2, [r7, #296]	; 0x128
 8008df6:	fb02 f303 	mul.w	r3, r2, r3
 8008dfa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008dfe:	4413      	add	r3, r2
 8008e00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            colCnt--;
 8008e04:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008e0e:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1d7      	bne.n	8008dc6 <arm_fully_connected_q7+0x5d6>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008e16:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008e1a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008e1e:	fa42 f303 	asr.w	r3, r2, r3
 8008e22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008e26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e2a:	f303 0307 	ssat	r3, #8, r3
 8008e2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e32:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8008e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008e40:	b24a      	sxtb	r2, r1
 8008e42:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8008e44:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008e4e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f47f aee6 	bne.w	8008c24 <arm_fully_connected_q7+0x434>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8008e58:	2300      	movs	r3, #0

}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd90      	pop	{r4, r7, pc}

08008e64 <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b093      	sub	sp, #76	; 0x4c
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	089b      	lsrs	r3, r3, #2
 8008e78:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008e7a:	e044      	b.n	8008f06 <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008e7c:	f107 0214 	add.w	r2, r7, #20
 8008e80:	6813      	ldr	r3, [r2, #0]
 8008e82:	1d19      	adds	r1, r3, #4
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	2308      	movs	r3, #8
 8008e90:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <arm_q7_to_q15_no_shift+0x40>
    return op1;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	e003      	b.n	8008eac <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	fa62 f303 	ror.w	r3, r2, r3
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	fa2f f383 	sxtb16	r3, r3
 8008eb4:	623b      	str	r3, [r7, #32]
  return(result);
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	fa2f f383 	sxtb16	r3, r3
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8008eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ecc:	4b1d      	ldr	r3, [pc, #116]	; (8008f44 <arm_q7_to_q15_no_shift+0xe0>)
 8008ece:	4013      	ands	r3, r2
 8008ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ed2:	0c12      	lsrs	r2, r2, #16
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ede:	041b      	lsls	r3, r3, #16
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 8008ee4:	f107 0208 	add.w	r2, r7, #8
 8008ee8:	6813      	ldr	r3, [r2, #0]
 8008eea:	1d19      	adds	r1, r3, #4
 8008eec:	6011      	str	r1, [r2, #0]
 8008eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef0:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 8008ef2:	f107 0208 	add.w	r2, r7, #8
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	1d19      	adds	r1, r3, #4
 8008efa:	6011      	str	r1, [r2, #0]
 8008efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008efe:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f02:	3b01      	subs	r3, #1
 8008f04:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1b7      	bne.n	8008e7c <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008f14:	e00c      	b.n	8008f30 <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	617a      	str	r2, [r7, #20]
 8008f1c:	f993 1000 	ldrsb.w	r1, [r3]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	1c9a      	adds	r2, r3, #2
 8008f24:	60ba      	str	r2, [r7, #8]
 8008f26:	b20a      	sxth	r2, r1
 8008f28:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1ef      	bne.n	8008f16 <arm_q7_to_q15_no_shift+0xb2>
    }

}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	374c      	adds	r7, #76	; 0x4c
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	ffff0000 	.word	0xffff0000

08008f48 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b091      	sub	sp, #68	; 0x44
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	089b      	lsrs	r3, r3, #2
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008f5e:	e037      	b.n	8008fd0 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008f60:	f107 0214 	add.w	r2, r7, #20
 8008f64:	6813      	ldr	r3, [r2, #0]
 8008f66:	1d19      	adds	r1, r3, #4
 8008f68:	6011      	str	r1, [r2, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	2308      	movs	r3, #8
 8008f74:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	f003 031f 	and.w	r3, r3, #31
 8008f7c:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	e003      	b.n	8008f90 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	fa62 f303 	ror.w	r3, r2, r3
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	fa2f f383 	sxtb16	r3, r3
 8008f98:	623b      	str	r3, [r7, #32]
  return(result);
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa4:	fa2f f383 	sxtb16	r3, r3
 8008fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8008fae:	f107 0208 	add.w	r2, r7, #8
 8008fb2:	6813      	ldr	r3, [r2, #0]
 8008fb4:	1d19      	adds	r1, r3, #4
 8008fb6:	6011      	str	r1, [r2, #0]
 8008fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fba:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8008fbc:	f107 0208 	add.w	r2, r7, #8
 8008fc0:	6813      	ldr	r3, [r2, #0]
 8008fc2:	1d19      	adds	r1, r3, #4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc8:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8008fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1c4      	bne.n	8008f60 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008fde:	e00c      	b.n	8008ffa <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	617a      	str	r2, [r7, #20]
 8008fe6:	f993 1000 	ldrsb.w	r1, [r3]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	1c9a      	adds	r2, r3, #2
 8008fee:	60ba      	str	r2, [r7, #8]
 8008ff0:	b20a      	sxth	r2, r1
 8008ff2:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1ef      	bne.n	8008fe0 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	3744      	adds	r7, #68	; 0x44
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009012:	2003      	movs	r0, #3
 8009014:	f000 f8f9 	bl	800920a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009018:	200f      	movs	r0, #15
 800901a:	f7fa fdcf 	bl	8003bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800901e:	f7fa faab 	bl	8003578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <HAL_IncTick+0x20>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	4b06      	ldr	r3, [pc, #24]	; (800904c <HAL_IncTick+0x24>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4413      	add	r3, r2
 8009038:	4a04      	ldr	r2, [pc, #16]	; (800904c <HAL_IncTick+0x24>)
 800903a:	6013      	str	r3, [r2, #0]
}
 800903c:	bf00      	nop
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000010 	.word	0x20000010
 800904c:	20000460 	.word	0x20000460

08009050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
  return uwTick;
 8009054:	4b03      	ldr	r3, [pc, #12]	; (8009064 <HAL_GetTick+0x14>)
 8009056:	681b      	ldr	r3, [r3, #0]
}
 8009058:	4618      	mov	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	20000460 	.word	0x20000460

08009068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009070:	f7ff ffee 	bl	8009050 <HAL_GetTick>
 8009074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009080:	d005      	beq.n	800908e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <HAL_Delay+0x44>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800908e:	bf00      	nop
 8009090:	f7ff ffde 	bl	8009050 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	429a      	cmp	r2, r3
 800909e:	d8f7      	bhi.n	8009090 <HAL_Delay+0x28>
  {
  }
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20000010 	.word	0x20000010

080090b0 <__NVIC_SetPriorityGrouping>:
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <__NVIC_SetPriorityGrouping+0x40>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090cc:	4013      	ands	r3, r2
 80090ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80090d8:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <__NVIC_SetPriorityGrouping+0x44>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090de:	4a04      	ldr	r2, [pc, #16]	; (80090f0 <__NVIC_SetPriorityGrouping+0x40>)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	60d3      	str	r3, [r2, #12]
}
 80090e4:	bf00      	nop
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	e000ed00 	.word	0xe000ed00
 80090f4:	05fa0000 	.word	0x05fa0000

080090f8 <__NVIC_GetPriorityGrouping>:
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <__NVIC_GetPriorityGrouping+0x18>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	0a1b      	lsrs	r3, r3, #8
 8009102:	f003 0307 	and.w	r3, r3, #7
}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	e000ed00 	.word	0xe000ed00

08009114 <__NVIC_EnableIRQ>:
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800911e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009122:	2b00      	cmp	r3, #0
 8009124:	db0b      	blt.n	800913e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	f003 021f 	and.w	r2, r3, #31
 800912c:	4907      	ldr	r1, [pc, #28]	; (800914c <__NVIC_EnableIRQ+0x38>)
 800912e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009132:	095b      	lsrs	r3, r3, #5
 8009134:	2001      	movs	r0, #1
 8009136:	fa00 f202 	lsl.w	r2, r0, r2
 800913a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	e000e100 	.word	0xe000e100

08009150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800915c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009160:	2b00      	cmp	r3, #0
 8009162:	db0a      	blt.n	800917a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	b2da      	uxtb	r2, r3
 8009168:	490c      	ldr	r1, [pc, #48]	; (800919c <__NVIC_SetPriority+0x4c>)
 800916a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800916e:	0112      	lsls	r2, r2, #4
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	440b      	add	r3, r1
 8009174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009178:	e00a      	b.n	8009190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	b2da      	uxtb	r2, r3
 800917e:	4908      	ldr	r1, [pc, #32]	; (80091a0 <__NVIC_SetPriority+0x50>)
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	3b04      	subs	r3, #4
 8009188:	0112      	lsls	r2, r2, #4
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	440b      	add	r3, r1
 800918e:	761a      	strb	r2, [r3, #24]
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	e000e100 	.word	0xe000e100
 80091a0:	e000ed00 	.word	0xe000ed00

080091a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b089      	sub	sp, #36	; 0x24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	f1c3 0307 	rsb	r3, r3, #7
 80091be:	2b04      	cmp	r3, #4
 80091c0:	bf28      	it	cs
 80091c2:	2304      	movcs	r3, #4
 80091c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	3304      	adds	r3, #4
 80091ca:	2b06      	cmp	r3, #6
 80091cc:	d902      	bls.n	80091d4 <NVIC_EncodePriority+0x30>
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	3b03      	subs	r3, #3
 80091d2:	e000      	b.n	80091d6 <NVIC_EncodePriority+0x32>
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	fa02 f303 	lsl.w	r3, r2, r3
 80091e2:	43da      	mvns	r2, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	401a      	ands	r2, r3
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091ec:	f04f 31ff 	mov.w	r1, #4294967295
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	fa01 f303 	lsl.w	r3, r1, r3
 80091f6:	43d9      	mvns	r1, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091fc:	4313      	orrs	r3, r2
         );
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3724      	adds	r7, #36	; 0x24
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff ff4c 	bl	80090b0 <__NVIC_SetPriorityGrouping>
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009232:	f7ff ff61 	bl	80090f8 <__NVIC_GetPriorityGrouping>
 8009236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	6978      	ldr	r0, [r7, #20]
 800923e:	f7ff ffb1 	bl	80091a4 <NVIC_EncodePriority>
 8009242:	4602      	mov	r2, r0
 8009244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff ff80 	bl	8009150 <__NVIC_SetPriority>
}
 8009250:	bf00      	nop
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff ff54 	bl	8009114 <__NVIC_EnableIRQ>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e014      	b.n	80092b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	791b      	ldrb	r3, [r3, #4]
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7fa f992 	bl	80035c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	795b      	ldrb	r3, [r3, #5]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_DAC_Start_DMA+0x1e>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e0ab      	b.n	800942e <HAL_DAC_Start_DMA+0x176>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2202      	movs	r2, #2
 80092e0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d12f      	bne.n	8009348 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	4a52      	ldr	r2, [pc, #328]	; (8009438 <HAL_DAC_Start_DMA+0x180>)
 80092ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	4a51      	ldr	r2, [pc, #324]	; (800943c <HAL_DAC_Start_DMA+0x184>)
 80092f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	4a50      	ldr	r2, [pc, #320]	; (8009440 <HAL_DAC_Start_DMA+0x188>)
 80092fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800930e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	2b08      	cmp	r3, #8
 8009314:	d013      	beq.n	800933e <HAL_DAC_Start_DMA+0x86>
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	2b08      	cmp	r3, #8
 800931a:	d845      	bhi.n	80093a8 <HAL_DAC_Start_DMA+0xf0>
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <HAL_DAC_Start_DMA+0x72>
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	2b04      	cmp	r3, #4
 8009326:	d005      	beq.n	8009334 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009328:	e03e      	b.n	80093a8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	613b      	str	r3, [r7, #16]
        break;
 8009332:	e03c      	b.n	80093ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	330c      	adds	r3, #12
 800933a:	613b      	str	r3, [r7, #16]
        break;
 800933c:	e037      	b.n	80093ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3310      	adds	r3, #16
 8009344:	613b      	str	r3, [r7, #16]
        break;
 8009346:	e032      	b.n	80093ae <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4a3d      	ldr	r2, [pc, #244]	; (8009444 <HAL_DAC_Start_DMA+0x18c>)
 800934e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	4a3c      	ldr	r2, [pc, #240]	; (8009448 <HAL_DAC_Start_DMA+0x190>)
 8009356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4a3b      	ldr	r2, [pc, #236]	; (800944c <HAL_DAC_Start_DMA+0x194>)
 800935e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800936e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	2b08      	cmp	r3, #8
 8009374:	d013      	beq.n	800939e <HAL_DAC_Start_DMA+0xe6>
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	2b08      	cmp	r3, #8
 800937a:	d817      	bhi.n	80093ac <HAL_DAC_Start_DMA+0xf4>
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <HAL_DAC_Start_DMA+0xd2>
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	2b04      	cmp	r3, #4
 8009386:	d005      	beq.n	8009394 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009388:	e010      	b.n	80093ac <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3314      	adds	r3, #20
 8009390:	613b      	str	r3, [r7, #16]
        break;
 8009392:	e00c      	b.n	80093ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3318      	adds	r3, #24
 800939a:	613b      	str	r3, [r7, #16]
        break;
 800939c:	e007      	b.n	80093ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	331c      	adds	r3, #28
 80093a4:	613b      	str	r3, [r7, #16]
        break;
 80093a6:	e002      	b.n	80093ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80093a8:	bf00      	nop
 80093aa:	e000      	b.n	80093ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80093ac:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d111      	bne.n	80093d8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6898      	ldr	r0, [r3, #8]
 80093c8:	6879      	ldr	r1, [r7, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	f000 fdcf 	bl	8009f70 <HAL_DMA_Start_IT>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]
 80093d6:	e010      	b.n	80093fa <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80093e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	68d8      	ldr	r0, [r3, #12]
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	f000 fdbd 	bl	8009f70 <HAL_DMA_Start_IT>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10c      	bne.n	8009420 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	2201      	movs	r2, #1
 8009414:	409a      	lsls	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	e005      	b.n	800942c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f043 0204 	orr.w	r2, r3, #4
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800942c:	7dfb      	ldrb	r3, [r7, #23]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	08009593 	.word	0x08009593
 800943c:	080095b5 	.word	0x080095b5
 8009440:	080095d1 	.word	0x080095d1
 8009444:	0800963b 	.word	0x0800963b
 8009448:	0800965d 	.word	0x0800965d
 800944c:	08009679 	.word	0x08009679

08009450 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6819      	ldr	r1, [r3, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	f003 0310 	and.w	r3, r3, #16
 8009466:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800946a:	fa02 f303 	lsl.w	r3, r2, r3
 800946e:	43da      	mvns	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	400a      	ands	r2, r1
 8009476:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6819      	ldr	r1, [r3, #0]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	f003 0310 	and.w	r3, r3, #16
 8009484:	2201      	movs	r2, #1
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	43da      	mvns	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	400a      	ands	r2, r1
 8009492:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10d      	bne.n	80094b6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fdc6 	bl	800a030 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	e00c      	b.n	80094d0 <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fdb8 	bl	800a030 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80094ce:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	795b      	ldrb	r3, [r3, #5]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_DAC_ConfigChannel+0x18>
 8009508:	2302      	movs	r3, #2
 800950a:	e03c      	b.n	8009586 <HAL_DAC_ConfigChannel+0x92>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2202      	movs	r2, #2
 8009516:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f003 0310 	and.w	r3, r3, #16
 8009526:	f640 72fe 	movw	r2, #4094	; 0xffe
 800952a:	fa02 f303 	lsl.w	r3, r2, r3
 800952e:	43db      	mvns	r3, r3
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4013      	ands	r3, r2
 8009534:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6819      	ldr	r1, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f003 0310 	and.w	r3, r3, #16
 8009568:	22c0      	movs	r2, #192	; 0xc0
 800956a:	fa02 f303 	lsl.w	r3, r2, r3
 800956e:	43da      	mvns	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	400a      	ands	r2, r1
 8009576:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7f9 f8c9 	bl	8002738 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	711a      	strb	r2, [r3, #4]
}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7f9 f87e 	bl	80026c4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f043 0204 	orr.w	r2, r3, #4
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff ff78 	bl	80094e0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	711a      	strb	r2, [r3, #4]
}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff ffd8 	bl	80095fe <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	711a      	strb	r2, [r3, #4]
}
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff ffd1 	bl	8009612 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f043 0204 	orr.w	r2, r3, #4
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff ffc7 	bl	8009626 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2201      	movs	r2, #1
 800969c:	711a      	strb	r2, [r3, #4]
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e0ac      	b.n	8009814 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fab8 	bl	8009c34 <DFSDM_GetChannelFromInstance>
 80096c4:	4603      	mov	r3, r0
 80096c6:	4a55      	ldr	r2, [pc, #340]	; (800981c <HAL_DFSDM_ChannelInit+0x174>)
 80096c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e09f      	b.n	8009814 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7fa f899 	bl	800380c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80096da:	4b51      	ldr	r3, [pc, #324]	; (8009820 <HAL_DFSDM_ChannelInit+0x178>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3301      	adds	r3, #1
 80096e0:	4a4f      	ldr	r2, [pc, #316]	; (8009820 <HAL_DFSDM_ChannelInit+0x178>)
 80096e2:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80096e4:	4b4e      	ldr	r3, [pc, #312]	; (8009820 <HAL_DFSDM_ChannelInit+0x178>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d125      	bne.n	8009738 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80096ec:	4b4d      	ldr	r3, [pc, #308]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a4c      	ldr	r2, [pc, #304]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 80096f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096f6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80096f8:	4b4a      	ldr	r3, [pc, #296]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	4948      	ldr	r1, [pc, #288]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 8009702:	4313      	orrs	r3, r2
 8009704:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009706:	4b47      	ldr	r3, [pc, #284]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a46      	ldr	r2, [pc, #280]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 800970c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8009710:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	791b      	ldrb	r3, [r3, #4]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d108      	bne.n	800972c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 800971a:	4b42      	ldr	r3, [pc, #264]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	3b01      	subs	r3, #1
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	493f      	ldr	r1, [pc, #252]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 8009728:	4313      	orrs	r3, r2
 800972a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800972c:	4b3d      	ldr	r3, [pc, #244]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a3c      	ldr	r2, [pc, #240]	; (8009824 <HAL_DFSDM_ChannelInit+0x17c>)
 8009732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009736:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8009746:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6819      	ldr	r1, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8009756:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800975c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 020f 	bic.w	r2, r2, #15
 8009774:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6819      	ldr	r1, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8009784:	431a      	orrs	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800979c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6899      	ldr	r1, [r3, #8]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	3b01      	subs	r3, #1
 80097ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f002 0207 	and.w	r2, r2, #7
 80097c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6859      	ldr	r1, [r3, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80097dc:	431a      	orrs	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097f4:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fa16 	bl	8009c34 <DFSDM_GetChannelFromInstance>
 8009808:	4602      	mov	r2, r0
 800980a:	4904      	ldr	r1, [pc, #16]	; (800981c <HAL_DFSDM_ChannelInit+0x174>)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  
  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	2000039c 	.word	0x2000039c
 8009820:	20000398 	.word	0x20000398
 8009824:	40017400 	.word	0x40017400

08009828 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e0c6      	b.n	80099c8 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a64      	ldr	r2, [pc, #400]	; (80099d0 <HAL_DFSDM_FilterInit+0x1a8>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d109      	bne.n	8009858 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8009848:	2b01      	cmp	r3, #1
 800984a:	d003      	beq.n	8009854 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8009850:	2b01      	cmp	r3, #1
 8009852:	d101      	bne.n	8009858 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e0b7      	b.n	80099c8 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7f9 ff19 	bl	80036a8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009884:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	7a1b      	ldrb	r3, [r3, #8]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d108      	bne.n	80098a0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	e007      	b.n	80098b0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80098ae:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7a5b      	ldrb	r3, [r3, #9]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d108      	bne.n	80098ca <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	e007      	b.n	80098da <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80098d8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	4b3b      	ldr	r3, [pc, #236]	; (80099d4 <HAL_DFSDM_FilterInit+0x1ac>)
 80098e6:	400b      	ands	r3, r1
 80098e8:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d108      	bne.n	8009904 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6819      	ldr	r1, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	695a      	ldr	r2, [r3, #20]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7c1b      	ldrb	r3, [r3, #16]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d108      	bne.n	800991e <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0210 	orr.w	r2, r2, #16
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e007      	b.n	800992e <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0210 	bic.w	r2, r2, #16
 800992c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7c5b      	ldrb	r3, [r3, #17]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d108      	bne.n	8009948 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f042 0220 	orr.w	r2, r2, #32
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e007      	b.n	8009958 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0220 	bic.w	r2, r2, #32
 8009956:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6959      	ldr	r1, [r3, #20]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b1d      	ldr	r3, [pc, #116]	; (80099d8 <HAL_DFSDM_FilterInit+0x1b0>)
 8009964:	400b      	ands	r3, r1
 8009966:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6959      	ldr	r1, [r3, #20]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	3b01      	subs	r3, #1
 8009978:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800997a:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8009982:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	699a      	ldr	r2, [r3, #24]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	7c1a      	ldrb	r2, [r3, #16]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f042 0201 	orr.w	r2, r2, #1
 80099bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	40017500 	.word	0x40017500
 80099d4:	ffff80f7 	.word	0xffff80f7
 80099d8:	1c00ff00 	.word	0x1c00ff00

080099dc <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02c      	beq.n	8009a50 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 80099fc:	2bff      	cmp	r3, #255	; 0xff
 80099fe:	d027      	beq.n	8009a50 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6819      	ldr	r1, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	4b16      	ldr	r3, [pc, #88]	; (8009a64 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8009a0c:	400b      	ands	r3, r1
 8009a0e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d10d      	bne.n	8009a32 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009a24:	431a      	orrs	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e00a      	b.n	8009a48 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	021b      	lsls	r3, r3, #8
 8009a3c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8009a4e:	e001      	b.n	8009a54 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }  
  else
  {
    status = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	f8fbffff 	.word	0xf8fbffff

08009a68 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	75fb      	strb	r3, [r7, #23]
 8009a88:	e066      	b.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a98:	d002      	beq.n	8009aa0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	75fb      	strb	r3, [r7, #23]
 8009a9e:	e05b      	b.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10e      	bne.n	8009ac6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab4:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d002      	beq.n	8009ac6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]
 8009ac4:	e048      	b.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10c      	bne.n	8009ae8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d108      	bne.n	8009ae8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae0:	d102      	bne.n	8009ae8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	75fb      	strb	r3, [r7, #23]
 8009ae6:	e037      	b.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d004      	beq.n	8009afc <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	d12b      	bne.n	8009b54 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b00:	4a18      	ldr	r2, [pc, #96]	; (8009b64 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8009b02:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b08:	4a17      	ldr	r2, [pc, #92]	; (8009b68 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8009b0a:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b10:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8009b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b16:	d101      	bne.n	8009b1c <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8009b18:	4a14      	ldr	r2, [pc, #80]	; (8009b6c <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8009b1a:	e000      	b.n	8009b1e <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8009b1c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	331c      	adds	r3, #28
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f000 fa1c 	bl	8009f70 <HAL_DMA_Start_IT>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d006      	beq.n	8009b4c <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	22ff      	movs	r2, #255	; 0xff
 8009b42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009b4a:	e005      	b.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f8bd 	bl	8009ccc <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009b52:	e001      	b.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08009bf5 	.word	0x08009bf5
 8009b68:	08009c11 	.word	0x08009c11
 8009b6c:	08009bd9 	.word	0x08009bd9

08009b70 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d007      	beq.n	8009b96 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d002      	beq.n	8009b96 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	73fb      	strb	r3, [r7, #15]
 8009b94:	e011      	b.n	8009bba <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 fa48 	bl	800a030 <HAL_DMA_Abort>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d006      	beq.n	8009bb4 <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	22ff      	movs	r2, #255	; 0xff
 8009baa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	73fb      	strb	r3, [r7, #15]
 8009bb2:	e002      	b.n	8009bba <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f8df 	bl	8009d78 <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f7f8 fde2 	bl	80027b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7f8 fe04 	bl	8002810 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8009c08:	bf00      	nop
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2203      	movs	r2, #3
 8009c22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7ff ffcd 	bl	8009bc4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8009c2a:	bf00      	nop
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a1c      	ldr	r2, [pc, #112]	; (8009cb0 <DFSDM_GetChannelFromInstance+0x7c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d102      	bne.n	8009c4a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	e02b      	b.n	8009ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a19      	ldr	r2, [pc, #100]	; (8009cb4 <DFSDM_GetChannelFromInstance+0x80>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d102      	bne.n	8009c58 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	60fb      	str	r3, [r7, #12]
 8009c56:	e024      	b.n	8009ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a17      	ldr	r2, [pc, #92]	; (8009cb8 <DFSDM_GetChannelFromInstance+0x84>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d102      	bne.n	8009c66 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8009c60:	2302      	movs	r3, #2
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e01d      	b.n	8009ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a14      	ldr	r2, [pc, #80]	; (8009cbc <DFSDM_GetChannelFromInstance+0x88>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d102      	bne.n	8009c74 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e016      	b.n	8009ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a12      	ldr	r2, [pc, #72]	; (8009cc0 <DFSDM_GetChannelFromInstance+0x8c>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d102      	bne.n	8009c82 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e00f      	b.n	8009ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a0f      	ldr	r2, [pc, #60]	; (8009cc4 <DFSDM_GetChannelFromInstance+0x90>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d102      	bne.n	8009c90 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8009c8a:	2305      	movs	r3, #5
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	e008      	b.n	8009ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a0d      	ldr	r2, [pc, #52]	; (8009cc8 <DFSDM_GetChannelFromInstance+0x94>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d102      	bne.n	8009c9e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8009c98:	2306      	movs	r3, #6
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e001      	b.n	8009ca2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8009c9e:	2307      	movs	r3, #7
 8009ca0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	40017400 	.word	0x40017400
 8009cb4:	40017420 	.word	0x40017420
 8009cb8:	40017440 	.word	0x40017440
 8009cbc:	40017460 	.word	0x40017460
 8009cc0:	40017480 	.word	0x40017480
 8009cc4:	400174a0 	.word	0x400174a0
 8009cc8:	400174c0 	.word	0x400174c0

08009ccc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d108      	bne.n	8009cee <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	e033      	b.n	8009d56 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0201 	bic.w	r2, r2, #1
 8009cfc:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009d0c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f042 0201 	orr.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d116      	bne.n	8009d56 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d107      	bne.n	8009d40 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0202 	orr.w	r2, r2, #2
 8009d3e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d102      	bne.n	8009d50 <DFSDM_RegConvStart+0x84>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4e:	e000      	b.n	8009d52 <DFSDM_RegConvStart+0x86>
 8009d50:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <DFSDM_RegConvStart+0x98>
 8009d60:	2202      	movs	r2, #2
 8009d62:	e000      	b.n	8009d66 <DFSDM_RegConvStart+0x9a>
 8009d64:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0201 	bic.w	r2, r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d107      	bne.n	8009da8 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009da6:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d116      	bne.n	8009df0 <DFSDM_RegConvStop+0x78>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d107      	bne.n	8009dda <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0202 	orr.w	r2, r2, #2
 8009dd8:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d102      	bne.n	8009dea <DFSDM_RegConvStop+0x72>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de8:	e000      	b.n	8009dec <DFSDM_RegConvStop+0x74>
 8009dea:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6493      	str	r3, [r2, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d101      	bne.n	8009dfe <DFSDM_RegConvStop+0x86>
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	e000      	b.n	8009e00 <DFSDM_RegConvStop+0x88>
 8009dfe:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
	...

08009e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e20:	f7ff f916 	bl	8009050 <HAL_GetTick>
 8009e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e099      	b.n	8009f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0201 	bic.w	r2, r2, #1
 8009e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e50:	e00f      	b.n	8009e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e52:	f7ff f8fd 	bl	8009050 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b05      	cmp	r3, #5
 8009e5e:	d908      	bls.n	8009e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2220      	movs	r2, #32
 8009e64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2203      	movs	r2, #3
 8009e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e078      	b.n	8009f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e8      	bne.n	8009e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4b38      	ldr	r3, [pc, #224]	; (8009f6c <HAL_DMA_Init+0x158>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d107      	bne.n	8009edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f023 0307 	bic.w	r3, r3, #7
 8009ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d117      	bne.n	8009f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00e      	beq.n	8009f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fae7 	bl	800a4ec <DMA_CheckFifoParam>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d008      	beq.n	8009f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2240      	movs	r2, #64	; 0x40
 8009f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009f32:	2301      	movs	r3, #1
 8009f34:	e016      	b.n	8009f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa9e 	bl	800a480 <DMA_CalcBaseAndBitshift>
 8009f44:	4603      	mov	r3, r0
 8009f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f4c:	223f      	movs	r2, #63	; 0x3f
 8009f4e:	409a      	lsls	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	e010803f 	.word	0xe010803f

08009f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <HAL_DMA_Start_IT+0x26>
 8009f92:	2302      	movs	r3, #2
 8009f94:	e048      	b.n	800a028 <HAL_DMA_Start_IT+0xb8>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d137      	bne.n	800a01a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2202      	movs	r2, #2
 8009fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fa30 	bl	800a424 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fc8:	223f      	movs	r2, #63	; 0x3f
 8009fca:	409a      	lsls	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 0216 	orr.w	r2, r2, #22
 8009fde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695a      	ldr	r2, [r3, #20]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d007      	beq.n	800a008 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0208 	orr.w	r2, r2, #8
 800a006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	e005      	b.n	800a026 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a022:	2302      	movs	r3, #2
 800a024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a026:	7dfb      	ldrb	r3, [r7, #23]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a03c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a03e:	f7ff f807 	bl	8009050 <HAL_GetTick>
 800a042:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d008      	beq.n	800a062 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e052      	b.n	800a108 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681a      	ldr	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0216 	bic.w	r2, r2, #22
 800a070:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	695a      	ldr	r2, [r3, #20]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a080:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d103      	bne.n	800a092 <HAL_DMA_Abort+0x62>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0208 	bic.w	r2, r2, #8
 800a0a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0201 	bic.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0b2:	e013      	b.n	800a0dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a0b4:	f7fe ffcc 	bl	8009050 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b05      	cmp	r3, #5
 800a0c0:	d90c      	bls.n	800a0dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2203      	movs	r2, #3
 800a0cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e015      	b.n	800a108 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1e4      	bne.n	800a0b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ee:	223f      	movs	r2, #63	; 0x3f
 800a0f0:	409a      	lsls	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a11c:	4b92      	ldr	r3, [pc, #584]	; (800a368 <HAL_DMA_IRQHandler+0x258>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a92      	ldr	r2, [pc, #584]	; (800a36c <HAL_DMA_IRQHandler+0x25c>)
 800a122:	fba2 2303 	umull	r2, r3, r2, r3
 800a126:	0a9b      	lsrs	r3, r3, #10
 800a128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a13a:	2208      	movs	r2, #8
 800a13c:	409a      	lsls	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d01a      	beq.n	800a17c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b00      	cmp	r3, #0
 800a152:	d013      	beq.n	800a17c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0204 	bic.w	r2, r2, #4
 800a162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a168:	2208      	movs	r2, #8
 800a16a:	409a      	lsls	r2, r3
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a174:	f043 0201 	orr.w	r2, r3, #1
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a180:	2201      	movs	r2, #1
 800a182:	409a      	lsls	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4013      	ands	r3, r2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d012      	beq.n	800a1b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00b      	beq.n	800a1b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19e:	2201      	movs	r2, #1
 800a1a0:	409a      	lsls	r2, r3
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1aa:	f043 0202 	orr.w	r2, r3, #2
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	409a      	lsls	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d012      	beq.n	800a1e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00b      	beq.n	800a1e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d4:	2204      	movs	r2, #4
 800a1d6:	409a      	lsls	r2, r3
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e0:	f043 0204 	orr.w	r2, r3, #4
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ec:	2210      	movs	r2, #16
 800a1ee:	409a      	lsls	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d043      	beq.n	800a280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0308 	and.w	r3, r3, #8
 800a202:	2b00      	cmp	r3, #0
 800a204:	d03c      	beq.n	800a280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a20a:	2210      	movs	r2, #16
 800a20c:	409a      	lsls	r2, r3
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d018      	beq.n	800a252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d108      	bne.n	800a240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a232:	2b00      	cmp	r3, #0
 800a234:	d024      	beq.n	800a280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	4798      	blx	r3
 800a23e:	e01f      	b.n	800a280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01b      	beq.n	800a280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	4798      	blx	r3
 800a250:	e016      	b.n	800a280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d107      	bne.n	800a270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0208 	bic.w	r2, r2, #8
 800a26e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a284:	2220      	movs	r2, #32
 800a286:	409a      	lsls	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 808e 	beq.w	800a3ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0310 	and.w	r3, r3, #16
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8086 	beq.w	800a3ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b05      	cmp	r3, #5
 800a2b8:	d136      	bne.n	800a328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 0216 	bic.w	r2, r2, #22
 800a2c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695a      	ldr	r2, [r3, #20]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <HAL_DMA_IRQHandler+0x1da>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 0208 	bic.w	r2, r2, #8
 800a2f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fe:	223f      	movs	r2, #63	; 0x3f
 800a300:	409a      	lsls	r2, r3
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d07d      	beq.n	800a41a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	4798      	blx	r3
        }
        return;
 800a326:	e078      	b.n	800a41a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d01c      	beq.n	800a370 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d108      	bne.n	800a356 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d030      	beq.n	800a3ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	4798      	blx	r3
 800a354:	e02b      	b.n	800a3ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d027      	beq.n	800a3ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4798      	blx	r3
 800a366:	e022      	b.n	800a3ae <HAL_DMA_IRQHandler+0x29e>
 800a368:	20000008 	.word	0x20000008
 800a36c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10f      	bne.n	800a39e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 0210 	bic.w	r2, r2, #16
 800a38c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d032      	beq.n	800a41c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d022      	beq.n	800a408 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2205      	movs	r2, #5
 800a3c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f022 0201 	bic.w	r2, r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	60bb      	str	r3, [r7, #8]
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d307      	bcc.n	800a3f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f2      	bne.n	800a3da <HAL_DMA_IRQHandler+0x2ca>
 800a3f4:	e000      	b.n	800a3f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a3f6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d005      	beq.n	800a41c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	4798      	blx	r3
 800a418:	e000      	b.n	800a41c <HAL_DMA_IRQHandler+0x30c>
        return;
 800a41a:	bf00      	nop
    }
  }
}
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop

0800a424 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a440:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	2b40      	cmp	r3, #64	; 0x40
 800a450:	d108      	bne.n	800a464 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a462:	e007      	b.n	800a474 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	60da      	str	r2, [r3, #12]
}
 800a474:	bf00      	nop
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	3b10      	subs	r3, #16
 800a490:	4a13      	ldr	r2, [pc, #76]	; (800a4e0 <DMA_CalcBaseAndBitshift+0x60>)
 800a492:	fba2 2303 	umull	r2, r3, r2, r3
 800a496:	091b      	lsrs	r3, r3, #4
 800a498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a49a:	4a12      	ldr	r2, [pc, #72]	; (800a4e4 <DMA_CalcBaseAndBitshift+0x64>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4413      	add	r3, r2
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d908      	bls.n	800a4c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <DMA_CalcBaseAndBitshift+0x68>)
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	1d1a      	adds	r2, r3, #4
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	659a      	str	r2, [r3, #88]	; 0x58
 800a4be:	e006      	b.n	800a4ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <DMA_CalcBaseAndBitshift+0x68>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	aaaaaaab 	.word	0xaaaaaaab
 800a4e4:	080289d0 	.word	0x080289d0
 800a4e8:	fffffc00 	.word	0xfffffc00

0800a4ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d11f      	bne.n	800a546 <DMA_CheckFifoParam+0x5a>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d856      	bhi.n	800a5ba <DMA_CheckFifoParam+0xce>
 800a50c:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <DMA_CheckFifoParam+0x28>)
 800a50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a512:	bf00      	nop
 800a514:	0800a525 	.word	0x0800a525
 800a518:	0800a537 	.word	0x0800a537
 800a51c:	0800a525 	.word	0x0800a525
 800a520:	0800a5bb 	.word	0x0800a5bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d046      	beq.n	800a5be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a534:	e043      	b.n	800a5be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a53e:	d140      	bne.n	800a5c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a544:	e03d      	b.n	800a5c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a54e:	d121      	bne.n	800a594 <DMA_CheckFifoParam+0xa8>
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b03      	cmp	r3, #3
 800a554:	d837      	bhi.n	800a5c6 <DMA_CheckFifoParam+0xda>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <DMA_CheckFifoParam+0x70>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a56d 	.word	0x0800a56d
 800a560:	0800a573 	.word	0x0800a573
 800a564:	0800a56d 	.word	0x0800a56d
 800a568:	0800a585 	.word	0x0800a585
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	73fb      	strb	r3, [r7, #15]
      break;
 800a570:	e030      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d025      	beq.n	800a5ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a582:	e022      	b.n	800a5ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a58c:	d11f      	bne.n	800a5ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a592:	e01c      	b.n	800a5ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d903      	bls.n	800a5a2 <DMA_CheckFifoParam+0xb6>
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d003      	beq.n	800a5a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a5a0:	e018      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a6:	e015      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00e      	beq.n	800a5d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b8:	e00b      	b.n	800a5d2 <DMA_CheckFifoParam+0xe6>
      break;
 800a5ba:	bf00      	nop
 800a5bc:	e00a      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5be:	bf00      	nop
 800a5c0:	e008      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5c2:	bf00      	nop
 800a5c4:	e006      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5c6:	bf00      	nop
 800a5c8:	e004      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5ca:	bf00      	nop
 800a5cc:	e002      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      break;   
 800a5ce:	bf00      	nop
 800a5d0:	e000      	b.n	800a5d4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5d2:	bf00      	nop
    }
  } 
  
  return status; 
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop

0800a5e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b089      	sub	sp, #36	; 0x24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a5fe:	2300      	movs	r3, #0
 800a600:	61fb      	str	r3, [r7, #28]
 800a602:	e175      	b.n	800a8f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a604:	2201      	movs	r2, #1
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	fa02 f303 	lsl.w	r3, r2, r3
 800a60c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4013      	ands	r3, r2
 800a616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	f040 8164 	bne.w	800a8ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f003 0303 	and.w	r3, r3, #3
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d005      	beq.n	800a63a <HAL_GPIO_Init+0x56>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	2b02      	cmp	r3, #2
 800a638:	d130      	bne.n	800a69c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	2203      	movs	r2, #3
 800a646:	fa02 f303 	lsl.w	r3, r2, r3
 800a64a:	43db      	mvns	r3, r3
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	4013      	ands	r3, r2
 800a650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	fa02 f303 	lsl.w	r3, r2, r3
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	4313      	orrs	r3, r2
 800a662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a670:	2201      	movs	r2, #1
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	fa02 f303 	lsl.w	r3, r2, r3
 800a678:	43db      	mvns	r3, r3
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	4013      	ands	r3, r2
 800a67e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	091b      	lsrs	r3, r3, #4
 800a686:	f003 0201 	and.w	r2, r3, #1
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	fa02 f303 	lsl.w	r3, r2, r3
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	4313      	orrs	r3, r2
 800a694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f003 0303 	and.w	r3, r3, #3
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d017      	beq.n	800a6d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b8:	43db      	mvns	r3, r3
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	4013      	ands	r3, r2
 800a6be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6cc:	69ba      	ldr	r2, [r7, #24]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	69ba      	ldr	r2, [r7, #24]
 800a6d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f003 0303 	and.w	r3, r3, #3
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d123      	bne.n	800a72c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	08da      	lsrs	r2, r3, #3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3208      	adds	r2, #8
 800a6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	220f      	movs	r2, #15
 800a6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a700:	43db      	mvns	r3, r3
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	4013      	ands	r3, r2
 800a706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	691a      	ldr	r2, [r3, #16]
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	fa02 f303 	lsl.w	r3, r2, r3
 800a718:	69ba      	ldr	r2, [r7, #24]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	08da      	lsrs	r2, r3, #3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3208      	adds	r2, #8
 800a726:	69b9      	ldr	r1, [r7, #24]
 800a728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	2203      	movs	r2, #3
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	43db      	mvns	r3, r3
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	4013      	ands	r3, r2
 800a742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f003 0203 	and.w	r2, r3, #3
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	fa02 f303 	lsl.w	r3, r2, r3
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	4313      	orrs	r3, r2
 800a758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 80be 	beq.w	800a8ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a76e:	4b66      	ldr	r3, [pc, #408]	; (800a908 <HAL_GPIO_Init+0x324>)
 800a770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a772:	4a65      	ldr	r2, [pc, #404]	; (800a908 <HAL_GPIO_Init+0x324>)
 800a774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a778:	6453      	str	r3, [r2, #68]	; 0x44
 800a77a:	4b63      	ldr	r3, [pc, #396]	; (800a908 <HAL_GPIO_Init+0x324>)
 800a77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a786:	4a61      	ldr	r2, [pc, #388]	; (800a90c <HAL_GPIO_Init+0x328>)
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	089b      	lsrs	r3, r3, #2
 800a78c:	3302      	adds	r3, #2
 800a78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a792:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	220f      	movs	r2, #15
 800a79e:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a2:	43db      	mvns	r3, r3
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a58      	ldr	r2, [pc, #352]	; (800a910 <HAL_GPIO_Init+0x32c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d037      	beq.n	800a822 <HAL_GPIO_Init+0x23e>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a57      	ldr	r2, [pc, #348]	; (800a914 <HAL_GPIO_Init+0x330>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d031      	beq.n	800a81e <HAL_GPIO_Init+0x23a>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a56      	ldr	r2, [pc, #344]	; (800a918 <HAL_GPIO_Init+0x334>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d02b      	beq.n	800a81a <HAL_GPIO_Init+0x236>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a55      	ldr	r2, [pc, #340]	; (800a91c <HAL_GPIO_Init+0x338>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d025      	beq.n	800a816 <HAL_GPIO_Init+0x232>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a54      	ldr	r2, [pc, #336]	; (800a920 <HAL_GPIO_Init+0x33c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d01f      	beq.n	800a812 <HAL_GPIO_Init+0x22e>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a53      	ldr	r2, [pc, #332]	; (800a924 <HAL_GPIO_Init+0x340>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d019      	beq.n	800a80e <HAL_GPIO_Init+0x22a>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a52      	ldr	r2, [pc, #328]	; (800a928 <HAL_GPIO_Init+0x344>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d013      	beq.n	800a80a <HAL_GPIO_Init+0x226>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a51      	ldr	r2, [pc, #324]	; (800a92c <HAL_GPIO_Init+0x348>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00d      	beq.n	800a806 <HAL_GPIO_Init+0x222>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a50      	ldr	r2, [pc, #320]	; (800a930 <HAL_GPIO_Init+0x34c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d007      	beq.n	800a802 <HAL_GPIO_Init+0x21e>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a4f      	ldr	r2, [pc, #316]	; (800a934 <HAL_GPIO_Init+0x350>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d101      	bne.n	800a7fe <HAL_GPIO_Init+0x21a>
 800a7fa:	2309      	movs	r3, #9
 800a7fc:	e012      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a7fe:	230a      	movs	r3, #10
 800a800:	e010      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a802:	2308      	movs	r3, #8
 800a804:	e00e      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a806:	2307      	movs	r3, #7
 800a808:	e00c      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a80a:	2306      	movs	r3, #6
 800a80c:	e00a      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a80e:	2305      	movs	r3, #5
 800a810:	e008      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a812:	2304      	movs	r3, #4
 800a814:	e006      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a816:	2303      	movs	r3, #3
 800a818:	e004      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a81a:	2302      	movs	r3, #2
 800a81c:	e002      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a81e:	2301      	movs	r3, #1
 800a820:	e000      	b.n	800a824 <HAL_GPIO_Init+0x240>
 800a822:	2300      	movs	r3, #0
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	f002 0203 	and.w	r2, r2, #3
 800a82a:	0092      	lsls	r2, r2, #2
 800a82c:	4093      	lsls	r3, r2
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	4313      	orrs	r3, r2
 800a832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a834:	4935      	ldr	r1, [pc, #212]	; (800a90c <HAL_GPIO_Init+0x328>)
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	089b      	lsrs	r3, r3, #2
 800a83a:	3302      	adds	r3, #2
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a842:	4b3d      	ldr	r3, [pc, #244]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	43db      	mvns	r3, r3
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	4013      	ands	r3, r2
 800a850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	4313      	orrs	r3, r2
 800a864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a866:	4a34      	ldr	r2, [pc, #208]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a86c:	4b32      	ldr	r3, [pc, #200]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	43db      	mvns	r3, r3
 800a876:	69ba      	ldr	r2, [r7, #24]
 800a878:	4013      	ands	r3, r2
 800a87a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a890:	4a29      	ldr	r2, [pc, #164]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a896:	4b28      	ldr	r3, [pc, #160]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	43db      	mvns	r3, r3
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a8ba:	4a1f      	ldr	r2, [pc, #124]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a8c0:	4b1d      	ldr	r3, [pc, #116]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	43db      	mvns	r3, r3
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a8e4:	4a14      	ldr	r2, [pc, #80]	; (800a938 <HAL_GPIO_Init+0x354>)
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	61fb      	str	r3, [r7, #28]
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	2b0f      	cmp	r3, #15
 800a8f4:	f67f ae86 	bls.w	800a604 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	3724      	adds	r7, #36	; 0x24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	40023800 	.word	0x40023800
 800a90c:	40013800 	.word	0x40013800
 800a910:	40020000 	.word	0x40020000
 800a914:	40020400 	.word	0x40020400
 800a918:	40020800 	.word	0x40020800
 800a91c:	40020c00 	.word	0x40020c00
 800a920:	40021000 	.word	0x40021000
 800a924:	40021400 	.word	0x40021400
 800a928:	40021800 	.word	0x40021800
 800a92c:	40021c00 	.word	0x40021c00
 800a930:	40022000 	.word	0x40022000
 800a934:	40022400 	.word	0x40022400
 800a938:	40013c00 	.word	0x40013c00

0800a93c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800a94e:	2300      	movs	r3, #0
 800a950:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a952:	2300      	movs	r3, #0
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	e0d9      	b.n	800ab0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a958:	2201      	movs	r2, #1
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	fa02 f303 	lsl.w	r3, r2, r3
 800a960:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	4013      	ands	r3, r2
 800a968:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	429a      	cmp	r2, r3
 800a970:	f040 80c9 	bne.w	800ab06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800a974:	4a6b      	ldr	r2, [pc, #428]	; (800ab24 <HAL_GPIO_DeInit+0x1e8>)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	089b      	lsrs	r3, r3, #2
 800a97a:	3302      	adds	r3, #2
 800a97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a980:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f003 0303 	and.w	r3, r3, #3
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	220f      	movs	r2, #15
 800a98c:	fa02 f303 	lsl.w	r3, r2, r3
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	4013      	ands	r3, r2
 800a994:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a63      	ldr	r2, [pc, #396]	; (800ab28 <HAL_GPIO_DeInit+0x1ec>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d037      	beq.n	800aa0e <HAL_GPIO_DeInit+0xd2>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a62      	ldr	r2, [pc, #392]	; (800ab2c <HAL_GPIO_DeInit+0x1f0>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d031      	beq.n	800aa0a <HAL_GPIO_DeInit+0xce>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a61      	ldr	r2, [pc, #388]	; (800ab30 <HAL_GPIO_DeInit+0x1f4>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d02b      	beq.n	800aa06 <HAL_GPIO_DeInit+0xca>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a60      	ldr	r2, [pc, #384]	; (800ab34 <HAL_GPIO_DeInit+0x1f8>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d025      	beq.n	800aa02 <HAL_GPIO_DeInit+0xc6>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a5f      	ldr	r2, [pc, #380]	; (800ab38 <HAL_GPIO_DeInit+0x1fc>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d01f      	beq.n	800a9fe <HAL_GPIO_DeInit+0xc2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a5e      	ldr	r2, [pc, #376]	; (800ab3c <HAL_GPIO_DeInit+0x200>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d019      	beq.n	800a9fa <HAL_GPIO_DeInit+0xbe>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a5d      	ldr	r2, [pc, #372]	; (800ab40 <HAL_GPIO_DeInit+0x204>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d013      	beq.n	800a9f6 <HAL_GPIO_DeInit+0xba>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a5c      	ldr	r2, [pc, #368]	; (800ab44 <HAL_GPIO_DeInit+0x208>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00d      	beq.n	800a9f2 <HAL_GPIO_DeInit+0xb6>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a5b      	ldr	r2, [pc, #364]	; (800ab48 <HAL_GPIO_DeInit+0x20c>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d007      	beq.n	800a9ee <HAL_GPIO_DeInit+0xb2>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a5a      	ldr	r2, [pc, #360]	; (800ab4c <HAL_GPIO_DeInit+0x210>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d101      	bne.n	800a9ea <HAL_GPIO_DeInit+0xae>
 800a9e6:	2309      	movs	r3, #9
 800a9e8:	e012      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800a9ea:	230a      	movs	r3, #10
 800a9ec:	e010      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800a9ee:	2308      	movs	r3, #8
 800a9f0:	e00e      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800a9f2:	2307      	movs	r3, #7
 800a9f4:	e00c      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800a9f6:	2306      	movs	r3, #6
 800a9f8:	e00a      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800a9fa:	2305      	movs	r3, #5
 800a9fc:	e008      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800a9fe:	2304      	movs	r3, #4
 800aa00:	e006      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800aa02:	2303      	movs	r3, #3
 800aa04:	e004      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800aa06:	2302      	movs	r3, #2
 800aa08:	e002      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e000      	b.n	800aa10 <HAL_GPIO_DeInit+0xd4>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	f002 0203 	and.w	r2, r2, #3
 800aa16:	0092      	lsls	r2, r2, #2
 800aa18:	4093      	lsls	r3, r2
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d132      	bne.n	800aa86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aa20:	4b4b      	ldr	r3, [pc, #300]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	43db      	mvns	r3, r3
 800aa28:	4949      	ldr	r1, [pc, #292]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800aa2e:	4b48      	ldr	r3, [pc, #288]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	43db      	mvns	r3, r3
 800aa36:	4946      	ldr	r1, [pc, #280]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa38:	4013      	ands	r3, r2
 800aa3a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800aa3c:	4b44      	ldr	r3, [pc, #272]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	43db      	mvns	r3, r3
 800aa44:	4942      	ldr	r1, [pc, #264]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa46:	4013      	ands	r3, r2
 800aa48:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800aa4a:	4b41      	ldr	r3, [pc, #260]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa4c:	689a      	ldr	r2, [r3, #8]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	43db      	mvns	r3, r3
 800aa52:	493f      	ldr	r1, [pc, #252]	; (800ab50 <HAL_GPIO_DeInit+0x214>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	f003 0303 	and.w	r3, r3, #3
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	220f      	movs	r2, #15
 800aa62:	fa02 f303 	lsl.w	r3, r2, r3
 800aa66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800aa68:	4a2e      	ldr	r2, [pc, #184]	; (800ab24 <HAL_GPIO_DeInit+0x1e8>)
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	089b      	lsrs	r3, r3, #2
 800aa6e:	3302      	adds	r3, #2
 800aa70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	43da      	mvns	r2, r3
 800aa78:	482a      	ldr	r0, [pc, #168]	; (800ab24 <HAL_GPIO_DeInit+0x1e8>)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	089b      	lsrs	r3, r3, #2
 800aa7e:	400a      	ands	r2, r1
 800aa80:	3302      	adds	r3, #2
 800aa82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	005b      	lsls	r3, r3, #1
 800aa8e:	2103      	movs	r1, #3
 800aa90:	fa01 f303 	lsl.w	r3, r1, r3
 800aa94:	43db      	mvns	r3, r3
 800aa96:	401a      	ands	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	08da      	lsrs	r2, r3, #3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3208      	adds	r2, #8
 800aaa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f003 0307 	and.w	r3, r3, #7
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	220f      	movs	r2, #15
 800aab2:	fa02 f303 	lsl.w	r3, r2, r3
 800aab6:	43db      	mvns	r3, r3
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	08d2      	lsrs	r2, r2, #3
 800aabc:	4019      	ands	r1, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3208      	adds	r2, #8
 800aac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68da      	ldr	r2, [r3, #12]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	2103      	movs	r1, #3
 800aad0:	fa01 f303 	lsl.w	r3, r1, r3
 800aad4:	43db      	mvns	r3, r3
 800aad6:	401a      	ands	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	2101      	movs	r1, #1
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	fa01 f303 	lsl.w	r3, r1, r3
 800aae8:	43db      	mvns	r3, r3
 800aaea:	401a      	ands	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	2103      	movs	r1, #3
 800aafa:	fa01 f303 	lsl.w	r3, r1, r3
 800aafe:	43db      	mvns	r3, r3
 800ab00:	401a      	ands	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2b0f      	cmp	r3, #15
 800ab10:	f67f af22 	bls.w	800a958 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	40013800 	.word	0x40013800
 800ab28:	40020000 	.word	0x40020000
 800ab2c:	40020400 	.word	0x40020400
 800ab30:	40020800 	.word	0x40020800
 800ab34:	40020c00 	.word	0x40020c00
 800ab38:	40021000 	.word	0x40021000
 800ab3c:	40021400 	.word	0x40021400
 800ab40:	40021800 	.word	0x40021800
 800ab44:	40021c00 	.word	0x40021c00
 800ab48:	40022000 	.word	0x40022000
 800ab4c:	40022400 	.word	0x40022400
 800ab50:	40013c00 	.word	0x40013c00

0800ab54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	807b      	strh	r3, [r7, #2]
 800ab60:	4613      	mov	r3, r2
 800ab62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ab64:	787b      	ldrb	r3, [r7, #1]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab6a:	887a      	ldrh	r2, [r7, #2]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800ab70:	e003      	b.n	800ab7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ab72:	887b      	ldrh	r3, [r7, #2]
 800ab74:	041a      	lsls	r2, r3, #16
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	619a      	str	r2, [r3, #24]
}
 800ab7a:	bf00      	nop
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
	...

0800ab88 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ab94:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <HAL_PWR_EnterSLEEPMode+0x40>)
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	4a0b      	ldr	r2, [pc, #44]	; (800abc8 <HAL_PWR_EnterSLEEPMode+0x40>)
 800ab9a:	f023 0304 	bic.w	r3, r3, #4
 800ab9e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800aba0:	f3bf 8f4f 	dsb	sy
}
 800aba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aba6:	f3bf 8f6f 	isb	sy
}
 800abaa:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d101      	bne.n	800abb6 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800abb2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800abb4:	e002      	b.n	800abbc <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800abb6:	bf40      	sev
    __WFE();
 800abb8:	bf20      	wfe
    __WFE();
 800abba:	bf20      	wfe
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	e000ed00 	.word	0xe000ed00

0800abcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800abd6:	4b23      	ldr	r3, [pc, #140]	; (800ac64 <HAL_PWREx_EnableOverDrive+0x98>)
 800abd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abda:	4a22      	ldr	r2, [pc, #136]	; (800ac64 <HAL_PWREx_EnableOverDrive+0x98>)
 800abdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abe0:	6413      	str	r3, [r2, #64]	; 0x40
 800abe2:	4b20      	ldr	r3, [pc, #128]	; (800ac64 <HAL_PWREx_EnableOverDrive+0x98>)
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abea:	603b      	str	r3, [r7, #0]
 800abec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800abee:	4b1e      	ldr	r3, [pc, #120]	; (800ac68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a1d      	ldr	r2, [pc, #116]	; (800ac68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800abf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800abfa:	f7fe fa29 	bl	8009050 <HAL_GetTick>
 800abfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac00:	e009      	b.n	800ac16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac02:	f7fe fa25 	bl	8009050 <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac10:	d901      	bls.n	800ac16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e022      	b.n	800ac5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac16:	4b14      	ldr	r3, [pc, #80]	; (800ac68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac22:	d1ee      	bne.n	800ac02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ac24:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a0f      	ldr	r2, [pc, #60]	; (800ac68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac30:	f7fe fa0e 	bl	8009050 <HAL_GetTick>
 800ac34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac36:	e009      	b.n	800ac4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac38:	f7fe fa0a 	bl	8009050 <HAL_GetTick>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac46:	d901      	bls.n	800ac4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e007      	b.n	800ac5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac4c:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac58:	d1ee      	bne.n	800ac38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	40023800 	.word	0x40023800
 800ac68:	40007000 	.word	0x40007000

0800ac6c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac74:	f7fe f9ec 	bl	8009050 <HAL_GetTick>
 800ac78:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e067      	b.n	800ad54 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10b      	bne.n	800aca8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7f8 fe27 	bl	80038ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ac9e:	f241 3188 	movw	r1, #5000	; 0x1388
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fa86 	bl	800b1b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	021a      	lsls	r2, r3, #8
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	2120      	movs	r1, #32
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fa7e 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800acd4:	4603      	mov	r3, r0
 800acd6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800acd8:	7afb      	ldrb	r3, [r7, #11]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d135      	bne.n	800ad4a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <HAL_QSPI_Init+0xf0>)
 800ace6:	4013      	ands	r3, r2
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	6852      	ldr	r2, [r2, #4]
 800acec:	0611      	lsls	r1, r2, #24
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	68d2      	ldr	r2, [r2, #12]
 800acf2:	4311      	orrs	r1, r2
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	69d2      	ldr	r2, [r2, #28]
 800acf8:	4311      	orrs	r1, r2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	6a12      	ldr	r2, [r2, #32]
 800acfe:	4311      	orrs	r1, r2
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6812      	ldr	r2, [r2, #0]
 800ad04:	430b      	orrs	r3, r1
 800ad06:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	4b14      	ldr	r3, [pc, #80]	; (800ad60 <HAL_QSPI_Init+0xf4>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	6912      	ldr	r2, [r2, #16]
 800ad16:	0411      	lsls	r1, r2, #16
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	6952      	ldr	r2, [r2, #20]
 800ad1c:	4311      	orrs	r1, r2
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	6992      	ldr	r2, [r2, #24]
 800ad22:	4311      	orrs	r1, r2
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	6812      	ldr	r2, [r2, #0]
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f042 0201 	orr.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ad52:	7afb      	ldrb	r3, [r7, #11]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	00ffff2f 	.word	0x00ffff2f
 800ad60:	ffe0f8fe 	.word	0xffe0f8fe

0800ad64 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e016      	b.n	800ada4 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f022 0201 	bic.w	r2, r2, #1
 800ad84:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7f8 fe60 	bl	8003a4c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800adb8:	f7fe f94a 	bl	8009050 <HAL_GetTick>
 800adbc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <HAL_QSPI_Command+0x22>
 800adca:	2302      	movs	r3, #2
 800adcc:	e048      	b.n	800ae60 <HAL_QSPI_Command+0xb4>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d137      	bne.n	800ae52 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2202      	movs	r2, #2
 800adec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2200      	movs	r2, #0
 800adf8:	2120      	movs	r1, #32
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 f9e8 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800ae00:	4603      	mov	r3, r0
 800ae02:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d125      	bne.n	800ae56 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	68b9      	ldr	r1, [r7, #8]
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 fa15 	bl	800b23e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d115      	bne.n	800ae48 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2201      	movs	r2, #1
 800ae24:	2102      	movs	r1, #2
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 f9d2 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ae30:	7dfb      	ldrb	r3, [r7, #23]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10f      	bne.n	800ae56 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae46:	e006      	b.n	800ae56 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae50:	e001      	b.n	800ae56 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ae52:	2302      	movs	r3, #2
 800ae54:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08a      	sub	sp, #40	; 0x28
 800ae6c:	af02      	add	r7, sp, #8
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ae78:	f7fe f8ea 	bl	8009050 <HAL_GetTick>
 800ae7c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3320      	adds	r3, #32
 800ae84:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <HAL_QSPI_Transmit+0x2e>
 800ae92:	2302      	movs	r3, #2
 800ae94:	e076      	b.n	800af84 <HAL_QSPI_Transmit+0x11c>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d165      	bne.n	800af76 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d056      	beq.n	800af64 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2212      	movs	r2, #18
 800aeba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	695a      	ldr	r2, [r3, #20]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800aeea:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800aeec:	e01b      	b.n	800af26 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	2201      	movs	r2, #1
 800aef6:	2104      	movs	r1, #4
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f000 f969 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800aefe:	4603      	mov	r3, r0
 800af00:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800af02:	7ffb      	ldrb	r3, [r7, #31]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d113      	bne.n	800af30 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	781a      	ldrb	r2, [r3, #0]
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	1e5a      	subs	r2, r3, #1
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1df      	bne.n	800aeee <HAL_QSPI_Transmit+0x86>
 800af2e:	e000      	b.n	800af32 <HAL_QSPI_Transmit+0xca>
          break;
 800af30:	bf00      	nop
      }

      if (status == HAL_OK)
 800af32:	7ffb      	ldrb	r3, [r7, #31]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d110      	bne.n	800af5a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	2201      	movs	r2, #1
 800af40:	2102      	movs	r1, #2
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 f944 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800af48:	4603      	mov	r3, r0
 800af4a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800af4c:	7ffb      	ldrb	r3, [r7, #31]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2202      	movs	r2, #2
 800af58:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af62:	e00a      	b.n	800af7a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af68:	f043 0208 	orr.w	r2, r3, #8
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	77fb      	strb	r3, [r7, #31]
 800af74:	e001      	b.n	800af7a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800af76:	2302      	movs	r3, #2
 800af78:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800af82:	7ffb      	ldrb	r3, [r7, #31]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3720      	adds	r7, #32
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800af9c:	f7fe f858 	bl	8009050 <HAL_GetTick>
 800afa0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3320      	adds	r3, #32
 800afb0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <HAL_QSPI_Receive+0x36>
 800afbe:	2302      	movs	r3, #2
 800afc0:	e07d      	b.n	800b0be <HAL_QSPI_Receive+0x132>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d16c      	bne.n	800b0b0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d05d      	beq.n	800b09e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2222      	movs	r2, #34	; 0x22
 800afe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b01a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b024:	e01c      	b.n	800b060 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	2201      	movs	r2, #1
 800b02e:	2106      	movs	r1, #6
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 f8cd 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800b036:	4603      	mov	r3, r0
 800b038:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b03a:	7ffb      	ldrb	r3, [r7, #31]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d114      	bne.n	800b06a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	7812      	ldrb	r2, [r2, #0]
 800b048:	b2d2      	uxtb	r2, r2
 800b04a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	1e5a      	subs	r2, r3, #1
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1de      	bne.n	800b026 <HAL_QSPI_Receive+0x9a>
 800b068:	e000      	b.n	800b06c <HAL_QSPI_Receive+0xe0>
          break;
 800b06a:	bf00      	nop
      }

      if (status == HAL_OK)
 800b06c:	7ffb      	ldrb	r3, [r7, #31]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d110      	bne.n	800b094 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2201      	movs	r2, #1
 800b07a:	2102      	movs	r1, #2
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 f8a7 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800b082:	4603      	mov	r3, r0
 800b084:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b086:	7ffb      	ldrb	r3, [r7, #31]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d103      	bne.n	800b094 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2202      	movs	r2, #2
 800b092:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b09c:	e00a      	b.n	800b0b4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a2:	f043 0208 	orr.w	r2, r3, #8
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	77fb      	strb	r3, [r7, #31]
 800b0ae:	e001      	b.n	800b0b4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b0bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b088      	sub	sp, #32
 800b0ca:	af02      	add	r7, sp, #8
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	60b9      	str	r1, [r7, #8]
 800b0d0:	607a      	str	r2, [r7, #4]
 800b0d2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b0d4:	f7fd ffbc 	bl	8009050 <HAL_GetTick>
 800b0d8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d101      	bne.n	800b0ea <HAL_QSPI_AutoPolling+0x24>
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e060      	b.n	800b1ac <HAL_QSPI_AutoPolling+0xe6>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d14f      	bne.n	800b19e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2242      	movs	r2, #66	; 0x42
 800b108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	2200      	movs	r2, #0
 800b114:	2120      	movs	r1, #32
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f000 f85a 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800b11c:	4603      	mov	r3, r0
 800b11e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b120:	7dfb      	ldrb	r3, [r7, #23]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d13d      	bne.n	800b1a2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6812      	ldr	r2, [r2, #0]
 800b12e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	6852      	ldr	r2, [r2, #4]
 800b138:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6892      	ldr	r2, [r2, #8]
 800b142:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	431a      	orrs	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b15c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b16a:	68b9      	ldr	r1, [r7, #8]
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 f866 	bl	800b23e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2201      	movs	r2, #1
 800b17a:	2108      	movs	r1, #8
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 f827 	bl	800b1d0 <QSPI_WaitFlagStateUntilTimeout>
 800b182:	4603      	mov	r3, r0
 800b184:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2208      	movs	r2, #8
 800b192:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b19c:	e001      	b.n	800b1a2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b1e0:	e01a      	b.n	800b218 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e8:	d016      	beq.n	800b218 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ea:	f7fd ff31 	bl	8009050 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	69ba      	ldr	r2, [r7, #24]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d302      	bcc.n	800b200 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10b      	bne.n	800b218 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2204      	movs	r2, #4
 800b204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b20c:	f043 0201 	orr.w	r2, r3, #1
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e00e      	b.n	800b236 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689a      	ldr	r2, [r3, #8]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	4013      	ands	r3, r2
 800b222:	2b00      	cmp	r3, #0
 800b224:	bf14      	ite	ne
 800b226:	2301      	movne	r3, #1
 800b228:	2300      	moveq	r3, #0
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	79fb      	ldrb	r3, [r7, #7]
 800b230:	429a      	cmp	r2, r3
 800b232:	d1d6      	bne.n	800b1e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d009      	beq.n	800b266 <QSPI_Config+0x28>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b258:	d005      	beq.n	800b266 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3a01      	subs	r2, #1
 800b264:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 80b9 	beq.w	800b3e2 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d05f      	beq.n	800b338 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	6892      	ldr	r2, [r2, #8]
 800b280:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d031      	beq.n	800b2ee <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b292:	431a      	orrs	r2, r3
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b298:	431a      	orrs	r2, r3
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	049b      	lsls	r3, r3, #18
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	431a      	orrs	r2, r3
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	ea42 0103 	orr.w	r1, r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b2de:	f000 812e 	beq.w	800b53e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	6852      	ldr	r2, [r2, #4]
 800b2ea:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b2ec:	e127      	b.n	800b53e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	431a      	orrs	r2, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	431a      	orrs	r2, r3
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	049b      	lsls	r3, r3, #18
 800b30a:	431a      	orrs	r2, r3
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	431a      	orrs	r2, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	431a      	orrs	r2, r3
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	431a      	orrs	r2, r3
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	431a      	orrs	r2, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	ea42 0103 	orr.w	r1, r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	430a      	orrs	r2, r1
 800b334:	615a      	str	r2, [r3, #20]
}
 800b336:	e102      	b.n	800b53e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	69db      	ldr	r3, [r3, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d02e      	beq.n	800b39e <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b348:	431a      	orrs	r2, r3
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34e:	431a      	orrs	r2, r3
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	431a      	orrs	r2, r3
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	049b      	lsls	r3, r3, #18
 800b35c:	431a      	orrs	r2, r3
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	431a      	orrs	r2, r3
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	431a      	orrs	r2, r3
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	431a      	orrs	r2, r3
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	431a      	orrs	r2, r3
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	ea42 0103 	orr.w	r1, r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	430a      	orrs	r2, r1
 800b386:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b38e:	f000 80d6 	beq.w	800b53e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	6852      	ldr	r2, [r2, #4]
 800b39a:	619a      	str	r2, [r3, #24]
}
 800b39c:	e0cf      	b.n	800b53e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	049b      	lsls	r3, r3, #18
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	6a1b      	ldr	r3, [r3, #32]
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	ea42 0103 	orr.w	r1, r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	430a      	orrs	r2, r1
 800b3de:	615a      	str	r2, [r3, #20]
}
 800b3e0:	e0ad      	b.n	800b53e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d058      	beq.n	800b49c <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	6892      	ldr	r2, [r2, #8]
 800b3f2:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d02d      	beq.n	800b458 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b404:	431a      	orrs	r2, r3
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40a:	431a      	orrs	r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	431a      	orrs	r2, r3
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	049b      	lsls	r3, r3, #18
 800b418:	431a      	orrs	r2, r3
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	431a      	orrs	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	431a      	orrs	r2, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	431a      	orrs	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	431a      	orrs	r2, r3
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	ea42 0103 	orr.w	r1, r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	430a      	orrs	r2, r1
 800b442:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b44a:	d078      	beq.n	800b53e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	6852      	ldr	r2, [r2, #4]
 800b454:	619a      	str	r2, [r3, #24]
}
 800b456:	e072      	b.n	800b53e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b460:	431a      	orrs	r2, r3
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b466:	431a      	orrs	r2, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46c:	431a      	orrs	r2, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	049b      	lsls	r3, r3, #18
 800b474:	431a      	orrs	r2, r3
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	431a      	orrs	r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	431a      	orrs	r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	431a      	orrs	r2, r3
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	ea42 0103 	orr.w	r1, r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	430a      	orrs	r2, r1
 800b498:	615a      	str	r2, [r3, #20]
}
 800b49a:	e050      	b.n	800b53e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d02a      	beq.n	800b4fa <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	049b      	lsls	r3, r3, #18
 800b4c0:	431a      	orrs	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	69db      	ldr	r3, [r3, #28]
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	ea42 0103 	orr.w	r1, r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b4ec:	d027      	beq.n	800b53e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	6852      	ldr	r2, [r2, #4]
 800b4f6:	619a      	str	r2, [r3, #24]
}
 800b4f8:	e021      	b.n	800b53e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d01d      	beq.n	800b53e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50a:	431a      	orrs	r2, r3
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b510:	431a      	orrs	r2, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	431a      	orrs	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	049b      	lsls	r3, r3, #18
 800b51e:	431a      	orrs	r2, r3
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	431a      	orrs	r2, r3
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	431a      	orrs	r2, r3
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	ea42 0103 	orr.w	r1, r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	430a      	orrs	r2, r1
 800b53c:	615a      	str	r2, [r3, #20]
}
 800b53e:	bf00      	nop
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b554:	2300      	movs	r3, #0
 800b556:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e29b      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f000 8087 	beq.w	800b67e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b570:	4b96      	ldr	r3, [pc, #600]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f003 030c 	and.w	r3, r3, #12
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d00c      	beq.n	800b596 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b57c:	4b93      	ldr	r3, [pc, #588]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f003 030c 	and.w	r3, r3, #12
 800b584:	2b08      	cmp	r3, #8
 800b586:	d112      	bne.n	800b5ae <HAL_RCC_OscConfig+0x62>
 800b588:	4b90      	ldr	r3, [pc, #576]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b594:	d10b      	bne.n	800b5ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b596:	4b8d      	ldr	r3, [pc, #564]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d06c      	beq.n	800b67c <HAL_RCC_OscConfig+0x130>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d168      	bne.n	800b67c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e275      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5b6:	d106      	bne.n	800b5c6 <HAL_RCC_OscConfig+0x7a>
 800b5b8:	4b84      	ldr	r3, [pc, #528]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a83      	ldr	r2, [pc, #524]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5c2:	6013      	str	r3, [r2, #0]
 800b5c4:	e02e      	b.n	800b624 <HAL_RCC_OscConfig+0xd8>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10c      	bne.n	800b5e8 <HAL_RCC_OscConfig+0x9c>
 800b5ce:	4b7f      	ldr	r3, [pc, #508]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a7e      	ldr	r2, [pc, #504]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	4b7c      	ldr	r3, [pc, #496]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a7b      	ldr	r2, [pc, #492]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5e4:	6013      	str	r3, [r2, #0]
 800b5e6:	e01d      	b.n	800b624 <HAL_RCC_OscConfig+0xd8>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5f0:	d10c      	bne.n	800b60c <HAL_RCC_OscConfig+0xc0>
 800b5f2:	4b76      	ldr	r3, [pc, #472]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a75      	ldr	r2, [pc, #468]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b5f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5fc:	6013      	str	r3, [r2, #0]
 800b5fe:	4b73      	ldr	r3, [pc, #460]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a72      	ldr	r2, [pc, #456]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	e00b      	b.n	800b624 <HAL_RCC_OscConfig+0xd8>
 800b60c:	4b6f      	ldr	r3, [pc, #444]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a6e      	ldr	r2, [pc, #440]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	4b6c      	ldr	r3, [pc, #432]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a6b      	ldr	r2, [pc, #428]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b61e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d013      	beq.n	800b654 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b62c:	f7fd fd10 	bl	8009050 <HAL_GetTick>
 800b630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b632:	e008      	b.n	800b646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b634:	f7fd fd0c 	bl	8009050 <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	2b64      	cmp	r3, #100	; 0x64
 800b640:	d901      	bls.n	800b646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e229      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b646:	4b61      	ldr	r3, [pc, #388]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0f0      	beq.n	800b634 <HAL_RCC_OscConfig+0xe8>
 800b652:	e014      	b.n	800b67e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b654:	f7fd fcfc 	bl	8009050 <HAL_GetTick>
 800b658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b65a:	e008      	b.n	800b66e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b65c:	f7fd fcf8 	bl	8009050 <HAL_GetTick>
 800b660:	4602      	mov	r2, r0
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	2b64      	cmp	r3, #100	; 0x64
 800b668:	d901      	bls.n	800b66e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e215      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b66e:	4b57      	ldr	r3, [pc, #348]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1f0      	bne.n	800b65c <HAL_RCC_OscConfig+0x110>
 800b67a:	e000      	b.n	800b67e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b67c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0302 	and.w	r3, r3, #2
 800b686:	2b00      	cmp	r3, #0
 800b688:	d069      	beq.n	800b75e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b68a:	4b50      	ldr	r3, [pc, #320]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f003 030c 	and.w	r3, r3, #12
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00b      	beq.n	800b6ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b696:	4b4d      	ldr	r3, [pc, #308]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f003 030c 	and.w	r3, r3, #12
 800b69e:	2b08      	cmp	r3, #8
 800b6a0:	d11c      	bne.n	800b6dc <HAL_RCC_OscConfig+0x190>
 800b6a2:	4b4a      	ldr	r3, [pc, #296]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d116      	bne.n	800b6dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6ae:	4b47      	ldr	r3, [pc, #284]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <HAL_RCC_OscConfig+0x17a>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d001      	beq.n	800b6c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e1e9      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6c6:	4b41      	ldr	r3, [pc, #260]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	00db      	lsls	r3, r3, #3
 800b6d4:	493d      	ldr	r1, [pc, #244]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6da:	e040      	b.n	800b75e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d023      	beq.n	800b72c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b6e4:	4b39      	ldr	r3, [pc, #228]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a38      	ldr	r2, [pc, #224]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b6ea:	f043 0301 	orr.w	r3, r3, #1
 800b6ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f0:	f7fd fcae 	bl	8009050 <HAL_GetTick>
 800b6f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6f6:	e008      	b.n	800b70a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6f8:	f7fd fcaa 	bl	8009050 <HAL_GetTick>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	2b02      	cmp	r3, #2
 800b704:	d901      	bls.n	800b70a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	e1c7      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b70a:	4b30      	ldr	r3, [pc, #192]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0302 	and.w	r3, r3, #2
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0f0      	beq.n	800b6f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b716:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	4929      	ldr	r1, [pc, #164]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b726:	4313      	orrs	r3, r2
 800b728:	600b      	str	r3, [r1, #0]
 800b72a:	e018      	b.n	800b75e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b72c:	4b27      	ldr	r3, [pc, #156]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a26      	ldr	r2, [pc, #152]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b732:	f023 0301 	bic.w	r3, r3, #1
 800b736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b738:	f7fd fc8a 	bl	8009050 <HAL_GetTick>
 800b73c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b73e:	e008      	b.n	800b752 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b740:	f7fd fc86 	bl	8009050 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d901      	bls.n	800b752 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e1a3      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b752:	4b1e      	ldr	r3, [pc, #120]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0302 	and.w	r3, r3, #2
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1f0      	bne.n	800b740 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 0308 	and.w	r3, r3, #8
 800b766:	2b00      	cmp	r3, #0
 800b768:	d038      	beq.n	800b7dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d019      	beq.n	800b7a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b772:	4b16      	ldr	r3, [pc, #88]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b776:	4a15      	ldr	r2, [pc, #84]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b778:	f043 0301 	orr.w	r3, r3, #1
 800b77c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b77e:	f7fd fc67 	bl	8009050 <HAL_GetTick>
 800b782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b784:	e008      	b.n	800b798 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b786:	f7fd fc63 	bl	8009050 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	2b02      	cmp	r3, #2
 800b792:	d901      	bls.n	800b798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e180      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b79a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b79c:	f003 0302 	and.w	r3, r3, #2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d0f0      	beq.n	800b786 <HAL_RCC_OscConfig+0x23a>
 800b7a4:	e01a      	b.n	800b7dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b7a6:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b7a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7aa:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <HAL_RCC_OscConfig+0x280>)
 800b7ac:	f023 0301 	bic.w	r3, r3, #1
 800b7b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7b2:	f7fd fc4d 	bl	8009050 <HAL_GetTick>
 800b7b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7b8:	e00a      	b.n	800b7d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7ba:	f7fd fc49 	bl	8009050 <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d903      	bls.n	800b7d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e166      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
 800b7cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7d0:	4b92      	ldr	r3, [pc, #584]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1ee      	bne.n	800b7ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 80a4 	beq.w	800b932 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7ea:	4b8c      	ldr	r3, [pc, #560]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10d      	bne.n	800b812 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7f6:	4b89      	ldr	r3, [pc, #548]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fa:	4a88      	ldr	r2, [pc, #544]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b7fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b800:	6413      	str	r3, [r2, #64]	; 0x40
 800b802:	4b86      	ldr	r3, [pc, #536]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b80a:	60bb      	str	r3, [r7, #8]
 800b80c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b80e:	2301      	movs	r3, #1
 800b810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b812:	4b83      	ldr	r3, [pc, #524]	; (800ba20 <HAL_RCC_OscConfig+0x4d4>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d118      	bne.n	800b850 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b81e:	4b80      	ldr	r3, [pc, #512]	; (800ba20 <HAL_RCC_OscConfig+0x4d4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a7f      	ldr	r2, [pc, #508]	; (800ba20 <HAL_RCC_OscConfig+0x4d4>)
 800b824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b82a:	f7fd fc11 	bl	8009050 <HAL_GetTick>
 800b82e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b830:	e008      	b.n	800b844 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b832:	f7fd fc0d 	bl	8009050 <HAL_GetTick>
 800b836:	4602      	mov	r2, r0
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	2b64      	cmp	r3, #100	; 0x64
 800b83e:	d901      	bls.n	800b844 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e12a      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b844:	4b76      	ldr	r3, [pc, #472]	; (800ba20 <HAL_RCC_OscConfig+0x4d4>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d0f0      	beq.n	800b832 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d106      	bne.n	800b866 <HAL_RCC_OscConfig+0x31a>
 800b858:	4b70      	ldr	r3, [pc, #448]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b85c:	4a6f      	ldr	r2, [pc, #444]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	6713      	str	r3, [r2, #112]	; 0x70
 800b864:	e02d      	b.n	800b8c2 <HAL_RCC_OscConfig+0x376>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10c      	bne.n	800b888 <HAL_RCC_OscConfig+0x33c>
 800b86e:	4b6b      	ldr	r3, [pc, #428]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b872:	4a6a      	ldr	r2, [pc, #424]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b874:	f023 0301 	bic.w	r3, r3, #1
 800b878:	6713      	str	r3, [r2, #112]	; 0x70
 800b87a:	4b68      	ldr	r3, [pc, #416]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87e:	4a67      	ldr	r2, [pc, #412]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b880:	f023 0304 	bic.w	r3, r3, #4
 800b884:	6713      	str	r3, [r2, #112]	; 0x70
 800b886:	e01c      	b.n	800b8c2 <HAL_RCC_OscConfig+0x376>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	2b05      	cmp	r3, #5
 800b88e:	d10c      	bne.n	800b8aa <HAL_RCC_OscConfig+0x35e>
 800b890:	4b62      	ldr	r3, [pc, #392]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b894:	4a61      	ldr	r2, [pc, #388]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b896:	f043 0304 	orr.w	r3, r3, #4
 800b89a:	6713      	str	r3, [r2, #112]	; 0x70
 800b89c:	4b5f      	ldr	r3, [pc, #380]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b89e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a0:	4a5e      	ldr	r2, [pc, #376]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b8a2:	f043 0301 	orr.w	r3, r3, #1
 800b8a6:	6713      	str	r3, [r2, #112]	; 0x70
 800b8a8:	e00b      	b.n	800b8c2 <HAL_RCC_OscConfig+0x376>
 800b8aa:	4b5c      	ldr	r3, [pc, #368]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ae:	4a5b      	ldr	r2, [pc, #364]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b8b0:	f023 0301 	bic.w	r3, r3, #1
 800b8b4:	6713      	str	r3, [r2, #112]	; 0x70
 800b8b6:	4b59      	ldr	r3, [pc, #356]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ba:	4a58      	ldr	r2, [pc, #352]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b8bc:	f023 0304 	bic.w	r3, r3, #4
 800b8c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d015      	beq.n	800b8f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8ca:	f7fd fbc1 	bl	8009050 <HAL_GetTick>
 800b8ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8d0:	e00a      	b.n	800b8e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8d2:	f7fd fbbd 	bl	8009050 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d901      	bls.n	800b8e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e0d8      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8e8:	4b4c      	ldr	r3, [pc, #304]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ec:	f003 0302 	and.w	r3, r3, #2
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0ee      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x386>
 800b8f4:	e014      	b.n	800b920 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8f6:	f7fd fbab 	bl	8009050 <HAL_GetTick>
 800b8fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8fc:	e00a      	b.n	800b914 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8fe:	f7fd fba7 	bl	8009050 <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	f241 3288 	movw	r2, #5000	; 0x1388
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d901      	bls.n	800b914 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e0c2      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b914:	4b41      	ldr	r3, [pc, #260]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b918:	f003 0302 	and.w	r3, r3, #2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1ee      	bne.n	800b8fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d105      	bne.n	800b932 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b926:	4b3d      	ldr	r3, [pc, #244]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	4a3c      	ldr	r2, [pc, #240]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b92c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b930:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	699b      	ldr	r3, [r3, #24]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 80ae 	beq.w	800ba98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b93c:	4b37      	ldr	r3, [pc, #220]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f003 030c 	and.w	r3, r3, #12
 800b944:	2b08      	cmp	r3, #8
 800b946:	d06d      	beq.n	800ba24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d14b      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b950:	4b32      	ldr	r3, [pc, #200]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a31      	ldr	r2, [pc, #196]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b95a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b95c:	f7fd fb78 	bl	8009050 <HAL_GetTick>
 800b960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b962:	e008      	b.n	800b976 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b964:	f7fd fb74 	bl	8009050 <HAL_GetTick>
 800b968:	4602      	mov	r2, r0
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d901      	bls.n	800b976 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b972:	2303      	movs	r3, #3
 800b974:	e091      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b976:	4b29      	ldr	r3, [pc, #164]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f0      	bne.n	800b964 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	69da      	ldr	r2, [r3, #28]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	431a      	orrs	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	019b      	lsls	r3, r3, #6
 800b992:	431a      	orrs	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b998:	085b      	lsrs	r3, r3, #1
 800b99a:	3b01      	subs	r3, #1
 800b99c:	041b      	lsls	r3, r3, #16
 800b99e:	431a      	orrs	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	061b      	lsls	r3, r3, #24
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ac:	071b      	lsls	r3, r3, #28
 800b9ae:	491b      	ldr	r1, [pc, #108]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9b4:	4b19      	ldr	r3, [pc, #100]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a18      	ldr	r2, [pc, #96]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b9ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c0:	f7fd fb46 	bl	8009050 <HAL_GetTick>
 800b9c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9c6:	e008      	b.n	800b9da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c8:	f7fd fb42 	bl	8009050 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d901      	bls.n	800b9da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e05f      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9da:	4b10      	ldr	r3, [pc, #64]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d0f0      	beq.n	800b9c8 <HAL_RCC_OscConfig+0x47c>
 800b9e6:	e057      	b.n	800ba98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a0b      	ldr	r2, [pc, #44]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800b9ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f4:	f7fd fb2c 	bl	8009050 <HAL_GetTick>
 800b9f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9fa:	e008      	b.n	800ba0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9fc:	f7fd fb28 	bl	8009050 <HAL_GetTick>
 800ba00:	4602      	mov	r2, r0
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d901      	bls.n	800ba0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e045      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba0e:	4b03      	ldr	r3, [pc, #12]	; (800ba1c <HAL_RCC_OscConfig+0x4d0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1f0      	bne.n	800b9fc <HAL_RCC_OscConfig+0x4b0>
 800ba1a:	e03d      	b.n	800ba98 <HAL_RCC_OscConfig+0x54c>
 800ba1c:	40023800 	.word	0x40023800
 800ba20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ba24:	4b1f      	ldr	r3, [pc, #124]	; (800baa4 <HAL_RCC_OscConfig+0x558>)
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d030      	beq.n	800ba94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d129      	bne.n	800ba94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d122      	bne.n	800ba94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ba54:	4013      	ands	r3, r2
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ba5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d119      	bne.n	800ba94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6a:	085b      	lsrs	r3, r3, #1
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d10f      	bne.n	800ba94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d107      	bne.n	800ba94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d001      	beq.n	800ba98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e000      	b.n	800ba9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	40023800 	.word	0x40023800

0800baa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e0d0      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bac0:	4b6a      	ldr	r3, [pc, #424]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d910      	bls.n	800baf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bace:	4b67      	ldr	r3, [pc, #412]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f023 020f 	bic.w	r2, r3, #15
 800bad6:	4965      	ldr	r1, [pc, #404]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	4313      	orrs	r3, r2
 800badc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bade:	4b63      	ldr	r3, [pc, #396]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 030f 	and.w	r3, r3, #15
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d001      	beq.n	800baf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e0b8      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d020      	beq.n	800bb3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 0304 	and.w	r3, r3, #4
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d005      	beq.n	800bb14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb08:	4b59      	ldr	r3, [pc, #356]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	4a58      	ldr	r2, [pc, #352]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bb12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 0308 	and.w	r3, r3, #8
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb20:	4b53      	ldr	r3, [pc, #332]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	4a52      	ldr	r2, [pc, #328]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bb2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb2c:	4b50      	ldr	r3, [pc, #320]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	494d      	ldr	r1, [pc, #308]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d040      	beq.n	800bbcc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d107      	bne.n	800bb62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb52:	4b47      	ldr	r3, [pc, #284]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d115      	bne.n	800bb8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e07f      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d107      	bne.n	800bb7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb6a:	4b41      	ldr	r3, [pc, #260]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d109      	bne.n	800bb8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e073      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb7a:	4b3d      	ldr	r3, [pc, #244]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e06b      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb8a:	4b39      	ldr	r3, [pc, #228]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f023 0203 	bic.w	r2, r3, #3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	4936      	ldr	r1, [pc, #216]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb9c:	f7fd fa58 	bl	8009050 <HAL_GetTick>
 800bba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bba2:	e00a      	b.n	800bbba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bba4:	f7fd fa54 	bl	8009050 <HAL_GetTick>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d901      	bls.n	800bbba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e053      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbba:	4b2d      	ldr	r3, [pc, #180]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f003 020c 	and.w	r2, r3, #12
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d1eb      	bne.n	800bba4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bbcc:	4b27      	ldr	r3, [pc, #156]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d210      	bcs.n	800bbfc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbda:	4b24      	ldr	r3, [pc, #144]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f023 020f 	bic.w	r2, r3, #15
 800bbe2:	4922      	ldr	r1, [pc, #136]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbea:	4b20      	ldr	r3, [pc, #128]	; (800bc6c <HAL_RCC_ClockConfig+0x1c4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 030f 	and.w	r3, r3, #15
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d001      	beq.n	800bbfc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e032      	b.n	800bc62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0304 	and.w	r3, r3, #4
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d008      	beq.n	800bc1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc08:	4b19      	ldr	r3, [pc, #100]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	4916      	ldr	r1, [pc, #88]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 0308 	and.w	r3, r3, #8
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d009      	beq.n	800bc3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bc26:	4b12      	ldr	r3, [pc, #72]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	490e      	ldr	r1, [pc, #56]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bc3a:	f000 f821 	bl	800bc80 <HAL_RCC_GetSysClockFreq>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	4b0b      	ldr	r3, [pc, #44]	; (800bc70 <HAL_RCC_ClockConfig+0x1c8>)
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	091b      	lsrs	r3, r3, #4
 800bc46:	f003 030f 	and.w	r3, r3, #15
 800bc4a:	490a      	ldr	r1, [pc, #40]	; (800bc74 <HAL_RCC_ClockConfig+0x1cc>)
 800bc4c:	5ccb      	ldrb	r3, [r1, r3]
 800bc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc52:	4a09      	ldr	r2, [pc, #36]	; (800bc78 <HAL_RCC_ClockConfig+0x1d0>)
 800bc54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bc56:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <HAL_RCC_ClockConfig+0x1d4>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f7 ffae 	bl	8003bbc <HAL_InitTick>

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	40023c00 	.word	0x40023c00
 800bc70:	40023800 	.word	0x40023800
 800bc74:	08015560 	.word	0x08015560
 800bc78:	20000008 	.word	0x20000008
 800bc7c:	2000000c 	.word	0x2000000c

0800bc80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc80:	b5b0      	push	{r4, r5, r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bc86:	2100      	movs	r1, #0
 800bc88:	6079      	str	r1, [r7, #4]
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	60f9      	str	r1, [r7, #12]
 800bc8e:	2100      	movs	r1, #0
 800bc90:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800bc92:	2100      	movs	r1, #0
 800bc94:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc96:	4952      	ldr	r1, [pc, #328]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800bc98:	6889      	ldr	r1, [r1, #8]
 800bc9a:	f001 010c 	and.w	r1, r1, #12
 800bc9e:	2908      	cmp	r1, #8
 800bca0:	d00d      	beq.n	800bcbe <HAL_RCC_GetSysClockFreq+0x3e>
 800bca2:	2908      	cmp	r1, #8
 800bca4:	f200 8094 	bhi.w	800bdd0 <HAL_RCC_GetSysClockFreq+0x150>
 800bca8:	2900      	cmp	r1, #0
 800bcaa:	d002      	beq.n	800bcb2 <HAL_RCC_GetSysClockFreq+0x32>
 800bcac:	2904      	cmp	r1, #4
 800bcae:	d003      	beq.n	800bcb8 <HAL_RCC_GetSysClockFreq+0x38>
 800bcb0:	e08e      	b.n	800bdd0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bcb2:	4b4c      	ldr	r3, [pc, #304]	; (800bde4 <HAL_RCC_GetSysClockFreq+0x164>)
 800bcb4:	60bb      	str	r3, [r7, #8]
      break;
 800bcb6:	e08e      	b.n	800bdd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bcb8:	4b4b      	ldr	r3, [pc, #300]	; (800bde8 <HAL_RCC_GetSysClockFreq+0x168>)
 800bcba:	60bb      	str	r3, [r7, #8]
      break;
 800bcbc:	e08b      	b.n	800bdd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bcbe:	4948      	ldr	r1, [pc, #288]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800bcc0:	6849      	ldr	r1, [r1, #4]
 800bcc2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800bcc6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bcc8:	4945      	ldr	r1, [pc, #276]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800bcca:	6849      	ldr	r1, [r1, #4]
 800bccc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800bcd0:	2900      	cmp	r1, #0
 800bcd2:	d024      	beq.n	800bd1e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bcd4:	4942      	ldr	r1, [pc, #264]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800bcd6:	6849      	ldr	r1, [r1, #4]
 800bcd8:	0989      	lsrs	r1, r1, #6
 800bcda:	4608      	mov	r0, r1
 800bcdc:	f04f 0100 	mov.w	r1, #0
 800bce0:	f240 14ff 	movw	r4, #511	; 0x1ff
 800bce4:	f04f 0500 	mov.w	r5, #0
 800bce8:	ea00 0204 	and.w	r2, r0, r4
 800bcec:	ea01 0305 	and.w	r3, r1, r5
 800bcf0:	493d      	ldr	r1, [pc, #244]	; (800bde8 <HAL_RCC_GetSysClockFreq+0x168>)
 800bcf2:	fb01 f003 	mul.w	r0, r1, r3
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	fb01 f102 	mul.w	r1, r1, r2
 800bcfc:	1844      	adds	r4, r0, r1
 800bcfe:	493a      	ldr	r1, [pc, #232]	; (800bde8 <HAL_RCC_GetSysClockFreq+0x168>)
 800bd00:	fba2 0101 	umull	r0, r1, r2, r1
 800bd04:	1863      	adds	r3, r4, r1
 800bd06:	4619      	mov	r1, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f04f 0300 	mov.w	r3, #0
 800bd10:	f7f4 fb4e 	bl	80003b0 <__aeabi_uldivmod>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4613      	mov	r3, r2
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	e04a      	b.n	800bdb4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd1e:	4b30      	ldr	r3, [pc, #192]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	099b      	lsrs	r3, r3, #6
 800bd24:	461a      	mov	r2, r3
 800bd26:	f04f 0300 	mov.w	r3, #0
 800bd2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bd2e:	f04f 0100 	mov.w	r1, #0
 800bd32:	ea02 0400 	and.w	r4, r2, r0
 800bd36:	ea03 0501 	and.w	r5, r3, r1
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f04f 0200 	mov.w	r2, #0
 800bd42:	f04f 0300 	mov.w	r3, #0
 800bd46:	014b      	lsls	r3, r1, #5
 800bd48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bd4c:	0142      	lsls	r2, r0, #5
 800bd4e:	4610      	mov	r0, r2
 800bd50:	4619      	mov	r1, r3
 800bd52:	1b00      	subs	r0, r0, r4
 800bd54:	eb61 0105 	sbc.w	r1, r1, r5
 800bd58:	f04f 0200 	mov.w	r2, #0
 800bd5c:	f04f 0300 	mov.w	r3, #0
 800bd60:	018b      	lsls	r3, r1, #6
 800bd62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bd66:	0182      	lsls	r2, r0, #6
 800bd68:	1a12      	subs	r2, r2, r0
 800bd6a:	eb63 0301 	sbc.w	r3, r3, r1
 800bd6e:	f04f 0000 	mov.w	r0, #0
 800bd72:	f04f 0100 	mov.w	r1, #0
 800bd76:	00d9      	lsls	r1, r3, #3
 800bd78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd7c:	00d0      	lsls	r0, r2, #3
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	1912      	adds	r2, r2, r4
 800bd84:	eb45 0303 	adc.w	r3, r5, r3
 800bd88:	f04f 0000 	mov.w	r0, #0
 800bd8c:	f04f 0100 	mov.w	r1, #0
 800bd90:	0299      	lsls	r1, r3, #10
 800bd92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bd96:	0290      	lsls	r0, r2, #10
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	4619      	mov	r1, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f04f 0300 	mov.w	r3, #0
 800bda8:	f7f4 fb02 	bl	80003b0 <__aeabi_uldivmod>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x160>)
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	0c1b      	lsrs	r3, r3, #16
 800bdba:	f003 0303 	and.w	r3, r3, #3
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdcc:	60bb      	str	r3, [r7, #8]
      break;
 800bdce:	e002      	b.n	800bdd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bdd0:	4b04      	ldr	r3, [pc, #16]	; (800bde4 <HAL_RCC_GetSysClockFreq+0x164>)
 800bdd2:	60bb      	str	r3, [r7, #8]
      break;
 800bdd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bdd6:	68bb      	ldr	r3, [r7, #8]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bdb0      	pop	{r4, r5, r7, pc}
 800bde0:	40023800 	.word	0x40023800
 800bde4:	00f42400 	.word	0x00f42400
 800bde8:	017d7840 	.word	0x017d7840

0800bdec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bdf0:	4b03      	ldr	r3, [pc, #12]	; (800be00 <HAL_RCC_GetHCLKFreq+0x14>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	20000008 	.word	0x20000008

0800be04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800be08:	f7ff fff0 	bl	800bdec <HAL_RCC_GetHCLKFreq>
 800be0c:	4602      	mov	r2, r0
 800be0e:	4b05      	ldr	r3, [pc, #20]	; (800be24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	0a9b      	lsrs	r3, r3, #10
 800be14:	f003 0307 	and.w	r3, r3, #7
 800be18:	4903      	ldr	r1, [pc, #12]	; (800be28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800be1a:	5ccb      	ldrb	r3, [r1, r3]
 800be1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be20:	4618      	mov	r0, r3
 800be22:	bd80      	pop	{r7, pc}
 800be24:	40023800 	.word	0x40023800
 800be28:	08015570 	.word	0x08015570

0800be2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800be30:	f7ff ffdc 	bl	800bdec <HAL_RCC_GetHCLKFreq>
 800be34:	4602      	mov	r2, r0
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <HAL_RCC_GetPCLK2Freq+0x20>)
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	0b5b      	lsrs	r3, r3, #13
 800be3c:	f003 0307 	and.w	r3, r3, #7
 800be40:	4903      	ldr	r1, [pc, #12]	; (800be50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be42:	5ccb      	ldrb	r3, [r1, r3]
 800be44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be48:	4618      	mov	r0, r3
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	40023800 	.word	0x40023800
 800be50:	08015570 	.word	0x08015570

0800be54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	220f      	movs	r2, #15
 800be62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800be64:	4b12      	ldr	r3, [pc, #72]	; (800beb0 <HAL_RCC_GetClockConfig+0x5c>)
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f003 0203 	and.w	r2, r3, #3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800be70:	4b0f      	ldr	r3, [pc, #60]	; (800beb0 <HAL_RCC_GetClockConfig+0x5c>)
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800be7c:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <HAL_RCC_GetClockConfig+0x5c>)
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800be88:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <HAL_RCC_GetClockConfig+0x5c>)
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	08db      	lsrs	r3, r3, #3
 800be8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800be96:	4b07      	ldr	r3, [pc, #28]	; (800beb4 <HAL_RCC_GetClockConfig+0x60>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 020f 	and.w	r2, r3, #15
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	601a      	str	r2, [r3, #0]
}
 800bea2:	bf00      	nop
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	40023800 	.word	0x40023800
 800beb4:	40023c00 	.word	0x40023c00

0800beb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bed0:	2300      	movs	r3, #0
 800bed2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d012      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bee0:	4b69      	ldr	r3, [pc, #420]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	4a68      	ldr	r2, [pc, #416]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bee6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800beea:	6093      	str	r3, [r2, #8]
 800beec:	4b66      	ldr	r3, [pc, #408]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef4:	4964      	ldr	r1, [pc, #400]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d101      	bne.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bf02:	2301      	movs	r3, #1
 800bf04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d017      	beq.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf12:	4b5d      	ldr	r3, [pc, #372]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf20:	4959      	ldr	r1, [pc, #356]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf30:	d101      	bne.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bf32:	2301      	movs	r3, #1
 800bf34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d101      	bne.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d017      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bf4e:	4b4e      	ldr	r3, [pc, #312]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5c:	494a      	ldr	r1, [pc, #296]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf6c:	d101      	bne.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d101      	bne.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0320 	and.w	r3, r3, #32
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f000 808b 	beq.w	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf9c:	4b3a      	ldr	r3, [pc, #232]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa0:	4a39      	ldr	r2, [pc, #228]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfa6:	6413      	str	r3, [r2, #64]	; 0x40
 800bfa8:	4b37      	ldr	r3, [pc, #220]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfb0:	60bb      	str	r3, [r7, #8]
 800bfb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bfb4:	4b35      	ldr	r3, [pc, #212]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a34      	ldr	r2, [pc, #208]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bfba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfc0:	f7fd f846 	bl	8009050 <HAL_GetTick>
 800bfc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bfc6:	e008      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfc8:	f7fd f842 	bl	8009050 <HAL_GetTick>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	2b64      	cmp	r3, #100	; 0x64
 800bfd4:	d901      	bls.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	e38f      	b.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bfda:	4b2c      	ldr	r3, [pc, #176]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d0f0      	beq.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bfe6:	4b28      	ldr	r3, [pc, #160]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d035      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	429a      	cmp	r2, r3
 800c002:	d02e      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c004:	4b20      	ldr	r3, [pc, #128]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c00c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c00e:	4b1e      	ldr	r3, [pc, #120]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c012:	4a1d      	ldr	r2, [pc, #116]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c018:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c01a:	4b1b      	ldr	r3, [pc, #108]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c01e:	4a1a      	ldr	r2, [pc, #104]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c024:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c026:	4a18      	ldr	r2, [pc, #96]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c02c:	4b16      	ldr	r3, [pc, #88]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b01      	cmp	r3, #1
 800c036:	d114      	bne.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c038:	f7fd f80a 	bl	8009050 <HAL_GetTick>
 800c03c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c03e:	e00a      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c040:	f7fd f806 	bl	8009050 <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c04e:	4293      	cmp	r3, r2
 800c050:	d901      	bls.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c052:	2303      	movs	r3, #3
 800c054:	e351      	b.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c056:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d0ee      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c06e:	d111      	bne.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c07c:	4b04      	ldr	r3, [pc, #16]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c07e:	400b      	ands	r3, r1
 800c080:	4901      	ldr	r1, [pc, #4]	; (800c088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c082:	4313      	orrs	r3, r2
 800c084:	608b      	str	r3, [r1, #8]
 800c086:	e00b      	b.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c088:	40023800 	.word	0x40023800
 800c08c:	40007000 	.word	0x40007000
 800c090:	0ffffcff 	.word	0x0ffffcff
 800c094:	4bb3      	ldr	r3, [pc, #716]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	4ab2      	ldr	r2, [pc, #712]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c09a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c09e:	6093      	str	r3, [r2, #8]
 800c0a0:	4bb0      	ldr	r3, [pc, #704]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0ac:	49ad      	ldr	r1, [pc, #692]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f003 0310 	and.w	r3, r3, #16
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d010      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0be:	4ba9      	ldr	r3, [pc, #676]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0c4:	4aa7      	ldr	r2, [pc, #668]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c0ce:	4ba5      	ldr	r3, [pc, #660]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d8:	49a2      	ldr	r1, [pc, #648]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00a      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c0ec:	4b9d      	ldr	r3, [pc, #628]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0fa:	499a      	ldr	r1, [pc, #616]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00a      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c10e:	4b95      	ldr	r3, [pc, #596]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c11c:	4991      	ldr	r1, [pc, #580]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c11e:	4313      	orrs	r3, r2
 800c120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00a      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c130:	4b8c      	ldr	r3, [pc, #560]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c13e:	4989      	ldr	r1, [pc, #548]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c140:	4313      	orrs	r3, r2
 800c142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00a      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c152:	4b84      	ldr	r3, [pc, #528]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c158:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c160:	4980      	ldr	r1, [pc, #512]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c162:	4313      	orrs	r3, r2
 800c164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00a      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c174:	4b7b      	ldr	r3, [pc, #492]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17a:	f023 0203 	bic.w	r2, r3, #3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c182:	4978      	ldr	r1, [pc, #480]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c184:	4313      	orrs	r3, r2
 800c186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00a      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c196:	4b73      	ldr	r3, [pc, #460]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c19c:	f023 020c 	bic.w	r2, r3, #12
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1a4:	496f      	ldr	r1, [pc, #444]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00a      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c1b8:	4b6a      	ldr	r3, [pc, #424]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c6:	4967      	ldr	r1, [pc, #412]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00a      	beq.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c1da:	4b62      	ldr	r3, [pc, #392]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1e8:	495e      	ldr	r1, [pc, #376]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00a      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c1fc:	4b59      	ldr	r3, [pc, #356]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c20a:	4956      	ldr	r1, [pc, #344]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c21e:	4b51      	ldr	r3, [pc, #324]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c224:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c22c:	494d      	ldr	r1, [pc, #308]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c240:	4b48      	ldr	r3, [pc, #288]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c246:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c24e:	4945      	ldr	r1, [pc, #276]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c250:	4313      	orrs	r3, r2
 800c252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00a      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c262:	4b40      	ldr	r3, [pc, #256]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c270:	493c      	ldr	r1, [pc, #240]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c272:	4313      	orrs	r3, r2
 800c274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00a      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c284:	4b37      	ldr	r3, [pc, #220]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c28a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c292:	4934      	ldr	r1, [pc, #208]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c294:	4313      	orrs	r3, r2
 800c296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d011      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c2a6:	4b2f      	ldr	r3, [pc, #188]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2b4:	492b      	ldr	r1, [pc, #172]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2c4:	d101      	bne.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0308 	and.w	r3, r3, #8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00a      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c2e6:	4b1f      	ldr	r3, [pc, #124]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2f4:	491b      	ldr	r1, [pc, #108]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c308:	4b16      	ldr	r3, [pc, #88]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c30e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c318:	4912      	ldr	r1, [pc, #72]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c32c:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c332:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c33c:	4909      	ldr	r1, [pc, #36]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c33e:	4313      	orrs	r3, r2
 800c340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00f      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c350:	4b04      	ldr	r3, [pc, #16]	; (800c364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c356:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c360:	e002      	b.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800c362:	bf00      	nop
 800c364:	40023800 	.word	0x40023800
 800c368:	4986      	ldr	r1, [pc, #536]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c37c:	4b81      	ldr	r3, [pc, #516]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c382:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c38c:	497d      	ldr	r1, [pc, #500]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c38e:	4313      	orrs	r3, r2
 800c390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d006      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 80d6 	beq.w	800c554 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c3a8:	4b76      	ldr	r3, [pc, #472]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a75      	ldr	r2, [pc, #468]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c3ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3b4:	f7fc fe4c 	bl	8009050 <HAL_GetTick>
 800c3b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3ba:	e008      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c3bc:	f7fc fe48 	bl	8009050 <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b64      	cmp	r3, #100	; 0x64
 800c3c8:	d901      	bls.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e195      	b.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3ce:	4b6d      	ldr	r3, [pc, #436]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1f0      	bne.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d021      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x572>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d11d      	bne.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c3ee:	4b65      	ldr	r3, [pc, #404]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3f4:	0c1b      	lsrs	r3, r3, #16
 800c3f6:	f003 0303 	and.w	r3, r3, #3
 800c3fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c3fc:	4b61      	ldr	r3, [pc, #388]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c3fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c402:	0e1b      	lsrs	r3, r3, #24
 800c404:	f003 030f 	and.w	r3, r3, #15
 800c408:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	019a      	lsls	r2, r3, #6
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	041b      	lsls	r3, r3, #16
 800c414:	431a      	orrs	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	061b      	lsls	r3, r3, #24
 800c41a:	431a      	orrs	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	071b      	lsls	r3, r3, #28
 800c422:	4958      	ldr	r1, [pc, #352]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c424:	4313      	orrs	r3, r2
 800c426:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d004      	beq.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c43a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c43e:	d00a      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d02e      	beq.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c454:	d129      	bne.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c456:	4b4b      	ldr	r3, [pc, #300]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c45c:	0c1b      	lsrs	r3, r3, #16
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c464:	4b47      	ldr	r3, [pc, #284]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c46a:	0f1b      	lsrs	r3, r3, #28
 800c46c:	f003 0307 	and.w	r3, r3, #7
 800c470:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	019a      	lsls	r2, r3, #6
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	041b      	lsls	r3, r3, #16
 800c47c:	431a      	orrs	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	061b      	lsls	r3, r3, #24
 800c484:	431a      	orrs	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	071b      	lsls	r3, r3, #28
 800c48a:	493e      	ldr	r1, [pc, #248]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c48c:	4313      	orrs	r3, r2
 800c48e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c492:	4b3c      	ldr	r3, [pc, #240]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c498:	f023 021f 	bic.w	r2, r3, #31
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	4938      	ldr	r1, [pc, #224]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d01d      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c4b6:	4b33      	ldr	r3, [pc, #204]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4bc:	0e1b      	lsrs	r3, r3, #24
 800c4be:	f003 030f 	and.w	r3, r3, #15
 800c4c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c4c4:	4b2f      	ldr	r3, [pc, #188]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ca:	0f1b      	lsrs	r3, r3, #28
 800c4cc:	f003 0307 	and.w	r3, r3, #7
 800c4d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	019a      	lsls	r2, r3, #6
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	041b      	lsls	r3, r3, #16
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	061b      	lsls	r3, r3, #24
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	071b      	lsls	r3, r3, #28
 800c4ea:	4926      	ldr	r1, [pc, #152]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d011      	beq.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	019a      	lsls	r2, r3, #6
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	041b      	lsls	r3, r3, #16
 800c50a:	431a      	orrs	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	061b      	lsls	r3, r3, #24
 800c512:	431a      	orrs	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	071b      	lsls	r3, r3, #28
 800c51a:	491a      	ldr	r1, [pc, #104]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c51c:	4313      	orrs	r3, r2
 800c51e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c522:	4b18      	ldr	r3, [pc, #96]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a17      	ldr	r2, [pc, #92]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c52c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c52e:	f7fc fd8f 	bl	8009050 <HAL_GetTick>
 800c532:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c534:	e008      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c536:	f7fc fd8b 	bl	8009050 <HAL_GetTick>
 800c53a:	4602      	mov	r2, r0
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	2b64      	cmp	r3, #100	; 0x64
 800c542:	d901      	bls.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e0d8      	b.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c548:	4b0e      	ldr	r3, [pc, #56]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c550:	2b00      	cmp	r3, #0
 800c552:	d0f0      	beq.n	800c536 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	2b01      	cmp	r3, #1
 800c558:	f040 80ce 	bne.w	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c55c:	4b09      	ldr	r3, [pc, #36]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a08      	ldr	r2, [pc, #32]	; (800c584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c568:	f7fc fd72 	bl	8009050 <HAL_GetTick>
 800c56c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c56e:	e00b      	b.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c570:	f7fc fd6e 	bl	8009050 <HAL_GetTick>
 800c574:	4602      	mov	r2, r0
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	2b64      	cmp	r3, #100	; 0x64
 800c57c:	d904      	bls.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c57e:	2303      	movs	r3, #3
 800c580:	e0bb      	b.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c582:	bf00      	nop
 800c584:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c588:	4b5e      	ldr	r3, [pc, #376]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c594:	d0ec      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d003      	beq.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d009      	beq.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d02e      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d12a      	bne.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c5be:	4b51      	ldr	r3, [pc, #324]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5c4:	0c1b      	lsrs	r3, r3, #16
 800c5c6:	f003 0303 	and.w	r3, r3, #3
 800c5ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c5cc:	4b4d      	ldr	r3, [pc, #308]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d2:	0f1b      	lsrs	r3, r3, #28
 800c5d4:	f003 0307 	and.w	r3, r3, #7
 800c5d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	019a      	lsls	r2, r3, #6
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	041b      	lsls	r3, r3, #16
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	061b      	lsls	r3, r3, #24
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	071b      	lsls	r3, r3, #28
 800c5f2:	4944      	ldr	r1, [pc, #272]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c5fa:	4b42      	ldr	r3, [pc, #264]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c5fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c600:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c608:	3b01      	subs	r3, #1
 800c60a:	021b      	lsls	r3, r3, #8
 800c60c:	493d      	ldr	r1, [pc, #244]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c60e:	4313      	orrs	r3, r2
 800c610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d022      	beq.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c628:	d11d      	bne.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c62a:	4b36      	ldr	r3, [pc, #216]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c630:	0e1b      	lsrs	r3, r3, #24
 800c632:	f003 030f 	and.w	r3, r3, #15
 800c636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c638:	4b32      	ldr	r3, [pc, #200]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c63e:	0f1b      	lsrs	r3, r3, #28
 800c640:	f003 0307 	and.w	r3, r3, #7
 800c644:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	019a      	lsls	r2, r3, #6
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a1b      	ldr	r3, [r3, #32]
 800c650:	041b      	lsls	r3, r3, #16
 800c652:	431a      	orrs	r2, r3
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	061b      	lsls	r3, r3, #24
 800c658:	431a      	orrs	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	071b      	lsls	r3, r3, #28
 800c65e:	4929      	ldr	r1, [pc, #164]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c660:	4313      	orrs	r3, r2
 800c662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 0308 	and.w	r3, r3, #8
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d028      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c672:	4b24      	ldr	r3, [pc, #144]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c678:	0e1b      	lsrs	r3, r3, #24
 800c67a:	f003 030f 	and.w	r3, r3, #15
 800c67e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c680:	4b20      	ldr	r3, [pc, #128]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c686:	0c1b      	lsrs	r3, r3, #16
 800c688:	f003 0303 	and.w	r3, r3, #3
 800c68c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	019a      	lsls	r2, r3, #6
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	041b      	lsls	r3, r3, #16
 800c698:	431a      	orrs	r2, r3
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	061b      	lsls	r3, r3, #24
 800c69e:	431a      	orrs	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	071b      	lsls	r3, r3, #28
 800c6a6:	4917      	ldr	r1, [pc, #92]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c6ae:	4b15      	ldr	r3, [pc, #84]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	4911      	ldr	r1, [pc, #68]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c6c4:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a0e      	ldr	r2, [pc, #56]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6d0:	f7fc fcbe 	bl	8009050 <HAL_GetTick>
 800c6d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c6d6:	e008      	b.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c6d8:	f7fc fcba 	bl	8009050 <HAL_GetTick>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	2b64      	cmp	r3, #100	; 0x64
 800c6e4:	d901      	bls.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e007      	b.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f6:	d1ef      	bne.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3720      	adds	r7, #32
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	40023800 	.word	0x40023800

0800c708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	e049      	b.n	800c7ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7f7 f9be 	bl	8003ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3304      	adds	r3, #4
 800c744:	4619      	mov	r1, r3
 800c746:	4610      	mov	r0, r2
 800c748:	f000 fac0 	bl	800cccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d001      	beq.n	800c7d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e054      	b.n	800c87a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68da      	ldr	r2, [r3, #12]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f042 0201 	orr.w	r2, r2, #1
 800c7e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a26      	ldr	r2, [pc, #152]	; (800c888 <HAL_TIM_Base_Start_IT+0xd0>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d022      	beq.n	800c838 <HAL_TIM_Base_Start_IT+0x80>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7fa:	d01d      	beq.n	800c838 <HAL_TIM_Base_Start_IT+0x80>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a22      	ldr	r2, [pc, #136]	; (800c88c <HAL_TIM_Base_Start_IT+0xd4>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d018      	beq.n	800c838 <HAL_TIM_Base_Start_IT+0x80>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a21      	ldr	r2, [pc, #132]	; (800c890 <HAL_TIM_Base_Start_IT+0xd8>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d013      	beq.n	800c838 <HAL_TIM_Base_Start_IT+0x80>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a1f      	ldr	r2, [pc, #124]	; (800c894 <HAL_TIM_Base_Start_IT+0xdc>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d00e      	beq.n	800c838 <HAL_TIM_Base_Start_IT+0x80>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a1e      	ldr	r2, [pc, #120]	; (800c898 <HAL_TIM_Base_Start_IT+0xe0>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d009      	beq.n	800c838 <HAL_TIM_Base_Start_IT+0x80>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a1c      	ldr	r2, [pc, #112]	; (800c89c <HAL_TIM_Base_Start_IT+0xe4>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d004      	beq.n	800c838 <HAL_TIM_Base_Start_IT+0x80>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a1b      	ldr	r2, [pc, #108]	; (800c8a0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d115      	bne.n	800c864 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	4b19      	ldr	r3, [pc, #100]	; (800c8a4 <HAL_TIM_Base_Start_IT+0xec>)
 800c840:	4013      	ands	r3, r2
 800c842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b06      	cmp	r3, #6
 800c848:	d015      	beq.n	800c876 <HAL_TIM_Base_Start_IT+0xbe>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c850:	d011      	beq.n	800c876 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0201 	orr.w	r2, r2, #1
 800c860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c862:	e008      	b.n	800c876 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f042 0201 	orr.w	r2, r2, #1
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	e000      	b.n	800c878 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	40010000 	.word	0x40010000
 800c88c:	40000400 	.word	0x40000400
 800c890:	40000800 	.word	0x40000800
 800c894:	40000c00 	.word	0x40000c00
 800c898:	40010400 	.word	0x40010400
 800c89c:	40014000 	.word	0x40014000
 800c8a0:	40001800 	.word	0x40001800
 800c8a4:	00010007 	.word	0x00010007

0800c8a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d122      	bne.n	800c904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f003 0302 	and.w	r3, r3, #2
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d11b      	bne.n	800c904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f06f 0202 	mvn.w	r2, #2
 800c8d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	f003 0303 	and.w	r3, r3, #3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f9d0 	bl	800cc90 <HAL_TIM_IC_CaptureCallback>
 800c8f0:	e005      	b.n	800c8fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 f9c2 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f9d3 	bl	800cca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	f003 0304 	and.w	r3, r3, #4
 800c90e:	2b04      	cmp	r3, #4
 800c910:	d122      	bne.n	800c958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f003 0304 	and.w	r3, r3, #4
 800c91c:	2b04      	cmp	r3, #4
 800c91e:	d11b      	bne.n	800c958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f06f 0204 	mvn.w	r2, #4
 800c928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2202      	movs	r2, #2
 800c92e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d003      	beq.n	800c946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f9a6 	bl	800cc90 <HAL_TIM_IC_CaptureCallback>
 800c944:	e005      	b.n	800c952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f998 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f9a9 	bl	800cca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	f003 0308 	and.w	r3, r3, #8
 800c962:	2b08      	cmp	r3, #8
 800c964:	d122      	bne.n	800c9ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	f003 0308 	and.w	r3, r3, #8
 800c970:	2b08      	cmp	r3, #8
 800c972:	d11b      	bne.n	800c9ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f06f 0208 	mvn.w	r2, #8
 800c97c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2204      	movs	r2, #4
 800c982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	f003 0303 	and.w	r3, r3, #3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f97c 	bl	800cc90 <HAL_TIM_IC_CaptureCallback>
 800c998:	e005      	b.n	800c9a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f96e 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f97f 	bl	800cca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	f003 0310 	and.w	r3, r3, #16
 800c9b6:	2b10      	cmp	r3, #16
 800c9b8:	d122      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	f003 0310 	and.w	r3, r3, #16
 800c9c4:	2b10      	cmp	r3, #16
 800c9c6:	d11b      	bne.n	800ca00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f06f 0210 	mvn.w	r2, #16
 800c9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2208      	movs	r2, #8
 800c9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	69db      	ldr	r3, [r3, #28]
 800c9de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d003      	beq.n	800c9ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f952 	bl	800cc90 <HAL_TIM_IC_CaptureCallback>
 800c9ec:	e005      	b.n	800c9fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 f944 	bl	800cc7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f955 	bl	800cca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d10e      	bne.n	800ca2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d107      	bne.n	800ca2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f06f 0201 	mvn.w	r2, #1
 800ca24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7f5 ff3e 	bl	80028a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca36:	2b80      	cmp	r3, #128	; 0x80
 800ca38:	d10e      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca44:	2b80      	cmp	r3, #128	; 0x80
 800ca46:	d107      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fb0c 	bl	800d070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca66:	d10e      	bne.n	800ca86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca72:	2b80      	cmp	r3, #128	; 0x80
 800ca74:	d107      	bne.n	800ca86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 faff 	bl	800d084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca90:	2b40      	cmp	r3, #64	; 0x40
 800ca92:	d10e      	bne.n	800cab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9e:	2b40      	cmp	r3, #64	; 0x40
 800caa0:	d107      	bne.n	800cab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800caaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f903 	bl	800ccb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	f003 0320 	and.w	r3, r3, #32
 800cabc:	2b20      	cmp	r3, #32
 800cabe:	d10e      	bne.n	800cade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	f003 0320 	and.w	r3, r3, #32
 800caca:	2b20      	cmp	r3, #32
 800cacc:	d107      	bne.n	800cade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f06f 0220 	mvn.w	r2, #32
 800cad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fabf 	bl	800d05c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cade:	bf00      	nop
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
	...

0800cae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d101      	bne.n	800cb04 <HAL_TIM_ConfigClockSource+0x1c>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e0b4      	b.n	800cc6e <HAL_TIM_ConfigClockSource+0x186>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	4b56      	ldr	r3, [pc, #344]	; (800cc78 <HAL_TIM_ConfigClockSource+0x190>)
 800cb20:	4013      	ands	r3, r2
 800cb22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb3c:	d03e      	beq.n	800cbbc <HAL_TIM_ConfigClockSource+0xd4>
 800cb3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb42:	f200 8087 	bhi.w	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb4a:	f000 8086 	beq.w	800cc5a <HAL_TIM_ConfigClockSource+0x172>
 800cb4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb52:	d87f      	bhi.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb54:	2b70      	cmp	r3, #112	; 0x70
 800cb56:	d01a      	beq.n	800cb8e <HAL_TIM_ConfigClockSource+0xa6>
 800cb58:	2b70      	cmp	r3, #112	; 0x70
 800cb5a:	d87b      	bhi.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb5c:	2b60      	cmp	r3, #96	; 0x60
 800cb5e:	d050      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0x11a>
 800cb60:	2b60      	cmp	r3, #96	; 0x60
 800cb62:	d877      	bhi.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb64:	2b50      	cmp	r3, #80	; 0x50
 800cb66:	d03c      	beq.n	800cbe2 <HAL_TIM_ConfigClockSource+0xfa>
 800cb68:	2b50      	cmp	r3, #80	; 0x50
 800cb6a:	d873      	bhi.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb6c:	2b40      	cmp	r3, #64	; 0x40
 800cb6e:	d058      	beq.n	800cc22 <HAL_TIM_ConfigClockSource+0x13a>
 800cb70:	2b40      	cmp	r3, #64	; 0x40
 800cb72:	d86f      	bhi.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb74:	2b30      	cmp	r3, #48	; 0x30
 800cb76:	d064      	beq.n	800cc42 <HAL_TIM_ConfigClockSource+0x15a>
 800cb78:	2b30      	cmp	r3, #48	; 0x30
 800cb7a:	d86b      	bhi.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb7c:	2b20      	cmp	r3, #32
 800cb7e:	d060      	beq.n	800cc42 <HAL_TIM_ConfigClockSource+0x15a>
 800cb80:	2b20      	cmp	r3, #32
 800cb82:	d867      	bhi.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d05c      	beq.n	800cc42 <HAL_TIM_ConfigClockSource+0x15a>
 800cb88:	2b10      	cmp	r3, #16
 800cb8a:	d05a      	beq.n	800cc42 <HAL_TIM_ConfigClockSource+0x15a>
 800cb8c:	e062      	b.n	800cc54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6818      	ldr	r0, [r3, #0]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	6899      	ldr	r1, [r3, #8]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	685a      	ldr	r2, [r3, #4]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	f000 f9af 	bl	800cf00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cbb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	609a      	str	r2, [r3, #8]
      break;
 800cbba:	e04f      	b.n	800cc5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6818      	ldr	r0, [r3, #0]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	6899      	ldr	r1, [r3, #8]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f000 f998 	bl	800cf00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	689a      	ldr	r2, [r3, #8]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbde:	609a      	str	r2, [r3, #8]
      break;
 800cbe0:	e03c      	b.n	800cc5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6818      	ldr	r0, [r3, #0]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	6859      	ldr	r1, [r3, #4]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f000 f90c 	bl	800ce0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2150      	movs	r1, #80	; 0x50
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 f965 	bl	800ceca <TIM_ITRx_SetConfig>
      break;
 800cc00:	e02c      	b.n	800cc5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	6859      	ldr	r1, [r3, #4]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	f000 f92b 	bl	800ce6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2160      	movs	r1, #96	; 0x60
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 f955 	bl	800ceca <TIM_ITRx_SetConfig>
      break;
 800cc20:	e01c      	b.n	800cc5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	6859      	ldr	r1, [r3, #4]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	f000 f8ec 	bl	800ce0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2140      	movs	r1, #64	; 0x40
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 f945 	bl	800ceca <TIM_ITRx_SetConfig>
      break;
 800cc40:	e00c      	b.n	800cc5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	f000 f93c 	bl	800ceca <TIM_ITRx_SetConfig>
      break;
 800cc52:	e003      	b.n	800cc5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	73fb      	strb	r3, [r7, #15]
      break;
 800cc58:	e000      	b.n	800cc5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cc5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	fffeff88 	.word	0xfffeff88

0800cc7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a40      	ldr	r2, [pc, #256]	; (800cde0 <TIM_Base_SetConfig+0x114>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d013      	beq.n	800cd0c <TIM_Base_SetConfig+0x40>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccea:	d00f      	beq.n	800cd0c <TIM_Base_SetConfig+0x40>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a3d      	ldr	r2, [pc, #244]	; (800cde4 <TIM_Base_SetConfig+0x118>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d00b      	beq.n	800cd0c <TIM_Base_SetConfig+0x40>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a3c      	ldr	r2, [pc, #240]	; (800cde8 <TIM_Base_SetConfig+0x11c>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d007      	beq.n	800cd0c <TIM_Base_SetConfig+0x40>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a3b      	ldr	r2, [pc, #236]	; (800cdec <TIM_Base_SetConfig+0x120>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d003      	beq.n	800cd0c <TIM_Base_SetConfig+0x40>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a3a      	ldr	r2, [pc, #232]	; (800cdf0 <TIM_Base_SetConfig+0x124>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d108      	bne.n	800cd1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a2f      	ldr	r2, [pc, #188]	; (800cde0 <TIM_Base_SetConfig+0x114>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d02b      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd2c:	d027      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a2c      	ldr	r2, [pc, #176]	; (800cde4 <TIM_Base_SetConfig+0x118>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d023      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a2b      	ldr	r2, [pc, #172]	; (800cde8 <TIM_Base_SetConfig+0x11c>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d01f      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a2a      	ldr	r2, [pc, #168]	; (800cdec <TIM_Base_SetConfig+0x120>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d01b      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a29      	ldr	r2, [pc, #164]	; (800cdf0 <TIM_Base_SetConfig+0x124>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d017      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a28      	ldr	r2, [pc, #160]	; (800cdf4 <TIM_Base_SetConfig+0x128>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d013      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a27      	ldr	r2, [pc, #156]	; (800cdf8 <TIM_Base_SetConfig+0x12c>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d00f      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a26      	ldr	r2, [pc, #152]	; (800cdfc <TIM_Base_SetConfig+0x130>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d00b      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a25      	ldr	r2, [pc, #148]	; (800ce00 <TIM_Base_SetConfig+0x134>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d007      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a24      	ldr	r2, [pc, #144]	; (800ce04 <TIM_Base_SetConfig+0x138>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d003      	beq.n	800cd7e <TIM_Base_SetConfig+0xb2>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a23      	ldr	r2, [pc, #140]	; (800ce08 <TIM_Base_SetConfig+0x13c>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d108      	bne.n	800cd90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	689a      	ldr	r2, [r3, #8]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	4a0a      	ldr	r2, [pc, #40]	; (800cde0 <TIM_Base_SetConfig+0x114>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d003      	beq.n	800cdc4 <TIM_Base_SetConfig+0xf8>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4a0c      	ldr	r2, [pc, #48]	; (800cdf0 <TIM_Base_SetConfig+0x124>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d103      	bne.n	800cdcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	691a      	ldr	r2, [r3, #16]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	615a      	str	r2, [r3, #20]
}
 800cdd2:	bf00      	nop
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	40010000 	.word	0x40010000
 800cde4:	40000400 	.word	0x40000400
 800cde8:	40000800 	.word	0x40000800
 800cdec:	40000c00 	.word	0x40000c00
 800cdf0:	40010400 	.word	0x40010400
 800cdf4:	40014000 	.word	0x40014000
 800cdf8:	40014400 	.word	0x40014400
 800cdfc:	40014800 	.word	0x40014800
 800ce00:	40001800 	.word	0x40001800
 800ce04:	40001c00 	.word	0x40001c00
 800ce08:	40002000 	.word	0x40002000

0800ce0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6a1b      	ldr	r3, [r3, #32]
 800ce1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	f023 0201 	bic.w	r2, r3, #1
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	011b      	lsls	r3, r3, #4
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	f023 030a 	bic.w	r3, r3, #10
 800ce48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	697a      	ldr	r2, [r7, #20]
 800ce5c:	621a      	str	r2, [r3, #32]
}
 800ce5e:	bf00      	nop
 800ce60:	371c      	adds	r7, #28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b087      	sub	sp, #28
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	60f8      	str	r0, [r7, #12]
 800ce72:	60b9      	str	r1, [r7, #8]
 800ce74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6a1b      	ldr	r3, [r3, #32]
 800ce7a:	f023 0210 	bic.w	r2, r3, #16
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	699b      	ldr	r3, [r3, #24]
 800ce86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6a1b      	ldr	r3, [r3, #32]
 800ce8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	031b      	lsls	r3, r3, #12
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	011b      	lsls	r3, r3, #4
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	621a      	str	r2, [r3, #32]
}
 800cebe:	bf00      	nop
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ceca:	b480      	push	{r7}
 800cecc:	b085      	sub	sp, #20
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	f043 0307 	orr.w	r3, r3, #7
 800ceec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	609a      	str	r2, [r3, #8]
}
 800cef4:	bf00      	nop
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b087      	sub	sp, #28
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	021a      	lsls	r2, r3, #8
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	431a      	orrs	r2, r3
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	4313      	orrs	r3, r2
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	697a      	ldr	r2, [r7, #20]
 800cf32:	609a      	str	r2, [r3, #8]
}
 800cf34:	bf00      	nop
 800cf36:	371c      	adds	r7, #28
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d101      	bne.n	800cf58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf54:	2302      	movs	r3, #2
 800cf56:	e06d      	b.n	800d034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2202      	movs	r2, #2
 800cf64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a30      	ldr	r2, [pc, #192]	; (800d040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d004      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a2f      	ldr	r2, [pc, #188]	; (800d044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d108      	bne.n	800cf9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a20      	ldr	r2, [pc, #128]	; (800d040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d022      	beq.n	800d008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfca:	d01d      	beq.n	800d008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a1d      	ldr	r2, [pc, #116]	; (800d048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d018      	beq.n	800d008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a1c      	ldr	r2, [pc, #112]	; (800d04c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d013      	beq.n	800d008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a1a      	ldr	r2, [pc, #104]	; (800d050 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d00e      	beq.n	800d008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a15      	ldr	r2, [pc, #84]	; (800d044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d009      	beq.n	800d008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a16      	ldr	r2, [pc, #88]	; (800d054 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d004      	beq.n	800d008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a15      	ldr	r2, [pc, #84]	; (800d058 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d10c      	bne.n	800d022 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d00e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	4313      	orrs	r3, r2
 800d018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3714      	adds	r7, #20
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr
 800d040:	40010000 	.word	0x40010000
 800d044:	40010400 	.word	0x40010400
 800d048:	40000400 	.word	0x40000400
 800d04c:	40000800 	.word	0x40000800
 800d050:	40000c00 	.word	0x40000c00
 800d054:	40014000 	.word	0x40014000
 800d058:	40001800 	.word	0x40001800

0800d05c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e040      	b.n	800d12c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d106      	bne.n	800d0c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f6 fd1c 	bl	8003af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2224      	movs	r2, #36	; 0x24
 800d0c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f022 0201 	bic.w	r2, r2, #1
 800d0d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f8c0 	bl	800d25c <UART_SetConfig>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d101      	bne.n	800d0e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e022      	b.n	800d12c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fb16 	bl	800d720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689a      	ldr	r2, [r3, #8]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f042 0201 	orr.w	r2, r2, #1
 800d122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fb9d 	bl	800d864 <UART_CheckIdleState>
 800d12a:	4603      	mov	r3, r0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08a      	sub	sp, #40	; 0x28
 800d138:	af02      	add	r7, sp, #8
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	603b      	str	r3, [r7, #0]
 800d140:	4613      	mov	r3, r2
 800d142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d148:	2b20      	cmp	r3, #32
 800d14a:	f040 8081 	bne.w	800d250 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <HAL_UART_Transmit+0x26>
 800d154:	88fb      	ldrh	r3, [r7, #6]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e079      	b.n	800d252 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d164:	2b01      	cmp	r3, #1
 800d166:	d101      	bne.n	800d16c <HAL_UART_Transmit+0x38>
 800d168:	2302      	movs	r3, #2
 800d16a:	e072      	b.n	800d252 <HAL_UART_Transmit+0x11e>
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2221      	movs	r2, #33	; 0x21
 800d180:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d182:	f7fb ff65 	bl	8009050 <HAL_GetTick>
 800d186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	88fa      	ldrh	r2, [r7, #6]
 800d18c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	88fa      	ldrh	r2, [r7, #6]
 800d194:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1a0:	d108      	bne.n	800d1b4 <HAL_UART_Transmit+0x80>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d104      	bne.n	800d1b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	61bb      	str	r3, [r7, #24]
 800d1b2:	e003      	b.n	800d1bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d1c4:	e02c      	b.n	800d220 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2180      	movs	r1, #128	; 0x80
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 fb90 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e038      	b.n	800d252 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	3302      	adds	r3, #2
 800d1fa:	61bb      	str	r3, [r7, #24]
 800d1fc:	e007      	b.n	800d20e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	781a      	ldrb	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	3301      	adds	r3, #1
 800d20c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d214:	b29b      	uxth	r3, r3
 800d216:	3b01      	subs	r3, #1
 800d218:	b29a      	uxth	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d226:	b29b      	uxth	r3, r3
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1cc      	bne.n	800d1c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2200      	movs	r2, #0
 800d234:	2140      	movs	r1, #64	; 0x40
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 fb5d 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800d242:	2303      	movs	r3, #3
 800d244:	e005      	b.n	800d252 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2220      	movs	r2, #32
 800d24a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	e000      	b.n	800d252 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800d250:	2302      	movs	r3, #2
  }
}
 800d252:	4618      	mov	r0, r3
 800d254:	3720      	adds	r7, #32
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b088      	sub	sp, #32
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	689a      	ldr	r2, [r3, #8]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	431a      	orrs	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	695b      	ldr	r3, [r3, #20]
 800d276:	431a      	orrs	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	4ba7      	ldr	r3, [pc, #668]	; (800d524 <UART_SetConfig+0x2c8>)
 800d288:	4013      	ands	r3, r2
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	6979      	ldr	r1, [r7, #20]
 800d290:	430b      	orrs	r3, r1
 800d292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68da      	ldr	r2, [r3, #12]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6a1b      	ldr	r3, [r3, #32]
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a95      	ldr	r2, [pc, #596]	; (800d528 <UART_SetConfig+0x2cc>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d120      	bne.n	800d31a <UART_SetConfig+0xbe>
 800d2d8:	4b94      	ldr	r3, [pc, #592]	; (800d52c <UART_SetConfig+0x2d0>)
 800d2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2de:	f003 0303 	and.w	r3, r3, #3
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d816      	bhi.n	800d314 <UART_SetConfig+0xb8>
 800d2e6:	a201      	add	r2, pc, #4	; (adr r2, 800d2ec <UART_SetConfig+0x90>)
 800d2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ec:	0800d2fd 	.word	0x0800d2fd
 800d2f0:	0800d309 	.word	0x0800d309
 800d2f4:	0800d303 	.word	0x0800d303
 800d2f8:	0800d30f 	.word	0x0800d30f
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	77fb      	strb	r3, [r7, #31]
 800d300:	e14f      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d302:	2302      	movs	r3, #2
 800d304:	77fb      	strb	r3, [r7, #31]
 800d306:	e14c      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d308:	2304      	movs	r3, #4
 800d30a:	77fb      	strb	r3, [r7, #31]
 800d30c:	e149      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d30e:	2308      	movs	r3, #8
 800d310:	77fb      	strb	r3, [r7, #31]
 800d312:	e146      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d314:	2310      	movs	r3, #16
 800d316:	77fb      	strb	r3, [r7, #31]
 800d318:	e143      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a84      	ldr	r2, [pc, #528]	; (800d530 <UART_SetConfig+0x2d4>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d132      	bne.n	800d38a <UART_SetConfig+0x12e>
 800d324:	4b81      	ldr	r3, [pc, #516]	; (800d52c <UART_SetConfig+0x2d0>)
 800d326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d32a:	f003 030c 	and.w	r3, r3, #12
 800d32e:	2b0c      	cmp	r3, #12
 800d330:	d828      	bhi.n	800d384 <UART_SetConfig+0x128>
 800d332:	a201      	add	r2, pc, #4	; (adr r2, 800d338 <UART_SetConfig+0xdc>)
 800d334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d338:	0800d36d 	.word	0x0800d36d
 800d33c:	0800d385 	.word	0x0800d385
 800d340:	0800d385 	.word	0x0800d385
 800d344:	0800d385 	.word	0x0800d385
 800d348:	0800d379 	.word	0x0800d379
 800d34c:	0800d385 	.word	0x0800d385
 800d350:	0800d385 	.word	0x0800d385
 800d354:	0800d385 	.word	0x0800d385
 800d358:	0800d373 	.word	0x0800d373
 800d35c:	0800d385 	.word	0x0800d385
 800d360:	0800d385 	.word	0x0800d385
 800d364:	0800d385 	.word	0x0800d385
 800d368:	0800d37f 	.word	0x0800d37f
 800d36c:	2300      	movs	r3, #0
 800d36e:	77fb      	strb	r3, [r7, #31]
 800d370:	e117      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d372:	2302      	movs	r3, #2
 800d374:	77fb      	strb	r3, [r7, #31]
 800d376:	e114      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d378:	2304      	movs	r3, #4
 800d37a:	77fb      	strb	r3, [r7, #31]
 800d37c:	e111      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d37e:	2308      	movs	r3, #8
 800d380:	77fb      	strb	r3, [r7, #31]
 800d382:	e10e      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d384:	2310      	movs	r3, #16
 800d386:	77fb      	strb	r3, [r7, #31]
 800d388:	e10b      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a69      	ldr	r2, [pc, #420]	; (800d534 <UART_SetConfig+0x2d8>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d120      	bne.n	800d3d6 <UART_SetConfig+0x17a>
 800d394:	4b65      	ldr	r3, [pc, #404]	; (800d52c <UART_SetConfig+0x2d0>)
 800d396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d39a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d39e:	2b30      	cmp	r3, #48	; 0x30
 800d3a0:	d013      	beq.n	800d3ca <UART_SetConfig+0x16e>
 800d3a2:	2b30      	cmp	r3, #48	; 0x30
 800d3a4:	d814      	bhi.n	800d3d0 <UART_SetConfig+0x174>
 800d3a6:	2b20      	cmp	r3, #32
 800d3a8:	d009      	beq.n	800d3be <UART_SetConfig+0x162>
 800d3aa:	2b20      	cmp	r3, #32
 800d3ac:	d810      	bhi.n	800d3d0 <UART_SetConfig+0x174>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d002      	beq.n	800d3b8 <UART_SetConfig+0x15c>
 800d3b2:	2b10      	cmp	r3, #16
 800d3b4:	d006      	beq.n	800d3c4 <UART_SetConfig+0x168>
 800d3b6:	e00b      	b.n	800d3d0 <UART_SetConfig+0x174>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	77fb      	strb	r3, [r7, #31]
 800d3bc:	e0f1      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d3be:	2302      	movs	r3, #2
 800d3c0:	77fb      	strb	r3, [r7, #31]
 800d3c2:	e0ee      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d3c4:	2304      	movs	r3, #4
 800d3c6:	77fb      	strb	r3, [r7, #31]
 800d3c8:	e0eb      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d3ca:	2308      	movs	r3, #8
 800d3cc:	77fb      	strb	r3, [r7, #31]
 800d3ce:	e0e8      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d3d0:	2310      	movs	r3, #16
 800d3d2:	77fb      	strb	r3, [r7, #31]
 800d3d4:	e0e5      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a57      	ldr	r2, [pc, #348]	; (800d538 <UART_SetConfig+0x2dc>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d120      	bne.n	800d422 <UART_SetConfig+0x1c6>
 800d3e0:	4b52      	ldr	r3, [pc, #328]	; (800d52c <UART_SetConfig+0x2d0>)
 800d3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d3ea:	2bc0      	cmp	r3, #192	; 0xc0
 800d3ec:	d013      	beq.n	800d416 <UART_SetConfig+0x1ba>
 800d3ee:	2bc0      	cmp	r3, #192	; 0xc0
 800d3f0:	d814      	bhi.n	800d41c <UART_SetConfig+0x1c0>
 800d3f2:	2b80      	cmp	r3, #128	; 0x80
 800d3f4:	d009      	beq.n	800d40a <UART_SetConfig+0x1ae>
 800d3f6:	2b80      	cmp	r3, #128	; 0x80
 800d3f8:	d810      	bhi.n	800d41c <UART_SetConfig+0x1c0>
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d002      	beq.n	800d404 <UART_SetConfig+0x1a8>
 800d3fe:	2b40      	cmp	r3, #64	; 0x40
 800d400:	d006      	beq.n	800d410 <UART_SetConfig+0x1b4>
 800d402:	e00b      	b.n	800d41c <UART_SetConfig+0x1c0>
 800d404:	2300      	movs	r3, #0
 800d406:	77fb      	strb	r3, [r7, #31]
 800d408:	e0cb      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d40a:	2302      	movs	r3, #2
 800d40c:	77fb      	strb	r3, [r7, #31]
 800d40e:	e0c8      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d410:	2304      	movs	r3, #4
 800d412:	77fb      	strb	r3, [r7, #31]
 800d414:	e0c5      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d416:	2308      	movs	r3, #8
 800d418:	77fb      	strb	r3, [r7, #31]
 800d41a:	e0c2      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d41c:	2310      	movs	r3, #16
 800d41e:	77fb      	strb	r3, [r7, #31]
 800d420:	e0bf      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a45      	ldr	r2, [pc, #276]	; (800d53c <UART_SetConfig+0x2e0>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d125      	bne.n	800d478 <UART_SetConfig+0x21c>
 800d42c:	4b3f      	ldr	r3, [pc, #252]	; (800d52c <UART_SetConfig+0x2d0>)
 800d42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d43a:	d017      	beq.n	800d46c <UART_SetConfig+0x210>
 800d43c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d440:	d817      	bhi.n	800d472 <UART_SetConfig+0x216>
 800d442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d446:	d00b      	beq.n	800d460 <UART_SetConfig+0x204>
 800d448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d44c:	d811      	bhi.n	800d472 <UART_SetConfig+0x216>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <UART_SetConfig+0x1fe>
 800d452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d456:	d006      	beq.n	800d466 <UART_SetConfig+0x20a>
 800d458:	e00b      	b.n	800d472 <UART_SetConfig+0x216>
 800d45a:	2300      	movs	r3, #0
 800d45c:	77fb      	strb	r3, [r7, #31]
 800d45e:	e0a0      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d460:	2302      	movs	r3, #2
 800d462:	77fb      	strb	r3, [r7, #31]
 800d464:	e09d      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d466:	2304      	movs	r3, #4
 800d468:	77fb      	strb	r3, [r7, #31]
 800d46a:	e09a      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d46c:	2308      	movs	r3, #8
 800d46e:	77fb      	strb	r3, [r7, #31]
 800d470:	e097      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d472:	2310      	movs	r3, #16
 800d474:	77fb      	strb	r3, [r7, #31]
 800d476:	e094      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a30      	ldr	r2, [pc, #192]	; (800d540 <UART_SetConfig+0x2e4>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d125      	bne.n	800d4ce <UART_SetConfig+0x272>
 800d482:	4b2a      	ldr	r3, [pc, #168]	; (800d52c <UART_SetConfig+0x2d0>)
 800d484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d48c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d490:	d017      	beq.n	800d4c2 <UART_SetConfig+0x266>
 800d492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d496:	d817      	bhi.n	800d4c8 <UART_SetConfig+0x26c>
 800d498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d49c:	d00b      	beq.n	800d4b6 <UART_SetConfig+0x25a>
 800d49e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4a2:	d811      	bhi.n	800d4c8 <UART_SetConfig+0x26c>
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <UART_SetConfig+0x254>
 800d4a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4ac:	d006      	beq.n	800d4bc <UART_SetConfig+0x260>
 800d4ae:	e00b      	b.n	800d4c8 <UART_SetConfig+0x26c>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	77fb      	strb	r3, [r7, #31]
 800d4b4:	e075      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	77fb      	strb	r3, [r7, #31]
 800d4ba:	e072      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d4bc:	2304      	movs	r3, #4
 800d4be:	77fb      	strb	r3, [r7, #31]
 800d4c0:	e06f      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d4c2:	2308      	movs	r3, #8
 800d4c4:	77fb      	strb	r3, [r7, #31]
 800d4c6:	e06c      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d4c8:	2310      	movs	r3, #16
 800d4ca:	77fb      	strb	r3, [r7, #31]
 800d4cc:	e069      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4a1c      	ldr	r2, [pc, #112]	; (800d544 <UART_SetConfig+0x2e8>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d137      	bne.n	800d548 <UART_SetConfig+0x2ec>
 800d4d8:	4b14      	ldr	r3, [pc, #80]	; (800d52c <UART_SetConfig+0x2d0>)
 800d4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d4e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4e6:	d017      	beq.n	800d518 <UART_SetConfig+0x2bc>
 800d4e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4ec:	d817      	bhi.n	800d51e <UART_SetConfig+0x2c2>
 800d4ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4f2:	d00b      	beq.n	800d50c <UART_SetConfig+0x2b0>
 800d4f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4f8:	d811      	bhi.n	800d51e <UART_SetConfig+0x2c2>
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <UART_SetConfig+0x2aa>
 800d4fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d502:	d006      	beq.n	800d512 <UART_SetConfig+0x2b6>
 800d504:	e00b      	b.n	800d51e <UART_SetConfig+0x2c2>
 800d506:	2300      	movs	r3, #0
 800d508:	77fb      	strb	r3, [r7, #31]
 800d50a:	e04a      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d50c:	2302      	movs	r3, #2
 800d50e:	77fb      	strb	r3, [r7, #31]
 800d510:	e047      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d512:	2304      	movs	r3, #4
 800d514:	77fb      	strb	r3, [r7, #31]
 800d516:	e044      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d518:	2308      	movs	r3, #8
 800d51a:	77fb      	strb	r3, [r7, #31]
 800d51c:	e041      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d51e:	2310      	movs	r3, #16
 800d520:	77fb      	strb	r3, [r7, #31]
 800d522:	e03e      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d524:	efff69f3 	.word	0xefff69f3
 800d528:	40011000 	.word	0x40011000
 800d52c:	40023800 	.word	0x40023800
 800d530:	40004400 	.word	0x40004400
 800d534:	40004800 	.word	0x40004800
 800d538:	40004c00 	.word	0x40004c00
 800d53c:	40005000 	.word	0x40005000
 800d540:	40011400 	.word	0x40011400
 800d544:	40007800 	.word	0x40007800
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a71      	ldr	r2, [pc, #452]	; (800d714 <UART_SetConfig+0x4b8>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d125      	bne.n	800d59e <UART_SetConfig+0x342>
 800d552:	4b71      	ldr	r3, [pc, #452]	; (800d718 <UART_SetConfig+0x4bc>)
 800d554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d55c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d560:	d017      	beq.n	800d592 <UART_SetConfig+0x336>
 800d562:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d566:	d817      	bhi.n	800d598 <UART_SetConfig+0x33c>
 800d568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d56c:	d00b      	beq.n	800d586 <UART_SetConfig+0x32a>
 800d56e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d572:	d811      	bhi.n	800d598 <UART_SetConfig+0x33c>
 800d574:	2b00      	cmp	r3, #0
 800d576:	d003      	beq.n	800d580 <UART_SetConfig+0x324>
 800d578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d57c:	d006      	beq.n	800d58c <UART_SetConfig+0x330>
 800d57e:	e00b      	b.n	800d598 <UART_SetConfig+0x33c>
 800d580:	2300      	movs	r3, #0
 800d582:	77fb      	strb	r3, [r7, #31]
 800d584:	e00d      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d586:	2302      	movs	r3, #2
 800d588:	77fb      	strb	r3, [r7, #31]
 800d58a:	e00a      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d58c:	2304      	movs	r3, #4
 800d58e:	77fb      	strb	r3, [r7, #31]
 800d590:	e007      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d592:	2308      	movs	r3, #8
 800d594:	77fb      	strb	r3, [r7, #31]
 800d596:	e004      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d598:	2310      	movs	r3, #16
 800d59a:	77fb      	strb	r3, [r7, #31]
 800d59c:	e001      	b.n	800d5a2 <UART_SetConfig+0x346>
 800d59e:	2310      	movs	r3, #16
 800d5a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5aa:	d15a      	bne.n	800d662 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800d5ac:	7ffb      	ldrb	r3, [r7, #31]
 800d5ae:	2b08      	cmp	r3, #8
 800d5b0:	d827      	bhi.n	800d602 <UART_SetConfig+0x3a6>
 800d5b2:	a201      	add	r2, pc, #4	; (adr r2, 800d5b8 <UART_SetConfig+0x35c>)
 800d5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b8:	0800d5dd 	.word	0x0800d5dd
 800d5bc:	0800d5e5 	.word	0x0800d5e5
 800d5c0:	0800d5ed 	.word	0x0800d5ed
 800d5c4:	0800d603 	.word	0x0800d603
 800d5c8:	0800d5f3 	.word	0x0800d5f3
 800d5cc:	0800d603 	.word	0x0800d603
 800d5d0:	0800d603 	.word	0x0800d603
 800d5d4:	0800d603 	.word	0x0800d603
 800d5d8:	0800d5fb 	.word	0x0800d5fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5dc:	f7fe fc12 	bl	800be04 <HAL_RCC_GetPCLK1Freq>
 800d5e0:	61b8      	str	r0, [r7, #24]
        break;
 800d5e2:	e013      	b.n	800d60c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5e4:	f7fe fc22 	bl	800be2c <HAL_RCC_GetPCLK2Freq>
 800d5e8:	61b8      	str	r0, [r7, #24]
        break;
 800d5ea:	e00f      	b.n	800d60c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5ec:	4b4b      	ldr	r3, [pc, #300]	; (800d71c <UART_SetConfig+0x4c0>)
 800d5ee:	61bb      	str	r3, [r7, #24]
        break;
 800d5f0:	e00c      	b.n	800d60c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5f2:	f7fe fb45 	bl	800bc80 <HAL_RCC_GetSysClockFreq>
 800d5f6:	61b8      	str	r0, [r7, #24]
        break;
 800d5f8:	e008      	b.n	800d60c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5fe:	61bb      	str	r3, [r7, #24]
        break;
 800d600:	e004      	b.n	800d60c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800d602:	2300      	movs	r3, #0
 800d604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	77bb      	strb	r3, [r7, #30]
        break;
 800d60a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d074      	beq.n	800d6fc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	005a      	lsls	r2, r3, #1
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	085b      	lsrs	r3, r3, #1
 800d61c:	441a      	add	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	fbb2 f3f3 	udiv	r3, r2, r3
 800d626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	2b0f      	cmp	r3, #15
 800d62c:	d916      	bls.n	800d65c <UART_SetConfig+0x400>
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d634:	d212      	bcs.n	800d65c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	f023 030f 	bic.w	r3, r3, #15
 800d63e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	085b      	lsrs	r3, r3, #1
 800d644:	b29b      	uxth	r3, r3
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	89fb      	ldrh	r3, [r7, #14]
 800d64e:	4313      	orrs	r3, r2
 800d650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	89fa      	ldrh	r2, [r7, #14]
 800d658:	60da      	str	r2, [r3, #12]
 800d65a:	e04f      	b.n	800d6fc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	77bb      	strb	r3, [r7, #30]
 800d660:	e04c      	b.n	800d6fc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d662:	7ffb      	ldrb	r3, [r7, #31]
 800d664:	2b08      	cmp	r3, #8
 800d666:	d828      	bhi.n	800d6ba <UART_SetConfig+0x45e>
 800d668:	a201      	add	r2, pc, #4	; (adr r2, 800d670 <UART_SetConfig+0x414>)
 800d66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66e:	bf00      	nop
 800d670:	0800d695 	.word	0x0800d695
 800d674:	0800d69d 	.word	0x0800d69d
 800d678:	0800d6a5 	.word	0x0800d6a5
 800d67c:	0800d6bb 	.word	0x0800d6bb
 800d680:	0800d6ab 	.word	0x0800d6ab
 800d684:	0800d6bb 	.word	0x0800d6bb
 800d688:	0800d6bb 	.word	0x0800d6bb
 800d68c:	0800d6bb 	.word	0x0800d6bb
 800d690:	0800d6b3 	.word	0x0800d6b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d694:	f7fe fbb6 	bl	800be04 <HAL_RCC_GetPCLK1Freq>
 800d698:	61b8      	str	r0, [r7, #24]
        break;
 800d69a:	e013      	b.n	800d6c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d69c:	f7fe fbc6 	bl	800be2c <HAL_RCC_GetPCLK2Freq>
 800d6a0:	61b8      	str	r0, [r7, #24]
        break;
 800d6a2:	e00f      	b.n	800d6c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6a4:	4b1d      	ldr	r3, [pc, #116]	; (800d71c <UART_SetConfig+0x4c0>)
 800d6a6:	61bb      	str	r3, [r7, #24]
        break;
 800d6a8:	e00c      	b.n	800d6c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6aa:	f7fe fae9 	bl	800bc80 <HAL_RCC_GetSysClockFreq>
 800d6ae:	61b8      	str	r0, [r7, #24]
        break;
 800d6b0:	e008      	b.n	800d6c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6b6:	61bb      	str	r3, [r7, #24]
        break;
 800d6b8:	e004      	b.n	800d6c4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	77bb      	strb	r3, [r7, #30]
        break;
 800d6c2:	bf00      	nop
    }

    if (pclk != 0U)
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d018      	beq.n	800d6fc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	085a      	lsrs	r2, r3, #1
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	441a      	add	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2b0f      	cmp	r3, #15
 800d6e2:	d909      	bls.n	800d6f8 <UART_SetConfig+0x49c>
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6ea:	d205      	bcs.n	800d6f8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	60da      	str	r2, [r3, #12]
 800d6f6:	e001      	b.n	800d6fc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d708:	7fbb      	ldrb	r3, [r7, #30]
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3720      	adds	r7, #32
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	40007c00 	.word	0x40007c00
 800d718:	40023800 	.word	0x40023800
 800d71c:	00f42400 	.word	0x00f42400

0800d720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72c:	f003 0301 	and.w	r3, r3, #1
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00a      	beq.n	800d74a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	430a      	orrs	r2, r1
 800d748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74e:	f003 0302 	and.w	r3, r3, #2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00a      	beq.n	800d76c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	430a      	orrs	r2, r1
 800d76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d770:	f003 0304 	and.w	r3, r3, #4
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00a      	beq.n	800d78e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	430a      	orrs	r2, r1
 800d78c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d792:	f003 0308 	and.w	r3, r3, #8
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	430a      	orrs	r2, r1
 800d7ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b4:	f003 0310 	and.w	r3, r3, #16
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00a      	beq.n	800d7d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00a      	beq.n	800d7f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	430a      	orrs	r2, r1
 800d7f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d01a      	beq.n	800d836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	430a      	orrs	r2, r1
 800d814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d81a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d81e:	d10a      	bne.n	800d836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	430a      	orrs	r2, r1
 800d834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00a      	beq.n	800d858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	430a      	orrs	r2, r1
 800d856:	605a      	str	r2, [r3, #4]
  }
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af02      	add	r7, sp, #8
 800d86a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d874:	f7fb fbec 	bl	8009050 <HAL_GetTick>
 800d878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f003 0308 	and.w	r3, r3, #8
 800d884:	2b08      	cmp	r3, #8
 800d886:	d10e      	bne.n	800d8a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 f82d 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d001      	beq.n	800d8a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8a2:	2303      	movs	r3, #3
 800d8a4:	e023      	b.n	800d8ee <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f003 0304 	and.w	r3, r3, #4
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	d10e      	bne.n	800d8d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f817 	bl	800d8f6 <UART_WaitOnFlagUntilTimeout>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e00d      	b.n	800d8ee <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2220      	movs	r2, #32
 800d8d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b09c      	sub	sp, #112	; 0x70
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	60b9      	str	r1, [r7, #8]
 800d900:	603b      	str	r3, [r7, #0]
 800d902:	4613      	mov	r3, r2
 800d904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d906:	e0a5      	b.n	800da54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90e:	f000 80a1 	beq.w	800da54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d912:	f7fb fb9d 	bl	8009050 <HAL_GetTick>
 800d916:	4602      	mov	r2, r0
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d91e:	429a      	cmp	r2, r3
 800d920:	d302      	bcc.n	800d928 <UART_WaitOnFlagUntilTimeout+0x32>
 800d922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d924:	2b00      	cmp	r3, #0
 800d926:	d13e      	bne.n	800d9a6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d930:	e853 3f00 	ldrex	r3, [r3]
 800d934:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d938:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d93c:	667b      	str	r3, [r7, #100]	; 0x64
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	461a      	mov	r2, r3
 800d944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d946:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d948:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d94c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d94e:	e841 2300 	strex	r3, r2, [r1]
 800d952:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1e6      	bne.n	800d928 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	3308      	adds	r3, #8
 800d960:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d964:	e853 3f00 	ldrex	r3, [r3]
 800d968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96c:	f023 0301 	bic.w	r3, r3, #1
 800d970:	663b      	str	r3, [r7, #96]	; 0x60
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3308      	adds	r3, #8
 800d978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d97a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d97c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d982:	e841 2300 	strex	r3, r2, [r1]
 800d986:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1e5      	bne.n	800d95a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2220      	movs	r2, #32
 800d992:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2220      	movs	r2, #32
 800d998:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d9a2:	2303      	movs	r3, #3
 800d9a4:	e067      	b.n	800da76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 0304 	and.w	r3, r3, #4
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d04f      	beq.n	800da54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	69db      	ldr	r3, [r3, #28]
 800d9ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9c2:	d147      	bne.n	800da54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	e853 3f00 	ldrex	r3, [r3]
 800d9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d9e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9f4:	e841 2300 	strex	r3, r2, [r1]
 800d9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1e6      	bne.n	800d9ce <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	3308      	adds	r3, #8
 800da06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	e853 3f00 	ldrex	r3, [r3]
 800da0e:	613b      	str	r3, [r7, #16]
   return(result);
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	f023 0301 	bic.w	r3, r3, #1
 800da16:	66bb      	str	r3, [r7, #104]	; 0x68
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3308      	adds	r3, #8
 800da1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da20:	623a      	str	r2, [r7, #32]
 800da22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da24:	69f9      	ldr	r1, [r7, #28]
 800da26:	6a3a      	ldr	r2, [r7, #32]
 800da28:	e841 2300 	strex	r3, r2, [r1]
 800da2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e5      	bne.n	800da00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2220      	movs	r2, #32
 800da38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2220      	movs	r2, #32
 800da3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2220      	movs	r2, #32
 800da44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800da50:	2303      	movs	r3, #3
 800da52:	e010      	b.n	800da76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	69da      	ldr	r2, [r3, #28]
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	4013      	ands	r3, r2
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	429a      	cmp	r2, r3
 800da62:	bf0c      	ite	eq
 800da64:	2301      	moveq	r3, #1
 800da66:	2300      	movne	r3, #0
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	461a      	mov	r2, r3
 800da6c:	79fb      	ldrb	r3, [r7, #7]
 800da6e:	429a      	cmp	r2, r3
 800da70:	f43f af4a 	beq.w	800d908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3770      	adds	r7, #112	; 0x70
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <_ZdlPvj>:
 800da7e:	f000 b818 	b.w	800dab2 <_ZdlPv>

0800da82 <_ZdaPv>:
 800da82:	f000 b816 	b.w	800dab2 <_ZdlPv>

0800da86 <_Znwj>:
 800da86:	2801      	cmp	r0, #1
 800da88:	bf38      	it	cc
 800da8a:	2001      	movcc	r0, #1
 800da8c:	b510      	push	{r4, lr}
 800da8e:	4604      	mov	r4, r0
 800da90:	4620      	mov	r0, r4
 800da92:	f001 fbfd 	bl	800f290 <malloc>
 800da96:	b930      	cbnz	r0, 800daa6 <_Znwj+0x20>
 800da98:	f000 f820 	bl	800dadc <_ZSt15get_new_handlerv>
 800da9c:	b908      	cbnz	r0, 800daa2 <_Znwj+0x1c>
 800da9e:	f001 fbbd 	bl	800f21c <abort>
 800daa2:	4780      	blx	r0
 800daa4:	e7f4      	b.n	800da90 <_Znwj+0xa>
 800daa6:	bd10      	pop	{r4, pc}

0800daa8 <_Znaj>:
 800daa8:	f7ff bfed 	b.w	800da86 <_Znwj>

0800daac <__cxa_pure_virtual>:
 800daac:	b508      	push	{r3, lr}
 800daae:	f000 f80f 	bl	800dad0 <_ZSt9terminatev>

0800dab2 <_ZdlPv>:
 800dab2:	f001 bbf5 	b.w	800f2a0 <free>

0800dab6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dab6:	b508      	push	{r3, lr}
 800dab8:	4780      	blx	r0
 800daba:	f001 fbaf 	bl	800f21c <abort>
	...

0800dac0 <_ZSt13get_terminatev>:
 800dac0:	4b02      	ldr	r3, [pc, #8]	; (800dacc <_ZSt13get_terminatev+0xc>)
 800dac2:	6818      	ldr	r0, [r3, #0]
 800dac4:	f3bf 8f5b 	dmb	ish
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	20000014 	.word	0x20000014

0800dad0 <_ZSt9terminatev>:
 800dad0:	b508      	push	{r3, lr}
 800dad2:	f7ff fff5 	bl	800dac0 <_ZSt13get_terminatev>
 800dad6:	f7ff ffee 	bl	800dab6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800dadc <_ZSt15get_new_handlerv>:
 800dadc:	4b02      	ldr	r3, [pc, #8]	; (800dae8 <_ZSt15get_new_handlerv+0xc>)
 800dade:	6818      	ldr	r0, [r3, #0]
 800dae0:	f3bf 8f5b 	dmb	ish
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	200003bc 	.word	0x200003bc
 800daec:	00000000 	.word	0x00000000

0800daf0 <log>:
 800daf0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800daf4:	ed2d 8b02 	vpush	{d8}
 800daf8:	b082      	sub	sp, #8
 800dafa:	ed8d 0b00 	vstr	d0, [sp]
 800dafe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db02:	2600      	movs	r6, #0
 800db04:	1994      	adds	r4, r2, r6
 800db06:	4e80      	ldr	r6, [pc, #512]	; (800dd08 <log+0x218>)
 800db08:	4f80      	ldr	r7, [pc, #512]	; (800dd0c <log+0x21c>)
 800db0a:	eb43 0506 	adc.w	r5, r3, r6
 800db0e:	42af      	cmp	r7, r5
 800db10:	f04f 36ff 	mov.w	r6, #4294967295
 800db14:	bf08      	it	eq
 800db16:	42a6      	cmpeq	r6, r4
 800db18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800db1c:	d363      	bcc.n	800dbe6 <log+0xf6>
 800db1e:	497c      	ldr	r1, [pc, #496]	; (800dd10 <log+0x220>)
 800db20:	2000      	movs	r0, #0
 800db22:	428b      	cmp	r3, r1
 800db24:	bf08      	it	eq
 800db26:	4282      	cmpeq	r2, r0
 800db28:	f000 80de 	beq.w	800dce8 <log+0x1f8>
 800db2c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800db30:	ee30 7b47 	vsub.f64	d7, d0, d7
 800db34:	4b77      	ldr	r3, [pc, #476]	; (800dd14 <log+0x224>)
 800db36:	ee27 1b07 	vmul.f64	d1, d7, d7
 800db3a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800db3e:	ee27 3b01 	vmul.f64	d3, d7, d1
 800db42:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800db46:	eea6 4b07 	vfma.f64	d4, d6, d7
 800db4a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800db4e:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800db52:	eea6 4b01 	vfma.f64	d4, d6, d1
 800db56:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800db5a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800db5e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800db62:	eea5 6b01 	vfma.f64	d6, d5, d1
 800db66:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800db6a:	eeb0 2b46 	vmov.f64	d2, d6
 800db6e:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800db72:	eea5 6b07 	vfma.f64	d6, d5, d7
 800db76:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800db7a:	eea5 6b01 	vfma.f64	d6, d5, d1
 800db7e:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800db82:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 800db86:	eea5 6b03 	vfma.f64	d6, d5, d3
 800db8a:	eea6 2b03 	vfma.f64	d2, d6, d3
 800db8e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 800dcf0 <log+0x200>
 800db92:	eea2 4b03 	vfma.f64	d4, d2, d3
 800db96:	eeb0 2b47 	vmov.f64	d2, d7
 800db9a:	eea7 2b06 	vfma.f64	d2, d7, d6
 800db9e:	eea7 2b46 	vfms.f64	d2, d7, d6
 800dba2:	eeb0 6b47 	vmov.f64	d6, d7
 800dba6:	ee37 8b42 	vsub.f64	d8, d7, d2
 800dbaa:	ee22 0b02 	vmul.f64	d0, d2, d2
 800dbae:	eea0 6b01 	vfma.f64	d6, d0, d1
 800dbb2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800dbb6:	ee37 7b02 	vadd.f64	d7, d7, d2
 800dbba:	eea0 5b01 	vfma.f64	d5, d0, d1
 800dbbe:	ee21 1b08 	vmul.f64	d1, d1, d8
 800dbc2:	eea1 5b07 	vfma.f64	d5, d1, d7
 800dbc6:	eeb0 7b45 	vmov.f64	d7, d5
 800dbca:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dbce:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dbd2:	ed8d 7b00 	vstr	d7, [sp]
 800dbd6:	ed9d 0b00 	vldr	d0, [sp]
 800dbda:	b002      	add	sp, #8
 800dbdc:	ecbd 8b02 	vpop	{d8}
 800dbe0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800dbe4:	4770      	bx	lr
 800dbe6:	f1ac 0510 	sub.w	r5, ip, #16
 800dbea:	f647 74df 	movw	r4, #32735	; 0x7fdf
 800dbee:	42a5      	cmp	r5, r4
 800dbf0:	d930      	bls.n	800dc54 <log+0x164>
 800dbf2:	1890      	adds	r0, r2, r2
 800dbf4:	eb43 0103 	adc.w	r1, r3, r3
 800dbf8:	4301      	orrs	r1, r0
 800dbfa:	d107      	bne.n	800dc0c <log+0x11c>
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	b002      	add	sp, #8
 800dc00:	ecbd 8b02 	vpop	{d8}
 800dc04:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800dc08:	f000 b8ba 	b.w	800dd80 <__math_divzero>
 800dc0c:	4942      	ldr	r1, [pc, #264]	; (800dd18 <log+0x228>)
 800dc0e:	2000      	movs	r0, #0
 800dc10:	428b      	cmp	r3, r1
 800dc12:	bf08      	it	eq
 800dc14:	4282      	cmpeq	r2, r0
 800dc16:	d0de      	beq.n	800dbd6 <log+0xe6>
 800dc18:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800dc1c:	d104      	bne.n	800dc28 <log+0x138>
 800dc1e:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800dc22:	ea31 010c 	bics.w	r1, r1, ip
 800dc26:	d108      	bne.n	800dc3a <log+0x14a>
 800dc28:	ed9d 0b00 	vldr	d0, [sp]
 800dc2c:	b002      	add	sp, #8
 800dc2e:	ecbd 8b02 	vpop	{d8}
 800dc32:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800dc36:	f000 b8bb 	b.w	800ddb0 <__math_invalid>
 800dc3a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dcf8 <log+0x208>
 800dc3e:	ed9d 6b00 	vldr	d6, [sp]
 800dc42:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dc46:	ec56 5b17 	vmov	r5, r6, d7
 800dc4a:	4834      	ldr	r0, [pc, #208]	; (800dd1c <log+0x22c>)
 800dc4c:	2400      	movs	r4, #0
 800dc4e:	192a      	adds	r2, r5, r4
 800dc50:	eb46 0300 	adc.w	r3, r6, r0
 800dc54:	2100      	movs	r1, #0
 800dc56:	1851      	adds	r1, r2, r1
 800dc58:	4931      	ldr	r1, [pc, #196]	; (800dd20 <log+0x230>)
 800dc5a:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800dc5e:	eb43 0101 	adc.w	r1, r3, r1
 800dc62:	0d0c      	lsrs	r4, r1, #20
 800dc64:	2500      	movs	r5, #0
 800dc66:	ebb2 0805 	subs.w	r8, r2, r5
 800dc6a:	ea4f 5404 	mov.w	r4, r4, lsl #20
 800dc6e:	eb63 0904 	sbc.w	r9, r3, r4
 800dc72:	4b28      	ldr	r3, [pc, #160]	; (800dd14 <log+0x224>)
 800dc74:	f3c1 3046 	ubfx	r0, r1, #13, #7
 800dc78:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 800dc7c:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 800dc80:	ec49 8b16 	vmov	d6, r8, r9
 800dc84:	1509      	asrs	r1, r1, #20
 800dc86:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dc8a:	ee07 1a90 	vmov	s15, r1
 800dc8e:	ee24 1b04 	vmul.f64	d1, d4, d4
 800dc92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800dc96:	ed93 5b00 	vldr	d5, [r3]
 800dc9a:	ee24 0b01 	vmul.f64	d0, d4, d1
 800dc9e:	ed93 3b02 	vldr	d3, [r3, #8]
 800dca2:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 800dca6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dcaa:	ee34 5b07 	vadd.f64	d5, d4, d7
 800dcae:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dcb2:	ee37 7b04 	vadd.f64	d7, d7, d4
 800dcb6:	eea3 7b06 	vfma.f64	d7, d3, d6
 800dcba:	ed93 6b04 	vldr	d6, [r3, #16]
 800dcbe:	ed93 3b08 	vldr	d3, [r3, #32]
 800dcc2:	eea6 7b01 	vfma.f64	d7, d6, d1
 800dcc6:	ed93 6b06 	vldr	d6, [r3, #24]
 800dcca:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800dcce:	eea3 6b04 	vfma.f64	d6, d3, d4
 800dcd2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800dcd6:	eea2 3b04 	vfma.f64	d3, d2, d4
 800dcda:	eea3 6b01 	vfma.f64	d6, d3, d1
 800dcde:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dce2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dce6:	e774      	b.n	800dbd2 <log+0xe2>
 800dce8:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800dd00 <log+0x210>
 800dcec:	e771      	b.n	800dbd2 <log+0xe2>
 800dcee:	bf00      	nop
 800dcf0:	00000000 	.word	0x00000000
 800dcf4:	41a00000 	.word	0x41a00000
 800dcf8:	00000000 	.word	0x00000000
 800dcfc:	43300000 	.word	0x43300000
	...
 800dd08:	c0120000 	.word	0xc0120000
 800dd0c:	000308ff 	.word	0x000308ff
 800dd10:	3ff00000 	.word	0x3ff00000
 800dd14:	080289d8 	.word	0x080289d8
 800dd18:	7ff00000 	.word	0x7ff00000
 800dd1c:	fcc00000 	.word	0xfcc00000
 800dd20:	c01a0000 	.word	0xc01a0000

0800dd24 <with_errno>:
 800dd24:	b513      	push	{r0, r1, r4, lr}
 800dd26:	4604      	mov	r4, r0
 800dd28:	ed8d 0b00 	vstr	d0, [sp]
 800dd2c:	f001 fa86 	bl	800f23c <__errno>
 800dd30:	ed9d 0b00 	vldr	d0, [sp]
 800dd34:	6004      	str	r4, [r0, #0]
 800dd36:	b002      	add	sp, #8
 800dd38:	bd10      	pop	{r4, pc}

0800dd3a <xflow>:
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	b158      	cbz	r0, 800dd56 <xflow+0x1c>
 800dd3e:	eeb1 7b40 	vneg.f64	d7, d0
 800dd42:	ed8d 7b00 	vstr	d7, [sp]
 800dd46:	ed9d 7b00 	vldr	d7, [sp]
 800dd4a:	2022      	movs	r0, #34	; 0x22
 800dd4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dd50:	b002      	add	sp, #8
 800dd52:	f7ff bfe7 	b.w	800dd24 <with_errno>
 800dd56:	eeb0 7b40 	vmov.f64	d7, d0
 800dd5a:	e7f2      	b.n	800dd42 <xflow+0x8>
 800dd5c:	0000      	movs	r0, r0
	...

0800dd60 <__math_uflow>:
 800dd60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd68 <__math_uflow+0x8>
 800dd64:	f7ff bfe9 	b.w	800dd3a <xflow>
 800dd68:	00000000 	.word	0x00000000
 800dd6c:	10000000 	.word	0x10000000

0800dd70 <__math_oflow>:
 800dd70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd78 <__math_oflow+0x8>
 800dd74:	f7ff bfe1 	b.w	800dd3a <xflow>
 800dd78:	00000000 	.word	0x00000000
 800dd7c:	70000000 	.word	0x70000000

0800dd80 <__math_divzero>:
 800dd80:	b082      	sub	sp, #8
 800dd82:	2800      	cmp	r0, #0
 800dd84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dd88:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800dd8c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800dd90:	ed8d 7b00 	vstr	d7, [sp]
 800dd94:	ed9d 0b00 	vldr	d0, [sp]
 800dd98:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800dda8 <__math_divzero+0x28>
 800dd9c:	2022      	movs	r0, #34	; 0x22
 800dd9e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800dda2:	b002      	add	sp, #8
 800dda4:	f7ff bfbe 	b.w	800dd24 <with_errno>
	...

0800ddb0 <__math_invalid>:
 800ddb0:	eeb0 7b40 	vmov.f64	d7, d0
 800ddb4:	eeb4 7b47 	vcmp.f64	d7, d7
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ddc0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800ddc4:	d602      	bvs.n	800ddcc <__math_invalid+0x1c>
 800ddc6:	2021      	movs	r0, #33	; 0x21
 800ddc8:	f7ff bfac 	b.w	800dd24 <with_errno>
 800ddcc:	4770      	bx	lr

0800ddce <__math_check_uflow>:
 800ddce:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ddd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd6:	d102      	bne.n	800ddde <__math_check_uflow+0x10>
 800ddd8:	2022      	movs	r0, #34	; 0x22
 800ddda:	f7ff bfa3 	b.w	800dd24 <with_errno>
 800ddde:	4770      	bx	lr

0800dde0 <__math_check_oflow>:
 800dde0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800de00 <__math_check_oflow+0x20>
 800dde4:	eeb0 7bc0 	vabs.f64	d7, d0
 800dde8:	eeb4 7b46 	vcmp.f64	d7, d6
 800ddec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf0:	dd02      	ble.n	800ddf8 <__math_check_oflow+0x18>
 800ddf2:	2022      	movs	r0, #34	; 0x22
 800ddf4:	f7ff bf96 	b.w	800dd24 <with_errno>
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	f3af 8000 	nop.w
 800de00:	ffffffff 	.word	0xffffffff
 800de04:	7fefffff 	.word	0x7fefffff

0800de08 <checkint>:
 800de08:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800de0c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800de10:	429a      	cmp	r2, r3
 800de12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de14:	dd2b      	ble.n	800de6e <checkint+0x66>
 800de16:	f240 4333 	movw	r3, #1075	; 0x433
 800de1a:	429a      	cmp	r2, r3
 800de1c:	dc25      	bgt.n	800de6a <checkint+0x62>
 800de1e:	1a9b      	subs	r3, r3, r2
 800de20:	f1a3 0620 	sub.w	r6, r3, #32
 800de24:	f04f 32ff 	mov.w	r2, #4294967295
 800de28:	fa02 f606 	lsl.w	r6, r2, r6
 800de2c:	fa02 f403 	lsl.w	r4, r2, r3
 800de30:	f1c3 0520 	rsb	r5, r3, #32
 800de34:	4334      	orrs	r4, r6
 800de36:	fa22 f505 	lsr.w	r5, r2, r5
 800de3a:	432c      	orrs	r4, r5
 800de3c:	409a      	lsls	r2, r3
 800de3e:	ea20 0602 	bic.w	r6, r0, r2
 800de42:	ea21 0704 	bic.w	r7, r1, r4
 800de46:	ea56 0207 	orrs.w	r2, r6, r7
 800de4a:	f1a3 0420 	sub.w	r4, r3, #32
 800de4e:	f1c3 0220 	rsb	r2, r3, #32
 800de52:	d10c      	bne.n	800de6e <checkint+0x66>
 800de54:	40d8      	lsrs	r0, r3
 800de56:	fa01 f302 	lsl.w	r3, r1, r2
 800de5a:	4318      	orrs	r0, r3
 800de5c:	40e1      	lsrs	r1, r4
 800de5e:	4308      	orrs	r0, r1
 800de60:	f000 0301 	and.w	r3, r0, #1
 800de64:	f1c3 0002 	rsb	r0, r3, #2
 800de68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de6a:	2002      	movs	r0, #2
 800de6c:	e7fc      	b.n	800de68 <checkint+0x60>
 800de6e:	2000      	movs	r0, #0
 800de70:	e7fa      	b.n	800de68 <checkint+0x60>
 800de72:	0000      	movs	r0, r0
 800de74:	0000      	movs	r0, r0
	...

0800de78 <pow>:
 800de78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	ed2d 8b0a 	vpush	{d8-d12}
 800de80:	b09b      	sub	sp, #108	; 0x6c
 800de82:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800de8a:	ed8d 1b00 	vstr	d1, [sp]
 800de8e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800de92:	e9dd 6700 	ldrd	r6, r7, [sp]
 800de96:	f109 30ff 	add.w	r0, r9, #4294967295
 800de9a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800de9e:	4288      	cmp	r0, r1
 800dea0:	46cc      	mov	ip, r9
 800dea2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800dea6:	d806      	bhi.n	800deb6 <pow+0x3e>
 800dea8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800deac:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800deb0:	297f      	cmp	r1, #127	; 0x7f
 800deb2:	f240 81ab 	bls.w	800e20c <pow+0x394>
 800deb6:	19b1      	adds	r1, r6, r6
 800deb8:	9104      	str	r1, [sp, #16]
 800deba:	eb47 0107 	adc.w	r1, r7, r7
 800debe:	9105      	str	r1, [sp, #20]
 800dec0:	9904      	ldr	r1, [sp, #16]
 800dec2:	f111 31ff 	adds.w	r1, r1, #4294967295
 800dec6:	460a      	mov	r2, r1
 800dec8:	9905      	ldr	r1, [sp, #20]
 800deca:	f141 31ff 	adc.w	r1, r1, #4294967295
 800dece:	460b      	mov	r3, r1
 800ded0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800ded4:	f06f 0001 	mvn.w	r0, #1
 800ded8:	4299      	cmp	r1, r3
 800deda:	bf08      	it	eq
 800dedc:	4290      	cmpeq	r0, r2
 800dede:	d260      	bcs.n	800dfa2 <pow+0x12a>
 800dee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	d11a      	bne.n	800df1e <pow+0xa6>
 800dee8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800deec:	1923      	adds	r3, r4, r4
 800deee:	930c      	str	r3, [sp, #48]	; 0x30
 800def0:	eb42 0302 	adc.w	r3, r2, r2
 800def4:	930d      	str	r3, [sp, #52]	; 0x34
 800def6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800defa:	4bcf      	ldr	r3, [pc, #828]	; (800e238 <pow+0x3c0>)
 800defc:	2200      	movs	r2, #0
 800defe:	428b      	cmp	r3, r1
 800df00:	bf08      	it	eq
 800df02:	4282      	cmpeq	r2, r0
 800df04:	f080 8265 	bcs.w	800e3d2 <pow+0x55a>
 800df08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df0c:	ed9d 6b00 	vldr	d6, [sp]
 800df10:	ee37 0b06 	vadd.f64	d0, d7, d6
 800df14:	b01b      	add	sp, #108	; 0x6c
 800df16:	ecbd 8b0a 	vpop	{d8-d12}
 800df1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1e:	49c7      	ldr	r1, [pc, #796]	; (800e23c <pow+0x3c4>)
 800df20:	2000      	movs	r0, #0
 800df22:	428d      	cmp	r5, r1
 800df24:	bf08      	it	eq
 800df26:	4284      	cmpeq	r4, r0
 800df28:	d10b      	bne.n	800df42 <pow+0xca>
 800df2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800df2e:	19b3      	adds	r3, r6, r6
 800df30:	930e      	str	r3, [sp, #56]	; 0x38
 800df32:	eb42 0302 	adc.w	r3, r2, r2
 800df36:	930f      	str	r3, [sp, #60]	; 0x3c
 800df38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df3c:	4bbe      	ldr	r3, [pc, #760]	; (800e238 <pow+0x3c0>)
 800df3e:	2200      	movs	r2, #0
 800df40:	e7dd      	b.n	800defe <pow+0x86>
 800df42:	1921      	adds	r1, r4, r4
 800df44:	9106      	str	r1, [sp, #24]
 800df46:	eb45 0105 	adc.w	r1, r5, r5
 800df4a:	9107      	str	r1, [sp, #28]
 800df4c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800df50:	49bb      	ldr	r1, [pc, #748]	; (800e240 <pow+0x3c8>)
 800df52:	2000      	movs	r0, #0
 800df54:	42a1      	cmp	r1, r4
 800df56:	bf08      	it	eq
 800df58:	4298      	cmpeq	r0, r3
 800df5a:	d3d5      	bcc.n	800df08 <pow+0x90>
 800df5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800df60:	428c      	cmp	r4, r1
 800df62:	bf08      	it	eq
 800df64:	4283      	cmpeq	r3, r0
 800df66:	d1cf      	bne.n	800df08 <pow+0x90>
 800df68:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800df6c:	49b5      	ldr	r1, [pc, #724]	; (800e244 <pow+0x3cc>)
 800df6e:	2000      	movs	r0, #0
 800df70:	428c      	cmp	r4, r1
 800df72:	bf08      	it	eq
 800df74:	4283      	cmpeq	r3, r0
 800df76:	f000 822c 	beq.w	800e3d2 <pow+0x55a>
 800df7a:	49b3      	ldr	r1, [pc, #716]	; (800e248 <pow+0x3d0>)
 800df7c:	f04f 30ff 	mov.w	r0, #4294967295
 800df80:	42a1      	cmp	r1, r4
 800df82:	bf08      	it	eq
 800df84:	4298      	cmpeq	r0, r3
 800df86:	ea6f 0307 	mvn.w	r3, r7
 800df8a:	bf34      	ite	cc
 800df8c:	2201      	movcc	r2, #1
 800df8e:	2200      	movcs	r2, #0
 800df90:	0fdb      	lsrs	r3, r3, #31
 800df92:	429a      	cmp	r2, r3
 800df94:	f040 821a 	bne.w	800e3cc <pow+0x554>
 800df98:	ed9d 7b00 	vldr	d7, [sp]
 800df9c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800dfa0:	e7b8      	b.n	800df14 <pow+0x9c>
 800dfa2:	1923      	adds	r3, r4, r4
 800dfa4:	9308      	str	r3, [sp, #32]
 800dfa6:	eb45 0305 	adc.w	r3, r5, r5
 800dfaa:	9309      	str	r3, [sp, #36]	; 0x24
 800dfac:	9b08      	ldr	r3, [sp, #32]
 800dfae:	f113 33ff 	adds.w	r3, r3, #4294967295
 800dfb2:	9310      	str	r3, [sp, #64]	; 0x40
 800dfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dfba:	9311      	str	r3, [sp, #68]	; 0x44
 800dfbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfc0:	4299      	cmp	r1, r3
 800dfc2:	bf08      	it	eq
 800dfc4:	4290      	cmpeq	r0, r2
 800dfc6:	d22d      	bcs.n	800e024 <pow+0x1ac>
 800dfc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfcc:	2c00      	cmp	r4, #0
 800dfce:	f175 0300 	sbcs.w	r3, r5, #0
 800dfd2:	ee27 0b07 	vmul.f64	d0, d7, d7
 800dfd6:	da16      	bge.n	800e006 <pow+0x18e>
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7ff ff14 	bl	800de08 <checkint>
 800dfe0:	2801      	cmp	r0, #1
 800dfe2:	d110      	bne.n	800e006 <pow+0x18e>
 800dfe4:	eeb1 0b40 	vneg.f64	d0, d0
 800dfe8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800dfec:	4323      	orrs	r3, r4
 800dfee:	d10c      	bne.n	800e00a <pow+0x192>
 800dff0:	2e00      	cmp	r6, #0
 800dff2:	f177 0300 	sbcs.w	r3, r7, #0
 800dff6:	da8d      	bge.n	800df14 <pow+0x9c>
 800dff8:	b01b      	add	sp, #108	; 0x6c
 800dffa:	ecbd 8b0a 	vpop	{d8-d12}
 800dffe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e002:	f7ff bebd 	b.w	800dd80 <__math_divzero>
 800e006:	2000      	movs	r0, #0
 800e008:	e7ee      	b.n	800dfe8 <pow+0x170>
 800e00a:	2e00      	cmp	r6, #0
 800e00c:	f177 0300 	sbcs.w	r3, r7, #0
 800e010:	da80      	bge.n	800df14 <pow+0x9c>
 800e012:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e016:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e01a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e01e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e022:	e777      	b.n	800df14 <pow+0x9c>
 800e024:	2c00      	cmp	r4, #0
 800e026:	f175 0300 	sbcs.w	r3, r5, #0
 800e02a:	da35      	bge.n	800e098 <pow+0x220>
 800e02c:	4630      	mov	r0, r6
 800e02e:	4639      	mov	r1, r7
 800e030:	f7ff feea 	bl	800de08 <checkint>
 800e034:	b940      	cbnz	r0, 800e048 <pow+0x1d0>
 800e036:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e03a:	b01b      	add	sp, #108	; 0x6c
 800e03c:	ecbd 8b0a 	vpop	{d8-d12}
 800e040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e044:	f7ff beb4 	b.w	800ddb0 <__math_invalid>
 800e048:	2801      	cmp	r0, #1
 800e04a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e04e:	bf14      	ite	ne
 800e050:	2000      	movne	r0, #0
 800e052:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e056:	461d      	mov	r5, r3
 800e058:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e05c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e060:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e064:	2a7f      	cmp	r2, #127	; 0x7f
 800e066:	d933      	bls.n	800e0d0 <pow+0x258>
 800e068:	4974      	ldr	r1, [pc, #464]	; (800e23c <pow+0x3c4>)
 800e06a:	2000      	movs	r0, #0
 800e06c:	428d      	cmp	r5, r1
 800e06e:	bf08      	it	eq
 800e070:	4284      	cmpeq	r4, r0
 800e072:	f000 81ae 	beq.w	800e3d2 <pow+0x55a>
 800e076:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d80e      	bhi.n	800e09c <pow+0x224>
 800e07e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e082:	ed9d 7b00 	vldr	d7, [sp]
 800e086:	42a9      	cmp	r1, r5
 800e088:	bf08      	it	eq
 800e08a:	42a0      	cmpeq	r0, r4
 800e08c:	bf34      	ite	cc
 800e08e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e092:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e096:	e73d      	b.n	800df14 <pow+0x9c>
 800e098:	2000      	movs	r0, #0
 800e09a:	e7df      	b.n	800e05c <pow+0x1e4>
 800e09c:	42a9      	cmp	r1, r5
 800e09e:	bf08      	it	eq
 800e0a0:	42a0      	cmpeq	r0, r4
 800e0a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e0a6:	bf2c      	ite	cs
 800e0a8:	2301      	movcs	r3, #1
 800e0aa:	2300      	movcc	r3, #0
 800e0ac:	4590      	cmp	r8, r2
 800e0ae:	bf8c      	ite	hi
 800e0b0:	f04f 0800 	movhi.w	r8, #0
 800e0b4:	f04f 0801 	movls.w	r8, #1
 800e0b8:	4543      	cmp	r3, r8
 800e0ba:	f04f 0000 	mov.w	r0, #0
 800e0be:	f000 80af 	beq.w	800e220 <pow+0x3a8>
 800e0c2:	b01b      	add	sp, #108	; 0x6c
 800e0c4:	ecbd 8b0a 	vpop	{d8-d12}
 800e0c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	f7ff be50 	b.w	800dd70 <__math_oflow>
 800e0d0:	f1bc 0f00 	cmp.w	ip, #0
 800e0d4:	d10e      	bne.n	800e0f4 <pow+0x27c>
 800e0d6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e230 <pow+0x3b8>
 800e0da:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e0de:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0e2:	ec57 6b17 	vmov	r6, r7, d7
 800e0e6:	4b59      	ldr	r3, [pc, #356]	; (800e24c <pow+0x3d4>)
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e0ee:	1874      	adds	r4, r6, r1
 800e0f0:	eb42 0503 	adc.w	r5, r2, r3
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	18e3      	adds	r3, r4, r3
 800e0f8:	4b55      	ldr	r3, [pc, #340]	; (800e250 <pow+0x3d8>)
 800e0fa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e0fe:	eb45 0303 	adc.w	r3, r5, r3
 800e102:	1519      	asrs	r1, r3, #20
 800e104:	ee03 1a10 	vmov	s6, r1
 800e108:	0d1e      	lsrs	r6, r3, #20
 800e10a:	2100      	movs	r1, #0
 800e10c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e110:	0536      	lsls	r6, r6, #20
 800e112:	1a63      	subs	r3, r4, r1
 800e114:	9312      	str	r3, [sp, #72]	; 0x48
 800e116:	eb65 0306 	sbc.w	r3, r5, r6
 800e11a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e11c:	4b4d      	ldr	r3, [pc, #308]	; (800e254 <pow+0x3dc>)
 800e11e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e122:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e126:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e12a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e12e:	ed93 7b00 	vldr	d7, [r3]
 800e132:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e136:	ed93 4b02 	vldr	d4, [r3, #8]
 800e13a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e13e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e142:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e146:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e14a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e14e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e152:	ed93 4b04 	vldr	d4, [r3, #16]
 800e156:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e15a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e15e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e162:	ed93 3b08 	vldr	d3, [r3, #32]
 800e166:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e16a:	eeb0 8b40 	vmov.f64	d8, d0
 800e16e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e172:	ed93 4b06 	vldr	d4, [r3, #24]
 800e176:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e17a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e17e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e182:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e186:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e18a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e18e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e192:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e196:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e19a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e19e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e1a2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e1a6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e1aa:	ed9d 6b00 	vldr	d6, [sp]
 800e1ae:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e1b2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e1b6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e1ba:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e1be:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e1c2:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e1c6:	eeb0 3b46 	vmov.f64	d3, d6
 800e1ca:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e1ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1d2:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e1d6:	ed9d 6b00 	vldr	d6, [sp]
 800e1da:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e1de:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e1e2:	193c      	adds	r4, r7, r4
 800e1e4:	2c3e      	cmp	r4, #62	; 0x3e
 800e1e6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e1ea:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e1ee:	d934      	bls.n	800e25a <pow+0x3e2>
 800e1f0:	428c      	cmp	r4, r1
 800e1f2:	da0d      	bge.n	800e210 <pow+0x398>
 800e1f4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e1f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1fc:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e200:	2800      	cmp	r0, #0
 800e202:	f43f ae87 	beq.w	800df14 <pow+0x9c>
 800e206:	eeb1 0b40 	vneg.f64	d0, d0
 800e20a:	e683      	b.n	800df14 <pow+0x9c>
 800e20c:	2000      	movs	r0, #0
 800e20e:	e771      	b.n	800e0f4 <pow+0x27c>
 800e210:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e214:	d920      	bls.n	800e258 <pow+0x3e0>
 800e216:	2a00      	cmp	r2, #0
 800e218:	f173 0300 	sbcs.w	r3, r3, #0
 800e21c:	f6bf af51 	bge.w	800e0c2 <pow+0x24a>
 800e220:	b01b      	add	sp, #108	; 0x6c
 800e222:	ecbd 8b0a 	vpop	{d8-d12}
 800e226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22a:	f7ff bd99 	b.w	800dd60 <__math_uflow>
 800e22e:	bf00      	nop
 800e230:	00000000 	.word	0x00000000
 800e234:	43300000 	.word	0x43300000
 800e238:	fff00000 	.word	0xfff00000
 800e23c:	3ff00000 	.word	0x3ff00000
 800e240:	ffe00000 	.word	0xffe00000
 800e244:	7fe00000 	.word	0x7fe00000
 800e248:	7fdfffff 	.word	0x7fdfffff
 800e24c:	fcc00000 	.word	0xfcc00000
 800e250:	c0196aab 	.word	0xc0196aab
 800e254:	08029268 	.word	0x08029268
 800e258:	460f      	mov	r7, r1
 800e25a:	4e65      	ldr	r6, [pc, #404]	; (800e3f0 <pow+0x578>)
 800e25c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e260:	ed96 6b02 	vldr	d6, [r6, #8]
 800e264:	ed96 7b00 	vldr	d7, [r6]
 800e268:	eeb0 5b46 	vmov.f64	d5, d6
 800e26c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e270:	ed8d 5b00 	vstr	d5, [sp]
 800e274:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e278:	eeb0 5b44 	vmov.f64	d5, d4
 800e27c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e280:	ed96 7b04 	vldr	d7, [r6, #16]
 800e284:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e288:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e28c:	eeb0 7b45 	vmov.f64	d7, d5
 800e290:	ed96 5b06 	vldr	d5, [r6, #24]
 800e294:	1849      	adds	r1, r1, r1
 800e296:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e29a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e29e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e2a2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e2a6:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e2aa:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e2ae:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e2b2:	ed96 5b08 	vldr	d5, [r6, #32]
 800e2b6:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e2ba:	1814      	adds	r4, r2, r0
 800e2bc:	0365      	lsls	r5, r4, #13
 800e2be:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e2c2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e2c6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e2ca:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e2ce:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e2d2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	eb10 0a04 	adds.w	sl, r0, r4
 800e2dc:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e2e0:	eb45 0b0c 	adc.w	fp, r5, ip
 800e2e4:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e2e8:	2f00      	cmp	r7, #0
 800e2ea:	d16a      	bne.n	800e3c2 <pow+0x54a>
 800e2ec:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	ea50 0301 	orrs.w	r3, r0, r1
 800e2f6:	f04f 0300 	mov.w	r3, #0
 800e2fa:	d115      	bne.n	800e328 <pow+0x4b0>
 800e2fc:	eb1a 0303 	adds.w	r3, sl, r3
 800e300:	ee0b 3a10 	vmov	s22, r3
 800e304:	4b3b      	ldr	r3, [pc, #236]	; (800e3f4 <pow+0x57c>)
 800e306:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e3d8 <pow+0x560>
 800e30a:	eb4b 0303 	adc.w	r3, fp, r3
 800e30e:	ee0b 3a90 	vmov	s23, r3
 800e312:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e316:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e31a:	b01b      	add	sp, #108	; 0x6c
 800e31c:	ecbd 8b0a 	vpop	{d8-d12}
 800e320:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e324:	f7ff bd5c 	b.w	800dde0 <__math_check_oflow>
 800e328:	eb1a 0303 	adds.w	r3, sl, r3
 800e32c:	930a      	str	r3, [sp, #40]	; 0x28
 800e32e:	4b32      	ldr	r3, [pc, #200]	; (800e3f8 <pow+0x580>)
 800e330:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e334:	eb4b 0303 	adc.w	r3, fp, r3
 800e338:	930b      	str	r3, [sp, #44]	; 0x2c
 800e33a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e33e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e342:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e346:	eeb0 3bc7 	vabs.f64	d3, d7
 800e34a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e352:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e3e0 <pow+0x568>
 800e356:	d52b      	bpl.n	800e3b0 <pow+0x538>
 800e358:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e35c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e364:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e368:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e36c:	bf48      	it	mi
 800e36e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e372:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e376:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e37a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e37e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e382:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e386:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e38a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e392:	d105      	bne.n	800e3a0 <pow+0x528>
 800e394:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e396:	463a      	mov	r2, r7
 800e398:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e39c:	ec43 2b17 	vmov	d7, r2, r3
 800e3a0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e3a4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e3a8:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e3ac:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e3b0:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e3b4:	b01b      	add	sp, #108	; 0x6c
 800e3b6:	ecbd 8b0a 	vpop	{d8-d12}
 800e3ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3be:	f7ff bd06 	b.w	800ddce <__math_check_uflow>
 800e3c2:	ec4b ab10 	vmov	d0, sl, fp
 800e3c6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e3ca:	e5a3      	b.n	800df14 <pow+0x9c>
 800e3cc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e3e8 <pow+0x570>
 800e3d0:	e5a0      	b.n	800df14 <pow+0x9c>
 800e3d2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e3d6:	e59d      	b.n	800df14 <pow+0x9c>
 800e3d8:	00000000 	.word	0x00000000
 800e3dc:	7f000000 	.word	0x7f000000
 800e3e0:	00000000 	.word	0x00000000
 800e3e4:	00100000 	.word	0x00100000
	...
 800e3f0:	0802a558 	.word	0x0802a558
 800e3f4:	c0f00000 	.word	0xc0f00000
 800e3f8:	3fe00000 	.word	0x3fe00000
 800e3fc:	00000000 	.word	0x00000000

0800e400 <ceil>:
 800e400:	ee10 1a90 	vmov	r1, s1
 800e404:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e408:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e40c:	2b13      	cmp	r3, #19
 800e40e:	b530      	push	{r4, r5, lr}
 800e410:	ee10 0a10 	vmov	r0, s0
 800e414:	ee10 5a10 	vmov	r5, s0
 800e418:	dc2f      	bgt.n	800e47a <ceil+0x7a>
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	da13      	bge.n	800e446 <ceil+0x46>
 800e41e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e4e0 <ceil+0xe0>
 800e422:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e426:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	dd05      	ble.n	800e43c <ceil+0x3c>
 800e430:	2900      	cmp	r1, #0
 800e432:	db4c      	blt.n	800e4ce <ceil+0xce>
 800e434:	4301      	orrs	r1, r0
 800e436:	d04e      	beq.n	800e4d6 <ceil+0xd6>
 800e438:	492b      	ldr	r1, [pc, #172]	; (800e4e8 <ceil+0xe8>)
 800e43a:	2000      	movs	r0, #0
 800e43c:	460b      	mov	r3, r1
 800e43e:	4602      	mov	r2, r0
 800e440:	ec43 2b10 	vmov	d0, r2, r3
 800e444:	e020      	b.n	800e488 <ceil+0x88>
 800e446:	4a29      	ldr	r2, [pc, #164]	; (800e4ec <ceil+0xec>)
 800e448:	411a      	asrs	r2, r3
 800e44a:	ea01 0402 	and.w	r4, r1, r2
 800e44e:	4304      	orrs	r4, r0
 800e450:	d01a      	beq.n	800e488 <ceil+0x88>
 800e452:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800e4e0 <ceil+0xe0>
 800e456:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e45a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	ddeb      	ble.n	800e43c <ceil+0x3c>
 800e464:	2900      	cmp	r1, #0
 800e466:	bfc2      	ittt	gt
 800e468:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800e46c:	fa40 f303 	asrgt.w	r3, r0, r3
 800e470:	18c9      	addgt	r1, r1, r3
 800e472:	ea21 0102 	bic.w	r1, r1, r2
 800e476:	2000      	movs	r0, #0
 800e478:	e7e0      	b.n	800e43c <ceil+0x3c>
 800e47a:	2b33      	cmp	r3, #51	; 0x33
 800e47c:	dd05      	ble.n	800e48a <ceil+0x8a>
 800e47e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e482:	d101      	bne.n	800e488 <ceil+0x88>
 800e484:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e488:	bd30      	pop	{r4, r5, pc}
 800e48a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e48e:	f04f 32ff 	mov.w	r2, #4294967295
 800e492:	40e2      	lsrs	r2, r4
 800e494:	4202      	tst	r2, r0
 800e496:	d0f7      	beq.n	800e488 <ceil+0x88>
 800e498:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800e4e0 <ceil+0xe0>
 800e49c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e4a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a8:	ddc8      	ble.n	800e43c <ceil+0x3c>
 800e4aa:	2900      	cmp	r1, #0
 800e4ac:	dd02      	ble.n	800e4b4 <ceil+0xb4>
 800e4ae:	2b14      	cmp	r3, #20
 800e4b0:	d103      	bne.n	800e4ba <ceil+0xba>
 800e4b2:	3101      	adds	r1, #1
 800e4b4:	ea20 0002 	bic.w	r0, r0, r2
 800e4b8:	e7c0      	b.n	800e43c <ceil+0x3c>
 800e4ba:	2401      	movs	r4, #1
 800e4bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e4c0:	fa04 f303 	lsl.w	r3, r4, r3
 800e4c4:	4418      	add	r0, r3
 800e4c6:	42a8      	cmp	r0, r5
 800e4c8:	bf38      	it	cc
 800e4ca:	1909      	addcc	r1, r1, r4
 800e4cc:	e7f2      	b.n	800e4b4 <ceil+0xb4>
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e4d4:	e7b2      	b.n	800e43c <ceil+0x3c>
 800e4d6:	4608      	mov	r0, r1
 800e4d8:	e7b0      	b.n	800e43c <ceil+0x3c>
 800e4da:	bf00      	nop
 800e4dc:	f3af 8000 	nop.w
 800e4e0:	8800759c 	.word	0x8800759c
 800e4e4:	7e37e43c 	.word	0x7e37e43c
 800e4e8:	3ff00000 	.word	0x3ff00000
 800e4ec:	000fffff 	.word	0x000fffff

0800e4f0 <cos>:
 800e4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4f2:	eeb0 7b40 	vmov.f64	d7, d0
 800e4f6:	ee17 3a90 	vmov	r3, s15
 800e4fa:	4a1f      	ldr	r2, [pc, #124]	; (800e578 <cos+0x88>)
 800e4fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e500:	4293      	cmp	r3, r2
 800e502:	dc04      	bgt.n	800e50e <cos+0x1e>
 800e504:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e570 <cos+0x80>
 800e508:	f000 fa0a 	bl	800e920 <__kernel_cos>
 800e50c:	e004      	b.n	800e518 <cos+0x28>
 800e50e:	4a1b      	ldr	r2, [pc, #108]	; (800e57c <cos+0x8c>)
 800e510:	4293      	cmp	r3, r2
 800e512:	dd04      	ble.n	800e51e <cos+0x2e>
 800e514:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e518:	b005      	add	sp, #20
 800e51a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e51e:	4668      	mov	r0, sp
 800e520:	f000 f8ba 	bl	800e698 <__ieee754_rem_pio2>
 800e524:	f000 0003 	and.w	r0, r0, #3
 800e528:	2801      	cmp	r0, #1
 800e52a:	d007      	beq.n	800e53c <cos+0x4c>
 800e52c:	2802      	cmp	r0, #2
 800e52e:	d00e      	beq.n	800e54e <cos+0x5e>
 800e530:	b9a0      	cbnz	r0, 800e55c <cos+0x6c>
 800e532:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e536:	ed9d 0b00 	vldr	d0, [sp]
 800e53a:	e7e5      	b.n	800e508 <cos+0x18>
 800e53c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e540:	ed9d 0b00 	vldr	d0, [sp]
 800e544:	f000 fcd8 	bl	800eef8 <__kernel_sin>
 800e548:	eeb1 0b40 	vneg.f64	d0, d0
 800e54c:	e7e4      	b.n	800e518 <cos+0x28>
 800e54e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e552:	ed9d 0b00 	vldr	d0, [sp]
 800e556:	f000 f9e3 	bl	800e920 <__kernel_cos>
 800e55a:	e7f5      	b.n	800e548 <cos+0x58>
 800e55c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e560:	ed9d 0b00 	vldr	d0, [sp]
 800e564:	2001      	movs	r0, #1
 800e566:	f000 fcc7 	bl	800eef8 <__kernel_sin>
 800e56a:	e7d5      	b.n	800e518 <cos+0x28>
 800e56c:	f3af 8000 	nop.w
	...
 800e578:	3fe921fb 	.word	0x3fe921fb
 800e57c:	7fefffff 	.word	0x7fefffff

0800e580 <logf>:
 800e580:	ee10 3a10 	vmov	r3, s0
 800e584:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e588:	b410      	push	{r4}
 800e58a:	d055      	beq.n	800e638 <logf+0xb8>
 800e58c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800e590:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800e594:	d31a      	bcc.n	800e5cc <logf+0x4c>
 800e596:	005a      	lsls	r2, r3, #1
 800e598:	d104      	bne.n	800e5a4 <logf+0x24>
 800e59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e59e:	2001      	movs	r0, #1
 800e5a0:	f000 bd0e 	b.w	800efc0 <__math_divzerof>
 800e5a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e5a8:	d043      	beq.n	800e632 <logf+0xb2>
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	db02      	blt.n	800e5b4 <logf+0x34>
 800e5ae:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800e5b2:	d303      	bcc.n	800e5bc <logf+0x3c>
 800e5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5b8:	f000 bd12 	b.w	800efe0 <__math_invalidf>
 800e5bc:	eddf 7a20 	vldr	s15, [pc, #128]	; 800e640 <logf+0xc0>
 800e5c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e5c4:	ee10 3a10 	vmov	r3, s0
 800e5c8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800e5cc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800e5d0:	491c      	ldr	r1, [pc, #112]	; (800e644 <logf+0xc4>)
 800e5d2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800e5d6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800e5da:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800e5de:	0dd4      	lsrs	r4, r2, #23
 800e5e0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800e5e4:	05e4      	lsls	r4, r4, #23
 800e5e6:	ed90 6b00 	vldr	d6, [r0]
 800e5ea:	1b1b      	subs	r3, r3, r4
 800e5ec:	ee07 3a90 	vmov	s15, r3
 800e5f0:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800e5f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e5f8:	15d2      	asrs	r2, r2, #23
 800e5fa:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e5fe:	ed90 6b02 	vldr	d6, [r0, #8]
 800e602:	ee07 2a90 	vmov	s15, r2
 800e606:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800e60a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e60e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e612:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800e616:	ee20 5b00 	vmul.f64	d5, d0, d0
 800e61a:	eea4 7b00 	vfma.f64	d7, d4, d0
 800e61e:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800e622:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e626:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e62a:	eea5 0b07 	vfma.f64	d0, d5, d7
 800e62e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800e648 <logf+0xc8>
 800e63c:	e7f9      	b.n	800e632 <logf+0xb2>
 800e63e:	bf00      	nop
 800e640:	4b000000 	.word	0x4b000000
 800e644:	0802a2b0 	.word	0x0802a2b0
 800e648:	00000000 	.word	0x00000000

0800e64c <sqrtf>:
 800e64c:	b508      	push	{r3, lr}
 800e64e:	ed2d 8b02 	vpush	{d8}
 800e652:	eeb0 8a40 	vmov.f32	s16, s0
 800e656:	f000 f95f 	bl	800e918 <__ieee754_sqrtf>
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <sqrtf+0x44>)
 800e65c:	f993 3000 	ldrsb.w	r3, [r3]
 800e660:	3301      	adds	r3, #1
 800e662:	d011      	beq.n	800e688 <sqrtf+0x3c>
 800e664:	eeb4 8a48 	vcmp.f32	s16, s16
 800e668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66c:	d60c      	bvs.n	800e688 <sqrtf+0x3c>
 800e66e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800e694 <sqrtf+0x48>
 800e672:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67a:	d505      	bpl.n	800e688 <sqrtf+0x3c>
 800e67c:	f000 fdde 	bl	800f23c <__errno>
 800e680:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e684:	2321      	movs	r3, #33	; 0x21
 800e686:	6003      	str	r3, [r0, #0]
 800e688:	ecbd 8b02 	vpop	{d8}
 800e68c:	bd08      	pop	{r3, pc}
 800e68e:	bf00      	nop
 800e690:	20000018 	.word	0x20000018
 800e694:	00000000 	.word	0x00000000

0800e698 <__ieee754_rem_pio2>:
 800e698:	b570      	push	{r4, r5, r6, lr}
 800e69a:	eeb0 7b40 	vmov.f64	d7, d0
 800e69e:	ee17 5a90 	vmov	r5, s15
 800e6a2:	4b97      	ldr	r3, [pc, #604]	; (800e900 <__ieee754_rem_pio2+0x268>)
 800e6a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e6a8:	429e      	cmp	r6, r3
 800e6aa:	b088      	sub	sp, #32
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	dc07      	bgt.n	800e6c0 <__ieee754_rem_pio2+0x28>
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	ed84 0b00 	vstr	d0, [r4]
 800e6b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e01b      	b.n	800e6f8 <__ieee754_rem_pio2+0x60>
 800e6c0:	4b90      	ldr	r3, [pc, #576]	; (800e904 <__ieee754_rem_pio2+0x26c>)
 800e6c2:	429e      	cmp	r6, r3
 800e6c4:	dc3b      	bgt.n	800e73e <__ieee754_rem_pio2+0xa6>
 800e6c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e6ca:	2d00      	cmp	r5, #0
 800e6cc:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e8c0 <__ieee754_rem_pio2+0x228>
 800e6d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e6d4:	dd19      	ble.n	800e70a <__ieee754_rem_pio2+0x72>
 800e6d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e6da:	429e      	cmp	r6, r3
 800e6dc:	d00e      	beq.n	800e6fc <__ieee754_rem_pio2+0x64>
 800e6de:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800e8c8 <__ieee754_rem_pio2+0x230>
 800e6e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e6e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e6ea:	ed84 5b00 	vstr	d5, [r4]
 800e6ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6f2:	ed84 7b02 	vstr	d7, [r4, #8]
 800e6f6:	2001      	movs	r0, #1
 800e6f8:	b008      	add	sp, #32
 800e6fa:	bd70      	pop	{r4, r5, r6, pc}
 800e6fc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e8d0 <__ieee754_rem_pio2+0x238>
 800e700:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e704:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e8d8 <__ieee754_rem_pio2+0x240>
 800e708:	e7eb      	b.n	800e6e2 <__ieee754_rem_pio2+0x4a>
 800e70a:	429e      	cmp	r6, r3
 800e70c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e710:	d00e      	beq.n	800e730 <__ieee754_rem_pio2+0x98>
 800e712:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800e8c8 <__ieee754_rem_pio2+0x230>
 800e716:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e71a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e71e:	ed84 5b00 	vstr	d5, [r4]
 800e722:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e726:	f04f 30ff 	mov.w	r0, #4294967295
 800e72a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e72e:	e7e3      	b.n	800e6f8 <__ieee754_rem_pio2+0x60>
 800e730:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e8d0 <__ieee754_rem_pio2+0x238>
 800e734:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e738:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e8d8 <__ieee754_rem_pio2+0x240>
 800e73c:	e7eb      	b.n	800e716 <__ieee754_rem_pio2+0x7e>
 800e73e:	4b72      	ldr	r3, [pc, #456]	; (800e908 <__ieee754_rem_pio2+0x270>)
 800e740:	429e      	cmp	r6, r3
 800e742:	dc6e      	bgt.n	800e822 <__ieee754_rem_pio2+0x18a>
 800e744:	f000 fc5b 	bl	800effe <fabs>
 800e748:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e74c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800e8e0 <__ieee754_rem_pio2+0x248>
 800e750:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e754:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e758:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e75c:	ee17 0a90 	vmov	r0, s15
 800e760:	eeb1 4b45 	vneg.f64	d4, d5
 800e764:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e8c0 <__ieee754_rem_pio2+0x228>
 800e768:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e76c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e8c8 <__ieee754_rem_pio2+0x230>
 800e770:	281f      	cmp	r0, #31
 800e772:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e776:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e77a:	dc08      	bgt.n	800e78e <__ieee754_rem_pio2+0xf6>
 800e77c:	4b63      	ldr	r3, [pc, #396]	; (800e90c <__ieee754_rem_pio2+0x274>)
 800e77e:	1e42      	subs	r2, r0, #1
 800e780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e784:	42b3      	cmp	r3, r6
 800e786:	d002      	beq.n	800e78e <__ieee754_rem_pio2+0xf6>
 800e788:	ed84 6b00 	vstr	d6, [r4]
 800e78c:	e024      	b.n	800e7d8 <__ieee754_rem_pio2+0x140>
 800e78e:	ee16 3a90 	vmov	r3, s13
 800e792:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e796:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e79a:	2b10      	cmp	r3, #16
 800e79c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e7a0:	ddf2      	ble.n	800e788 <__ieee754_rem_pio2+0xf0>
 800e7a2:	eeb0 6b40 	vmov.f64	d6, d0
 800e7a6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800e8d0 <__ieee754_rem_pio2+0x238>
 800e7aa:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e7ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e7b2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e7b6:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800e8d8 <__ieee754_rem_pio2+0x240>
 800e7ba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e7be:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e7c2:	ee13 3a90 	vmov	r3, s7
 800e7c6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e7ca:	1ad3      	subs	r3, r2, r3
 800e7cc:	2b31      	cmp	r3, #49	; 0x31
 800e7ce:	dc17      	bgt.n	800e800 <__ieee754_rem_pio2+0x168>
 800e7d0:	eeb0 0b46 	vmov.f64	d0, d6
 800e7d4:	ed84 3b00 	vstr	d3, [r4]
 800e7d8:	ed94 6b00 	vldr	d6, [r4]
 800e7dc:	2d00      	cmp	r5, #0
 800e7de:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e7e2:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e7e6:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7ea:	da85      	bge.n	800e6f8 <__ieee754_rem_pio2+0x60>
 800e7ec:	eeb1 6b46 	vneg.f64	d6, d6
 800e7f0:	ed84 6b00 	vstr	d6, [r4]
 800e7f4:	eeb1 7b47 	vneg.f64	d7, d7
 800e7f8:	4240      	negs	r0, r0
 800e7fa:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7fe:	e77b      	b.n	800e6f8 <__ieee754_rem_pio2+0x60>
 800e800:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800e8e8 <__ieee754_rem_pio2+0x250>
 800e804:	eeb0 0b46 	vmov.f64	d0, d6
 800e808:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e80c:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e810:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800e8f0 <__ieee754_rem_pio2+0x258>
 800e814:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e818:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e81c:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e820:	e7b2      	b.n	800e788 <__ieee754_rem_pio2+0xf0>
 800e822:	4b3b      	ldr	r3, [pc, #236]	; (800e910 <__ieee754_rem_pio2+0x278>)
 800e824:	429e      	cmp	r6, r3
 800e826:	dd06      	ble.n	800e836 <__ieee754_rem_pio2+0x19e>
 800e828:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e82c:	ed80 7b02 	vstr	d7, [r0, #8]
 800e830:	ed80 7b00 	vstr	d7, [r0]
 800e834:	e742      	b.n	800e6bc <__ieee754_rem_pio2+0x24>
 800e836:	1532      	asrs	r2, r6, #20
 800e838:	ee10 0a10 	vmov	r0, s0
 800e83c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e840:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e844:	ec41 0b17 	vmov	d7, r0, r1
 800e848:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e84c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800e8f8 <__ieee754_rem_pio2+0x260>
 800e850:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e854:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e858:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e85c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e860:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e864:	a902      	add	r1, sp, #8
 800e866:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e86a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e86e:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e872:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e876:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e87a:	2603      	movs	r6, #3
 800e87c:	4608      	mov	r0, r1
 800e87e:	ed91 7b04 	vldr	d7, [r1, #16]
 800e882:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88a:	4633      	mov	r3, r6
 800e88c:	f1a1 0108 	sub.w	r1, r1, #8
 800e890:	f106 36ff 	add.w	r6, r6, #4294967295
 800e894:	d0f3      	beq.n	800e87e <__ieee754_rem_pio2+0x1e6>
 800e896:	491f      	ldr	r1, [pc, #124]	; (800e914 <__ieee754_rem_pio2+0x27c>)
 800e898:	9101      	str	r1, [sp, #4]
 800e89a:	2102      	movs	r1, #2
 800e89c:	9100      	str	r1, [sp, #0]
 800e89e:	4621      	mov	r1, r4
 800e8a0:	f000 f8aa 	bl	800e9f8 <__kernel_rem_pio2>
 800e8a4:	2d00      	cmp	r5, #0
 800e8a6:	f6bf af27 	bge.w	800e6f8 <__ieee754_rem_pio2+0x60>
 800e8aa:	ed94 7b00 	vldr	d7, [r4]
 800e8ae:	eeb1 7b47 	vneg.f64	d7, d7
 800e8b2:	ed84 7b00 	vstr	d7, [r4]
 800e8b6:	ed94 7b02 	vldr	d7, [r4, #8]
 800e8ba:	e79b      	b.n	800e7f4 <__ieee754_rem_pio2+0x15c>
 800e8bc:	f3af 8000 	nop.w
 800e8c0:	54400000 	.word	0x54400000
 800e8c4:	3ff921fb 	.word	0x3ff921fb
 800e8c8:	1a626331 	.word	0x1a626331
 800e8cc:	3dd0b461 	.word	0x3dd0b461
 800e8d0:	1a600000 	.word	0x1a600000
 800e8d4:	3dd0b461 	.word	0x3dd0b461
 800e8d8:	2e037073 	.word	0x2e037073
 800e8dc:	3ba3198a 	.word	0x3ba3198a
 800e8e0:	6dc9c883 	.word	0x6dc9c883
 800e8e4:	3fe45f30 	.word	0x3fe45f30
 800e8e8:	2e000000 	.word	0x2e000000
 800e8ec:	3ba3198a 	.word	0x3ba3198a
 800e8f0:	252049c1 	.word	0x252049c1
 800e8f4:	397b839a 	.word	0x397b839a
 800e8f8:	00000000 	.word	0x00000000
 800e8fc:	41700000 	.word	0x41700000
 800e900:	3fe921fb 	.word	0x3fe921fb
 800e904:	4002d97b 	.word	0x4002d97b
 800e908:	413921fb 	.word	0x413921fb
 800e90c:	0802a3d0 	.word	0x0802a3d0
 800e910:	7fefffff 	.word	0x7fefffff
 800e914:	0802a450 	.word	0x0802a450

0800e918 <__ieee754_sqrtf>:
 800e918:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e91c:	4770      	bx	lr
	...

0800e920 <__kernel_cos>:
 800e920:	ee10 1a90 	vmov	r1, s1
 800e924:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e92c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e930:	da05      	bge.n	800e93e <__kernel_cos+0x1e>
 800e932:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e936:	ee17 3a90 	vmov	r3, s15
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d03d      	beq.n	800e9ba <__kernel_cos+0x9a>
 800e93e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800e942:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e9c0 <__kernel_cos+0xa0>
 800e946:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e9c8 <__kernel_cos+0xa8>
 800e94a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800e94e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e9d0 <__kernel_cos+0xb0>
 800e952:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e956:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e9d8 <__kernel_cos+0xb8>
 800e95a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e95e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e9e0 <__kernel_cos+0xc0>
 800e962:	4b23      	ldr	r3, [pc, #140]	; (800e9f0 <__kernel_cos+0xd0>)
 800e964:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e968:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800e9e8 <__kernel_cos+0xc8>
 800e96c:	4299      	cmp	r1, r3
 800e96e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e972:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e976:	ee26 5b03 	vmul.f64	d5, d6, d3
 800e97a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e97e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800e982:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e986:	dc04      	bgt.n	800e992 <__kernel_cos+0x72>
 800e988:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e98c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800e990:	4770      	bx	lr
 800e992:	4b18      	ldr	r3, [pc, #96]	; (800e9f4 <__kernel_cos+0xd4>)
 800e994:	4299      	cmp	r1, r3
 800e996:	dc0d      	bgt.n	800e9b4 <__kernel_cos+0x94>
 800e998:	2200      	movs	r2, #0
 800e99a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e99e:	ec43 2b15 	vmov	d5, r2, r3
 800e9a2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800e9a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e9aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e9b2:	4770      	bx	lr
 800e9b4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e9b8:	e7f3      	b.n	800e9a2 <__kernel_cos+0x82>
 800e9ba:	eeb0 0b44 	vmov.f64	d0, d4
 800e9be:	4770      	bx	lr
 800e9c0:	be8838d4 	.word	0xbe8838d4
 800e9c4:	bda8fae9 	.word	0xbda8fae9
 800e9c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e9cc:	3e21ee9e 	.word	0x3e21ee9e
 800e9d0:	809c52ad 	.word	0x809c52ad
 800e9d4:	be927e4f 	.word	0xbe927e4f
 800e9d8:	19cb1590 	.word	0x19cb1590
 800e9dc:	3efa01a0 	.word	0x3efa01a0
 800e9e0:	16c15177 	.word	0x16c15177
 800e9e4:	bf56c16c 	.word	0xbf56c16c
 800e9e8:	5555554c 	.word	0x5555554c
 800e9ec:	3fa55555 	.word	0x3fa55555
 800e9f0:	3fd33332 	.word	0x3fd33332
 800e9f4:	3fe90000 	.word	0x3fe90000

0800e9f8 <__kernel_rem_pio2>:
 800e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	ed2d 8b06 	vpush	{d8-d10}
 800ea00:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800ea04:	469b      	mov	fp, r3
 800ea06:	460f      	mov	r7, r1
 800ea08:	4bcf      	ldr	r3, [pc, #828]	; (800ed48 <__kernel_rem_pio2+0x350>)
 800ea0a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800ea0c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800ea10:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ea14:	9000      	str	r0, [sp, #0]
 800ea16:	f112 0f14 	cmn.w	r2, #20
 800ea1a:	bfa8      	it	ge
 800ea1c:	2318      	movge	r3, #24
 800ea1e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800ea22:	bfb8      	it	lt
 800ea24:	2300      	movlt	r3, #0
 800ea26:	f06f 0417 	mvn.w	r4, #23
 800ea2a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800ed30 <__kernel_rem_pio2+0x338>
 800ea2e:	bfa4      	itt	ge
 800ea30:	f1a2 0a03 	subge.w	sl, r2, #3
 800ea34:	fb9a f3f3 	sdivge	r3, sl, r3
 800ea38:	fb03 4404 	mla	r4, r3, r4, r4
 800ea3c:	1a5d      	subs	r5, r3, r1
 800ea3e:	4414      	add	r4, r2
 800ea40:	eb09 0601 	add.w	r6, r9, r1
 800ea44:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800ea48:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	42b2      	cmp	r2, r6
 800ea50:	dd12      	ble.n	800ea78 <__kernel_rem_pio2+0x80>
 800ea52:	aa18      	add	r2, sp, #96	; 0x60
 800ea54:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ea58:	460e      	mov	r6, r1
 800ea5a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800ea5e:	f1cb 0a01 	rsb	sl, fp, #1
 800ea62:	eb0a 0006 	add.w	r0, sl, r6
 800ea66:	4581      	cmp	r9, r0
 800ea68:	db25      	blt.n	800eab6 <__kernel_rem_pio2+0xbe>
 800ea6a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800ed30 <__kernel_rem_pio2+0x338>
 800ea6e:	f8dd e000 	ldr.w	lr, [sp]
 800ea72:	4615      	mov	r5, r2
 800ea74:	2000      	movs	r0, #0
 800ea76:	e015      	b.n	800eaa4 <__kernel_rem_pio2+0xac>
 800ea78:	42d5      	cmn	r5, r2
 800ea7a:	d409      	bmi.n	800ea90 <__kernel_rem_pio2+0x98>
 800ea7c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ea80:	ee07 0a90 	vmov	s15, r0
 800ea84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea88:	eca8 7b02 	vstmia	r8!, {d7}
 800ea8c:	3201      	adds	r2, #1
 800ea8e:	e7de      	b.n	800ea4e <__kernel_rem_pio2+0x56>
 800ea90:	eeb0 7b46 	vmov.f64	d7, d6
 800ea94:	e7f8      	b.n	800ea88 <__kernel_rem_pio2+0x90>
 800ea96:	ecbe 5b02 	vldmia	lr!, {d5}
 800ea9a:	ed95 6b00 	vldr	d6, [r5]
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800eaa4:	4288      	cmp	r0, r1
 800eaa6:	f1a5 0508 	sub.w	r5, r5, #8
 800eaaa:	ddf4      	ble.n	800ea96 <__kernel_rem_pio2+0x9e>
 800eaac:	eca8 7b02 	vstmia	r8!, {d7}
 800eab0:	3208      	adds	r2, #8
 800eab2:	3601      	adds	r6, #1
 800eab4:	e7d5      	b.n	800ea62 <__kernel_rem_pio2+0x6a>
 800eab6:	aa04      	add	r2, sp, #16
 800eab8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800ed38 <__kernel_rem_pio2+0x340>
 800eabc:	ed9f aba0 	vldr	d10, [pc, #640]	; 800ed40 <__kernel_rem_pio2+0x348>
 800eac0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800eac4:	9201      	str	r2, [sp, #4]
 800eac6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800eaca:	464e      	mov	r6, r9
 800eacc:	ab90      	add	r3, sp, #576	; 0x240
 800eace:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ead2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ead6:	ab04      	add	r3, sp, #16
 800ead8:	4618      	mov	r0, r3
 800eada:	4632      	mov	r2, r6
 800eadc:	2a00      	cmp	r2, #0
 800eade:	dc4e      	bgt.n	800eb7e <__kernel_rem_pio2+0x186>
 800eae0:	4620      	mov	r0, r4
 800eae2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800eae6:	f000 fb07 	bl	800f0f8 <scalbn>
 800eaea:	eeb0 8b40 	vmov.f64	d8, d0
 800eaee:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800eaf2:	ee28 0b00 	vmul.f64	d0, d8, d0
 800eaf6:	f000 fa8b 	bl	800f010 <floor>
 800eafa:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800eafe:	eea0 8b47 	vfms.f64	d8, d0, d7
 800eb02:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800eb06:	2c00      	cmp	r4, #0
 800eb08:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800eb0c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800eb10:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eb14:	ee17 8a90 	vmov	r8, s15
 800eb18:	dd46      	ble.n	800eba8 <__kernel_rem_pio2+0x1b0>
 800eb1a:	1e70      	subs	r0, r6, #1
 800eb1c:	aa04      	add	r2, sp, #16
 800eb1e:	f1c4 0c18 	rsb	ip, r4, #24
 800eb22:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800eb26:	fa45 f20c 	asr.w	r2, r5, ip
 800eb2a:	4490      	add	r8, r2
 800eb2c:	fa02 f20c 	lsl.w	r2, r2, ip
 800eb30:	1aad      	subs	r5, r5, r2
 800eb32:	aa04      	add	r2, sp, #16
 800eb34:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800eb38:	f1c4 0217 	rsb	r2, r4, #23
 800eb3c:	4115      	asrs	r5, r2
 800eb3e:	2d00      	cmp	r5, #0
 800eb40:	dd41      	ble.n	800ebc6 <__kernel_rem_pio2+0x1ce>
 800eb42:	f04f 0c00 	mov.w	ip, #0
 800eb46:	f108 0801 	add.w	r8, r8, #1
 800eb4a:	4660      	mov	r0, ip
 800eb4c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800eb50:	4566      	cmp	r6, ip
 800eb52:	dc69      	bgt.n	800ec28 <__kernel_rem_pio2+0x230>
 800eb54:	2c00      	cmp	r4, #0
 800eb56:	dd03      	ble.n	800eb60 <__kernel_rem_pio2+0x168>
 800eb58:	2c01      	cmp	r4, #1
 800eb5a:	d076      	beq.n	800ec4a <__kernel_rem_pio2+0x252>
 800eb5c:	2c02      	cmp	r4, #2
 800eb5e:	d07f      	beq.n	800ec60 <__kernel_rem_pio2+0x268>
 800eb60:	2d02      	cmp	r5, #2
 800eb62:	d130      	bne.n	800ebc6 <__kernel_rem_pio2+0x1ce>
 800eb64:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eb68:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eb6c:	b358      	cbz	r0, 800ebc6 <__kernel_rem_pio2+0x1ce>
 800eb6e:	4620      	mov	r0, r4
 800eb70:	9102      	str	r1, [sp, #8]
 800eb72:	f000 fac1 	bl	800f0f8 <scalbn>
 800eb76:	9902      	ldr	r1, [sp, #8]
 800eb78:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eb7c:	e023      	b.n	800ebc6 <__kernel_rem_pio2+0x1ce>
 800eb7e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800eb82:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eb86:	3a01      	subs	r2, #1
 800eb88:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eb8c:	ad68      	add	r5, sp, #416	; 0x1a0
 800eb8e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800eb92:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800eb96:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800eb9a:	eca0 0a01 	vstmia	r0!, {s0}
 800eb9e:	ed95 0b00 	vldr	d0, [r5]
 800eba2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800eba6:	e799      	b.n	800eadc <__kernel_rem_pio2+0xe4>
 800eba8:	d105      	bne.n	800ebb6 <__kernel_rem_pio2+0x1be>
 800ebaa:	1e72      	subs	r2, r6, #1
 800ebac:	a804      	add	r0, sp, #16
 800ebae:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800ebb2:	15ed      	asrs	r5, r5, #23
 800ebb4:	e7c3      	b.n	800eb3e <__kernel_rem_pio2+0x146>
 800ebb6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ebba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ebbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc2:	da2f      	bge.n	800ec24 <__kernel_rem_pio2+0x22c>
 800ebc4:	2500      	movs	r5, #0
 800ebc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ebca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebce:	f040 8087 	bne.w	800ece0 <__kernel_rem_pio2+0x2e8>
 800ebd2:	1e73      	subs	r3, r6, #1
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f04f 0c00 	mov.w	ip, #0
 800ebda:	4548      	cmp	r0, r9
 800ebdc:	da47      	bge.n	800ec6e <__kernel_rem_pio2+0x276>
 800ebde:	f1bc 0f00 	cmp.w	ip, #0
 800ebe2:	d070      	beq.n	800ecc6 <__kernel_rem_pio2+0x2ce>
 800ebe4:	aa04      	add	r2, sp, #16
 800ebe6:	3c18      	subs	r4, #24
 800ebe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ebec:	2a00      	cmp	r2, #0
 800ebee:	d075      	beq.n	800ecdc <__kernel_rem_pio2+0x2e4>
 800ebf0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	f000 fa7e 	bl	800f0f8 <scalbn>
 800ebfc:	9b00      	ldr	r3, [sp, #0]
 800ebfe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800ed38 <__kernel_rem_pio2+0x340>
 800ec02:	461a      	mov	r2, r3
 800ec04:	2a00      	cmp	r2, #0
 800ec06:	f280 80ac 	bge.w	800ed62 <__kernel_rem_pio2+0x36a>
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	2900      	cmp	r1, #0
 800ec10:	f2c0 80cd 	blt.w	800edae <__kernel_rem_pio2+0x3b6>
 800ec14:	aa68      	add	r2, sp, #416	; 0x1a0
 800ec16:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800ec1a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800ed30 <__kernel_rem_pio2+0x338>
 800ec1e:	4e4b      	ldr	r6, [pc, #300]	; (800ed4c <__kernel_rem_pio2+0x354>)
 800ec20:	2200      	movs	r2, #0
 800ec22:	e0b8      	b.n	800ed96 <__kernel_rem_pio2+0x39e>
 800ec24:	2502      	movs	r5, #2
 800ec26:	e78c      	b.n	800eb42 <__kernel_rem_pio2+0x14a>
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	b948      	cbnz	r0, 800ec40 <__kernel_rem_pio2+0x248>
 800ec2c:	b11a      	cbz	r2, 800ec36 <__kernel_rem_pio2+0x23e>
 800ec2e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f10c 0c01 	add.w	ip, ip, #1
 800ec3a:	3304      	adds	r3, #4
 800ec3c:	4610      	mov	r0, r2
 800ec3e:	e787      	b.n	800eb50 <__kernel_rem_pio2+0x158>
 800ec40:	ebae 0202 	sub.w	r2, lr, r2
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	4602      	mov	r2, r0
 800ec48:	e7f5      	b.n	800ec36 <__kernel_rem_pio2+0x23e>
 800ec4a:	1e72      	subs	r2, r6, #1
 800ec4c:	ab04      	add	r3, sp, #16
 800ec4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec52:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec56:	f10d 0c10 	add.w	ip, sp, #16
 800ec5a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800ec5e:	e77f      	b.n	800eb60 <__kernel_rem_pio2+0x168>
 800ec60:	1e72      	subs	r2, r6, #1
 800ec62:	ab04      	add	r3, sp, #16
 800ec64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec6c:	e7f3      	b.n	800ec56 <__kernel_rem_pio2+0x25e>
 800ec6e:	aa04      	add	r2, sp, #16
 800ec70:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ec74:	3801      	subs	r0, #1
 800ec76:	ea4c 0c02 	orr.w	ip, ip, r2
 800ec7a:	e7ae      	b.n	800ebda <__kernel_rem_pio2+0x1e2>
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ec82:	2a00      	cmp	r2, #0
 800ec84:	d0fa      	beq.n	800ec7c <__kernel_rem_pio2+0x284>
 800ec86:	eb06 020b 	add.w	r2, r6, fp
 800ec8a:	ad18      	add	r5, sp, #96	; 0x60
 800ec8c:	1c73      	adds	r3, r6, #1
 800ec8e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ec92:	4406      	add	r6, r0
 800ec94:	429e      	cmp	r6, r3
 800ec96:	f6ff af19 	blt.w	800eacc <__kernel_rem_pio2+0xd4>
 800ec9a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ec9e:	9d00      	ldr	r5, [sp, #0]
 800eca0:	ee07 0a90 	vmov	s15, r0
 800eca4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eca8:	2000      	movs	r0, #0
 800ecaa:	eca2 7b02 	vstmia	r2!, {d7}
 800ecae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ed30 <__kernel_rem_pio2+0x338>
 800ecb2:	4694      	mov	ip, r2
 800ecb4:	4288      	cmp	r0, r1
 800ecb6:	dd09      	ble.n	800eccc <__kernel_rem_pio2+0x2d4>
 800ecb8:	a868      	add	r0, sp, #416	; 0x1a0
 800ecba:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800ecbe:	ed80 7b00 	vstr	d7, [r0]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	e7e6      	b.n	800ec94 <__kernel_rem_pio2+0x29c>
 800ecc6:	9b01      	ldr	r3, [sp, #4]
 800ecc8:	2001      	movs	r0, #1
 800ecca:	e7d8      	b.n	800ec7e <__kernel_rem_pio2+0x286>
 800eccc:	ecb5 5b02 	vldmia	r5!, {d5}
 800ecd0:	ed3c 6b02 	vldmdb	ip!, {d6}
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ecda:	e7eb      	b.n	800ecb4 <__kernel_rem_pio2+0x2bc>
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	e781      	b.n	800ebe4 <__kernel_rem_pio2+0x1ec>
 800ece0:	4260      	negs	r0, r4
 800ece2:	eeb0 0b48 	vmov.f64	d0, d8
 800ece6:	f000 fa07 	bl	800f0f8 <scalbn>
 800ecea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ed40 <__kernel_rem_pio2+0x348>
 800ecee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ecf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf6:	db2b      	blt.n	800ed50 <__kernel_rem_pio2+0x358>
 800ecf8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ed38 <__kernel_rem_pio2+0x340>
 800ecfc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ed00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ed04:	aa04      	add	r2, sp, #16
 800ed06:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ed0a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ed0e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ed12:	a904      	add	r1, sp, #16
 800ed14:	ee10 3a10 	vmov	r3, s0
 800ed18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ed1c:	ee17 2a10 	vmov	r2, s14
 800ed20:	1c73      	adds	r3, r6, #1
 800ed22:	3418      	adds	r4, #24
 800ed24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ed28:	e762      	b.n	800ebf0 <__kernel_rem_pio2+0x1f8>
 800ed2a:	bf00      	nop
 800ed2c:	f3af 8000 	nop.w
	...
 800ed3c:	3e700000 	.word	0x3e700000
 800ed40:	00000000 	.word	0x00000000
 800ed44:	41700000 	.word	0x41700000
 800ed48:	0802ae08 	.word	0x0802ae08
 800ed4c:	0802adc8 	.word	0x0802adc8
 800ed50:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ed54:	aa04      	add	r2, sp, #16
 800ed56:	ee10 3a10 	vmov	r3, s0
 800ed5a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ed5e:	4633      	mov	r3, r6
 800ed60:	e746      	b.n	800ebf0 <__kernel_rem_pio2+0x1f8>
 800ed62:	a804      	add	r0, sp, #16
 800ed64:	a968      	add	r1, sp, #416	; 0x1a0
 800ed66:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ed6a:	9000      	str	r0, [sp, #0]
 800ed6c:	ee07 0a90 	vmov	s15, r0
 800ed70:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ed74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed78:	3a01      	subs	r2, #1
 800ed7a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ed7e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ed82:	ed81 7b00 	vstr	d7, [r1]
 800ed86:	e73d      	b.n	800ec04 <__kernel_rem_pio2+0x20c>
 800ed88:	ecb6 5b02 	vldmia	r6!, {d5}
 800ed8c:	ecb4 6b02 	vldmia	r4!, {d6}
 800ed90:	3201      	adds	r2, #1
 800ed92:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed96:	454a      	cmp	r2, r9
 800ed98:	dc01      	bgt.n	800ed9e <__kernel_rem_pio2+0x3a6>
 800ed9a:	4290      	cmp	r0, r2
 800ed9c:	daf4      	bge.n	800ed88 <__kernel_rem_pio2+0x390>
 800ed9e:	aa40      	add	r2, sp, #256	; 0x100
 800eda0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800eda4:	ed82 7b00 	vstr	d7, [r2]
 800eda8:	3901      	subs	r1, #1
 800edaa:	3001      	adds	r0, #1
 800edac:	e72f      	b.n	800ec0e <__kernel_rem_pio2+0x216>
 800edae:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800edb0:	2a02      	cmp	r2, #2
 800edb2:	dc0a      	bgt.n	800edca <__kernel_rem_pio2+0x3d2>
 800edb4:	2a00      	cmp	r2, #0
 800edb6:	dc5a      	bgt.n	800ee6e <__kernel_rem_pio2+0x476>
 800edb8:	d039      	beq.n	800ee2e <__kernel_rem_pio2+0x436>
 800edba:	f008 0007 	and.w	r0, r8, #7
 800edbe:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800edc2:	ecbd 8b06 	vpop	{d8-d10}
 800edc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edca:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800edcc:	2a03      	cmp	r2, #3
 800edce:	d1f4      	bne.n	800edba <__kernel_rem_pio2+0x3c2>
 800edd0:	aa40      	add	r2, sp, #256	; 0x100
 800edd2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800edd6:	4611      	mov	r1, r2
 800edd8:	4618      	mov	r0, r3
 800edda:	2800      	cmp	r0, #0
 800eddc:	f1a1 0108 	sub.w	r1, r1, #8
 800ede0:	dc52      	bgt.n	800ee88 <__kernel_rem_pio2+0x490>
 800ede2:	4619      	mov	r1, r3
 800ede4:	2901      	cmp	r1, #1
 800ede6:	f1a2 0208 	sub.w	r2, r2, #8
 800edea:	dc5d      	bgt.n	800eea8 <__kernel_rem_pio2+0x4b0>
 800edec:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800eef0 <__kernel_rem_pio2+0x4f8>
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	dc69      	bgt.n	800eec8 <__kernel_rem_pio2+0x4d0>
 800edf4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800edf8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800edfc:	2d00      	cmp	r5, #0
 800edfe:	d16c      	bne.n	800eeda <__kernel_rem_pio2+0x4e2>
 800ee00:	ed87 5b00 	vstr	d5, [r7]
 800ee04:	ed87 6b02 	vstr	d6, [r7, #8]
 800ee08:	ed87 7b04 	vstr	d7, [r7, #16]
 800ee0c:	e7d5      	b.n	800edba <__kernel_rem_pio2+0x3c2>
 800ee0e:	aa40      	add	r2, sp, #256	; 0x100
 800ee10:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ee14:	ed92 6b00 	vldr	d6, [r2]
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	daf5      	bge.n	800ee0e <__kernel_rem_pio2+0x416>
 800ee22:	b10d      	cbz	r5, 800ee28 <__kernel_rem_pio2+0x430>
 800ee24:	eeb1 7b47 	vneg.f64	d7, d7
 800ee28:	ed87 7b00 	vstr	d7, [r7]
 800ee2c:	e7c5      	b.n	800edba <__kernel_rem_pio2+0x3c2>
 800ee2e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800eef0 <__kernel_rem_pio2+0x4f8>
 800ee32:	e7f4      	b.n	800ee1e <__kernel_rem_pio2+0x426>
 800ee34:	a940      	add	r1, sp, #256	; 0x100
 800ee36:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ee3a:	ed91 7b00 	vldr	d7, [r1]
 800ee3e:	3a01      	subs	r2, #1
 800ee40:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee44:	2a00      	cmp	r2, #0
 800ee46:	daf5      	bge.n	800ee34 <__kernel_rem_pio2+0x43c>
 800ee48:	b1ad      	cbz	r5, 800ee76 <__kernel_rem_pio2+0x47e>
 800ee4a:	eeb1 7b46 	vneg.f64	d7, d6
 800ee4e:	ed87 7b00 	vstr	d7, [r7]
 800ee52:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800ee56:	a942      	add	r1, sp, #264	; 0x108
 800ee58:	2201      	movs	r2, #1
 800ee5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	da0c      	bge.n	800ee7c <__kernel_rem_pio2+0x484>
 800ee62:	b10d      	cbz	r5, 800ee68 <__kernel_rem_pio2+0x470>
 800ee64:	eeb1 7b47 	vneg.f64	d7, d7
 800ee68:	ed87 7b02 	vstr	d7, [r7, #8]
 800ee6c:	e7a5      	b.n	800edba <__kernel_rem_pio2+0x3c2>
 800ee6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800eef0 <__kernel_rem_pio2+0x4f8>
 800ee72:	461a      	mov	r2, r3
 800ee74:	e7e6      	b.n	800ee44 <__kernel_rem_pio2+0x44c>
 800ee76:	eeb0 7b46 	vmov.f64	d7, d6
 800ee7a:	e7e8      	b.n	800ee4e <__kernel_rem_pio2+0x456>
 800ee7c:	ecb1 6b02 	vldmia	r1!, {d6}
 800ee80:	3201      	adds	r2, #1
 800ee82:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee86:	e7ea      	b.n	800ee5e <__kernel_rem_pio2+0x466>
 800ee88:	ed91 7b00 	vldr	d7, [r1]
 800ee8c:	ed91 5b02 	vldr	d5, [r1, #8]
 800ee90:	3801      	subs	r0, #1
 800ee92:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee96:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee9a:	ed81 6b00 	vstr	d6, [r1]
 800ee9e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800eea2:	ed81 7b02 	vstr	d7, [r1, #8]
 800eea6:	e798      	b.n	800edda <__kernel_rem_pio2+0x3e2>
 800eea8:	ed92 7b00 	vldr	d7, [r2]
 800eeac:	ed92 5b02 	vldr	d5, [r2, #8]
 800eeb0:	3901      	subs	r1, #1
 800eeb2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800eeb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eeba:	ed82 6b00 	vstr	d6, [r2]
 800eebe:	ee37 7b05 	vadd.f64	d7, d7, d5
 800eec2:	ed82 7b02 	vstr	d7, [r2, #8]
 800eec6:	e78d      	b.n	800ede4 <__kernel_rem_pio2+0x3ec>
 800eec8:	aa40      	add	r2, sp, #256	; 0x100
 800eeca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800eece:	ed92 6b00 	vldr	d6, [r2]
 800eed2:	3b01      	subs	r3, #1
 800eed4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eed8:	e78a      	b.n	800edf0 <__kernel_rem_pio2+0x3f8>
 800eeda:	eeb1 5b45 	vneg.f64	d5, d5
 800eede:	eeb1 6b46 	vneg.f64	d6, d6
 800eee2:	ed87 5b00 	vstr	d5, [r7]
 800eee6:	eeb1 7b47 	vneg.f64	d7, d7
 800eeea:	ed87 6b02 	vstr	d6, [r7, #8]
 800eeee:	e78b      	b.n	800ee08 <__kernel_rem_pio2+0x410>
	...

0800eef8 <__kernel_sin>:
 800eef8:	ee10 3a90 	vmov	r3, s1
 800eefc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef00:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ef04:	da04      	bge.n	800ef10 <__kernel_sin+0x18>
 800ef06:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ef0a:	ee17 3a90 	vmov	r3, s15
 800ef0e:	b35b      	cbz	r3, 800ef68 <__kernel_sin+0x70>
 800ef10:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ef14:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ef18:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ef70 <__kernel_sin+0x78>
 800ef1c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef78 <__kernel_sin+0x80>
 800ef20:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ef24:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef80 <__kernel_sin+0x88>
 800ef28:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ef2c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef88 <__kernel_sin+0x90>
 800ef30:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ef34:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef90 <__kernel_sin+0x98>
 800ef38:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ef3c:	b930      	cbnz	r0, 800ef4c <__kernel_sin+0x54>
 800ef3e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef98 <__kernel_sin+0xa0>
 800ef42:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ef46:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ef4a:	4770      	bx	lr
 800ef4c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ef50:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ef54:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ef58:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ef5c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800efa0 <__kernel_sin+0xa8>
 800ef60:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ef64:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	f3af 8000 	nop.w
 800ef70:	5acfd57c 	.word	0x5acfd57c
 800ef74:	3de5d93a 	.word	0x3de5d93a
 800ef78:	8a2b9ceb 	.word	0x8a2b9ceb
 800ef7c:	be5ae5e6 	.word	0xbe5ae5e6
 800ef80:	57b1fe7d 	.word	0x57b1fe7d
 800ef84:	3ec71de3 	.word	0x3ec71de3
 800ef88:	19c161d5 	.word	0x19c161d5
 800ef8c:	bf2a01a0 	.word	0xbf2a01a0
 800ef90:	1110f8a6 	.word	0x1110f8a6
 800ef94:	3f811111 	.word	0x3f811111
 800ef98:	55555549 	.word	0x55555549
 800ef9c:	bfc55555 	.word	0xbfc55555
 800efa0:	55555549 	.word	0x55555549
 800efa4:	3fc55555 	.word	0x3fc55555

0800efa8 <with_errnof>:
 800efa8:	b513      	push	{r0, r1, r4, lr}
 800efaa:	4604      	mov	r4, r0
 800efac:	ed8d 0a01 	vstr	s0, [sp, #4]
 800efb0:	f000 f944 	bl	800f23c <__errno>
 800efb4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800efb8:	6004      	str	r4, [r0, #0]
 800efba:	b002      	add	sp, #8
 800efbc:	bd10      	pop	{r4, pc}
	...

0800efc0 <__math_divzerof>:
 800efc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800efc4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800efc8:	2800      	cmp	r0, #0
 800efca:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800efce:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800efdc <__math_divzerof+0x1c>
 800efd2:	2022      	movs	r0, #34	; 0x22
 800efd4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800efd8:	f7ff bfe6 	b.w	800efa8 <with_errnof>
 800efdc:	00000000 	.word	0x00000000

0800efe0 <__math_invalidf>:
 800efe0:	eef0 7a40 	vmov.f32	s15, s0
 800efe4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800efe8:	eef4 7a67 	vcmp.f32	s15, s15
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800eff4:	d602      	bvs.n	800effc <__math_invalidf+0x1c>
 800eff6:	2021      	movs	r0, #33	; 0x21
 800eff8:	f7ff bfd6 	b.w	800efa8 <with_errnof>
 800effc:	4770      	bx	lr

0800effe <fabs>:
 800effe:	ec51 0b10 	vmov	r0, r1, d0
 800f002:	ee10 2a10 	vmov	r2, s0
 800f006:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f00a:	ec43 2b10 	vmov	d0, r2, r3
 800f00e:	4770      	bx	lr

0800f010 <floor>:
 800f010:	ee10 1a90 	vmov	r1, s1
 800f014:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f018:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f01c:	2b13      	cmp	r3, #19
 800f01e:	b530      	push	{r4, r5, lr}
 800f020:	ee10 0a10 	vmov	r0, s0
 800f024:	ee10 5a10 	vmov	r5, s0
 800f028:	dc31      	bgt.n	800f08e <floor+0x7e>
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	da15      	bge.n	800f05a <floor+0x4a>
 800f02e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f0e8 <floor+0xd8>
 800f032:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f036:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03e:	dd07      	ble.n	800f050 <floor+0x40>
 800f040:	2900      	cmp	r1, #0
 800f042:	da4e      	bge.n	800f0e2 <floor+0xd2>
 800f044:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f048:	4318      	orrs	r0, r3
 800f04a:	d001      	beq.n	800f050 <floor+0x40>
 800f04c:	4928      	ldr	r1, [pc, #160]	; (800f0f0 <floor+0xe0>)
 800f04e:	2000      	movs	r0, #0
 800f050:	460b      	mov	r3, r1
 800f052:	4602      	mov	r2, r0
 800f054:	ec43 2b10 	vmov	d0, r2, r3
 800f058:	e020      	b.n	800f09c <floor+0x8c>
 800f05a:	4a26      	ldr	r2, [pc, #152]	; (800f0f4 <floor+0xe4>)
 800f05c:	411a      	asrs	r2, r3
 800f05e:	ea01 0402 	and.w	r4, r1, r2
 800f062:	4304      	orrs	r4, r0
 800f064:	d01a      	beq.n	800f09c <floor+0x8c>
 800f066:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f0e8 <floor+0xd8>
 800f06a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f06e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f076:	ddeb      	ble.n	800f050 <floor+0x40>
 800f078:	2900      	cmp	r1, #0
 800f07a:	bfbe      	ittt	lt
 800f07c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f080:	fa40 f303 	asrlt.w	r3, r0, r3
 800f084:	18c9      	addlt	r1, r1, r3
 800f086:	ea21 0102 	bic.w	r1, r1, r2
 800f08a:	2000      	movs	r0, #0
 800f08c:	e7e0      	b.n	800f050 <floor+0x40>
 800f08e:	2b33      	cmp	r3, #51	; 0x33
 800f090:	dd05      	ble.n	800f09e <floor+0x8e>
 800f092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f096:	d101      	bne.n	800f09c <floor+0x8c>
 800f098:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f09c:	bd30      	pop	{r4, r5, pc}
 800f09e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a6:	40e2      	lsrs	r2, r4
 800f0a8:	4202      	tst	r2, r0
 800f0aa:	d0f7      	beq.n	800f09c <floor+0x8c>
 800f0ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f0e8 <floor+0xd8>
 800f0b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f0b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0bc:	ddc8      	ble.n	800f050 <floor+0x40>
 800f0be:	2900      	cmp	r1, #0
 800f0c0:	da02      	bge.n	800f0c8 <floor+0xb8>
 800f0c2:	2b14      	cmp	r3, #20
 800f0c4:	d103      	bne.n	800f0ce <floor+0xbe>
 800f0c6:	3101      	adds	r1, #1
 800f0c8:	ea20 0002 	bic.w	r0, r0, r2
 800f0cc:	e7c0      	b.n	800f050 <floor+0x40>
 800f0ce:	2401      	movs	r4, #1
 800f0d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f0d4:	fa04 f303 	lsl.w	r3, r4, r3
 800f0d8:	4418      	add	r0, r3
 800f0da:	42a8      	cmp	r0, r5
 800f0dc:	bf38      	it	cc
 800f0de:	1909      	addcc	r1, r1, r4
 800f0e0:	e7f2      	b.n	800f0c8 <floor+0xb8>
 800f0e2:	2000      	movs	r0, #0
 800f0e4:	4601      	mov	r1, r0
 800f0e6:	e7b3      	b.n	800f050 <floor+0x40>
 800f0e8:	8800759c 	.word	0x8800759c
 800f0ec:	7e37e43c 	.word	0x7e37e43c
 800f0f0:	bff00000 	.word	0xbff00000
 800f0f4:	000fffff 	.word	0x000fffff

0800f0f8 <scalbn>:
 800f0f8:	b082      	sub	sp, #8
 800f0fa:	ed8d 0b00 	vstr	d0, [sp]
 800f0fe:	9b01      	ldr	r3, [sp, #4]
 800f100:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f104:	b9a2      	cbnz	r2, 800f130 <scalbn+0x38>
 800f106:	9a00      	ldr	r2, [sp, #0]
 800f108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f10c:	4313      	orrs	r3, r2
 800f10e:	d03a      	beq.n	800f186 <scalbn+0x8e>
 800f110:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f1e8 <scalbn+0xf0>
 800f114:	4b40      	ldr	r3, [pc, #256]	; (800f218 <scalbn+0x120>)
 800f116:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f11a:	4298      	cmp	r0, r3
 800f11c:	ed8d 7b00 	vstr	d7, [sp]
 800f120:	da11      	bge.n	800f146 <scalbn+0x4e>
 800f122:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f1f0 <scalbn+0xf8>
 800f126:	ed9d 6b00 	vldr	d6, [sp]
 800f12a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f12e:	e007      	b.n	800f140 <scalbn+0x48>
 800f130:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f134:	428a      	cmp	r2, r1
 800f136:	d10a      	bne.n	800f14e <scalbn+0x56>
 800f138:	ed9d 7b00 	vldr	d7, [sp]
 800f13c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f140:	ed8d 7b00 	vstr	d7, [sp]
 800f144:	e01f      	b.n	800f186 <scalbn+0x8e>
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f14c:	3a36      	subs	r2, #54	; 0x36
 800f14e:	4402      	add	r2, r0
 800f150:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f154:	428a      	cmp	r2, r1
 800f156:	dd0a      	ble.n	800f16e <scalbn+0x76>
 800f158:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f1f8 <scalbn+0x100>
 800f15c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f200 <scalbn+0x108>
 800f160:	eeb0 6b47 	vmov.f64	d6, d7
 800f164:	9b01      	ldr	r3, [sp, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f16c:	e7dd      	b.n	800f12a <scalbn+0x32>
 800f16e:	2a00      	cmp	r2, #0
 800f170:	dd0d      	ble.n	800f18e <scalbn+0x96>
 800f172:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f17a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f17e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f182:	e9cd 0100 	strd	r0, r1, [sp]
 800f186:	ed9d 0b00 	vldr	d0, [sp]
 800f18a:	b002      	add	sp, #8
 800f18c:	4770      	bx	lr
 800f18e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f192:	da18      	bge.n	800f1c6 <scalbn+0xce>
 800f194:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f198:	4298      	cmp	r0, r3
 800f19a:	9b01      	ldr	r3, [sp, #4]
 800f19c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1a0:	dd09      	ble.n	800f1b6 <scalbn+0xbe>
 800f1a2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f1f8 <scalbn+0x100>
 800f1a6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f200 <scalbn+0x108>
 800f1aa:	eeb0 6b47 	vmov.f64	d6, d7
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f1b4:	e7b9      	b.n	800f12a <scalbn+0x32>
 800f1b6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f1f0 <scalbn+0xf8>
 800f1ba:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f208 <scalbn+0x110>
 800f1be:	eeb0 6b47 	vmov.f64	d6, d7
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	e7f4      	b.n	800f1b0 <scalbn+0xb8>
 800f1c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1ce:	3236      	adds	r2, #54	; 0x36
 800f1d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1d4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f1d8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f210 <scalbn+0x118>
 800f1dc:	ec41 0b17 	vmov	d7, r0, r1
 800f1e0:	e7a3      	b.n	800f12a <scalbn+0x32>
 800f1e2:	bf00      	nop
 800f1e4:	f3af 8000 	nop.w
 800f1e8:	00000000 	.word	0x00000000
 800f1ec:	43500000 	.word	0x43500000
 800f1f0:	c2f8f359 	.word	0xc2f8f359
 800f1f4:	01a56e1f 	.word	0x01a56e1f
 800f1f8:	8800759c 	.word	0x8800759c
 800f1fc:	7e37e43c 	.word	0x7e37e43c
 800f200:	8800759c 	.word	0x8800759c
 800f204:	fe37e43c 	.word	0xfe37e43c
 800f208:	c2f8f359 	.word	0xc2f8f359
 800f20c:	81a56e1f 	.word	0x81a56e1f
 800f210:	00000000 	.word	0x00000000
 800f214:	3c900000 	.word	0x3c900000
 800f218:	ffff3cb0 	.word	0xffff3cb0

0800f21c <abort>:
 800f21c:	b508      	push	{r3, lr}
 800f21e:	2006      	movs	r0, #6
 800f220:	f000 f968 	bl	800f4f4 <raise>
 800f224:	2001      	movs	r0, #1
 800f226:	f7f4 fdb1 	bl	8003d8c <_exit>
	...

0800f22c <calloc>:
 800f22c:	4b02      	ldr	r3, [pc, #8]	; (800f238 <calloc+0xc>)
 800f22e:	460a      	mov	r2, r1
 800f230:	4601      	mov	r1, r0
 800f232:	6818      	ldr	r0, [r3, #0]
 800f234:	f000 b86c 	b.w	800f310 <_calloc_r>
 800f238:	2000001c 	.word	0x2000001c

0800f23c <__errno>:
 800f23c:	4b01      	ldr	r3, [pc, #4]	; (800f244 <__errno+0x8>)
 800f23e:	6818      	ldr	r0, [r3, #0]
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	2000001c 	.word	0x2000001c

0800f248 <__libc_init_array>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	4d0d      	ldr	r5, [pc, #52]	; (800f280 <__libc_init_array+0x38>)
 800f24c:	4c0d      	ldr	r4, [pc, #52]	; (800f284 <__libc_init_array+0x3c>)
 800f24e:	1b64      	subs	r4, r4, r5
 800f250:	10a4      	asrs	r4, r4, #2
 800f252:	2600      	movs	r6, #0
 800f254:	42a6      	cmp	r6, r4
 800f256:	d109      	bne.n	800f26c <__libc_init_array+0x24>
 800f258:	4d0b      	ldr	r5, [pc, #44]	; (800f288 <__libc_init_array+0x40>)
 800f25a:	4c0c      	ldr	r4, [pc, #48]	; (800f28c <__libc_init_array+0x44>)
 800f25c:	f000 fcba 	bl	800fbd4 <_init>
 800f260:	1b64      	subs	r4, r4, r5
 800f262:	10a4      	asrs	r4, r4, #2
 800f264:	2600      	movs	r6, #0
 800f266:	42a6      	cmp	r6, r4
 800f268:	d105      	bne.n	800f276 <__libc_init_array+0x2e>
 800f26a:	bd70      	pop	{r4, r5, r6, pc}
 800f26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f270:	4798      	blx	r3
 800f272:	3601      	adds	r6, #1
 800f274:	e7ee      	b.n	800f254 <__libc_init_array+0xc>
 800f276:	f855 3b04 	ldr.w	r3, [r5], #4
 800f27a:	4798      	blx	r3
 800f27c:	3601      	adds	r6, #1
 800f27e:	e7f2      	b.n	800f266 <__libc_init_array+0x1e>
 800f280:	0802ae54 	.word	0x0802ae54
 800f284:	0802ae54 	.word	0x0802ae54
 800f288:	0802ae54 	.word	0x0802ae54
 800f28c:	0802ae58 	.word	0x0802ae58

0800f290 <malloc>:
 800f290:	4b02      	ldr	r3, [pc, #8]	; (800f29c <malloc+0xc>)
 800f292:	4601      	mov	r1, r0
 800f294:	6818      	ldr	r0, [r3, #0]
 800f296:	f000 b89b 	b.w	800f3d0 <_malloc_r>
 800f29a:	bf00      	nop
 800f29c:	2000001c 	.word	0x2000001c

0800f2a0 <free>:
 800f2a0:	4b02      	ldr	r3, [pc, #8]	; (800f2ac <free+0xc>)
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	6818      	ldr	r0, [r3, #0]
 800f2a6:	f000 b843 	b.w	800f330 <_free_r>
 800f2aa:	bf00      	nop
 800f2ac:	2000001c 	.word	0x2000001c

0800f2b0 <memcpy>:
 800f2b0:	440a      	add	r2, r1
 800f2b2:	4291      	cmp	r1, r2
 800f2b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2b8:	d100      	bne.n	800f2bc <memcpy+0xc>
 800f2ba:	4770      	bx	lr
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2c6:	4291      	cmp	r1, r2
 800f2c8:	d1f9      	bne.n	800f2be <memcpy+0xe>
 800f2ca:	bd10      	pop	{r4, pc}

0800f2cc <memmove>:
 800f2cc:	4288      	cmp	r0, r1
 800f2ce:	b510      	push	{r4, lr}
 800f2d0:	eb01 0402 	add.w	r4, r1, r2
 800f2d4:	d902      	bls.n	800f2dc <memmove+0x10>
 800f2d6:	4284      	cmp	r4, r0
 800f2d8:	4623      	mov	r3, r4
 800f2da:	d807      	bhi.n	800f2ec <memmove+0x20>
 800f2dc:	1e43      	subs	r3, r0, #1
 800f2de:	42a1      	cmp	r1, r4
 800f2e0:	d008      	beq.n	800f2f4 <memmove+0x28>
 800f2e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2ea:	e7f8      	b.n	800f2de <memmove+0x12>
 800f2ec:	4402      	add	r2, r0
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	428a      	cmp	r2, r1
 800f2f2:	d100      	bne.n	800f2f6 <memmove+0x2a>
 800f2f4:	bd10      	pop	{r4, pc}
 800f2f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2fe:	e7f7      	b.n	800f2f0 <memmove+0x24>

0800f300 <memset>:
 800f300:	4402      	add	r2, r0
 800f302:	4603      	mov	r3, r0
 800f304:	4293      	cmp	r3, r2
 800f306:	d100      	bne.n	800f30a <memset+0xa>
 800f308:	4770      	bx	lr
 800f30a:	f803 1b01 	strb.w	r1, [r3], #1
 800f30e:	e7f9      	b.n	800f304 <memset+0x4>

0800f310 <_calloc_r>:
 800f310:	b513      	push	{r0, r1, r4, lr}
 800f312:	434a      	muls	r2, r1
 800f314:	4611      	mov	r1, r2
 800f316:	9201      	str	r2, [sp, #4]
 800f318:	f000 f85a 	bl	800f3d0 <_malloc_r>
 800f31c:	4604      	mov	r4, r0
 800f31e:	b118      	cbz	r0, 800f328 <_calloc_r+0x18>
 800f320:	9a01      	ldr	r2, [sp, #4]
 800f322:	2100      	movs	r1, #0
 800f324:	f7ff ffec 	bl	800f300 <memset>
 800f328:	4620      	mov	r0, r4
 800f32a:	b002      	add	sp, #8
 800f32c:	bd10      	pop	{r4, pc}
	...

0800f330 <_free_r>:
 800f330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f332:	2900      	cmp	r1, #0
 800f334:	d048      	beq.n	800f3c8 <_free_r+0x98>
 800f336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f33a:	9001      	str	r0, [sp, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f1a1 0404 	sub.w	r4, r1, #4
 800f342:	bfb8      	it	lt
 800f344:	18e4      	addlt	r4, r4, r3
 800f346:	f000 f919 	bl	800f57c <__malloc_lock>
 800f34a:	4a20      	ldr	r2, [pc, #128]	; (800f3cc <_free_r+0x9c>)
 800f34c:	9801      	ldr	r0, [sp, #4]
 800f34e:	6813      	ldr	r3, [r2, #0]
 800f350:	4615      	mov	r5, r2
 800f352:	b933      	cbnz	r3, 800f362 <_free_r+0x32>
 800f354:	6063      	str	r3, [r4, #4]
 800f356:	6014      	str	r4, [r2, #0]
 800f358:	b003      	add	sp, #12
 800f35a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f35e:	f000 b913 	b.w	800f588 <__malloc_unlock>
 800f362:	42a3      	cmp	r3, r4
 800f364:	d90b      	bls.n	800f37e <_free_r+0x4e>
 800f366:	6821      	ldr	r1, [r4, #0]
 800f368:	1862      	adds	r2, r4, r1
 800f36a:	4293      	cmp	r3, r2
 800f36c:	bf04      	itt	eq
 800f36e:	681a      	ldreq	r2, [r3, #0]
 800f370:	685b      	ldreq	r3, [r3, #4]
 800f372:	6063      	str	r3, [r4, #4]
 800f374:	bf04      	itt	eq
 800f376:	1852      	addeq	r2, r2, r1
 800f378:	6022      	streq	r2, [r4, #0]
 800f37a:	602c      	str	r4, [r5, #0]
 800f37c:	e7ec      	b.n	800f358 <_free_r+0x28>
 800f37e:	461a      	mov	r2, r3
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	b10b      	cbz	r3, 800f388 <_free_r+0x58>
 800f384:	42a3      	cmp	r3, r4
 800f386:	d9fa      	bls.n	800f37e <_free_r+0x4e>
 800f388:	6811      	ldr	r1, [r2, #0]
 800f38a:	1855      	adds	r5, r2, r1
 800f38c:	42a5      	cmp	r5, r4
 800f38e:	d10b      	bne.n	800f3a8 <_free_r+0x78>
 800f390:	6824      	ldr	r4, [r4, #0]
 800f392:	4421      	add	r1, r4
 800f394:	1854      	adds	r4, r2, r1
 800f396:	42a3      	cmp	r3, r4
 800f398:	6011      	str	r1, [r2, #0]
 800f39a:	d1dd      	bne.n	800f358 <_free_r+0x28>
 800f39c:	681c      	ldr	r4, [r3, #0]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	6053      	str	r3, [r2, #4]
 800f3a2:	4421      	add	r1, r4
 800f3a4:	6011      	str	r1, [r2, #0]
 800f3a6:	e7d7      	b.n	800f358 <_free_r+0x28>
 800f3a8:	d902      	bls.n	800f3b0 <_free_r+0x80>
 800f3aa:	230c      	movs	r3, #12
 800f3ac:	6003      	str	r3, [r0, #0]
 800f3ae:	e7d3      	b.n	800f358 <_free_r+0x28>
 800f3b0:	6825      	ldr	r5, [r4, #0]
 800f3b2:	1961      	adds	r1, r4, r5
 800f3b4:	428b      	cmp	r3, r1
 800f3b6:	bf04      	itt	eq
 800f3b8:	6819      	ldreq	r1, [r3, #0]
 800f3ba:	685b      	ldreq	r3, [r3, #4]
 800f3bc:	6063      	str	r3, [r4, #4]
 800f3be:	bf04      	itt	eq
 800f3c0:	1949      	addeq	r1, r1, r5
 800f3c2:	6021      	streq	r1, [r4, #0]
 800f3c4:	6054      	str	r4, [r2, #4]
 800f3c6:	e7c7      	b.n	800f358 <_free_r+0x28>
 800f3c8:	b003      	add	sp, #12
 800f3ca:	bd30      	pop	{r4, r5, pc}
 800f3cc:	200003c0 	.word	0x200003c0

0800f3d0 <_malloc_r>:
 800f3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d2:	1ccd      	adds	r5, r1, #3
 800f3d4:	f025 0503 	bic.w	r5, r5, #3
 800f3d8:	3508      	adds	r5, #8
 800f3da:	2d0c      	cmp	r5, #12
 800f3dc:	bf38      	it	cc
 800f3de:	250c      	movcc	r5, #12
 800f3e0:	2d00      	cmp	r5, #0
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	db01      	blt.n	800f3ea <_malloc_r+0x1a>
 800f3e6:	42a9      	cmp	r1, r5
 800f3e8:	d903      	bls.n	800f3f2 <_malloc_r+0x22>
 800f3ea:	230c      	movs	r3, #12
 800f3ec:	6033      	str	r3, [r6, #0]
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3f2:	f000 f8c3 	bl	800f57c <__malloc_lock>
 800f3f6:	4921      	ldr	r1, [pc, #132]	; (800f47c <_malloc_r+0xac>)
 800f3f8:	680a      	ldr	r2, [r1, #0]
 800f3fa:	4614      	mov	r4, r2
 800f3fc:	b99c      	cbnz	r4, 800f426 <_malloc_r+0x56>
 800f3fe:	4f20      	ldr	r7, [pc, #128]	; (800f480 <_malloc_r+0xb0>)
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	b923      	cbnz	r3, 800f40e <_malloc_r+0x3e>
 800f404:	4621      	mov	r1, r4
 800f406:	4630      	mov	r0, r6
 800f408:	f000 f83c 	bl	800f484 <_sbrk_r>
 800f40c:	6038      	str	r0, [r7, #0]
 800f40e:	4629      	mov	r1, r5
 800f410:	4630      	mov	r0, r6
 800f412:	f000 f837 	bl	800f484 <_sbrk_r>
 800f416:	1c43      	adds	r3, r0, #1
 800f418:	d123      	bne.n	800f462 <_malloc_r+0x92>
 800f41a:	230c      	movs	r3, #12
 800f41c:	6033      	str	r3, [r6, #0]
 800f41e:	4630      	mov	r0, r6
 800f420:	f000 f8b2 	bl	800f588 <__malloc_unlock>
 800f424:	e7e3      	b.n	800f3ee <_malloc_r+0x1e>
 800f426:	6823      	ldr	r3, [r4, #0]
 800f428:	1b5b      	subs	r3, r3, r5
 800f42a:	d417      	bmi.n	800f45c <_malloc_r+0x8c>
 800f42c:	2b0b      	cmp	r3, #11
 800f42e:	d903      	bls.n	800f438 <_malloc_r+0x68>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	441c      	add	r4, r3
 800f434:	6025      	str	r5, [r4, #0]
 800f436:	e004      	b.n	800f442 <_malloc_r+0x72>
 800f438:	6863      	ldr	r3, [r4, #4]
 800f43a:	42a2      	cmp	r2, r4
 800f43c:	bf0c      	ite	eq
 800f43e:	600b      	streq	r3, [r1, #0]
 800f440:	6053      	strne	r3, [r2, #4]
 800f442:	4630      	mov	r0, r6
 800f444:	f000 f8a0 	bl	800f588 <__malloc_unlock>
 800f448:	f104 000b 	add.w	r0, r4, #11
 800f44c:	1d23      	adds	r3, r4, #4
 800f44e:	f020 0007 	bic.w	r0, r0, #7
 800f452:	1ac2      	subs	r2, r0, r3
 800f454:	d0cc      	beq.n	800f3f0 <_malloc_r+0x20>
 800f456:	1a1b      	subs	r3, r3, r0
 800f458:	50a3      	str	r3, [r4, r2]
 800f45a:	e7c9      	b.n	800f3f0 <_malloc_r+0x20>
 800f45c:	4622      	mov	r2, r4
 800f45e:	6864      	ldr	r4, [r4, #4]
 800f460:	e7cc      	b.n	800f3fc <_malloc_r+0x2c>
 800f462:	1cc4      	adds	r4, r0, #3
 800f464:	f024 0403 	bic.w	r4, r4, #3
 800f468:	42a0      	cmp	r0, r4
 800f46a:	d0e3      	beq.n	800f434 <_malloc_r+0x64>
 800f46c:	1a21      	subs	r1, r4, r0
 800f46e:	4630      	mov	r0, r6
 800f470:	f000 f808 	bl	800f484 <_sbrk_r>
 800f474:	3001      	adds	r0, #1
 800f476:	d1dd      	bne.n	800f434 <_malloc_r+0x64>
 800f478:	e7cf      	b.n	800f41a <_malloc_r+0x4a>
 800f47a:	bf00      	nop
 800f47c:	200003c0 	.word	0x200003c0
 800f480:	200003c4 	.word	0x200003c4

0800f484 <_sbrk_r>:
 800f484:	b538      	push	{r3, r4, r5, lr}
 800f486:	4d06      	ldr	r5, [pc, #24]	; (800f4a0 <_sbrk_r+0x1c>)
 800f488:	2300      	movs	r3, #0
 800f48a:	4604      	mov	r4, r0
 800f48c:	4608      	mov	r0, r1
 800f48e:	602b      	str	r3, [r5, #0]
 800f490:	f7f4 fc86 	bl	8003da0 <_sbrk>
 800f494:	1c43      	adds	r3, r0, #1
 800f496:	d102      	bne.n	800f49e <_sbrk_r+0x1a>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	b103      	cbz	r3, 800f49e <_sbrk_r+0x1a>
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
 800f4a0:	20000464 	.word	0x20000464

0800f4a4 <_raise_r>:
 800f4a4:	291f      	cmp	r1, #31
 800f4a6:	b538      	push	{r3, r4, r5, lr}
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	d904      	bls.n	800f4b8 <_raise_r+0x14>
 800f4ae:	2316      	movs	r3, #22
 800f4b0:	6003      	str	r3, [r0, #0]
 800f4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b6:	bd38      	pop	{r3, r4, r5, pc}
 800f4b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4ba:	b112      	cbz	r2, 800f4c2 <_raise_r+0x1e>
 800f4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4c0:	b94b      	cbnz	r3, 800f4d6 <_raise_r+0x32>
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 f830 	bl	800f528 <_getpid_r>
 800f4c8:	462a      	mov	r2, r5
 800f4ca:	4601      	mov	r1, r0
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4d2:	f000 b817 	b.w	800f504 <_kill_r>
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d00a      	beq.n	800f4f0 <_raise_r+0x4c>
 800f4da:	1c59      	adds	r1, r3, #1
 800f4dc:	d103      	bne.n	800f4e6 <_raise_r+0x42>
 800f4de:	2316      	movs	r3, #22
 800f4e0:	6003      	str	r3, [r0, #0]
 800f4e2:	2001      	movs	r0, #1
 800f4e4:	e7e7      	b.n	800f4b6 <_raise_r+0x12>
 800f4e6:	2400      	movs	r4, #0
 800f4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	4798      	blx	r3
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	e7e0      	b.n	800f4b6 <_raise_r+0x12>

0800f4f4 <raise>:
 800f4f4:	4b02      	ldr	r3, [pc, #8]	; (800f500 <raise+0xc>)
 800f4f6:	4601      	mov	r1, r0
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	f7ff bfd3 	b.w	800f4a4 <_raise_r>
 800f4fe:	bf00      	nop
 800f500:	2000001c 	.word	0x2000001c

0800f504 <_kill_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d07      	ldr	r5, [pc, #28]	; (800f524 <_kill_r+0x20>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4604      	mov	r4, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	4611      	mov	r1, r2
 800f510:	602b      	str	r3, [r5, #0]
 800f512:	f7f4 fc2b 	bl	8003d6c <_kill>
 800f516:	1c43      	adds	r3, r0, #1
 800f518:	d102      	bne.n	800f520 <_kill_r+0x1c>
 800f51a:	682b      	ldr	r3, [r5, #0]
 800f51c:	b103      	cbz	r3, 800f520 <_kill_r+0x1c>
 800f51e:	6023      	str	r3, [r4, #0]
 800f520:	bd38      	pop	{r3, r4, r5, pc}
 800f522:	bf00      	nop
 800f524:	20000464 	.word	0x20000464

0800f528 <_getpid_r>:
 800f528:	f7f4 bc18 	b.w	8003d5c <_getpid>

0800f52c <siprintf>:
 800f52c:	b40e      	push	{r1, r2, r3}
 800f52e:	b500      	push	{lr}
 800f530:	b09c      	sub	sp, #112	; 0x70
 800f532:	ab1d      	add	r3, sp, #116	; 0x74
 800f534:	9002      	str	r0, [sp, #8]
 800f536:	9006      	str	r0, [sp, #24]
 800f538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f53c:	4809      	ldr	r0, [pc, #36]	; (800f564 <siprintf+0x38>)
 800f53e:	9107      	str	r1, [sp, #28]
 800f540:	9104      	str	r1, [sp, #16]
 800f542:	4909      	ldr	r1, [pc, #36]	; (800f568 <siprintf+0x3c>)
 800f544:	f853 2b04 	ldr.w	r2, [r3], #4
 800f548:	9105      	str	r1, [sp, #20]
 800f54a:	6800      	ldr	r0, [r0, #0]
 800f54c:	9301      	str	r3, [sp, #4]
 800f54e:	a902      	add	r1, sp, #8
 800f550:	f000 f87c 	bl	800f64c <_svfiprintf_r>
 800f554:	9b02      	ldr	r3, [sp, #8]
 800f556:	2200      	movs	r2, #0
 800f558:	701a      	strb	r2, [r3, #0]
 800f55a:	b01c      	add	sp, #112	; 0x70
 800f55c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f560:	b003      	add	sp, #12
 800f562:	4770      	bx	lr
 800f564:	2000001c 	.word	0x2000001c
 800f568:	ffff0208 	.word	0xffff0208

0800f56c <strcpy>:
 800f56c:	4603      	mov	r3, r0
 800f56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f572:	f803 2b01 	strb.w	r2, [r3], #1
 800f576:	2a00      	cmp	r2, #0
 800f578:	d1f9      	bne.n	800f56e <strcpy+0x2>
 800f57a:	4770      	bx	lr

0800f57c <__malloc_lock>:
 800f57c:	4801      	ldr	r0, [pc, #4]	; (800f584 <__malloc_lock+0x8>)
 800f57e:	f000 baf9 	b.w	800fb74 <__retarget_lock_acquire_recursive>
 800f582:	bf00      	nop
 800f584:	2000046c 	.word	0x2000046c

0800f588 <__malloc_unlock>:
 800f588:	4801      	ldr	r0, [pc, #4]	; (800f590 <__malloc_unlock+0x8>)
 800f58a:	f000 baf4 	b.w	800fb76 <__retarget_lock_release_recursive>
 800f58e:	bf00      	nop
 800f590:	2000046c 	.word	0x2000046c

0800f594 <__ssputs_r>:
 800f594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f598:	688e      	ldr	r6, [r1, #8]
 800f59a:	429e      	cmp	r6, r3
 800f59c:	4682      	mov	sl, r0
 800f59e:	460c      	mov	r4, r1
 800f5a0:	4690      	mov	r8, r2
 800f5a2:	461f      	mov	r7, r3
 800f5a4:	d838      	bhi.n	800f618 <__ssputs_r+0x84>
 800f5a6:	898a      	ldrh	r2, [r1, #12]
 800f5a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5ac:	d032      	beq.n	800f614 <__ssputs_r+0x80>
 800f5ae:	6825      	ldr	r5, [r4, #0]
 800f5b0:	6909      	ldr	r1, [r1, #16]
 800f5b2:	eba5 0901 	sub.w	r9, r5, r1
 800f5b6:	6965      	ldr	r5, [r4, #20]
 800f5b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	444b      	add	r3, r9
 800f5c4:	106d      	asrs	r5, r5, #1
 800f5c6:	429d      	cmp	r5, r3
 800f5c8:	bf38      	it	cc
 800f5ca:	461d      	movcc	r5, r3
 800f5cc:	0553      	lsls	r3, r2, #21
 800f5ce:	d531      	bpl.n	800f634 <__ssputs_r+0xa0>
 800f5d0:	4629      	mov	r1, r5
 800f5d2:	f7ff fefd 	bl	800f3d0 <_malloc_r>
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	b950      	cbnz	r0, 800f5f0 <__ssputs_r+0x5c>
 800f5da:	230c      	movs	r3, #12
 800f5dc:	f8ca 3000 	str.w	r3, [sl]
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5e6:	81a3      	strh	r3, [r4, #12]
 800f5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f0:	6921      	ldr	r1, [r4, #16]
 800f5f2:	464a      	mov	r2, r9
 800f5f4:	f7ff fe5c 	bl	800f2b0 <memcpy>
 800f5f8:	89a3      	ldrh	r3, [r4, #12]
 800f5fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	6126      	str	r6, [r4, #16]
 800f606:	6165      	str	r5, [r4, #20]
 800f608:	444e      	add	r6, r9
 800f60a:	eba5 0509 	sub.w	r5, r5, r9
 800f60e:	6026      	str	r6, [r4, #0]
 800f610:	60a5      	str	r5, [r4, #8]
 800f612:	463e      	mov	r6, r7
 800f614:	42be      	cmp	r6, r7
 800f616:	d900      	bls.n	800f61a <__ssputs_r+0x86>
 800f618:	463e      	mov	r6, r7
 800f61a:	4632      	mov	r2, r6
 800f61c:	6820      	ldr	r0, [r4, #0]
 800f61e:	4641      	mov	r1, r8
 800f620:	f7ff fe54 	bl	800f2cc <memmove>
 800f624:	68a3      	ldr	r3, [r4, #8]
 800f626:	6822      	ldr	r2, [r4, #0]
 800f628:	1b9b      	subs	r3, r3, r6
 800f62a:	4432      	add	r2, r6
 800f62c:	60a3      	str	r3, [r4, #8]
 800f62e:	6022      	str	r2, [r4, #0]
 800f630:	2000      	movs	r0, #0
 800f632:	e7db      	b.n	800f5ec <__ssputs_r+0x58>
 800f634:	462a      	mov	r2, r5
 800f636:	f000 fa9f 	bl	800fb78 <_realloc_r>
 800f63a:	4606      	mov	r6, r0
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d1e1      	bne.n	800f604 <__ssputs_r+0x70>
 800f640:	6921      	ldr	r1, [r4, #16]
 800f642:	4650      	mov	r0, sl
 800f644:	f7ff fe74 	bl	800f330 <_free_r>
 800f648:	e7c7      	b.n	800f5da <__ssputs_r+0x46>
	...

0800f64c <_svfiprintf_r>:
 800f64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f650:	4698      	mov	r8, r3
 800f652:	898b      	ldrh	r3, [r1, #12]
 800f654:	061b      	lsls	r3, r3, #24
 800f656:	b09d      	sub	sp, #116	; 0x74
 800f658:	4607      	mov	r7, r0
 800f65a:	460d      	mov	r5, r1
 800f65c:	4614      	mov	r4, r2
 800f65e:	d50e      	bpl.n	800f67e <_svfiprintf_r+0x32>
 800f660:	690b      	ldr	r3, [r1, #16]
 800f662:	b963      	cbnz	r3, 800f67e <_svfiprintf_r+0x32>
 800f664:	2140      	movs	r1, #64	; 0x40
 800f666:	f7ff feb3 	bl	800f3d0 <_malloc_r>
 800f66a:	6028      	str	r0, [r5, #0]
 800f66c:	6128      	str	r0, [r5, #16]
 800f66e:	b920      	cbnz	r0, 800f67a <_svfiprintf_r+0x2e>
 800f670:	230c      	movs	r3, #12
 800f672:	603b      	str	r3, [r7, #0]
 800f674:	f04f 30ff 	mov.w	r0, #4294967295
 800f678:	e0d1      	b.n	800f81e <_svfiprintf_r+0x1d2>
 800f67a:	2340      	movs	r3, #64	; 0x40
 800f67c:	616b      	str	r3, [r5, #20]
 800f67e:	2300      	movs	r3, #0
 800f680:	9309      	str	r3, [sp, #36]	; 0x24
 800f682:	2320      	movs	r3, #32
 800f684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f688:	f8cd 800c 	str.w	r8, [sp, #12]
 800f68c:	2330      	movs	r3, #48	; 0x30
 800f68e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f838 <_svfiprintf_r+0x1ec>
 800f692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f696:	f04f 0901 	mov.w	r9, #1
 800f69a:	4623      	mov	r3, r4
 800f69c:	469a      	mov	sl, r3
 800f69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6a2:	b10a      	cbz	r2, 800f6a8 <_svfiprintf_r+0x5c>
 800f6a4:	2a25      	cmp	r2, #37	; 0x25
 800f6a6:	d1f9      	bne.n	800f69c <_svfiprintf_r+0x50>
 800f6a8:	ebba 0b04 	subs.w	fp, sl, r4
 800f6ac:	d00b      	beq.n	800f6c6 <_svfiprintf_r+0x7a>
 800f6ae:	465b      	mov	r3, fp
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	4638      	mov	r0, r7
 800f6b6:	f7ff ff6d 	bl	800f594 <__ssputs_r>
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	f000 80aa 	beq.w	800f814 <_svfiprintf_r+0x1c8>
 800f6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6c2:	445a      	add	r2, fp
 800f6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800f6c6:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f000 80a2 	beq.w	800f814 <_svfiprintf_r+0x1c8>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6da:	f10a 0a01 	add.w	sl, sl, #1
 800f6de:	9304      	str	r3, [sp, #16]
 800f6e0:	9307      	str	r3, [sp, #28]
 800f6e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6e6:	931a      	str	r3, [sp, #104]	; 0x68
 800f6e8:	4654      	mov	r4, sl
 800f6ea:	2205      	movs	r2, #5
 800f6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6f0:	4851      	ldr	r0, [pc, #324]	; (800f838 <_svfiprintf_r+0x1ec>)
 800f6f2:	f7f0 fe0d 	bl	8000310 <memchr>
 800f6f6:	9a04      	ldr	r2, [sp, #16]
 800f6f8:	b9d8      	cbnz	r0, 800f732 <_svfiprintf_r+0xe6>
 800f6fa:	06d0      	lsls	r0, r2, #27
 800f6fc:	bf44      	itt	mi
 800f6fe:	2320      	movmi	r3, #32
 800f700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f704:	0711      	lsls	r1, r2, #28
 800f706:	bf44      	itt	mi
 800f708:	232b      	movmi	r3, #43	; 0x2b
 800f70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f70e:	f89a 3000 	ldrb.w	r3, [sl]
 800f712:	2b2a      	cmp	r3, #42	; 0x2a
 800f714:	d015      	beq.n	800f742 <_svfiprintf_r+0xf6>
 800f716:	9a07      	ldr	r2, [sp, #28]
 800f718:	4654      	mov	r4, sl
 800f71a:	2000      	movs	r0, #0
 800f71c:	f04f 0c0a 	mov.w	ip, #10
 800f720:	4621      	mov	r1, r4
 800f722:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f726:	3b30      	subs	r3, #48	; 0x30
 800f728:	2b09      	cmp	r3, #9
 800f72a:	d94e      	bls.n	800f7ca <_svfiprintf_r+0x17e>
 800f72c:	b1b0      	cbz	r0, 800f75c <_svfiprintf_r+0x110>
 800f72e:	9207      	str	r2, [sp, #28]
 800f730:	e014      	b.n	800f75c <_svfiprintf_r+0x110>
 800f732:	eba0 0308 	sub.w	r3, r0, r8
 800f736:	fa09 f303 	lsl.w	r3, r9, r3
 800f73a:	4313      	orrs	r3, r2
 800f73c:	9304      	str	r3, [sp, #16]
 800f73e:	46a2      	mov	sl, r4
 800f740:	e7d2      	b.n	800f6e8 <_svfiprintf_r+0x9c>
 800f742:	9b03      	ldr	r3, [sp, #12]
 800f744:	1d19      	adds	r1, r3, #4
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	9103      	str	r1, [sp, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	bfbb      	ittet	lt
 800f74e:	425b      	neglt	r3, r3
 800f750:	f042 0202 	orrlt.w	r2, r2, #2
 800f754:	9307      	strge	r3, [sp, #28]
 800f756:	9307      	strlt	r3, [sp, #28]
 800f758:	bfb8      	it	lt
 800f75a:	9204      	strlt	r2, [sp, #16]
 800f75c:	7823      	ldrb	r3, [r4, #0]
 800f75e:	2b2e      	cmp	r3, #46	; 0x2e
 800f760:	d10c      	bne.n	800f77c <_svfiprintf_r+0x130>
 800f762:	7863      	ldrb	r3, [r4, #1]
 800f764:	2b2a      	cmp	r3, #42	; 0x2a
 800f766:	d135      	bne.n	800f7d4 <_svfiprintf_r+0x188>
 800f768:	9b03      	ldr	r3, [sp, #12]
 800f76a:	1d1a      	adds	r2, r3, #4
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	9203      	str	r2, [sp, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	bfb8      	it	lt
 800f774:	f04f 33ff 	movlt.w	r3, #4294967295
 800f778:	3402      	adds	r4, #2
 800f77a:	9305      	str	r3, [sp, #20]
 800f77c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f848 <_svfiprintf_r+0x1fc>
 800f780:	7821      	ldrb	r1, [r4, #0]
 800f782:	2203      	movs	r2, #3
 800f784:	4650      	mov	r0, sl
 800f786:	f7f0 fdc3 	bl	8000310 <memchr>
 800f78a:	b140      	cbz	r0, 800f79e <_svfiprintf_r+0x152>
 800f78c:	2340      	movs	r3, #64	; 0x40
 800f78e:	eba0 000a 	sub.w	r0, r0, sl
 800f792:	fa03 f000 	lsl.w	r0, r3, r0
 800f796:	9b04      	ldr	r3, [sp, #16]
 800f798:	4303      	orrs	r3, r0
 800f79a:	3401      	adds	r4, #1
 800f79c:	9304      	str	r3, [sp, #16]
 800f79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a2:	4826      	ldr	r0, [pc, #152]	; (800f83c <_svfiprintf_r+0x1f0>)
 800f7a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7a8:	2206      	movs	r2, #6
 800f7aa:	f7f0 fdb1 	bl	8000310 <memchr>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d038      	beq.n	800f824 <_svfiprintf_r+0x1d8>
 800f7b2:	4b23      	ldr	r3, [pc, #140]	; (800f840 <_svfiprintf_r+0x1f4>)
 800f7b4:	bb1b      	cbnz	r3, 800f7fe <_svfiprintf_r+0x1b2>
 800f7b6:	9b03      	ldr	r3, [sp, #12]
 800f7b8:	3307      	adds	r3, #7
 800f7ba:	f023 0307 	bic.w	r3, r3, #7
 800f7be:	3308      	adds	r3, #8
 800f7c0:	9303      	str	r3, [sp, #12]
 800f7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c4:	4433      	add	r3, r6
 800f7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c8:	e767      	b.n	800f69a <_svfiprintf_r+0x4e>
 800f7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	2001      	movs	r0, #1
 800f7d2:	e7a5      	b.n	800f720 <_svfiprintf_r+0xd4>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	3401      	adds	r4, #1
 800f7d8:	9305      	str	r3, [sp, #20]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	f04f 0c0a 	mov.w	ip, #10
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7e6:	3a30      	subs	r2, #48	; 0x30
 800f7e8:	2a09      	cmp	r2, #9
 800f7ea:	d903      	bls.n	800f7f4 <_svfiprintf_r+0x1a8>
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d0c5      	beq.n	800f77c <_svfiprintf_r+0x130>
 800f7f0:	9105      	str	r1, [sp, #20]
 800f7f2:	e7c3      	b.n	800f77c <_svfiprintf_r+0x130>
 800f7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e7f0      	b.n	800f7e0 <_svfiprintf_r+0x194>
 800f7fe:	ab03      	add	r3, sp, #12
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	462a      	mov	r2, r5
 800f804:	4b0f      	ldr	r3, [pc, #60]	; (800f844 <_svfiprintf_r+0x1f8>)
 800f806:	a904      	add	r1, sp, #16
 800f808:	4638      	mov	r0, r7
 800f80a:	f3af 8000 	nop.w
 800f80e:	1c42      	adds	r2, r0, #1
 800f810:	4606      	mov	r6, r0
 800f812:	d1d6      	bne.n	800f7c2 <_svfiprintf_r+0x176>
 800f814:	89ab      	ldrh	r3, [r5, #12]
 800f816:	065b      	lsls	r3, r3, #25
 800f818:	f53f af2c 	bmi.w	800f674 <_svfiprintf_r+0x28>
 800f81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f81e:	b01d      	add	sp, #116	; 0x74
 800f820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f824:	ab03      	add	r3, sp, #12
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	462a      	mov	r2, r5
 800f82a:	4b06      	ldr	r3, [pc, #24]	; (800f844 <_svfiprintf_r+0x1f8>)
 800f82c:	a904      	add	r1, sp, #16
 800f82e:	4638      	mov	r0, r7
 800f830:	f000 f87a 	bl	800f928 <_printf_i>
 800f834:	e7eb      	b.n	800f80e <_svfiprintf_r+0x1c2>
 800f836:	bf00      	nop
 800f838:	0802ae18 	.word	0x0802ae18
 800f83c:	0802ae22 	.word	0x0802ae22
 800f840:	00000000 	.word	0x00000000
 800f844:	0800f595 	.word	0x0800f595
 800f848:	0802ae1e 	.word	0x0802ae1e

0800f84c <_printf_common>:
 800f84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f850:	4616      	mov	r6, r2
 800f852:	4699      	mov	r9, r3
 800f854:	688a      	ldr	r2, [r1, #8]
 800f856:	690b      	ldr	r3, [r1, #16]
 800f858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f85c:	4293      	cmp	r3, r2
 800f85e:	bfb8      	it	lt
 800f860:	4613      	movlt	r3, r2
 800f862:	6033      	str	r3, [r6, #0]
 800f864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f868:	4607      	mov	r7, r0
 800f86a:	460c      	mov	r4, r1
 800f86c:	b10a      	cbz	r2, 800f872 <_printf_common+0x26>
 800f86e:	3301      	adds	r3, #1
 800f870:	6033      	str	r3, [r6, #0]
 800f872:	6823      	ldr	r3, [r4, #0]
 800f874:	0699      	lsls	r1, r3, #26
 800f876:	bf42      	ittt	mi
 800f878:	6833      	ldrmi	r3, [r6, #0]
 800f87a:	3302      	addmi	r3, #2
 800f87c:	6033      	strmi	r3, [r6, #0]
 800f87e:	6825      	ldr	r5, [r4, #0]
 800f880:	f015 0506 	ands.w	r5, r5, #6
 800f884:	d106      	bne.n	800f894 <_printf_common+0x48>
 800f886:	f104 0a19 	add.w	sl, r4, #25
 800f88a:	68e3      	ldr	r3, [r4, #12]
 800f88c:	6832      	ldr	r2, [r6, #0]
 800f88e:	1a9b      	subs	r3, r3, r2
 800f890:	42ab      	cmp	r3, r5
 800f892:	dc26      	bgt.n	800f8e2 <_printf_common+0x96>
 800f894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f898:	1e13      	subs	r3, r2, #0
 800f89a:	6822      	ldr	r2, [r4, #0]
 800f89c:	bf18      	it	ne
 800f89e:	2301      	movne	r3, #1
 800f8a0:	0692      	lsls	r2, r2, #26
 800f8a2:	d42b      	bmi.n	800f8fc <_printf_common+0xb0>
 800f8a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8a8:	4649      	mov	r1, r9
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	47c0      	blx	r8
 800f8ae:	3001      	adds	r0, #1
 800f8b0:	d01e      	beq.n	800f8f0 <_printf_common+0xa4>
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	68e5      	ldr	r5, [r4, #12]
 800f8b6:	6832      	ldr	r2, [r6, #0]
 800f8b8:	f003 0306 	and.w	r3, r3, #6
 800f8bc:	2b04      	cmp	r3, #4
 800f8be:	bf08      	it	eq
 800f8c0:	1aad      	subeq	r5, r5, r2
 800f8c2:	68a3      	ldr	r3, [r4, #8]
 800f8c4:	6922      	ldr	r2, [r4, #16]
 800f8c6:	bf0c      	ite	eq
 800f8c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8cc:	2500      	movne	r5, #0
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	bfc4      	itt	gt
 800f8d2:	1a9b      	subgt	r3, r3, r2
 800f8d4:	18ed      	addgt	r5, r5, r3
 800f8d6:	2600      	movs	r6, #0
 800f8d8:	341a      	adds	r4, #26
 800f8da:	42b5      	cmp	r5, r6
 800f8dc:	d11a      	bne.n	800f914 <_printf_common+0xc8>
 800f8de:	2000      	movs	r0, #0
 800f8e0:	e008      	b.n	800f8f4 <_printf_common+0xa8>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	4652      	mov	r2, sl
 800f8e6:	4649      	mov	r1, r9
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	47c0      	blx	r8
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	d103      	bne.n	800f8f8 <_printf_common+0xac>
 800f8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f8:	3501      	adds	r5, #1
 800f8fa:	e7c6      	b.n	800f88a <_printf_common+0x3e>
 800f8fc:	18e1      	adds	r1, r4, r3
 800f8fe:	1c5a      	adds	r2, r3, #1
 800f900:	2030      	movs	r0, #48	; 0x30
 800f902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f906:	4422      	add	r2, r4
 800f908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f90c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f910:	3302      	adds	r3, #2
 800f912:	e7c7      	b.n	800f8a4 <_printf_common+0x58>
 800f914:	2301      	movs	r3, #1
 800f916:	4622      	mov	r2, r4
 800f918:	4649      	mov	r1, r9
 800f91a:	4638      	mov	r0, r7
 800f91c:	47c0      	blx	r8
 800f91e:	3001      	adds	r0, #1
 800f920:	d0e6      	beq.n	800f8f0 <_printf_common+0xa4>
 800f922:	3601      	adds	r6, #1
 800f924:	e7d9      	b.n	800f8da <_printf_common+0x8e>
	...

0800f928 <_printf_i>:
 800f928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f92c:	460c      	mov	r4, r1
 800f92e:	4691      	mov	r9, r2
 800f930:	7e27      	ldrb	r7, [r4, #24]
 800f932:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f934:	2f78      	cmp	r7, #120	; 0x78
 800f936:	4680      	mov	r8, r0
 800f938:	469a      	mov	sl, r3
 800f93a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f93e:	d807      	bhi.n	800f950 <_printf_i+0x28>
 800f940:	2f62      	cmp	r7, #98	; 0x62
 800f942:	d80a      	bhi.n	800f95a <_printf_i+0x32>
 800f944:	2f00      	cmp	r7, #0
 800f946:	f000 80d8 	beq.w	800fafa <_printf_i+0x1d2>
 800f94a:	2f58      	cmp	r7, #88	; 0x58
 800f94c:	f000 80a3 	beq.w	800fa96 <_printf_i+0x16e>
 800f950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f958:	e03a      	b.n	800f9d0 <_printf_i+0xa8>
 800f95a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f95e:	2b15      	cmp	r3, #21
 800f960:	d8f6      	bhi.n	800f950 <_printf_i+0x28>
 800f962:	a001      	add	r0, pc, #4	; (adr r0, 800f968 <_printf_i+0x40>)
 800f964:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f968:	0800f9c1 	.word	0x0800f9c1
 800f96c:	0800f9d5 	.word	0x0800f9d5
 800f970:	0800f951 	.word	0x0800f951
 800f974:	0800f951 	.word	0x0800f951
 800f978:	0800f951 	.word	0x0800f951
 800f97c:	0800f951 	.word	0x0800f951
 800f980:	0800f9d5 	.word	0x0800f9d5
 800f984:	0800f951 	.word	0x0800f951
 800f988:	0800f951 	.word	0x0800f951
 800f98c:	0800f951 	.word	0x0800f951
 800f990:	0800f951 	.word	0x0800f951
 800f994:	0800fae1 	.word	0x0800fae1
 800f998:	0800fa05 	.word	0x0800fa05
 800f99c:	0800fac3 	.word	0x0800fac3
 800f9a0:	0800f951 	.word	0x0800f951
 800f9a4:	0800f951 	.word	0x0800f951
 800f9a8:	0800fb03 	.word	0x0800fb03
 800f9ac:	0800f951 	.word	0x0800f951
 800f9b0:	0800fa05 	.word	0x0800fa05
 800f9b4:	0800f951 	.word	0x0800f951
 800f9b8:	0800f951 	.word	0x0800f951
 800f9bc:	0800facb 	.word	0x0800facb
 800f9c0:	680b      	ldr	r3, [r1, #0]
 800f9c2:	1d1a      	adds	r2, r3, #4
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	600a      	str	r2, [r1, #0]
 800f9c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	e0a3      	b.n	800fb1c <_printf_i+0x1f4>
 800f9d4:	6825      	ldr	r5, [r4, #0]
 800f9d6:	6808      	ldr	r0, [r1, #0]
 800f9d8:	062e      	lsls	r6, r5, #24
 800f9da:	f100 0304 	add.w	r3, r0, #4
 800f9de:	d50a      	bpl.n	800f9f6 <_printf_i+0xce>
 800f9e0:	6805      	ldr	r5, [r0, #0]
 800f9e2:	600b      	str	r3, [r1, #0]
 800f9e4:	2d00      	cmp	r5, #0
 800f9e6:	da03      	bge.n	800f9f0 <_printf_i+0xc8>
 800f9e8:	232d      	movs	r3, #45	; 0x2d
 800f9ea:	426d      	negs	r5, r5
 800f9ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9f0:	485e      	ldr	r0, [pc, #376]	; (800fb6c <_printf_i+0x244>)
 800f9f2:	230a      	movs	r3, #10
 800f9f4:	e019      	b.n	800fa2a <_printf_i+0x102>
 800f9f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f9fa:	6805      	ldr	r5, [r0, #0]
 800f9fc:	600b      	str	r3, [r1, #0]
 800f9fe:	bf18      	it	ne
 800fa00:	b22d      	sxthne	r5, r5
 800fa02:	e7ef      	b.n	800f9e4 <_printf_i+0xbc>
 800fa04:	680b      	ldr	r3, [r1, #0]
 800fa06:	6825      	ldr	r5, [r4, #0]
 800fa08:	1d18      	adds	r0, r3, #4
 800fa0a:	6008      	str	r0, [r1, #0]
 800fa0c:	0628      	lsls	r0, r5, #24
 800fa0e:	d501      	bpl.n	800fa14 <_printf_i+0xec>
 800fa10:	681d      	ldr	r5, [r3, #0]
 800fa12:	e002      	b.n	800fa1a <_printf_i+0xf2>
 800fa14:	0669      	lsls	r1, r5, #25
 800fa16:	d5fb      	bpl.n	800fa10 <_printf_i+0xe8>
 800fa18:	881d      	ldrh	r5, [r3, #0]
 800fa1a:	4854      	ldr	r0, [pc, #336]	; (800fb6c <_printf_i+0x244>)
 800fa1c:	2f6f      	cmp	r7, #111	; 0x6f
 800fa1e:	bf0c      	ite	eq
 800fa20:	2308      	moveq	r3, #8
 800fa22:	230a      	movne	r3, #10
 800fa24:	2100      	movs	r1, #0
 800fa26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa2a:	6866      	ldr	r6, [r4, #4]
 800fa2c:	60a6      	str	r6, [r4, #8]
 800fa2e:	2e00      	cmp	r6, #0
 800fa30:	bfa2      	ittt	ge
 800fa32:	6821      	ldrge	r1, [r4, #0]
 800fa34:	f021 0104 	bicge.w	r1, r1, #4
 800fa38:	6021      	strge	r1, [r4, #0]
 800fa3a:	b90d      	cbnz	r5, 800fa40 <_printf_i+0x118>
 800fa3c:	2e00      	cmp	r6, #0
 800fa3e:	d04d      	beq.n	800fadc <_printf_i+0x1b4>
 800fa40:	4616      	mov	r6, r2
 800fa42:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa46:	fb03 5711 	mls	r7, r3, r1, r5
 800fa4a:	5dc7      	ldrb	r7, [r0, r7]
 800fa4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa50:	462f      	mov	r7, r5
 800fa52:	42bb      	cmp	r3, r7
 800fa54:	460d      	mov	r5, r1
 800fa56:	d9f4      	bls.n	800fa42 <_printf_i+0x11a>
 800fa58:	2b08      	cmp	r3, #8
 800fa5a:	d10b      	bne.n	800fa74 <_printf_i+0x14c>
 800fa5c:	6823      	ldr	r3, [r4, #0]
 800fa5e:	07df      	lsls	r7, r3, #31
 800fa60:	d508      	bpl.n	800fa74 <_printf_i+0x14c>
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	6861      	ldr	r1, [r4, #4]
 800fa66:	4299      	cmp	r1, r3
 800fa68:	bfde      	ittt	le
 800fa6a:	2330      	movle	r3, #48	; 0x30
 800fa6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa70:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa74:	1b92      	subs	r2, r2, r6
 800fa76:	6122      	str	r2, [r4, #16]
 800fa78:	f8cd a000 	str.w	sl, [sp]
 800fa7c:	464b      	mov	r3, r9
 800fa7e:	aa03      	add	r2, sp, #12
 800fa80:	4621      	mov	r1, r4
 800fa82:	4640      	mov	r0, r8
 800fa84:	f7ff fee2 	bl	800f84c <_printf_common>
 800fa88:	3001      	adds	r0, #1
 800fa8a:	d14c      	bne.n	800fb26 <_printf_i+0x1fe>
 800fa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa90:	b004      	add	sp, #16
 800fa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa96:	4835      	ldr	r0, [pc, #212]	; (800fb6c <_printf_i+0x244>)
 800fa98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	680e      	ldr	r6, [r1, #0]
 800faa0:	061f      	lsls	r7, r3, #24
 800faa2:	f856 5b04 	ldr.w	r5, [r6], #4
 800faa6:	600e      	str	r6, [r1, #0]
 800faa8:	d514      	bpl.n	800fad4 <_printf_i+0x1ac>
 800faaa:	07d9      	lsls	r1, r3, #31
 800faac:	bf44      	itt	mi
 800faae:	f043 0320 	orrmi.w	r3, r3, #32
 800fab2:	6023      	strmi	r3, [r4, #0]
 800fab4:	b91d      	cbnz	r5, 800fabe <_printf_i+0x196>
 800fab6:	6823      	ldr	r3, [r4, #0]
 800fab8:	f023 0320 	bic.w	r3, r3, #32
 800fabc:	6023      	str	r3, [r4, #0]
 800fabe:	2310      	movs	r3, #16
 800fac0:	e7b0      	b.n	800fa24 <_printf_i+0xfc>
 800fac2:	6823      	ldr	r3, [r4, #0]
 800fac4:	f043 0320 	orr.w	r3, r3, #32
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	2378      	movs	r3, #120	; 0x78
 800facc:	4828      	ldr	r0, [pc, #160]	; (800fb70 <_printf_i+0x248>)
 800face:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fad2:	e7e3      	b.n	800fa9c <_printf_i+0x174>
 800fad4:	065e      	lsls	r6, r3, #25
 800fad6:	bf48      	it	mi
 800fad8:	b2ad      	uxthmi	r5, r5
 800fada:	e7e6      	b.n	800faaa <_printf_i+0x182>
 800fadc:	4616      	mov	r6, r2
 800fade:	e7bb      	b.n	800fa58 <_printf_i+0x130>
 800fae0:	680b      	ldr	r3, [r1, #0]
 800fae2:	6826      	ldr	r6, [r4, #0]
 800fae4:	6960      	ldr	r0, [r4, #20]
 800fae6:	1d1d      	adds	r5, r3, #4
 800fae8:	600d      	str	r5, [r1, #0]
 800faea:	0635      	lsls	r5, r6, #24
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	d501      	bpl.n	800faf4 <_printf_i+0x1cc>
 800faf0:	6018      	str	r0, [r3, #0]
 800faf2:	e002      	b.n	800fafa <_printf_i+0x1d2>
 800faf4:	0671      	lsls	r1, r6, #25
 800faf6:	d5fb      	bpl.n	800faf0 <_printf_i+0x1c8>
 800faf8:	8018      	strh	r0, [r3, #0]
 800fafa:	2300      	movs	r3, #0
 800fafc:	6123      	str	r3, [r4, #16]
 800fafe:	4616      	mov	r6, r2
 800fb00:	e7ba      	b.n	800fa78 <_printf_i+0x150>
 800fb02:	680b      	ldr	r3, [r1, #0]
 800fb04:	1d1a      	adds	r2, r3, #4
 800fb06:	600a      	str	r2, [r1, #0]
 800fb08:	681e      	ldr	r6, [r3, #0]
 800fb0a:	6862      	ldr	r2, [r4, #4]
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	4630      	mov	r0, r6
 800fb10:	f7f0 fbfe 	bl	8000310 <memchr>
 800fb14:	b108      	cbz	r0, 800fb1a <_printf_i+0x1f2>
 800fb16:	1b80      	subs	r0, r0, r6
 800fb18:	6060      	str	r0, [r4, #4]
 800fb1a:	6863      	ldr	r3, [r4, #4]
 800fb1c:	6123      	str	r3, [r4, #16]
 800fb1e:	2300      	movs	r3, #0
 800fb20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb24:	e7a8      	b.n	800fa78 <_printf_i+0x150>
 800fb26:	6923      	ldr	r3, [r4, #16]
 800fb28:	4632      	mov	r2, r6
 800fb2a:	4649      	mov	r1, r9
 800fb2c:	4640      	mov	r0, r8
 800fb2e:	47d0      	blx	sl
 800fb30:	3001      	adds	r0, #1
 800fb32:	d0ab      	beq.n	800fa8c <_printf_i+0x164>
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	079b      	lsls	r3, r3, #30
 800fb38:	d413      	bmi.n	800fb62 <_printf_i+0x23a>
 800fb3a:	68e0      	ldr	r0, [r4, #12]
 800fb3c:	9b03      	ldr	r3, [sp, #12]
 800fb3e:	4298      	cmp	r0, r3
 800fb40:	bfb8      	it	lt
 800fb42:	4618      	movlt	r0, r3
 800fb44:	e7a4      	b.n	800fa90 <_printf_i+0x168>
 800fb46:	2301      	movs	r3, #1
 800fb48:	4632      	mov	r2, r6
 800fb4a:	4649      	mov	r1, r9
 800fb4c:	4640      	mov	r0, r8
 800fb4e:	47d0      	blx	sl
 800fb50:	3001      	adds	r0, #1
 800fb52:	d09b      	beq.n	800fa8c <_printf_i+0x164>
 800fb54:	3501      	adds	r5, #1
 800fb56:	68e3      	ldr	r3, [r4, #12]
 800fb58:	9903      	ldr	r1, [sp, #12]
 800fb5a:	1a5b      	subs	r3, r3, r1
 800fb5c:	42ab      	cmp	r3, r5
 800fb5e:	dcf2      	bgt.n	800fb46 <_printf_i+0x21e>
 800fb60:	e7eb      	b.n	800fb3a <_printf_i+0x212>
 800fb62:	2500      	movs	r5, #0
 800fb64:	f104 0619 	add.w	r6, r4, #25
 800fb68:	e7f5      	b.n	800fb56 <_printf_i+0x22e>
 800fb6a:	bf00      	nop
 800fb6c:	0802ae29 	.word	0x0802ae29
 800fb70:	0802ae3a 	.word	0x0802ae3a

0800fb74 <__retarget_lock_acquire_recursive>:
 800fb74:	4770      	bx	lr

0800fb76 <__retarget_lock_release_recursive>:
 800fb76:	4770      	bx	lr

0800fb78 <_realloc_r>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	4614      	mov	r4, r2
 800fb7e:	460e      	mov	r6, r1
 800fb80:	b921      	cbnz	r1, 800fb8c <_realloc_r+0x14>
 800fb82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb86:	4611      	mov	r1, r2
 800fb88:	f7ff bc22 	b.w	800f3d0 <_malloc_r>
 800fb8c:	b922      	cbnz	r2, 800fb98 <_realloc_r+0x20>
 800fb8e:	f7ff fbcf 	bl	800f330 <_free_r>
 800fb92:	4625      	mov	r5, r4
 800fb94:	4628      	mov	r0, r5
 800fb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb98:	f000 f814 	bl	800fbc4 <_malloc_usable_size_r>
 800fb9c:	42a0      	cmp	r0, r4
 800fb9e:	d20f      	bcs.n	800fbc0 <_realloc_r+0x48>
 800fba0:	4621      	mov	r1, r4
 800fba2:	4638      	mov	r0, r7
 800fba4:	f7ff fc14 	bl	800f3d0 <_malloc_r>
 800fba8:	4605      	mov	r5, r0
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0f2      	beq.n	800fb94 <_realloc_r+0x1c>
 800fbae:	4631      	mov	r1, r6
 800fbb0:	4622      	mov	r2, r4
 800fbb2:	f7ff fb7d 	bl	800f2b0 <memcpy>
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	4638      	mov	r0, r7
 800fbba:	f7ff fbb9 	bl	800f330 <_free_r>
 800fbbe:	e7e9      	b.n	800fb94 <_realloc_r+0x1c>
 800fbc0:	4635      	mov	r5, r6
 800fbc2:	e7e7      	b.n	800fb94 <_realloc_r+0x1c>

0800fbc4 <_malloc_usable_size_r>:
 800fbc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbc8:	1f18      	subs	r0, r3, #4
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	bfbc      	itt	lt
 800fbce:	580b      	ldrlt	r3, [r1, r0]
 800fbd0:	18c0      	addlt	r0, r0, r3
 800fbd2:	4770      	bx	lr

0800fbd4 <_init>:
 800fbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd6:	bf00      	nop
 800fbd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbda:	bc08      	pop	{r3}
 800fbdc:	469e      	mov	lr, r3
 800fbde:	4770      	bx	lr

0800fbe0 <_fini>:
 800fbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbe2:	bf00      	nop
 800fbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbe6:	bc08      	pop	{r3}
 800fbe8:	469e      	mov	lr, r3
 800fbea:	4770      	bx	lr
